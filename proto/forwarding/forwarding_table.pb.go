// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Protocol buffers used for managing forwarding tables.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.12.4
// source: proto/forwarding/forwarding_table.proto

package forwarding

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A TableType enumerates the different types of forwarding tables.
// EXACT_TABLE
//   - These tables perform an exact match on all key fields.
//   - Table is described by KeyTableDesc.
//   - Entries are identified by KeyEntryDesc.
//   - Entries in the table can be marked as static or transient.
//   - A transient entry cannot update an existing static entry.
//   - The table may be configured to remove transient entries that are not
//     used for a configured amount of time.
//
// PREFIX_TABLE
//   - These tables perform a longest prefix match using all key fields.
//   - Table is described by KeyTableDesc.
//   - Entries are identified by KeyEntryDesc.
//
// FLOW_TABLE
//   - These tables perform a first match.
//   - Table is described by FlowTableDesc.
//   - Entries are identified by FlowEntryDesc.
//
// BRIDGE_TABLE
//   - This is a specialized table built using EXACT_TABLE.
//   - This table processes packets using an exact match lookup on the packet's
//     destination mac.
//   - The table contains entries added as ExactEntryDesc.
//   - It adds transient entries using the source mac of processed packets.
//   - The table may be configured to remove transient entries that are not
//     used for a configured amount of time.
type TableType int32

const (
	TableType_EXACT_TABLE  TableType = 1
	TableType_PREFIX_TABLE TableType = 2
	TableType_FLOW_TABLE   TableType = 3
	TableType_BRIDGE_TABLE TableType = 4
)

// Enum value maps for TableType.
var (
	TableType_name = map[int32]string{
		1: "EXACT_TABLE",
		2: "PREFIX_TABLE",
		3: "FLOW_TABLE",
		4: "BRIDGE_TABLE",
	}
	TableType_value = map[string]int32{
		"EXACT_TABLE":  1,
		"PREFIX_TABLE": 2,
		"FLOW_TABLE":   3,
		"BRIDGE_TABLE": 4,
	}
)

func (x TableType) Enum() *TableType {
	p := new(TableType)
	*p = x
	return p
}

func (x TableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_forwarding_forwarding_table_proto_enumTypes[0].Descriptor()
}

func (TableType) Type() protoreflect.EnumType {
	return &file_proto_forwarding_forwarding_table_proto_enumTypes[0]
}

func (x TableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TableType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TableType(num)
	return nil
}

// Deprecated: Use TableType.Descriptor instead.
func (TableType) EnumDescriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{0}
}

// A TableDesc descibes a table type and its default actions.
// Note that an extension must be always used. Each type of table is an
// extension with a unique extension number (1 greater than
// the previous extension).
type TableDesc struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Required type of the table.
	TableType *TableType `protobuf:"varint,1,opt,name=table_type,json=tableType,enum=forwarding.TableType" json:"table_type,omitempty"`
	// Optional set of default actions. If no actions are specified, the table
	// marks the packet to continue packet processing.
	Actions []*ActionDesc `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
	// Required id of the table.
	TableId *TableId `protobuf:"bytes,4,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (x *TableDesc) Reset() {
	*x = TableDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDesc) ProtoMessage() {}

func (x *TableDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDesc.ProtoReflect.Descriptor instead.
func (*TableDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{0}
}

func (x *TableDesc) GetTableType() TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return TableType_EXACT_TABLE
}

func (x *TableDesc) GetActions() []*ActionDesc {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TableDesc) GetTableId() *TableId {
	if x != nil {
		return x.TableId
	}
	return nil
}

// An EntryDesc describes how a table entry is identified.
// Note that an extension must be always used. Each type of entry is an
// extension with a unique extension number (1 greater than
// the previous extension).
type EntryDesc struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields
}

func (x *EntryDesc) Reset() {
	*x = EntryDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EntryDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryDesc) ProtoMessage() {}

func (x *EntryDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryDesc.ProtoReflect.Descriptor instead.
func (*EntryDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{1}
}

// An ExactTableDesc describes a EXACT_TABLE. All entries within the table are
// idenfied by unique keys formed by the specified packet fields. The table
// monitors and removes transient entries that are not used for a configured
// amount of time.
type ExactTableDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required packet fields used to match entries in the table.
	FieldIds []*PacketFieldId `protobuf:"bytes,1,rep,name=field_ids,json=fieldIds" json:"field_ids,omitempty"`
	// Optional timeout value for entries. If no timeout is specified, entries are
	// never timed out.
	TransientTimeout *uint32 `protobuf:"varint,2,opt,name=transient_timeout,json=transientTimeout,def=0" json:"transient_timeout,omitempty"`
}

// Default values for ExactTableDesc fields.
const (
	Default_ExactTableDesc_TransientTimeout = uint32(0)
)

func (x *ExactTableDesc) Reset() {
	*x = ExactTableDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExactTableDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExactTableDesc) ProtoMessage() {}

func (x *ExactTableDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExactTableDesc.ProtoReflect.Descriptor instead.
func (*ExactTableDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{2}
}

func (x *ExactTableDesc) GetFieldIds() []*PacketFieldId {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

func (x *ExactTableDesc) GetTransientTimeout() uint32 {
	if x != nil && x.TransientTimeout != nil {
		return *x.TransientTimeout
	}
	return Default_ExactTableDesc_TransientTimeout
}

// A ExactEntryDesc describes an entry in an EXACT_TABLE. An entry in the table
// is idenfied by the values of the specified packet fields.
// Note that the ordering of the packet fields is determined by the table desc.
type ExactEntryDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required packet fields used to match entries in the table.
	Fields []*PacketFieldBytes `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	// True if the entry should be timed out (based on the table's
	// transient_timeout) value.
	Transient *bool `protobuf:"varint,2,opt,name=transient,def=0" json:"transient,omitempty"`
}

// Default values for ExactEntryDesc fields.
const (
	Default_ExactEntryDesc_Transient = bool(false)
)

func (x *ExactEntryDesc) Reset() {
	*x = ExactEntryDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExactEntryDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExactEntryDesc) ProtoMessage() {}

func (x *ExactEntryDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExactEntryDesc.ProtoReflect.Descriptor instead.
func (*ExactEntryDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{3}
}

func (x *ExactEntryDesc) GetFields() []*PacketFieldBytes {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ExactEntryDesc) GetTransient() bool {
	if x != nil && x.Transient != nil {
		return *x.Transient
	}
	return Default_ExactEntryDesc_Transient
}

// A PrefixTableDesc describes a PREFIX_TABLE. All entries within the table are
// idenfied by unique keys formed by the specified packet fields.
type PrefixTableDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required packet fields used to match entries in the table.
	FieldIds []*PacketFieldId `protobuf:"bytes,1,rep,name=field_ids,json=fieldIds" json:"field_ids,omitempty"`
}

func (x *PrefixTableDesc) Reset() {
	*x = PrefixTableDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixTableDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixTableDesc) ProtoMessage() {}

func (x *PrefixTableDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixTableDesc.ProtoReflect.Descriptor instead.
func (*PrefixTableDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{4}
}

func (x *PrefixTableDesc) GetFieldIds() []*PacketFieldId {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

// A PrefixEntryDesc describes an entry in a PREFIX_TABLE. An entry in the table
// is identified by the values of the specified packet fields and their
// masks. Other than the last field as defined by the table, all fields should
// either have no mask or have a mask with all bits set. Note that the ordering
// of the packet fields is determined by the table desc.
type PrefixEntryDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required packet fields and their values used to match packets to this
	// entry.
	Fields []*PacketFieldMaskedBytes `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
}

func (x *PrefixEntryDesc) Reset() {
	*x = PrefixEntryDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixEntryDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixEntryDesc) ProtoMessage() {}

func (x *PrefixEntryDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixEntryDesc.ProtoReflect.Descriptor instead.
func (*PrefixEntryDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{5}
}

func (x *PrefixEntryDesc) GetFields() []*PacketFieldMaskedBytes {
	if x != nil {
		return x.Fields
	}
	return nil
}

// A FlowTableDesc describes a FLOW_TABLE. The table consists of multiple
// banks that are looked up in parallel. Each bank contains flows in
// priority order. The priority order is numerically reversed i.e. higher
// priorities have lower numeric values. Note that ther priority between banks
// is such that Bank0 gets the highest priority. There is a caveat with actions
// that consume the packet. When such an action is encountered and it is set to
// immediate, it will be carried out when looked up regardless of the priority
// between banks. For instance, if Bank1 says to transmit the packet and Bank0
// says to drop the packet, then the packet will be transmitted because Bank1
// gets looked up first. This is done so that Bank0 will get looked up last and
// thus get the highest priority.
type FlowTableDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional number of banks in the flow table.
	BankCount *uint32 `protobuf:"varint,2,opt,name=bank_count,json=bankCount,def=1" json:"bank_count,omitempty"`
}

// Default values for FlowTableDesc fields.
const (
	Default_FlowTableDesc_BankCount = uint32(1)
)

func (x *FlowTableDesc) Reset() {
	*x = FlowTableDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowTableDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowTableDesc) ProtoMessage() {}

func (x *FlowTableDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowTableDesc.ProtoReflect.Descriptor instead.
func (*FlowTableDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{6}
}

func (x *FlowTableDesc) GetBankCount() uint32 {
	if x != nil && x.BankCount != nil {
		return *x.BankCount
	}
	return Default_FlowTableDesc_BankCount
}

// A FlowEntryDesc describes an entry in a FLOW_TABLE. Each entry is described
// by a priority, bank, id, a set of bits in various packet fields and set of
// qualifiers describing possible values of various packet fields.
type FlowEntryDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional priority of the flow.
	Priority *uint32 `protobuf:"varint,1,opt,name=priority,def=0" json:"priority,omitempty"`
	// Optional packet fields and their masked values used to match packets to
	// this entry. If no fields are specified, the entry matches all packets.
	Fields []*PacketFieldMaskedBytes `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
	// Optional bank where this entry should be added.
	Bank *uint32 `protobuf:"varint,3,opt,name=bank,def=0" json:"bank,omitempty"`
	// Optional id of the entry.
	Id *uint32 `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
	// Optional set of qualifiers used to match packets to this entry. A qualifier
	// matches a packet field to one of a set of possible values.
	Qualifiers []*PacketFieldSet `protobuf:"bytes,5,rep,name=qualifiers" json:"qualifiers,omitempty"`
}

// Default values for FlowEntryDesc fields.
const (
	Default_FlowEntryDesc_Priority = uint32(0)
	Default_FlowEntryDesc_Bank     = uint32(0)
)

func (x *FlowEntryDesc) Reset() {
	*x = FlowEntryDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowEntryDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowEntryDesc) ProtoMessage() {}

func (x *FlowEntryDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowEntryDesc.ProtoReflect.Descriptor instead.
func (*FlowEntryDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{7}
}

func (x *FlowEntryDesc) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return Default_FlowEntryDesc_Priority
}

func (x *FlowEntryDesc) GetFields() []*PacketFieldMaskedBytes {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *FlowEntryDesc) GetBank() uint32 {
	if x != nil && x.Bank != nil {
		return *x.Bank
	}
	return Default_FlowEntryDesc_Bank
}

func (x *FlowEntryDesc) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *FlowEntryDesc) GetQualifiers() []*PacketFieldSet {
	if x != nil {
		return x.Qualifiers
	}
	return nil
}

// A BridgeTableDesc describes a BRIDGE_TABLE. The table monitors and removes
// transient entries that are not used for a configured amount of time.
type BridgeTableDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional timeout value for entries. If no timeout is specified, entries are
	// never timed out.
	TransientTimeout *uint32 `protobuf:"varint,2,opt,name=transient_timeout,json=transientTimeout,def=0" json:"transient_timeout,omitempty"`
}

// Default values for BridgeTableDesc fields.
const (
	Default_BridgeTableDesc_TransientTimeout = uint32(0)
)

func (x *BridgeTableDesc) Reset() {
	*x = BridgeTableDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeTableDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeTableDesc) ProtoMessage() {}

func (x *BridgeTableDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeTableDesc.ProtoReflect.Descriptor instead.
func (*BridgeTableDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{8}
}

func (x *BridgeTableDesc) GetTransientTimeout() uint32 {
	if x != nil && x.TransientTimeout != nil {
		return *x.TransientTimeout
	}
	return Default_BridgeTableDesc_TransientTimeout
}

// A TableCreateRequest is a request to create a table.
//
// Note that all fields are mandatory.
type TableCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Desc      *TableDesc `protobuf:"bytes,1,opt,name=desc" json:"desc,omitempty"`
	ContextId *ContextId `protobuf:"bytes,2,opt,name=context_id,json=contextId" json:"context_id,omitempty"`
}

func (x *TableCreateRequest) Reset() {
	*x = TableCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCreateRequest) ProtoMessage() {}

func (x *TableCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCreateRequest.ProtoReflect.Descriptor instead.
func (*TableCreateRequest) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{9}
}

func (x *TableCreateRequest) GetDesc() *TableDesc {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *TableCreateRequest) GetContextId() *ContextId {
	if x != nil {
		return x.ContextId
	}
	return nil
}

type TableCreateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectIndex *ObjectIndex `protobuf:"bytes,2,opt,name=object_index,json=objectIndex" json:"object_index,omitempty"`
}

func (x *TableCreateReply) Reset() {
	*x = TableCreateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableCreateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCreateReply) ProtoMessage() {}

func (x *TableCreateReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCreateReply.ProtoReflect.Descriptor instead.
func (*TableCreateReply) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{10}
}

func (x *TableCreateReply) GetObjectIndex() *ObjectIndex {
	if x != nil {
		return x.ObjectIndex
	}
	return nil
}

// A TableEntryAddRequest is a request to add entries to the table. The entry
// may be singleton or a list of entries. Note that if the same request contains
// a singleton entry and an list of entries, all entries are added.
type TableEntryAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required id of the table to which the entry is added.
	TableId *TableId `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Required id of the forwarding context containing the table.
	ContextId *ContextId `protobuf:"bytes,4,opt,name=context_id,json=contextId" json:"context_id,omitempty"`
	// Optional actions associated with the singleton entry in this request.
	// If nothing is specified, the entry marks the packet to continue packet
	// processing.
	Actions []*ActionDesc `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
	// Optional descriptor of the singleton entry.
	EntryDesc *EntryDesc `protobuf:"bytes,3,opt,name=entry_desc,json=entryDesc" json:"entry_desc,omitempty"`
	// Optional list of entries to add.
	Entries []*TableEntryAddRequest_Entry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
	// Optional request to clear the table *before* processing the add entry
	// requests. This is useful for clearing the table with a single small gRPC
	// call or replacing all entries in a table with the specified entry (or batch
	// of entries).
	ClearBeforeAdd *bool `protobuf:"varint,6,opt,name=clear_before_add,json=clearBeforeAdd,def=0" json:"clear_before_add,omitempty"`
}

// Default values for TableEntryAddRequest fields.
const (
	Default_TableEntryAddRequest_ClearBeforeAdd = bool(false)
)

func (x *TableEntryAddRequest) Reset() {
	*x = TableEntryAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableEntryAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableEntryAddRequest) ProtoMessage() {}

func (x *TableEntryAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableEntryAddRequest.ProtoReflect.Descriptor instead.
func (*TableEntryAddRequest) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{11}
}

func (x *TableEntryAddRequest) GetTableId() *TableId {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *TableEntryAddRequest) GetContextId() *ContextId {
	if x != nil {
		return x.ContextId
	}
	return nil
}

func (x *TableEntryAddRequest) GetActions() []*ActionDesc {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TableEntryAddRequest) GetEntryDesc() *EntryDesc {
	if x != nil {
		return x.EntryDesc
	}
	return nil
}

func (x *TableEntryAddRequest) GetEntries() []*TableEntryAddRequest_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *TableEntryAddRequest) GetClearBeforeAdd() bool {
	if x != nil && x.ClearBeforeAdd != nil {
		return *x.ClearBeforeAdd
	}
	return Default_TableEntryAddRequest_ClearBeforeAdd
}

type TableEntryAddReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TableEntryAddReply) Reset() {
	*x = TableEntryAddReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableEntryAddReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableEntryAddReply) ProtoMessage() {}

func (x *TableEntryAddReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableEntryAddReply.ProtoReflect.Descriptor instead.
func (*TableEntryAddReply) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{12}
}

// A TableEntryRemoveRequest is a request to remove entries from the table.
// The entry may be a singleton or a list of entries. Note that if the same
// request specified a singleton and a list of entries, all entries are removed.
type TableEntryRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required id of the table from which the entry is removed.
	TableId *TableId `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Required id of the forwarding context containing the table.
	ContextId *ContextId `protobuf:"bytes,3,opt,name=context_id,json=contextId" json:"context_id,omitempty"`
	// Optional description of an entry in the table.
	EntryDesc *EntryDesc `protobuf:"bytes,2,opt,name=entry_desc,json=entryDesc" json:"entry_desc,omitempty"`
	// Optional list of entries to add.
	Entries []*EntryDesc `protobuf:"bytes,4,rep,name=entries" json:"entries,omitempty"`
}

func (x *TableEntryRemoveRequest) Reset() {
	*x = TableEntryRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableEntryRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableEntryRemoveRequest) ProtoMessage() {}

func (x *TableEntryRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableEntryRemoveRequest.ProtoReflect.Descriptor instead.
func (*TableEntryRemoveRequest) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{13}
}

func (x *TableEntryRemoveRequest) GetTableId() *TableId {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *TableEntryRemoveRequest) GetContextId() *ContextId {
	if x != nil {
		return x.ContextId
	}
	return nil
}

func (x *TableEntryRemoveRequest) GetEntryDesc() *EntryDesc {
	if x != nil {
		return x.EntryDesc
	}
	return nil
}

func (x *TableEntryRemoveRequest) GetEntries() []*EntryDesc {
	if x != nil {
		return x.Entries
	}
	return nil
}

type TableEntryRemoveReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TableEntryRemoveReply) Reset() {
	*x = TableEntryRemoveReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableEntryRemoveReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableEntryRemoveReply) ProtoMessage() {}

func (x *TableEntryRemoveReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableEntryRemoveReply.ProtoReflect.Descriptor instead.
func (*TableEntryRemoveReply) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{14}
}

// A TableListRequest is a request to list all entries of a table.
type TableListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required id of the table.
	TableId *TableId `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Required id of the forwarding context containing the table.
	ContextId *ContextId `protobuf:"bytes,2,opt,name=context_id,json=contextId" json:"context_id,omitempty"`
}

func (x *TableListRequest) Reset() {
	*x = TableListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableListRequest) ProtoMessage() {}

func (x *TableListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableListRequest.ProtoReflect.Descriptor instead.
func (*TableListRequest) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{15}
}

func (x *TableListRequest) GetTableId() *TableId {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *TableListRequest) GetContextId() *ContextId {
	if x != nil {
		return x.ContextId
	}
	return nil
}

type TableListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []string `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *TableListReply) Reset() {
	*x = TableListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableListReply) ProtoMessage() {}

func (x *TableListReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableListReply.ProtoReflect.Descriptor instead.
func (*TableListReply) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{16}
}

func (x *TableListReply) GetEntries() []string {
	if x != nil {
		return x.Entries
	}
	return nil
}

type TableEntryAddRequest_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional actions associated with the entry. If nothing is specified, the
	// entry marks the packet to continue packet processing.
	Actions []*ActionDesc `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
	// Optional description of an entry in the table.
	EntryDesc *EntryDesc `protobuf:"bytes,2,opt,name=entry_desc,json=entryDesc" json:"entry_desc,omitempty"`
}

func (x *TableEntryAddRequest_Entry) Reset() {
	*x = TableEntryAddRequest_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableEntryAddRequest_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableEntryAddRequest_Entry) ProtoMessage() {}

func (x *TableEntryAddRequest_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_table_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableEntryAddRequest_Entry.ProtoReflect.Descriptor instead.
func (*TableEntryAddRequest_Entry) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_table_proto_rawDescGZIP(), []int{11, 0}
}

func (x *TableEntryAddRequest_Entry) GetActions() []*ActionDesc {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TableEntryAddRequest_Entry) GetEntryDesc() *EntryDesc {
	if x != nil {
		return x.EntryDesc
	}
	return nil
}

var file_proto_forwarding_forwarding_table_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*TableDesc)(nil),
		ExtensionType: (*ExactTableDesc)(nil),
		Field:         101,
		Name:          "forwarding.ExactTableDesc.extension",
		Tag:           "bytes,101,opt,name=extension",
		Filename:      "proto/forwarding/forwarding_table.proto",
	},
	{
		ExtendedType:  (*EntryDesc)(nil),
		ExtensionType: (*ExactEntryDesc)(nil),
		Field:         101,
		Name:          "forwarding.ExactEntryDesc.extension",
		Tag:           "bytes,101,opt,name=extension",
		Filename:      "proto/forwarding/forwarding_table.proto",
	},
	{
		ExtendedType:  (*TableDesc)(nil),
		ExtensionType: (*PrefixTableDesc)(nil),
		Field:         102,
		Name:          "forwarding.PrefixTableDesc.extension",
		Tag:           "bytes,102,opt,name=extension",
		Filename:      "proto/forwarding/forwarding_table.proto",
	},
	{
		ExtendedType:  (*EntryDesc)(nil),
		ExtensionType: (*PrefixEntryDesc)(nil),
		Field:         102,
		Name:          "forwarding.PrefixEntryDesc.extension",
		Tag:           "bytes,102,opt,name=extension",
		Filename:      "proto/forwarding/forwarding_table.proto",
	},
	{
		ExtendedType:  (*TableDesc)(nil),
		ExtensionType: (*FlowTableDesc)(nil),
		Field:         103,
		Name:          "forwarding.FlowTableDesc.extension",
		Tag:           "bytes,103,opt,name=extension",
		Filename:      "proto/forwarding/forwarding_table.proto",
	},
	{
		ExtendedType:  (*EntryDesc)(nil),
		ExtensionType: (*FlowEntryDesc)(nil),
		Field:         103,
		Name:          "forwarding.FlowEntryDesc.extension",
		Tag:           "bytes,103,opt,name=extension",
		Filename:      "proto/forwarding/forwarding_table.proto",
	},
	{
		ExtendedType:  (*TableDesc)(nil),
		ExtensionType: (*BridgeTableDesc)(nil),
		Field:         104,
		Name:          "forwarding.BridgeTableDesc.extension",
		Tag:           "bytes,104,opt,name=extension",
		Filename:      "proto/forwarding/forwarding_table.proto",
	},
}

// Extension fields to TableDesc.
var (
	// optional forwarding.ExactTableDesc extension = 101;
	E_ExactTableDesc_Extension = &file_proto_forwarding_forwarding_table_proto_extTypes[0]
	// optional forwarding.PrefixTableDesc extension = 102;
	E_PrefixTableDesc_Extension = &file_proto_forwarding_forwarding_table_proto_extTypes[2]
	// optional forwarding.FlowTableDesc extension = 103;
	E_FlowTableDesc_Extension = &file_proto_forwarding_forwarding_table_proto_extTypes[4]
	// optional forwarding.BridgeTableDesc extension = 104;
	E_BridgeTableDesc_Extension = &file_proto_forwarding_forwarding_table_proto_extTypes[6]
)

// Extension fields to EntryDesc.
var (
	// optional forwarding.ExactEntryDesc extension = 101;
	E_ExactEntryDesc_Extension = &file_proto_forwarding_forwarding_table_proto_extTypes[1]
	// optional forwarding.PrefixEntryDesc extension = 102;
	E_PrefixEntryDesc_Extension = &file_proto_forwarding_forwarding_table_proto_extTypes[3]
	// optional forwarding.FlowEntryDesc extension = 103;
	E_FlowEntryDesc_Extension = &file_proto_forwarding_forwarding_table_proto_extTypes[5]
)

var File_proto_forwarding_forwarding_table_proto protoreflect.FileDescriptor

var file_proto_forwarding_forwarding_table_proto_rawDesc = []byte{
	0x0a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x09, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2e, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x2a,
	0x08, 0x08, 0x64, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02, 0x22, 0x15, 0x0a, 0x09, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x2a, 0x08, 0x08, 0x64, 0x10, 0x80, 0x80, 0x80, 0x80, 0x02,
	0x22, 0xc9, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x64, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x32, 0x4f, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x45, 0x78, 0x61, 0x63, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x01, 0x0a,
	0x0e, 0x45, 0x78, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x34, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x32, 0x4f, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x45, 0x78, 0x61, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x0f,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x36, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x52, 0x08, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x32, 0x50, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x0f, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3a, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x32, 0x50, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x0d,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a,
	0x0a, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x3a, 0x01, 0x31, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32,
	0x4e, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x9d, 0x02, 0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1d, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x04,
	0x62, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x04, 0x62,
	0x61, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x65, 0x74, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x32,
	0x4e, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x93, 0x01, 0x0a, 0x0f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01,
	0x30, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x32, 0x50, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x12, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x64, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x10,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3a, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xc8, 0x03, 0x0a,
	0x14, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a,
	0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x40, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x10, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x41, 0x64, 0x64, 0x1a, 0x6f, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x30, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x09, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x22, 0x14, 0x0a, 0x12, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xe6, 0x01,
	0x0a, 0x17, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x64, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2f, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x65, 0x73, 0x63, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x78, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x22, 0x2a, 0x0a, 0x0e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x2a, 0x50, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67,
}

var (
	file_proto_forwarding_forwarding_table_proto_rawDescOnce sync.Once
	file_proto_forwarding_forwarding_table_proto_rawDescData = file_proto_forwarding_forwarding_table_proto_rawDesc
)

func file_proto_forwarding_forwarding_table_proto_rawDescGZIP() []byte {
	file_proto_forwarding_forwarding_table_proto_rawDescOnce.Do(func() {
		file_proto_forwarding_forwarding_table_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_forwarding_forwarding_table_proto_rawDescData)
	})
	return file_proto_forwarding_forwarding_table_proto_rawDescData
}

var file_proto_forwarding_forwarding_table_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_forwarding_forwarding_table_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_proto_forwarding_forwarding_table_proto_goTypes = []interface{}{
	(TableType)(0),                     // 0: forwarding.TableType
	(*TableDesc)(nil),                  // 1: forwarding.TableDesc
	(*EntryDesc)(nil),                  // 2: forwarding.EntryDesc
	(*ExactTableDesc)(nil),             // 3: forwarding.ExactTableDesc
	(*ExactEntryDesc)(nil),             // 4: forwarding.ExactEntryDesc
	(*PrefixTableDesc)(nil),            // 5: forwarding.PrefixTableDesc
	(*PrefixEntryDesc)(nil),            // 6: forwarding.PrefixEntryDesc
	(*FlowTableDesc)(nil),              // 7: forwarding.FlowTableDesc
	(*FlowEntryDesc)(nil),              // 8: forwarding.FlowEntryDesc
	(*BridgeTableDesc)(nil),            // 9: forwarding.BridgeTableDesc
	(*TableCreateRequest)(nil),         // 10: forwarding.TableCreateRequest
	(*TableCreateReply)(nil),           // 11: forwarding.TableCreateReply
	(*TableEntryAddRequest)(nil),       // 12: forwarding.TableEntryAddRequest
	(*TableEntryAddReply)(nil),         // 13: forwarding.TableEntryAddReply
	(*TableEntryRemoveRequest)(nil),    // 14: forwarding.TableEntryRemoveRequest
	(*TableEntryRemoveReply)(nil),      // 15: forwarding.TableEntryRemoveReply
	(*TableListRequest)(nil),           // 16: forwarding.TableListRequest
	(*TableListReply)(nil),             // 17: forwarding.TableListReply
	(*TableEntryAddRequest_Entry)(nil), // 18: forwarding.TableEntryAddRequest.Entry
	(*ActionDesc)(nil),                 // 19: forwarding.ActionDesc
	(*TableId)(nil),                    // 20: forwarding.TableId
	(*PacketFieldId)(nil),              // 21: forwarding.PacketFieldId
	(*PacketFieldBytes)(nil),           // 22: forwarding.PacketFieldBytes
	(*PacketFieldMaskedBytes)(nil),     // 23: forwarding.PacketFieldMaskedBytes
	(*PacketFieldSet)(nil),             // 24: forwarding.PacketFieldSet
	(*ContextId)(nil),                  // 25: forwarding.ContextId
	(*ObjectIndex)(nil),                // 26: forwarding.ObjectIndex
}
var file_proto_forwarding_forwarding_table_proto_depIdxs = []int32{
	0,  // 0: forwarding.TableDesc.table_type:type_name -> forwarding.TableType
	19, // 1: forwarding.TableDesc.actions:type_name -> forwarding.ActionDesc
	20, // 2: forwarding.TableDesc.table_id:type_name -> forwarding.TableId
	21, // 3: forwarding.ExactTableDesc.field_ids:type_name -> forwarding.PacketFieldId
	22, // 4: forwarding.ExactEntryDesc.fields:type_name -> forwarding.PacketFieldBytes
	21, // 5: forwarding.PrefixTableDesc.field_ids:type_name -> forwarding.PacketFieldId
	23, // 6: forwarding.PrefixEntryDesc.fields:type_name -> forwarding.PacketFieldMaskedBytes
	23, // 7: forwarding.FlowEntryDesc.fields:type_name -> forwarding.PacketFieldMaskedBytes
	24, // 8: forwarding.FlowEntryDesc.qualifiers:type_name -> forwarding.PacketFieldSet
	1,  // 9: forwarding.TableCreateRequest.desc:type_name -> forwarding.TableDesc
	25, // 10: forwarding.TableCreateRequest.context_id:type_name -> forwarding.ContextId
	26, // 11: forwarding.TableCreateReply.object_index:type_name -> forwarding.ObjectIndex
	20, // 12: forwarding.TableEntryAddRequest.table_id:type_name -> forwarding.TableId
	25, // 13: forwarding.TableEntryAddRequest.context_id:type_name -> forwarding.ContextId
	19, // 14: forwarding.TableEntryAddRequest.actions:type_name -> forwarding.ActionDesc
	2,  // 15: forwarding.TableEntryAddRequest.entry_desc:type_name -> forwarding.EntryDesc
	18, // 16: forwarding.TableEntryAddRequest.entries:type_name -> forwarding.TableEntryAddRequest.Entry
	20, // 17: forwarding.TableEntryRemoveRequest.table_id:type_name -> forwarding.TableId
	25, // 18: forwarding.TableEntryRemoveRequest.context_id:type_name -> forwarding.ContextId
	2,  // 19: forwarding.TableEntryRemoveRequest.entry_desc:type_name -> forwarding.EntryDesc
	2,  // 20: forwarding.TableEntryRemoveRequest.entries:type_name -> forwarding.EntryDesc
	20, // 21: forwarding.TableListRequest.table_id:type_name -> forwarding.TableId
	25, // 22: forwarding.TableListRequest.context_id:type_name -> forwarding.ContextId
	19, // 23: forwarding.TableEntryAddRequest.Entry.actions:type_name -> forwarding.ActionDesc
	2,  // 24: forwarding.TableEntryAddRequest.Entry.entry_desc:type_name -> forwarding.EntryDesc
	1,  // 25: forwarding.ExactTableDesc.extension:extendee -> forwarding.TableDesc
	2,  // 26: forwarding.ExactEntryDesc.extension:extendee -> forwarding.EntryDesc
	1,  // 27: forwarding.PrefixTableDesc.extension:extendee -> forwarding.TableDesc
	2,  // 28: forwarding.PrefixEntryDesc.extension:extendee -> forwarding.EntryDesc
	1,  // 29: forwarding.FlowTableDesc.extension:extendee -> forwarding.TableDesc
	2,  // 30: forwarding.FlowEntryDesc.extension:extendee -> forwarding.EntryDesc
	1,  // 31: forwarding.BridgeTableDesc.extension:extendee -> forwarding.TableDesc
	3,  // 32: forwarding.ExactTableDesc.extension:type_name -> forwarding.ExactTableDesc
	4,  // 33: forwarding.ExactEntryDesc.extension:type_name -> forwarding.ExactEntryDesc
	5,  // 34: forwarding.PrefixTableDesc.extension:type_name -> forwarding.PrefixTableDesc
	6,  // 35: forwarding.PrefixEntryDesc.extension:type_name -> forwarding.PrefixEntryDesc
	7,  // 36: forwarding.FlowTableDesc.extension:type_name -> forwarding.FlowTableDesc
	8,  // 37: forwarding.FlowEntryDesc.extension:type_name -> forwarding.FlowEntryDesc
	9,  // 38: forwarding.BridgeTableDesc.extension:type_name -> forwarding.BridgeTableDesc
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	32, // [32:39] is the sub-list for extension type_name
	25, // [25:32] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_proto_forwarding_forwarding_table_proto_init() }
func file_proto_forwarding_forwarding_table_proto_init() {
	if File_proto_forwarding_forwarding_table_proto != nil {
		return
	}
	file_proto_forwarding_forwarding_action_proto_init()
	file_proto_forwarding_forwarding_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_forwarding_forwarding_table_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EntryDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExactTableDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExactEntryDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixTableDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixEntryDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowTableDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowEntryDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeTableDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableCreateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableEntryAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableEntryAddReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableEntryRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableEntryRemoveReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_table_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableEntryAddRequest_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_forwarding_forwarding_table_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 7,
			NumServices:   0,
		},
		GoTypes:           file_proto_forwarding_forwarding_table_proto_goTypes,
		DependencyIndexes: file_proto_forwarding_forwarding_table_proto_depIdxs,
		EnumInfos:         file_proto_forwarding_forwarding_table_proto_enumTypes,
		MessageInfos:      file_proto_forwarding_forwarding_table_proto_msgTypes,
		ExtensionInfos:    file_proto_forwarding_forwarding_table_proto_extTypes,
	}.Build()
	File_proto_forwarding_forwarding_table_proto = out.File
	file_proto_forwarding_forwarding_table_proto_rawDesc = nil
	file_proto_forwarding_forwarding_table_proto_goTypes = nil
	file_proto_forwarding_forwarding_table_proto_depIdxs = nil
}
