// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: proto/forwarding/forwarding_service.proto

package forwarding

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_forwarding_forwarding_service_proto protoreflect.FileDescriptor

var file_proto_forwarding_forwarding_service_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0x99, 0x10, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x53, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x09, 0x53, 0x65,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x21,
	0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0b, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0d, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x12, 0x20, 0x2e, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x12, 0x23, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x09,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x09, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x50, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x22, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x58, 0x0a, 0x13, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x1d, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x49, 0x44, 0x12, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x9b,
	0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x30, 0x5a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_forwarding_forwarding_service_proto_goTypes = []interface{}{
	(*ContextCreateRequest)(nil),     // 0: forwarding.ContextCreateRequest
	(*ContextDeleteRequest)(nil),     // 1: forwarding.ContextDeleteRequest
	(*ContextListRequest)(nil),       // 2: forwarding.ContextListRequest
	(*SetCreateRequest)(nil),         // 3: forwarding.SetCreateRequest
	(*SetUpdateRequest)(nil),         // 4: forwarding.SetUpdateRequest
	(*AttributeListRequest)(nil),     // 5: forwarding.AttributeListRequest
	(*AttributeUpdateRequest)(nil),   // 6: forwarding.AttributeUpdateRequest
	(*AttributeQueryRequest)(nil),    // 7: forwarding.AttributeQueryRequest
	(*ObjectDeleteRequest)(nil),      // 8: forwarding.ObjectDeleteRequest
	(*ObjectListRequest)(nil),        // 9: forwarding.ObjectListRequest
	(*ObjectCountersRequest)(nil),    // 10: forwarding.ObjectCountersRequest
	(*TableCreateRequest)(nil),       // 11: forwarding.TableCreateRequest
	(*TableEntryAddRequest)(nil),     // 12: forwarding.TableEntryAddRequest
	(*TableEntryRemoveRequest)(nil),  // 13: forwarding.TableEntryRemoveRequest
	(*TableListRequest)(nil),         // 14: forwarding.TableListRequest
	(*PortCreateRequest)(nil),        // 15: forwarding.PortCreateRequest
	(*PortUpdateRequest)(nil),        // 16: forwarding.PortUpdateRequest
	(*PortStateRequest)(nil),         // 17: forwarding.PortStateRequest
	(*FlowCounterCreateRequest)(nil), // 18: forwarding.FlowCounterCreateRequest
	(*FlowCounterQueryRequest)(nil),  // 19: forwarding.FlowCounterQueryRequest
	(*OperationRequest)(nil),         // 20: forwarding.OperationRequest
	(*NotifySubscribeRequest)(nil),   // 21: forwarding.NotifySubscribeRequest
	(*PacketInjectRequest)(nil),      // 22: forwarding.PacketInjectRequest
	(*PacketSinkRequest)(nil),        // 23: forwarding.PacketSinkRequest
	(*ObjectNIDRequest)(nil),         // 24: forwarding.ObjectNIDRequest
	(*InfoListRequest)(nil),          // 25: forwarding.InfoListRequest
	(*InfoElementRequest)(nil),       // 26: forwarding.InfoElementRequest
	(*ContextCreateReply)(nil),       // 27: forwarding.ContextCreateReply
	(*ContextDeleteReply)(nil),       // 28: forwarding.ContextDeleteReply
	(*ContextListReply)(nil),         // 29: forwarding.ContextListReply
	(*SetCreateReply)(nil),           // 30: forwarding.SetCreateReply
	(*SetUpdateReply)(nil),           // 31: forwarding.SetUpdateReply
	(*AttributeListReply)(nil),       // 32: forwarding.AttributeListReply
	(*AttributeUpdateReply)(nil),     // 33: forwarding.AttributeUpdateReply
	(*AttributeQueryReply)(nil),      // 34: forwarding.AttributeQueryReply
	(*ObjectDeleteReply)(nil),        // 35: forwarding.ObjectDeleteReply
	(*ObjectListReply)(nil),          // 36: forwarding.ObjectListReply
	(*ObjectCountersReply)(nil),      // 37: forwarding.ObjectCountersReply
	(*TableCreateReply)(nil),         // 38: forwarding.TableCreateReply
	(*TableEntryAddReply)(nil),       // 39: forwarding.TableEntryAddReply
	(*TableEntryRemoveReply)(nil),    // 40: forwarding.TableEntryRemoveReply
	(*TableListReply)(nil),           // 41: forwarding.TableListReply
	(*PortCreateReply)(nil),          // 42: forwarding.PortCreateReply
	(*PortUpdateReply)(nil),          // 43: forwarding.PortUpdateReply
	(*PortStateReply)(nil),           // 44: forwarding.PortStateReply
	(*FlowCounterCreateReply)(nil),   // 45: forwarding.FlowCounterCreateReply
	(*FlowCounterQueryReply)(nil),    // 46: forwarding.FlowCounterQueryReply
	(*OperationReply)(nil),           // 47: forwarding.OperationReply
	(*EventDesc)(nil),                // 48: forwarding.EventDesc
	(*PacketInjectResponse)(nil),     // 49: forwarding.PacketInjectResponse
	(*PacketSinkResponse)(nil),       // 50: forwarding.PacketSinkResponse
	(*ObjectNIDReply)(nil),           // 51: forwarding.ObjectNIDReply
	(*InfoListReply)(nil),            // 52: forwarding.InfoListReply
	(*InfoElementReply)(nil),         // 53: forwarding.InfoElementReply
}
var file_proto_forwarding_forwarding_service_proto_depIdxs = []int32{
	0,  // 0: forwarding.Forwarding.ContextCreate:input_type -> forwarding.ContextCreateRequest
	1,  // 1: forwarding.Forwarding.ContextDelete:input_type -> forwarding.ContextDeleteRequest
	2,  // 2: forwarding.Forwarding.ContextList:input_type -> forwarding.ContextListRequest
	3,  // 3: forwarding.Forwarding.SetCreate:input_type -> forwarding.SetCreateRequest
	4,  // 4: forwarding.Forwarding.SetUpdate:input_type -> forwarding.SetUpdateRequest
	5,  // 5: forwarding.Forwarding.AttributeList:input_type -> forwarding.AttributeListRequest
	6,  // 6: forwarding.Forwarding.AttributeUpdate:input_type -> forwarding.AttributeUpdateRequest
	7,  // 7: forwarding.Forwarding.AttributeQuery:input_type -> forwarding.AttributeQueryRequest
	8,  // 8: forwarding.Forwarding.ObjectDelete:input_type -> forwarding.ObjectDeleteRequest
	9,  // 9: forwarding.Forwarding.ObjectList:input_type -> forwarding.ObjectListRequest
	10, // 10: forwarding.Forwarding.ObjectCounters:input_type -> forwarding.ObjectCountersRequest
	11, // 11: forwarding.Forwarding.TableCreate:input_type -> forwarding.TableCreateRequest
	12, // 12: forwarding.Forwarding.TableEntryAdd:input_type -> forwarding.TableEntryAddRequest
	13, // 13: forwarding.Forwarding.TableEntryRemove:input_type -> forwarding.TableEntryRemoveRequest
	14, // 14: forwarding.Forwarding.TableList:input_type -> forwarding.TableListRequest
	15, // 15: forwarding.Forwarding.PortCreate:input_type -> forwarding.PortCreateRequest
	16, // 16: forwarding.Forwarding.PortUpdate:input_type -> forwarding.PortUpdateRequest
	17, // 17: forwarding.Forwarding.PortState:input_type -> forwarding.PortStateRequest
	18, // 18: forwarding.Forwarding.FlowCounterCreate:input_type -> forwarding.FlowCounterCreateRequest
	19, // 19: forwarding.Forwarding.FlowCounterQuery:input_type -> forwarding.FlowCounterQueryRequest
	20, // 20: forwarding.Forwarding.Operation:input_type -> forwarding.OperationRequest
	21, // 21: forwarding.Forwarding.NotifySubscribe:input_type -> forwarding.NotifySubscribeRequest
	22, // 22: forwarding.Forwarding.PacketInject:input_type -> forwarding.PacketInjectRequest
	23, // 23: forwarding.Forwarding.PacketSinkSubscribe:input_type -> forwarding.PacketSinkRequest
	24, // 24: forwarding.Forwarding.ObjectNID:input_type -> forwarding.ObjectNIDRequest
	25, // 25: forwarding.Info.InfoList:input_type -> forwarding.InfoListRequest
	26, // 26: forwarding.Info.InfoElement:input_type -> forwarding.InfoElementRequest
	27, // 27: forwarding.Forwarding.ContextCreate:output_type -> forwarding.ContextCreateReply
	28, // 28: forwarding.Forwarding.ContextDelete:output_type -> forwarding.ContextDeleteReply
	29, // 29: forwarding.Forwarding.ContextList:output_type -> forwarding.ContextListReply
	30, // 30: forwarding.Forwarding.SetCreate:output_type -> forwarding.SetCreateReply
	31, // 31: forwarding.Forwarding.SetUpdate:output_type -> forwarding.SetUpdateReply
	32, // 32: forwarding.Forwarding.AttributeList:output_type -> forwarding.AttributeListReply
	33, // 33: forwarding.Forwarding.AttributeUpdate:output_type -> forwarding.AttributeUpdateReply
	34, // 34: forwarding.Forwarding.AttributeQuery:output_type -> forwarding.AttributeQueryReply
	35, // 35: forwarding.Forwarding.ObjectDelete:output_type -> forwarding.ObjectDeleteReply
	36, // 36: forwarding.Forwarding.ObjectList:output_type -> forwarding.ObjectListReply
	37, // 37: forwarding.Forwarding.ObjectCounters:output_type -> forwarding.ObjectCountersReply
	38, // 38: forwarding.Forwarding.TableCreate:output_type -> forwarding.TableCreateReply
	39, // 39: forwarding.Forwarding.TableEntryAdd:output_type -> forwarding.TableEntryAddReply
	40, // 40: forwarding.Forwarding.TableEntryRemove:output_type -> forwarding.TableEntryRemoveReply
	41, // 41: forwarding.Forwarding.TableList:output_type -> forwarding.TableListReply
	42, // 42: forwarding.Forwarding.PortCreate:output_type -> forwarding.PortCreateReply
	43, // 43: forwarding.Forwarding.PortUpdate:output_type -> forwarding.PortUpdateReply
	44, // 44: forwarding.Forwarding.PortState:output_type -> forwarding.PortStateReply
	45, // 45: forwarding.Forwarding.FlowCounterCreate:output_type -> forwarding.FlowCounterCreateReply
	46, // 46: forwarding.Forwarding.FlowCounterQuery:output_type -> forwarding.FlowCounterQueryReply
	47, // 47: forwarding.Forwarding.Operation:output_type -> forwarding.OperationReply
	48, // 48: forwarding.Forwarding.NotifySubscribe:output_type -> forwarding.EventDesc
	49, // 49: forwarding.Forwarding.PacketInject:output_type -> forwarding.PacketInjectResponse
	50, // 50: forwarding.Forwarding.PacketSinkSubscribe:output_type -> forwarding.PacketSinkResponse
	51, // 51: forwarding.Forwarding.ObjectNID:output_type -> forwarding.ObjectNIDReply
	52, // 52: forwarding.Info.InfoList:output_type -> forwarding.InfoListReply
	53, // 53: forwarding.Info.InfoElement:output_type -> forwarding.InfoElementReply
	27, // [27:54] is the sub-list for method output_type
	0,  // [0:27] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_forwarding_forwarding_service_proto_init() }
func file_proto_forwarding_forwarding_service_proto_init() {
	if File_proto_forwarding_forwarding_service_proto != nil {
		return
	}
	file_proto_forwarding_forwarding_attribute_proto_init()
	file_proto_forwarding_forwarding_common_proto_init()
	file_proto_forwarding_forwarding_info_proto_init()
	file_proto_forwarding_forwarding_notification_proto_init()
	file_proto_forwarding_forwarding_operation_proto_init()
	file_proto_forwarding_forwarding_packetsink_proto_init()
	file_proto_forwarding_forwarding_port_proto_init()
	file_proto_forwarding_forwarding_table_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_forwarding_forwarding_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_forwarding_forwarding_service_proto_goTypes,
		DependencyIndexes: file_proto_forwarding_forwarding_service_proto_depIdxs,
	}.Build()
	File_proto_forwarding_forwarding_service_proto = out.File
	file_proto_forwarding_forwarding_service_proto_rawDesc = nil
	file_proto_forwarding_forwarding_service_proto_goTypes = nil
	file_proto_forwarding_forwarding_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ForwardingClient is the client API for Forwarding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ForwardingClient interface {
	ContextCreate(ctx context.Context, in *ContextCreateRequest, opts ...grpc.CallOption) (*ContextCreateReply, error)
	ContextDelete(ctx context.Context, in *ContextDeleteRequest, opts ...grpc.CallOption) (*ContextDeleteReply, error)
	ContextList(ctx context.Context, in *ContextListRequest, opts ...grpc.CallOption) (*ContextListReply, error)
	SetCreate(ctx context.Context, in *SetCreateRequest, opts ...grpc.CallOption) (*SetCreateReply, error)
	SetUpdate(ctx context.Context, in *SetUpdateRequest, opts ...grpc.CallOption) (*SetUpdateReply, error)
	AttributeList(ctx context.Context, in *AttributeListRequest, opts ...grpc.CallOption) (*AttributeListReply, error)
	AttributeUpdate(ctx context.Context, in *AttributeUpdateRequest, opts ...grpc.CallOption) (*AttributeUpdateReply, error)
	AttributeQuery(ctx context.Context, in *AttributeQueryRequest, opts ...grpc.CallOption) (*AttributeQueryReply, error)
	ObjectDelete(ctx context.Context, in *ObjectDeleteRequest, opts ...grpc.CallOption) (*ObjectDeleteReply, error)
	ObjectList(ctx context.Context, in *ObjectListRequest, opts ...grpc.CallOption) (*ObjectListReply, error)
	ObjectCounters(ctx context.Context, in *ObjectCountersRequest, opts ...grpc.CallOption) (*ObjectCountersReply, error)
	TableCreate(ctx context.Context, in *TableCreateRequest, opts ...grpc.CallOption) (*TableCreateReply, error)
	TableEntryAdd(ctx context.Context, in *TableEntryAddRequest, opts ...grpc.CallOption) (*TableEntryAddReply, error)
	TableEntryRemove(ctx context.Context, in *TableEntryRemoveRequest, opts ...grpc.CallOption) (*TableEntryRemoveReply, error)
	TableList(ctx context.Context, in *TableListRequest, opts ...grpc.CallOption) (*TableListReply, error)
	PortCreate(ctx context.Context, in *PortCreateRequest, opts ...grpc.CallOption) (*PortCreateReply, error)
	PortUpdate(ctx context.Context, in *PortUpdateRequest, opts ...grpc.CallOption) (*PortUpdateReply, error)
	PortState(ctx context.Context, in *PortStateRequest, opts ...grpc.CallOption) (*PortStateReply, error)
	FlowCounterCreate(ctx context.Context, in *FlowCounterCreateRequest, opts ...grpc.CallOption) (*FlowCounterCreateReply, error)
	FlowCounterQuery(ctx context.Context, in *FlowCounterQueryRequest, opts ...grpc.CallOption) (*FlowCounterQueryReply, error)
	Operation(ctx context.Context, opts ...grpc.CallOption) (Forwarding_OperationClient, error)
	NotifySubscribe(ctx context.Context, in *NotifySubscribeRequest, opts ...grpc.CallOption) (Forwarding_NotifySubscribeClient, error)
	PacketInject(ctx context.Context, opts ...grpc.CallOption) (Forwarding_PacketInjectClient, error)
	PacketSinkSubscribe(ctx context.Context, in *PacketSinkRequest, opts ...grpc.CallOption) (Forwarding_PacketSinkSubscribeClient, error)
	ObjectNID(ctx context.Context, in *ObjectNIDRequest, opts ...grpc.CallOption) (*ObjectNIDReply, error)
}

type forwardingClient struct {
	cc grpc.ClientConnInterface
}

func NewForwardingClient(cc grpc.ClientConnInterface) ForwardingClient {
	return &forwardingClient{cc}
}

func (c *forwardingClient) ContextCreate(ctx context.Context, in *ContextCreateRequest, opts ...grpc.CallOption) (*ContextCreateReply, error) {
	out := new(ContextCreateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/ContextCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) ContextDelete(ctx context.Context, in *ContextDeleteRequest, opts ...grpc.CallOption) (*ContextDeleteReply, error) {
	out := new(ContextDeleteReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/ContextDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) ContextList(ctx context.Context, in *ContextListRequest, opts ...grpc.CallOption) (*ContextListReply, error) {
	out := new(ContextListReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/ContextList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) SetCreate(ctx context.Context, in *SetCreateRequest, opts ...grpc.CallOption) (*SetCreateReply, error) {
	out := new(SetCreateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/SetCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) SetUpdate(ctx context.Context, in *SetUpdateRequest, opts ...grpc.CallOption) (*SetUpdateReply, error) {
	out := new(SetUpdateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/SetUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) AttributeList(ctx context.Context, in *AttributeListRequest, opts ...grpc.CallOption) (*AttributeListReply, error) {
	out := new(AttributeListReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/AttributeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) AttributeUpdate(ctx context.Context, in *AttributeUpdateRequest, opts ...grpc.CallOption) (*AttributeUpdateReply, error) {
	out := new(AttributeUpdateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/AttributeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) AttributeQuery(ctx context.Context, in *AttributeQueryRequest, opts ...grpc.CallOption) (*AttributeQueryReply, error) {
	out := new(AttributeQueryReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/AttributeQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) ObjectDelete(ctx context.Context, in *ObjectDeleteRequest, opts ...grpc.CallOption) (*ObjectDeleteReply, error) {
	out := new(ObjectDeleteReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/ObjectDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) ObjectList(ctx context.Context, in *ObjectListRequest, opts ...grpc.CallOption) (*ObjectListReply, error) {
	out := new(ObjectListReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/ObjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) ObjectCounters(ctx context.Context, in *ObjectCountersRequest, opts ...grpc.CallOption) (*ObjectCountersReply, error) {
	out := new(ObjectCountersReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/ObjectCounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) TableCreate(ctx context.Context, in *TableCreateRequest, opts ...grpc.CallOption) (*TableCreateReply, error) {
	out := new(TableCreateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/TableCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) TableEntryAdd(ctx context.Context, in *TableEntryAddRequest, opts ...grpc.CallOption) (*TableEntryAddReply, error) {
	out := new(TableEntryAddReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/TableEntryAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) TableEntryRemove(ctx context.Context, in *TableEntryRemoveRequest, opts ...grpc.CallOption) (*TableEntryRemoveReply, error) {
	out := new(TableEntryRemoveReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/TableEntryRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) TableList(ctx context.Context, in *TableListRequest, opts ...grpc.CallOption) (*TableListReply, error) {
	out := new(TableListReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/TableList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) PortCreate(ctx context.Context, in *PortCreateRequest, opts ...grpc.CallOption) (*PortCreateReply, error) {
	out := new(PortCreateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/PortCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) PortUpdate(ctx context.Context, in *PortUpdateRequest, opts ...grpc.CallOption) (*PortUpdateReply, error) {
	out := new(PortUpdateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/PortUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) PortState(ctx context.Context, in *PortStateRequest, opts ...grpc.CallOption) (*PortStateReply, error) {
	out := new(PortStateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/PortState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) FlowCounterCreate(ctx context.Context, in *FlowCounterCreateRequest, opts ...grpc.CallOption) (*FlowCounterCreateReply, error) {
	out := new(FlowCounterCreateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/FlowCounterCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) FlowCounterQuery(ctx context.Context, in *FlowCounterQueryRequest, opts ...grpc.CallOption) (*FlowCounterQueryReply, error) {
	out := new(FlowCounterQueryReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/FlowCounterQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) Operation(ctx context.Context, opts ...grpc.CallOption) (Forwarding_OperationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Forwarding_serviceDesc.Streams[0], "/forwarding.Forwarding/Operation", opts...)
	if err != nil {
		return nil, err
	}
	x := &forwardingOperationClient{stream}
	return x, nil
}

type Forwarding_OperationClient interface {
	Send(*OperationRequest) error
	Recv() (*OperationReply, error)
	grpc.ClientStream
}

type forwardingOperationClient struct {
	grpc.ClientStream
}

func (x *forwardingOperationClient) Send(m *OperationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *forwardingOperationClient) Recv() (*OperationReply, error) {
	m := new(OperationReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *forwardingClient) NotifySubscribe(ctx context.Context, in *NotifySubscribeRequest, opts ...grpc.CallOption) (Forwarding_NotifySubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Forwarding_serviceDesc.Streams[1], "/forwarding.Forwarding/NotifySubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &forwardingNotifySubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Forwarding_NotifySubscribeClient interface {
	Recv() (*EventDesc, error)
	grpc.ClientStream
}

type forwardingNotifySubscribeClient struct {
	grpc.ClientStream
}

func (x *forwardingNotifySubscribeClient) Recv() (*EventDesc, error) {
	m := new(EventDesc)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *forwardingClient) PacketInject(ctx context.Context, opts ...grpc.CallOption) (Forwarding_PacketInjectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Forwarding_serviceDesc.Streams[2], "/forwarding.Forwarding/PacketInject", opts...)
	if err != nil {
		return nil, err
	}
	x := &forwardingPacketInjectClient{stream}
	return x, nil
}

type Forwarding_PacketInjectClient interface {
	Send(*PacketInjectRequest) error
	CloseAndRecv() (*PacketInjectResponse, error)
	grpc.ClientStream
}

type forwardingPacketInjectClient struct {
	grpc.ClientStream
}

func (x *forwardingPacketInjectClient) Send(m *PacketInjectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *forwardingPacketInjectClient) CloseAndRecv() (*PacketInjectResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PacketInjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *forwardingClient) PacketSinkSubscribe(ctx context.Context, in *PacketSinkRequest, opts ...grpc.CallOption) (Forwarding_PacketSinkSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Forwarding_serviceDesc.Streams[3], "/forwarding.Forwarding/PacketSinkSubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &forwardingPacketSinkSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Forwarding_PacketSinkSubscribeClient interface {
	Recv() (*PacketSinkResponse, error)
	grpc.ClientStream
}

type forwardingPacketSinkSubscribeClient struct {
	grpc.ClientStream
}

func (x *forwardingPacketSinkSubscribeClient) Recv() (*PacketSinkResponse, error) {
	m := new(PacketSinkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *forwardingClient) ObjectNID(ctx context.Context, in *ObjectNIDRequest, opts ...grpc.CallOption) (*ObjectNIDReply, error) {
	out := new(ObjectNIDReply)
	err := c.cc.Invoke(ctx, "/forwarding.Forwarding/ObjectNID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForwardingServer is the server API for Forwarding service.
type ForwardingServer interface {
	ContextCreate(context.Context, *ContextCreateRequest) (*ContextCreateReply, error)
	ContextDelete(context.Context, *ContextDeleteRequest) (*ContextDeleteReply, error)
	ContextList(context.Context, *ContextListRequest) (*ContextListReply, error)
	SetCreate(context.Context, *SetCreateRequest) (*SetCreateReply, error)
	SetUpdate(context.Context, *SetUpdateRequest) (*SetUpdateReply, error)
	AttributeList(context.Context, *AttributeListRequest) (*AttributeListReply, error)
	AttributeUpdate(context.Context, *AttributeUpdateRequest) (*AttributeUpdateReply, error)
	AttributeQuery(context.Context, *AttributeQueryRequest) (*AttributeQueryReply, error)
	ObjectDelete(context.Context, *ObjectDeleteRequest) (*ObjectDeleteReply, error)
	ObjectList(context.Context, *ObjectListRequest) (*ObjectListReply, error)
	ObjectCounters(context.Context, *ObjectCountersRequest) (*ObjectCountersReply, error)
	TableCreate(context.Context, *TableCreateRequest) (*TableCreateReply, error)
	TableEntryAdd(context.Context, *TableEntryAddRequest) (*TableEntryAddReply, error)
	TableEntryRemove(context.Context, *TableEntryRemoveRequest) (*TableEntryRemoveReply, error)
	TableList(context.Context, *TableListRequest) (*TableListReply, error)
	PortCreate(context.Context, *PortCreateRequest) (*PortCreateReply, error)
	PortUpdate(context.Context, *PortUpdateRequest) (*PortUpdateReply, error)
	PortState(context.Context, *PortStateRequest) (*PortStateReply, error)
	FlowCounterCreate(context.Context, *FlowCounterCreateRequest) (*FlowCounterCreateReply, error)
	FlowCounterQuery(context.Context, *FlowCounterQueryRequest) (*FlowCounterQueryReply, error)
	Operation(Forwarding_OperationServer) error
	NotifySubscribe(*NotifySubscribeRequest, Forwarding_NotifySubscribeServer) error
	PacketInject(Forwarding_PacketInjectServer) error
	PacketSinkSubscribe(*PacketSinkRequest, Forwarding_PacketSinkSubscribeServer) error
	ObjectNID(context.Context, *ObjectNIDRequest) (*ObjectNIDReply, error)
}

// UnimplementedForwardingServer can be embedded to have forward compatible implementations.
type UnimplementedForwardingServer struct {
}

func (*UnimplementedForwardingServer) ContextCreate(context.Context, *ContextCreateRequest) (*ContextCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContextCreate not implemented")
}
func (*UnimplementedForwardingServer) ContextDelete(context.Context, *ContextDeleteRequest) (*ContextDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContextDelete not implemented")
}
func (*UnimplementedForwardingServer) ContextList(context.Context, *ContextListRequest) (*ContextListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContextList not implemented")
}
func (*UnimplementedForwardingServer) SetCreate(context.Context, *SetCreateRequest) (*SetCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCreate not implemented")
}
func (*UnimplementedForwardingServer) SetUpdate(context.Context, *SetUpdateRequest) (*SetUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpdate not implemented")
}
func (*UnimplementedForwardingServer) AttributeList(context.Context, *AttributeListRequest) (*AttributeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeList not implemented")
}
func (*UnimplementedForwardingServer) AttributeUpdate(context.Context, *AttributeUpdateRequest) (*AttributeUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeUpdate not implemented")
}
func (*UnimplementedForwardingServer) AttributeQuery(context.Context, *AttributeQueryRequest) (*AttributeQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeQuery not implemented")
}
func (*UnimplementedForwardingServer) ObjectDelete(context.Context, *ObjectDeleteRequest) (*ObjectDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectDelete not implemented")
}
func (*UnimplementedForwardingServer) ObjectList(context.Context, *ObjectListRequest) (*ObjectListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectList not implemented")
}
func (*UnimplementedForwardingServer) ObjectCounters(context.Context, *ObjectCountersRequest) (*ObjectCountersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectCounters not implemented")
}
func (*UnimplementedForwardingServer) TableCreate(context.Context, *TableCreateRequest) (*TableCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableCreate not implemented")
}
func (*UnimplementedForwardingServer) TableEntryAdd(context.Context, *TableEntryAddRequest) (*TableEntryAddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableEntryAdd not implemented")
}
func (*UnimplementedForwardingServer) TableEntryRemove(context.Context, *TableEntryRemoveRequest) (*TableEntryRemoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableEntryRemove not implemented")
}
func (*UnimplementedForwardingServer) TableList(context.Context, *TableListRequest) (*TableListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableList not implemented")
}
func (*UnimplementedForwardingServer) PortCreate(context.Context, *PortCreateRequest) (*PortCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortCreate not implemented")
}
func (*UnimplementedForwardingServer) PortUpdate(context.Context, *PortUpdateRequest) (*PortUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortUpdate not implemented")
}
func (*UnimplementedForwardingServer) PortState(context.Context, *PortStateRequest) (*PortStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortState not implemented")
}
func (*UnimplementedForwardingServer) FlowCounterCreate(context.Context, *FlowCounterCreateRequest) (*FlowCounterCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowCounterCreate not implemented")
}
func (*UnimplementedForwardingServer) FlowCounterQuery(context.Context, *FlowCounterQueryRequest) (*FlowCounterQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowCounterQuery not implemented")
}
func (*UnimplementedForwardingServer) Operation(Forwarding_OperationServer) error {
	return status.Errorf(codes.Unimplemented, "method Operation not implemented")
}
func (*UnimplementedForwardingServer) NotifySubscribe(*NotifySubscribeRequest, Forwarding_NotifySubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method NotifySubscribe not implemented")
}
func (*UnimplementedForwardingServer) PacketInject(Forwarding_PacketInjectServer) error {
	return status.Errorf(codes.Unimplemented, "method PacketInject not implemented")
}
func (*UnimplementedForwardingServer) PacketSinkSubscribe(*PacketSinkRequest, Forwarding_PacketSinkSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method PacketSinkSubscribe not implemented")
}
func (*UnimplementedForwardingServer) ObjectNID(context.Context, *ObjectNIDRequest) (*ObjectNIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectNID not implemented")
}

func RegisterForwardingServer(s *grpc.Server, srv ForwardingServer) {
	s.RegisterService(&_Forwarding_serviceDesc, srv)
}

func _Forwarding_ContextCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ContextCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/ContextCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ContextCreate(ctx, req.(*ContextCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_ContextDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ContextDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/ContextDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ContextDelete(ctx, req.(*ContextDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_ContextList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ContextList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/ContextList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ContextList(ctx, req.(*ContextListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_SetCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).SetCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/SetCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).SetCreate(ctx, req.(*SetCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_SetUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).SetUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/SetUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).SetUpdate(ctx, req.(*SetUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_AttributeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).AttributeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/AttributeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).AttributeList(ctx, req.(*AttributeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_AttributeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).AttributeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/AttributeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).AttributeUpdate(ctx, req.(*AttributeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_AttributeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).AttributeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/AttributeQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).AttributeQuery(ctx, req.(*AttributeQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_ObjectDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ObjectDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/ObjectDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ObjectDelete(ctx, req.(*ObjectDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_ObjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ObjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/ObjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ObjectList(ctx, req.(*ObjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_ObjectCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ObjectCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/ObjectCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ObjectCounters(ctx, req.(*ObjectCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_TableCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).TableCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/TableCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).TableCreate(ctx, req.(*TableCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_TableEntryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableEntryAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).TableEntryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/TableEntryAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).TableEntryAdd(ctx, req.(*TableEntryAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_TableEntryRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableEntryRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).TableEntryRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/TableEntryRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).TableEntryRemove(ctx, req.(*TableEntryRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_TableList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).TableList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/TableList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).TableList(ctx, req.(*TableListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_PortCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).PortCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/PortCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).PortCreate(ctx, req.(*PortCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_PortUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).PortUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/PortUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).PortUpdate(ctx, req.(*PortUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_PortState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).PortState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/PortState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).PortState(ctx, req.(*PortStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_FlowCounterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowCounterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).FlowCounterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/FlowCounterCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).FlowCounterCreate(ctx, req.(*FlowCounterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_FlowCounterQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowCounterQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).FlowCounterQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/FlowCounterQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).FlowCounterQuery(ctx, req.(*FlowCounterQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_Operation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ForwardingServer).Operation(&forwardingOperationServer{stream})
}

type Forwarding_OperationServer interface {
	Send(*OperationReply) error
	Recv() (*OperationRequest, error)
	grpc.ServerStream
}

type forwardingOperationServer struct {
	grpc.ServerStream
}

func (x *forwardingOperationServer) Send(m *OperationReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *forwardingOperationServer) Recv() (*OperationRequest, error) {
	m := new(OperationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Forwarding_NotifySubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotifySubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForwardingServer).NotifySubscribe(m, &forwardingNotifySubscribeServer{stream})
}

type Forwarding_NotifySubscribeServer interface {
	Send(*EventDesc) error
	grpc.ServerStream
}

type forwardingNotifySubscribeServer struct {
	grpc.ServerStream
}

func (x *forwardingNotifySubscribeServer) Send(m *EventDesc) error {
	return x.ServerStream.SendMsg(m)
}

func _Forwarding_PacketInject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ForwardingServer).PacketInject(&forwardingPacketInjectServer{stream})
}

type Forwarding_PacketInjectServer interface {
	SendAndClose(*PacketInjectResponse) error
	Recv() (*PacketInjectRequest, error)
	grpc.ServerStream
}

type forwardingPacketInjectServer struct {
	grpc.ServerStream
}

func (x *forwardingPacketInjectServer) SendAndClose(m *PacketInjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *forwardingPacketInjectServer) Recv() (*PacketInjectRequest, error) {
	m := new(PacketInjectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Forwarding_PacketSinkSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PacketSinkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForwardingServer).PacketSinkSubscribe(m, &forwardingPacketSinkSubscribeServer{stream})
}

type Forwarding_PacketSinkSubscribeServer interface {
	Send(*PacketSinkResponse) error
	grpc.ServerStream
}

type forwardingPacketSinkSubscribeServer struct {
	grpc.ServerStream
}

func (x *forwardingPacketSinkSubscribeServer) Send(m *PacketSinkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Forwarding_ObjectNID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectNIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ObjectNID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Forwarding/ObjectNID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ObjectNID(ctx, req.(*ObjectNIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Forwarding_serviceDesc = grpc.ServiceDesc{
	ServiceName: "forwarding.Forwarding",
	HandlerType: (*ForwardingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContextCreate",
			Handler:    _Forwarding_ContextCreate_Handler,
		},
		{
			MethodName: "ContextDelete",
			Handler:    _Forwarding_ContextDelete_Handler,
		},
		{
			MethodName: "ContextList",
			Handler:    _Forwarding_ContextList_Handler,
		},
		{
			MethodName: "SetCreate",
			Handler:    _Forwarding_SetCreate_Handler,
		},
		{
			MethodName: "SetUpdate",
			Handler:    _Forwarding_SetUpdate_Handler,
		},
		{
			MethodName: "AttributeList",
			Handler:    _Forwarding_AttributeList_Handler,
		},
		{
			MethodName: "AttributeUpdate",
			Handler:    _Forwarding_AttributeUpdate_Handler,
		},
		{
			MethodName: "AttributeQuery",
			Handler:    _Forwarding_AttributeQuery_Handler,
		},
		{
			MethodName: "ObjectDelete",
			Handler:    _Forwarding_ObjectDelete_Handler,
		},
		{
			MethodName: "ObjectList",
			Handler:    _Forwarding_ObjectList_Handler,
		},
		{
			MethodName: "ObjectCounters",
			Handler:    _Forwarding_ObjectCounters_Handler,
		},
		{
			MethodName: "TableCreate",
			Handler:    _Forwarding_TableCreate_Handler,
		},
		{
			MethodName: "TableEntryAdd",
			Handler:    _Forwarding_TableEntryAdd_Handler,
		},
		{
			MethodName: "TableEntryRemove",
			Handler:    _Forwarding_TableEntryRemove_Handler,
		},
		{
			MethodName: "TableList",
			Handler:    _Forwarding_TableList_Handler,
		},
		{
			MethodName: "PortCreate",
			Handler:    _Forwarding_PortCreate_Handler,
		},
		{
			MethodName: "PortUpdate",
			Handler:    _Forwarding_PortUpdate_Handler,
		},
		{
			MethodName: "PortState",
			Handler:    _Forwarding_PortState_Handler,
		},
		{
			MethodName: "FlowCounterCreate",
			Handler:    _Forwarding_FlowCounterCreate_Handler,
		},
		{
			MethodName: "FlowCounterQuery",
			Handler:    _Forwarding_FlowCounterQuery_Handler,
		},
		{
			MethodName: "ObjectNID",
			Handler:    _Forwarding_ObjectNID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Operation",
			Handler:       _Forwarding_Operation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NotifySubscribe",
			Handler:       _Forwarding_NotifySubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PacketInject",
			Handler:       _Forwarding_PacketInject_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PacketSinkSubscribe",
			Handler:       _Forwarding_PacketSinkSubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/forwarding/forwarding_service.proto",
}

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoClient interface {
	InfoList(ctx context.Context, in *InfoListRequest, opts ...grpc.CallOption) (*InfoListReply, error)
	InfoElement(ctx context.Context, in *InfoElementRequest, opts ...grpc.CallOption) (*InfoElementReply, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) InfoList(ctx context.Context, in *InfoListRequest, opts ...grpc.CallOption) (*InfoListReply, error) {
	out := new(InfoListReply)
	err := c.cc.Invoke(ctx, "/forwarding.Info/InfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) InfoElement(ctx context.Context, in *InfoElementRequest, opts ...grpc.CallOption) (*InfoElementReply, error) {
	out := new(InfoElementReply)
	err := c.cc.Invoke(ctx, "/forwarding.Info/InfoElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
type InfoServer interface {
	InfoList(context.Context, *InfoListRequest) (*InfoListReply, error)
	InfoElement(context.Context, *InfoElementRequest) (*InfoElementReply, error)
}

// UnimplementedInfoServer can be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (*UnimplementedInfoServer) InfoList(context.Context, *InfoListRequest) (*InfoListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoList not implemented")
}
func (*UnimplementedInfoServer) InfoElement(context.Context, *InfoElementRequest) (*InfoElementReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoElement not implemented")
}

func RegisterInfoServer(s *grpc.Server, srv InfoServer) {
	s.RegisterService(&_Info_serviceDesc, srv)
}

func _Info_InfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).InfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Info/InfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).InfoList(ctx, req.(*InfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_InfoElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).InfoElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Info/InfoElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).InfoElement(ctx, req.(*InfoElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Info_serviceDesc = grpc.ServiceDesc{
	ServiceName: "forwarding.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InfoList",
			Handler:    _Info_InfoList_Handler,
		},
		{
			MethodName: "InfoElement",
			Handler:    _Info_InfoElement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/forwarding/forwarding_service.proto",
}
