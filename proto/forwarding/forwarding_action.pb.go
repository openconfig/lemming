// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Protocol buffers to manage forwarding actions.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.5
// source: proto/forwarding/forwarding_action.proto

package forwarding

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An ActionType enumerates all supported forwarding actions.
type ActionType int32

const (
	ActionType_ACTION_TYPE_UNSPECIFIED        ActionType = 0  // Unspecified action
	ActionType_ACTION_TYPE_DROP               ActionType = 1  // Drop packets.
	ActionType_ACTION_TYPE_TRANSMIT           ActionType = 2  // Transmit packets on a specific port
	ActionType_ACTION_TYPE_LOOKUP             ActionType = 3  // Lookup a table to decide next action
	ActionType_ACTION_TYPE_RATE               ActionType = 4  // Ratelimit the packet and continue
	ActionType_ACTION_TYPE_ENCAP              ActionType = 5  // Add a packet header and continue
	ActionType_ACTION_TYPE_DECAP              ActionType = 6  // Remove a packet header and continue
	ActionType_ACTION_TYPE_UPDATE             ActionType = 8  // Update a packet field
	ActionType_ACTION_TYPE_TEST               ActionType = 9  // Action used to write tests
	ActionType_ACTION_TYPE_CONTINUE           ActionType = 10 // Action used to continue processing the packet
	ActionType_ACTION_TYPE_OUTPUT             ActionType = 11 // Action used to evaluate packet processing
	ActionType_ACTION_TYPE_MIRROR             ActionType = 12 // Action used to mirror a packet
	ActionType_ACTION_TYPE_EVALUATE           ActionType = 13 // Action used to evaluate all pending actions
	ActionType_ACTION_TYPE_BRIDGE_LEARN       ActionType = 14 // Action used to learn on the specified bridge
	ActionType_ACTION_TYPE_FLOW_COUNTER       ActionType = 15 // Action used to increment the per-flow counter
	ActionType_ACTION_TYPE_REPARSE            ActionType = 16 // Reparses the packet as a specific type of header
	ActionType_ACTION_TYPE_SELECT_ACTION_LIST ActionType = 17 // Action used select a action list from a set of action lists
	ActionType_ACTION_TYPE_DEBUG              ActionType = 18 // Action used to set the debug flag on a packet
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0:  "ACTION_TYPE_UNSPECIFIED",
		1:  "ACTION_TYPE_DROP",
		2:  "ACTION_TYPE_TRANSMIT",
		3:  "ACTION_TYPE_LOOKUP",
		4:  "ACTION_TYPE_RATE",
		5:  "ACTION_TYPE_ENCAP",
		6:  "ACTION_TYPE_DECAP",
		8:  "ACTION_TYPE_UPDATE",
		9:  "ACTION_TYPE_TEST",
		10: "ACTION_TYPE_CONTINUE",
		11: "ACTION_TYPE_OUTPUT",
		12: "ACTION_TYPE_MIRROR",
		13: "ACTION_TYPE_EVALUATE",
		14: "ACTION_TYPE_BRIDGE_LEARN",
		15: "ACTION_TYPE_FLOW_COUNTER",
		16: "ACTION_TYPE_REPARSE",
		17: "ACTION_TYPE_SELECT_ACTION_LIST",
		18: "ACTION_TYPE_DEBUG",
	}
	ActionType_value = map[string]int32{
		"ACTION_TYPE_UNSPECIFIED":        0,
		"ACTION_TYPE_DROP":               1,
		"ACTION_TYPE_TRANSMIT":           2,
		"ACTION_TYPE_LOOKUP":             3,
		"ACTION_TYPE_RATE":               4,
		"ACTION_TYPE_ENCAP":              5,
		"ACTION_TYPE_DECAP":              6,
		"ACTION_TYPE_UPDATE":             8,
		"ACTION_TYPE_TEST":               9,
		"ACTION_TYPE_CONTINUE":           10,
		"ACTION_TYPE_OUTPUT":             11,
		"ACTION_TYPE_MIRROR":             12,
		"ACTION_TYPE_EVALUATE":           13,
		"ACTION_TYPE_BRIDGE_LEARN":       14,
		"ACTION_TYPE_FLOW_COUNTER":       15,
		"ACTION_TYPE_REPARSE":            16,
		"ACTION_TYPE_SELECT_ACTION_LIST": 17,
		"ACTION_TYPE_DEBUG":              18,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_forwarding_forwarding_action_proto_enumTypes[0].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_proto_forwarding_forwarding_action_proto_enumTypes[0]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{0}
}

// An UpdateType enumerates all supported forwarding updates.
type UpdateType int32

const (
	UpdateType_UPDATE_TYPE_UNSPECIFIED UpdateType = 0
	UpdateType_UPDATE_TYPE_SET         UpdateType = 1 // Set a packet field.
	UpdateType_UPDATE_TYPE_INC         UpdateType = 2 // Increment a packet field.
	UpdateType_UPDATE_TYPE_DEC         UpdateType = 3 // Decrement a packet field.
	UpdateType_UPDATE_TYPE_COPY        UpdateType = 4 // Copy a field.
	UpdateType_UPDATE_TYPE_BIT_WRITE   UpdateType = 5 // Writes a set of bits in a packet field.
	UpdateType_UPDATE_TYPE_BIT_AND     UpdateType = 6 // Performs a bitwise 'and' operation on a field.
	UpdateType_UPDATE_TYPE_BIT_OR      UpdateType = 7 // Performs a bitwise 'or' operation on a field.
)

// Enum value maps for UpdateType.
var (
	UpdateType_name = map[int32]string{
		0: "UPDATE_TYPE_UNSPECIFIED",
		1: "UPDATE_TYPE_SET",
		2: "UPDATE_TYPE_INC",
		3: "UPDATE_TYPE_DEC",
		4: "UPDATE_TYPE_COPY",
		5: "UPDATE_TYPE_BIT_WRITE",
		6: "UPDATE_TYPE_BIT_AND",
		7: "UPDATE_TYPE_BIT_OR",
	}
	UpdateType_value = map[string]int32{
		"UPDATE_TYPE_UNSPECIFIED": 0,
		"UPDATE_TYPE_SET":         1,
		"UPDATE_TYPE_INC":         2,
		"UPDATE_TYPE_DEC":         3,
		"UPDATE_TYPE_COPY":        4,
		"UPDATE_TYPE_BIT_WRITE":   5,
		"UPDATE_TYPE_BIT_AND":     6,
		"UPDATE_TYPE_BIT_OR":      7,
	}
)

func (x UpdateType) Enum() *UpdateType {
	p := new(UpdateType)
	*p = x
	return p
}

func (x UpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_forwarding_forwarding_action_proto_enumTypes[1].Descriptor()
}

func (UpdateType) Type() protoreflect.EnumType {
	return &file_proto_forwarding_forwarding_action_proto_enumTypes[1]
}

func (x UpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateType.Descriptor instead.
func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{1}
}

// SelectAlgorithm enumerates algorithms used to compute the hash.
type SelectActionListActionDesc_SelectAlgorithm int32

const (
	SelectActionListActionDesc_SELECT_ALGORITHM_UNSPECIFIED SelectActionListActionDesc_SelectAlgorithm = 0
	SelectActionListActionDesc_SELECT_ALGORITHM_CRC16       SelectActionListActionDesc_SelectAlgorithm = 2 // x16+x15+x2+1
	SelectActionListActionDesc_SELECT_ALGORITHM_CRC32       SelectActionListActionDesc_SelectAlgorithm = 3 // x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1
	SelectActionListActionDesc_SELECT_ALGORITHM_RANDOM      SelectActionListActionDesc_SelectAlgorithm = 5 // Selects a random action list
)

// Enum value maps for SelectActionListActionDesc_SelectAlgorithm.
var (
	SelectActionListActionDesc_SelectAlgorithm_name = map[int32]string{
		0: "SELECT_ALGORITHM_UNSPECIFIED",
		2: "SELECT_ALGORITHM_CRC16",
		3: "SELECT_ALGORITHM_CRC32",
		5: "SELECT_ALGORITHM_RANDOM",
	}
	SelectActionListActionDesc_SelectAlgorithm_value = map[string]int32{
		"SELECT_ALGORITHM_UNSPECIFIED": 0,
		"SELECT_ALGORITHM_CRC16":       2,
		"SELECT_ALGORITHM_CRC32":       3,
		"SELECT_ALGORITHM_RANDOM":      5,
	}
)

func (x SelectActionListActionDesc_SelectAlgorithm) Enum() *SelectActionListActionDesc_SelectAlgorithm {
	p := new(SelectActionListActionDesc_SelectAlgorithm)
	*p = x
	return p
}

func (x SelectActionListActionDesc_SelectAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectActionListActionDesc_SelectAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_forwarding_forwarding_action_proto_enumTypes[2].Descriptor()
}

func (SelectActionListActionDesc_SelectAlgorithm) Type() protoreflect.EnumType {
	return &file_proto_forwarding_forwarding_action_proto_enumTypes[2]
}

func (x SelectActionListActionDesc_SelectAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelectActionListActionDesc_SelectAlgorithm.Descriptor instead.
func (SelectActionListActionDesc_SelectAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{13, 0}
}

// An ActionDesc describes an operation that can be performed on a packet.
// It is assumed that the desc will contain the appropriate values in the oneof.
//
// Actions that are marked on evaluate are executed only when the evaluate
// action is processed.
type ActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType ActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=forwarding.ActionType" json:"action_type,omitempty"`
	OnEvaluate bool       `protobuf:"varint,2,opt,name=on_evaluate,json=onEvaluate,proto3" json:"on_evaluate,omitempty"`
	// Types that are assignable to Action:
	//
	//	*ActionDesc_Transmit
	//	*ActionDesc_Lookup
	//	*ActionDesc_Rate
	//	*ActionDesc_Encap
	//	*ActionDesc_Decap
	//	*ActionDesc_Update
	//	*ActionDesc_Test
	//	*ActionDesc_Mirror
	//	*ActionDesc_Bridge
	//	*ActionDesc_Flow
	//	*ActionDesc_Reparse
	//	*ActionDesc_Select
	Action isActionDesc_Action `protobuf_oneof:"action"`
}

func (x *ActionDesc) Reset() {
	*x = ActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionDesc) ProtoMessage() {}

func (x *ActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionDesc.ProtoReflect.Descriptor instead.
func (*ActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{0}
}

func (x *ActionDesc) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_ACTION_TYPE_UNSPECIFIED
}

func (x *ActionDesc) GetOnEvaluate() bool {
	if x != nil {
		return x.OnEvaluate
	}
	return false
}

func (m *ActionDesc) GetAction() isActionDesc_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ActionDesc) GetTransmit() *TransmitActionDesc {
	if x, ok := x.GetAction().(*ActionDesc_Transmit); ok {
		return x.Transmit
	}
	return nil
}

func (x *ActionDesc) GetLookup() *LookupActionDesc {
	if x, ok := x.GetAction().(*ActionDesc_Lookup); ok {
		return x.Lookup
	}
	return nil
}

func (x *ActionDesc) GetRate() *RateActionDesc {
	if x, ok := x.GetAction().(*ActionDesc_Rate); ok {
		return x.Rate
	}
	return nil
}

func (x *ActionDesc) GetEncap() *EncapActionDesc {
	if x, ok := x.GetAction().(*ActionDesc_Encap); ok {
		return x.Encap
	}
	return nil
}

func (x *ActionDesc) GetDecap() *DecapActionDesc {
	if x, ok := x.GetAction().(*ActionDesc_Decap); ok {
		return x.Decap
	}
	return nil
}

func (x *ActionDesc) GetUpdate() *UpdateActionDesc {
	if x, ok := x.GetAction().(*ActionDesc_Update); ok {
		return x.Update
	}
	return nil
}

func (x *ActionDesc) GetTest() *TestActionDesc {
	if x, ok := x.GetAction().(*ActionDesc_Test); ok {
		return x.Test
	}
	return nil
}

func (x *ActionDesc) GetMirror() *MirrorActionDesc {
	if x, ok := x.GetAction().(*ActionDesc_Mirror); ok {
		return x.Mirror
	}
	return nil
}

func (x *ActionDesc) GetBridge() *BridgeLearnActionDesc {
	if x, ok := x.GetAction().(*ActionDesc_Bridge); ok {
		return x.Bridge
	}
	return nil
}

func (x *ActionDesc) GetFlow() *FlowCounterActionDesc {
	if x, ok := x.GetAction().(*ActionDesc_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *ActionDesc) GetReparse() *ReparseActionDesc {
	if x, ok := x.GetAction().(*ActionDesc_Reparse); ok {
		return x.Reparse
	}
	return nil
}

func (x *ActionDesc) GetSelect() *SelectActionListActionDesc {
	if x, ok := x.GetAction().(*ActionDesc_Select); ok {
		return x.Select
	}
	return nil
}

type isActionDesc_Action interface {
	isActionDesc_Action()
}

type ActionDesc_Transmit struct {
	Transmit *TransmitActionDesc `protobuf:"bytes,3,opt,name=transmit,proto3,oneof"`
}

type ActionDesc_Lookup struct {
	Lookup *LookupActionDesc `protobuf:"bytes,4,opt,name=lookup,proto3,oneof"`
}

type ActionDesc_Rate struct {
	Rate *RateActionDesc `protobuf:"bytes,5,opt,name=rate,proto3,oneof"`
}

type ActionDesc_Encap struct {
	Encap *EncapActionDesc `protobuf:"bytes,6,opt,name=encap,proto3,oneof"`
}

type ActionDesc_Decap struct {
	Decap *DecapActionDesc `protobuf:"bytes,7,opt,name=decap,proto3,oneof"`
}

type ActionDesc_Update struct {
	Update *UpdateActionDesc `protobuf:"bytes,8,opt,name=update,proto3,oneof"`
}

type ActionDesc_Test struct {
	Test *TestActionDesc `protobuf:"bytes,9,opt,name=test,proto3,oneof"`
}

type ActionDesc_Mirror struct {
	Mirror *MirrorActionDesc `protobuf:"bytes,10,opt,name=mirror,proto3,oneof"`
}

type ActionDesc_Bridge struct {
	Bridge *BridgeLearnActionDesc `protobuf:"bytes,11,opt,name=bridge,proto3,oneof"`
}

type ActionDesc_Flow struct {
	Flow *FlowCounterActionDesc `protobuf:"bytes,12,opt,name=flow,proto3,oneof"`
}

type ActionDesc_Reparse struct {
	Reparse *ReparseActionDesc `protobuf:"bytes,13,opt,name=reparse,proto3,oneof"`
}

type ActionDesc_Select struct {
	Select *SelectActionListActionDesc `protobuf:"bytes,14,opt,name=select,proto3,oneof"`
}

func (*ActionDesc_Transmit) isActionDesc_Action() {}

func (*ActionDesc_Lookup) isActionDesc_Action() {}

func (*ActionDesc_Rate) isActionDesc_Action() {}

func (*ActionDesc_Encap) isActionDesc_Action() {}

func (*ActionDesc_Decap) isActionDesc_Action() {}

func (*ActionDesc_Update) isActionDesc_Action() {}

func (*ActionDesc_Test) isActionDesc_Action() {}

func (*ActionDesc_Mirror) isActionDesc_Action() {}

func (*ActionDesc_Bridge) isActionDesc_Action() {}

func (*ActionDesc_Flow) isActionDesc_Action() {}

func (*ActionDesc_Reparse) isActionDesc_Action() {}

func (*ActionDesc_Select) isActionDesc_Action() {}

// A TransmitActionDesc describes TRANSMIT_ACTION. The descriptor contains a
// port-id that identifies the port used to transmit the packet. The transmit
// action can be marked to be effective immediately in which case it cannot
// be overriden.
type TransmitActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId    *PortId `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"` // Port used for transmitting.
	Immediate bool    `protobuf:"varint,2,opt,name=immediate,proto3" json:"immediate,omitempty"`        // True if it is effective immediately..
}

func (x *TransmitActionDesc) Reset() {
	*x = TransmitActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransmitActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmitActionDesc) ProtoMessage() {}

func (x *TransmitActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmitActionDesc.ProtoReflect.Descriptor instead.
func (*TransmitActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{1}
}

func (x *TransmitActionDesc) GetPortId() *PortId {
	if x != nil {
		return x.PortId
	}
	return nil
}

func (x *TransmitActionDesc) GetImmediate() bool {
	if x != nil {
		return x.Immediate
	}
	return false
}

// A LookupActionDesc describes LOOKUP_ACTION. The descriptor contains a
// table-id that identifies a table that is used to look up the packet to
// determine the next set of actions.
type LookupActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId *TableId `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"` // Table used for lookup.
}

func (x *LookupActionDesc) Reset() {
	*x = LookupActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupActionDesc) ProtoMessage() {}

func (x *LookupActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupActionDesc.ProtoReflect.Descriptor instead.
func (*LookupActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{2}
}

func (x *LookupActionDesc) GetTableId() *TableId {
	if x != nil {
		return x.TableId
	}
	return nil
}

// A RateActionDesc describes RATELIMIT_ACTION. The descriptor contains a burst
// size and a rate that is applied to check if the packet should continue to the
// next action.
type RateActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BurstBytes int32 `protobuf:"varint,1,opt,name=burst_bytes,json=burstBytes,proto3" json:"burst_bytes,omitempty"` // Size of bursts in bytes.
	RateBps    int32 `protobuf:"varint,2,opt,name=rate_bps,json=rateBps,proto3" json:"rate_bps,omitempty"`          // Rate in bytes per second.
}

func (x *RateActionDesc) Reset() {
	*x = RateActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateActionDesc) ProtoMessage() {}

func (x *RateActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateActionDesc.ProtoReflect.Descriptor instead.
func (*RateActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{3}
}

func (x *RateActionDesc) GetBurstBytes() int32 {
	if x != nil {
		return x.BurstBytes
	}
	return 0
}

func (x *RateActionDesc) GetRateBps() int32 {
	if x != nil {
		return x.RateBps
	}
	return 0
}

// An EncapActionDesc describes ENCAP_ACTION. The descriptor contains a
// header-id and a series of bytes that are added to the packet.
type EncapActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderId PacketHeaderId `protobuf:"varint,1,opt,name=header_id,json=headerId,proto3,enum=forwarding.PacketHeaderId" json:"header_id,omitempty"` // Header to add.
}

func (x *EncapActionDesc) Reset() {
	*x = EncapActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncapActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncapActionDesc) ProtoMessage() {}

func (x *EncapActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncapActionDesc.ProtoReflect.Descriptor instead.
func (*EncapActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{4}
}

func (x *EncapActionDesc) GetHeaderId() PacketHeaderId {
	if x != nil {
		return x.HeaderId
	}
	return PacketHeaderId_PACKET_HEADER_ID_UNSPECIFIED
}

// A DecapActionDesc describes DECAP_ACTION. The descriptor identifies the
// header that is removed from the packet. Note that when the packet has
// multiple instance of the specified header, the outermost instance is always
// removed.
type DecapActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderId PacketHeaderId `protobuf:"varint,1,opt,name=header_id,json=headerId,proto3,enum=forwarding.PacketHeaderId" json:"header_id,omitempty"` // Header to remove.
}

func (x *DecapActionDesc) Reset() {
	*x = DecapActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecapActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecapActionDesc) ProtoMessage() {}

func (x *DecapActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecapActionDesc.ProtoReflect.Descriptor instead.
func (*DecapActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{5}
}

func (x *DecapActionDesc) GetHeaderId() PacketHeaderId {
	if x != nil {
		return x.HeaderId
	}
	return PacketHeaderId_PACKET_HEADER_ID_UNSPECIFIED
}

// A BridgeLearnAction describes BRIDGE_LEARN_ACTION. The descriptor contains a
// table-id that identifies a table that is used to learn the packet.
type BridgeLearnActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId *TableId `protobuf:"bytes,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"` // Table used for learning.
}

func (x *BridgeLearnActionDesc) Reset() {
	*x = BridgeLearnActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeLearnActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeLearnActionDesc) ProtoMessage() {}

func (x *BridgeLearnActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeLearnActionDesc.ProtoReflect.Descriptor instead.
func (*BridgeLearnActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{6}
}

func (x *BridgeLearnActionDesc) GetTableId() *TableId {
	if x != nil {
		return x.TableId
	}
	return nil
}

// A UpdateActionDesc describes UPDATE_ACTION. The descriptor identifies a
// change to a packet field.
type UpdateActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldId   *PacketFieldId `protobuf:"bytes,1,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`        // Packet field.
	Type      UpdateType     `protobuf:"varint,2,opt,name=type,proto3,enum=forwarding.UpdateType" json:"type,omitempty"` // Update type.
	Value     []byte         `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                           // Values used for set, dec, and, or and inc.
	Field     *PacketFieldId `protobuf:"bytes,4,opt,name=field,proto3" json:"field,omitempty"`                           // Value used for copy.
	BitOffset uint32         `protobuf:"varint,5,opt,name=bit_offset,json=bitOffset,proto3" json:"bit_offset,omitempty"` // Offset in bits to update (used for bit update).
	BitCount  uint32         `protobuf:"varint,6,opt,name=bit_count,json=bitCount,proto3" json:"bit_count,omitempty"`    // Number of bits to update (used for bit update).
}

func (x *UpdateActionDesc) Reset() {
	*x = UpdateActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateActionDesc) ProtoMessage() {}

func (x *UpdateActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateActionDesc.ProtoReflect.Descriptor instead.
func (*UpdateActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateActionDesc) GetFieldId() *PacketFieldId {
	if x != nil {
		return x.FieldId
	}
	return nil
}

func (x *UpdateActionDesc) GetType() UpdateType {
	if x != nil {
		return x.Type
	}
	return UpdateType_UPDATE_TYPE_UNSPECIFIED
}

func (x *UpdateActionDesc) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *UpdateActionDesc) GetField() *PacketFieldId {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *UpdateActionDesc) GetBitOffset() uint32 {
	if x != nil {
		return x.BitOffset
	}
	return 0
}

func (x *UpdateActionDesc) GetBitCount() uint32 {
	if x != nil {
		return x.BitCount
	}
	return 0
}

// A TestActionDesc describes a TEST_ACTION.
type TestActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int1   uint32 `protobuf:"varint,1,opt,name=int1,proto3" json:"int1,omitempty"`
	Bytes1 []byte `protobuf:"bytes,2,opt,name=bytes1,proto3" json:"bytes1,omitempty"`
}

func (x *TestActionDesc) Reset() {
	*x = TestActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestActionDesc) ProtoMessage() {}

func (x *TestActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestActionDesc.ProtoReflect.Descriptor instead.
func (*TestActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{8}
}

func (x *TestActionDesc) GetInt1() uint32 {
	if x != nil {
		return x.Int1
	}
	return 0
}

func (x *TestActionDesc) GetBytes1() []byte {
	if x != nil {
		return x.Bytes1
	}
	return nil
}

// A MirrorActionDesc describes a MIRROR_ACTION. It mirrors the packet and
// applies the specified actions to the mirrored packet. If specified, the
// packet is then transmitted using the specified port and port action.
type MirrorActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions    []*ActionDesc    `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`                                                     // Actions applied to the mirrored packet
	PortId     *PortId          `protobuf:"bytes,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`                                         // Port used for mirroring
	PortAction PortAction       `protobuf:"varint,2,opt,name=port_action,json=portAction,proto3,enum=forwarding.PortAction" json:"port_action,omitempty"` // Indicates how the packet is injected
	FieldIds   []*PacketFieldId `protobuf:"bytes,4,rep,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`                                   // Packet fields to restore
}

func (x *MirrorActionDesc) Reset() {
	*x = MirrorActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirrorActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorActionDesc) ProtoMessage() {}

func (x *MirrorActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorActionDesc.ProtoReflect.Descriptor instead.
func (*MirrorActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{9}
}

func (x *MirrorActionDesc) GetActions() []*ActionDesc {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *MirrorActionDesc) GetPortId() *PortId {
	if x != nil {
		return x.PortId
	}
	return nil
}

func (x *MirrorActionDesc) GetPortAction() PortAction {
	if x != nil {
		return x.PortAction
	}
	return PortAction_PORT_ACTION_UNSPECIFIED
}

func (x *MirrorActionDesc) GetFieldIds() []*PacketFieldId {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

// A FlowCounterActionDesc describes a FLOW_COUNTER_ACTION. It increments the
// per flow counter associated with this row; the id of the counter is
// specified.
type FlowCounterActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CounterId *FlowCounterId `protobuf:"bytes,1,opt,name=counter_id,json=counterId,proto3" json:"counter_id,omitempty"`
}

func (x *FlowCounterActionDesc) Reset() {
	*x = FlowCounterActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCounterActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCounterActionDesc) ProtoMessage() {}

func (x *FlowCounterActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCounterActionDesc.ProtoReflect.Descriptor instead.
func (*FlowCounterActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{10}
}

func (x *FlowCounterActionDesc) GetCounterId() *FlowCounterId {
	if x != nil {
		return x.CounterId
	}
	return nil
}

// A ReparseActionDesc describes a REPARSE_ACTION. It reparses the current
// packet to start from the specified packet header id. Optionally it can
// also propagate some packet fields from the old packet to the newly formed
// packet, and prepend bytes to the start of the packet before prepending.
type ReparseActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderId PacketHeaderId   `protobuf:"varint,1,opt,name=header_id,json=headerId,proto3,enum=forwarding.PacketHeaderId" json:"header_id,omitempty"` // Header to reparse
	FieldIds []*PacketFieldId `protobuf:"bytes,2,rep,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`                                 // Packet fields to restore
	Prepend  []byte           `protobuf:"bytes,3,opt,name=prepend,proto3" json:"prepend,omitempty"`                                                   // Bytes to be prepended before reparsing
}

func (x *ReparseActionDesc) Reset() {
	*x = ReparseActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReparseActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReparseActionDesc) ProtoMessage() {}

func (x *ReparseActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReparseActionDesc.ProtoReflect.Descriptor instead.
func (*ReparseActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{11}
}

func (x *ReparseActionDesc) GetHeaderId() PacketHeaderId {
	if x != nil {
		return x.HeaderId
	}
	return PacketHeaderId_PACKET_HEADER_ID_UNSPECIFIED
}

func (x *ReparseActionDesc) GetFieldIds() []*PacketFieldId {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

func (x *ReparseActionDesc) GetPrepend() []byte {
	if x != nil {
		return x.Prepend
	}
	return nil
}

// An ActionList describes a sequence of actions.
type ActionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*ActionDesc `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *ActionList) Reset() {
	*x = ActionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionList) ProtoMessage() {}

func (x *ActionList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionList.ProtoReflect.Descriptor instead.
func (*ActionList) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{12}
}

func (x *ActionList) GetActions() []*ActionDesc {
	if x != nil {
		return x.Actions
	}
	return nil
}

// A SelectActionListActionDesc describes a SELECT_ACTION_LIST_ACTION.
// It is an action that selects an action list to execute from a set
// of action lists. The selection is done by using a hash on the
// specified packet fields.
type SelectActionListActionDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectAlgorithm SelectActionListActionDesc_SelectAlgorithm `protobuf:"varint,1,opt,name=select_algorithm,json=selectAlgorithm,proto3,enum=forwarding.SelectActionListActionDesc_SelectAlgorithm" json:"select_algorithm,omitempty"` // Algorithm used to select an action list
	FieldIds        []*PacketFieldId                           `protobuf:"bytes,2,rep,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`                                                                                  // List of fields to use for hashing
	ActionLists     []*ActionList                              `protobuf:"bytes,3,rep,name=action_lists,json=actionLists,proto3" json:"action_lists,omitempty"`                                                                         // A set of action lists from an an action list is selected
}

func (x *SelectActionListActionDesc) Reset() {
	*x = SelectActionListActionDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectActionListActionDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectActionListActionDesc) ProtoMessage() {}

func (x *SelectActionListActionDesc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_forwarding_forwarding_action_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectActionListActionDesc.ProtoReflect.Descriptor instead.
func (*SelectActionListActionDesc) Descriptor() ([]byte, []int) {
	return file_proto_forwarding_forwarding_action_proto_rawDescGZIP(), []int{13}
}

func (x *SelectActionListActionDesc) GetSelectAlgorithm() SelectActionListActionDesc_SelectAlgorithm {
	if x != nil {
		return x.SelectAlgorithm
	}
	return SelectActionListActionDesc_SELECT_ALGORITHM_UNSPECIFIED
}

func (x *SelectActionListActionDesc) GetFieldIds() []*PacketFieldId {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

func (x *SelectActionListActionDesc) GetActionLists() []*ActionList {
	if x != nil {
		return x.ActionLists
	}
	return nil
}

var File_proto_forwarding_forwarding_action_proto protoreflect.FileDescriptor

var file_proto_forwarding_forwarding_action_proto_rawDesc = []byte{
	0x0a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x97, 0x06, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x37, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f,
	0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12,
	0x30, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x48, 0x00, 0x52, 0x04, 0x72, 0x61, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e,
	0x63, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x64, 0x65, 0x63, 0x61, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x65, 0x63, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x48, 0x00, 0x52, 0x05, 0x64, 0x65, 0x63, 0x61, 0x70, 0x12, 0x36, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a,
	0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x48, 0x00, 0x52, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x48, 0x00, 0x52, 0x04, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x61, 0x72, 0x73, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x70, 0x61, 0x72, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x70, 0x61, 0x72, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x12, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x2b, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x22, 0x42, 0x0a, 0x10, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x2e, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22,
	0x4c, 0x0a, 0x0e, 0x52, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x75, 0x72, 0x73, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61, 0x74, 0x65, 0x42, 0x70, 0x73, 0x22, 0x4a, 0x0a,
	0x0f, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x37, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x08, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0f, 0x44, 0x65, 0x63,
	0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x37, 0x0a, 0x09,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x52, 0x08, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x15, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2e,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xf7,
	0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64,
	0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x62, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e,
	0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x31, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x22, 0xe2, 0x01, 0x0a, 0x10, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a,
	0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x64, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x15, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9e,
	0x01, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x61, 0x72, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x52, 0x08, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x22,
	0x3e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xfd, 0x02, 0x0a, 0x1a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x12, 0x61,
	0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x52, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x52,
	0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x43,
	0x52, 0x43, 0x31, 0x36, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54,
	0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x47,
	0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x05, 0x2a,
	0xd7, 0x03, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55,
	0x50, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x45, 0x43, 0x41, 0x50, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x0a, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0c, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x45, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f,
	0x4c, 0x45, 0x41, 0x52, 0x4e, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x52, 0x53, 0x45, 0x10, 0x10, 0x12, 0x22,
	0x0a, 0x1e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x12, 0x2a, 0xca, 0x01, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x43, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49,
	0x54, 0x5f, 0x4f, 0x52, 0x10, 0x07, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_forwarding_forwarding_action_proto_rawDescOnce sync.Once
	file_proto_forwarding_forwarding_action_proto_rawDescData = file_proto_forwarding_forwarding_action_proto_rawDesc
)

func file_proto_forwarding_forwarding_action_proto_rawDescGZIP() []byte {
	file_proto_forwarding_forwarding_action_proto_rawDescOnce.Do(func() {
		file_proto_forwarding_forwarding_action_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_forwarding_forwarding_action_proto_rawDescData)
	})
	return file_proto_forwarding_forwarding_action_proto_rawDescData
}

var file_proto_forwarding_forwarding_action_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_forwarding_forwarding_action_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_forwarding_forwarding_action_proto_goTypes = []interface{}{
	(ActionType)(0), // 0: forwarding.ActionType
	(UpdateType)(0), // 1: forwarding.UpdateType
	(SelectActionListActionDesc_SelectAlgorithm)(0), // 2: forwarding.SelectActionListActionDesc.SelectAlgorithm
	(*ActionDesc)(nil),                 // 3: forwarding.ActionDesc
	(*TransmitActionDesc)(nil),         // 4: forwarding.TransmitActionDesc
	(*LookupActionDesc)(nil),           // 5: forwarding.LookupActionDesc
	(*RateActionDesc)(nil),             // 6: forwarding.RateActionDesc
	(*EncapActionDesc)(nil),            // 7: forwarding.EncapActionDesc
	(*DecapActionDesc)(nil),            // 8: forwarding.DecapActionDesc
	(*BridgeLearnActionDesc)(nil),      // 9: forwarding.BridgeLearnActionDesc
	(*UpdateActionDesc)(nil),           // 10: forwarding.UpdateActionDesc
	(*TestActionDesc)(nil),             // 11: forwarding.TestActionDesc
	(*MirrorActionDesc)(nil),           // 12: forwarding.MirrorActionDesc
	(*FlowCounterActionDesc)(nil),      // 13: forwarding.FlowCounterActionDesc
	(*ReparseActionDesc)(nil),          // 14: forwarding.ReparseActionDesc
	(*ActionList)(nil),                 // 15: forwarding.ActionList
	(*SelectActionListActionDesc)(nil), // 16: forwarding.SelectActionListActionDesc
	(*PortId)(nil),                     // 17: forwarding.PortId
	(*TableId)(nil),                    // 18: forwarding.TableId
	(PacketHeaderId)(0),                // 19: forwarding.PacketHeaderId
	(*PacketFieldId)(nil),              // 20: forwarding.PacketFieldId
	(PortAction)(0),                    // 21: forwarding.PortAction
	(*FlowCounterId)(nil),              // 22: forwarding.FlowCounterId
}
var file_proto_forwarding_forwarding_action_proto_depIdxs = []int32{
	0,  // 0: forwarding.ActionDesc.action_type:type_name -> forwarding.ActionType
	4,  // 1: forwarding.ActionDesc.transmit:type_name -> forwarding.TransmitActionDesc
	5,  // 2: forwarding.ActionDesc.lookup:type_name -> forwarding.LookupActionDesc
	6,  // 3: forwarding.ActionDesc.rate:type_name -> forwarding.RateActionDesc
	7,  // 4: forwarding.ActionDesc.encap:type_name -> forwarding.EncapActionDesc
	8,  // 5: forwarding.ActionDesc.decap:type_name -> forwarding.DecapActionDesc
	10, // 6: forwarding.ActionDesc.update:type_name -> forwarding.UpdateActionDesc
	11, // 7: forwarding.ActionDesc.test:type_name -> forwarding.TestActionDesc
	12, // 8: forwarding.ActionDesc.mirror:type_name -> forwarding.MirrorActionDesc
	9,  // 9: forwarding.ActionDesc.bridge:type_name -> forwarding.BridgeLearnActionDesc
	13, // 10: forwarding.ActionDesc.flow:type_name -> forwarding.FlowCounterActionDesc
	14, // 11: forwarding.ActionDesc.reparse:type_name -> forwarding.ReparseActionDesc
	16, // 12: forwarding.ActionDesc.select:type_name -> forwarding.SelectActionListActionDesc
	17, // 13: forwarding.TransmitActionDesc.port_id:type_name -> forwarding.PortId
	18, // 14: forwarding.LookupActionDesc.table_id:type_name -> forwarding.TableId
	19, // 15: forwarding.EncapActionDesc.header_id:type_name -> forwarding.PacketHeaderId
	19, // 16: forwarding.DecapActionDesc.header_id:type_name -> forwarding.PacketHeaderId
	18, // 17: forwarding.BridgeLearnActionDesc.table_id:type_name -> forwarding.TableId
	20, // 18: forwarding.UpdateActionDesc.field_id:type_name -> forwarding.PacketFieldId
	1,  // 19: forwarding.UpdateActionDesc.type:type_name -> forwarding.UpdateType
	20, // 20: forwarding.UpdateActionDesc.field:type_name -> forwarding.PacketFieldId
	3,  // 21: forwarding.MirrorActionDesc.actions:type_name -> forwarding.ActionDesc
	17, // 22: forwarding.MirrorActionDesc.port_id:type_name -> forwarding.PortId
	21, // 23: forwarding.MirrorActionDesc.port_action:type_name -> forwarding.PortAction
	20, // 24: forwarding.MirrorActionDesc.field_ids:type_name -> forwarding.PacketFieldId
	22, // 25: forwarding.FlowCounterActionDesc.counter_id:type_name -> forwarding.FlowCounterId
	19, // 26: forwarding.ReparseActionDesc.header_id:type_name -> forwarding.PacketHeaderId
	20, // 27: forwarding.ReparseActionDesc.field_ids:type_name -> forwarding.PacketFieldId
	3,  // 28: forwarding.ActionList.actions:type_name -> forwarding.ActionDesc
	2,  // 29: forwarding.SelectActionListActionDesc.select_algorithm:type_name -> forwarding.SelectActionListActionDesc.SelectAlgorithm
	20, // 30: forwarding.SelectActionListActionDesc.field_ids:type_name -> forwarding.PacketFieldId
	15, // 31: forwarding.SelectActionListActionDesc.action_lists:type_name -> forwarding.ActionList
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_proto_forwarding_forwarding_action_proto_init() }
func file_proto_forwarding_forwarding_action_proto_init() {
	if File_proto_forwarding_forwarding_action_proto != nil {
		return
	}
	file_proto_forwarding_forwarding_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_forwarding_forwarding_action_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransmitActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookupActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncapActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecapActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeLearnActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirrorActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCounterActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReparseActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_forwarding_forwarding_action_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectActionListActionDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_forwarding_forwarding_action_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ActionDesc_Transmit)(nil),
		(*ActionDesc_Lookup)(nil),
		(*ActionDesc_Rate)(nil),
		(*ActionDesc_Encap)(nil),
		(*ActionDesc_Decap)(nil),
		(*ActionDesc_Update)(nil),
		(*ActionDesc_Test)(nil),
		(*ActionDesc_Mirror)(nil),
		(*ActionDesc_Bridge)(nil),
		(*ActionDesc_Flow)(nil),
		(*ActionDesc_Reparse)(nil),
		(*ActionDesc_Select)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_forwarding_forwarding_action_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_forwarding_forwarding_action_proto_goTypes,
		DependencyIndexes: file_proto_forwarding_forwarding_action_proto_depIdxs,
		EnumInfos:         file_proto_forwarding_forwarding_action_proto_enumTypes,
		MessageInfos:      file_proto_forwarding_forwarding_action_proto_msgTypes,
	}.Build()
	File_proto_forwarding_forwarding_action_proto = out.File
	file_proto_forwarding_forwarding_action_proto_rawDesc = nil
	file_proto_forwarding_forwarding_action_proto_goTypes = nil
	file_proto_forwarding_forwarding_action_proto_depIdxs = nil
}
