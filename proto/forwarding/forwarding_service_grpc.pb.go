// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/forwarding/forwarding_service.proto

package forwarding

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Forwarding_ContextCreate_FullMethodName     = "/forwarding.Forwarding/ContextCreate"
	Forwarding_ContextDelete_FullMethodName     = "/forwarding.Forwarding/ContextDelete"
	Forwarding_ContextList_FullMethodName       = "/forwarding.Forwarding/ContextList"
	Forwarding_SetCreate_FullMethodName         = "/forwarding.Forwarding/SetCreate"
	Forwarding_SetUpdate_FullMethodName         = "/forwarding.Forwarding/SetUpdate"
	Forwarding_AttributeList_FullMethodName     = "/forwarding.Forwarding/AttributeList"
	Forwarding_AttributeUpdate_FullMethodName   = "/forwarding.Forwarding/AttributeUpdate"
	Forwarding_AttributeQuery_FullMethodName    = "/forwarding.Forwarding/AttributeQuery"
	Forwarding_ObjectDelete_FullMethodName      = "/forwarding.Forwarding/ObjectDelete"
	Forwarding_ObjectList_FullMethodName        = "/forwarding.Forwarding/ObjectList"
	Forwarding_ObjectCounters_FullMethodName    = "/forwarding.Forwarding/ObjectCounters"
	Forwarding_TableCreate_FullMethodName       = "/forwarding.Forwarding/TableCreate"
	Forwarding_TableEntryAdd_FullMethodName     = "/forwarding.Forwarding/TableEntryAdd"
	Forwarding_TableEntryRemove_FullMethodName  = "/forwarding.Forwarding/TableEntryRemove"
	Forwarding_TableList_FullMethodName         = "/forwarding.Forwarding/TableList"
	Forwarding_PortCreate_FullMethodName        = "/forwarding.Forwarding/PortCreate"
	Forwarding_PortUpdate_FullMethodName        = "/forwarding.Forwarding/PortUpdate"
	Forwarding_PortState_FullMethodName         = "/forwarding.Forwarding/PortState"
	Forwarding_FlowCounterCreate_FullMethodName = "/forwarding.Forwarding/FlowCounterCreate"
	Forwarding_FlowCounterQuery_FullMethodName  = "/forwarding.Forwarding/FlowCounterQuery"
	Forwarding_Operation_FullMethodName         = "/forwarding.Forwarding/Operation"
	Forwarding_NotifySubscribe_FullMethodName   = "/forwarding.Forwarding/NotifySubscribe"
	Forwarding_PacketInject_FullMethodName      = "/forwarding.Forwarding/PacketInject"
	Forwarding_ObjectNID_FullMethodName         = "/forwarding.Forwarding/ObjectNID"
)

// ForwardingClient is the client API for Forwarding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForwardingClient interface {
	ContextCreate(ctx context.Context, in *ContextCreateRequest, opts ...grpc.CallOption) (*ContextCreateReply, error)
	ContextDelete(ctx context.Context, in *ContextDeleteRequest, opts ...grpc.CallOption) (*ContextDeleteReply, error)
	ContextList(ctx context.Context, in *ContextListRequest, opts ...grpc.CallOption) (*ContextListReply, error)
	SetCreate(ctx context.Context, in *SetCreateRequest, opts ...grpc.CallOption) (*SetCreateReply, error)
	SetUpdate(ctx context.Context, in *SetUpdateRequest, opts ...grpc.CallOption) (*SetUpdateReply, error)
	AttributeList(ctx context.Context, in *AttributeListRequest, opts ...grpc.CallOption) (*AttributeListReply, error)
	AttributeUpdate(ctx context.Context, in *AttributeUpdateRequest, opts ...grpc.CallOption) (*AttributeUpdateReply, error)
	AttributeQuery(ctx context.Context, in *AttributeQueryRequest, opts ...grpc.CallOption) (*AttributeQueryReply, error)
	ObjectDelete(ctx context.Context, in *ObjectDeleteRequest, opts ...grpc.CallOption) (*ObjectDeleteReply, error)
	ObjectList(ctx context.Context, in *ObjectListRequest, opts ...grpc.CallOption) (*ObjectListReply, error)
	ObjectCounters(ctx context.Context, in *ObjectCountersRequest, opts ...grpc.CallOption) (*ObjectCountersReply, error)
	TableCreate(ctx context.Context, in *TableCreateRequest, opts ...grpc.CallOption) (*TableCreateReply, error)
	TableEntryAdd(ctx context.Context, in *TableEntryAddRequest, opts ...grpc.CallOption) (*TableEntryAddReply, error)
	TableEntryRemove(ctx context.Context, in *TableEntryRemoveRequest, opts ...grpc.CallOption) (*TableEntryRemoveReply, error)
	TableList(ctx context.Context, in *TableListRequest, opts ...grpc.CallOption) (*TableListReply, error)
	PortCreate(ctx context.Context, in *PortCreateRequest, opts ...grpc.CallOption) (*PortCreateReply, error)
	PortUpdate(ctx context.Context, in *PortUpdateRequest, opts ...grpc.CallOption) (*PortUpdateReply, error)
	PortState(ctx context.Context, in *PortStateRequest, opts ...grpc.CallOption) (*PortStateReply, error)
	FlowCounterCreate(ctx context.Context, in *FlowCounterCreateRequest, opts ...grpc.CallOption) (*FlowCounterCreateReply, error)
	FlowCounterQuery(ctx context.Context, in *FlowCounterQueryRequest, opts ...grpc.CallOption) (*FlowCounterQueryReply, error)
	Operation(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OperationRequest, OperationReply], error)
	NotifySubscribe(ctx context.Context, in *NotifySubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventDesc], error)
	PacketInject(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PacketInjectRequest, PacketInjectResponse], error)
	ObjectNID(ctx context.Context, in *ObjectNIDRequest, opts ...grpc.CallOption) (*ObjectNIDReply, error)
}

type forwardingClient struct {
	cc grpc.ClientConnInterface
}

func NewForwardingClient(cc grpc.ClientConnInterface) ForwardingClient {
	return &forwardingClient{cc}
}

func (c *forwardingClient) ContextCreate(ctx context.Context, in *ContextCreateRequest, opts ...grpc.CallOption) (*ContextCreateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContextCreateReply)
	err := c.cc.Invoke(ctx, Forwarding_ContextCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) ContextDelete(ctx context.Context, in *ContextDeleteRequest, opts ...grpc.CallOption) (*ContextDeleteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContextDeleteReply)
	err := c.cc.Invoke(ctx, Forwarding_ContextDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) ContextList(ctx context.Context, in *ContextListRequest, opts ...grpc.CallOption) (*ContextListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ContextListReply)
	err := c.cc.Invoke(ctx, Forwarding_ContextList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) SetCreate(ctx context.Context, in *SetCreateRequest, opts ...grpc.CallOption) (*SetCreateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCreateReply)
	err := c.cc.Invoke(ctx, Forwarding_SetCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) SetUpdate(ctx context.Context, in *SetUpdateRequest, opts ...grpc.CallOption) (*SetUpdateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUpdateReply)
	err := c.cc.Invoke(ctx, Forwarding_SetUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) AttributeList(ctx context.Context, in *AttributeListRequest, opts ...grpc.CallOption) (*AttributeListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttributeListReply)
	err := c.cc.Invoke(ctx, Forwarding_AttributeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) AttributeUpdate(ctx context.Context, in *AttributeUpdateRequest, opts ...grpc.CallOption) (*AttributeUpdateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttributeUpdateReply)
	err := c.cc.Invoke(ctx, Forwarding_AttributeUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) AttributeQuery(ctx context.Context, in *AttributeQueryRequest, opts ...grpc.CallOption) (*AttributeQueryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttributeQueryReply)
	err := c.cc.Invoke(ctx, Forwarding_AttributeQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) ObjectDelete(ctx context.Context, in *ObjectDeleteRequest, opts ...grpc.CallOption) (*ObjectDeleteReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectDeleteReply)
	err := c.cc.Invoke(ctx, Forwarding_ObjectDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) ObjectList(ctx context.Context, in *ObjectListRequest, opts ...grpc.CallOption) (*ObjectListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectListReply)
	err := c.cc.Invoke(ctx, Forwarding_ObjectList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) ObjectCounters(ctx context.Context, in *ObjectCountersRequest, opts ...grpc.CallOption) (*ObjectCountersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectCountersReply)
	err := c.cc.Invoke(ctx, Forwarding_ObjectCounters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) TableCreate(ctx context.Context, in *TableCreateRequest, opts ...grpc.CallOption) (*TableCreateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TableCreateReply)
	err := c.cc.Invoke(ctx, Forwarding_TableCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) TableEntryAdd(ctx context.Context, in *TableEntryAddRequest, opts ...grpc.CallOption) (*TableEntryAddReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TableEntryAddReply)
	err := c.cc.Invoke(ctx, Forwarding_TableEntryAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) TableEntryRemove(ctx context.Context, in *TableEntryRemoveRequest, opts ...grpc.CallOption) (*TableEntryRemoveReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TableEntryRemoveReply)
	err := c.cc.Invoke(ctx, Forwarding_TableEntryRemove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) TableList(ctx context.Context, in *TableListRequest, opts ...grpc.CallOption) (*TableListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TableListReply)
	err := c.cc.Invoke(ctx, Forwarding_TableList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) PortCreate(ctx context.Context, in *PortCreateRequest, opts ...grpc.CallOption) (*PortCreateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortCreateReply)
	err := c.cc.Invoke(ctx, Forwarding_PortCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) PortUpdate(ctx context.Context, in *PortUpdateRequest, opts ...grpc.CallOption) (*PortUpdateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortUpdateReply)
	err := c.cc.Invoke(ctx, Forwarding_PortUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) PortState(ctx context.Context, in *PortStateRequest, opts ...grpc.CallOption) (*PortStateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortStateReply)
	err := c.cc.Invoke(ctx, Forwarding_PortState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) FlowCounterCreate(ctx context.Context, in *FlowCounterCreateRequest, opts ...grpc.CallOption) (*FlowCounterCreateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlowCounterCreateReply)
	err := c.cc.Invoke(ctx, Forwarding_FlowCounterCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) FlowCounterQuery(ctx context.Context, in *FlowCounterQueryRequest, opts ...grpc.CallOption) (*FlowCounterQueryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlowCounterQueryReply)
	err := c.cc.Invoke(ctx, Forwarding_FlowCounterQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwardingClient) Operation(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OperationRequest, OperationReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Forwarding_ServiceDesc.Streams[0], Forwarding_Operation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OperationRequest, OperationReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forwarding_OperationClient = grpc.BidiStreamingClient[OperationRequest, OperationReply]

func (c *forwardingClient) NotifySubscribe(ctx context.Context, in *NotifySubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventDesc], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Forwarding_ServiceDesc.Streams[1], Forwarding_NotifySubscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NotifySubscribeRequest, EventDesc]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forwarding_NotifySubscribeClient = grpc.ServerStreamingClient[EventDesc]

func (c *forwardingClient) PacketInject(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PacketInjectRequest, PacketInjectResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Forwarding_ServiceDesc.Streams[2], Forwarding_PacketInject_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PacketInjectRequest, PacketInjectResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forwarding_PacketInjectClient = grpc.ClientStreamingClient[PacketInjectRequest, PacketInjectResponse]

func (c *forwardingClient) ObjectNID(ctx context.Context, in *ObjectNIDRequest, opts ...grpc.CallOption) (*ObjectNIDReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectNIDReply)
	err := c.cc.Invoke(ctx, Forwarding_ObjectNID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForwardingServer is the server API for Forwarding service.
// All implementations should embed UnimplementedForwardingServer
// for forward compatibility.
type ForwardingServer interface {
	ContextCreate(context.Context, *ContextCreateRequest) (*ContextCreateReply, error)
	ContextDelete(context.Context, *ContextDeleteRequest) (*ContextDeleteReply, error)
	ContextList(context.Context, *ContextListRequest) (*ContextListReply, error)
	SetCreate(context.Context, *SetCreateRequest) (*SetCreateReply, error)
	SetUpdate(context.Context, *SetUpdateRequest) (*SetUpdateReply, error)
	AttributeList(context.Context, *AttributeListRequest) (*AttributeListReply, error)
	AttributeUpdate(context.Context, *AttributeUpdateRequest) (*AttributeUpdateReply, error)
	AttributeQuery(context.Context, *AttributeQueryRequest) (*AttributeQueryReply, error)
	ObjectDelete(context.Context, *ObjectDeleteRequest) (*ObjectDeleteReply, error)
	ObjectList(context.Context, *ObjectListRequest) (*ObjectListReply, error)
	ObjectCounters(context.Context, *ObjectCountersRequest) (*ObjectCountersReply, error)
	TableCreate(context.Context, *TableCreateRequest) (*TableCreateReply, error)
	TableEntryAdd(context.Context, *TableEntryAddRequest) (*TableEntryAddReply, error)
	TableEntryRemove(context.Context, *TableEntryRemoveRequest) (*TableEntryRemoveReply, error)
	TableList(context.Context, *TableListRequest) (*TableListReply, error)
	PortCreate(context.Context, *PortCreateRequest) (*PortCreateReply, error)
	PortUpdate(context.Context, *PortUpdateRequest) (*PortUpdateReply, error)
	PortState(context.Context, *PortStateRequest) (*PortStateReply, error)
	FlowCounterCreate(context.Context, *FlowCounterCreateRequest) (*FlowCounterCreateReply, error)
	FlowCounterQuery(context.Context, *FlowCounterQueryRequest) (*FlowCounterQueryReply, error)
	Operation(grpc.BidiStreamingServer[OperationRequest, OperationReply]) error
	NotifySubscribe(*NotifySubscribeRequest, grpc.ServerStreamingServer[EventDesc]) error
	PacketInject(grpc.ClientStreamingServer[PacketInjectRequest, PacketInjectResponse]) error
	ObjectNID(context.Context, *ObjectNIDRequest) (*ObjectNIDReply, error)
}

// UnimplementedForwardingServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedForwardingServer struct{}

func (UnimplementedForwardingServer) ContextCreate(context.Context, *ContextCreateRequest) (*ContextCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContextCreate not implemented")
}
func (UnimplementedForwardingServer) ContextDelete(context.Context, *ContextDeleteRequest) (*ContextDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContextDelete not implemented")
}
func (UnimplementedForwardingServer) ContextList(context.Context, *ContextListRequest) (*ContextListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContextList not implemented")
}
func (UnimplementedForwardingServer) SetCreate(context.Context, *SetCreateRequest) (*SetCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCreate not implemented")
}
func (UnimplementedForwardingServer) SetUpdate(context.Context, *SetUpdateRequest) (*SetUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpdate not implemented")
}
func (UnimplementedForwardingServer) AttributeList(context.Context, *AttributeListRequest) (*AttributeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeList not implemented")
}
func (UnimplementedForwardingServer) AttributeUpdate(context.Context, *AttributeUpdateRequest) (*AttributeUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeUpdate not implemented")
}
func (UnimplementedForwardingServer) AttributeQuery(context.Context, *AttributeQueryRequest) (*AttributeQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeQuery not implemented")
}
func (UnimplementedForwardingServer) ObjectDelete(context.Context, *ObjectDeleteRequest) (*ObjectDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectDelete not implemented")
}
func (UnimplementedForwardingServer) ObjectList(context.Context, *ObjectListRequest) (*ObjectListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectList not implemented")
}
func (UnimplementedForwardingServer) ObjectCounters(context.Context, *ObjectCountersRequest) (*ObjectCountersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectCounters not implemented")
}
func (UnimplementedForwardingServer) TableCreate(context.Context, *TableCreateRequest) (*TableCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableCreate not implemented")
}
func (UnimplementedForwardingServer) TableEntryAdd(context.Context, *TableEntryAddRequest) (*TableEntryAddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableEntryAdd not implemented")
}
func (UnimplementedForwardingServer) TableEntryRemove(context.Context, *TableEntryRemoveRequest) (*TableEntryRemoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableEntryRemove not implemented")
}
func (UnimplementedForwardingServer) TableList(context.Context, *TableListRequest) (*TableListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableList not implemented")
}
func (UnimplementedForwardingServer) PortCreate(context.Context, *PortCreateRequest) (*PortCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortCreate not implemented")
}
func (UnimplementedForwardingServer) PortUpdate(context.Context, *PortUpdateRequest) (*PortUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortUpdate not implemented")
}
func (UnimplementedForwardingServer) PortState(context.Context, *PortStateRequest) (*PortStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortState not implemented")
}
func (UnimplementedForwardingServer) FlowCounterCreate(context.Context, *FlowCounterCreateRequest) (*FlowCounterCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowCounterCreate not implemented")
}
func (UnimplementedForwardingServer) FlowCounterQuery(context.Context, *FlowCounterQueryRequest) (*FlowCounterQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowCounterQuery not implemented")
}
func (UnimplementedForwardingServer) Operation(grpc.BidiStreamingServer[OperationRequest, OperationReply]) error {
	return status.Errorf(codes.Unimplemented, "method Operation not implemented")
}
func (UnimplementedForwardingServer) NotifySubscribe(*NotifySubscribeRequest, grpc.ServerStreamingServer[EventDesc]) error {
	return status.Errorf(codes.Unimplemented, "method NotifySubscribe not implemented")
}
func (UnimplementedForwardingServer) PacketInject(grpc.ClientStreamingServer[PacketInjectRequest, PacketInjectResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PacketInject not implemented")
}
func (UnimplementedForwardingServer) ObjectNID(context.Context, *ObjectNIDRequest) (*ObjectNIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectNID not implemented")
}
func (UnimplementedForwardingServer) testEmbeddedByValue() {}

// UnsafeForwardingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForwardingServer will
// result in compilation errors.
type UnsafeForwardingServer interface {
	mustEmbedUnimplementedForwardingServer()
}

func RegisterForwardingServer(s grpc.ServiceRegistrar, srv ForwardingServer) {
	// If the following call pancis, it indicates UnimplementedForwardingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Forwarding_ServiceDesc, srv)
}

func _Forwarding_ContextCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ContextCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_ContextCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ContextCreate(ctx, req.(*ContextCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_ContextDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ContextDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_ContextDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ContextDelete(ctx, req.(*ContextDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_ContextList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ContextList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_ContextList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ContextList(ctx, req.(*ContextListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_SetCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).SetCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_SetCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).SetCreate(ctx, req.(*SetCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_SetUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).SetUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_SetUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).SetUpdate(ctx, req.(*SetUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_AttributeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).AttributeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_AttributeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).AttributeList(ctx, req.(*AttributeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_AttributeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).AttributeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_AttributeUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).AttributeUpdate(ctx, req.(*AttributeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_AttributeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).AttributeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_AttributeQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).AttributeQuery(ctx, req.(*AttributeQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_ObjectDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ObjectDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_ObjectDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ObjectDelete(ctx, req.(*ObjectDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_ObjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ObjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_ObjectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ObjectList(ctx, req.(*ObjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_ObjectCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ObjectCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_ObjectCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ObjectCounters(ctx, req.(*ObjectCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_TableCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).TableCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_TableCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).TableCreate(ctx, req.(*TableCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_TableEntryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableEntryAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).TableEntryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_TableEntryAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).TableEntryAdd(ctx, req.(*TableEntryAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_TableEntryRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableEntryRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).TableEntryRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_TableEntryRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).TableEntryRemove(ctx, req.(*TableEntryRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_TableList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).TableList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_TableList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).TableList(ctx, req.(*TableListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_PortCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).PortCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_PortCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).PortCreate(ctx, req.(*PortCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_PortUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).PortUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_PortUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).PortUpdate(ctx, req.(*PortUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_PortState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).PortState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_PortState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).PortState(ctx, req.(*PortStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_FlowCounterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowCounterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).FlowCounterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_FlowCounterCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).FlowCounterCreate(ctx, req.(*FlowCounterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_FlowCounterQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowCounterQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).FlowCounterQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_FlowCounterQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).FlowCounterQuery(ctx, req.(*FlowCounterQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forwarding_Operation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ForwardingServer).Operation(&grpc.GenericServerStream[OperationRequest, OperationReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forwarding_OperationServer = grpc.BidiStreamingServer[OperationRequest, OperationReply]

func _Forwarding_NotifySubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotifySubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForwardingServer).NotifySubscribe(m, &grpc.GenericServerStream[NotifySubscribeRequest, EventDesc]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forwarding_NotifySubscribeServer = grpc.ServerStreamingServer[EventDesc]

func _Forwarding_PacketInject_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ForwardingServer).PacketInject(&grpc.GenericServerStream[PacketInjectRequest, PacketInjectResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Forwarding_PacketInjectServer = grpc.ClientStreamingServer[PacketInjectRequest, PacketInjectResponse]

func _Forwarding_ObjectNID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectNIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForwardingServer).ObjectNID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forwarding_ObjectNID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForwardingServer).ObjectNID(ctx, req.(*ObjectNIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Forwarding_ServiceDesc is the grpc.ServiceDesc for Forwarding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forwarding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forwarding.Forwarding",
	HandlerType: (*ForwardingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContextCreate",
			Handler:    _Forwarding_ContextCreate_Handler,
		},
		{
			MethodName: "ContextDelete",
			Handler:    _Forwarding_ContextDelete_Handler,
		},
		{
			MethodName: "ContextList",
			Handler:    _Forwarding_ContextList_Handler,
		},
		{
			MethodName: "SetCreate",
			Handler:    _Forwarding_SetCreate_Handler,
		},
		{
			MethodName: "SetUpdate",
			Handler:    _Forwarding_SetUpdate_Handler,
		},
		{
			MethodName: "AttributeList",
			Handler:    _Forwarding_AttributeList_Handler,
		},
		{
			MethodName: "AttributeUpdate",
			Handler:    _Forwarding_AttributeUpdate_Handler,
		},
		{
			MethodName: "AttributeQuery",
			Handler:    _Forwarding_AttributeQuery_Handler,
		},
		{
			MethodName: "ObjectDelete",
			Handler:    _Forwarding_ObjectDelete_Handler,
		},
		{
			MethodName: "ObjectList",
			Handler:    _Forwarding_ObjectList_Handler,
		},
		{
			MethodName: "ObjectCounters",
			Handler:    _Forwarding_ObjectCounters_Handler,
		},
		{
			MethodName: "TableCreate",
			Handler:    _Forwarding_TableCreate_Handler,
		},
		{
			MethodName: "TableEntryAdd",
			Handler:    _Forwarding_TableEntryAdd_Handler,
		},
		{
			MethodName: "TableEntryRemove",
			Handler:    _Forwarding_TableEntryRemove_Handler,
		},
		{
			MethodName: "TableList",
			Handler:    _Forwarding_TableList_Handler,
		},
		{
			MethodName: "PortCreate",
			Handler:    _Forwarding_PortCreate_Handler,
		},
		{
			MethodName: "PortUpdate",
			Handler:    _Forwarding_PortUpdate_Handler,
		},
		{
			MethodName: "PortState",
			Handler:    _Forwarding_PortState_Handler,
		},
		{
			MethodName: "FlowCounterCreate",
			Handler:    _Forwarding_FlowCounterCreate_Handler,
		},
		{
			MethodName: "FlowCounterQuery",
			Handler:    _Forwarding_FlowCounterQuery_Handler,
		},
		{
			MethodName: "ObjectNID",
			Handler:    _Forwarding_ObjectNID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Operation",
			Handler:       _Forwarding_Operation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NotifySubscribe",
			Handler:       _Forwarding_NotifySubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PacketInject",
			Handler:       _Forwarding_PacketInject_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/forwarding/forwarding_service.proto",
}

const (
	Info_InfoList_FullMethodName    = "/forwarding.Info/InfoList"
	Info_InfoElement_FullMethodName = "/forwarding.Info/InfoElement"
)

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoClient interface {
	InfoList(ctx context.Context, in *InfoListRequest, opts ...grpc.CallOption) (*InfoListReply, error)
	InfoElement(ctx context.Context, in *InfoElementRequest, opts ...grpc.CallOption) (*InfoElementReply, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) InfoList(ctx context.Context, in *InfoListRequest, opts ...grpc.CallOption) (*InfoListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoListReply)
	err := c.cc.Invoke(ctx, Info_InfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) InfoElement(ctx context.Context, in *InfoElementRequest, opts ...grpc.CallOption) (*InfoElementReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoElementReply)
	err := c.cc.Invoke(ctx, Info_InfoElement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
// All implementations should embed UnimplementedInfoServer
// for forward compatibility.
type InfoServer interface {
	InfoList(context.Context, *InfoListRequest) (*InfoListReply, error)
	InfoElement(context.Context, *InfoElementRequest) (*InfoElementReply, error)
}

// UnimplementedInfoServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInfoServer struct{}

func (UnimplementedInfoServer) InfoList(context.Context, *InfoListRequest) (*InfoListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoList not implemented")
}
func (UnimplementedInfoServer) InfoElement(context.Context, *InfoElementRequest) (*InfoElementReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoElement not implemented")
}
func (UnimplementedInfoServer) testEmbeddedByValue() {}

// UnsafeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServer will
// result in compilation errors.
type UnsafeInfoServer interface {
	mustEmbedUnimplementedInfoServer()
}

func RegisterInfoServer(s grpc.ServiceRegistrar, srv InfoServer) {
	// If the following call pancis, it indicates UnimplementedInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Info_ServiceDesc, srv)
}

func _Info_InfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).InfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Info_InfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).InfoList(ctx, req.(*InfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_InfoElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).InfoElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Info_InfoElement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).InfoElement(ctx, req.(*InfoElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Info_ServiceDesc is the grpc.ServiceDesc for Info service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Info_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forwarding.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InfoList",
			Handler:    _Info_InfoList_Handler,
		},
		{
			MethodName: "InfoElement",
			Handler:    _Info_InfoElement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/forwarding/forwarding_service.proto",
}
