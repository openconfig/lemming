// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/forwarding/forwarding_service.proto

package forwarding

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// ContextCreate creates a forwarding context.
	ContextCreate(ctx context.Context, in *ContextCreateRequest, opts ...grpc.CallOption) (*ContextCreateReply, error)
	// ContextUpdate updates a forwarding context.
	ContextUpdate(ctx context.Context, in *ContextUpdateRequest, opts ...grpc.CallOption) (*ContextUpdateReply, error)
	// ContextDelete deletes a forwarding context.
	ContextDelete(ctx context.Context, in *ContextDeleteRequest, opts ...grpc.CallOption) (*ContextDeleteReply, error)
	// ContextList lists all the forwarding contexts.
	ContextList(ctx context.Context, in *ContextListRequest, opts ...grpc.CallOption) (*ContextListReply, error)
	// SetCreate creates a set.
	// SetCreate creates a set.
	SetCreate(ctx context.Context, in *SetCreateRequest, opts ...grpc.CallOption) (*SetCreateReply, error)
	// SetUpdate updates a set.
	SetUpdate(ctx context.Context, in *SetUpdateRequest, opts ...grpc.CallOption) (*SetUpdateReply, error)
	// AttributeList lists all supported attributes.
	AttributeList(ctx context.Context, in *AttributeListRequest, opts ...grpc.CallOption) (*AttributeListReply, error)
	// AttributeUpdate updates an attribute.
	AttributeUpdate(ctx context.Context, in *AttributeUpdateRequest, opts ...grpc.CallOption) (*AttributeUpdateReply, error)
	// Operations on objects.
	// ObjectDelete deletes an object.
	ObjectDelete(ctx context.Context, in *ObjectDeleteRequest, opts ...grpc.CallOption) (*ObjectDeleteReply, error)
	// ObjectList lists all the objects in the system.
	ObjectList(ctx context.Context, in *ObjectListRequest, opts ...grpc.CallOption) (*ObjectListReply, error)
	// ObjectCounters retrieves all the counters associated on the object.
	ObjectCounters(ctx context.Context, in *ObjectCountersRequest, opts ...grpc.CallOption) (*ObjectCountersReply, error)
	// TableCreate creates an empty table.
	TableCreate(ctx context.Context, in *TableCreateRequest, opts ...grpc.CallOption) (*TableCreateReply, error)
	// TableEntryAdd add an entry to a table.
	TableEntryAdd(ctx context.Context, in *TableEntryAddRequest, opts ...grpc.CallOption) (*TableEntryAddReply, error)
	// TableEntryRemove removes an entry from a table.
	TableEntryRemove(ctx context.Context, in *TableEntryRemoveRequest, opts ...grpc.CallOption) (*TableEntryRemoveReply, error)
	// TableList lists all entries of a table.
	TableList(ctx context.Context, in *TableListRequest, opts ...grpc.CallOption) (*TableListReply, error)
	// PortCreate creates a port.
	PortCreate(ctx context.Context, in *PortCreateRequest, opts ...grpc.CallOption) (*PortCreateReply, error)
	// PortUpdate updates a port.
	PortUpdate(ctx context.Context, in *PortUpdateRequest, opts ...grpc.CallOption) (*PortUpdateReply, error)
	// PortState queries the port state.
	PortState(ctx context.Context, in *PortStateRequest, opts ...grpc.CallOption) (*PortStateReply, error)
	// FlowCounterCreate creates a flow counter
	FlowCounterCreate(ctx context.Context, in *FlowCounterCreateRequest, opts ...grpc.CallOption) (*FlowCounterCreateReply, error)
	// FlowCounterQuery requests the values of a bunch of flow counters.
	FlowCounterQuery(ctx context.Context, in *FlowCounterQueryRequest, opts ...grpc.CallOption) (*FlowCounterQueryReply, error)
	// Operation performs a stream of operations.
	Operation(ctx context.Context, opts ...grpc.CallOption) (Service_OperationClient, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) ContextCreate(ctx context.Context, in *ContextCreateRequest, opts ...grpc.CallOption) (*ContextCreateReply, error) {
	out := new(ContextCreateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/ContextCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContextUpdate(ctx context.Context, in *ContextUpdateRequest, opts ...grpc.CallOption) (*ContextUpdateReply, error) {
	out := new(ContextUpdateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/ContextUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContextDelete(ctx context.Context, in *ContextDeleteRequest, opts ...grpc.CallOption) (*ContextDeleteReply, error) {
	out := new(ContextDeleteReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/ContextDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ContextList(ctx context.Context, in *ContextListRequest, opts ...grpc.CallOption) (*ContextListReply, error) {
	out := new(ContextListReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/ContextList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SetCreate(ctx context.Context, in *SetCreateRequest, opts ...grpc.CallOption) (*SetCreateReply, error) {
	out := new(SetCreateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/SetCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SetUpdate(ctx context.Context, in *SetUpdateRequest, opts ...grpc.CallOption) (*SetUpdateReply, error) {
	out := new(SetUpdateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/SetUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AttributeList(ctx context.Context, in *AttributeListRequest, opts ...grpc.CallOption) (*AttributeListReply, error) {
	out := new(AttributeListReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/AttributeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) AttributeUpdate(ctx context.Context, in *AttributeUpdateRequest, opts ...grpc.CallOption) (*AttributeUpdateReply, error) {
	out := new(AttributeUpdateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/AttributeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ObjectDelete(ctx context.Context, in *ObjectDeleteRequest, opts ...grpc.CallOption) (*ObjectDeleteReply, error) {
	out := new(ObjectDeleteReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/ObjectDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ObjectList(ctx context.Context, in *ObjectListRequest, opts ...grpc.CallOption) (*ObjectListReply, error) {
	out := new(ObjectListReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/ObjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ObjectCounters(ctx context.Context, in *ObjectCountersRequest, opts ...grpc.CallOption) (*ObjectCountersReply, error) {
	out := new(ObjectCountersReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/ObjectCounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TableCreate(ctx context.Context, in *TableCreateRequest, opts ...grpc.CallOption) (*TableCreateReply, error) {
	out := new(TableCreateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/TableCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TableEntryAdd(ctx context.Context, in *TableEntryAddRequest, opts ...grpc.CallOption) (*TableEntryAddReply, error) {
	out := new(TableEntryAddReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/TableEntryAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TableEntryRemove(ctx context.Context, in *TableEntryRemoveRequest, opts ...grpc.CallOption) (*TableEntryRemoveReply, error) {
	out := new(TableEntryRemoveReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/TableEntryRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) TableList(ctx context.Context, in *TableListRequest, opts ...grpc.CallOption) (*TableListReply, error) {
	out := new(TableListReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/TableList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PortCreate(ctx context.Context, in *PortCreateRequest, opts ...grpc.CallOption) (*PortCreateReply, error) {
	out := new(PortCreateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/PortCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PortUpdate(ctx context.Context, in *PortUpdateRequest, opts ...grpc.CallOption) (*PortUpdateReply, error) {
	out := new(PortUpdateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/PortUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) PortState(ctx context.Context, in *PortStateRequest, opts ...grpc.CallOption) (*PortStateReply, error) {
	out := new(PortStateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/PortState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) FlowCounterCreate(ctx context.Context, in *FlowCounterCreateRequest, opts ...grpc.CallOption) (*FlowCounterCreateReply, error) {
	out := new(FlowCounterCreateReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/FlowCounterCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) FlowCounterQuery(ctx context.Context, in *FlowCounterQueryRequest, opts ...grpc.CallOption) (*FlowCounterQueryReply, error) {
	out := new(FlowCounterQueryReply)
	err := c.cc.Invoke(ctx, "/forwarding.Service/FlowCounterQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Operation(ctx context.Context, opts ...grpc.CallOption) (Service_OperationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], "/forwarding.Service/Operation", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceOperationClient{stream}
	return x, nil
}

type Service_OperationClient interface {
	Send(*OperationRequest) error
	Recv() (*OperationReply, error)
	grpc.ClientStream
}

type serviceOperationClient struct {
	grpc.ClientStream
}

func (x *serviceOperationClient) Send(m *OperationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceOperationClient) Recv() (*OperationReply, error) {
	m := new(OperationReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	// ContextCreate creates a forwarding context.
	ContextCreate(context.Context, *ContextCreateRequest) (*ContextCreateReply, error)
	// ContextUpdate updates a forwarding context.
	ContextUpdate(context.Context, *ContextUpdateRequest) (*ContextUpdateReply, error)
	// ContextDelete deletes a forwarding context.
	ContextDelete(context.Context, *ContextDeleteRequest) (*ContextDeleteReply, error)
	// ContextList lists all the forwarding contexts.
	ContextList(context.Context, *ContextListRequest) (*ContextListReply, error)
	// SetCreate creates a set.
	// SetCreate creates a set.
	SetCreate(context.Context, *SetCreateRequest) (*SetCreateReply, error)
	// SetUpdate updates a set.
	SetUpdate(context.Context, *SetUpdateRequest) (*SetUpdateReply, error)
	// AttributeList lists all supported attributes.
	AttributeList(context.Context, *AttributeListRequest) (*AttributeListReply, error)
	// AttributeUpdate updates an attribute.
	AttributeUpdate(context.Context, *AttributeUpdateRequest) (*AttributeUpdateReply, error)
	// Operations on objects.
	// ObjectDelete deletes an object.
	ObjectDelete(context.Context, *ObjectDeleteRequest) (*ObjectDeleteReply, error)
	// ObjectList lists all the objects in the system.
	ObjectList(context.Context, *ObjectListRequest) (*ObjectListReply, error)
	// ObjectCounters retrieves all the counters associated on the object.
	ObjectCounters(context.Context, *ObjectCountersRequest) (*ObjectCountersReply, error)
	// TableCreate creates an empty table.
	TableCreate(context.Context, *TableCreateRequest) (*TableCreateReply, error)
	// TableEntryAdd add an entry to a table.
	TableEntryAdd(context.Context, *TableEntryAddRequest) (*TableEntryAddReply, error)
	// TableEntryRemove removes an entry from a table.
	TableEntryRemove(context.Context, *TableEntryRemoveRequest) (*TableEntryRemoveReply, error)
	// TableList lists all entries of a table.
	TableList(context.Context, *TableListRequest) (*TableListReply, error)
	// PortCreate creates a port.
	PortCreate(context.Context, *PortCreateRequest) (*PortCreateReply, error)
	// PortUpdate updates a port.
	PortUpdate(context.Context, *PortUpdateRequest) (*PortUpdateReply, error)
	// PortState queries the port state.
	PortState(context.Context, *PortStateRequest) (*PortStateReply, error)
	// FlowCounterCreate creates a flow counter
	FlowCounterCreate(context.Context, *FlowCounterCreateRequest) (*FlowCounterCreateReply, error)
	// FlowCounterQuery requests the values of a bunch of flow counters.
	FlowCounterQuery(context.Context, *FlowCounterQueryRequest) (*FlowCounterQueryReply, error)
	// Operation performs a stream of operations.
	Operation(Service_OperationServer) error
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) ContextCreate(context.Context, *ContextCreateRequest) (*ContextCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContextCreate not implemented")
}
func (UnimplementedServiceServer) ContextUpdate(context.Context, *ContextUpdateRequest) (*ContextUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContextUpdate not implemented")
}
func (UnimplementedServiceServer) ContextDelete(context.Context, *ContextDeleteRequest) (*ContextDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContextDelete not implemented")
}
func (UnimplementedServiceServer) ContextList(context.Context, *ContextListRequest) (*ContextListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContextList not implemented")
}
func (UnimplementedServiceServer) SetCreate(context.Context, *SetCreateRequest) (*SetCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCreate not implemented")
}
func (UnimplementedServiceServer) SetUpdate(context.Context, *SetUpdateRequest) (*SetUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUpdate not implemented")
}
func (UnimplementedServiceServer) AttributeList(context.Context, *AttributeListRequest) (*AttributeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeList not implemented")
}
func (UnimplementedServiceServer) AttributeUpdate(context.Context, *AttributeUpdateRequest) (*AttributeUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttributeUpdate not implemented")
}
func (UnimplementedServiceServer) ObjectDelete(context.Context, *ObjectDeleteRequest) (*ObjectDeleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectDelete not implemented")
}
func (UnimplementedServiceServer) ObjectList(context.Context, *ObjectListRequest) (*ObjectListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectList not implemented")
}
func (UnimplementedServiceServer) ObjectCounters(context.Context, *ObjectCountersRequest) (*ObjectCountersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectCounters not implemented")
}
func (UnimplementedServiceServer) TableCreate(context.Context, *TableCreateRequest) (*TableCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableCreate not implemented")
}
func (UnimplementedServiceServer) TableEntryAdd(context.Context, *TableEntryAddRequest) (*TableEntryAddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableEntryAdd not implemented")
}
func (UnimplementedServiceServer) TableEntryRemove(context.Context, *TableEntryRemoveRequest) (*TableEntryRemoveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableEntryRemove not implemented")
}
func (UnimplementedServiceServer) TableList(context.Context, *TableListRequest) (*TableListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableList not implemented")
}
func (UnimplementedServiceServer) PortCreate(context.Context, *PortCreateRequest) (*PortCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortCreate not implemented")
}
func (UnimplementedServiceServer) PortUpdate(context.Context, *PortUpdateRequest) (*PortUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortUpdate not implemented")
}
func (UnimplementedServiceServer) PortState(context.Context, *PortStateRequest) (*PortStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortState not implemented")
}
func (UnimplementedServiceServer) FlowCounterCreate(context.Context, *FlowCounterCreateRequest) (*FlowCounterCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowCounterCreate not implemented")
}
func (UnimplementedServiceServer) FlowCounterQuery(context.Context, *FlowCounterQueryRequest) (*FlowCounterQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlowCounterQuery not implemented")
}
func (UnimplementedServiceServer) Operation(Service_OperationServer) error {
	return status.Errorf(codes.Unimplemented, "method Operation not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_ContextCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContextCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/ContextCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContextCreate(ctx, req.(*ContextCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContextUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContextUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/ContextUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContextUpdate(ctx, req.(*ContextUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContextDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContextDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/ContextDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContextDelete(ctx, req.(*ContextDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ContextList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ContextList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/ContextList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ContextList(ctx, req.(*ContextListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SetCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SetCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/SetCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SetCreate(ctx, req.(*SetCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SetUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SetUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/SetUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SetUpdate(ctx, req.(*SetUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AttributeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AttributeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/AttributeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AttributeList(ctx, req.(*AttributeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_AttributeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttributeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).AttributeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/AttributeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).AttributeUpdate(ctx, req.(*AttributeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ObjectDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ObjectDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/ObjectDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ObjectDelete(ctx, req.(*ObjectDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ObjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ObjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/ObjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ObjectList(ctx, req.(*ObjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ObjectCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ObjectCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/ObjectCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ObjectCounters(ctx, req.(*ObjectCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TableCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TableCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/TableCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TableCreate(ctx, req.(*TableCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TableEntryAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableEntryAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TableEntryAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/TableEntryAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TableEntryAdd(ctx, req.(*TableEntryAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TableEntryRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableEntryRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TableEntryRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/TableEntryRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TableEntryRemove(ctx, req.(*TableEntryRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_TableList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).TableList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/TableList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).TableList(ctx, req.(*TableListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PortCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PortCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/PortCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PortCreate(ctx, req.(*PortCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PortUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PortUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/PortUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PortUpdate(ctx, req.(*PortUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_PortState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).PortState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/PortState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).PortState(ctx, req.(*PortStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_FlowCounterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowCounterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).FlowCounterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/FlowCounterCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).FlowCounterCreate(ctx, req.(*FlowCounterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_FlowCounterQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowCounterQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).FlowCounterQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Service/FlowCounterQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).FlowCounterQuery(ctx, req.(*FlowCounterQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Operation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServer).Operation(&serviceOperationServer{stream})
}

type Service_OperationServer interface {
	Send(*OperationReply) error
	Recv() (*OperationRequest, error)
	grpc.ServerStream
}

type serviceOperationServer struct {
	grpc.ServerStream
}

func (x *serviceOperationServer) Send(m *OperationReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceOperationServer) Recv() (*OperationRequest, error) {
	m := new(OperationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forwarding.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContextCreate",
			Handler:    _Service_ContextCreate_Handler,
		},
		{
			MethodName: "ContextUpdate",
			Handler:    _Service_ContextUpdate_Handler,
		},
		{
			MethodName: "ContextDelete",
			Handler:    _Service_ContextDelete_Handler,
		},
		{
			MethodName: "ContextList",
			Handler:    _Service_ContextList_Handler,
		},
		{
			MethodName: "SetCreate",
			Handler:    _Service_SetCreate_Handler,
		},
		{
			MethodName: "SetUpdate",
			Handler:    _Service_SetUpdate_Handler,
		},
		{
			MethodName: "AttributeList",
			Handler:    _Service_AttributeList_Handler,
		},
		{
			MethodName: "AttributeUpdate",
			Handler:    _Service_AttributeUpdate_Handler,
		},
		{
			MethodName: "ObjectDelete",
			Handler:    _Service_ObjectDelete_Handler,
		},
		{
			MethodName: "ObjectList",
			Handler:    _Service_ObjectList_Handler,
		},
		{
			MethodName: "ObjectCounters",
			Handler:    _Service_ObjectCounters_Handler,
		},
		{
			MethodName: "TableCreate",
			Handler:    _Service_TableCreate_Handler,
		},
		{
			MethodName: "TableEntryAdd",
			Handler:    _Service_TableEntryAdd_Handler,
		},
		{
			MethodName: "TableEntryRemove",
			Handler:    _Service_TableEntryRemove_Handler,
		},
		{
			MethodName: "TableList",
			Handler:    _Service_TableList_Handler,
		},
		{
			MethodName: "PortCreate",
			Handler:    _Service_PortCreate_Handler,
		},
		{
			MethodName: "PortUpdate",
			Handler:    _Service_PortUpdate_Handler,
		},
		{
			MethodName: "PortState",
			Handler:    _Service_PortState_Handler,
		},
		{
			MethodName: "FlowCounterCreate",
			Handler:    _Service_FlowCounterCreate_Handler,
		},
		{
			MethodName: "FlowCounterQuery",
			Handler:    _Service_FlowCounterQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Operation",
			Handler:       _Service_Operation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/forwarding/forwarding_service.proto",
}

// NotificationClient is the client API for Notification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationClient interface {
	// Notify notifies an event.
	Notify(ctx context.Context, in *EventDesc, opts ...grpc.CallOption) (*Empty, error)
}

type notificationClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationClient(cc grpc.ClientConnInterface) NotificationClient {
	return &notificationClient{cc}
}

func (c *notificationClient) Notify(ctx context.Context, in *EventDesc, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/forwarding.Notification/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServer is the server API for Notification service.
// All implementations must embed UnimplementedNotificationServer
// for forward compatibility
type NotificationServer interface {
	// Notify notifies an event.
	Notify(context.Context, *EventDesc) (*Empty, error)
	mustEmbedUnimplementedNotificationServer()
}

// UnimplementedNotificationServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServer struct {
}

func (UnimplementedNotificationServer) Notify(context.Context, *EventDesc) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedNotificationServer) mustEmbedUnimplementedNotificationServer() {}

// UnsafeNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServer will
// result in compilation errors.
type UnsafeNotificationServer interface {
	mustEmbedUnimplementedNotificationServer()
}

func RegisterNotificationServer(s grpc.ServiceRegistrar, srv NotificationServer) {
	s.RegisterService(&Notification_ServiceDesc, srv)
}

func _Notification_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventDesc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Notification/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServer).Notify(ctx, req.(*EventDesc))
	}
	return interceptor(ctx, in, info, handler)
}

// Notification_ServiceDesc is the grpc.ServiceDesc for Notification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forwarding.Notification",
	HandlerType: (*NotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _Notification_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/forwarding/forwarding_service.proto",
}

// PacketSinkClient is the client API for PacketSink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PacketSinkClient interface {
	// PacketInject injects a packet into the specified port.
	PacketInject(ctx context.Context, in *PacketInjectRequest, opts ...grpc.CallOption) (*PacketInjectReply, error)
}

type packetSinkClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketSinkClient(cc grpc.ClientConnInterface) PacketSinkClient {
	return &packetSinkClient{cc}
}

func (c *packetSinkClient) PacketInject(ctx context.Context, in *PacketInjectRequest, opts ...grpc.CallOption) (*PacketInjectReply, error) {
	out := new(PacketInjectReply)
	err := c.cc.Invoke(ctx, "/forwarding.PacketSink/PacketInject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PacketSinkServer is the server API for PacketSink service.
// All implementations must embed UnimplementedPacketSinkServer
// for forward compatibility
type PacketSinkServer interface {
	// PacketInject injects a packet into the specified port.
	PacketInject(context.Context, *PacketInjectRequest) (*PacketInjectReply, error)
	mustEmbedUnimplementedPacketSinkServer()
}

// UnimplementedPacketSinkServer must be embedded to have forward compatible implementations.
type UnimplementedPacketSinkServer struct {
}

func (UnimplementedPacketSinkServer) PacketInject(context.Context, *PacketInjectRequest) (*PacketInjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PacketInject not implemented")
}
func (UnimplementedPacketSinkServer) mustEmbedUnimplementedPacketSinkServer() {}

// UnsafePacketSinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PacketSinkServer will
// result in compilation errors.
type UnsafePacketSinkServer interface {
	mustEmbedUnimplementedPacketSinkServer()
}

func RegisterPacketSinkServer(s grpc.ServiceRegistrar, srv PacketSinkServer) {
	s.RegisterService(&PacketSink_ServiceDesc, srv)
}

func _PacketSink_PacketInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PacketInjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketSinkServer).PacketInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.PacketSink/PacketInject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketSinkServer).PacketInject(ctx, req.(*PacketInjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PacketSink_ServiceDesc is the grpc.ServiceDesc for PacketSink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PacketSink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forwarding.PacketSink",
	HandlerType: (*PacketSinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PacketInject",
			Handler:    _PacketSink_PacketInject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/forwarding/forwarding_service.proto",
}

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoClient interface {
	// InfoList retrieves a list of all information elements.
	InfoList(ctx context.Context, in *InfoListRequest, opts ...grpc.CallOption) (*InfoListReply, error)
	// InfoElement retrieves the contents of the specified information element.
	InfoElement(ctx context.Context, in *InfoElementRequest, opts ...grpc.CallOption) (*InfoElementReply, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) InfoList(ctx context.Context, in *InfoListRequest, opts ...grpc.CallOption) (*InfoListReply, error) {
	out := new(InfoListReply)
	err := c.cc.Invoke(ctx, "/forwarding.Info/InfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) InfoElement(ctx context.Context, in *InfoElementRequest, opts ...grpc.CallOption) (*InfoElementReply, error) {
	out := new(InfoElementReply)
	err := c.cc.Invoke(ctx, "/forwarding.Info/InfoElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
// All implementations must embed UnimplementedInfoServer
// for forward compatibility
type InfoServer interface {
	// InfoList retrieves a list of all information elements.
	InfoList(context.Context, *InfoListRequest) (*InfoListReply, error)
	// InfoElement retrieves the contents of the specified information element.
	InfoElement(context.Context, *InfoElementRequest) (*InfoElementReply, error)
	mustEmbedUnimplementedInfoServer()
}

// UnimplementedInfoServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (UnimplementedInfoServer) InfoList(context.Context, *InfoListRequest) (*InfoListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoList not implemented")
}
func (UnimplementedInfoServer) InfoElement(context.Context, *InfoElementRequest) (*InfoElementReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoElement not implemented")
}
func (UnimplementedInfoServer) mustEmbedUnimplementedInfoServer() {}

// UnsafeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServer will
// result in compilation errors.
type UnsafeInfoServer interface {
	mustEmbedUnimplementedInfoServer()
}

func RegisterInfoServer(s grpc.ServiceRegistrar, srv InfoServer) {
	s.RegisterService(&Info_ServiceDesc, srv)
}

func _Info_InfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).InfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Info/InfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).InfoList(ctx, req.(*InfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_InfoElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoElementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).InfoElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/forwarding.Info/InfoElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).InfoElement(ctx, req.(*InfoElementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Info_ServiceDesc is the grpc.ServiceDesc for Info service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Info_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forwarding.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InfoList",
			Handler:    _Info_InfoList_Handler,
		},
		{
			MethodName: "InfoElement",
			Handler:    _Info_InfoElement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/forwarding/forwarding_service.proto",
}
