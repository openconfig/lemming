// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: proto/dataplane/dataplane.proto

package dataplane

import (
	context "context"
	forwarding "github.com/openconfig/lemming/proto/forwarding"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PacketAction int32

const (
	PacketAction_PACKET_ACTION_UNSPECIFIED PacketAction = 0
	PacketAction_PACKET_ACTION_DROP        PacketAction = 1
	PacketAction_PACKET_ACTION_FORWARD     PacketAction = 2
)

// Enum value maps for PacketAction.
var (
	PacketAction_name = map[int32]string{
		0: "PACKET_ACTION_UNSPECIFIED",
		1: "PACKET_ACTION_DROP",
		2: "PACKET_ACTION_FORWARD",
	}
	PacketAction_value = map[string]int32{
		"PACKET_ACTION_UNSPECIFIED": 0,
		"PACKET_ACTION_DROP":        1,
		"PACKET_ACTION_FORWARD":     2,
	}
)

func (x PacketAction) Enum() *PacketAction {
	p := new(PacketAction)
	*p = x
	return p
}

func (x PacketAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketAction) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_dataplane_proto_enumTypes[0].Descriptor()
}

func (PacketAction) Type() protoreflect.EnumType {
	return &file_proto_dataplane_dataplane_proto_enumTypes[0]
}

func (x PacketAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketAction.Descriptor instead.
func (PacketAction) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{0}
}

type GroupUpdateMode int32

const (
	GroupUpdateMode_GROUP_UPDATE_MODE_UNSPECIFIED       GroupUpdateMode = 0
	GroupUpdateMode_GROUP_UPDATE_MODE_ERROR_ON_CONFLICT GroupUpdateMode = 1
	GroupUpdateMode_GROUP_UPDATE_MODE_APPEND            GroupUpdateMode = 2
	GroupUpdateMode_GROUP_UPDATE_MODE_REPLACE           GroupUpdateMode = 3
)

// Enum value maps for GroupUpdateMode.
var (
	GroupUpdateMode_name = map[int32]string{
		0: "GROUP_UPDATE_MODE_UNSPECIFIED",
		1: "GROUP_UPDATE_MODE_ERROR_ON_CONFLICT",
		2: "GROUP_UPDATE_MODE_APPEND",
		3: "GROUP_UPDATE_MODE_REPLACE",
	}
	GroupUpdateMode_value = map[string]int32{
		"GROUP_UPDATE_MODE_UNSPECIFIED":       0,
		"GROUP_UPDATE_MODE_ERROR_ON_CONFLICT": 1,
		"GROUP_UPDATE_MODE_APPEND":            2,
		"GROUP_UPDATE_MODE_REPLACE":           3,
	}
)

func (x GroupUpdateMode) Enum() *GroupUpdateMode {
	p := new(GroupUpdateMode)
	*p = x
	return p
}

func (x GroupUpdateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupUpdateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_dataplane_dataplane_proto_enumTypes[1].Descriptor()
}

func (GroupUpdateMode) Type() protoreflect.EnumType {
	return &file_proto_dataplane_dataplane_proto_enumTypes[1]
}

func (x GroupUpdateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupUpdateMode.Descriptor instead.
func (GroupUpdateMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{1}
}

type NextHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port string `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
	// Types that are assignable to Ip:
	//
	//	*NextHop_IpStr
	//	*NextHop_IpBytes
	Ip                 isNextHop_Ip             `protobuf_oneof:"ip"`
	Weight             uint64                   `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	PreTransmitActions []*forwarding.ActionDesc `protobuf:"bytes,5,rep,name=pre_transmit_actions,json=preTransmitActions,proto3" json:"pre_transmit_actions,omitempty"`
}

func (x *NextHop) Reset() {
	*x = NextHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHop) ProtoMessage() {}

func (x *NextHop) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHop.ProtoReflect.Descriptor instead.
func (*NextHop) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{0}
}

func (x *NextHop) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (m *NextHop) GetIp() isNextHop_Ip {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (x *NextHop) GetIpStr() string {
	if x, ok := x.GetIp().(*NextHop_IpStr); ok {
		return x.IpStr
	}
	return ""
}

func (x *NextHop) GetIpBytes() []byte {
	if x, ok := x.GetIp().(*NextHop_IpBytes); ok {
		return x.IpBytes
	}
	return nil
}

func (x *NextHop) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *NextHop) GetPreTransmitActions() []*forwarding.ActionDesc {
	if x != nil {
		return x.PreTransmitActions
	}
	return nil
}

type isNextHop_Ip interface {
	isNextHop_Ip()
}

type NextHop_IpStr struct {
	IpStr string `protobuf:"bytes,2,opt,name=ip_str,json=ipStr,proto3,oneof"`
}

type NextHop_IpBytes struct {
	IpBytes []byte `protobuf:"bytes,3,opt,name=ip_bytes,json=ipBytes,proto3,oneof"`
}

func (*NextHop_IpStr) isNextHop_Ip() {}

func (*NextHop_IpBytes) isNextHop_Ip() {}

type NextHopList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hops []*NextHop `protobuf:"bytes,1,rep,name=hops,proto3" json:"hops,omitempty"`
}

func (x *NextHopList) Reset() {
	*x = NextHopList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopList) ProtoMessage() {}

func (x *NextHopList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopList.ProtoReflect.Descriptor instead.
func (*NextHopList) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{1}
}

func (x *NextHopList) GetHops() []*NextHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

type NextHopIDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hops    []uint64 `protobuf:"varint,1,rep,packed,name=hops,proto3" json:"hops,omitempty"`
	Weights []uint64 `protobuf:"varint,2,rep,packed,name=weights,proto3" json:"weights,omitempty"`
}

func (x *NextHopIDList) Reset() {
	*x = NextHopIDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopIDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopIDList) ProtoMessage() {}

func (x *NextHopIDList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopIDList.ProtoReflect.Descriptor instead.
func (*NextHopIDList) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{2}
}

func (x *NextHopIDList) GetHops() []uint64 {
	if x != nil {
		return x.Hops
	}
	return nil
}

func (x *NextHopIDList) GetWeights() []uint64 {
	if x != nil {
		return x.Weights
	}
	return nil
}

type RoutePrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Prefix:
	//
	//	*RoutePrefix_Cidr
	//	*RoutePrefix_Mask
	Prefix isRoutePrefix_Prefix `protobuf_oneof:"prefix"`
	VrfId  uint64               `protobuf:"varint,3,opt,name=vrf_id,json=vrfId,proto3" json:"vrf_id,omitempty"`
}

func (x *RoutePrefix) Reset() {
	*x = RoutePrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutePrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutePrefix) ProtoMessage() {}

func (x *RoutePrefix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutePrefix.ProtoReflect.Descriptor instead.
func (*RoutePrefix) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{3}
}

func (m *RoutePrefix) GetPrefix() isRoutePrefix_Prefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (x *RoutePrefix) GetCidr() string {
	if x, ok := x.GetPrefix().(*RoutePrefix_Cidr); ok {
		return x.Cidr
	}
	return ""
}

func (x *RoutePrefix) GetMask() *IpMask {
	if x, ok := x.GetPrefix().(*RoutePrefix_Mask); ok {
		return x.Mask
	}
	return nil
}

func (x *RoutePrefix) GetVrfId() uint64 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

type isRoutePrefix_Prefix interface {
	isRoutePrefix_Prefix()
}

type RoutePrefix_Cidr struct {
	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3,oneof"`
}

type RoutePrefix_Mask struct {
	Mask *IpMask `protobuf:"bytes,2,opt,name=mask,proto3,oneof"`
}

func (*RoutePrefix_Cidr) isRoutePrefix_Prefix() {}

func (*RoutePrefix_Mask) isRoutePrefix_Prefix() {}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix *RoutePrefix `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Action PacketAction `protobuf:"varint,2,opt,name=action,proto3,enum=lemming.dataplane.PacketAction" json:"action,omitempty"`
	// Types that are assignable to Hop:
	//
	//	*Route_PortId
	//	*Route_NextHopId
	//	*Route_NextHopGroupId
	//	*Route_NextHops
	Hop isRoute_Hop `protobuf_oneof:"hop"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{4}
}

func (x *Route) GetPrefix() *RoutePrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Route) GetAction() PacketAction {
	if x != nil {
		return x.Action
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (m *Route) GetHop() isRoute_Hop {
	if m != nil {
		return m.Hop
	}
	return nil
}

func (x *Route) GetPortId() string {
	if x, ok := x.GetHop().(*Route_PortId); ok {
		return x.PortId
	}
	return ""
}

func (x *Route) GetNextHopId() uint64 {
	if x, ok := x.GetHop().(*Route_NextHopId); ok {
		return x.NextHopId
	}
	return 0
}

func (x *Route) GetNextHopGroupId() uint64 {
	if x, ok := x.GetHop().(*Route_NextHopGroupId); ok {
		return x.NextHopGroupId
	}
	return 0
}

func (x *Route) GetNextHops() *NextHopList {
	if x, ok := x.GetHop().(*Route_NextHops); ok {
		return x.NextHops
	}
	return nil
}

type isRoute_Hop interface {
	isRoute_Hop()
}

type Route_PortId struct {
	PortId string `protobuf:"bytes,3,opt,name=port_id,json=portId,proto3,oneof"`
}

type Route_NextHopId struct {
	NextHopId uint64 `protobuf:"varint,4,opt,name=next_hop_id,json=nextHopId,proto3,oneof"`
}

type Route_NextHopGroupId struct {
	NextHopGroupId uint64 `protobuf:"varint,5,opt,name=next_hop_group_id,json=nextHopGroupId,proto3,oneof"`
}

type Route_NextHops struct {
	NextHops *NextHopList `protobuf:"bytes,6,opt,name=next_hops,json=nextHops,proto3,oneof"`
}

func (*Route_PortId) isRoute_Hop() {}

func (*Route_NextHopId) isRoute_Hop() {}

func (*Route_NextHopGroupId) isRoute_Hop() {}

func (*Route_NextHops) isRoute_Hop() {}

type CreatePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type forwarding.PortType `protobuf:"varint,1,opt,name=type,proto3,enum=forwarding.PortType" json:"type,omitempty"`
	Id   string              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Src:
	//
	//	*CreatePortRequest_KernelDev
	Src          isCreatePortRequest_Src `protobuf_oneof:"src"`
	ExternalPort string                  `protobuf:"bytes,4,opt,name=external_port,json=externalPort,proto3" json:"external_port,omitempty"`
}

func (x *CreatePortRequest) Reset() {
	*x = CreatePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortRequest) ProtoMessage() {}

func (x *CreatePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortRequest.ProtoReflect.Descriptor instead.
func (*CreatePortRequest) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePortRequest) GetType() forwarding.PortType {
	if x != nil {
		return x.Type
	}
	return forwarding.PortType(0)
}

func (x *CreatePortRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *CreatePortRequest) GetSrc() isCreatePortRequest_Src {
	if m != nil {
		return m.Src
	}
	return nil
}

func (x *CreatePortRequest) GetKernelDev() string {
	if x, ok := x.GetSrc().(*CreatePortRequest_KernelDev); ok {
		return x.KernelDev
	}
	return ""
}

func (x *CreatePortRequest) GetExternalPort() string {
	if x != nil {
		return x.ExternalPort
	}
	return ""
}

type isCreatePortRequest_Src interface {
	isCreatePortRequest_Src()
}

type CreatePortRequest_KernelDev struct {
	KernelDev string `protobuf:"bytes,3,opt,name=kernel_dev,json=kernelDev,proto3,oneof"`
}

func (*CreatePortRequest_KernelDev) isCreatePortRequest_Src() {}

type CreatePortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePortResponse) Reset() {
	*x = CreatePortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortResponse) ProtoMessage() {}

func (x *CreatePortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortResponse.ProtoReflect.Descriptor instead.
func (*CreatePortResponse) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{6}
}

type IpMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Mask []byte `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *IpMask) Reset() {
	*x = IpMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpMask) ProtoMessage() {}

func (x *IpMask) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpMask.ProtoReflect.Descriptor instead.
func (*IpMask) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{7}
}

func (x *IpMask) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *IpMask) GetMask() []byte {
	if x != nil {
		return x.Mask
	}
	return nil
}

type AddIPRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route *Route `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
}

func (x *AddIPRouteRequest) Reset() {
	*x = AddIPRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIPRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIPRouteRequest) ProtoMessage() {}

func (x *AddIPRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIPRouteRequest.ProtoReflect.Descriptor instead.
func (*AddIPRouteRequest) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{8}
}

func (x *AddIPRouteRequest) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

type AddIPRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddIPRouteResponse) Reset() {
	*x = AddIPRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddIPRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIPRouteResponse) ProtoMessage() {}

func (x *AddIPRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIPRouteResponse.ProtoReflect.Descriptor instead.
func (*AddIPRouteResponse) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{9}
}

type RemoveIPRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix *RoutePrefix `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *RemoveIPRouteRequest) Reset() {
	*x = RemoveIPRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIPRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIPRouteRequest) ProtoMessage() {}

func (x *RemoveIPRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIPRouteRequest.ProtoReflect.Descriptor instead.
func (*RemoveIPRouteRequest) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveIPRouteRequest) GetPrefix() *RoutePrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type RemoveIPRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveIPRouteResponse) Reset() {
	*x = RemoveIPRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIPRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIPRouteResponse) ProtoMessage() {}

func (x *RemoveIPRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIPRouteResponse.ProtoReflect.Descriptor instead.
func (*RemoveIPRouteResponse) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{11}
}

type AddNextHopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NextHop *NextHop `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
}

func (x *AddNextHopRequest) Reset() {
	*x = AddNextHopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNextHopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNextHopRequest) ProtoMessage() {}

func (x *AddNextHopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNextHopRequest.ProtoReflect.Descriptor instead.
func (*AddNextHopRequest) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{12}
}

func (x *AddNextHopRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddNextHopRequest) GetNextHop() *NextHop {
	if x != nil {
		return x.NextHop
	}
	return nil
}

type AddNextHopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddNextHopResponse) Reset() {
	*x = AddNextHopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNextHopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNextHopResponse) ProtoMessage() {}

func (x *AddNextHopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNextHopResponse.ProtoReflect.Descriptor instead.
func (*AddNextHopResponse) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{13}
}

type AddNextHopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	List *NextHopIDList  `protobuf:"bytes,2,opt,name=list,proto3" json:"list,omitempty"`
	Mode GroupUpdateMode `protobuf:"varint,3,opt,name=mode,proto3,enum=lemming.dataplane.GroupUpdateMode" json:"mode,omitempty"`
}

func (x *AddNextHopGroupRequest) Reset() {
	*x = AddNextHopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNextHopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNextHopGroupRequest) ProtoMessage() {}

func (x *AddNextHopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNextHopGroupRequest.ProtoReflect.Descriptor instead.
func (*AddNextHopGroupRequest) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{14}
}

func (x *AddNextHopGroupRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddNextHopGroupRequest) GetList() *NextHopIDList {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *AddNextHopGroupRequest) GetMode() GroupUpdateMode {
	if x != nil {
		return x.Mode
	}
	return GroupUpdateMode_GROUP_UPDATE_MODE_UNSPECIFIED
}

type AddNextHopGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddNextHopGroupResponse) Reset() {
	*x = AddNextHopGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dataplane_dataplane_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNextHopGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNextHopGroupResponse) ProtoMessage() {}

func (x *AddNextHopGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dataplane_dataplane_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNextHopGroupResponse.ProtoReflect.Descriptor instead.
func (*AddNextHopGroupResponse) Descriptor() ([]byte, []int) {
	return file_proto_dataplane_dataplane_proto_rawDescGZIP(), []int{15}
}

var File_proto_dataplane_dataplane_proto protoreflect.FileDescriptor

var file_proto_dataplane_dataplane_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x1a, 0x28, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x69, 0x70, 0x53, 0x74, 0x72, 0x12,
	0x1b, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x07, 0x69, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x48, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x52, 0x12, 0x70, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x04,
	0x0a, 0x02, 0x69, 0x70, 0x22, 0x3d, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x04, 0x68,
	0x6f, 0x70, 0x73, 0x22, 0x3d, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x44,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x22, 0x75, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x49, 0x70, 0x4d, 0x61, 0x73, 0x6b,
	0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x72, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x72, 0x66, 0x49, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xa8, 0x02, 0x0a, 0x05, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x37, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x42, 0x05, 0x0a,
	0x03, 0x68, 0x6f, 0x70, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x64,
	0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x76, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x73, 0x72,
	0x63, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x49, 0x70, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x43, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x49, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x22, 0x14,
	0x0a, 0x12, 0x41, 0x64, 0x64, 0x49, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x50,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x50,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x0a,
	0x11, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x96, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x49, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2a, 0x60, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x10, 0x02, 0x2a, 0x9a, 0x01, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c,
	0x49, 0x43, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e,
	0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x10, 0x03, 0x32, 0xf4, 0x03, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x12, 0x5b, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a,
	0x0a, 0x41, 0x64, 0x64, 0x49, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x49, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0d, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x49, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x24,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_dataplane_dataplane_proto_rawDescOnce sync.Once
	file_proto_dataplane_dataplane_proto_rawDescData = file_proto_dataplane_dataplane_proto_rawDesc
)

func file_proto_dataplane_dataplane_proto_rawDescGZIP() []byte {
	file_proto_dataplane_dataplane_proto_rawDescOnce.Do(func() {
		file_proto_dataplane_dataplane_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_dataplane_dataplane_proto_rawDescData)
	})
	return file_proto_dataplane_dataplane_proto_rawDescData
}

var file_proto_dataplane_dataplane_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_dataplane_dataplane_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_proto_dataplane_dataplane_proto_goTypes = []interface{}{
	(PacketAction)(0),               // 0: lemming.dataplane.PacketAction
	(GroupUpdateMode)(0),            // 1: lemming.dataplane.GroupUpdateMode
	(*NextHop)(nil),                 // 2: lemming.dataplane.NextHop
	(*NextHopList)(nil),             // 3: lemming.dataplane.NextHopList
	(*NextHopIDList)(nil),           // 4: lemming.dataplane.NextHopIDList
	(*RoutePrefix)(nil),             // 5: lemming.dataplane.RoutePrefix
	(*Route)(nil),                   // 6: lemming.dataplane.Route
	(*CreatePortRequest)(nil),       // 7: lemming.dataplane.CreatePortRequest
	(*CreatePortResponse)(nil),      // 8: lemming.dataplane.CreatePortResponse
	(*IpMask)(nil),                  // 9: lemming.dataplane.IpMask
	(*AddIPRouteRequest)(nil),       // 10: lemming.dataplane.AddIPRouteRequest
	(*AddIPRouteResponse)(nil),      // 11: lemming.dataplane.AddIPRouteResponse
	(*RemoveIPRouteRequest)(nil),    // 12: lemming.dataplane.RemoveIPRouteRequest
	(*RemoveIPRouteResponse)(nil),   // 13: lemming.dataplane.RemoveIPRouteResponse
	(*AddNextHopRequest)(nil),       // 14: lemming.dataplane.AddNextHopRequest
	(*AddNextHopResponse)(nil),      // 15: lemming.dataplane.AddNextHopResponse
	(*AddNextHopGroupRequest)(nil),  // 16: lemming.dataplane.AddNextHopGroupRequest
	(*AddNextHopGroupResponse)(nil), // 17: lemming.dataplane.AddNextHopGroupResponse
	(*forwarding.ActionDesc)(nil),   // 18: forwarding.ActionDesc
	(forwarding.PortType)(0),        // 19: forwarding.PortType
}
var file_proto_dataplane_dataplane_proto_depIdxs = []int32{
	18, // 0: lemming.dataplane.NextHop.pre_transmit_actions:type_name -> forwarding.ActionDesc
	2,  // 1: lemming.dataplane.NextHopList.hops:type_name -> lemming.dataplane.NextHop
	9,  // 2: lemming.dataplane.RoutePrefix.mask:type_name -> lemming.dataplane.IpMask
	5,  // 3: lemming.dataplane.Route.prefix:type_name -> lemming.dataplane.RoutePrefix
	0,  // 4: lemming.dataplane.Route.action:type_name -> lemming.dataplane.PacketAction
	3,  // 5: lemming.dataplane.Route.next_hops:type_name -> lemming.dataplane.NextHopList
	19, // 6: lemming.dataplane.CreatePortRequest.type:type_name -> forwarding.PortType
	6,  // 7: lemming.dataplane.AddIPRouteRequest.route:type_name -> lemming.dataplane.Route
	5,  // 8: lemming.dataplane.RemoveIPRouteRequest.prefix:type_name -> lemming.dataplane.RoutePrefix
	2,  // 9: lemming.dataplane.AddNextHopRequest.next_hop:type_name -> lemming.dataplane.NextHop
	4,  // 10: lemming.dataplane.AddNextHopGroupRequest.list:type_name -> lemming.dataplane.NextHopIDList
	1,  // 11: lemming.dataplane.AddNextHopGroupRequest.mode:type_name -> lemming.dataplane.GroupUpdateMode
	7,  // 12: lemming.dataplane.Dataplane.CreatePort:input_type -> lemming.dataplane.CreatePortRequest
	10, // 13: lemming.dataplane.Dataplane.AddIPRoute:input_type -> lemming.dataplane.AddIPRouteRequest
	12, // 14: lemming.dataplane.Dataplane.RemoveIPRoute:input_type -> lemming.dataplane.RemoveIPRouteRequest
	14, // 15: lemming.dataplane.Dataplane.AddNextHop:input_type -> lemming.dataplane.AddNextHopRequest
	16, // 16: lemming.dataplane.Dataplane.AddNextHopGroup:input_type -> lemming.dataplane.AddNextHopGroupRequest
	8,  // 17: lemming.dataplane.Dataplane.CreatePort:output_type -> lemming.dataplane.CreatePortResponse
	11, // 18: lemming.dataplane.Dataplane.AddIPRoute:output_type -> lemming.dataplane.AddIPRouteResponse
	13, // 19: lemming.dataplane.Dataplane.RemoveIPRoute:output_type -> lemming.dataplane.RemoveIPRouteResponse
	15, // 20: lemming.dataplane.Dataplane.AddNextHop:output_type -> lemming.dataplane.AddNextHopResponse
	17, // 21: lemming.dataplane.Dataplane.AddNextHopGroup:output_type -> lemming.dataplane.AddNextHopGroupResponse
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_proto_dataplane_dataplane_proto_init() }
func file_proto_dataplane_dataplane_proto_init() {
	if File_proto_dataplane_dataplane_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_dataplane_dataplane_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopIDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutePrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIPRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddIPRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIPRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIPRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNextHopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNextHopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNextHopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dataplane_dataplane_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNextHopGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_dataplane_dataplane_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*NextHop_IpStr)(nil),
		(*NextHop_IpBytes)(nil),
	}
	file_proto_dataplane_dataplane_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*RoutePrefix_Cidr)(nil),
		(*RoutePrefix_Mask)(nil),
	}
	file_proto_dataplane_dataplane_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Route_PortId)(nil),
		(*Route_NextHopId)(nil),
		(*Route_NextHopGroupId)(nil),
		(*Route_NextHops)(nil),
	}
	file_proto_dataplane_dataplane_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*CreatePortRequest_KernelDev)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_dataplane_dataplane_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_dataplane_dataplane_proto_goTypes,
		DependencyIndexes: file_proto_dataplane_dataplane_proto_depIdxs,
		EnumInfos:         file_proto_dataplane_dataplane_proto_enumTypes,
		MessageInfos:      file_proto_dataplane_dataplane_proto_msgTypes,
	}.Build()
	File_proto_dataplane_dataplane_proto = out.File
	file_proto_dataplane_dataplane_proto_rawDesc = nil
	file_proto_dataplane_dataplane_proto_goTypes = nil
	file_proto_dataplane_dataplane_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataplaneClient is the client API for Dataplane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataplaneClient interface {
	CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*CreatePortResponse, error)
	AddIPRoute(ctx context.Context, in *AddIPRouteRequest, opts ...grpc.CallOption) (*AddIPRouteResponse, error)
	RemoveIPRoute(ctx context.Context, in *RemoveIPRouteRequest, opts ...grpc.CallOption) (*RemoveIPRouteResponse, error)
	AddNextHop(ctx context.Context, in *AddNextHopRequest, opts ...grpc.CallOption) (*AddNextHopResponse, error)
	AddNextHopGroup(ctx context.Context, in *AddNextHopGroupRequest, opts ...grpc.CallOption) (*AddNextHopGroupResponse, error)
}

type dataplaneClient struct {
	cc grpc.ClientConnInterface
}

func NewDataplaneClient(cc grpc.ClientConnInterface) DataplaneClient {
	return &dataplaneClient{cc}
}

func (c *dataplaneClient) CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*CreatePortResponse, error) {
	out := new(CreatePortResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.Dataplane/CreatePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataplaneClient) AddIPRoute(ctx context.Context, in *AddIPRouteRequest, opts ...grpc.CallOption) (*AddIPRouteResponse, error) {
	out := new(AddIPRouteResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.Dataplane/AddIPRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataplaneClient) RemoveIPRoute(ctx context.Context, in *RemoveIPRouteRequest, opts ...grpc.CallOption) (*RemoveIPRouteResponse, error) {
	out := new(RemoveIPRouteResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.Dataplane/RemoveIPRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataplaneClient) AddNextHop(ctx context.Context, in *AddNextHopRequest, opts ...grpc.CallOption) (*AddNextHopResponse, error) {
	out := new(AddNextHopResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.Dataplane/AddNextHop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataplaneClient) AddNextHopGroup(ctx context.Context, in *AddNextHopGroupRequest, opts ...grpc.CallOption) (*AddNextHopGroupResponse, error) {
	out := new(AddNextHopGroupResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.Dataplane/AddNextHopGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataplaneServer is the server API for Dataplane service.
type DataplaneServer interface {
	CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error)
	AddIPRoute(context.Context, *AddIPRouteRequest) (*AddIPRouteResponse, error)
	RemoveIPRoute(context.Context, *RemoveIPRouteRequest) (*RemoveIPRouteResponse, error)
	AddNextHop(context.Context, *AddNextHopRequest) (*AddNextHopResponse, error)
	AddNextHopGroup(context.Context, *AddNextHopGroupRequest) (*AddNextHopGroupResponse, error)
}

// UnimplementedDataplaneServer can be embedded to have forward compatible implementations.
type UnimplementedDataplaneServer struct {
}

func (*UnimplementedDataplaneServer) CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePort not implemented")
}
func (*UnimplementedDataplaneServer) AddIPRoute(context.Context, *AddIPRouteRequest) (*AddIPRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIPRoute not implemented")
}
func (*UnimplementedDataplaneServer) RemoveIPRoute(context.Context, *RemoveIPRouteRequest) (*RemoveIPRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIPRoute not implemented")
}
func (*UnimplementedDataplaneServer) AddNextHop(context.Context, *AddNextHopRequest) (*AddNextHopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNextHop not implemented")
}
func (*UnimplementedDataplaneServer) AddNextHopGroup(context.Context, *AddNextHopGroupRequest) (*AddNextHopGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNextHopGroup not implemented")
}

func RegisterDataplaneServer(s *grpc.Server, srv DataplaneServer) {
	s.RegisterService(&_Dataplane_serviceDesc, srv)
}

func _Dataplane_CreatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataplaneServer).CreatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.Dataplane/CreatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataplaneServer).CreatePort(ctx, req.(*CreatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataplane_AddIPRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIPRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataplaneServer).AddIPRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.Dataplane/AddIPRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataplaneServer).AddIPRoute(ctx, req.(*AddIPRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataplane_RemoveIPRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIPRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataplaneServer).RemoveIPRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.Dataplane/RemoveIPRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataplaneServer).RemoveIPRoute(ctx, req.(*RemoveIPRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataplane_AddNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataplaneServer).AddNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.Dataplane/AddNextHop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataplaneServer).AddNextHop(ctx, req.(*AddNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dataplane_AddNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataplaneServer).AddNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.Dataplane/AddNextHopGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataplaneServer).AddNextHopGroup(ctx, req.(*AddNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dataplane_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.Dataplane",
	HandlerType: (*DataplaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePort",
			Handler:    _Dataplane_CreatePort_Handler,
		},
		{
			MethodName: "AddIPRoute",
			Handler:    _Dataplane_AddIPRoute_Handler,
		},
		{
			MethodName: "RemoveIPRoute",
			Handler:    _Dataplane_RemoveIPRoute_Handler,
		},
		{
			MethodName: "AddNextHop",
			Handler:    _Dataplane_AddNextHop_Handler,
		},
		{
			MethodName: "AddNextHopGroup",
			Handler:    _Dataplane_AddNextHopGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dataplane/dataplane.proto",
}
