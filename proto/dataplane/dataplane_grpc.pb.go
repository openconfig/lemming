// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: dataplane.proto

package dataplane

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HALClient is the client API for HAL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HALClient interface {
	// UpdatePort updates port information.
	UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*UpdatePortResponse, error)
	// SetPortState sets the port state.
	SetPortState(ctx context.Context, in *SetPortStateRequest, opts ...grpc.CallOption) (*SetPortStateResponse, error)
	// SubsribePortState starts a stream of port status responses.
	// sending the initial then any changes.
	SubscribePortState(ctx context.Context, in *SubscribePortStateRequest, opts ...grpc.CallOption) (HAL_SubscribePortStateClient, error)
	// InsertRoute inserts an entry into the FIB. An inserted route
	// overrides an existing route with the vrf and prefix.
	InsertRoute(ctx context.Context, in *InsertRouteRequest, opts ...grpc.CallOption) (*InsertRouteResponse, error)
	// DeleteRoute removes an entry from the FIB.
	DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error)
	// AddNeighbor inserts a neighbor in the neighbor table.
	AddNeighbor(ctx context.Context, in *AddNeighborRequest, opts ...grpc.CallOption) (*AddNeighborResponse, error)
	// DeleteNeighbor deletes a neighbor from the neighbor table.
	DeleteNeighbor(ctx context.Context, in *DeleteNeighborRequest, opts ...grpc.CallOption) (*DeleteNeighborResponse, error)
	// AddPuntRule adds a punt rule to a port.
	AddPuntRule(ctx context.Context, in *AddPuntRuleRequest, opts ...grpc.CallOption) (*AddPuntRuleResponse, error)
	// DeletePuntRule adds a punt rule to a port.
	DeletePuntRule(ctx context.Context, in *DeletePuntRuleRequest, opts ...grpc.CallOption) (*DeletePuntRuleRequest, error)
}

type hALClient struct {
	cc grpc.ClientConnInterface
}

func NewHALClient(cc grpc.ClientConnInterface) HALClient {
	return &hALClient{cc}
}

func (c *hALClient) UpdatePort(ctx context.Context, in *UpdatePortRequest, opts ...grpc.CallOption) (*UpdatePortResponse, error) {
	out := new(UpdatePortResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.HAL/UpdatePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hALClient) SetPortState(ctx context.Context, in *SetPortStateRequest, opts ...grpc.CallOption) (*SetPortStateResponse, error) {
	out := new(SetPortStateResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.HAL/SetPortState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hALClient) SubscribePortState(ctx context.Context, in *SubscribePortStateRequest, opts ...grpc.CallOption) (HAL_SubscribePortStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &HAL_ServiceDesc.Streams[0], "/lemming.dataplane.HAL/SubscribePortState", opts...)
	if err != nil {
		return nil, err
	}
	x := &hALSubscribePortStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HAL_SubscribePortStateClient interface {
	Recv() (*SubscribePortStateResponse, error)
	grpc.ClientStream
}

type hALSubscribePortStateClient struct {
	grpc.ClientStream
}

func (x *hALSubscribePortStateClient) Recv() (*SubscribePortStateResponse, error) {
	m := new(SubscribePortStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hALClient) InsertRoute(ctx context.Context, in *InsertRouteRequest, opts ...grpc.CallOption) (*InsertRouteResponse, error) {
	out := new(InsertRouteResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.HAL/InsertRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hALClient) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...grpc.CallOption) (*DeleteRouteResponse, error) {
	out := new(DeleteRouteResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.HAL/DeleteRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hALClient) AddNeighbor(ctx context.Context, in *AddNeighborRequest, opts ...grpc.CallOption) (*AddNeighborResponse, error) {
	out := new(AddNeighborResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.HAL/AddNeighbor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hALClient) DeleteNeighbor(ctx context.Context, in *DeleteNeighborRequest, opts ...grpc.CallOption) (*DeleteNeighborResponse, error) {
	out := new(DeleteNeighborResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.HAL/DeleteNeighbor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hALClient) AddPuntRule(ctx context.Context, in *AddPuntRuleRequest, opts ...grpc.CallOption) (*AddPuntRuleResponse, error) {
	out := new(AddPuntRuleResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.HAL/AddPuntRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hALClient) DeletePuntRule(ctx context.Context, in *DeletePuntRuleRequest, opts ...grpc.CallOption) (*DeletePuntRuleRequest, error) {
	out := new(DeletePuntRuleRequest)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.HAL/DeletePuntRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HALServer is the server API for HAL service.
// All implementations must embed UnimplementedHALServer
// for forward compatibility
type HALServer interface {
	// UpdatePort updates port information.
	UpdatePort(context.Context, *UpdatePortRequest) (*UpdatePortResponse, error)
	// SetPortState sets the port state.
	SetPortState(context.Context, *SetPortStateRequest) (*SetPortStateResponse, error)
	// SubsribePortState starts a stream of port status responses.
	// sending the initial then any changes.
	SubscribePortState(*SubscribePortStateRequest, HAL_SubscribePortStateServer) error
	// InsertRoute inserts an entry into the FIB. An inserted route
	// overrides an existing route with the vrf and prefix.
	InsertRoute(context.Context, *InsertRouteRequest) (*InsertRouteResponse, error)
	// DeleteRoute removes an entry from the FIB.
	DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error)
	// AddNeighbor inserts a neighbor in the neighbor table.
	AddNeighbor(context.Context, *AddNeighborRequest) (*AddNeighborResponse, error)
	// DeleteNeighbor deletes a neighbor from the neighbor table.
	DeleteNeighbor(context.Context, *DeleteNeighborRequest) (*DeleteNeighborResponse, error)
	// AddPuntRule adds a punt rule to a port.
	AddPuntRule(context.Context, *AddPuntRuleRequest) (*AddPuntRuleResponse, error)
	// DeletePuntRule adds a punt rule to a port.
	DeletePuntRule(context.Context, *DeletePuntRuleRequest) (*DeletePuntRuleRequest, error)
	mustEmbedUnimplementedHALServer()
}

// UnimplementedHALServer must be embedded to have forward compatible implementations.
type UnimplementedHALServer struct {
}

func (UnimplementedHALServer) UpdatePort(context.Context, *UpdatePortRequest) (*UpdatePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePort not implemented")
}
func (UnimplementedHALServer) SetPortState(context.Context, *SetPortStateRequest) (*SetPortStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPortState not implemented")
}
func (UnimplementedHALServer) SubscribePortState(*SubscribePortStateRequest, HAL_SubscribePortStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribePortState not implemented")
}
func (UnimplementedHALServer) InsertRoute(context.Context, *InsertRouteRequest) (*InsertRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertRoute not implemented")
}
func (UnimplementedHALServer) DeleteRoute(context.Context, *DeleteRouteRequest) (*DeleteRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedHALServer) AddNeighbor(context.Context, *AddNeighborRequest) (*AddNeighborResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNeighbor not implemented")
}
func (UnimplementedHALServer) DeleteNeighbor(context.Context, *DeleteNeighborRequest) (*DeleteNeighborResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNeighbor not implemented")
}
func (UnimplementedHALServer) AddPuntRule(context.Context, *AddPuntRuleRequest) (*AddPuntRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPuntRule not implemented")
}
func (UnimplementedHALServer) DeletePuntRule(context.Context, *DeletePuntRuleRequest) (*DeletePuntRuleRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePuntRule not implemented")
}
func (UnimplementedHALServer) mustEmbedUnimplementedHALServer() {}

// UnsafeHALServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HALServer will
// result in compilation errors.
type UnsafeHALServer interface {
	mustEmbedUnimplementedHALServer()
}

func RegisterHALServer(s grpc.ServiceRegistrar, srv HALServer) {
	s.RegisterService(&HAL_ServiceDesc, srv)
}

func _HAL_UpdatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HALServer).UpdatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.HAL/UpdatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HALServer).UpdatePort(ctx, req.(*UpdatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAL_SetPortState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPortStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HALServer).SetPortState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.HAL/SetPortState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HALServer).SetPortState(ctx, req.(*SetPortStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAL_SubscribePortState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribePortStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HALServer).SubscribePortState(m, &hALSubscribePortStateServer{stream})
}

type HAL_SubscribePortStateServer interface {
	Send(*SubscribePortStateResponse) error
	grpc.ServerStream
}

type hALSubscribePortStateServer struct {
	grpc.ServerStream
}

func (x *hALSubscribePortStateServer) Send(m *SubscribePortStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HAL_InsertRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HALServer).InsertRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.HAL/InsertRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HALServer).InsertRoute(ctx, req.(*InsertRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAL_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HALServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.HAL/DeleteRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HALServer).DeleteRoute(ctx, req.(*DeleteRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAL_AddNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HALServer).AddNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.HAL/AddNeighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HALServer).AddNeighbor(ctx, req.(*AddNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAL_DeleteNeighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HALServer).DeleteNeighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.HAL/DeleteNeighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HALServer).DeleteNeighbor(ctx, req.(*DeleteNeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAL_AddPuntRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPuntRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HALServer).AddPuntRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.HAL/AddPuntRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HALServer).AddPuntRule(ctx, req.(*AddPuntRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HAL_DeletePuntRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePuntRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HALServer).DeletePuntRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.HAL/DeletePuntRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HALServer).DeletePuntRule(ctx, req.(*DeletePuntRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HAL_ServiceDesc is the grpc.ServiceDesc for HAL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HAL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.HAL",
	HandlerType: (*HALServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePort",
			Handler:    _HAL_UpdatePort_Handler,
		},
		{
			MethodName: "SetPortState",
			Handler:    _HAL_SetPortState_Handler,
		},
		{
			MethodName: "InsertRoute",
			Handler:    _HAL_InsertRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _HAL_DeleteRoute_Handler,
		},
		{
			MethodName: "AddNeighbor",
			Handler:    _HAL_AddNeighbor_Handler,
		},
		{
			MethodName: "DeleteNeighbor",
			Handler:    _HAL_DeleteNeighbor_Handler,
		},
		{
			MethodName: "AddPuntRule",
			Handler:    _HAL_AddPuntRule_Handler,
		},
		{
			MethodName: "DeletePuntRule",
			Handler:    _HAL_DeletePuntRule_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribePortState",
			Handler:       _HAL_SubscribePortState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dataplane.proto",
}
