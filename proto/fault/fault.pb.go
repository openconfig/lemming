// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: proto/fault/fault.proto

package fault

import (
	context "context"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNSPECIFIED MessageType = 0
	MessageType_MESSAGE_TYPE_REQUEST     MessageType = 1
	MessageType_MESSAGE_TYPE_RESPONSE    MessageType = 2
	MessageType_MESSAGE_TYPE_STREAM_END  MessageType = 3
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_UNSPECIFIED",
		1: "MESSAGE_TYPE_REQUEST",
		2: "MESSAGE_TYPE_RESPONSE",
		3: "MESSAGE_TYPE_STREAM_END",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED": 0,
		"MESSAGE_TYPE_REQUEST":     1,
		"MESSAGE_TYPE_RESPONSE":    2,
		"MESSAGE_TYPE_STREAM_END":  3,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_fault_fault_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_proto_fault_fault_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_proto_fault_fault_proto_rawDescGZIP(), []int{0}
}

type InterceptSubRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Method        string                 `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterceptSubRequest) Reset() {
	*x = InterceptSubRequest{}
	mi := &file_proto_fault_fault_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterceptSubRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptSubRequest) ProtoMessage() {}

func (x *InterceptSubRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fault_fault_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptSubRequest.ProtoReflect.Descriptor instead.
func (*InterceptSubRequest) Descriptor() ([]byte, []int) {
	return file_proto_fault_fault_proto_rawDescGZIP(), []int{0}
}

func (x *InterceptSubRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type ServerMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RpcId         string                 `protobuf:"bytes,1,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	MsgId         string                 `protobuf:"bytes,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	MsgType       MessageType            `protobuf:"varint,3,opt,name=msg_type,json=msgType,proto3,enum=lemming.fault.MessageType" json:"msg_type,omitempty"`
	Msg           *anypb.Any             `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
	Status        *status.Status         `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	mi := &file_proto_fault_fault_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fault_fault_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_proto_fault_fault_proto_rawDescGZIP(), []int{1}
}

func (x *ServerMessage) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

func (x *ServerMessage) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *ServerMessage) GetMsgType() MessageType {
	if x != nil {
		return x.MsgType
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

func (x *ServerMessage) GetMsg() *anypb.Any {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *ServerMessage) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type FaultMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MsgId         string                 `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Msg           *anypb.Any             `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Status        *status.Status         `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FaultMessage) Reset() {
	*x = FaultMessage{}
	mi := &file_proto_fault_fault_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaultMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultMessage) ProtoMessage() {}

func (x *FaultMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fault_fault_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultMessage.ProtoReflect.Descriptor instead.
func (*FaultMessage) Descriptor() ([]byte, []int) {
	return file_proto_fault_fault_proto_rawDescGZIP(), []int{2}
}

func (x *FaultMessage) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *FaultMessage) GetMsg() *anypb.Any {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *FaultMessage) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type InterceptRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Msg:
	//
	//	*InterceptRequest_IntSub
	//	*InterceptRequest_FaultMsg
	Msg           isInterceptRequest_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterceptRequest) Reset() {
	*x = InterceptRequest{}
	mi := &file_proto_fault_fault_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterceptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptRequest) ProtoMessage() {}

func (x *InterceptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fault_fault_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptRequest.ProtoReflect.Descriptor instead.
func (*InterceptRequest) Descriptor() ([]byte, []int) {
	return file_proto_fault_fault_proto_rawDescGZIP(), []int{3}
}

func (x *InterceptRequest) GetMsg() isInterceptRequest_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *InterceptRequest) GetIntSub() *InterceptSubRequest {
	if x != nil {
		if x, ok := x.Msg.(*InterceptRequest_IntSub); ok {
			return x.IntSub
		}
	}
	return nil
}

func (x *InterceptRequest) GetFaultMsg() *FaultMessage {
	if x != nil {
		if x, ok := x.Msg.(*InterceptRequest_FaultMsg); ok {
			return x.FaultMsg
		}
	}
	return nil
}

type isInterceptRequest_Msg interface {
	isInterceptRequest_Msg()
}

type InterceptRequest_IntSub struct {
	IntSub *InterceptSubRequest `protobuf:"bytes,1,opt,name=int_sub,json=intSub,proto3,oneof"`
}

type InterceptRequest_FaultMsg struct {
	FaultMsg *FaultMessage `protobuf:"bytes,2,opt,name=fault_msg,json=faultMsg,proto3,oneof"`
}

func (*InterceptRequest_IntSub) isInterceptRequest_Msg() {}

func (*InterceptRequest_FaultMsg) isInterceptRequest_Msg() {}

type InterceptResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OriginalMsg   *ServerMessage         `protobuf:"bytes,1,opt,name=original_msg,json=originalMsg,proto3" json:"original_msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterceptResponse) Reset() {
	*x = InterceptResponse{}
	mi := &file_proto_fault_fault_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterceptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterceptResponse) ProtoMessage() {}

func (x *InterceptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_fault_fault_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterceptResponse.ProtoReflect.Descriptor instead.
func (*InterceptResponse) Descriptor() ([]byte, []int) {
	return file_proto_fault_fault_proto_rawDescGZIP(), []int{4}
}

func (x *InterceptResponse) GetOriginalMsg() *ServerMessage {
	if x != nil {
		return x.OriginalMsg
	}
	return nil
}

var File_proto_fault_fault_proto protoreflect.FileDescriptor

var file_proto_fault_fault_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2f, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x13,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x70, 0x63, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x6d,
	0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x79, 0x0a, 0x0c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x75,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x53, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x69,
	0x6e, 0x74, 0x53, 0x75, 0x62, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x73,
	0x67, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x54, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x2a, 0x7d,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x32, 0x63, 0x0a,
	0x0b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x09,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_fault_fault_proto_rawDescOnce sync.Once
	file_proto_fault_fault_proto_rawDescData = file_proto_fault_fault_proto_rawDesc
)

func file_proto_fault_fault_proto_rawDescGZIP() []byte {
	file_proto_fault_fault_proto_rawDescOnce.Do(func() {
		file_proto_fault_fault_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_fault_fault_proto_rawDescData)
	})
	return file_proto_fault_fault_proto_rawDescData
}

var file_proto_fault_fault_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_fault_fault_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_fault_fault_proto_goTypes = []any{
	(MessageType)(0),            // 0: lemming.fault.MessageType
	(*InterceptSubRequest)(nil), // 1: lemming.fault.InterceptSubRequest
	(*ServerMessage)(nil),       // 2: lemming.fault.ServerMessage
	(*FaultMessage)(nil),        // 3: lemming.fault.FaultMessage
	(*InterceptRequest)(nil),    // 4: lemming.fault.InterceptRequest
	(*InterceptResponse)(nil),   // 5: lemming.fault.InterceptResponse
	(*anypb.Any)(nil),           // 6: google.protobuf.Any
	(*status.Status)(nil),       // 7: google.rpc.Status
}
var file_proto_fault_fault_proto_depIdxs = []int32{
	0, // 0: lemming.fault.ServerMessage.msg_type:type_name -> lemming.fault.MessageType
	6, // 1: lemming.fault.ServerMessage.msg:type_name -> google.protobuf.Any
	7, // 2: lemming.fault.ServerMessage.status:type_name -> google.rpc.Status
	6, // 3: lemming.fault.FaultMessage.msg:type_name -> google.protobuf.Any
	7, // 4: lemming.fault.FaultMessage.status:type_name -> google.rpc.Status
	1, // 5: lemming.fault.InterceptRequest.int_sub:type_name -> lemming.fault.InterceptSubRequest
	3, // 6: lemming.fault.InterceptRequest.fault_msg:type_name -> lemming.fault.FaultMessage
	2, // 7: lemming.fault.InterceptResponse.original_msg:type_name -> lemming.fault.ServerMessage
	4, // 8: lemming.fault.FaultInject.Intercept:input_type -> lemming.fault.InterceptRequest
	5, // 9: lemming.fault.FaultInject.Intercept:output_type -> lemming.fault.InterceptResponse
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_proto_fault_fault_proto_init() }
func file_proto_fault_fault_proto_init() {
	if File_proto_fault_fault_proto != nil {
		return
	}
	file_proto_fault_fault_proto_msgTypes[3].OneofWrappers = []any{
		(*InterceptRequest_IntSub)(nil),
		(*InterceptRequest_FaultMsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_fault_fault_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_fault_fault_proto_goTypes,
		DependencyIndexes: file_proto_fault_fault_proto_depIdxs,
		EnumInfos:         file_proto_fault_fault_proto_enumTypes,
		MessageInfos:      file_proto_fault_fault_proto_msgTypes,
	}.Build()
	File_proto_fault_fault_proto = out.File
	file_proto_fault_fault_proto_rawDesc = nil
	file_proto_fault_fault_proto_goTypes = nil
	file_proto_fault_fault_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FaultInjectClient is the client API for FaultInject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaultInjectClient interface {
	Intercept(ctx context.Context, opts ...grpc.CallOption) (FaultInject_InterceptClient, error)
}

type faultInjectClient struct {
	cc grpc.ClientConnInterface
}

func NewFaultInjectClient(cc grpc.ClientConnInterface) FaultInjectClient {
	return &faultInjectClient{cc}
}

func (c *faultInjectClient) Intercept(ctx context.Context, opts ...grpc.CallOption) (FaultInject_InterceptClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FaultInject_serviceDesc.Streams[0], "/lemming.fault.FaultInject/Intercept", opts...)
	if err != nil {
		return nil, err
	}
	x := &faultInjectInterceptClient{stream}
	return x, nil
}

type FaultInject_InterceptClient interface {
	Send(*InterceptRequest) error
	Recv() (*InterceptResponse, error)
	grpc.ClientStream
}

type faultInjectInterceptClient struct {
	grpc.ClientStream
}

func (x *faultInjectInterceptClient) Send(m *InterceptRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *faultInjectInterceptClient) Recv() (*InterceptResponse, error) {
	m := new(InterceptResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FaultInjectServer is the server API for FaultInject service.
type FaultInjectServer interface {
	Intercept(FaultInject_InterceptServer) error
}

// UnimplementedFaultInjectServer can be embedded to have forward compatible implementations.
type UnimplementedFaultInjectServer struct {
}

func (*UnimplementedFaultInjectServer) Intercept(FaultInject_InterceptServer) error {
	return status1.Errorf(codes.Unimplemented, "method Intercept not implemented")
}

func RegisterFaultInjectServer(s *grpc.Server, srv FaultInjectServer) {
	s.RegisterService(&_FaultInject_serviceDesc, srv)
}

func _FaultInject_Intercept_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FaultInjectServer).Intercept(&faultInjectInterceptServer{stream})
}

type FaultInject_InterceptServer interface {
	Send(*InterceptResponse) error
	Recv() (*InterceptRequest, error)
	grpc.ServerStream
}

type faultInjectInterceptServer struct {
	grpc.ServerStream
}

func (x *faultInjectInterceptServer) Send(m *InterceptResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *faultInjectInterceptServer) Recv() (*InterceptRequest, error) {
	m := new(InterceptRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FaultInject_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.fault.FaultInject",
	HandlerType: (*FaultInjectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Intercept",
			Handler:       _FaultInject_Intercept_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/fault/fault.proto",
}
