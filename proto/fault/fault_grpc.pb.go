// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/fault/fault.proto

package fault

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FaultInject_Intercept_FullMethodName = "/lemming.fault.FaultInject/Intercept"
)

// FaultInjectClient is the client API for FaultInject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaultInjectClient interface {
	Intercept(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InterceptRequest, InterceptResponse], error)
}

type faultInjectClient struct {
	cc grpc.ClientConnInterface
}

func NewFaultInjectClient(cc grpc.ClientConnInterface) FaultInjectClient {
	return &faultInjectClient{cc}
}

func (c *faultInjectClient) Intercept(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InterceptRequest, InterceptResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FaultInject_ServiceDesc.Streams[0], FaultInject_Intercept_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InterceptRequest, InterceptResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FaultInject_InterceptClient = grpc.BidiStreamingClient[InterceptRequest, InterceptResponse]

// FaultInjectServer is the server API for FaultInject service.
// All implementations should embed UnimplementedFaultInjectServer
// for forward compatibility.
type FaultInjectServer interface {
	Intercept(grpc.BidiStreamingServer[InterceptRequest, InterceptResponse]) error
}

// UnimplementedFaultInjectServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFaultInjectServer struct{}

func (UnimplementedFaultInjectServer) Intercept(grpc.BidiStreamingServer[InterceptRequest, InterceptResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Intercept not implemented")
}
func (UnimplementedFaultInjectServer) testEmbeddedByValue() {}

// UnsafeFaultInjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaultInjectServer will
// result in compilation errors.
type UnsafeFaultInjectServer interface {
	mustEmbedUnimplementedFaultInjectServer()
}

func RegisterFaultInjectServer(s grpc.ServiceRegistrar, srv FaultInjectServer) {
	// If the following call pancis, it indicates UnimplementedFaultInjectServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FaultInject_ServiceDesc, srv)
}

func _FaultInject_Intercept_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FaultInjectServer).Intercept(&grpc.GenericServerStream[InterceptRequest, InterceptResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FaultInject_InterceptServer = grpc.BidiStreamingServer[InterceptRequest, InterceptResponse]

// FaultInject_ServiceDesc is the grpc.ServiceDesc for FaultInject service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FaultInject_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.fault.FaultInject",
	HandlerType: (*FaultInjectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Intercept",
			Handler:       _FaultInject_Intercept_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/fault/fault.proto",
}
