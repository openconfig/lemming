// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package lemming.fault;

import "google/protobuf/any.proto";
import "google/rpc/status.proto";

option go_package = "github.com/openconfig/lemming/proto/fault";

message InterceptSubRequest {
  string method_regex = 1;  // regex string on for gRPC method
}

enum MessageType {
  MESSAGE_TYPE_UNSPECIFIED = 0;
  MESSAGE_TYPE_REQUEST = 1;
  MESSAGE_TYPE_RESPONSE = 2;
}

// ServerMessage is the original request received or response generated by the
// server.
message ServerMessage {
  string rpc_id = 1;  // UUID for the RPC
  string msg_id = 2;  // UUID for this message
  string method = 3;
  google.protobuf.Any msg = 4;  // Request or Response
  google.rpc.Status status =
      5;  // Only set for for responses, the orignal error.
}

// FaultMessage
message FaultMessage {
  string msg_id = 1;             // UUID for this message
  google.protobuf.Any msg = 3;   // Inject request or response
  google.rpc.Status status = 4;  // Injected err
}

message InterceptRequest {
  oneof msg {
    InterceptSubRequest int_sub = 1;
    FaultMessage fault_msg = 2;
  }
}

message InterceptResponse {
  ServerMessage original_msg = 1;
}

service FaultInject {
  rpc Intercept(stream InterceptRequest) returns (stream InterceptResponse) {}
}
