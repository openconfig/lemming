// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: proto/config/lemming_config.proto

package config

import (
	fault "github.com/openconfig/lemming/proto/fault"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	Components        *ComponentConfig           `protobuf:"bytes,1,opt,name=components,proto3" json:"components,omitempty"`
	Processes         *ProcessesConfig           `protobuf:"bytes,2,opt,name=processes,proto3" json:"processes,omitempty"`
	Timing            *TimingConfig              `protobuf:"bytes,3,opt,name=timing,proto3" json:"timing,omitempty"`
	NetworkSimulation *NetworkSimConfig          `protobuf:"bytes,4,opt,name=network_simulation,json=networkSimulation,proto3" json:"network_simulation,omitempty"`
	Vendor            *VendorConfig              `protobuf:"bytes,5,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Interfaces        *InterfaceConfig           `protobuf:"bytes,6,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	LinkQualification *LinkQualificationConfig   `protobuf:"bytes,7,opt,name=link_qualification,json=linkQualification,proto3" json:"link_qualification,omitempty"`
	FaultConfig       *FaultServiceConfiguration `protobuf:"bytes,8,opt,name=fault_config,json=faultConfig,proto3" json:"fault_config,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetComponents() *ComponentConfig {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Config) GetProcesses() *ProcessesConfig {
	if x != nil {
		return x.Processes
	}
	return nil
}

func (x *Config) GetTiming() *TimingConfig {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *Config) GetNetworkSimulation() *NetworkSimConfig {
	if x != nil {
		return x.NetworkSimulation
	}
	return nil
}

func (x *Config) GetVendor() *VendorConfig {
	if x != nil {
		return x.Vendor
	}
	return nil
}

func (x *Config) GetInterfaces() *InterfaceConfig {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Config) GetLinkQualification() *LinkQualificationConfig {
	if x != nil {
		return x.LinkQualification
	}
	return nil
}

func (x *Config) GetFaultConfig() *FaultServiceConfiguration {
	if x != nil {
		return x.FaultConfig
	}
	return nil
}

type ProcessesConfig struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Process              []*ProcessConfig       `protobuf:"bytes,1,rep,name=process,proto3" json:"process,omitempty"`
	DefaultRestartOnKill bool                   `protobuf:"varint,2,opt,name=default_restart_on_kill,json=defaultRestartOnKill,proto3" json:"default_restart_on_kill,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ProcessesConfig) Reset() {
	*x = ProcessesConfig{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessesConfig) ProtoMessage() {}

func (x *ProcessesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessesConfig.ProtoReflect.Descriptor instead.
func (*ProcessesConfig) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessesConfig) GetProcess() []*ProcessConfig {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessesConfig) GetDefaultRestartOnKill() bool {
	if x != nil {
		return x.DefaultRestartOnKill
	}
	return false
}

type ComponentConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Supervisor1Name string                 `protobuf:"bytes,1,opt,name=supervisor1_name,json=supervisor1Name,proto3" json:"supervisor1_name,omitempty"`
	Supervisor2Name string                 `protobuf:"bytes,2,opt,name=supervisor2_name,json=supervisor2Name,proto3" json:"supervisor2_name,omitempty"`
	ChassisName     string                 `protobuf:"bytes,3,opt,name=chassis_name,json=chassisName,proto3" json:"chassis_name,omitempty"`
	LinecardPrefix  string                 `protobuf:"bytes,4,opt,name=linecard_prefix,json=linecardPrefix,proto3" json:"linecard_prefix,omitempty"`
	FabricPrefix    string                 `protobuf:"bytes,5,opt,name=fabric_prefix,json=fabricPrefix,proto3" json:"fabric_prefix,omitempty"`
	Linecard        *ComponentTypeConfig   `protobuf:"bytes,7,opt,name=linecard,proto3" json:"linecard,omitempty"`
	Fabric          *ComponentTypeConfig   `protobuf:"bytes,8,opt,name=fabric,proto3" json:"fabric,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ComponentConfig) Reset() {
	*x = ComponentConfig{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentConfig) ProtoMessage() {}

func (x *ComponentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentConfig.ProtoReflect.Descriptor instead.
func (*ComponentConfig) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{2}
}

func (x *ComponentConfig) GetSupervisor1Name() string {
	if x != nil {
		return x.Supervisor1Name
	}
	return ""
}

func (x *ComponentConfig) GetSupervisor2Name() string {
	if x != nil {
		return x.Supervisor2Name
	}
	return ""
}

func (x *ComponentConfig) GetChassisName() string {
	if x != nil {
		return x.ChassisName
	}
	return ""
}

func (x *ComponentConfig) GetLinecardPrefix() string {
	if x != nil {
		return x.LinecardPrefix
	}
	return ""
}

func (x *ComponentConfig) GetFabricPrefix() string {
	if x != nil {
		return x.FabricPrefix
	}
	return ""
}

func (x *ComponentConfig) GetLinecard() *ComponentTypeConfig {
	if x != nil {
		return x.Linecard
	}
	return nil
}

func (x *ComponentConfig) GetFabric() *ComponentTypeConfig {
	if x != nil {
		return x.Fabric
	}
	return nil
}

type ComponentTypeConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         int32                  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	StartIndex    int32                  `protobuf:"varint,2,opt,name=start_index,json=startIndex,proto3" json:"start_index,omitempty"`
	Step          int32                  `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentTypeConfig) Reset() {
	*x = ComponentTypeConfig{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentTypeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentTypeConfig) ProtoMessage() {}

func (x *ComponentTypeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentTypeConfig.ProtoReflect.Descriptor instead.
func (*ComponentTypeConfig) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{3}
}

func (x *ComponentTypeConfig) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ComponentTypeConfig) GetStartIndex() int32 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

func (x *ComponentTypeConfig) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

type ProcessConfig struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pid               uint32                 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	CpuUsageUser      uint64                 `protobuf:"varint,3,opt,name=cpu_usage_user,json=cpuUsageUser,proto3" json:"cpu_usage_user,omitempty"`
	CpuUsageSystem    uint64                 `protobuf:"varint,4,opt,name=cpu_usage_system,json=cpuUsageSystem,proto3" json:"cpu_usage_system,omitempty"`
	CpuUtilization    uint32                 `protobuf:"varint,5,opt,name=cpu_utilization,json=cpuUtilization,proto3" json:"cpu_utilization,omitempty"`
	MemoryUsage       uint64                 `protobuf:"varint,6,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	MemoryUtilization uint32                 `protobuf:"varint,7,opt,name=memory_utilization,json=memoryUtilization,proto3" json:"memory_utilization,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ProcessConfig) Reset() {
	*x = ProcessConfig{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessConfig) ProtoMessage() {}

func (x *ProcessConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessConfig.ProtoReflect.Descriptor instead.
func (*ProcessConfig) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{4}
}

func (x *ProcessConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessConfig) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessConfig) GetCpuUsageUser() uint64 {
	if x != nil {
		return x.CpuUsageUser
	}
	return 0
}

func (x *ProcessConfig) GetCpuUsageSystem() uint64 {
	if x != nil {
		return x.CpuUsageSystem
	}
	return 0
}

func (x *ProcessConfig) GetCpuUtilization() uint32 {
	if x != nil {
		return x.CpuUtilization
	}
	return 0
}

func (x *ProcessConfig) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *ProcessConfig) GetMemoryUtilization() uint32 {
	if x != nil {
		return x.MemoryUtilization
	}
	return 0
}

type TimingConfig struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	SwitchoverDurationMs  int64                  `protobuf:"varint,1,opt,name=switchover_duration_ms,json=switchoverDurationMs,proto3" json:"switchover_duration_ms,omitempty"`
	RebootDurationMs      int64                  `protobuf:"varint,2,opt,name=reboot_duration_ms,json=rebootDurationMs,proto3" json:"reboot_duration_ms,omitempty"`
	ProcessRestartDelayMs int64                  `protobuf:"varint,3,opt,name=process_restart_delay_ms,json=processRestartDelayMs,proto3" json:"process_restart_delay_ms,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TimingConfig) Reset() {
	*x = TimingConfig{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimingConfig) ProtoMessage() {}

func (x *TimingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimingConfig.ProtoReflect.Descriptor instead.
func (*TimingConfig) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{5}
}

func (x *TimingConfig) GetSwitchoverDurationMs() int64 {
	if x != nil {
		return x.SwitchoverDurationMs
	}
	return 0
}

func (x *TimingConfig) GetRebootDurationMs() int64 {
	if x != nil {
		return x.RebootDurationMs
	}
	return 0
}

func (x *TimingConfig) GetProcessRestartDelayMs() int64 {
	if x != nil {
		return x.ProcessRestartDelayMs
	}
	return 0
}

type InterfaceConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Interface     []*InterfaceSpec       `protobuf:"bytes,1,rep,name=interface,proto3" json:"interface,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceConfig) Reset() {
	*x = InterfaceConfig{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceConfig) ProtoMessage() {}

func (x *InterfaceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceConfig.ProtoReflect.Descriptor instead.
func (*InterfaceConfig) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{6}
}

func (x *InterfaceConfig) GetInterface() []*InterfaceSpec {
	if x != nil {
		return x.Interface
	}
	return nil
}

type InterfaceSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IfIndex       uint32                 `protobuf:"varint,3,opt,name=if_index,json=ifIndex,proto3" json:"if_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InterfaceSpec) Reset() {
	*x = InterfaceSpec{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InterfaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceSpec) ProtoMessage() {}

func (x *InterfaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceSpec.ProtoReflect.Descriptor instead.
func (*InterfaceSpec) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{7}
}

func (x *InterfaceSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InterfaceSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InterfaceSpec) GetIfIndex() uint32 {
	if x != nil {
		return x.IfIndex
	}
	return 0
}

type LinkQualificationConfig struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	MaxBps                uint64                 `protobuf:"varint,1,opt,name=max_bps,json=maxBps,proto3" json:"max_bps,omitempty"`
	MaxPps                uint64                 `protobuf:"varint,2,opt,name=max_pps,json=maxPps,proto3" json:"max_pps,omitempty"`
	MinMtu                uint32                 `protobuf:"varint,3,opt,name=min_mtu,json=minMtu,proto3" json:"min_mtu,omitempty"`
	MaxMtu                uint32                 `protobuf:"varint,4,opt,name=max_mtu,json=maxMtu,proto3" json:"max_mtu,omitempty"`
	MaxHistoricalResults  uint32                 `protobuf:"varint,11,opt,name=max_historical_results,json=maxHistoricalResults,proto3" json:"max_historical_results,omitempty"`
	MinSetupDurationMs    int64                  `protobuf:"varint,5,opt,name=min_setup_duration_ms,json=minSetupDurationMs,proto3" json:"min_setup_duration_ms,omitempty"`
	MinTeardownDurationMs int64                  `protobuf:"varint,6,opt,name=min_teardown_duration_ms,json=minTeardownDurationMs,proto3" json:"min_teardown_duration_ms,omitempty"`
	MinSampleIntervalMs   int64                  `protobuf:"varint,7,opt,name=min_sample_interval_ms,json=minSampleIntervalMs,proto3" json:"min_sample_interval_ms,omitempty"`
	DefaultPacketRate     uint64                 `protobuf:"varint,8,opt,name=default_packet_rate,json=defaultPacketRate,proto3" json:"default_packet_rate,omitempty"`
	DefaultPacketSize     uint32                 `protobuf:"varint,9,opt,name=default_packet_size,json=defaultPacketSize,proto3" json:"default_packet_size,omitempty"`
	DefaultTestDurationMs int64                  `protobuf:"varint,10,opt,name=default_test_duration_ms,json=defaultTestDurationMs,proto3" json:"default_test_duration_ms,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *LinkQualificationConfig) Reset() {
	*x = LinkQualificationConfig{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkQualificationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkQualificationConfig) ProtoMessage() {}

func (x *LinkQualificationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkQualificationConfig.ProtoReflect.Descriptor instead.
func (*LinkQualificationConfig) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{8}
}

func (x *LinkQualificationConfig) GetMaxBps() uint64 {
	if x != nil {
		return x.MaxBps
	}
	return 0
}

func (x *LinkQualificationConfig) GetMaxPps() uint64 {
	if x != nil {
		return x.MaxPps
	}
	return 0
}

func (x *LinkQualificationConfig) GetMinMtu() uint32 {
	if x != nil {
		return x.MinMtu
	}
	return 0
}

func (x *LinkQualificationConfig) GetMaxMtu() uint32 {
	if x != nil {
		return x.MaxMtu
	}
	return 0
}

func (x *LinkQualificationConfig) GetMaxHistoricalResults() uint32 {
	if x != nil {
		return x.MaxHistoricalResults
	}
	return 0
}

func (x *LinkQualificationConfig) GetMinSetupDurationMs() int64 {
	if x != nil {
		return x.MinSetupDurationMs
	}
	return 0
}

func (x *LinkQualificationConfig) GetMinTeardownDurationMs() int64 {
	if x != nil {
		return x.MinTeardownDurationMs
	}
	return 0
}

func (x *LinkQualificationConfig) GetMinSampleIntervalMs() int64 {
	if x != nil {
		return x.MinSampleIntervalMs
	}
	return 0
}

func (x *LinkQualificationConfig) GetDefaultPacketRate() uint64 {
	if x != nil {
		return x.DefaultPacketRate
	}
	return 0
}

func (x *LinkQualificationConfig) GetDefaultPacketSize() uint32 {
	if x != nil {
		return x.DefaultPacketSize
	}
	return 0
}

func (x *LinkQualificationConfig) GetDefaultTestDurationMs() int64 {
	if x != nil {
		return x.DefaultTestDurationMs
	}
	return 0
}

type NetworkSimConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BaseLatencyMs   int64                  `protobuf:"varint,1,opt,name=base_latency_ms,json=baseLatencyMs,proto3" json:"base_latency_ms,omitempty"`
	LatencyJitterMs int64                  `protobuf:"varint,2,opt,name=latency_jitter_ms,json=latencyJitterMs,proto3" json:"latency_jitter_ms,omitempty"`
	PacketLossRate  float32                `protobuf:"fixed32,3,opt,name=packet_loss_rate,json=packetLossRate,proto3" json:"packet_loss_rate,omitempty"`
	DefaultTtl      int32                  `protobuf:"varint,4,opt,name=default_ttl,json=defaultTtl,proto3" json:"default_ttl,omitempty"`
	PacketErrorRate float32                `protobuf:"fixed32,5,opt,name=packet_error_rate,json=packetErrorRate,proto3" json:"packet_error_rate,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *NetworkSimConfig) Reset() {
	*x = NetworkSimConfig{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkSimConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkSimConfig) ProtoMessage() {}

func (x *NetworkSimConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkSimConfig.ProtoReflect.Descriptor instead.
func (*NetworkSimConfig) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{9}
}

func (x *NetworkSimConfig) GetBaseLatencyMs() int64 {
	if x != nil {
		return x.BaseLatencyMs
	}
	return 0
}

func (x *NetworkSimConfig) GetLatencyJitterMs() int64 {
	if x != nil {
		return x.LatencyJitterMs
	}
	return 0
}

func (x *NetworkSimConfig) GetPacketLossRate() float32 {
	if x != nil {
		return x.PacketLossRate
	}
	return 0
}

func (x *NetworkSimConfig) GetDefaultTtl() int32 {
	if x != nil {
		return x.DefaultTtl
	}
	return 0
}

func (x *NetworkSimConfig) GetPacketErrorRate() float32 {
	if x != nil {
		return x.PacketErrorRate
	}
	return 0
}

type VendorConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Model         string                 `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	OsVersion     string                 `protobuf:"bytes,3,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VendorConfig) Reset() {
	*x = VendorConfig{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VendorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorConfig) ProtoMessage() {}

func (x *VendorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorConfig.ProtoReflect.Descriptor instead.
func (*VendorConfig) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{10}
}

func (x *VendorConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VendorConfig) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *VendorConfig) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

type GNOIFaults struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RpcMethod     string                 `protobuf:"bytes,1,opt,name=rpc_method,json=rpcMethod,proto3" json:"rpc_method,omitempty"`
	Faults        []*fault.FaultMessage  `protobuf:"bytes,2,rep,name=faults,proto3" json:"faults,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GNOIFaults) Reset() {
	*x = GNOIFaults{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GNOIFaults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNOIFaults) ProtoMessage() {}

func (x *GNOIFaults) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNOIFaults.ProtoReflect.Descriptor instead.
func (*GNOIFaults) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{11}
}

func (x *GNOIFaults) GetRpcMethod() string {
	if x != nil {
		return x.RpcMethod
	}
	return ""
}

func (x *GNOIFaults) GetFaults() []*fault.FaultMessage {
	if x != nil {
		return x.Faults
	}
	return nil
}

type FaultServiceConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GnoiFaults    []*GNOIFaults          `protobuf:"bytes,1,rep,name=gnoi_faults,json=gnoiFaults,proto3" json:"gnoi_faults,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FaultServiceConfiguration) Reset() {
	*x = FaultServiceConfiguration{}
	mi := &file_proto_config_lemming_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FaultServiceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultServiceConfiguration) ProtoMessage() {}

func (x *FaultServiceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_config_lemming_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultServiceConfiguration.ProtoReflect.Descriptor instead.
func (*FaultServiceConfiguration) Descriptor() ([]byte, []int) {
	return file_proto_config_lemming_config_proto_rawDescGZIP(), []int{12}
}

func (x *FaultServiceConfiguration) GetGnoiFaults() []*GNOIFaults {
	if x != nil {
		return x.GnoiFaults
	}
	return nil
}

var File_proto_config_lemming_config_proto protoreflect.FileDescriptor

var file_proto_config_lemming_config_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x2f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x04, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a,
	0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x6c, 0x69, 0x6e, 0x6b,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a,
	0x0c, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x81, 0x01, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x37, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x22,
	0xd6, 0x02, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x31, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x31, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x32, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x3f, 0x0a, 0x08, 0x6c, 0x69,
	0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x66,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x22, 0x60, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x22, 0x80, 0x02, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x70, 0x75, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x70, 0x75,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x01,
	0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34,
	0x0a, 0x16, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x22, 0x4e, 0x0a, 0x0f, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3b,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x0d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x66, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xed, 0x03,
	0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x5f, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x42,
	0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x70, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x50, 0x70, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x69, 0x6e, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69,
	0x6e, 0x4d, 0x74, 0x75, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x74, 0x75, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4d, 0x74, 0x75, 0x12, 0x34, 0x0a,
	0x16, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6d,
	0x61, 0x78, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x65,
	0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x54, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12,
	0x33, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x6d, 0x69, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0xdd, 0x01,
	0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4a, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x74,
	0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x22, 0x57, 0x0a,
	0x0c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x0a, 0x47, 0x4e, 0x4f, 0x49, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x70, 0x63, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x19, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x67, 0x6e, 0x6f, 0x69, 0x5f, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x4e, 0x4f, 0x49,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x0a, 0x67, 0x6e, 0x6f, 0x69, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_config_lemming_config_proto_rawDescOnce sync.Once
	file_proto_config_lemming_config_proto_rawDescData = file_proto_config_lemming_config_proto_rawDesc
)

func file_proto_config_lemming_config_proto_rawDescGZIP() []byte {
	file_proto_config_lemming_config_proto_rawDescOnce.Do(func() {
		file_proto_config_lemming_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_config_lemming_config_proto_rawDescData)
	})
	return file_proto_config_lemming_config_proto_rawDescData
}

var file_proto_config_lemming_config_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_config_lemming_config_proto_goTypes = []any{
	(*Config)(nil),                    // 0: lemming.config.Config
	(*ProcessesConfig)(nil),           // 1: lemming.config.ProcessesConfig
	(*ComponentConfig)(nil),           // 2: lemming.config.ComponentConfig
	(*ComponentTypeConfig)(nil),       // 3: lemming.config.ComponentTypeConfig
	(*ProcessConfig)(nil),             // 4: lemming.config.ProcessConfig
	(*TimingConfig)(nil),              // 5: lemming.config.TimingConfig
	(*InterfaceConfig)(nil),           // 6: lemming.config.InterfaceConfig
	(*InterfaceSpec)(nil),             // 7: lemming.config.InterfaceSpec
	(*LinkQualificationConfig)(nil),   // 8: lemming.config.LinkQualificationConfig
	(*NetworkSimConfig)(nil),          // 9: lemming.config.NetworkSimConfig
	(*VendorConfig)(nil),              // 10: lemming.config.VendorConfig
	(*GNOIFaults)(nil),                // 11: lemming.config.GNOIFaults
	(*FaultServiceConfiguration)(nil), // 12: lemming.config.FaultServiceConfiguration
	(*fault.FaultMessage)(nil),        // 13: lemming.fault.FaultMessage
}
var file_proto_config_lemming_config_proto_depIdxs = []int32{
	2,  // 0: lemming.config.Config.components:type_name -> lemming.config.ComponentConfig
	1,  // 1: lemming.config.Config.processes:type_name -> lemming.config.ProcessesConfig
	5,  // 2: lemming.config.Config.timing:type_name -> lemming.config.TimingConfig
	9,  // 3: lemming.config.Config.network_simulation:type_name -> lemming.config.NetworkSimConfig
	10, // 4: lemming.config.Config.vendor:type_name -> lemming.config.VendorConfig
	6,  // 5: lemming.config.Config.interfaces:type_name -> lemming.config.InterfaceConfig
	8,  // 6: lemming.config.Config.link_qualification:type_name -> lemming.config.LinkQualificationConfig
	12, // 7: lemming.config.Config.fault_config:type_name -> lemming.config.FaultServiceConfiguration
	4,  // 8: lemming.config.ProcessesConfig.process:type_name -> lemming.config.ProcessConfig
	3,  // 9: lemming.config.ComponentConfig.linecard:type_name -> lemming.config.ComponentTypeConfig
	3,  // 10: lemming.config.ComponentConfig.fabric:type_name -> lemming.config.ComponentTypeConfig
	7,  // 11: lemming.config.InterfaceConfig.interface:type_name -> lemming.config.InterfaceSpec
	13, // 12: lemming.config.GNOIFaults.faults:type_name -> lemming.fault.FaultMessage
	11, // 13: lemming.config.FaultServiceConfiguration.gnoi_faults:type_name -> lemming.config.GNOIFaults
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_proto_config_lemming_config_proto_init() }
func file_proto_config_lemming_config_proto_init() {
	if File_proto_config_lemming_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_config_lemming_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_config_lemming_config_proto_goTypes,
		DependencyIndexes: file_proto_config_lemming_config_proto_depIdxs,
		MessageInfos:      file_proto_config_lemming_config_proto_msgTypes,
	}.Build()
	File_proto_config_lemming_config_proto = out.File
	file_proto_config_lemming_config_proto_rawDesc = nil
	file_proto_config_lemming_config_proto_goTypes = nil
	file_proto_config_lemming_config_proto_depIdxs = nil
}
