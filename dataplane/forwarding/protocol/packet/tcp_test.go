// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package packet_test

import (
	"testing"

	"github.com/openconfig/lemming/dataplane/forwarding/infra/fwdpacket"
	fwdpb "github.com/openconfig/lemming/proto/forwarding"

	_ "github.com/openconfig/lemming/dataplane/forwarding/protocol/ethernet"
	_ "github.com/openconfig/lemming/dataplane/forwarding/protocol/ip"
	_ "github.com/openconfig/lemming/dataplane/forwarding/protocol/metadata"
	_ "github.com/openconfig/lemming/dataplane/forwarding/protocol/opaque"
	"github.com/openconfig/lemming/dataplane/forwarding/protocol/packettestutil"
	"github.com/openconfig/lemming/dataplane/forwarding/protocol/tcp"
)

// IP4 header carrying TCP data.
var ip4tcp = []byte{0x45, 0x01, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0xff, 0x06, 0xa1, 0xad, 0x01, 0x02, 0x03, 0x04, 0x0a, 0x0b, 0x0c, 0x0d}

// IP6 header carrying TCP data.
var ip6tcp = []byte{0x61, 0x00, 0x02, 0x00, 0x00, 0x18, 0x06, 0x04, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}

// TCP header.
var tcpSegment = []byte{0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x51, 0x34, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0b, 0x0c, 0x0d}

func TestTCP(t *testing.T) {
	queries := []packettestutil.FieldQuery{
		{
			ID:     fwdpacket.NewFieldIDFromNum(fwdpb.PacketFieldNum_PACKET_FIELD_NUM_L4_PORT_SRC, 0),
			Result: []byte{0x01, 0x02},
		},
		{
			ID:     fwdpacket.NewFieldIDFromNum(fwdpb.PacketFieldNum_PACKET_FIELD_NUM_L4_PORT_DST, 0),
			Result: []byte{0x03, 0x04},
		},
		{
			ID:     fwdpacket.NewFieldIDFromNum(fwdpb.PacketFieldNum_PACKET_FIELD_NUM_TCP_FLAGS, 0),
			Result: []byte{0x01, 0x34},
		},
	}
	updates := []packettestutil.FieldUpdate{
		{
			ID:  fwdpacket.NewFieldIDFromNum(fwdpb.PacketFieldNum_PACKET_FIELD_NUM_L4_PORT_SRC, 0),
			Arg: []byte{0x11, 0x12},
			Op:  fwdpacket.OpSet,
		},
		{
			ID:  fwdpacket.NewFieldIDFromNum(fwdpb.PacketFieldNum_PACKET_FIELD_NUM_L4_PORT_DST, 0),
			Arg: []byte{0x13, 0x14},
			Op:  fwdpacket.OpSet,
		},
		{
			ID:  fwdpacket.NewFieldIDFromNum(fwdpb.PacketFieldNum_PACKET_FIELD_NUM_TCP_FLAGS, 0),
			Arg: []byte{0x01, 0x21},
			Op:  fwdpacket.OpSet,
		},
	}
	tests := []packettestutil.PacketFieldTest{
		// TCP over IP4.
		{
			StartHeader: fwdpb.PacketHeaderId_PACKET_HEADER_ID_ETHERNET,
			Orig: [][]byte{
				ethernetIP4,
				ip4tcp,
				tcpSegment,
			},
			Queries: queries,
			Updates: updates,
			Final: [][]byte{
				ethernetIP4,
				ip4tcp,
				[]byte{0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x51, 0x21, 0x00, 0x20, 0x5a, 0x42, 0x00, 0x00, 0x0a, 0x0b, 0x0c, 0x0d},
			},
		},
		// TCP over IP6.
		{
			StartHeader: fwdpb.PacketHeaderId_PACKET_HEADER_ID_ETHERNET,
			Orig: [][]byte{
				ethernetIP6,
				ip6tcp,
				tcpSegment,
			},
			Queries: queries,
			Updates: updates,
			Final: [][]byte{
				ethernetIP6,
				ip6tcp,
				[]byte{0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x51, 0x21, 0x00, 0x20, 0x2c, 0x18, 0x00, 0x00, 0x0a, 0x0b, 0x0c, 0x0d},
			},
		},
	}

	packettestutil.TestPacketFields("tcp", t, tests)
}

func TestTCPchecksum(t *testing.T) {
	tests := []struct {
		tcpHeader  []byte // TCP header
		tcpPayload []byte // TCP Payload
		ipSrc      []byte // IP source address
		ipDst      []byte // IP destination address
		ipVersion  int    // IP version
		want       uint   // Wanted checksum
	}{
		// TCP over IPv4, no payload and TCP options.
		{
			tcpHeader:  []byte{0xde, 0x8e, 0x00, 0xb3, 0x5f, 0x22, 0xcf, 0x49, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x02, 0x72, 0x10, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a, 0x00, 0x3a, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x06, 0xb5, 0x04, 0x00, 0x80},
			tcpPayload: []byte{},
			ipSrc:      []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xc5, 0x0a, 0x04},
			ipDst:      []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xc5, 0x0a, 0x05},
			ipVersion:  4,
			want:       0x28ed,
		},
		// TCP over IPv4, payload and TCP options.
		{
			tcpHeader:  []byte{0x00, 0x19, 0xd5, 0x1d, 0x99, 0x56, 0xad, 0x81, 0x6b, 0x7f, 0xc7, 0x2e, 0x80, 0x18, 0x01, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x08, 0x0a, 0x03, 0xa5, 0x89, 0x09, 0x0a, 0x99, 0x44, 0x3d},
			tcpPayload: []byte{0x32, 0x32, 0x30, 0x20, 0x6d, 0x78, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x20, 0x45, 0x53, 0x4d, 0x54, 0x50, 0x20, 0x71, 0x38, 0x73, 0x69, 0x31, 0x30, 0x33, 0x38, 0x33, 0x39, 0x36, 0x76, 0x63, 0x71, 0x2e, 0x35, 0x38, 0x20, 0x2d, 0x20, 0x67, 0x73, 0x6d, 0x74, 0x70, 0x0d, 0x0a},
			ipSrc:      []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a, 0x7d, 0x83, 0x1b},
			ipDst:      []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8, 0x14, 0x46},
			ipVersion:  4,
			want:       0xc242,
		},
		// TCP over IPv6, no payload and TCP options.
		{
			tcpHeader:  []byte{0xf9, 0xc7, 0x00, 0x19, 0x03, 0xa0, 0x88, 0x30, 0x00, 0x00, 0x00, 0x00, 0x80, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x05, 0x8c, 0x01, 0x03, 0x03, 0x08, 0x01, 0x01, 0x04, 0x02},
			tcpPayload: []byte{},
			ipSrc:      []byte{0x20, 0x01, 0x04, 0x70, 0xe5, 0xbf, 0xde, 0xad, 0x49, 0x57, 0x21, 0x74, 0xe8, 0x2c, 0x48, 0x87},
			ipDst:      []byte{0x26, 0x07, 0xf8, 0xb0, 0x40, 0x0c, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a},
			ipVersion:  6,
			want:       0xda47,
		},
		// TCP over IPv6, payload and TCP options.
		{
			tcpHeader:  []byte{0x00, 0x19, 0xf9, 0xc7, 0x95, 0x63, 0x97, 0x9d, 0x03, 0xa0, 0x88, 0x31, 0x50, 0x18, 0x01, 0x50, 0x00, 0x00, 0x00, 0x00},
			tcpPayload: []byte{0x32, 0x32, 0x30, 0x20, 0x6d, 0x78, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x20, 0x45, 0x53, 0x4d, 0x54, 0x50, 0x20, 0x6d, 0x31, 0x37, 0x73, 0x69, 0x31, 0x30, 0x35, 0x31, 0x35, 0x39, 0x33, 0x76, 0x63, 0x6b, 0x2e, 0x32, 0x20, 0x2d, 0x20, 0x67, 0x73, 0x6d, 0x74, 0x70, 0x0d, 0x0a},
			ipSrc:      []byte{0x26, 0x07, 0xf8, 0xb0, 0x40, 0x0c, 0x0c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a},
			ipDst:      []byte{0x20, 0x01, 0x04, 0x70, 0xe5, 0xbf, 0xde, 0xad, 0x49, 0x57, 0x21, 0x74, 0xe8, 0x2c, 0x48, 0x87},
			ipVersion:  6,
			want:       0xe687,
		},
	}

	for pos, test := range tests {
		var got uint
		if test.ipVersion == 4 {
			got = tcp.ChecksumIPv4(test.tcpHeader, test.tcpPayload, test.ipSrc, test.ipDst)
		} else {
			got = tcp.ChecksumIPv6(test.tcpHeader, test.tcpPayload, test.ipSrc, test.ipDst)
		}

		if got != test.want {
			t.Errorf("%d: unexpected csum for header %v, payload %v, source %v, dest %v, version %v: got %v, want %v.", pos, test.tcpHeader, test.tcpPayload, test.ipSrc, test.ipDst, test.ipVersion, got, test.want)
		}
	}
}
