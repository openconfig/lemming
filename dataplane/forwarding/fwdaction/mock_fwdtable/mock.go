// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openconfig/lemming/dataplane/forwarding/fwdtable (interfaces: Table)

// Package mock_fwdtable is a generated GoMock package.
package mock_fwdtable

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fwdaction "github.com/openconfig/lemming/dataplane/forwarding/fwdaction"
	fwdattribute "github.com/openconfig/lemming/dataplane/forwarding/infra/fwdattribute"
	fwdobject "github.com/openconfig/lemming/dataplane/forwarding/infra/fwdobject"
	fwdpacket "github.com/openconfig/lemming/dataplane/forwarding/infra/fwdpacket"
	forwarding "github.com/openconfig/lemming/proto/forwarding"
)

// MockTable is a mock of Table interface.
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *MockTableMockRecorder
}

// MockTableMockRecorder is the mock recorder for MockTable.
type MockTableMockRecorder struct {
	mock *MockTable
}

// NewMockTable creates a new mock instance.
func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &MockTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTable) EXPECT() *MockTableMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockTable) Acquire() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire")
	ret0, _ := ret[0].(error)
	return ret0
}

// Acquire indicates an expected call of Acquire.
func (mr *MockTableMockRecorder) Acquire() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockTable)(nil).Acquire))
}

// AddEntry mocks base method.
func (m *MockTable) AddEntry(arg0 *forwarding.EntryDesc, arg1 []*forwarding.ActionDesc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEntry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEntry indicates an expected call of AddEntry.
func (mr *MockTableMockRecorder) AddEntry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntry", reflect.TypeOf((*MockTable)(nil).AddEntry), arg0, arg1)
}

// Attributes mocks base method.
func (m *MockTable) Attributes() fwdattribute.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(fwdattribute.Set)
	return ret0
}

// Attributes indicates an expected call of Attributes.
func (mr *MockTableMockRecorder) Attributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockTable)(nil).Attributes))
}

// Clear mocks base method.
func (m *MockTable) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockTableMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockTable)(nil).Clear))
}

// Counters mocks base method.
func (m *MockTable) Counters() map[forwarding.CounterId]fwdobject.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Counters")
	ret0, _ := ret[0].(map[forwarding.CounterId]fwdobject.Counter)
	return ret0
}

// Counters indicates an expected call of Counters.
func (mr *MockTableMockRecorder) Counters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counters", reflect.TypeOf((*MockTable)(nil).Counters))
}

// Entries mocks base method.
func (m *MockTable) Entries() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entries")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Entries indicates an expected call of Entries.
func (mr *MockTableMockRecorder) Entries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entries", reflect.TypeOf((*MockTable)(nil).Entries))
}

// ID mocks base method.
func (m *MockTable) ID() fwdobject.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(fwdobject.ID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockTableMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockTable)(nil).ID))
}

// Increment mocks base method.
func (m *MockTable) Increment(arg0 forwarding.CounterId, arg1 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Increment", arg0, arg1)
}

// Increment indicates an expected call of Increment.
func (mr *MockTableMockRecorder) Increment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockTable)(nil).Increment), arg0, arg1)
}

// Init mocks base method.
func (m *MockTable) Init(arg0 fwdobject.ID, arg1 fwdobject.NID, arg2 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0, arg1, arg2)
}

// Init indicates an expected call of Init.
func (mr *MockTableMockRecorder) Init(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTable)(nil).Init), arg0, arg1, arg2)
}

// NID mocks base method.
func (m *MockTable) NID() fwdobject.NID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NID")
	ret0, _ := ret[0].(fwdobject.NID)
	return ret0
}

// NID indicates an expected call of NID.
func (mr *MockTableMockRecorder) NID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NID", reflect.TypeOf((*MockTable)(nil).NID))
}

// Process mocks base method.
func (m *MockTable) Process(arg0 fwdpacket.Packet, arg1 fwdobject.Counters) (fwdaction.Actions, fwdaction.State) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].(fwdaction.Actions)
	ret1, _ := ret[1].(fwdaction.State)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockTableMockRecorder) Process(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockTable)(nil).Process), arg0, arg1)
}

// Release mocks base method.
func (m *MockTable) Release(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockTableMockRecorder) Release(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockTable)(nil).Release), arg0)
}

// RemoveEntry mocks base method.
func (m *MockTable) RemoveEntry(arg0 *forwarding.EntryDesc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEntry", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEntry indicates an expected call of RemoveEntry.
func (mr *MockTableMockRecorder) RemoveEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEntry", reflect.TypeOf((*MockTable)(nil).RemoveEntry), arg0)
}

// String mocks base method.
func (m *MockTable) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockTableMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockTable)(nil).String))
}
