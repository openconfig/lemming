// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openconfig/lemming/dataplane/forwarding/infra/fwdpacket (interfaces: Packet,Parser)

// Package mock_fwdpacket is a generated GoMock package.
package mock_fwdpacket

import (
	reflect "reflect"

	logr "github.com/go-logr/logr"
	fwdattribute "github.com/openconfig/lemming/dataplane/forwarding/infra/fwdattribute"
	fwdpacket "github.com/openconfig/lemming/dataplane/forwarding/infra/fwdpacket"
	forwarding "github.com/openconfig/lemming/proto/forwarding"
	gomock "go.uber.org/mock/gomock"
)

// MockPacket is a mock of Packet interface.
type MockPacket struct {
	ctrl     *gomock.Controller
	recorder *MockPacketMockRecorder
}

// MockPacketMockRecorder is the mock recorder for MockPacket.
type MockPacketMockRecorder struct {
	mock *MockPacket
}

// NewMockPacket creates a new mock instance.
func NewMockPacket(ctrl *gomock.Controller) *MockPacket {
	mock := &MockPacket{ctrl: ctrl}
	mock.recorder = &MockPacketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacket) EXPECT() *MockPacketMockRecorder {
	return m.recorder
}

// Attributes mocks base method.
func (m *MockPacket) Attributes() fwdattribute.Set {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attributes")
	ret0, _ := ret[0].(fwdattribute.Set)
	return ret0
}

// Attributes indicates an expected call of Attributes.
func (mr *MockPacketMockRecorder) Attributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockPacket)(nil).Attributes))
}

// Debug mocks base method.
func (m *MockPacket) Debug(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", arg0)
}

// Debug indicates an expected call of Debug.
func (mr *MockPacketMockRecorder) Debug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockPacket)(nil).Debug), arg0)
}

// Decap mocks base method.
func (m *MockPacket) Decap(arg0 forwarding.PacketHeaderId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decap", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decap indicates an expected call of Decap.
func (mr *MockPacketMockRecorder) Decap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decap", reflect.TypeOf((*MockPacket)(nil).Decap), arg0)
}

// Encap mocks base method.
func (m *MockPacket) Encap(arg0 forwarding.PacketHeaderId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encap", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encap indicates an expected call of Encap.
func (mr *MockPacketMockRecorder) Encap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encap", reflect.TypeOf((*MockPacket)(nil).Encap), arg0)
}

// Field mocks base method.
func (m *MockPacket) Field(arg0 fwdpacket.FieldID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Field", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Field indicates an expected call of Field.
func (mr *MockPacketMockRecorder) Field(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Field", reflect.TypeOf((*MockPacket)(nil).Field), arg0)
}

// Frame mocks base method.
func (m *MockPacket) Frame() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Frame")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Frame indicates an expected call of Frame.
func (mr *MockPacketMockRecorder) Frame() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Frame", reflect.TypeOf((*MockPacket)(nil).Frame))
}

// Length mocks base method.
func (m *MockPacket) Length() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockPacketMockRecorder) Length() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockPacket)(nil).Length))
}

// Log mocks base method.
func (m *MockPacket) Log() logr.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(logr.Logger)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockPacketMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockPacket)(nil).Log))
}

// LogMsgs mocks base method.
func (m *MockPacket) LogMsgs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogMsgs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// LogMsgs indicates an expected call of LogMsgs.
func (mr *MockPacketMockRecorder) LogMsgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogMsgs", reflect.TypeOf((*MockPacket)(nil).LogMsgs))
}

// Mirror mocks base method.
func (m *MockPacket) Mirror(arg0 []fwdpacket.FieldID) (fwdpacket.Packet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mirror", arg0)
	ret0, _ := ret[0].(fwdpacket.Packet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mirror indicates an expected call of Mirror.
func (mr *MockPacketMockRecorder) Mirror(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mirror", reflect.TypeOf((*MockPacket)(nil).Mirror), arg0)
}

// Reparse mocks base method.
func (m *MockPacket) Reparse(arg0 forwarding.PacketHeaderId, arg1 []fwdpacket.FieldID, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reparse", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reparse indicates an expected call of Reparse.
func (mr *MockPacketMockRecorder) Reparse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reparse", reflect.TypeOf((*MockPacket)(nil).Reparse), arg0, arg1, arg2)
}

// StartHeader mocks base method.
func (m *MockPacket) StartHeader() forwarding.PacketHeaderId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartHeader")
	ret0, _ := ret[0].(forwarding.PacketHeaderId)
	return ret0
}

// StartHeader indicates an expected call of StartHeader.
func (mr *MockPacketMockRecorder) StartHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartHeader", reflect.TypeOf((*MockPacket)(nil).StartHeader))
}

// String mocks base method.
func (m *MockPacket) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockPacketMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPacket)(nil).String))
}

// Update mocks base method.
func (m *MockPacket) Update(arg0 fwdpacket.FieldID, arg1 int, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPacketMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPacket)(nil).Update), arg0, arg1, arg2)
}

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// MaxSize mocks base method.
func (m *MockParser) MaxSize(arg0 fwdpacket.FieldID) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaxSize", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// MaxSize indicates an expected call of MaxSize.
func (mr *MockParserMockRecorder) MaxSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxSize", reflect.TypeOf((*MockParser)(nil).MaxSize), arg0)
}

// New mocks base method.
func (m *MockParser) New(arg0 forwarding.PacketHeaderId, arg1 []byte) (fwdpacket.Packet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1)
	ret0, _ := ret[0].(fwdpacket.Packet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockParserMockRecorder) New(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockParser)(nil).New), arg0, arg1)
}

// Validate mocks base method.
func (m *MockParser) Validate(arg0 fwdpacket.FieldID, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockParserMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockParser)(nil).Validate), arg0, arg1)
}
