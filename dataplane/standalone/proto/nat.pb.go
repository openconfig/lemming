// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/nat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NatEntryAttr int32

const (
	NatEntryAttr_NAT_ENTRY_ATTR_UNSPECIFIED         NatEntryAttr = 0
	NatEntryAttr_NAT_ENTRY_ATTR_NAT_TYPE            NatEntryAttr = 1
	NatEntryAttr_NAT_ENTRY_ATTR_SRC_IP              NatEntryAttr = 2
	NatEntryAttr_NAT_ENTRY_ATTR_SRC_IP_MASK         NatEntryAttr = 3
	NatEntryAttr_NAT_ENTRY_ATTR_VR_ID               NatEntryAttr = 4
	NatEntryAttr_NAT_ENTRY_ATTR_DST_IP              NatEntryAttr = 5
	NatEntryAttr_NAT_ENTRY_ATTR_DST_IP_MASK         NatEntryAttr = 6
	NatEntryAttr_NAT_ENTRY_ATTR_L4_SRC_PORT         NatEntryAttr = 7
	NatEntryAttr_NAT_ENTRY_ATTR_L4_DST_PORT         NatEntryAttr = 8
	NatEntryAttr_NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT NatEntryAttr = 9
	NatEntryAttr_NAT_ENTRY_ATTR_PACKET_COUNT        NatEntryAttr = 10
	NatEntryAttr_NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT   NatEntryAttr = 11
	NatEntryAttr_NAT_ENTRY_ATTR_BYTE_COUNT          NatEntryAttr = 12
	NatEntryAttr_NAT_ENTRY_ATTR_HIT_BIT_COR         NatEntryAttr = 13
	NatEntryAttr_NAT_ENTRY_ATTR_HIT_BIT             NatEntryAttr = 14
)

// Enum value maps for NatEntryAttr.
var (
	NatEntryAttr_name = map[int32]string{
		0:  "NAT_ENTRY_ATTR_UNSPECIFIED",
		1:  "NAT_ENTRY_ATTR_NAT_TYPE",
		2:  "NAT_ENTRY_ATTR_SRC_IP",
		3:  "NAT_ENTRY_ATTR_SRC_IP_MASK",
		4:  "NAT_ENTRY_ATTR_VR_ID",
		5:  "NAT_ENTRY_ATTR_DST_IP",
		6:  "NAT_ENTRY_ATTR_DST_IP_MASK",
		7:  "NAT_ENTRY_ATTR_L4_SRC_PORT",
		8:  "NAT_ENTRY_ATTR_L4_DST_PORT",
		9:  "NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT",
		10: "NAT_ENTRY_ATTR_PACKET_COUNT",
		11: "NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT",
		12: "NAT_ENTRY_ATTR_BYTE_COUNT",
		13: "NAT_ENTRY_ATTR_HIT_BIT_COR",
		14: "NAT_ENTRY_ATTR_HIT_BIT",
	}
	NatEntryAttr_value = map[string]int32{
		"NAT_ENTRY_ATTR_UNSPECIFIED":         0,
		"NAT_ENTRY_ATTR_NAT_TYPE":            1,
		"NAT_ENTRY_ATTR_SRC_IP":              2,
		"NAT_ENTRY_ATTR_SRC_IP_MASK":         3,
		"NAT_ENTRY_ATTR_VR_ID":               4,
		"NAT_ENTRY_ATTR_DST_IP":              5,
		"NAT_ENTRY_ATTR_DST_IP_MASK":         6,
		"NAT_ENTRY_ATTR_L4_SRC_PORT":         7,
		"NAT_ENTRY_ATTR_L4_DST_PORT":         8,
		"NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT": 9,
		"NAT_ENTRY_ATTR_PACKET_COUNT":        10,
		"NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT":   11,
		"NAT_ENTRY_ATTR_BYTE_COUNT":          12,
		"NAT_ENTRY_ATTR_HIT_BIT_COR":         13,
		"NAT_ENTRY_ATTR_HIT_BIT":             14,
	}
)

func (x NatEntryAttr) Enum() *NatEntryAttr {
	p := new(NatEntryAttr)
	*p = x
	return p
}

func (x NatEntryAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NatEntryAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_nat_proto_enumTypes[0].Descriptor()
}

func (NatEntryAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_nat_proto_enumTypes[0]
}

func (x NatEntryAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NatEntryAttr.Descriptor instead.
func (NatEntryAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{0}
}

type NatZoneCounterAttr int32

const (
	NatZoneCounterAttr_NAT_ZONE_COUNTER_ATTR_UNSPECIFIED                     NatZoneCounterAttr = 0
	NatZoneCounterAttr_NAT_ZONE_COUNTER_ATTR_NAT_TYPE                        NatZoneCounterAttr = 1
	NatZoneCounterAttr_NAT_ZONE_COUNTER_ATTR_ZONE_ID                         NatZoneCounterAttr = 2
	NatZoneCounterAttr_NAT_ZONE_COUNTER_ATTR_ENABLE_DISCARD                  NatZoneCounterAttr = 3
	NatZoneCounterAttr_NAT_ZONE_COUNTER_ATTR_DISCARD_PACKET_COUNT            NatZoneCounterAttr = 4
	NatZoneCounterAttr_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATION_NEEDED       NatZoneCounterAttr = 5
	NatZoneCounterAttr_NAT_ZONE_COUNTER_ATTR_TRANSLATION_NEEDED_PACKET_COUNT NatZoneCounterAttr = 6
	NatZoneCounterAttr_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATIONS             NatZoneCounterAttr = 7
	NatZoneCounterAttr_NAT_ZONE_COUNTER_ATTR_TRANSLATIONS_PACKET_COUNT       NatZoneCounterAttr = 8
)

// Enum value maps for NatZoneCounterAttr.
var (
	NatZoneCounterAttr_name = map[int32]string{
		0: "NAT_ZONE_COUNTER_ATTR_UNSPECIFIED",
		1: "NAT_ZONE_COUNTER_ATTR_NAT_TYPE",
		2: "NAT_ZONE_COUNTER_ATTR_ZONE_ID",
		3: "NAT_ZONE_COUNTER_ATTR_ENABLE_DISCARD",
		4: "NAT_ZONE_COUNTER_ATTR_DISCARD_PACKET_COUNT",
		5: "NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATION_NEEDED",
		6: "NAT_ZONE_COUNTER_ATTR_TRANSLATION_NEEDED_PACKET_COUNT",
		7: "NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATIONS",
		8: "NAT_ZONE_COUNTER_ATTR_TRANSLATIONS_PACKET_COUNT",
	}
	NatZoneCounterAttr_value = map[string]int32{
		"NAT_ZONE_COUNTER_ATTR_UNSPECIFIED":                     0,
		"NAT_ZONE_COUNTER_ATTR_NAT_TYPE":                        1,
		"NAT_ZONE_COUNTER_ATTR_ZONE_ID":                         2,
		"NAT_ZONE_COUNTER_ATTR_ENABLE_DISCARD":                  3,
		"NAT_ZONE_COUNTER_ATTR_DISCARD_PACKET_COUNT":            4,
		"NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATION_NEEDED":       5,
		"NAT_ZONE_COUNTER_ATTR_TRANSLATION_NEEDED_PACKET_COUNT": 6,
		"NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATIONS":             7,
		"NAT_ZONE_COUNTER_ATTR_TRANSLATIONS_PACKET_COUNT":       8,
	}
)

func (x NatZoneCounterAttr) Enum() *NatZoneCounterAttr {
	p := new(NatZoneCounterAttr)
	*p = x
	return p
}

func (x NatZoneCounterAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NatZoneCounterAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_nat_proto_enumTypes[1].Descriptor()
}

func (NatZoneCounterAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_nat_proto_enumTypes[1]
}

func (x NatZoneCounterAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NatZoneCounterAttr.Descriptor instead.
func (NatZoneCounterAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{1}
}

type CreateNatEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry             *NatEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	NatType           NatType   `protobuf:"varint,2,opt,name=nat_type,json=natType,proto3,enum=lemming.dataplane.sai.NatType" json:"nat_type,omitempty"`
	SrcIp             []byte    `protobuf:"bytes,3,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	SrcIpMask         []byte    `protobuf:"bytes,4,opt,name=src_ip_mask,json=srcIpMask,proto3" json:"src_ip_mask,omitempty"`
	VrId              uint64    `protobuf:"varint,5,opt,name=vr_id,json=vrId,proto3" json:"vr_id,omitempty"`
	DstIp             []byte    `protobuf:"bytes,6,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstIpMask         []byte    `protobuf:"bytes,7,opt,name=dst_ip_mask,json=dstIpMask,proto3" json:"dst_ip_mask,omitempty"`
	L4SrcPort         uint32    `protobuf:"varint,8,opt,name=l4_src_port,json=l4SrcPort,proto3" json:"l4_src_port,omitempty"`
	L4DstPort         uint32    `protobuf:"varint,9,opt,name=l4_dst_port,json=l4DstPort,proto3" json:"l4_dst_port,omitempty"`
	EnablePacketCount bool      `protobuf:"varint,10,opt,name=enable_packet_count,json=enablePacketCount,proto3" json:"enable_packet_count,omitempty"`
	PacketCount       uint64    `protobuf:"varint,11,opt,name=packet_count,json=packetCount,proto3" json:"packet_count,omitempty"`
	EnableByteCount   bool      `protobuf:"varint,12,opt,name=enable_byte_count,json=enableByteCount,proto3" json:"enable_byte_count,omitempty"`
	ByteCount         uint64    `protobuf:"varint,13,opt,name=byte_count,json=byteCount,proto3" json:"byte_count,omitempty"`
	HitBitCor         bool      `protobuf:"varint,14,opt,name=hit_bit_cor,json=hitBitCor,proto3" json:"hit_bit_cor,omitempty"`
	HitBit            bool      `protobuf:"varint,15,opt,name=hit_bit,json=hitBit,proto3" json:"hit_bit,omitempty"`
}

func (x *CreateNatEntryRequest) Reset() {
	*x = CreateNatEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNatEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNatEntryRequest) ProtoMessage() {}

func (x *CreateNatEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNatEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateNatEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNatEntryRequest) GetEntry() *NatEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *CreateNatEntryRequest) GetNatType() NatType {
	if x != nil {
		return x.NatType
	}
	return NatType_NAT_TYPE_UNSPECIFIED
}

func (x *CreateNatEntryRequest) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *CreateNatEntryRequest) GetSrcIpMask() []byte {
	if x != nil {
		return x.SrcIpMask
	}
	return nil
}

func (x *CreateNatEntryRequest) GetVrId() uint64 {
	if x != nil {
		return x.VrId
	}
	return 0
}

func (x *CreateNatEntryRequest) GetDstIp() []byte {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *CreateNatEntryRequest) GetDstIpMask() []byte {
	if x != nil {
		return x.DstIpMask
	}
	return nil
}

func (x *CreateNatEntryRequest) GetL4SrcPort() uint32 {
	if x != nil {
		return x.L4SrcPort
	}
	return 0
}

func (x *CreateNatEntryRequest) GetL4DstPort() uint32 {
	if x != nil {
		return x.L4DstPort
	}
	return 0
}

func (x *CreateNatEntryRequest) GetEnablePacketCount() bool {
	if x != nil {
		return x.EnablePacketCount
	}
	return false
}

func (x *CreateNatEntryRequest) GetPacketCount() uint64 {
	if x != nil {
		return x.PacketCount
	}
	return 0
}

func (x *CreateNatEntryRequest) GetEnableByteCount() bool {
	if x != nil {
		return x.EnableByteCount
	}
	return false
}

func (x *CreateNatEntryRequest) GetByteCount() uint64 {
	if x != nil {
		return x.ByteCount
	}
	return 0
}

func (x *CreateNatEntryRequest) GetHitBitCor() bool {
	if x != nil {
		return x.HitBitCor
	}
	return false
}

func (x *CreateNatEntryRequest) GetHitBit() bool {
	if x != nil {
		return x.HitBit
	}
	return false
}

type CreateNatEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateNatEntryResponse) Reset() {
	*x = CreateNatEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNatEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNatEntryResponse) ProtoMessage() {}

func (x *CreateNatEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNatEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateNatEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{1}
}

type RemoveNatEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *NatEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *RemoveNatEntryRequest) Reset() {
	*x = RemoveNatEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNatEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNatEntryRequest) ProtoMessage() {}

func (x *RemoveNatEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNatEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveNatEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveNatEntryRequest) GetEntry() *NatEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type RemoveNatEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveNatEntryResponse) Reset() {
	*x = RemoveNatEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNatEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNatEntryResponse) ProtoMessage() {}

func (x *RemoveNatEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNatEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveNatEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{3}
}

type SetNatEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *NatEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	// Types that are assignable to Attr:
	//
	//	*SetNatEntryAttributeRequest_NatType
	//	*SetNatEntryAttributeRequest_SrcIp
	//	*SetNatEntryAttributeRequest_SrcIpMask
	//	*SetNatEntryAttributeRequest_VrId
	//	*SetNatEntryAttributeRequest_DstIp
	//	*SetNatEntryAttributeRequest_DstIpMask
	//	*SetNatEntryAttributeRequest_L4SrcPort
	//	*SetNatEntryAttributeRequest_L4DstPort
	//	*SetNatEntryAttributeRequest_EnablePacketCount
	//	*SetNatEntryAttributeRequest_PacketCount
	//	*SetNatEntryAttributeRequest_EnableByteCount
	//	*SetNatEntryAttributeRequest_ByteCount
	//	*SetNatEntryAttributeRequest_HitBitCor
	//	*SetNatEntryAttributeRequest_HitBit
	Attr isSetNatEntryAttributeRequest_Attr `protobuf_oneof:"attr"`
}

func (x *SetNatEntryAttributeRequest) Reset() {
	*x = SetNatEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNatEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNatEntryAttributeRequest) ProtoMessage() {}

func (x *SetNatEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNatEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetNatEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{4}
}

func (x *SetNatEntryAttributeRequest) GetEntry() *NatEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (m *SetNatEntryAttributeRequest) GetAttr() isSetNatEntryAttributeRequest_Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (x *SetNatEntryAttributeRequest) GetNatType() NatType {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_NatType); ok {
		return x.NatType
	}
	return NatType_NAT_TYPE_UNSPECIFIED
}

func (x *SetNatEntryAttributeRequest) GetSrcIp() []byte {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_SrcIp); ok {
		return x.SrcIp
	}
	return nil
}

func (x *SetNatEntryAttributeRequest) GetSrcIpMask() []byte {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_SrcIpMask); ok {
		return x.SrcIpMask
	}
	return nil
}

func (x *SetNatEntryAttributeRequest) GetVrId() uint64 {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_VrId); ok {
		return x.VrId
	}
	return 0
}

func (x *SetNatEntryAttributeRequest) GetDstIp() []byte {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_DstIp); ok {
		return x.DstIp
	}
	return nil
}

func (x *SetNatEntryAttributeRequest) GetDstIpMask() []byte {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_DstIpMask); ok {
		return x.DstIpMask
	}
	return nil
}

func (x *SetNatEntryAttributeRequest) GetL4SrcPort() uint32 {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_L4SrcPort); ok {
		return x.L4SrcPort
	}
	return 0
}

func (x *SetNatEntryAttributeRequest) GetL4DstPort() uint32 {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_L4DstPort); ok {
		return x.L4DstPort
	}
	return 0
}

func (x *SetNatEntryAttributeRequest) GetEnablePacketCount() bool {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_EnablePacketCount); ok {
		return x.EnablePacketCount
	}
	return false
}

func (x *SetNatEntryAttributeRequest) GetPacketCount() uint64 {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_PacketCount); ok {
		return x.PacketCount
	}
	return 0
}

func (x *SetNatEntryAttributeRequest) GetEnableByteCount() bool {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_EnableByteCount); ok {
		return x.EnableByteCount
	}
	return false
}

func (x *SetNatEntryAttributeRequest) GetByteCount() uint64 {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_ByteCount); ok {
		return x.ByteCount
	}
	return 0
}

func (x *SetNatEntryAttributeRequest) GetHitBitCor() bool {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_HitBitCor); ok {
		return x.HitBitCor
	}
	return false
}

func (x *SetNatEntryAttributeRequest) GetHitBit() bool {
	if x, ok := x.GetAttr().(*SetNatEntryAttributeRequest_HitBit); ok {
		return x.HitBit
	}
	return false
}

type isSetNatEntryAttributeRequest_Attr interface {
	isSetNatEntryAttributeRequest_Attr()
}

type SetNatEntryAttributeRequest_NatType struct {
	NatType NatType `protobuf:"varint,2,opt,name=nat_type,json=natType,proto3,enum=lemming.dataplane.sai.NatType,oneof"`
}

type SetNatEntryAttributeRequest_SrcIp struct {
	SrcIp []byte `protobuf:"bytes,3,opt,name=src_ip,json=srcIp,proto3,oneof"`
}

type SetNatEntryAttributeRequest_SrcIpMask struct {
	SrcIpMask []byte `protobuf:"bytes,4,opt,name=src_ip_mask,json=srcIpMask,proto3,oneof"`
}

type SetNatEntryAttributeRequest_VrId struct {
	VrId uint64 `protobuf:"varint,5,opt,name=vr_id,json=vrId,proto3,oneof"`
}

type SetNatEntryAttributeRequest_DstIp struct {
	DstIp []byte `protobuf:"bytes,6,opt,name=dst_ip,json=dstIp,proto3,oneof"`
}

type SetNatEntryAttributeRequest_DstIpMask struct {
	DstIpMask []byte `protobuf:"bytes,7,opt,name=dst_ip_mask,json=dstIpMask,proto3,oneof"`
}

type SetNatEntryAttributeRequest_L4SrcPort struct {
	L4SrcPort uint32 `protobuf:"varint,8,opt,name=l4_src_port,json=l4SrcPort,proto3,oneof"`
}

type SetNatEntryAttributeRequest_L4DstPort struct {
	L4DstPort uint32 `protobuf:"varint,9,opt,name=l4_dst_port,json=l4DstPort,proto3,oneof"`
}

type SetNatEntryAttributeRequest_EnablePacketCount struct {
	EnablePacketCount bool `protobuf:"varint,10,opt,name=enable_packet_count,json=enablePacketCount,proto3,oneof"`
}

type SetNatEntryAttributeRequest_PacketCount struct {
	PacketCount uint64 `protobuf:"varint,11,opt,name=packet_count,json=packetCount,proto3,oneof"`
}

type SetNatEntryAttributeRequest_EnableByteCount struct {
	EnableByteCount bool `protobuf:"varint,12,opt,name=enable_byte_count,json=enableByteCount,proto3,oneof"`
}

type SetNatEntryAttributeRequest_ByteCount struct {
	ByteCount uint64 `protobuf:"varint,13,opt,name=byte_count,json=byteCount,proto3,oneof"`
}

type SetNatEntryAttributeRequest_HitBitCor struct {
	HitBitCor bool `protobuf:"varint,14,opt,name=hit_bit_cor,json=hitBitCor,proto3,oneof"`
}

type SetNatEntryAttributeRequest_HitBit struct {
	HitBit bool `protobuf:"varint,15,opt,name=hit_bit,json=hitBit,proto3,oneof"`
}

func (*SetNatEntryAttributeRequest_NatType) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_SrcIp) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_SrcIpMask) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_VrId) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_DstIp) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_DstIpMask) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_L4SrcPort) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_L4DstPort) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_EnablePacketCount) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_PacketCount) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_EnableByteCount) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_ByteCount) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_HitBitCor) isSetNatEntryAttributeRequest_Attr() {}

func (*SetNatEntryAttributeRequest_HitBit) isSetNatEntryAttributeRequest_Attr() {}

type SetNatEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNatEntryAttributeResponse) Reset() {
	*x = SetNatEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNatEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNatEntryAttributeResponse) ProtoMessage() {}

func (x *SetNatEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNatEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetNatEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{5}
}

type GetNatEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry    *NatEntry      `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	AttrType []NatEntryAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.NatEntryAttr" json:"attr_type,omitempty"`
}

func (x *GetNatEntryAttributeRequest) Reset() {
	*x = GetNatEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNatEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNatEntryAttributeRequest) ProtoMessage() {}

func (x *GetNatEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNatEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetNatEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{6}
}

func (x *GetNatEntryAttributeRequest) GetEntry() *NatEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *GetNatEntryAttributeRequest) GetAttrType() []NatEntryAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetNatEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr []*NatEntryAttribute `protobuf:"bytes,1,rep,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetNatEntryAttributeResponse) Reset() {
	*x = GetNatEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNatEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNatEntryAttributeResponse) ProtoMessage() {}

func (x *GetNatEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNatEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetNatEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{7}
}

func (x *GetNatEntryAttributeResponse) GetAttr() []*NatEntryAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateNatZoneCounterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                       uint64  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	NatType                      NatType `protobuf:"varint,2,opt,name=nat_type,json=natType,proto3,enum=lemming.dataplane.sai.NatType" json:"nat_type,omitempty"`
	ZoneId                       uint32  `protobuf:"varint,3,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	EnableDiscard                bool    `protobuf:"varint,4,opt,name=enable_discard,json=enableDiscard,proto3" json:"enable_discard,omitempty"`
	DiscardPacketCount           uint64  `protobuf:"varint,5,opt,name=discard_packet_count,json=discardPacketCount,proto3" json:"discard_packet_count,omitempty"`
	EnableTranslationNeeded      bool    `protobuf:"varint,6,opt,name=enable_translation_needed,json=enableTranslationNeeded,proto3" json:"enable_translation_needed,omitempty"`
	TranslationNeededPacketCount uint64  `protobuf:"varint,7,opt,name=translation_needed_packet_count,json=translationNeededPacketCount,proto3" json:"translation_needed_packet_count,omitempty"`
	EnableTranslations           bool    `protobuf:"varint,8,opt,name=enable_translations,json=enableTranslations,proto3" json:"enable_translations,omitempty"`
	TranslationsPacketCount      uint64  `protobuf:"varint,9,opt,name=translations_packet_count,json=translationsPacketCount,proto3" json:"translations_packet_count,omitempty"`
}

func (x *CreateNatZoneCounterRequest) Reset() {
	*x = CreateNatZoneCounterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNatZoneCounterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNatZoneCounterRequest) ProtoMessage() {}

func (x *CreateNatZoneCounterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNatZoneCounterRequest.ProtoReflect.Descriptor instead.
func (*CreateNatZoneCounterRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{8}
}

func (x *CreateNatZoneCounterRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateNatZoneCounterRequest) GetNatType() NatType {
	if x != nil {
		return x.NatType
	}
	return NatType_NAT_TYPE_UNSPECIFIED
}

func (x *CreateNatZoneCounterRequest) GetZoneId() uint32 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

func (x *CreateNatZoneCounterRequest) GetEnableDiscard() bool {
	if x != nil {
		return x.EnableDiscard
	}
	return false
}

func (x *CreateNatZoneCounterRequest) GetDiscardPacketCount() uint64 {
	if x != nil {
		return x.DiscardPacketCount
	}
	return 0
}

func (x *CreateNatZoneCounterRequest) GetEnableTranslationNeeded() bool {
	if x != nil {
		return x.EnableTranslationNeeded
	}
	return false
}

func (x *CreateNatZoneCounterRequest) GetTranslationNeededPacketCount() uint64 {
	if x != nil {
		return x.TranslationNeededPacketCount
	}
	return 0
}

func (x *CreateNatZoneCounterRequest) GetEnableTranslations() bool {
	if x != nil {
		return x.EnableTranslations
	}
	return false
}

func (x *CreateNatZoneCounterRequest) GetTranslationsPacketCount() uint64 {
	if x != nil {
		return x.TranslationsPacketCount
	}
	return 0
}

type CreateNatZoneCounterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateNatZoneCounterResponse) Reset() {
	*x = CreateNatZoneCounterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNatZoneCounterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNatZoneCounterResponse) ProtoMessage() {}

func (x *CreateNatZoneCounterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNatZoneCounterResponse.ProtoReflect.Descriptor instead.
func (*CreateNatZoneCounterResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{9}
}

func (x *CreateNatZoneCounterResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveNatZoneCounterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveNatZoneCounterRequest) Reset() {
	*x = RemoveNatZoneCounterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNatZoneCounterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNatZoneCounterRequest) ProtoMessage() {}

func (x *RemoveNatZoneCounterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNatZoneCounterRequest.ProtoReflect.Descriptor instead.
func (*RemoveNatZoneCounterRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveNatZoneCounterRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveNatZoneCounterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveNatZoneCounterResponse) Reset() {
	*x = RemoveNatZoneCounterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNatZoneCounterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNatZoneCounterResponse) ProtoMessage() {}

func (x *RemoveNatZoneCounterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNatZoneCounterResponse.ProtoReflect.Descriptor instead.
func (*RemoveNatZoneCounterResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{11}
}

type SetNatZoneCounterAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// Types that are assignable to Attr:
	//
	//	*SetNatZoneCounterAttributeRequest_NatType
	//	*SetNatZoneCounterAttributeRequest_ZoneId
	//	*SetNatZoneCounterAttributeRequest_DiscardPacketCount
	//	*SetNatZoneCounterAttributeRequest_TranslationNeededPacketCount
	//	*SetNatZoneCounterAttributeRequest_TranslationsPacketCount
	Attr isSetNatZoneCounterAttributeRequest_Attr `protobuf_oneof:"attr"`
}

func (x *SetNatZoneCounterAttributeRequest) Reset() {
	*x = SetNatZoneCounterAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNatZoneCounterAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNatZoneCounterAttributeRequest) ProtoMessage() {}

func (x *SetNatZoneCounterAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNatZoneCounterAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetNatZoneCounterAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{12}
}

func (x *SetNatZoneCounterAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (m *SetNatZoneCounterAttributeRequest) GetAttr() isSetNatZoneCounterAttributeRequest_Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (x *SetNatZoneCounterAttributeRequest) GetNatType() NatType {
	if x, ok := x.GetAttr().(*SetNatZoneCounterAttributeRequest_NatType); ok {
		return x.NatType
	}
	return NatType_NAT_TYPE_UNSPECIFIED
}

func (x *SetNatZoneCounterAttributeRequest) GetZoneId() uint32 {
	if x, ok := x.GetAttr().(*SetNatZoneCounterAttributeRequest_ZoneId); ok {
		return x.ZoneId
	}
	return 0
}

func (x *SetNatZoneCounterAttributeRequest) GetDiscardPacketCount() uint64 {
	if x, ok := x.GetAttr().(*SetNatZoneCounterAttributeRequest_DiscardPacketCount); ok {
		return x.DiscardPacketCount
	}
	return 0
}

func (x *SetNatZoneCounterAttributeRequest) GetTranslationNeededPacketCount() uint64 {
	if x, ok := x.GetAttr().(*SetNatZoneCounterAttributeRequest_TranslationNeededPacketCount); ok {
		return x.TranslationNeededPacketCount
	}
	return 0
}

func (x *SetNatZoneCounterAttributeRequest) GetTranslationsPacketCount() uint64 {
	if x, ok := x.GetAttr().(*SetNatZoneCounterAttributeRequest_TranslationsPacketCount); ok {
		return x.TranslationsPacketCount
	}
	return 0
}

type isSetNatZoneCounterAttributeRequest_Attr interface {
	isSetNatZoneCounterAttributeRequest_Attr()
}

type SetNatZoneCounterAttributeRequest_NatType struct {
	NatType NatType `protobuf:"varint,2,opt,name=nat_type,json=natType,proto3,enum=lemming.dataplane.sai.NatType,oneof"`
}

type SetNatZoneCounterAttributeRequest_ZoneId struct {
	ZoneId uint32 `protobuf:"varint,3,opt,name=zone_id,json=zoneId,proto3,oneof"`
}

type SetNatZoneCounterAttributeRequest_DiscardPacketCount struct {
	DiscardPacketCount uint64 `protobuf:"varint,4,opt,name=discard_packet_count,json=discardPacketCount,proto3,oneof"`
}

type SetNatZoneCounterAttributeRequest_TranslationNeededPacketCount struct {
	TranslationNeededPacketCount uint64 `protobuf:"varint,5,opt,name=translation_needed_packet_count,json=translationNeededPacketCount,proto3,oneof"`
}

type SetNatZoneCounterAttributeRequest_TranslationsPacketCount struct {
	TranslationsPacketCount uint64 `protobuf:"varint,6,opt,name=translations_packet_count,json=translationsPacketCount,proto3,oneof"`
}

func (*SetNatZoneCounterAttributeRequest_NatType) isSetNatZoneCounterAttributeRequest_Attr() {}

func (*SetNatZoneCounterAttributeRequest_ZoneId) isSetNatZoneCounterAttributeRequest_Attr() {}

func (*SetNatZoneCounterAttributeRequest_DiscardPacketCount) isSetNatZoneCounterAttributeRequest_Attr() {
}

func (*SetNatZoneCounterAttributeRequest_TranslationNeededPacketCount) isSetNatZoneCounterAttributeRequest_Attr() {
}

func (*SetNatZoneCounterAttributeRequest_TranslationsPacketCount) isSetNatZoneCounterAttributeRequest_Attr() {
}

type SetNatZoneCounterAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNatZoneCounterAttributeResponse) Reset() {
	*x = SetNatZoneCounterAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNatZoneCounterAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNatZoneCounterAttributeResponse) ProtoMessage() {}

func (x *SetNatZoneCounterAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNatZoneCounterAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetNatZoneCounterAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{13}
}

type GetNatZoneCounterAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64               `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []NatZoneCounterAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.NatZoneCounterAttr" json:"attr_type,omitempty"`
}

func (x *GetNatZoneCounterAttributeRequest) Reset() {
	*x = GetNatZoneCounterAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNatZoneCounterAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNatZoneCounterAttributeRequest) ProtoMessage() {}

func (x *GetNatZoneCounterAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNatZoneCounterAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetNatZoneCounterAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{14}
}

func (x *GetNatZoneCounterAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetNatZoneCounterAttributeRequest) GetAttrType() []NatZoneCounterAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetNatZoneCounterAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr []*NatZoneCounterAttribute `protobuf:"bytes,1,rep,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetNatZoneCounterAttributeResponse) Reset() {
	*x = GetNatZoneCounterAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNatZoneCounterAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNatZoneCounterAttributeResponse) ProtoMessage() {}

func (x *GetNatZoneCounterAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_nat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNatZoneCounterAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetNatZoneCounterAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_nat_proto_rawDescGZIP(), []int{15}
}

func (x *GetNatZoneCounterAttributeResponse) GetAttr() []*NatZoneCounterAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_standalone_proto_nat_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_nat_proto_rawDesc = []byte{
	0x0a, 0x24, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x61, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x27, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c,
	0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x04, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x4e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x72, 0x63,
	0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x73, 0x72, 0x63, 0x49, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x72, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x73, 0x74, 0x49,
	0x70, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x34, 0x53, 0x72,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x34, 0x44, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x68, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x69, 0x74, 0x42, 0x69, 0x74,
	0x43, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x74, 0x42, 0x69, 0x74, 0x22, 0x18, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xcd, 0x04, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x4e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x73, 0x72, 0x63, 0x49, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x15, 0x0a, 0x05, 0x76, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x04, 0x76, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x64, 0x73, 0x74, 0x49, 0x70, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x34, 0x53, 0x72, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x34, 0x44, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x68,
	0x69, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x09, 0x68, 0x69, 0x74, 0x42, 0x69, 0x74, 0x43, 0x6f, 0x72, 0x12, 0x19, 0x0a,
	0x07, 0x68, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x06, 0x68, 0x69, 0x74, 0x42, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72,
	0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x96, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x61, 0x74, 0x74,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xd2, 0x03, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x39, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x6e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2f,
	0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd0, 0x02, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x4e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x32, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x1c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x74,
	0x74, 0x72, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4e,
	0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x46, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x5a, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4e, 0x61,
	0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74,
	0x72, 0x2a, 0xe5, 0x03, 0x0a, 0x0c, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x41,
	0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x52, 0x43,
	0x5f, 0x49, 0x50, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x41,
	0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x52, 0x5f,
	0x49, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x05, 0x12,
	0x1e, 0x0a, 0x1a, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x06, 0x12,
	0x1e, 0x0a, 0x1a, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4c, 0x34, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x07, 0x12,
	0x1e, 0x0a, 0x1a, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4c, 0x34, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x08, 0x12,
	0x26, 0x0a, 0x22, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x41, 0x54, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x41, 0x54, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0b, 0x12, 0x1d,
	0x0a, 0x19, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x1e, 0x0a,
	0x1a, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x48, 0x49, 0x54, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x1a, 0x0a,
	0x16, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x48, 0x49, 0x54, 0x5f, 0x42, 0x49, 0x54, 0x10, 0x0e, 0x2a, 0xb0, 0x03, 0x0a, 0x12, 0x4e, 0x61,
	0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x25, 0x0a, 0x21, 0x4e, 0x41, 0x54, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x41, 0x54, 0x5f, 0x5a,
	0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x4e, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4e,
	0x41, 0x54, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x28,
	0x0a, 0x24, 0x4e, 0x41, 0x54, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x41, 0x54, 0x5f,
	0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x41, 0x54, 0x5f,
	0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x39, 0x0a,
	0x35, 0x4e, 0x41, 0x54, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x41, 0x54, 0x5f,
	0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x07, 0x12, 0x33, 0x0a, 0x2f, 0x4e, 0x41, 0x54, 0x5f, 0x5a,
	0x4f, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x08, 0x32, 0xa3, 0x08, 0x0a,
	0x03, 0x4e, 0x61, 0x74, 0x12, 0x6f, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e,
	0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4e, 0x61,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4e,
	0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81,
	0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x74,
	0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x61,
	0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4e, 0x61,
	0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65,
	0x74, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x5a, 0x6f,
	0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_nat_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_nat_proto_rawDescData = file_dataplane_standalone_proto_nat_proto_rawDesc
)

func file_dataplane_standalone_proto_nat_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_nat_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_nat_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_nat_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_nat_proto_rawDescData
}

var file_dataplane_standalone_proto_nat_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dataplane_standalone_proto_nat_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_dataplane_standalone_proto_nat_proto_goTypes = []interface{}{
	(NatEntryAttr)(0),                          // 0: lemming.dataplane.sai.NatEntryAttr
	(NatZoneCounterAttr)(0),                    // 1: lemming.dataplane.sai.NatZoneCounterAttr
	(*CreateNatEntryRequest)(nil),              // 2: lemming.dataplane.sai.CreateNatEntryRequest
	(*CreateNatEntryResponse)(nil),             // 3: lemming.dataplane.sai.CreateNatEntryResponse
	(*RemoveNatEntryRequest)(nil),              // 4: lemming.dataplane.sai.RemoveNatEntryRequest
	(*RemoveNatEntryResponse)(nil),             // 5: lemming.dataplane.sai.RemoveNatEntryResponse
	(*SetNatEntryAttributeRequest)(nil),        // 6: lemming.dataplane.sai.SetNatEntryAttributeRequest
	(*SetNatEntryAttributeResponse)(nil),       // 7: lemming.dataplane.sai.SetNatEntryAttributeResponse
	(*GetNatEntryAttributeRequest)(nil),        // 8: lemming.dataplane.sai.GetNatEntryAttributeRequest
	(*GetNatEntryAttributeResponse)(nil),       // 9: lemming.dataplane.sai.GetNatEntryAttributeResponse
	(*CreateNatZoneCounterRequest)(nil),        // 10: lemming.dataplane.sai.CreateNatZoneCounterRequest
	(*CreateNatZoneCounterResponse)(nil),       // 11: lemming.dataplane.sai.CreateNatZoneCounterResponse
	(*RemoveNatZoneCounterRequest)(nil),        // 12: lemming.dataplane.sai.RemoveNatZoneCounterRequest
	(*RemoveNatZoneCounterResponse)(nil),       // 13: lemming.dataplane.sai.RemoveNatZoneCounterResponse
	(*SetNatZoneCounterAttributeRequest)(nil),  // 14: lemming.dataplane.sai.SetNatZoneCounterAttributeRequest
	(*SetNatZoneCounterAttributeResponse)(nil), // 15: lemming.dataplane.sai.SetNatZoneCounterAttributeResponse
	(*GetNatZoneCounterAttributeRequest)(nil),  // 16: lemming.dataplane.sai.GetNatZoneCounterAttributeRequest
	(*GetNatZoneCounterAttributeResponse)(nil), // 17: lemming.dataplane.sai.GetNatZoneCounterAttributeResponse
	(*NatEntry)(nil),                           // 18: lemming.dataplane.sai.NatEntry
	(NatType)(0),                               // 19: lemming.dataplane.sai.NatType
	(*NatEntryAttribute)(nil),                  // 20: lemming.dataplane.sai.NatEntryAttribute
	(*NatZoneCounterAttribute)(nil),            // 21: lemming.dataplane.sai.NatZoneCounterAttribute
}
var file_dataplane_standalone_proto_nat_proto_depIdxs = []int32{
	18, // 0: lemming.dataplane.sai.CreateNatEntryRequest.entry:type_name -> lemming.dataplane.sai.NatEntry
	19, // 1: lemming.dataplane.sai.CreateNatEntryRequest.nat_type:type_name -> lemming.dataplane.sai.NatType
	18, // 2: lemming.dataplane.sai.RemoveNatEntryRequest.entry:type_name -> lemming.dataplane.sai.NatEntry
	18, // 3: lemming.dataplane.sai.SetNatEntryAttributeRequest.entry:type_name -> lemming.dataplane.sai.NatEntry
	19, // 4: lemming.dataplane.sai.SetNatEntryAttributeRequest.nat_type:type_name -> lemming.dataplane.sai.NatType
	18, // 5: lemming.dataplane.sai.GetNatEntryAttributeRequest.entry:type_name -> lemming.dataplane.sai.NatEntry
	0,  // 6: lemming.dataplane.sai.GetNatEntryAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.NatEntryAttr
	20, // 7: lemming.dataplane.sai.GetNatEntryAttributeResponse.attr:type_name -> lemming.dataplane.sai.NatEntryAttribute
	19, // 8: lemming.dataplane.sai.CreateNatZoneCounterRequest.nat_type:type_name -> lemming.dataplane.sai.NatType
	19, // 9: lemming.dataplane.sai.SetNatZoneCounterAttributeRequest.nat_type:type_name -> lemming.dataplane.sai.NatType
	1,  // 10: lemming.dataplane.sai.GetNatZoneCounterAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.NatZoneCounterAttr
	21, // 11: lemming.dataplane.sai.GetNatZoneCounterAttributeResponse.attr:type_name -> lemming.dataplane.sai.NatZoneCounterAttribute
	2,  // 12: lemming.dataplane.sai.Nat.CreateNatEntry:input_type -> lemming.dataplane.sai.CreateNatEntryRequest
	4,  // 13: lemming.dataplane.sai.Nat.RemoveNatEntry:input_type -> lemming.dataplane.sai.RemoveNatEntryRequest
	6,  // 14: lemming.dataplane.sai.Nat.SetNatEntryAttribute:input_type -> lemming.dataplane.sai.SetNatEntryAttributeRequest
	8,  // 15: lemming.dataplane.sai.Nat.GetNatEntryAttribute:input_type -> lemming.dataplane.sai.GetNatEntryAttributeRequest
	10, // 16: lemming.dataplane.sai.Nat.CreateNatZoneCounter:input_type -> lemming.dataplane.sai.CreateNatZoneCounterRequest
	12, // 17: lemming.dataplane.sai.Nat.RemoveNatZoneCounter:input_type -> lemming.dataplane.sai.RemoveNatZoneCounterRequest
	14, // 18: lemming.dataplane.sai.Nat.SetNatZoneCounterAttribute:input_type -> lemming.dataplane.sai.SetNatZoneCounterAttributeRequest
	16, // 19: lemming.dataplane.sai.Nat.GetNatZoneCounterAttribute:input_type -> lemming.dataplane.sai.GetNatZoneCounterAttributeRequest
	3,  // 20: lemming.dataplane.sai.Nat.CreateNatEntry:output_type -> lemming.dataplane.sai.CreateNatEntryResponse
	5,  // 21: lemming.dataplane.sai.Nat.RemoveNatEntry:output_type -> lemming.dataplane.sai.RemoveNatEntryResponse
	7,  // 22: lemming.dataplane.sai.Nat.SetNatEntryAttribute:output_type -> lemming.dataplane.sai.SetNatEntryAttributeResponse
	9,  // 23: lemming.dataplane.sai.Nat.GetNatEntryAttribute:output_type -> lemming.dataplane.sai.GetNatEntryAttributeResponse
	11, // 24: lemming.dataplane.sai.Nat.CreateNatZoneCounter:output_type -> lemming.dataplane.sai.CreateNatZoneCounterResponse
	13, // 25: lemming.dataplane.sai.Nat.RemoveNatZoneCounter:output_type -> lemming.dataplane.sai.RemoveNatZoneCounterResponse
	15, // 26: lemming.dataplane.sai.Nat.SetNatZoneCounterAttribute:output_type -> lemming.dataplane.sai.SetNatZoneCounterAttributeResponse
	17, // 27: lemming.dataplane.sai.Nat.GetNatZoneCounterAttribute:output_type -> lemming.dataplane.sai.GetNatZoneCounterAttributeResponse
	20, // [20:28] is the sub-list for method output_type
	12, // [12:20] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_nat_proto_init() }
func file_dataplane_standalone_proto_nat_proto_init() {
	if File_dataplane_standalone_proto_nat_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_nat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNatEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNatEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNatEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNatEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNatEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNatEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNatEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNatEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNatZoneCounterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNatZoneCounterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNatZoneCounterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNatZoneCounterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNatZoneCounterAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNatZoneCounterAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNatZoneCounterAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_nat_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNatZoneCounterAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_nat_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SetNatEntryAttributeRequest_NatType)(nil),
		(*SetNatEntryAttributeRequest_SrcIp)(nil),
		(*SetNatEntryAttributeRequest_SrcIpMask)(nil),
		(*SetNatEntryAttributeRequest_VrId)(nil),
		(*SetNatEntryAttributeRequest_DstIp)(nil),
		(*SetNatEntryAttributeRequest_DstIpMask)(nil),
		(*SetNatEntryAttributeRequest_L4SrcPort)(nil),
		(*SetNatEntryAttributeRequest_L4DstPort)(nil),
		(*SetNatEntryAttributeRequest_EnablePacketCount)(nil),
		(*SetNatEntryAttributeRequest_PacketCount)(nil),
		(*SetNatEntryAttributeRequest_EnableByteCount)(nil),
		(*SetNatEntryAttributeRequest_ByteCount)(nil),
		(*SetNatEntryAttributeRequest_HitBitCor)(nil),
		(*SetNatEntryAttributeRequest_HitBit)(nil),
	}
	file_dataplane_standalone_proto_nat_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SetNatZoneCounterAttributeRequest_NatType)(nil),
		(*SetNatZoneCounterAttributeRequest_ZoneId)(nil),
		(*SetNatZoneCounterAttributeRequest_DiscardPacketCount)(nil),
		(*SetNatZoneCounterAttributeRequest_TranslationNeededPacketCount)(nil),
		(*SetNatZoneCounterAttributeRequest_TranslationsPacketCount)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_nat_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_nat_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_nat_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_nat_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_nat_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_nat_proto = out.File
	file_dataplane_standalone_proto_nat_proto_rawDesc = nil
	file_dataplane_standalone_proto_nat_proto_goTypes = nil
	file_dataplane_standalone_proto_nat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NatClient is the client API for Nat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NatClient interface {
	CreateNatEntry(ctx context.Context, in *CreateNatEntryRequest, opts ...grpc.CallOption) (*CreateNatEntryResponse, error)
	RemoveNatEntry(ctx context.Context, in *RemoveNatEntryRequest, opts ...grpc.CallOption) (*RemoveNatEntryResponse, error)
	SetNatEntryAttribute(ctx context.Context, in *SetNatEntryAttributeRequest, opts ...grpc.CallOption) (*SetNatEntryAttributeResponse, error)
	GetNatEntryAttribute(ctx context.Context, in *GetNatEntryAttributeRequest, opts ...grpc.CallOption) (*GetNatEntryAttributeResponse, error)
	CreateNatZoneCounter(ctx context.Context, in *CreateNatZoneCounterRequest, opts ...grpc.CallOption) (*CreateNatZoneCounterResponse, error)
	RemoveNatZoneCounter(ctx context.Context, in *RemoveNatZoneCounterRequest, opts ...grpc.CallOption) (*RemoveNatZoneCounterResponse, error)
	SetNatZoneCounterAttribute(ctx context.Context, in *SetNatZoneCounterAttributeRequest, opts ...grpc.CallOption) (*SetNatZoneCounterAttributeResponse, error)
	GetNatZoneCounterAttribute(ctx context.Context, in *GetNatZoneCounterAttributeRequest, opts ...grpc.CallOption) (*GetNatZoneCounterAttributeResponse, error)
}

type natClient struct {
	cc grpc.ClientConnInterface
}

func NewNatClient(cc grpc.ClientConnInterface) NatClient {
	return &natClient{cc}
}

func (c *natClient) CreateNatEntry(ctx context.Context, in *CreateNatEntryRequest, opts ...grpc.CallOption) (*CreateNatEntryResponse, error) {
	out := new(CreateNatEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Nat/CreateNatEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) RemoveNatEntry(ctx context.Context, in *RemoveNatEntryRequest, opts ...grpc.CallOption) (*RemoveNatEntryResponse, error) {
	out := new(RemoveNatEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Nat/RemoveNatEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) SetNatEntryAttribute(ctx context.Context, in *SetNatEntryAttributeRequest, opts ...grpc.CallOption) (*SetNatEntryAttributeResponse, error) {
	out := new(SetNatEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Nat/SetNatEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) GetNatEntryAttribute(ctx context.Context, in *GetNatEntryAttributeRequest, opts ...grpc.CallOption) (*GetNatEntryAttributeResponse, error) {
	out := new(GetNatEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Nat/GetNatEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) CreateNatZoneCounter(ctx context.Context, in *CreateNatZoneCounterRequest, opts ...grpc.CallOption) (*CreateNatZoneCounterResponse, error) {
	out := new(CreateNatZoneCounterResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Nat/CreateNatZoneCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) RemoveNatZoneCounter(ctx context.Context, in *RemoveNatZoneCounterRequest, opts ...grpc.CallOption) (*RemoveNatZoneCounterResponse, error) {
	out := new(RemoveNatZoneCounterResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Nat/RemoveNatZoneCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) SetNatZoneCounterAttribute(ctx context.Context, in *SetNatZoneCounterAttributeRequest, opts ...grpc.CallOption) (*SetNatZoneCounterAttributeResponse, error) {
	out := new(SetNatZoneCounterAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Nat/SetNatZoneCounterAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) GetNatZoneCounterAttribute(ctx context.Context, in *GetNatZoneCounterAttributeRequest, opts ...grpc.CallOption) (*GetNatZoneCounterAttributeResponse, error) {
	out := new(GetNatZoneCounterAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Nat/GetNatZoneCounterAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NatServer is the server API for Nat service.
type NatServer interface {
	CreateNatEntry(context.Context, *CreateNatEntryRequest) (*CreateNatEntryResponse, error)
	RemoveNatEntry(context.Context, *RemoveNatEntryRequest) (*RemoveNatEntryResponse, error)
	SetNatEntryAttribute(context.Context, *SetNatEntryAttributeRequest) (*SetNatEntryAttributeResponse, error)
	GetNatEntryAttribute(context.Context, *GetNatEntryAttributeRequest) (*GetNatEntryAttributeResponse, error)
	CreateNatZoneCounter(context.Context, *CreateNatZoneCounterRequest) (*CreateNatZoneCounterResponse, error)
	RemoveNatZoneCounter(context.Context, *RemoveNatZoneCounterRequest) (*RemoveNatZoneCounterResponse, error)
	SetNatZoneCounterAttribute(context.Context, *SetNatZoneCounterAttributeRequest) (*SetNatZoneCounterAttributeResponse, error)
	GetNatZoneCounterAttribute(context.Context, *GetNatZoneCounterAttributeRequest) (*GetNatZoneCounterAttributeResponse, error)
}

// UnimplementedNatServer can be embedded to have forward compatible implementations.
type UnimplementedNatServer struct {
}

func (*UnimplementedNatServer) CreateNatEntry(context.Context, *CreateNatEntryRequest) (*CreateNatEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNatEntry not implemented")
}
func (*UnimplementedNatServer) RemoveNatEntry(context.Context, *RemoveNatEntryRequest) (*RemoveNatEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNatEntry not implemented")
}
func (*UnimplementedNatServer) SetNatEntryAttribute(context.Context, *SetNatEntryAttributeRequest) (*SetNatEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNatEntryAttribute not implemented")
}
func (*UnimplementedNatServer) GetNatEntryAttribute(context.Context, *GetNatEntryAttributeRequest) (*GetNatEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNatEntryAttribute not implemented")
}
func (*UnimplementedNatServer) CreateNatZoneCounter(context.Context, *CreateNatZoneCounterRequest) (*CreateNatZoneCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNatZoneCounter not implemented")
}
func (*UnimplementedNatServer) RemoveNatZoneCounter(context.Context, *RemoveNatZoneCounterRequest) (*RemoveNatZoneCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNatZoneCounter not implemented")
}
func (*UnimplementedNatServer) SetNatZoneCounterAttribute(context.Context, *SetNatZoneCounterAttributeRequest) (*SetNatZoneCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNatZoneCounterAttribute not implemented")
}
func (*UnimplementedNatServer) GetNatZoneCounterAttribute(context.Context, *GetNatZoneCounterAttributeRequest) (*GetNatZoneCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNatZoneCounterAttribute not implemented")
}

func RegisterNatServer(s *grpc.Server, srv NatServer) {
	s.RegisterService(&_Nat_serviceDesc, srv)
}

func _Nat_CreateNatEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNatEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).CreateNatEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Nat/CreateNatEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).CreateNatEntry(ctx, req.(*CreateNatEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_RemoveNatEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNatEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).RemoveNatEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Nat/RemoveNatEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).RemoveNatEntry(ctx, req.(*RemoveNatEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_SetNatEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNatEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).SetNatEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Nat/SetNatEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).SetNatEntryAttribute(ctx, req.(*SetNatEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_GetNatEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNatEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).GetNatEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Nat/GetNatEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).GetNatEntryAttribute(ctx, req.(*GetNatEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_CreateNatZoneCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNatZoneCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).CreateNatZoneCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Nat/CreateNatZoneCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).CreateNatZoneCounter(ctx, req.(*CreateNatZoneCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_RemoveNatZoneCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNatZoneCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).RemoveNatZoneCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Nat/RemoveNatZoneCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).RemoveNatZoneCounter(ctx, req.(*RemoveNatZoneCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_SetNatZoneCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNatZoneCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).SetNatZoneCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Nat/SetNatZoneCounterAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).SetNatZoneCounterAttribute(ctx, req.(*SetNatZoneCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_GetNatZoneCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNatZoneCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).GetNatZoneCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Nat/GetNatZoneCounterAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).GetNatZoneCounterAttribute(ctx, req.(*GetNatZoneCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Nat",
	HandlerType: (*NatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNatEntry",
			Handler:    _Nat_CreateNatEntry_Handler,
		},
		{
			MethodName: "RemoveNatEntry",
			Handler:    _Nat_RemoveNatEntry_Handler,
		},
		{
			MethodName: "SetNatEntryAttribute",
			Handler:    _Nat_SetNatEntryAttribute_Handler,
		},
		{
			MethodName: "GetNatEntryAttribute",
			Handler:    _Nat_GetNatEntryAttribute_Handler,
		},
		{
			MethodName: "CreateNatZoneCounter",
			Handler:    _Nat_CreateNatZoneCounter_Handler,
		},
		{
			MethodName: "RemoveNatZoneCounter",
			Handler:    _Nat_RemoveNatZoneCounter_Handler,
		},
		{
			MethodName: "SetNatZoneCounterAttribute",
			Handler:    _Nat_SetNatZoneCounterAttribute_Handler,
		},
		{
			MethodName: "GetNatZoneCounterAttribute",
			Handler:    _Nat_GetNatZoneCounterAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/nat.proto",
}
