// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/mirror.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MirrorSessionAttr int32

const (
	MirrorSessionAttr_MIRROR_SESSION_ATTR_UNSPECIFIED               MirrorSessionAttr = 0
	MirrorSessionAttr_MIRROR_SESSION_ATTR_TYPE                      MirrorSessionAttr = 1
	MirrorSessionAttr_MIRROR_SESSION_ATTR_MONITOR_PORT              MirrorSessionAttr = 2
	MirrorSessionAttr_MIRROR_SESSION_ATTR_TRUNCATE_SIZE             MirrorSessionAttr = 3
	MirrorSessionAttr_MIRROR_SESSION_ATTR_SAMPLE_RATE               MirrorSessionAttr = 4
	MirrorSessionAttr_MIRROR_SESSION_ATTR_CONGESTION_MODE           MirrorSessionAttr = 5
	MirrorSessionAttr_MIRROR_SESSION_ATTR_TC                        MirrorSessionAttr = 6
	MirrorSessionAttr_MIRROR_SESSION_ATTR_VLAN_TPID                 MirrorSessionAttr = 7
	MirrorSessionAttr_MIRROR_SESSION_ATTR_VLAN_ID                   MirrorSessionAttr = 8
	MirrorSessionAttr_MIRROR_SESSION_ATTR_VLAN_PRI                  MirrorSessionAttr = 9
	MirrorSessionAttr_MIRROR_SESSION_ATTR_VLAN_CFI                  MirrorSessionAttr = 10
	MirrorSessionAttr_MIRROR_SESSION_ATTR_VLAN_HEADER_VALID         MirrorSessionAttr = 11
	MirrorSessionAttr_MIRROR_SESSION_ATTR_ERSPAN_ENCAPSULATION_TYPE MirrorSessionAttr = 12
	MirrorSessionAttr_MIRROR_SESSION_ATTR_IPHDR_VERSION             MirrorSessionAttr = 13
	MirrorSessionAttr_MIRROR_SESSION_ATTR_TOS                       MirrorSessionAttr = 14
	MirrorSessionAttr_MIRROR_SESSION_ATTR_TTL                       MirrorSessionAttr = 15
	MirrorSessionAttr_MIRROR_SESSION_ATTR_SRC_IP_ADDRESS            MirrorSessionAttr = 16
	MirrorSessionAttr_MIRROR_SESSION_ATTR_DST_IP_ADDRESS            MirrorSessionAttr = 17
	MirrorSessionAttr_MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS           MirrorSessionAttr = 18
	MirrorSessionAttr_MIRROR_SESSION_ATTR_DST_MAC_ADDRESS           MirrorSessionAttr = 19
	MirrorSessionAttr_MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE         MirrorSessionAttr = 20
	MirrorSessionAttr_MIRROR_SESSION_ATTR_MONITOR_PORTLIST_VALID    MirrorSessionAttr = 21
	MirrorSessionAttr_MIRROR_SESSION_ATTR_MONITOR_PORTLIST          MirrorSessionAttr = 22
	MirrorSessionAttr_MIRROR_SESSION_ATTR_POLICER                   MirrorSessionAttr = 23
	MirrorSessionAttr_MIRROR_SESSION_ATTR_UDP_SRC_PORT              MirrorSessionAttr = 24
	MirrorSessionAttr_MIRROR_SESSION_ATTR_UDP_DST_PORT              MirrorSessionAttr = 25
)

// Enum value maps for MirrorSessionAttr.
var (
	MirrorSessionAttr_name = map[int32]string{
		0:  "MIRROR_SESSION_ATTR_UNSPECIFIED",
		1:  "MIRROR_SESSION_ATTR_TYPE",
		2:  "MIRROR_SESSION_ATTR_MONITOR_PORT",
		3:  "MIRROR_SESSION_ATTR_TRUNCATE_SIZE",
		4:  "MIRROR_SESSION_ATTR_SAMPLE_RATE",
		5:  "MIRROR_SESSION_ATTR_CONGESTION_MODE",
		6:  "MIRROR_SESSION_ATTR_TC",
		7:  "MIRROR_SESSION_ATTR_VLAN_TPID",
		8:  "MIRROR_SESSION_ATTR_VLAN_ID",
		9:  "MIRROR_SESSION_ATTR_VLAN_PRI",
		10: "MIRROR_SESSION_ATTR_VLAN_CFI",
		11: "MIRROR_SESSION_ATTR_VLAN_HEADER_VALID",
		12: "MIRROR_SESSION_ATTR_ERSPAN_ENCAPSULATION_TYPE",
		13: "MIRROR_SESSION_ATTR_IPHDR_VERSION",
		14: "MIRROR_SESSION_ATTR_TOS",
		15: "MIRROR_SESSION_ATTR_TTL",
		16: "MIRROR_SESSION_ATTR_SRC_IP_ADDRESS",
		17: "MIRROR_SESSION_ATTR_DST_IP_ADDRESS",
		18: "MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS",
		19: "MIRROR_SESSION_ATTR_DST_MAC_ADDRESS",
		20: "MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE",
		21: "MIRROR_SESSION_ATTR_MONITOR_PORTLIST_VALID",
		22: "MIRROR_SESSION_ATTR_MONITOR_PORTLIST",
		23: "MIRROR_SESSION_ATTR_POLICER",
		24: "MIRROR_SESSION_ATTR_UDP_SRC_PORT",
		25: "MIRROR_SESSION_ATTR_UDP_DST_PORT",
	}
	MirrorSessionAttr_value = map[string]int32{
		"MIRROR_SESSION_ATTR_UNSPECIFIED":               0,
		"MIRROR_SESSION_ATTR_TYPE":                      1,
		"MIRROR_SESSION_ATTR_MONITOR_PORT":              2,
		"MIRROR_SESSION_ATTR_TRUNCATE_SIZE":             3,
		"MIRROR_SESSION_ATTR_SAMPLE_RATE":               4,
		"MIRROR_SESSION_ATTR_CONGESTION_MODE":           5,
		"MIRROR_SESSION_ATTR_TC":                        6,
		"MIRROR_SESSION_ATTR_VLAN_TPID":                 7,
		"MIRROR_SESSION_ATTR_VLAN_ID":                   8,
		"MIRROR_SESSION_ATTR_VLAN_PRI":                  9,
		"MIRROR_SESSION_ATTR_VLAN_CFI":                  10,
		"MIRROR_SESSION_ATTR_VLAN_HEADER_VALID":         11,
		"MIRROR_SESSION_ATTR_ERSPAN_ENCAPSULATION_TYPE": 12,
		"MIRROR_SESSION_ATTR_IPHDR_VERSION":             13,
		"MIRROR_SESSION_ATTR_TOS":                       14,
		"MIRROR_SESSION_ATTR_TTL":                       15,
		"MIRROR_SESSION_ATTR_SRC_IP_ADDRESS":            16,
		"MIRROR_SESSION_ATTR_DST_IP_ADDRESS":            17,
		"MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS":           18,
		"MIRROR_SESSION_ATTR_DST_MAC_ADDRESS":           19,
		"MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE":         20,
		"MIRROR_SESSION_ATTR_MONITOR_PORTLIST_VALID":    21,
		"MIRROR_SESSION_ATTR_MONITOR_PORTLIST":          22,
		"MIRROR_SESSION_ATTR_POLICER":                   23,
		"MIRROR_SESSION_ATTR_UDP_SRC_PORT":              24,
		"MIRROR_SESSION_ATTR_UDP_DST_PORT":              25,
	}
)

func (x MirrorSessionAttr) Enum() *MirrorSessionAttr {
	p := new(MirrorSessionAttr)
	*p = x
	return p
}

func (x MirrorSessionAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MirrorSessionAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_mirror_proto_enumTypes[0].Descriptor()
}

func (MirrorSessionAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_mirror_proto_enumTypes[0]
}

func (x MirrorSessionAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MirrorSessionAttr.Descriptor instead.
func (MirrorSessionAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_mirror_proto_rawDescGZIP(), []int{0}
}

type CreateMirrorSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                  uint64                       `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type                    *MirrorSessionType           `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.MirrorSessionType,oneof" json:"type,omitempty"`
	MonitorPort             *uint64                      `protobuf:"varint,3,opt,name=monitor_port,json=monitorPort,proto3,oneof" json:"monitor_port,omitempty"`
	TruncateSize            *uint32                      `protobuf:"varint,4,opt,name=truncate_size,json=truncateSize,proto3,oneof" json:"truncate_size,omitempty"`
	SampleRate              *uint32                      `protobuf:"varint,5,opt,name=sample_rate,json=sampleRate,proto3,oneof" json:"sample_rate,omitempty"`
	CongestionMode          *MirrorSessionCongestionMode `protobuf:"varint,6,opt,name=congestion_mode,json=congestionMode,proto3,enum=lemming.dataplane.sai.MirrorSessionCongestionMode,oneof" json:"congestion_mode,omitempty"`
	Tc                      *uint32                      `protobuf:"varint,7,opt,name=tc,proto3,oneof" json:"tc,omitempty"`
	VlanTpid                *uint32                      `protobuf:"varint,8,opt,name=vlan_tpid,json=vlanTpid,proto3,oneof" json:"vlan_tpid,omitempty"`
	VlanId                  *uint32                      `protobuf:"varint,9,opt,name=vlan_id,json=vlanId,proto3,oneof" json:"vlan_id,omitempty"`
	VlanPri                 *uint32                      `protobuf:"varint,10,opt,name=vlan_pri,json=vlanPri,proto3,oneof" json:"vlan_pri,omitempty"`
	VlanCfi                 *uint32                      `protobuf:"varint,11,opt,name=vlan_cfi,json=vlanCfi,proto3,oneof" json:"vlan_cfi,omitempty"`
	VlanHeaderValid         *bool                        `protobuf:"varint,12,opt,name=vlan_header_valid,json=vlanHeaderValid,proto3,oneof" json:"vlan_header_valid,omitempty"`
	ErspanEncapsulationType *ErspanEncapsulationType     `protobuf:"varint,13,opt,name=erspan_encapsulation_type,json=erspanEncapsulationType,proto3,enum=lemming.dataplane.sai.ErspanEncapsulationType,oneof" json:"erspan_encapsulation_type,omitempty"`
	IphdrVersion            *uint32                      `protobuf:"varint,14,opt,name=iphdr_version,json=iphdrVersion,proto3,oneof" json:"iphdr_version,omitempty"`
	Tos                     *uint32                      `protobuf:"varint,15,opt,name=tos,proto3,oneof" json:"tos,omitempty"`
	Ttl                     *uint32                      `protobuf:"varint,16,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
	SrcIpAddress            []byte                       `protobuf:"bytes,17,opt,name=src_ip_address,json=srcIpAddress,proto3,oneof" json:"src_ip_address,omitempty"`
	DstIpAddress            []byte                       `protobuf:"bytes,18,opt,name=dst_ip_address,json=dstIpAddress,proto3,oneof" json:"dst_ip_address,omitempty"`
	SrcMacAddress           []byte                       `protobuf:"bytes,19,opt,name=src_mac_address,json=srcMacAddress,proto3,oneof" json:"src_mac_address,omitempty"`
	DstMacAddress           []byte                       `protobuf:"bytes,20,opt,name=dst_mac_address,json=dstMacAddress,proto3,oneof" json:"dst_mac_address,omitempty"`
	GreProtocolType         *uint32                      `protobuf:"varint,21,opt,name=gre_protocol_type,json=greProtocolType,proto3,oneof" json:"gre_protocol_type,omitempty"`
	MonitorPortlistValid    *bool                        `protobuf:"varint,22,opt,name=monitor_portlist_valid,json=monitorPortlistValid,proto3,oneof" json:"monitor_portlist_valid,omitempty"`
	MonitorPortlist         []uint64                     `protobuf:"varint,23,rep,packed,name=monitor_portlist,json=monitorPortlist,proto3" json:"monitor_portlist,omitempty"`
	Policer                 *uint64                      `protobuf:"varint,24,opt,name=policer,proto3,oneof" json:"policer,omitempty"`
	UdpSrcPort              *uint32                      `protobuf:"varint,25,opt,name=udp_src_port,json=udpSrcPort,proto3,oneof" json:"udp_src_port,omitempty"`
	UdpDstPort              *uint32                      `protobuf:"varint,26,opt,name=udp_dst_port,json=udpDstPort,proto3,oneof" json:"udp_dst_port,omitempty"`
}

func (x *CreateMirrorSessionRequest) Reset() {
	*x = CreateMirrorSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMirrorSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMirrorSessionRequest) ProtoMessage() {}

func (x *CreateMirrorSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMirrorSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateMirrorSessionRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_mirror_proto_rawDescGZIP(), []int{0}
}

func (x *CreateMirrorSessionRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetType() MirrorSessionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MirrorSessionType_MIRROR_SESSION_TYPE_UNSPECIFIED
}

func (x *CreateMirrorSessionRequest) GetMonitorPort() uint64 {
	if x != nil && x.MonitorPort != nil {
		return *x.MonitorPort
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetTruncateSize() uint32 {
	if x != nil && x.TruncateSize != nil {
		return *x.TruncateSize
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetSampleRate() uint32 {
	if x != nil && x.SampleRate != nil {
		return *x.SampleRate
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetCongestionMode() MirrorSessionCongestionMode {
	if x != nil && x.CongestionMode != nil {
		return *x.CongestionMode
	}
	return MirrorSessionCongestionMode_MIRROR_SESSION_CONGESTION_MODE_UNSPECIFIED
}

func (x *CreateMirrorSessionRequest) GetTc() uint32 {
	if x != nil && x.Tc != nil {
		return *x.Tc
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetVlanTpid() uint32 {
	if x != nil && x.VlanTpid != nil {
		return *x.VlanTpid
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetVlanId() uint32 {
	if x != nil && x.VlanId != nil {
		return *x.VlanId
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetVlanPri() uint32 {
	if x != nil && x.VlanPri != nil {
		return *x.VlanPri
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetVlanCfi() uint32 {
	if x != nil && x.VlanCfi != nil {
		return *x.VlanCfi
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetVlanHeaderValid() bool {
	if x != nil && x.VlanHeaderValid != nil {
		return *x.VlanHeaderValid
	}
	return false
}

func (x *CreateMirrorSessionRequest) GetErspanEncapsulationType() ErspanEncapsulationType {
	if x != nil && x.ErspanEncapsulationType != nil {
		return *x.ErspanEncapsulationType
	}
	return ErspanEncapsulationType_ERSPAN_ENCAPSULATION_TYPE_UNSPECIFIED
}

func (x *CreateMirrorSessionRequest) GetIphdrVersion() uint32 {
	if x != nil && x.IphdrVersion != nil {
		return *x.IphdrVersion
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetTos() uint32 {
	if x != nil && x.Tos != nil {
		return *x.Tos
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetTtl() uint32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetSrcIpAddress() []byte {
	if x != nil {
		return x.SrcIpAddress
	}
	return nil
}

func (x *CreateMirrorSessionRequest) GetDstIpAddress() []byte {
	if x != nil {
		return x.DstIpAddress
	}
	return nil
}

func (x *CreateMirrorSessionRequest) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *CreateMirrorSessionRequest) GetDstMacAddress() []byte {
	if x != nil {
		return x.DstMacAddress
	}
	return nil
}

func (x *CreateMirrorSessionRequest) GetGreProtocolType() uint32 {
	if x != nil && x.GreProtocolType != nil {
		return *x.GreProtocolType
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetMonitorPortlistValid() bool {
	if x != nil && x.MonitorPortlistValid != nil {
		return *x.MonitorPortlistValid
	}
	return false
}

func (x *CreateMirrorSessionRequest) GetMonitorPortlist() []uint64 {
	if x != nil {
		return x.MonitorPortlist
	}
	return nil
}

func (x *CreateMirrorSessionRequest) GetPolicer() uint64 {
	if x != nil && x.Policer != nil {
		return *x.Policer
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetUdpSrcPort() uint32 {
	if x != nil && x.UdpSrcPort != nil {
		return *x.UdpSrcPort
	}
	return 0
}

func (x *CreateMirrorSessionRequest) GetUdpDstPort() uint32 {
	if x != nil && x.UdpDstPort != nil {
		return *x.UdpDstPort
	}
	return 0
}

type CreateMirrorSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateMirrorSessionResponse) Reset() {
	*x = CreateMirrorSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMirrorSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMirrorSessionResponse) ProtoMessage() {}

func (x *CreateMirrorSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMirrorSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateMirrorSessionResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_mirror_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMirrorSessionResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveMirrorSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveMirrorSessionRequest) Reset() {
	*x = RemoveMirrorSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMirrorSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMirrorSessionRequest) ProtoMessage() {}

func (x *RemoveMirrorSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMirrorSessionRequest.ProtoReflect.Descriptor instead.
func (*RemoveMirrorSessionRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_mirror_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveMirrorSessionRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveMirrorSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveMirrorSessionResponse) Reset() {
	*x = RemoveMirrorSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMirrorSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMirrorSessionResponse) ProtoMessage() {}

func (x *RemoveMirrorSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMirrorSessionResponse.ProtoReflect.Descriptor instead.
func (*RemoveMirrorSessionResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_mirror_proto_rawDescGZIP(), []int{3}
}

type SetMirrorSessionAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid             uint64                       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	MonitorPort     *uint64                      `protobuf:"varint,2,opt,name=monitor_port,json=monitorPort,proto3,oneof" json:"monitor_port,omitempty"`
	TruncateSize    *uint32                      `protobuf:"varint,3,opt,name=truncate_size,json=truncateSize,proto3,oneof" json:"truncate_size,omitempty"`
	SampleRate      *uint32                      `protobuf:"varint,4,opt,name=sample_rate,json=sampleRate,proto3,oneof" json:"sample_rate,omitempty"`
	CongestionMode  *MirrorSessionCongestionMode `protobuf:"varint,5,opt,name=congestion_mode,json=congestionMode,proto3,enum=lemming.dataplane.sai.MirrorSessionCongestionMode,oneof" json:"congestion_mode,omitempty"`
	Tc              *uint32                      `protobuf:"varint,6,opt,name=tc,proto3,oneof" json:"tc,omitempty"`
	VlanTpid        *uint32                      `protobuf:"varint,7,opt,name=vlan_tpid,json=vlanTpid,proto3,oneof" json:"vlan_tpid,omitempty"`
	VlanId          *uint32                      `protobuf:"varint,8,opt,name=vlan_id,json=vlanId,proto3,oneof" json:"vlan_id,omitempty"`
	VlanPri         *uint32                      `protobuf:"varint,9,opt,name=vlan_pri,json=vlanPri,proto3,oneof" json:"vlan_pri,omitempty"`
	VlanCfi         *uint32                      `protobuf:"varint,10,opt,name=vlan_cfi,json=vlanCfi,proto3,oneof" json:"vlan_cfi,omitempty"`
	VlanHeaderValid *bool                        `protobuf:"varint,11,opt,name=vlan_header_valid,json=vlanHeaderValid,proto3,oneof" json:"vlan_header_valid,omitempty"`
	IphdrVersion    *uint32                      `protobuf:"varint,12,opt,name=iphdr_version,json=iphdrVersion,proto3,oneof" json:"iphdr_version,omitempty"`
	Tos             *uint32                      `protobuf:"varint,13,opt,name=tos,proto3,oneof" json:"tos,omitempty"`
	Ttl             *uint32                      `protobuf:"varint,14,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
	SrcIpAddress    []byte                       `protobuf:"bytes,15,opt,name=src_ip_address,json=srcIpAddress,proto3,oneof" json:"src_ip_address,omitempty"`
	DstIpAddress    []byte                       `protobuf:"bytes,16,opt,name=dst_ip_address,json=dstIpAddress,proto3,oneof" json:"dst_ip_address,omitempty"`
	SrcMacAddress   []byte                       `protobuf:"bytes,17,opt,name=src_mac_address,json=srcMacAddress,proto3,oneof" json:"src_mac_address,omitempty"`
	DstMacAddress   []byte                       `protobuf:"bytes,18,opt,name=dst_mac_address,json=dstMacAddress,proto3,oneof" json:"dst_mac_address,omitempty"`
	GreProtocolType *uint32                      `protobuf:"varint,19,opt,name=gre_protocol_type,json=greProtocolType,proto3,oneof" json:"gre_protocol_type,omitempty"`
	MonitorPortlist []uint64                     `protobuf:"varint,20,rep,packed,name=monitor_portlist,json=monitorPortlist,proto3" json:"monitor_portlist,omitempty"`
	Policer         *uint64                      `protobuf:"varint,21,opt,name=policer,proto3,oneof" json:"policer,omitempty"`
	UdpSrcPort      *uint32                      `protobuf:"varint,22,opt,name=udp_src_port,json=udpSrcPort,proto3,oneof" json:"udp_src_port,omitempty"`
	UdpDstPort      *uint32                      `protobuf:"varint,23,opt,name=udp_dst_port,json=udpDstPort,proto3,oneof" json:"udp_dst_port,omitempty"`
}

func (x *SetMirrorSessionAttributeRequest) Reset() {
	*x = SetMirrorSessionAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMirrorSessionAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMirrorSessionAttributeRequest) ProtoMessage() {}

func (x *SetMirrorSessionAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMirrorSessionAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetMirrorSessionAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_mirror_proto_rawDescGZIP(), []int{4}
}

func (x *SetMirrorSessionAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetMonitorPort() uint64 {
	if x != nil && x.MonitorPort != nil {
		return *x.MonitorPort
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetTruncateSize() uint32 {
	if x != nil && x.TruncateSize != nil {
		return *x.TruncateSize
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetSampleRate() uint32 {
	if x != nil && x.SampleRate != nil {
		return *x.SampleRate
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetCongestionMode() MirrorSessionCongestionMode {
	if x != nil && x.CongestionMode != nil {
		return *x.CongestionMode
	}
	return MirrorSessionCongestionMode_MIRROR_SESSION_CONGESTION_MODE_UNSPECIFIED
}

func (x *SetMirrorSessionAttributeRequest) GetTc() uint32 {
	if x != nil && x.Tc != nil {
		return *x.Tc
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetVlanTpid() uint32 {
	if x != nil && x.VlanTpid != nil {
		return *x.VlanTpid
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetVlanId() uint32 {
	if x != nil && x.VlanId != nil {
		return *x.VlanId
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetVlanPri() uint32 {
	if x != nil && x.VlanPri != nil {
		return *x.VlanPri
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetVlanCfi() uint32 {
	if x != nil && x.VlanCfi != nil {
		return *x.VlanCfi
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetVlanHeaderValid() bool {
	if x != nil && x.VlanHeaderValid != nil {
		return *x.VlanHeaderValid
	}
	return false
}

func (x *SetMirrorSessionAttributeRequest) GetIphdrVersion() uint32 {
	if x != nil && x.IphdrVersion != nil {
		return *x.IphdrVersion
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetTos() uint32 {
	if x != nil && x.Tos != nil {
		return *x.Tos
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetTtl() uint32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetSrcIpAddress() []byte {
	if x != nil {
		return x.SrcIpAddress
	}
	return nil
}

func (x *SetMirrorSessionAttributeRequest) GetDstIpAddress() []byte {
	if x != nil {
		return x.DstIpAddress
	}
	return nil
}

func (x *SetMirrorSessionAttributeRequest) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *SetMirrorSessionAttributeRequest) GetDstMacAddress() []byte {
	if x != nil {
		return x.DstMacAddress
	}
	return nil
}

func (x *SetMirrorSessionAttributeRequest) GetGreProtocolType() uint32 {
	if x != nil && x.GreProtocolType != nil {
		return *x.GreProtocolType
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetMonitorPortlist() []uint64 {
	if x != nil {
		return x.MonitorPortlist
	}
	return nil
}

func (x *SetMirrorSessionAttributeRequest) GetPolicer() uint64 {
	if x != nil && x.Policer != nil {
		return *x.Policer
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetUdpSrcPort() uint32 {
	if x != nil && x.UdpSrcPort != nil {
		return *x.UdpSrcPort
	}
	return 0
}

func (x *SetMirrorSessionAttributeRequest) GetUdpDstPort() uint32 {
	if x != nil && x.UdpDstPort != nil {
		return *x.UdpDstPort
	}
	return 0
}

type SetMirrorSessionAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMirrorSessionAttributeResponse) Reset() {
	*x = SetMirrorSessionAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMirrorSessionAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMirrorSessionAttributeResponse) ProtoMessage() {}

func (x *SetMirrorSessionAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMirrorSessionAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetMirrorSessionAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_mirror_proto_rawDescGZIP(), []int{5}
}

type GetMirrorSessionAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64              `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []MirrorSessionAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.MirrorSessionAttr" json:"attr_type,omitempty"`
}

func (x *GetMirrorSessionAttributeRequest) Reset() {
	*x = GetMirrorSessionAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMirrorSessionAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMirrorSessionAttributeRequest) ProtoMessage() {}

func (x *GetMirrorSessionAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMirrorSessionAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetMirrorSessionAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_mirror_proto_rawDescGZIP(), []int{6}
}

func (x *GetMirrorSessionAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetMirrorSessionAttributeRequest) GetAttrType() []MirrorSessionAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetMirrorSessionAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *MirrorSessionAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetMirrorSessionAttributeResponse) Reset() {
	*x = GetMirrorSessionAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMirrorSessionAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMirrorSessionAttributeResponse) ProtoMessage() {}

func (x *GetMirrorSessionAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_mirror_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMirrorSessionAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetMirrorSessionAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_mirror_proto_rawDescGZIP(), []int{7}
}

func (x *GetMirrorSessionAttributeResponse) GetAttr() *MirrorSessionAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_standalone_proto_mirror_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_mirror_proto_rawDesc = []byte{
	0x0a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x1a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x0d, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x04, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x02, 0x74,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x05, 0x52,
	0x02, 0x74, 0x63, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74,
	0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48,
	0x06, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x54, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x07, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x08, 0x52, 0x07, 0x76, 0x6c,
	0x61, 0x6e, 0x50, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x63, 0x66, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a,
	0x48, 0x09, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x69, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48,
	0x0a, 0x52, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x19, 0x65, 0x72, 0x73, 0x70, 0x61, 0x6e, 0x5f,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x45, 0x72, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x0b,
	0x52, 0x17, 0x65, 0x72, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d,
	0x69, 0x70, 0x68, 0x64, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x0c, 0x52, 0x0c, 0x69, 0x70, 0x68,
	0x64, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03,
	0x74, 0x6f, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48,
	0x0d, 0x52, 0x03, 0x74, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03, 0x74, 0x74, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48, 0x0e, 0x52, 0x03,
	0x74, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x10, 0x48, 0x0f, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x11, 0x48, 0x10, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f,
	0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x12, 0x48, 0x11, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0f, 0x64,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x13, 0x48, 0x12, 0x52, 0x0d, 0x64, 0x73,
	0x74, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x11, 0x67, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48,
	0x13, 0x52, 0x0f, 0x67, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x16, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x15, 0x48, 0x14, 0x52, 0x14, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x17, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x16, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x17, 0x48, 0x15,
	0x52, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c,
	0x75, 0x64, 0x70, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x18, 0x48, 0x16, 0x52, 0x0a, 0x75, 0x64, 0x70, 0x53,
	0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x75, 0x64, 0x70,
	0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x19, 0x48, 0x17, 0x52, 0x0a, 0x75, 0x64, 0x70, 0x44, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x63, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x66,
	0x69, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x65, 0x72, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x70, 0x68, 0x64, 0x72, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6f, 0x73, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64,
	0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x64, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x2f, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf5, 0x0a, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0c, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x04, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x02, 0x74, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48,
	0x04, 0x52, 0x02, 0x74, 0x63, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x07, 0x48, 0x05, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x54, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x06, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x07, 0x52, 0x07,
	0x76, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x63, 0x66, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x0a, 0x48, 0x08, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x69, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x0b, 0x48, 0x09, 0x52, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d, 0x69, 0x70, 0x68, 0x64, 0x72,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x0d, 0x48, 0x0a, 0x52, 0x0c, 0x69, 0x70, 0x68, 0x64, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48, 0x0b, 0x52, 0x03, 0x74, 0x6f,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48, 0x0c, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x10, 0x48,
	0x0d, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x11,
	0x48, 0x0e, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x12, 0x48, 0x0f, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0f, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x13, 0x48, 0x10, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x67, 0x72, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48, 0x11, 0x52, 0x0f, 0x67, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x16,
	0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x17, 0x48, 0x12, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x18, 0x48, 0x13, 0x52, 0x0a, 0x75, 0x64, 0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x75, 0x64, 0x70, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x19, 0x48,
	0x14, 0x52, 0x0a, 0x75, 0x64, 0x70, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x63, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63,
	0x66, 0x69, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x70, 0x68,
	0x64, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74,
	0x6f, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x67, 0x72, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75,
	0x64, 0x70, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x75, 0x64, 0x70, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x23, 0x0a, 0x21,
	0x53, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x7b, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x66,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0xe8, 0x07, 0x0a, 0x11, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x12, 0x23, 0x0a, 0x1f,
	0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x55,
	0x4e, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f,
	0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x04, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x54, 0x43, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c,
	0x41, 0x4e, 0x5f, 0x54, 0x50, 0x49, 0x44, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x49, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c,
	0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x43, 0x46, 0x49, 0x10, 0x0a, 0x12, 0x29,
	0x0a, 0x25, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45,
	0x52, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x31, 0x0a, 0x2d, 0x4d, 0x49, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x45, 0x52, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x48, 0x44, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x4f, 0x53, 0x10, 0x0e,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x54, 0x4c, 0x10, 0x0f, 0x12, 0x26, 0x0a,
	0x22, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x53, 0x54,
	0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x11, 0x12, 0x27, 0x0a,
	0x23, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x12, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x53,
	0x54, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x13, 0x12,
	0x29, 0x0a, 0x25, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x14, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x15, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x16, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x45, 0x52, 0x10, 0x17, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x44, 0x50,
	0x5f, 0x53, 0x52, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x18, 0x12, 0x24, 0x0a, 0x20, 0x4d,
	0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x19, 0x32, 0xae, 0x04, 0x0a, 0x06, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x7e, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x13,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a,
	0x19, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x90, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x37, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_mirror_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_mirror_proto_rawDescData = file_dataplane_standalone_proto_mirror_proto_rawDesc
)

func file_dataplane_standalone_proto_mirror_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_mirror_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_mirror_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_mirror_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_mirror_proto_rawDescData
}

var file_dataplane_standalone_proto_mirror_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_standalone_proto_mirror_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dataplane_standalone_proto_mirror_proto_goTypes = []interface{}{
	(MirrorSessionAttr)(0),                    // 0: lemming.dataplane.sai.MirrorSessionAttr
	(*CreateMirrorSessionRequest)(nil),        // 1: lemming.dataplane.sai.CreateMirrorSessionRequest
	(*CreateMirrorSessionResponse)(nil),       // 2: lemming.dataplane.sai.CreateMirrorSessionResponse
	(*RemoveMirrorSessionRequest)(nil),        // 3: lemming.dataplane.sai.RemoveMirrorSessionRequest
	(*RemoveMirrorSessionResponse)(nil),       // 4: lemming.dataplane.sai.RemoveMirrorSessionResponse
	(*SetMirrorSessionAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetMirrorSessionAttributeRequest
	(*SetMirrorSessionAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetMirrorSessionAttributeResponse
	(*GetMirrorSessionAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetMirrorSessionAttributeRequest
	(*GetMirrorSessionAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetMirrorSessionAttributeResponse
	(MirrorSessionType)(0),                    // 9: lemming.dataplane.sai.MirrorSessionType
	(MirrorSessionCongestionMode)(0),          // 10: lemming.dataplane.sai.MirrorSessionCongestionMode
	(ErspanEncapsulationType)(0),              // 11: lemming.dataplane.sai.ErspanEncapsulationType
	(*MirrorSessionAttribute)(nil),            // 12: lemming.dataplane.sai.MirrorSessionAttribute
}
var file_dataplane_standalone_proto_mirror_proto_depIdxs = []int32{
	9,  // 0: lemming.dataplane.sai.CreateMirrorSessionRequest.type:type_name -> lemming.dataplane.sai.MirrorSessionType
	10, // 1: lemming.dataplane.sai.CreateMirrorSessionRequest.congestion_mode:type_name -> lemming.dataplane.sai.MirrorSessionCongestionMode
	11, // 2: lemming.dataplane.sai.CreateMirrorSessionRequest.erspan_encapsulation_type:type_name -> lemming.dataplane.sai.ErspanEncapsulationType
	10, // 3: lemming.dataplane.sai.SetMirrorSessionAttributeRequest.congestion_mode:type_name -> lemming.dataplane.sai.MirrorSessionCongestionMode
	0,  // 4: lemming.dataplane.sai.GetMirrorSessionAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.MirrorSessionAttr
	12, // 5: lemming.dataplane.sai.GetMirrorSessionAttributeResponse.attr:type_name -> lemming.dataplane.sai.MirrorSessionAttribute
	1,  // 6: lemming.dataplane.sai.Mirror.CreateMirrorSession:input_type -> lemming.dataplane.sai.CreateMirrorSessionRequest
	3,  // 7: lemming.dataplane.sai.Mirror.RemoveMirrorSession:input_type -> lemming.dataplane.sai.RemoveMirrorSessionRequest
	5,  // 8: lemming.dataplane.sai.Mirror.SetMirrorSessionAttribute:input_type -> lemming.dataplane.sai.SetMirrorSessionAttributeRequest
	7,  // 9: lemming.dataplane.sai.Mirror.GetMirrorSessionAttribute:input_type -> lemming.dataplane.sai.GetMirrorSessionAttributeRequest
	2,  // 10: lemming.dataplane.sai.Mirror.CreateMirrorSession:output_type -> lemming.dataplane.sai.CreateMirrorSessionResponse
	4,  // 11: lemming.dataplane.sai.Mirror.RemoveMirrorSession:output_type -> lemming.dataplane.sai.RemoveMirrorSessionResponse
	6,  // 12: lemming.dataplane.sai.Mirror.SetMirrorSessionAttribute:output_type -> lemming.dataplane.sai.SetMirrorSessionAttributeResponse
	8,  // 13: lemming.dataplane.sai.Mirror.GetMirrorSessionAttribute:output_type -> lemming.dataplane.sai.GetMirrorSessionAttributeResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_mirror_proto_init() }
func file_dataplane_standalone_proto_mirror_proto_init() {
	if File_dataplane_standalone_proto_mirror_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_mirror_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMirrorSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_mirror_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMirrorSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_mirror_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMirrorSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_mirror_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMirrorSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_mirror_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMirrorSessionAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_mirror_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMirrorSessionAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_mirror_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMirrorSessionAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_mirror_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMirrorSessionAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_mirror_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_mirror_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_mirror_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_mirror_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_mirror_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_mirror_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_mirror_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_mirror_proto = out.File
	file_dataplane_standalone_proto_mirror_proto_rawDesc = nil
	file_dataplane_standalone_proto_mirror_proto_goTypes = nil
	file_dataplane_standalone_proto_mirror_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MirrorClient is the client API for Mirror service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MirrorClient interface {
	CreateMirrorSession(ctx context.Context, in *CreateMirrorSessionRequest, opts ...grpc.CallOption) (*CreateMirrorSessionResponse, error)
	RemoveMirrorSession(ctx context.Context, in *RemoveMirrorSessionRequest, opts ...grpc.CallOption) (*RemoveMirrorSessionResponse, error)
	SetMirrorSessionAttribute(ctx context.Context, in *SetMirrorSessionAttributeRequest, opts ...grpc.CallOption) (*SetMirrorSessionAttributeResponse, error)
	GetMirrorSessionAttribute(ctx context.Context, in *GetMirrorSessionAttributeRequest, opts ...grpc.CallOption) (*GetMirrorSessionAttributeResponse, error)
}

type mirrorClient struct {
	cc grpc.ClientConnInterface
}

func NewMirrorClient(cc grpc.ClientConnInterface) MirrorClient {
	return &mirrorClient{cc}
}

func (c *mirrorClient) CreateMirrorSession(ctx context.Context, in *CreateMirrorSessionRequest, opts ...grpc.CallOption) (*CreateMirrorSessionResponse, error) {
	out := new(CreateMirrorSessionResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Mirror/CreateMirrorSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) RemoveMirrorSession(ctx context.Context, in *RemoveMirrorSessionRequest, opts ...grpc.CallOption) (*RemoveMirrorSessionResponse, error) {
	out := new(RemoveMirrorSessionResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Mirror/RemoveMirrorSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) SetMirrorSessionAttribute(ctx context.Context, in *SetMirrorSessionAttributeRequest, opts ...grpc.CallOption) (*SetMirrorSessionAttributeResponse, error) {
	out := new(SetMirrorSessionAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Mirror/SetMirrorSessionAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetMirrorSessionAttribute(ctx context.Context, in *GetMirrorSessionAttributeRequest, opts ...grpc.CallOption) (*GetMirrorSessionAttributeResponse, error) {
	out := new(GetMirrorSessionAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Mirror/GetMirrorSessionAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MirrorServer is the server API for Mirror service.
type MirrorServer interface {
	CreateMirrorSession(context.Context, *CreateMirrorSessionRequest) (*CreateMirrorSessionResponse, error)
	RemoveMirrorSession(context.Context, *RemoveMirrorSessionRequest) (*RemoveMirrorSessionResponse, error)
	SetMirrorSessionAttribute(context.Context, *SetMirrorSessionAttributeRequest) (*SetMirrorSessionAttributeResponse, error)
	GetMirrorSessionAttribute(context.Context, *GetMirrorSessionAttributeRequest) (*GetMirrorSessionAttributeResponse, error)
}

// UnimplementedMirrorServer can be embedded to have forward compatible implementations.
type UnimplementedMirrorServer struct {
}

func (*UnimplementedMirrorServer) CreateMirrorSession(context.Context, *CreateMirrorSessionRequest) (*CreateMirrorSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMirrorSession not implemented")
}
func (*UnimplementedMirrorServer) RemoveMirrorSession(context.Context, *RemoveMirrorSessionRequest) (*RemoveMirrorSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMirrorSession not implemented")
}
func (*UnimplementedMirrorServer) SetMirrorSessionAttribute(context.Context, *SetMirrorSessionAttributeRequest) (*SetMirrorSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMirrorSessionAttribute not implemented")
}
func (*UnimplementedMirrorServer) GetMirrorSessionAttribute(context.Context, *GetMirrorSessionAttributeRequest) (*GetMirrorSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMirrorSessionAttribute not implemented")
}

func RegisterMirrorServer(s *grpc.Server, srv MirrorServer) {
	s.RegisterService(&_Mirror_serviceDesc, srv)
}

func _Mirror_CreateMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMirrorSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).CreateMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Mirror/CreateMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).CreateMirrorSession(ctx, req.(*CreateMirrorSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_RemoveMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMirrorSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).RemoveMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Mirror/RemoveMirrorSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).RemoveMirrorSession(ctx, req.(*RemoveMirrorSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_SetMirrorSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMirrorSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).SetMirrorSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Mirror/SetMirrorSessionAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).SetMirrorSessionAttribute(ctx, req.(*SetMirrorSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetMirrorSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMirrorSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetMirrorSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Mirror/GetMirrorSessionAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetMirrorSessionAttribute(ctx, req.(*GetMirrorSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mirror_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Mirror",
	HandlerType: (*MirrorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMirrorSession",
			Handler:    _Mirror_CreateMirrorSession_Handler,
		},
		{
			MethodName: "RemoveMirrorSession",
			Handler:    _Mirror_RemoveMirrorSession_Handler,
		},
		{
			MethodName: "SetMirrorSessionAttribute",
			Handler:    _Mirror_SetMirrorSessionAttribute_Handler,
		},
		{
			MethodName: "GetMirrorSessionAttribute",
			Handler:    _Mirror_GetMirrorSessionAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/mirror.proto",
}
