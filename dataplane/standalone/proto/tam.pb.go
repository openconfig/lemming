// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/tam.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TamAttr int32

const (
	TamAttr_TAM_ATTR_UNSPECIFIED              TamAttr = 0
	TamAttr_TAM_ATTR_TELEMETRY_OBJECTS_LIST   TamAttr = 1
	TamAttr_TAM_ATTR_EVENT_OBJECTS_LIST       TamAttr = 2
	TamAttr_TAM_ATTR_INT_OBJECTS_LIST         TamAttr = 3
	TamAttr_TAM_ATTR_TAM_BIND_POINT_TYPE_LIST TamAttr = 4
)

// Enum value maps for TamAttr.
var (
	TamAttr_name = map[int32]string{
		0: "TAM_ATTR_UNSPECIFIED",
		1: "TAM_ATTR_TELEMETRY_OBJECTS_LIST",
		2: "TAM_ATTR_EVENT_OBJECTS_LIST",
		3: "TAM_ATTR_INT_OBJECTS_LIST",
		4: "TAM_ATTR_TAM_BIND_POINT_TYPE_LIST",
	}
	TamAttr_value = map[string]int32{
		"TAM_ATTR_UNSPECIFIED":              0,
		"TAM_ATTR_TELEMETRY_OBJECTS_LIST":   1,
		"TAM_ATTR_EVENT_OBJECTS_LIST":       2,
		"TAM_ATTR_INT_OBJECTS_LIST":         3,
		"TAM_ATTR_TAM_BIND_POINT_TYPE_LIST": 4,
	}
)

func (x TamAttr) Enum() *TamAttr {
	p := new(TamAttr)
	*p = x
	return p
}

func (x TamAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tam_proto_enumTypes[0].Descriptor()
}

func (TamAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tam_proto_enumTypes[0]
}

func (x TamAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamAttr.Descriptor instead.
func (TamAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{0}
}

type TamMathFuncAttr int32

const (
	TamMathFuncAttr_TAM_MATH_FUNC_ATTR_UNSPECIFIED            TamMathFuncAttr = 0
	TamMathFuncAttr_TAM_MATH_FUNC_ATTR_TAM_TEL_MATH_FUNC_TYPE TamMathFuncAttr = 1
)

// Enum value maps for TamMathFuncAttr.
var (
	TamMathFuncAttr_name = map[int32]string{
		0: "TAM_MATH_FUNC_ATTR_UNSPECIFIED",
		1: "TAM_MATH_FUNC_ATTR_TAM_TEL_MATH_FUNC_TYPE",
	}
	TamMathFuncAttr_value = map[string]int32{
		"TAM_MATH_FUNC_ATTR_UNSPECIFIED":            0,
		"TAM_MATH_FUNC_ATTR_TAM_TEL_MATH_FUNC_TYPE": 1,
	}
)

func (x TamMathFuncAttr) Enum() *TamMathFuncAttr {
	p := new(TamMathFuncAttr)
	*p = x
	return p
}

func (x TamMathFuncAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamMathFuncAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tam_proto_enumTypes[1].Descriptor()
}

func (TamMathFuncAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tam_proto_enumTypes[1]
}

func (x TamMathFuncAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamMathFuncAttr.Descriptor instead.
func (TamMathFuncAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{1}
}

type TamReportAttr int32

const (
	TamReportAttr_TAM_REPORT_ATTR_UNSPECIFIED              TamReportAttr = 0
	TamReportAttr_TAM_REPORT_ATTR_TYPE                     TamReportAttr = 1
	TamReportAttr_TAM_REPORT_ATTR_HISTOGRAM_NUMBER_OF_BINS TamReportAttr = 2
	TamReportAttr_TAM_REPORT_ATTR_HISTOGRAM_BIN_BOUNDARY   TamReportAttr = 3
	TamReportAttr_TAM_REPORT_ATTR_QUOTA                    TamReportAttr = 4
	TamReportAttr_TAM_REPORT_ATTR_REPORT_MODE              TamReportAttr = 5
	TamReportAttr_TAM_REPORT_ATTR_REPORT_INTERVAL          TamReportAttr = 6
	TamReportAttr_TAM_REPORT_ATTR_ENTERPRISE_NUMBER        TamReportAttr = 7
)

// Enum value maps for TamReportAttr.
var (
	TamReportAttr_name = map[int32]string{
		0: "TAM_REPORT_ATTR_UNSPECIFIED",
		1: "TAM_REPORT_ATTR_TYPE",
		2: "TAM_REPORT_ATTR_HISTOGRAM_NUMBER_OF_BINS",
		3: "TAM_REPORT_ATTR_HISTOGRAM_BIN_BOUNDARY",
		4: "TAM_REPORT_ATTR_QUOTA",
		5: "TAM_REPORT_ATTR_REPORT_MODE",
		6: "TAM_REPORT_ATTR_REPORT_INTERVAL",
		7: "TAM_REPORT_ATTR_ENTERPRISE_NUMBER",
	}
	TamReportAttr_value = map[string]int32{
		"TAM_REPORT_ATTR_UNSPECIFIED":              0,
		"TAM_REPORT_ATTR_TYPE":                     1,
		"TAM_REPORT_ATTR_HISTOGRAM_NUMBER_OF_BINS": 2,
		"TAM_REPORT_ATTR_HISTOGRAM_BIN_BOUNDARY":   3,
		"TAM_REPORT_ATTR_QUOTA":                    4,
		"TAM_REPORT_ATTR_REPORT_MODE":              5,
		"TAM_REPORT_ATTR_REPORT_INTERVAL":          6,
		"TAM_REPORT_ATTR_ENTERPRISE_NUMBER":        7,
	}
)

func (x TamReportAttr) Enum() *TamReportAttr {
	p := new(TamReportAttr)
	*p = x
	return p
}

func (x TamReportAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamReportAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tam_proto_enumTypes[2].Descriptor()
}

func (TamReportAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tam_proto_enumTypes[2]
}

func (x TamReportAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamReportAttr.Descriptor instead.
func (TamReportAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{2}
}

type TamEventThresholdAttr int32

const (
	TamEventThresholdAttr_TAM_EVENT_THRESHOLD_ATTR_UNSPECIFIED    TamEventThresholdAttr = 0
	TamEventThresholdAttr_TAM_EVENT_THRESHOLD_ATTR_HIGH_WATERMARK TamEventThresholdAttr = 1
	TamEventThresholdAttr_TAM_EVENT_THRESHOLD_ATTR_LOW_WATERMARK  TamEventThresholdAttr = 2
	TamEventThresholdAttr_TAM_EVENT_THRESHOLD_ATTR_LATENCY        TamEventThresholdAttr = 3
	TamEventThresholdAttr_TAM_EVENT_THRESHOLD_ATTR_RATE           TamEventThresholdAttr = 4
	TamEventThresholdAttr_TAM_EVENT_THRESHOLD_ATTR_ABS_VALUE      TamEventThresholdAttr = 5
	TamEventThresholdAttr_TAM_EVENT_THRESHOLD_ATTR_UNIT           TamEventThresholdAttr = 6
)

// Enum value maps for TamEventThresholdAttr.
var (
	TamEventThresholdAttr_name = map[int32]string{
		0: "TAM_EVENT_THRESHOLD_ATTR_UNSPECIFIED",
		1: "TAM_EVENT_THRESHOLD_ATTR_HIGH_WATERMARK",
		2: "TAM_EVENT_THRESHOLD_ATTR_LOW_WATERMARK",
		3: "TAM_EVENT_THRESHOLD_ATTR_LATENCY",
		4: "TAM_EVENT_THRESHOLD_ATTR_RATE",
		5: "TAM_EVENT_THRESHOLD_ATTR_ABS_VALUE",
		6: "TAM_EVENT_THRESHOLD_ATTR_UNIT",
	}
	TamEventThresholdAttr_value = map[string]int32{
		"TAM_EVENT_THRESHOLD_ATTR_UNSPECIFIED":    0,
		"TAM_EVENT_THRESHOLD_ATTR_HIGH_WATERMARK": 1,
		"TAM_EVENT_THRESHOLD_ATTR_LOW_WATERMARK":  2,
		"TAM_EVENT_THRESHOLD_ATTR_LATENCY":        3,
		"TAM_EVENT_THRESHOLD_ATTR_RATE":           4,
		"TAM_EVENT_THRESHOLD_ATTR_ABS_VALUE":      5,
		"TAM_EVENT_THRESHOLD_ATTR_UNIT":           6,
	}
)

func (x TamEventThresholdAttr) Enum() *TamEventThresholdAttr {
	p := new(TamEventThresholdAttr)
	*p = x
	return p
}

func (x TamEventThresholdAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamEventThresholdAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tam_proto_enumTypes[3].Descriptor()
}

func (TamEventThresholdAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tam_proto_enumTypes[3]
}

func (x TamEventThresholdAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamEventThresholdAttr.Descriptor instead.
func (TamEventThresholdAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{3}
}

type TamIntAttr int32

const (
	TamIntAttr_TAM_INT_ATTR_UNSPECIFIED                 TamIntAttr = 0
	TamIntAttr_TAM_INT_ATTR_TYPE                        TamIntAttr = 1
	TamIntAttr_TAM_INT_ATTR_DEVICE_ID                   TamIntAttr = 2
	TamIntAttr_TAM_INT_ATTR_IOAM_TRACE_TYPE             TamIntAttr = 3
	TamIntAttr_TAM_INT_ATTR_INT_PRESENCE_TYPE           TamIntAttr = 4
	TamIntAttr_TAM_INT_ATTR_INT_PRESENCE_PB1            TamIntAttr = 5
	TamIntAttr_TAM_INT_ATTR_INT_PRESENCE_PB2            TamIntAttr = 6
	TamIntAttr_TAM_INT_ATTR_INT_PRESENCE_DSCP_VALUE     TamIntAttr = 7
	TamIntAttr_TAM_INT_ATTR_INLINE                      TamIntAttr = 8
	TamIntAttr_TAM_INT_ATTR_INT_PRESENCE_L3_PROTOCOL    TamIntAttr = 9
	TamIntAttr_TAM_INT_ATTR_TRACE_VECTOR                TamIntAttr = 10
	TamIntAttr_TAM_INT_ATTR_ACTION_VECTOR               TamIntAttr = 11
	TamIntAttr_TAM_INT_ATTR_P4_INT_INSTRUCTION_BITMAP   TamIntAttr = 12
	TamIntAttr_TAM_INT_ATTR_METADATA_FRAGMENT_ENABLE    TamIntAttr = 13
	TamIntAttr_TAM_INT_ATTR_METADATA_CHECKSUM_ENABLE    TamIntAttr = 14
	TamIntAttr_TAM_INT_ATTR_REPORT_ALL_PACKETS          TamIntAttr = 15
	TamIntAttr_TAM_INT_ATTR_FLOW_LIVENESS_PERIOD        TamIntAttr = 16
	TamIntAttr_TAM_INT_ATTR_LATENCY_SENSITIVITY         TamIntAttr = 17
	TamIntAttr_TAM_INT_ATTR_ACL_GROUP                   TamIntAttr = 18
	TamIntAttr_TAM_INT_ATTR_MAX_HOP_COUNT               TamIntAttr = 19
	TamIntAttr_TAM_INT_ATTR_MAX_LENGTH                  TamIntAttr = 20
	TamIntAttr_TAM_INT_ATTR_NAME_SPACE_ID               TamIntAttr = 21
	TamIntAttr_TAM_INT_ATTR_NAME_SPACE_ID_GLOBAL        TamIntAttr = 22
	TamIntAttr_TAM_INT_ATTR_INGRESS_SAMPLEPACKET_ENABLE TamIntAttr = 23
	TamIntAttr_TAM_INT_ATTR_COLLECTOR_LIST              TamIntAttr = 24
	TamIntAttr_TAM_INT_ATTR_MATH_FUNC                   TamIntAttr = 25
	TamIntAttr_TAM_INT_ATTR_REPORT_ID                   TamIntAttr = 26
)

// Enum value maps for TamIntAttr.
var (
	TamIntAttr_name = map[int32]string{
		0:  "TAM_INT_ATTR_UNSPECIFIED",
		1:  "TAM_INT_ATTR_TYPE",
		2:  "TAM_INT_ATTR_DEVICE_ID",
		3:  "TAM_INT_ATTR_IOAM_TRACE_TYPE",
		4:  "TAM_INT_ATTR_INT_PRESENCE_TYPE",
		5:  "TAM_INT_ATTR_INT_PRESENCE_PB1",
		6:  "TAM_INT_ATTR_INT_PRESENCE_PB2",
		7:  "TAM_INT_ATTR_INT_PRESENCE_DSCP_VALUE",
		8:  "TAM_INT_ATTR_INLINE",
		9:  "TAM_INT_ATTR_INT_PRESENCE_L3_PROTOCOL",
		10: "TAM_INT_ATTR_TRACE_VECTOR",
		11: "TAM_INT_ATTR_ACTION_VECTOR",
		12: "TAM_INT_ATTR_P4_INT_INSTRUCTION_BITMAP",
		13: "TAM_INT_ATTR_METADATA_FRAGMENT_ENABLE",
		14: "TAM_INT_ATTR_METADATA_CHECKSUM_ENABLE",
		15: "TAM_INT_ATTR_REPORT_ALL_PACKETS",
		16: "TAM_INT_ATTR_FLOW_LIVENESS_PERIOD",
		17: "TAM_INT_ATTR_LATENCY_SENSITIVITY",
		18: "TAM_INT_ATTR_ACL_GROUP",
		19: "TAM_INT_ATTR_MAX_HOP_COUNT",
		20: "TAM_INT_ATTR_MAX_LENGTH",
		21: "TAM_INT_ATTR_NAME_SPACE_ID",
		22: "TAM_INT_ATTR_NAME_SPACE_ID_GLOBAL",
		23: "TAM_INT_ATTR_INGRESS_SAMPLEPACKET_ENABLE",
		24: "TAM_INT_ATTR_COLLECTOR_LIST",
		25: "TAM_INT_ATTR_MATH_FUNC",
		26: "TAM_INT_ATTR_REPORT_ID",
	}
	TamIntAttr_value = map[string]int32{
		"TAM_INT_ATTR_UNSPECIFIED":                 0,
		"TAM_INT_ATTR_TYPE":                        1,
		"TAM_INT_ATTR_DEVICE_ID":                   2,
		"TAM_INT_ATTR_IOAM_TRACE_TYPE":             3,
		"TAM_INT_ATTR_INT_PRESENCE_TYPE":           4,
		"TAM_INT_ATTR_INT_PRESENCE_PB1":            5,
		"TAM_INT_ATTR_INT_PRESENCE_PB2":            6,
		"TAM_INT_ATTR_INT_PRESENCE_DSCP_VALUE":     7,
		"TAM_INT_ATTR_INLINE":                      8,
		"TAM_INT_ATTR_INT_PRESENCE_L3_PROTOCOL":    9,
		"TAM_INT_ATTR_TRACE_VECTOR":                10,
		"TAM_INT_ATTR_ACTION_VECTOR":               11,
		"TAM_INT_ATTR_P4_INT_INSTRUCTION_BITMAP":   12,
		"TAM_INT_ATTR_METADATA_FRAGMENT_ENABLE":    13,
		"TAM_INT_ATTR_METADATA_CHECKSUM_ENABLE":    14,
		"TAM_INT_ATTR_REPORT_ALL_PACKETS":          15,
		"TAM_INT_ATTR_FLOW_LIVENESS_PERIOD":        16,
		"TAM_INT_ATTR_LATENCY_SENSITIVITY":         17,
		"TAM_INT_ATTR_ACL_GROUP":                   18,
		"TAM_INT_ATTR_MAX_HOP_COUNT":               19,
		"TAM_INT_ATTR_MAX_LENGTH":                  20,
		"TAM_INT_ATTR_NAME_SPACE_ID":               21,
		"TAM_INT_ATTR_NAME_SPACE_ID_GLOBAL":        22,
		"TAM_INT_ATTR_INGRESS_SAMPLEPACKET_ENABLE": 23,
		"TAM_INT_ATTR_COLLECTOR_LIST":              24,
		"TAM_INT_ATTR_MATH_FUNC":                   25,
		"TAM_INT_ATTR_REPORT_ID":                   26,
	}
)

func (x TamIntAttr) Enum() *TamIntAttr {
	p := new(TamIntAttr)
	*p = x
	return p
}

func (x TamIntAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamIntAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tam_proto_enumTypes[4].Descriptor()
}

func (TamIntAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tam_proto_enumTypes[4]
}

func (x TamIntAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamIntAttr.Descriptor instead.
func (TamIntAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{4}
}

type TamTelTypeAttr int32

const (
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_UNSPECIFIED                              TamTelTypeAttr = 0
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_TAM_TELEMETRY_TYPE                       TamTelTypeAttr = 1
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_INT_SWITCH_IDENTIFIER                    TamTelTypeAttr = 2
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS                 TamTelTypeAttr = 3
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_INGRESS         TamTelTypeAttr = 4
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_EGRESS          TamTelTypeAttr = 5
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_VIRTUAL_QUEUE_STATS        TamTelTypeAttr = 6
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_OUTPUT_QUEUE_STATS         TamTelTypeAttr = 7
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_MMU_STATS                  TamTelTypeAttr = 8
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FABRIC_STATS               TamTelTypeAttr = 9
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FILTER_STATS               TamTelTypeAttr = 10
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_RESOURCE_UTILIZATION_STATS TamTelTypeAttr = 11
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_FABRIC_Q                                 TamTelTypeAttr = 12
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_NE_ENABLE                                TamTelTypeAttr = 13
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_DSCP_VALUE                               TamTelTypeAttr = 14
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_MATH_FUNC                                TamTelTypeAttr = 15
	TamTelTypeAttr_TAM_TEL_TYPE_ATTR_REPORT_ID                                TamTelTypeAttr = 16
)

// Enum value maps for TamTelTypeAttr.
var (
	TamTelTypeAttr_name = map[int32]string{
		0:  "TAM_TEL_TYPE_ATTR_UNSPECIFIED",
		1:  "TAM_TEL_TYPE_ATTR_TAM_TELEMETRY_TYPE",
		2:  "TAM_TEL_TYPE_ATTR_INT_SWITCH_IDENTIFIER",
		3:  "TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS",
		4:  "TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_INGRESS",
		5:  "TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_EGRESS",
		6:  "TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_VIRTUAL_QUEUE_STATS",
		7:  "TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_OUTPUT_QUEUE_STATS",
		8:  "TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_MMU_STATS",
		9:  "TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FABRIC_STATS",
		10: "TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FILTER_STATS",
		11: "TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_RESOURCE_UTILIZATION_STATS",
		12: "TAM_TEL_TYPE_ATTR_FABRIC_Q",
		13: "TAM_TEL_TYPE_ATTR_NE_ENABLE",
		14: "TAM_TEL_TYPE_ATTR_DSCP_VALUE",
		15: "TAM_TEL_TYPE_ATTR_MATH_FUNC",
		16: "TAM_TEL_TYPE_ATTR_REPORT_ID",
	}
	TamTelTypeAttr_value = map[string]int32{
		"TAM_TEL_TYPE_ATTR_UNSPECIFIED":                              0,
		"TAM_TEL_TYPE_ATTR_TAM_TELEMETRY_TYPE":                       1,
		"TAM_TEL_TYPE_ATTR_INT_SWITCH_IDENTIFIER":                    2,
		"TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS":                 3,
		"TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_INGRESS":         4,
		"TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_EGRESS":          5,
		"TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_VIRTUAL_QUEUE_STATS":        6,
		"TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_OUTPUT_QUEUE_STATS":         7,
		"TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_MMU_STATS":                  8,
		"TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FABRIC_STATS":               9,
		"TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FILTER_STATS":               10,
		"TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_RESOURCE_UTILIZATION_STATS": 11,
		"TAM_TEL_TYPE_ATTR_FABRIC_Q":                                 12,
		"TAM_TEL_TYPE_ATTR_NE_ENABLE":                                13,
		"TAM_TEL_TYPE_ATTR_DSCP_VALUE":                               14,
		"TAM_TEL_TYPE_ATTR_MATH_FUNC":                                15,
		"TAM_TEL_TYPE_ATTR_REPORT_ID":                                16,
	}
)

func (x TamTelTypeAttr) Enum() *TamTelTypeAttr {
	p := new(TamTelTypeAttr)
	*p = x
	return p
}

func (x TamTelTypeAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamTelTypeAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tam_proto_enumTypes[5].Descriptor()
}

func (TamTelTypeAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tam_proto_enumTypes[5]
}

func (x TamTelTypeAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamTelTypeAttr.Descriptor instead.
func (TamTelTypeAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{5}
}

type TamTransportAttr int32

const (
	TamTransportAttr_TAM_TRANSPORT_ATTR_UNSPECIFIED         TamTransportAttr = 0
	TamTransportAttr_TAM_TRANSPORT_ATTR_TRANSPORT_TYPE      TamTransportAttr = 1
	TamTransportAttr_TAM_TRANSPORT_ATTR_SRC_PORT            TamTransportAttr = 2
	TamTransportAttr_TAM_TRANSPORT_ATTR_DST_PORT            TamTransportAttr = 3
	TamTransportAttr_TAM_TRANSPORT_ATTR_TRANSPORT_AUTH_TYPE TamTransportAttr = 4
	TamTransportAttr_TAM_TRANSPORT_ATTR_MTU                 TamTransportAttr = 5
)

// Enum value maps for TamTransportAttr.
var (
	TamTransportAttr_name = map[int32]string{
		0: "TAM_TRANSPORT_ATTR_UNSPECIFIED",
		1: "TAM_TRANSPORT_ATTR_TRANSPORT_TYPE",
		2: "TAM_TRANSPORT_ATTR_SRC_PORT",
		3: "TAM_TRANSPORT_ATTR_DST_PORT",
		4: "TAM_TRANSPORT_ATTR_TRANSPORT_AUTH_TYPE",
		5: "TAM_TRANSPORT_ATTR_MTU",
	}
	TamTransportAttr_value = map[string]int32{
		"TAM_TRANSPORT_ATTR_UNSPECIFIED":         0,
		"TAM_TRANSPORT_ATTR_TRANSPORT_TYPE":      1,
		"TAM_TRANSPORT_ATTR_SRC_PORT":            2,
		"TAM_TRANSPORT_ATTR_DST_PORT":            3,
		"TAM_TRANSPORT_ATTR_TRANSPORT_AUTH_TYPE": 4,
		"TAM_TRANSPORT_ATTR_MTU":                 5,
	}
)

func (x TamTransportAttr) Enum() *TamTransportAttr {
	p := new(TamTransportAttr)
	*p = x
	return p
}

func (x TamTransportAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamTransportAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tam_proto_enumTypes[6].Descriptor()
}

func (TamTransportAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tam_proto_enumTypes[6]
}

func (x TamTransportAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamTransportAttr.Descriptor instead.
func (TamTransportAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{6}
}

type TamTelemetryAttr int32

const (
	TamTelemetryAttr_TAM_TELEMETRY_ATTR_UNSPECIFIED        TamTelemetryAttr = 0
	TamTelemetryAttr_TAM_TELEMETRY_ATTR_TAM_TYPE_LIST      TamTelemetryAttr = 1
	TamTelemetryAttr_TAM_TELEMETRY_ATTR_COLLECTOR_LIST     TamTelemetryAttr = 2
	TamTelemetryAttr_TAM_TELEMETRY_ATTR_TAM_REPORTING_UNIT TamTelemetryAttr = 3
	TamTelemetryAttr_TAM_TELEMETRY_ATTR_REPORTING_INTERVAL TamTelemetryAttr = 4
)

// Enum value maps for TamTelemetryAttr.
var (
	TamTelemetryAttr_name = map[int32]string{
		0: "TAM_TELEMETRY_ATTR_UNSPECIFIED",
		1: "TAM_TELEMETRY_ATTR_TAM_TYPE_LIST",
		2: "TAM_TELEMETRY_ATTR_COLLECTOR_LIST",
		3: "TAM_TELEMETRY_ATTR_TAM_REPORTING_UNIT",
		4: "TAM_TELEMETRY_ATTR_REPORTING_INTERVAL",
	}
	TamTelemetryAttr_value = map[string]int32{
		"TAM_TELEMETRY_ATTR_UNSPECIFIED":        0,
		"TAM_TELEMETRY_ATTR_TAM_TYPE_LIST":      1,
		"TAM_TELEMETRY_ATTR_COLLECTOR_LIST":     2,
		"TAM_TELEMETRY_ATTR_TAM_REPORTING_UNIT": 3,
		"TAM_TELEMETRY_ATTR_REPORTING_INTERVAL": 4,
	}
)

func (x TamTelemetryAttr) Enum() *TamTelemetryAttr {
	p := new(TamTelemetryAttr)
	*p = x
	return p
}

func (x TamTelemetryAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamTelemetryAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tam_proto_enumTypes[7].Descriptor()
}

func (TamTelemetryAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tam_proto_enumTypes[7]
}

func (x TamTelemetryAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamTelemetryAttr.Descriptor instead.
func (TamTelemetryAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{7}
}

type TamCollectorAttr int32

const (
	TamCollectorAttr_TAM_COLLECTOR_ATTR_UNSPECIFIED       TamCollectorAttr = 0
	TamCollectorAttr_TAM_COLLECTOR_ATTR_SRC_IP            TamCollectorAttr = 1
	TamCollectorAttr_TAM_COLLECTOR_ATTR_DST_IP            TamCollectorAttr = 2
	TamCollectorAttr_TAM_COLLECTOR_ATTR_LOCALHOST         TamCollectorAttr = 3
	TamCollectorAttr_TAM_COLLECTOR_ATTR_VIRTUAL_ROUTER_ID TamCollectorAttr = 4
	TamCollectorAttr_TAM_COLLECTOR_ATTR_TRUNCATE_SIZE     TamCollectorAttr = 5
	TamCollectorAttr_TAM_COLLECTOR_ATTR_TRANSPORT         TamCollectorAttr = 6
	TamCollectorAttr_TAM_COLLECTOR_ATTR_DSCP_VALUE        TamCollectorAttr = 7
)

// Enum value maps for TamCollectorAttr.
var (
	TamCollectorAttr_name = map[int32]string{
		0: "TAM_COLLECTOR_ATTR_UNSPECIFIED",
		1: "TAM_COLLECTOR_ATTR_SRC_IP",
		2: "TAM_COLLECTOR_ATTR_DST_IP",
		3: "TAM_COLLECTOR_ATTR_LOCALHOST",
		4: "TAM_COLLECTOR_ATTR_VIRTUAL_ROUTER_ID",
		5: "TAM_COLLECTOR_ATTR_TRUNCATE_SIZE",
		6: "TAM_COLLECTOR_ATTR_TRANSPORT",
		7: "TAM_COLLECTOR_ATTR_DSCP_VALUE",
	}
	TamCollectorAttr_value = map[string]int32{
		"TAM_COLLECTOR_ATTR_UNSPECIFIED":       0,
		"TAM_COLLECTOR_ATTR_SRC_IP":            1,
		"TAM_COLLECTOR_ATTR_DST_IP":            2,
		"TAM_COLLECTOR_ATTR_LOCALHOST":         3,
		"TAM_COLLECTOR_ATTR_VIRTUAL_ROUTER_ID": 4,
		"TAM_COLLECTOR_ATTR_TRUNCATE_SIZE":     5,
		"TAM_COLLECTOR_ATTR_TRANSPORT":         6,
		"TAM_COLLECTOR_ATTR_DSCP_VALUE":        7,
	}
)

func (x TamCollectorAttr) Enum() *TamCollectorAttr {
	p := new(TamCollectorAttr)
	*p = x
	return p
}

func (x TamCollectorAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamCollectorAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tam_proto_enumTypes[8].Descriptor()
}

func (TamCollectorAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tam_proto_enumTypes[8]
}

func (x TamCollectorAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamCollectorAttr.Descriptor instead.
func (TamCollectorAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{8}
}

type TamEventActionAttr int32

const (
	TamEventActionAttr_TAM_EVENT_ACTION_ATTR_UNSPECIFIED     TamEventActionAttr = 0
	TamEventActionAttr_TAM_EVENT_ACTION_ATTR_REPORT_TYPE     TamEventActionAttr = 1
	TamEventActionAttr_TAM_EVENT_ACTION_ATTR_QOS_ACTION_TYPE TamEventActionAttr = 2
)

// Enum value maps for TamEventActionAttr.
var (
	TamEventActionAttr_name = map[int32]string{
		0: "TAM_EVENT_ACTION_ATTR_UNSPECIFIED",
		1: "TAM_EVENT_ACTION_ATTR_REPORT_TYPE",
		2: "TAM_EVENT_ACTION_ATTR_QOS_ACTION_TYPE",
	}
	TamEventActionAttr_value = map[string]int32{
		"TAM_EVENT_ACTION_ATTR_UNSPECIFIED":     0,
		"TAM_EVENT_ACTION_ATTR_REPORT_TYPE":     1,
		"TAM_EVENT_ACTION_ATTR_QOS_ACTION_TYPE": 2,
	}
)

func (x TamEventActionAttr) Enum() *TamEventActionAttr {
	p := new(TamEventActionAttr)
	*p = x
	return p
}

func (x TamEventActionAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamEventActionAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tam_proto_enumTypes[9].Descriptor()
}

func (TamEventActionAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tam_proto_enumTypes[9]
}

func (x TamEventActionAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamEventActionAttr.Descriptor instead.
func (TamEventActionAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{9}
}

type TamEventAttr int32

const (
	TamEventAttr_TAM_EVENT_ATTR_UNSPECIFIED    TamEventAttr = 0
	TamEventAttr_TAM_EVENT_ATTR_TYPE           TamEventAttr = 1
	TamEventAttr_TAM_EVENT_ATTR_ACTION_LIST    TamEventAttr = 2
	TamEventAttr_TAM_EVENT_ATTR_COLLECTOR_LIST TamEventAttr = 3
	TamEventAttr_TAM_EVENT_ATTR_THRESHOLD      TamEventAttr = 4
	TamEventAttr_TAM_EVENT_ATTR_DSCP_VALUE     TamEventAttr = 5
)

// Enum value maps for TamEventAttr.
var (
	TamEventAttr_name = map[int32]string{
		0: "TAM_EVENT_ATTR_UNSPECIFIED",
		1: "TAM_EVENT_ATTR_TYPE",
		2: "TAM_EVENT_ATTR_ACTION_LIST",
		3: "TAM_EVENT_ATTR_COLLECTOR_LIST",
		4: "TAM_EVENT_ATTR_THRESHOLD",
		5: "TAM_EVENT_ATTR_DSCP_VALUE",
	}
	TamEventAttr_value = map[string]int32{
		"TAM_EVENT_ATTR_UNSPECIFIED":    0,
		"TAM_EVENT_ATTR_TYPE":           1,
		"TAM_EVENT_ATTR_ACTION_LIST":    2,
		"TAM_EVENT_ATTR_COLLECTOR_LIST": 3,
		"TAM_EVENT_ATTR_THRESHOLD":      4,
		"TAM_EVENT_ATTR_DSCP_VALUE":     5,
	}
)

func (x TamEventAttr) Enum() *TamEventAttr {
	p := new(TamEventAttr)
	*p = x
	return p
}

func (x TamEventAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamEventAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tam_proto_enumTypes[10].Descriptor()
}

func (TamEventAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tam_proto_enumTypes[10]
}

func (x TamEventAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamEventAttr.Descriptor instead.
func (TamEventAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{10}
}

type CreateTamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch               uint64             `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	TelemetryObjectsList []uint64           `protobuf:"varint,2,rep,packed,name=telemetry_objects_list,json=telemetryObjectsList,proto3" json:"telemetry_objects_list,omitempty"`
	EventObjectsList     []uint64           `protobuf:"varint,3,rep,packed,name=event_objects_list,json=eventObjectsList,proto3" json:"event_objects_list,omitempty"`
	IntObjectsList       []uint64           `protobuf:"varint,4,rep,packed,name=int_objects_list,json=intObjectsList,proto3" json:"int_objects_list,omitempty"`
	TamBindPointTypeList []TamBindPointType `protobuf:"varint,5,rep,packed,name=tam_bind_point_type_list,json=tamBindPointTypeList,proto3,enum=lemming.dataplane.sai.TamBindPointType" json:"tam_bind_point_type_list,omitempty"`
}

func (x *CreateTamRequest) Reset() {
	*x = CreateTamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamRequest) ProtoMessage() {}

func (x *CreateTamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamRequest.ProtoReflect.Descriptor instead.
func (*CreateTamRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTamRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTamRequest) GetTelemetryObjectsList() []uint64 {
	if x != nil {
		return x.TelemetryObjectsList
	}
	return nil
}

func (x *CreateTamRequest) GetEventObjectsList() []uint64 {
	if x != nil {
		return x.EventObjectsList
	}
	return nil
}

func (x *CreateTamRequest) GetIntObjectsList() []uint64 {
	if x != nil {
		return x.IntObjectsList
	}
	return nil
}

func (x *CreateTamRequest) GetTamBindPointTypeList() []TamBindPointType {
	if x != nil {
		return x.TamBindPointTypeList
	}
	return nil
}

type CreateTamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTamResponse) Reset() {
	*x = CreateTamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamResponse) ProtoMessage() {}

func (x *CreateTamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamResponse.ProtoReflect.Descriptor instead.
func (*CreateTamResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTamResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTamRequest) Reset() {
	*x = RemoveTamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamRequest) ProtoMessage() {}

func (x *RemoveTamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamRequest.ProtoReflect.Descriptor instead.
func (*RemoveTamRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveTamRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTamResponse) Reset() {
	*x = RemoveTamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamResponse) ProtoMessage() {}

func (x *RemoveTamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamResponse.ProtoReflect.Descriptor instead.
func (*RemoveTamResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{3}
}

type SetTamAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                  uint64   `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	TelemetryObjectsList []uint64 `protobuf:"varint,2,rep,packed,name=telemetry_objects_list,json=telemetryObjectsList,proto3" json:"telemetry_objects_list,omitempty"`
	EventObjectsList     []uint64 `protobuf:"varint,3,rep,packed,name=event_objects_list,json=eventObjectsList,proto3" json:"event_objects_list,omitempty"`
	IntObjectsList       []uint64 `protobuf:"varint,4,rep,packed,name=int_objects_list,json=intObjectsList,proto3" json:"int_objects_list,omitempty"`
}

func (x *SetTamAttributeRequest) Reset() {
	*x = SetTamAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamAttributeRequest) ProtoMessage() {}

func (x *SetTamAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTamAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{4}
}

func (x *SetTamAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTamAttributeRequest) GetTelemetryObjectsList() []uint64 {
	if x != nil {
		return x.TelemetryObjectsList
	}
	return nil
}

func (x *SetTamAttributeRequest) GetEventObjectsList() []uint64 {
	if x != nil {
		return x.EventObjectsList
	}
	return nil
}

func (x *SetTamAttributeRequest) GetIntObjectsList() []uint64 {
	if x != nil {
		return x.IntObjectsList
	}
	return nil
}

type SetTamAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTamAttributeResponse) Reset() {
	*x = SetTamAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamAttributeResponse) ProtoMessage() {}

func (x *SetTamAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTamAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{5}
}

type GetTamAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64    `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TamAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TamAttr" json:"attr_type,omitempty"`
}

func (x *GetTamAttributeRequest) Reset() {
	*x = GetTamAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamAttributeRequest) ProtoMessage() {}

func (x *GetTamAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTamAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{6}
}

func (x *GetTamAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTamAttributeRequest) GetAttrType() []TamAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTamAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TamAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTamAttributeResponse) Reset() {
	*x = GetTamAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamAttributeResponse) ProtoMessage() {}

func (x *GetTamAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTamAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{7}
}

func (x *GetTamAttributeResponse) GetAttr() *TamAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTamMathFuncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch             uint64              `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	TamTelMathFuncType *TamTelMathFuncType `protobuf:"varint,2,opt,name=tam_tel_math_func_type,json=tamTelMathFuncType,proto3,enum=lemming.dataplane.sai.TamTelMathFuncType,oneof" json:"tam_tel_math_func_type,omitempty"`
}

func (x *CreateTamMathFuncRequest) Reset() {
	*x = CreateTamMathFuncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamMathFuncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamMathFuncRequest) ProtoMessage() {}

func (x *CreateTamMathFuncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamMathFuncRequest.ProtoReflect.Descriptor instead.
func (*CreateTamMathFuncRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTamMathFuncRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTamMathFuncRequest) GetTamTelMathFuncType() TamTelMathFuncType {
	if x != nil && x.TamTelMathFuncType != nil {
		return *x.TamTelMathFuncType
	}
	return TamTelMathFuncType_TAM_TEL_MATH_FUNC_TYPE_UNSPECIFIED
}

type CreateTamMathFuncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTamMathFuncResponse) Reset() {
	*x = CreateTamMathFuncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamMathFuncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamMathFuncResponse) ProtoMessage() {}

func (x *CreateTamMathFuncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamMathFuncResponse.ProtoReflect.Descriptor instead.
func (*CreateTamMathFuncResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTamMathFuncResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamMathFuncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTamMathFuncRequest) Reset() {
	*x = RemoveTamMathFuncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamMathFuncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamMathFuncRequest) ProtoMessage() {}

func (x *RemoveTamMathFuncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamMathFuncRequest.ProtoReflect.Descriptor instead.
func (*RemoveTamMathFuncRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveTamMathFuncRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamMathFuncResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTamMathFuncResponse) Reset() {
	*x = RemoveTamMathFuncResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamMathFuncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamMathFuncResponse) ProtoMessage() {}

func (x *RemoveTamMathFuncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamMathFuncResponse.ProtoReflect.Descriptor instead.
func (*RemoveTamMathFuncResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{11}
}

type SetTamMathFuncAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                uint64              `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	TamTelMathFuncType *TamTelMathFuncType `protobuf:"varint,2,opt,name=tam_tel_math_func_type,json=tamTelMathFuncType,proto3,enum=lemming.dataplane.sai.TamTelMathFuncType,oneof" json:"tam_tel_math_func_type,omitempty"`
}

func (x *SetTamMathFuncAttributeRequest) Reset() {
	*x = SetTamMathFuncAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamMathFuncAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamMathFuncAttributeRequest) ProtoMessage() {}

func (x *SetTamMathFuncAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamMathFuncAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTamMathFuncAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{12}
}

func (x *SetTamMathFuncAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTamMathFuncAttributeRequest) GetTamTelMathFuncType() TamTelMathFuncType {
	if x != nil && x.TamTelMathFuncType != nil {
		return *x.TamTelMathFuncType
	}
	return TamTelMathFuncType_TAM_TEL_MATH_FUNC_TYPE_UNSPECIFIED
}

type SetTamMathFuncAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTamMathFuncAttributeResponse) Reset() {
	*x = SetTamMathFuncAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamMathFuncAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamMathFuncAttributeResponse) ProtoMessage() {}

func (x *SetTamMathFuncAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamMathFuncAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTamMathFuncAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{13}
}

type GetTamMathFuncAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64            `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TamMathFuncAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TamMathFuncAttr" json:"attr_type,omitempty"`
}

func (x *GetTamMathFuncAttributeRequest) Reset() {
	*x = GetTamMathFuncAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamMathFuncAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamMathFuncAttributeRequest) ProtoMessage() {}

func (x *GetTamMathFuncAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamMathFuncAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTamMathFuncAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{14}
}

func (x *GetTamMathFuncAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTamMathFuncAttributeRequest) GetAttrType() []TamMathFuncAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTamMathFuncAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TamMathFuncAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTamMathFuncAttributeResponse) Reset() {
	*x = GetTamMathFuncAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamMathFuncAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamMathFuncAttributeResponse) ProtoMessage() {}

func (x *GetTamMathFuncAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamMathFuncAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTamMathFuncAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{15}
}

func (x *GetTamMathFuncAttributeResponse) GetAttr() *TamMathFuncAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTamReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                uint64         `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type                  *TamReportType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.TamReportType,oneof" json:"type,omitempty"`
	HistogramNumberOfBins *uint32        `protobuf:"varint,3,opt,name=histogram_number_of_bins,json=histogramNumberOfBins,proto3,oneof" json:"histogram_number_of_bins,omitempty"`
	HistogramBinBoundary  []uint32       `protobuf:"varint,4,rep,packed,name=histogram_bin_boundary,json=histogramBinBoundary,proto3" json:"histogram_bin_boundary,omitempty"`
	Quota                 *uint32        `protobuf:"varint,5,opt,name=quota,proto3,oneof" json:"quota,omitempty"`
	ReportMode            *TamReportMode `protobuf:"varint,6,opt,name=report_mode,json=reportMode,proto3,enum=lemming.dataplane.sai.TamReportMode,oneof" json:"report_mode,omitempty"`
	ReportInterval        *uint32        `protobuf:"varint,7,opt,name=report_interval,json=reportInterval,proto3,oneof" json:"report_interval,omitempty"`
	EnterpriseNumber      *uint32        `protobuf:"varint,8,opt,name=enterprise_number,json=enterpriseNumber,proto3,oneof" json:"enterprise_number,omitempty"`
}

func (x *CreateTamReportRequest) Reset() {
	*x = CreateTamReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamReportRequest) ProtoMessage() {}

func (x *CreateTamReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamReportRequest.ProtoReflect.Descriptor instead.
func (*CreateTamReportRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{16}
}

func (x *CreateTamReportRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTamReportRequest) GetType() TamReportType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TamReportType_TAM_REPORT_TYPE_UNSPECIFIED
}

func (x *CreateTamReportRequest) GetHistogramNumberOfBins() uint32 {
	if x != nil && x.HistogramNumberOfBins != nil {
		return *x.HistogramNumberOfBins
	}
	return 0
}

func (x *CreateTamReportRequest) GetHistogramBinBoundary() []uint32 {
	if x != nil {
		return x.HistogramBinBoundary
	}
	return nil
}

func (x *CreateTamReportRequest) GetQuota() uint32 {
	if x != nil && x.Quota != nil {
		return *x.Quota
	}
	return 0
}

func (x *CreateTamReportRequest) GetReportMode() TamReportMode {
	if x != nil && x.ReportMode != nil {
		return *x.ReportMode
	}
	return TamReportMode_TAM_REPORT_MODE_UNSPECIFIED
}

func (x *CreateTamReportRequest) GetReportInterval() uint32 {
	if x != nil && x.ReportInterval != nil {
		return *x.ReportInterval
	}
	return 0
}

func (x *CreateTamReportRequest) GetEnterpriseNumber() uint32 {
	if x != nil && x.EnterpriseNumber != nil {
		return *x.EnterpriseNumber
	}
	return 0
}

type CreateTamReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTamReportResponse) Reset() {
	*x = CreateTamReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamReportResponse) ProtoMessage() {}

func (x *CreateTamReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamReportResponse.ProtoReflect.Descriptor instead.
func (*CreateTamReportResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{17}
}

func (x *CreateTamReportResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTamReportRequest) Reset() {
	*x = RemoveTamReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamReportRequest) ProtoMessage() {}

func (x *RemoveTamReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamReportRequest.ProtoReflect.Descriptor instead.
func (*RemoveTamReportRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveTamReportRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTamReportResponse) Reset() {
	*x = RemoveTamReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamReportResponse) ProtoMessage() {}

func (x *RemoveTamReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamReportResponse.ProtoReflect.Descriptor instead.
func (*RemoveTamReportResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{19}
}

type SetTamReportAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid              uint64         `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Type             *TamReportType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.TamReportType,oneof" json:"type,omitempty"`
	Quota            *uint32        `protobuf:"varint,3,opt,name=quota,proto3,oneof" json:"quota,omitempty"`
	ReportInterval   *uint32        `protobuf:"varint,4,opt,name=report_interval,json=reportInterval,proto3,oneof" json:"report_interval,omitempty"`
	EnterpriseNumber *uint32        `protobuf:"varint,5,opt,name=enterprise_number,json=enterpriseNumber,proto3,oneof" json:"enterprise_number,omitempty"`
}

func (x *SetTamReportAttributeRequest) Reset() {
	*x = SetTamReportAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamReportAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamReportAttributeRequest) ProtoMessage() {}

func (x *SetTamReportAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamReportAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTamReportAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{20}
}

func (x *SetTamReportAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTamReportAttributeRequest) GetType() TamReportType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TamReportType_TAM_REPORT_TYPE_UNSPECIFIED
}

func (x *SetTamReportAttributeRequest) GetQuota() uint32 {
	if x != nil && x.Quota != nil {
		return *x.Quota
	}
	return 0
}

func (x *SetTamReportAttributeRequest) GetReportInterval() uint32 {
	if x != nil && x.ReportInterval != nil {
		return *x.ReportInterval
	}
	return 0
}

func (x *SetTamReportAttributeRequest) GetEnterpriseNumber() uint32 {
	if x != nil && x.EnterpriseNumber != nil {
		return *x.EnterpriseNumber
	}
	return 0
}

type SetTamReportAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTamReportAttributeResponse) Reset() {
	*x = SetTamReportAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamReportAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamReportAttributeResponse) ProtoMessage() {}

func (x *SetTamReportAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamReportAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTamReportAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{21}
}

type GetTamReportAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64          `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TamReportAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TamReportAttr" json:"attr_type,omitempty"`
}

func (x *GetTamReportAttributeRequest) Reset() {
	*x = GetTamReportAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamReportAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamReportAttributeRequest) ProtoMessage() {}

func (x *GetTamReportAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamReportAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTamReportAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{22}
}

func (x *GetTamReportAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTamReportAttributeRequest) GetAttrType() []TamReportAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTamReportAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TamReportAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTamReportAttributeResponse) Reset() {
	*x = GetTamReportAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamReportAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamReportAttributeResponse) ProtoMessage() {}

func (x *GetTamReportAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamReportAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTamReportAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{23}
}

func (x *GetTamReportAttributeResponse) GetAttr() *TamReportAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTamEventThresholdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch        uint64                 `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	HighWatermark *uint32                `protobuf:"varint,2,opt,name=high_watermark,json=highWatermark,proto3,oneof" json:"high_watermark,omitempty"`
	LowWatermark  *uint32                `protobuf:"varint,3,opt,name=low_watermark,json=lowWatermark,proto3,oneof" json:"low_watermark,omitempty"`
	Latency       *uint32                `protobuf:"varint,4,opt,name=latency,proto3,oneof" json:"latency,omitempty"`
	Rate          *uint32                `protobuf:"varint,5,opt,name=rate,proto3,oneof" json:"rate,omitempty"`
	AbsValue      *uint32                `protobuf:"varint,6,opt,name=abs_value,json=absValue,proto3,oneof" json:"abs_value,omitempty"`
	Unit          *TamEventThresholdUnit `protobuf:"varint,7,opt,name=unit,proto3,enum=lemming.dataplane.sai.TamEventThresholdUnit,oneof" json:"unit,omitempty"`
}

func (x *CreateTamEventThresholdRequest) Reset() {
	*x = CreateTamEventThresholdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamEventThresholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamEventThresholdRequest) ProtoMessage() {}

func (x *CreateTamEventThresholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamEventThresholdRequest.ProtoReflect.Descriptor instead.
func (*CreateTamEventThresholdRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{24}
}

func (x *CreateTamEventThresholdRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTamEventThresholdRequest) GetHighWatermark() uint32 {
	if x != nil && x.HighWatermark != nil {
		return *x.HighWatermark
	}
	return 0
}

func (x *CreateTamEventThresholdRequest) GetLowWatermark() uint32 {
	if x != nil && x.LowWatermark != nil {
		return *x.LowWatermark
	}
	return 0
}

func (x *CreateTamEventThresholdRequest) GetLatency() uint32 {
	if x != nil && x.Latency != nil {
		return *x.Latency
	}
	return 0
}

func (x *CreateTamEventThresholdRequest) GetRate() uint32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *CreateTamEventThresholdRequest) GetAbsValue() uint32 {
	if x != nil && x.AbsValue != nil {
		return *x.AbsValue
	}
	return 0
}

func (x *CreateTamEventThresholdRequest) GetUnit() TamEventThresholdUnit {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return TamEventThresholdUnit_TAM_EVENT_THRESHOLD_UNIT_UNSPECIFIED
}

type CreateTamEventThresholdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTamEventThresholdResponse) Reset() {
	*x = CreateTamEventThresholdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamEventThresholdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamEventThresholdResponse) ProtoMessage() {}

func (x *CreateTamEventThresholdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamEventThresholdResponse.ProtoReflect.Descriptor instead.
func (*CreateTamEventThresholdResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{25}
}

func (x *CreateTamEventThresholdResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamEventThresholdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTamEventThresholdRequest) Reset() {
	*x = RemoveTamEventThresholdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamEventThresholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamEventThresholdRequest) ProtoMessage() {}

func (x *RemoveTamEventThresholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamEventThresholdRequest.ProtoReflect.Descriptor instead.
func (*RemoveTamEventThresholdRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{26}
}

func (x *RemoveTamEventThresholdRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamEventThresholdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTamEventThresholdResponse) Reset() {
	*x = RemoveTamEventThresholdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamEventThresholdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamEventThresholdResponse) ProtoMessage() {}

func (x *RemoveTamEventThresholdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamEventThresholdResponse.ProtoReflect.Descriptor instead.
func (*RemoveTamEventThresholdResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{27}
}

type SetTamEventThresholdAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	HighWatermark *uint32                `protobuf:"varint,2,opt,name=high_watermark,json=highWatermark,proto3,oneof" json:"high_watermark,omitempty"`
	LowWatermark  *uint32                `protobuf:"varint,3,opt,name=low_watermark,json=lowWatermark,proto3,oneof" json:"low_watermark,omitempty"`
	Latency       *uint32                `protobuf:"varint,4,opt,name=latency,proto3,oneof" json:"latency,omitempty"`
	Rate          *uint32                `protobuf:"varint,5,opt,name=rate,proto3,oneof" json:"rate,omitempty"`
	AbsValue      *uint32                `protobuf:"varint,6,opt,name=abs_value,json=absValue,proto3,oneof" json:"abs_value,omitempty"`
	Unit          *TamEventThresholdUnit `protobuf:"varint,7,opt,name=unit,proto3,enum=lemming.dataplane.sai.TamEventThresholdUnit,oneof" json:"unit,omitempty"`
}

func (x *SetTamEventThresholdAttributeRequest) Reset() {
	*x = SetTamEventThresholdAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamEventThresholdAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamEventThresholdAttributeRequest) ProtoMessage() {}

func (x *SetTamEventThresholdAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamEventThresholdAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTamEventThresholdAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{28}
}

func (x *SetTamEventThresholdAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTamEventThresholdAttributeRequest) GetHighWatermark() uint32 {
	if x != nil && x.HighWatermark != nil {
		return *x.HighWatermark
	}
	return 0
}

func (x *SetTamEventThresholdAttributeRequest) GetLowWatermark() uint32 {
	if x != nil && x.LowWatermark != nil {
		return *x.LowWatermark
	}
	return 0
}

func (x *SetTamEventThresholdAttributeRequest) GetLatency() uint32 {
	if x != nil && x.Latency != nil {
		return *x.Latency
	}
	return 0
}

func (x *SetTamEventThresholdAttributeRequest) GetRate() uint32 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *SetTamEventThresholdAttributeRequest) GetAbsValue() uint32 {
	if x != nil && x.AbsValue != nil {
		return *x.AbsValue
	}
	return 0
}

func (x *SetTamEventThresholdAttributeRequest) GetUnit() TamEventThresholdUnit {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return TamEventThresholdUnit_TAM_EVENT_THRESHOLD_UNIT_UNSPECIFIED
}

type SetTamEventThresholdAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTamEventThresholdAttributeResponse) Reset() {
	*x = SetTamEventThresholdAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamEventThresholdAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamEventThresholdAttributeResponse) ProtoMessage() {}

func (x *SetTamEventThresholdAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamEventThresholdAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTamEventThresholdAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{29}
}

type GetTamEventThresholdAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64                  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TamEventThresholdAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TamEventThresholdAttr" json:"attr_type,omitempty"`
}

func (x *GetTamEventThresholdAttributeRequest) Reset() {
	*x = GetTamEventThresholdAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamEventThresholdAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamEventThresholdAttributeRequest) ProtoMessage() {}

func (x *GetTamEventThresholdAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamEventThresholdAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTamEventThresholdAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{30}
}

func (x *GetTamEventThresholdAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTamEventThresholdAttributeRequest) GetAttrType() []TamEventThresholdAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTamEventThresholdAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TamEventThresholdAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTamEventThresholdAttributeResponse) Reset() {
	*x = GetTamEventThresholdAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamEventThresholdAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamEventThresholdAttributeResponse) ProtoMessage() {}

func (x *GetTamEventThresholdAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamEventThresholdAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTamEventThresholdAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{31}
}

func (x *GetTamEventThresholdAttributeResponse) GetAttr() *TamEventThresholdAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTamIntRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                    uint64              `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type                      *TamIntType         `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.TamIntType,oneof" json:"type,omitempty"`
	DeviceId                  *uint32             `protobuf:"varint,3,opt,name=device_id,json=deviceId,proto3,oneof" json:"device_id,omitempty"`
	IoamTraceType             *uint32             `protobuf:"varint,4,opt,name=ioam_trace_type,json=ioamTraceType,proto3,oneof" json:"ioam_trace_type,omitempty"`
	IntPresenceType           *TamIntPresenceType `protobuf:"varint,5,opt,name=int_presence_type,json=intPresenceType,proto3,enum=lemming.dataplane.sai.TamIntPresenceType,oneof" json:"int_presence_type,omitempty"`
	IntPresencePb1            *uint32             `protobuf:"varint,6,opt,name=int_presence_pb1,json=intPresencePb1,proto3,oneof" json:"int_presence_pb1,omitempty"`
	IntPresencePb2            *uint32             `protobuf:"varint,7,opt,name=int_presence_pb2,json=intPresencePb2,proto3,oneof" json:"int_presence_pb2,omitempty"`
	IntPresenceDscpValue      *uint32             `protobuf:"varint,8,opt,name=int_presence_dscp_value,json=intPresenceDscpValue,proto3,oneof" json:"int_presence_dscp_value,omitempty"`
	Inline                    *bool               `protobuf:"varint,9,opt,name=inline,proto3,oneof" json:"inline,omitempty"`
	IntPresenceL3Protocol     *uint32             `protobuf:"varint,10,opt,name=int_presence_l3_protocol,json=intPresenceL3Protocol,proto3,oneof" json:"int_presence_l3_protocol,omitempty"`
	TraceVector               *uint32             `protobuf:"varint,11,opt,name=trace_vector,json=traceVector,proto3,oneof" json:"trace_vector,omitempty"`
	ActionVector              *uint32             `protobuf:"varint,12,opt,name=action_vector,json=actionVector,proto3,oneof" json:"action_vector,omitempty"`
	P4IntInstructionBitmap    *uint32             `protobuf:"varint,13,opt,name=p4_int_instruction_bitmap,json=p4IntInstructionBitmap,proto3,oneof" json:"p4_int_instruction_bitmap,omitempty"`
	MetadataFragmentEnable    *bool               `protobuf:"varint,14,opt,name=metadata_fragment_enable,json=metadataFragmentEnable,proto3,oneof" json:"metadata_fragment_enable,omitempty"`
	MetadataChecksumEnable    *bool               `protobuf:"varint,15,opt,name=metadata_checksum_enable,json=metadataChecksumEnable,proto3,oneof" json:"metadata_checksum_enable,omitempty"`
	ReportAllPackets          *bool               `protobuf:"varint,16,opt,name=report_all_packets,json=reportAllPackets,proto3,oneof" json:"report_all_packets,omitempty"`
	FlowLivenessPeriod        *uint32             `protobuf:"varint,17,opt,name=flow_liveness_period,json=flowLivenessPeriod,proto3,oneof" json:"flow_liveness_period,omitempty"`
	LatencySensitivity        *uint32             `protobuf:"varint,18,opt,name=latency_sensitivity,json=latencySensitivity,proto3,oneof" json:"latency_sensitivity,omitempty"`
	AclGroup                  *uint64             `protobuf:"varint,19,opt,name=acl_group,json=aclGroup,proto3,oneof" json:"acl_group,omitempty"`
	MaxHopCount               *uint32             `protobuf:"varint,20,opt,name=max_hop_count,json=maxHopCount,proto3,oneof" json:"max_hop_count,omitempty"`
	MaxLength                 *uint32             `protobuf:"varint,21,opt,name=max_length,json=maxLength,proto3,oneof" json:"max_length,omitempty"`
	NameSpaceId               *uint32             `protobuf:"varint,22,opt,name=name_space_id,json=nameSpaceId,proto3,oneof" json:"name_space_id,omitempty"`
	NameSpaceIdGlobal         *bool               `protobuf:"varint,23,opt,name=name_space_id_global,json=nameSpaceIdGlobal,proto3,oneof" json:"name_space_id_global,omitempty"`
	IngressSamplepacketEnable *uint64             `protobuf:"varint,24,opt,name=ingress_samplepacket_enable,json=ingressSamplepacketEnable,proto3,oneof" json:"ingress_samplepacket_enable,omitempty"`
	CollectorList             []uint64            `protobuf:"varint,25,rep,packed,name=collector_list,json=collectorList,proto3" json:"collector_list,omitempty"`
	MathFunc                  *uint64             `protobuf:"varint,26,opt,name=math_func,json=mathFunc,proto3,oneof" json:"math_func,omitempty"`
	ReportId                  *uint64             `protobuf:"varint,27,opt,name=report_id,json=reportId,proto3,oneof" json:"report_id,omitempty"`
}

func (x *CreateTamIntRequest) Reset() {
	*x = CreateTamIntRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamIntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamIntRequest) ProtoMessage() {}

func (x *CreateTamIntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamIntRequest.ProtoReflect.Descriptor instead.
func (*CreateTamIntRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{32}
}

func (x *CreateTamIntRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTamIntRequest) GetType() TamIntType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TamIntType_TAM_INT_TYPE_UNSPECIFIED
}

func (x *CreateTamIntRequest) GetDeviceId() uint32 {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return 0
}

func (x *CreateTamIntRequest) GetIoamTraceType() uint32 {
	if x != nil && x.IoamTraceType != nil {
		return *x.IoamTraceType
	}
	return 0
}

func (x *CreateTamIntRequest) GetIntPresenceType() TamIntPresenceType {
	if x != nil && x.IntPresenceType != nil {
		return *x.IntPresenceType
	}
	return TamIntPresenceType_TAM_INT_PRESENCE_TYPE_UNSPECIFIED
}

func (x *CreateTamIntRequest) GetIntPresencePb1() uint32 {
	if x != nil && x.IntPresencePb1 != nil {
		return *x.IntPresencePb1
	}
	return 0
}

func (x *CreateTamIntRequest) GetIntPresencePb2() uint32 {
	if x != nil && x.IntPresencePb2 != nil {
		return *x.IntPresencePb2
	}
	return 0
}

func (x *CreateTamIntRequest) GetIntPresenceDscpValue() uint32 {
	if x != nil && x.IntPresenceDscpValue != nil {
		return *x.IntPresenceDscpValue
	}
	return 0
}

func (x *CreateTamIntRequest) GetInline() bool {
	if x != nil && x.Inline != nil {
		return *x.Inline
	}
	return false
}

func (x *CreateTamIntRequest) GetIntPresenceL3Protocol() uint32 {
	if x != nil && x.IntPresenceL3Protocol != nil {
		return *x.IntPresenceL3Protocol
	}
	return 0
}

func (x *CreateTamIntRequest) GetTraceVector() uint32 {
	if x != nil && x.TraceVector != nil {
		return *x.TraceVector
	}
	return 0
}

func (x *CreateTamIntRequest) GetActionVector() uint32 {
	if x != nil && x.ActionVector != nil {
		return *x.ActionVector
	}
	return 0
}

func (x *CreateTamIntRequest) GetP4IntInstructionBitmap() uint32 {
	if x != nil && x.P4IntInstructionBitmap != nil {
		return *x.P4IntInstructionBitmap
	}
	return 0
}

func (x *CreateTamIntRequest) GetMetadataFragmentEnable() bool {
	if x != nil && x.MetadataFragmentEnable != nil {
		return *x.MetadataFragmentEnable
	}
	return false
}

func (x *CreateTamIntRequest) GetMetadataChecksumEnable() bool {
	if x != nil && x.MetadataChecksumEnable != nil {
		return *x.MetadataChecksumEnable
	}
	return false
}

func (x *CreateTamIntRequest) GetReportAllPackets() bool {
	if x != nil && x.ReportAllPackets != nil {
		return *x.ReportAllPackets
	}
	return false
}

func (x *CreateTamIntRequest) GetFlowLivenessPeriod() uint32 {
	if x != nil && x.FlowLivenessPeriod != nil {
		return *x.FlowLivenessPeriod
	}
	return 0
}

func (x *CreateTamIntRequest) GetLatencySensitivity() uint32 {
	if x != nil && x.LatencySensitivity != nil {
		return *x.LatencySensitivity
	}
	return 0
}

func (x *CreateTamIntRequest) GetAclGroup() uint64 {
	if x != nil && x.AclGroup != nil {
		return *x.AclGroup
	}
	return 0
}

func (x *CreateTamIntRequest) GetMaxHopCount() uint32 {
	if x != nil && x.MaxHopCount != nil {
		return *x.MaxHopCount
	}
	return 0
}

func (x *CreateTamIntRequest) GetMaxLength() uint32 {
	if x != nil && x.MaxLength != nil {
		return *x.MaxLength
	}
	return 0
}

func (x *CreateTamIntRequest) GetNameSpaceId() uint32 {
	if x != nil && x.NameSpaceId != nil {
		return *x.NameSpaceId
	}
	return 0
}

func (x *CreateTamIntRequest) GetNameSpaceIdGlobal() bool {
	if x != nil && x.NameSpaceIdGlobal != nil {
		return *x.NameSpaceIdGlobal
	}
	return false
}

func (x *CreateTamIntRequest) GetIngressSamplepacketEnable() uint64 {
	if x != nil && x.IngressSamplepacketEnable != nil {
		return *x.IngressSamplepacketEnable
	}
	return 0
}

func (x *CreateTamIntRequest) GetCollectorList() []uint64 {
	if x != nil {
		return x.CollectorList
	}
	return nil
}

func (x *CreateTamIntRequest) GetMathFunc() uint64 {
	if x != nil && x.MathFunc != nil {
		return *x.MathFunc
	}
	return 0
}

func (x *CreateTamIntRequest) GetReportId() uint64 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

type CreateTamIntResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTamIntResponse) Reset() {
	*x = CreateTamIntResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamIntResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamIntResponse) ProtoMessage() {}

func (x *CreateTamIntResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamIntResponse.ProtoReflect.Descriptor instead.
func (*CreateTamIntResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{33}
}

func (x *CreateTamIntResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamIntRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTamIntRequest) Reset() {
	*x = RemoveTamIntRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamIntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamIntRequest) ProtoMessage() {}

func (x *RemoveTamIntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamIntRequest.ProtoReflect.Descriptor instead.
func (*RemoveTamIntRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{34}
}

func (x *RemoveTamIntRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamIntResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTamIntResponse) Reset() {
	*x = RemoveTamIntResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamIntResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamIntResponse) ProtoMessage() {}

func (x *RemoveTamIntResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamIntResponse.ProtoReflect.Descriptor instead.
func (*RemoveTamIntResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{35}
}

type SetTamIntAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                       uint64   `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	IoamTraceType             *uint32  `protobuf:"varint,2,opt,name=ioam_trace_type,json=ioamTraceType,proto3,oneof" json:"ioam_trace_type,omitempty"`
	TraceVector               *uint32  `protobuf:"varint,3,opt,name=trace_vector,json=traceVector,proto3,oneof" json:"trace_vector,omitempty"`
	ActionVector              *uint32  `protobuf:"varint,4,opt,name=action_vector,json=actionVector,proto3,oneof" json:"action_vector,omitempty"`
	P4IntInstructionBitmap    *uint32  `protobuf:"varint,5,opt,name=p4_int_instruction_bitmap,json=p4IntInstructionBitmap,proto3,oneof" json:"p4_int_instruction_bitmap,omitempty"`
	MetadataFragmentEnable    *bool    `protobuf:"varint,6,opt,name=metadata_fragment_enable,json=metadataFragmentEnable,proto3,oneof" json:"metadata_fragment_enable,omitempty"`
	MetadataChecksumEnable    *bool    `protobuf:"varint,7,opt,name=metadata_checksum_enable,json=metadataChecksumEnable,proto3,oneof" json:"metadata_checksum_enable,omitempty"`
	ReportAllPackets          *bool    `protobuf:"varint,8,opt,name=report_all_packets,json=reportAllPackets,proto3,oneof" json:"report_all_packets,omitempty"`
	FlowLivenessPeriod        *uint32  `protobuf:"varint,9,opt,name=flow_liveness_period,json=flowLivenessPeriod,proto3,oneof" json:"flow_liveness_period,omitempty"`
	LatencySensitivity        *uint32  `protobuf:"varint,10,opt,name=latency_sensitivity,json=latencySensitivity,proto3,oneof" json:"latency_sensitivity,omitempty"`
	AclGroup                  *uint64  `protobuf:"varint,11,opt,name=acl_group,json=aclGroup,proto3,oneof" json:"acl_group,omitempty"`
	MaxHopCount               *uint32  `protobuf:"varint,12,opt,name=max_hop_count,json=maxHopCount,proto3,oneof" json:"max_hop_count,omitempty"`
	MaxLength                 *uint32  `protobuf:"varint,13,opt,name=max_length,json=maxLength,proto3,oneof" json:"max_length,omitempty"`
	NameSpaceId               *uint32  `protobuf:"varint,14,opt,name=name_space_id,json=nameSpaceId,proto3,oneof" json:"name_space_id,omitempty"`
	NameSpaceIdGlobal         *bool    `protobuf:"varint,15,opt,name=name_space_id_global,json=nameSpaceIdGlobal,proto3,oneof" json:"name_space_id_global,omitempty"`
	IngressSamplepacketEnable *uint64  `protobuf:"varint,16,opt,name=ingress_samplepacket_enable,json=ingressSamplepacketEnable,proto3,oneof" json:"ingress_samplepacket_enable,omitempty"`
	CollectorList             []uint64 `protobuf:"varint,17,rep,packed,name=collector_list,json=collectorList,proto3" json:"collector_list,omitempty"`
	MathFunc                  *uint64  `protobuf:"varint,18,opt,name=math_func,json=mathFunc,proto3,oneof" json:"math_func,omitempty"`
}

func (x *SetTamIntAttributeRequest) Reset() {
	*x = SetTamIntAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamIntAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamIntAttributeRequest) ProtoMessage() {}

func (x *SetTamIntAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamIntAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTamIntAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{36}
}

func (x *SetTamIntAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTamIntAttributeRequest) GetIoamTraceType() uint32 {
	if x != nil && x.IoamTraceType != nil {
		return *x.IoamTraceType
	}
	return 0
}

func (x *SetTamIntAttributeRequest) GetTraceVector() uint32 {
	if x != nil && x.TraceVector != nil {
		return *x.TraceVector
	}
	return 0
}

func (x *SetTamIntAttributeRequest) GetActionVector() uint32 {
	if x != nil && x.ActionVector != nil {
		return *x.ActionVector
	}
	return 0
}

func (x *SetTamIntAttributeRequest) GetP4IntInstructionBitmap() uint32 {
	if x != nil && x.P4IntInstructionBitmap != nil {
		return *x.P4IntInstructionBitmap
	}
	return 0
}

func (x *SetTamIntAttributeRequest) GetMetadataFragmentEnable() bool {
	if x != nil && x.MetadataFragmentEnable != nil {
		return *x.MetadataFragmentEnable
	}
	return false
}

func (x *SetTamIntAttributeRequest) GetMetadataChecksumEnable() bool {
	if x != nil && x.MetadataChecksumEnable != nil {
		return *x.MetadataChecksumEnable
	}
	return false
}

func (x *SetTamIntAttributeRequest) GetReportAllPackets() bool {
	if x != nil && x.ReportAllPackets != nil {
		return *x.ReportAllPackets
	}
	return false
}

func (x *SetTamIntAttributeRequest) GetFlowLivenessPeriod() uint32 {
	if x != nil && x.FlowLivenessPeriod != nil {
		return *x.FlowLivenessPeriod
	}
	return 0
}

func (x *SetTamIntAttributeRequest) GetLatencySensitivity() uint32 {
	if x != nil && x.LatencySensitivity != nil {
		return *x.LatencySensitivity
	}
	return 0
}

func (x *SetTamIntAttributeRequest) GetAclGroup() uint64 {
	if x != nil && x.AclGroup != nil {
		return *x.AclGroup
	}
	return 0
}

func (x *SetTamIntAttributeRequest) GetMaxHopCount() uint32 {
	if x != nil && x.MaxHopCount != nil {
		return *x.MaxHopCount
	}
	return 0
}

func (x *SetTamIntAttributeRequest) GetMaxLength() uint32 {
	if x != nil && x.MaxLength != nil {
		return *x.MaxLength
	}
	return 0
}

func (x *SetTamIntAttributeRequest) GetNameSpaceId() uint32 {
	if x != nil && x.NameSpaceId != nil {
		return *x.NameSpaceId
	}
	return 0
}

func (x *SetTamIntAttributeRequest) GetNameSpaceIdGlobal() bool {
	if x != nil && x.NameSpaceIdGlobal != nil {
		return *x.NameSpaceIdGlobal
	}
	return false
}

func (x *SetTamIntAttributeRequest) GetIngressSamplepacketEnable() uint64 {
	if x != nil && x.IngressSamplepacketEnable != nil {
		return *x.IngressSamplepacketEnable
	}
	return 0
}

func (x *SetTamIntAttributeRequest) GetCollectorList() []uint64 {
	if x != nil {
		return x.CollectorList
	}
	return nil
}

func (x *SetTamIntAttributeRequest) GetMathFunc() uint64 {
	if x != nil && x.MathFunc != nil {
		return *x.MathFunc
	}
	return 0
}

type SetTamIntAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTamIntAttributeResponse) Reset() {
	*x = SetTamIntAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamIntAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamIntAttributeResponse) ProtoMessage() {}

func (x *SetTamIntAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamIntAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTamIntAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{37}
}

type GetTamIntAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TamIntAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TamIntAttr" json:"attr_type,omitempty"`
}

func (x *GetTamIntAttributeRequest) Reset() {
	*x = GetTamIntAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamIntAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamIntAttributeRequest) ProtoMessage() {}

func (x *GetTamIntAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamIntAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTamIntAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{38}
}

func (x *GetTamIntAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTamIntAttributeRequest) GetAttrType() []TamIntAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTamIntAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TamIntAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTamIntAttributeResponse) Reset() {
	*x = GetTamIntAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamIntAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamIntAttributeResponse) ProtoMessage() {}

func (x *GetTamIntAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamIntAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTamIntAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{39}
}

func (x *GetTamIntAttributeResponse) GetAttr() *TamIntAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTamTelTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                               uint64            `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	TamTelemetryType                     *TamTelemetryType `protobuf:"varint,2,opt,name=tam_telemetry_type,json=tamTelemetryType,proto3,enum=lemming.dataplane.sai.TamTelemetryType,oneof" json:"tam_telemetry_type,omitempty"`
	IntSwitchIdentifier                  *uint32           `protobuf:"varint,3,opt,name=int_switch_identifier,json=intSwitchIdentifier,proto3,oneof" json:"int_switch_identifier,omitempty"`
	SwitchEnablePortStats                *bool             `protobuf:"varint,4,opt,name=switch_enable_port_stats,json=switchEnablePortStats,proto3,oneof" json:"switch_enable_port_stats,omitempty"`
	SwitchEnablePortStatsIngress         *bool             `protobuf:"varint,5,opt,name=switch_enable_port_stats_ingress,json=switchEnablePortStatsIngress,proto3,oneof" json:"switch_enable_port_stats_ingress,omitempty"`
	SwitchEnablePortStatsEgress          *bool             `protobuf:"varint,6,opt,name=switch_enable_port_stats_egress,json=switchEnablePortStatsEgress,proto3,oneof" json:"switch_enable_port_stats_egress,omitempty"`
	SwitchEnableVirtualQueueStats        *bool             `protobuf:"varint,7,opt,name=switch_enable_virtual_queue_stats,json=switchEnableVirtualQueueStats,proto3,oneof" json:"switch_enable_virtual_queue_stats,omitempty"`
	SwitchEnableOutputQueueStats         *bool             `protobuf:"varint,8,opt,name=switch_enable_output_queue_stats,json=switchEnableOutputQueueStats,proto3,oneof" json:"switch_enable_output_queue_stats,omitempty"`
	SwitchEnableMmuStats                 *bool             `protobuf:"varint,9,opt,name=switch_enable_mmu_stats,json=switchEnableMmuStats,proto3,oneof" json:"switch_enable_mmu_stats,omitempty"`
	SwitchEnableFabricStats              *bool             `protobuf:"varint,10,opt,name=switch_enable_fabric_stats,json=switchEnableFabricStats,proto3,oneof" json:"switch_enable_fabric_stats,omitempty"`
	SwitchEnableFilterStats              *bool             `protobuf:"varint,11,opt,name=switch_enable_filter_stats,json=switchEnableFilterStats,proto3,oneof" json:"switch_enable_filter_stats,omitempty"`
	SwitchEnableResourceUtilizationStats *bool             `protobuf:"varint,12,opt,name=switch_enable_resource_utilization_stats,json=switchEnableResourceUtilizationStats,proto3,oneof" json:"switch_enable_resource_utilization_stats,omitempty"`
	FabricQ                              *bool             `protobuf:"varint,13,opt,name=fabric_q,json=fabricQ,proto3,oneof" json:"fabric_q,omitempty"`
	NeEnable                             *bool             `protobuf:"varint,14,opt,name=ne_enable,json=neEnable,proto3,oneof" json:"ne_enable,omitempty"`
	DscpValue                            *uint32           `protobuf:"varint,15,opt,name=dscp_value,json=dscpValue,proto3,oneof" json:"dscp_value,omitempty"`
	MathFunc                             *uint64           `protobuf:"varint,16,opt,name=math_func,json=mathFunc,proto3,oneof" json:"math_func,omitempty"`
	ReportId                             *uint64           `protobuf:"varint,17,opt,name=report_id,json=reportId,proto3,oneof" json:"report_id,omitempty"`
}

func (x *CreateTamTelTypeRequest) Reset() {
	*x = CreateTamTelTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamTelTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamTelTypeRequest) ProtoMessage() {}

func (x *CreateTamTelTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamTelTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateTamTelTypeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{40}
}

func (x *CreateTamTelTypeRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTamTelTypeRequest) GetTamTelemetryType() TamTelemetryType {
	if x != nil && x.TamTelemetryType != nil {
		return *x.TamTelemetryType
	}
	return TamTelemetryType_TAM_TELEMETRY_TYPE_UNSPECIFIED
}

func (x *CreateTamTelTypeRequest) GetIntSwitchIdentifier() uint32 {
	if x != nil && x.IntSwitchIdentifier != nil {
		return *x.IntSwitchIdentifier
	}
	return 0
}

func (x *CreateTamTelTypeRequest) GetSwitchEnablePortStats() bool {
	if x != nil && x.SwitchEnablePortStats != nil {
		return *x.SwitchEnablePortStats
	}
	return false
}

func (x *CreateTamTelTypeRequest) GetSwitchEnablePortStatsIngress() bool {
	if x != nil && x.SwitchEnablePortStatsIngress != nil {
		return *x.SwitchEnablePortStatsIngress
	}
	return false
}

func (x *CreateTamTelTypeRequest) GetSwitchEnablePortStatsEgress() bool {
	if x != nil && x.SwitchEnablePortStatsEgress != nil {
		return *x.SwitchEnablePortStatsEgress
	}
	return false
}

func (x *CreateTamTelTypeRequest) GetSwitchEnableVirtualQueueStats() bool {
	if x != nil && x.SwitchEnableVirtualQueueStats != nil {
		return *x.SwitchEnableVirtualQueueStats
	}
	return false
}

func (x *CreateTamTelTypeRequest) GetSwitchEnableOutputQueueStats() bool {
	if x != nil && x.SwitchEnableOutputQueueStats != nil {
		return *x.SwitchEnableOutputQueueStats
	}
	return false
}

func (x *CreateTamTelTypeRequest) GetSwitchEnableMmuStats() bool {
	if x != nil && x.SwitchEnableMmuStats != nil {
		return *x.SwitchEnableMmuStats
	}
	return false
}

func (x *CreateTamTelTypeRequest) GetSwitchEnableFabricStats() bool {
	if x != nil && x.SwitchEnableFabricStats != nil {
		return *x.SwitchEnableFabricStats
	}
	return false
}

func (x *CreateTamTelTypeRequest) GetSwitchEnableFilterStats() bool {
	if x != nil && x.SwitchEnableFilterStats != nil {
		return *x.SwitchEnableFilterStats
	}
	return false
}

func (x *CreateTamTelTypeRequest) GetSwitchEnableResourceUtilizationStats() bool {
	if x != nil && x.SwitchEnableResourceUtilizationStats != nil {
		return *x.SwitchEnableResourceUtilizationStats
	}
	return false
}

func (x *CreateTamTelTypeRequest) GetFabricQ() bool {
	if x != nil && x.FabricQ != nil {
		return *x.FabricQ
	}
	return false
}

func (x *CreateTamTelTypeRequest) GetNeEnable() bool {
	if x != nil && x.NeEnable != nil {
		return *x.NeEnable
	}
	return false
}

func (x *CreateTamTelTypeRequest) GetDscpValue() uint32 {
	if x != nil && x.DscpValue != nil {
		return *x.DscpValue
	}
	return 0
}

func (x *CreateTamTelTypeRequest) GetMathFunc() uint64 {
	if x != nil && x.MathFunc != nil {
		return *x.MathFunc
	}
	return 0
}

func (x *CreateTamTelTypeRequest) GetReportId() uint64 {
	if x != nil && x.ReportId != nil {
		return *x.ReportId
	}
	return 0
}

type CreateTamTelTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTamTelTypeResponse) Reset() {
	*x = CreateTamTelTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamTelTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamTelTypeResponse) ProtoMessage() {}

func (x *CreateTamTelTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamTelTypeResponse.ProtoReflect.Descriptor instead.
func (*CreateTamTelTypeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{41}
}

func (x *CreateTamTelTypeResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamTelTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTamTelTypeRequest) Reset() {
	*x = RemoveTamTelTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamTelTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamTelTypeRequest) ProtoMessage() {}

func (x *RemoveTamTelTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamTelTypeRequest.ProtoReflect.Descriptor instead.
func (*RemoveTamTelTypeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{42}
}

func (x *RemoveTamTelTypeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamTelTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTamTelTypeResponse) Reset() {
	*x = RemoveTamTelTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamTelTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamTelTypeResponse) ProtoMessage() {}

func (x *RemoveTamTelTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamTelTypeResponse.ProtoReflect.Descriptor instead.
func (*RemoveTamTelTypeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{43}
}

type SetTamTelTypeAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                                  uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	IntSwitchIdentifier                  *uint32 `protobuf:"varint,2,opt,name=int_switch_identifier,json=intSwitchIdentifier,proto3,oneof" json:"int_switch_identifier,omitempty"`
	SwitchEnablePortStats                *bool   `protobuf:"varint,3,opt,name=switch_enable_port_stats,json=switchEnablePortStats,proto3,oneof" json:"switch_enable_port_stats,omitempty"`
	SwitchEnablePortStatsIngress         *bool   `protobuf:"varint,4,opt,name=switch_enable_port_stats_ingress,json=switchEnablePortStatsIngress,proto3,oneof" json:"switch_enable_port_stats_ingress,omitempty"`
	SwitchEnablePortStatsEgress          *bool   `protobuf:"varint,5,opt,name=switch_enable_port_stats_egress,json=switchEnablePortStatsEgress,proto3,oneof" json:"switch_enable_port_stats_egress,omitempty"`
	SwitchEnableVirtualQueueStats        *bool   `protobuf:"varint,6,opt,name=switch_enable_virtual_queue_stats,json=switchEnableVirtualQueueStats,proto3,oneof" json:"switch_enable_virtual_queue_stats,omitempty"`
	SwitchEnableOutputQueueStats         *bool   `protobuf:"varint,7,opt,name=switch_enable_output_queue_stats,json=switchEnableOutputQueueStats,proto3,oneof" json:"switch_enable_output_queue_stats,omitempty"`
	SwitchEnableMmuStats                 *bool   `protobuf:"varint,8,opt,name=switch_enable_mmu_stats,json=switchEnableMmuStats,proto3,oneof" json:"switch_enable_mmu_stats,omitempty"`
	SwitchEnableFabricStats              *bool   `protobuf:"varint,9,opt,name=switch_enable_fabric_stats,json=switchEnableFabricStats,proto3,oneof" json:"switch_enable_fabric_stats,omitempty"`
	SwitchEnableFilterStats              *bool   `protobuf:"varint,10,opt,name=switch_enable_filter_stats,json=switchEnableFilterStats,proto3,oneof" json:"switch_enable_filter_stats,omitempty"`
	SwitchEnableResourceUtilizationStats *bool   `protobuf:"varint,11,opt,name=switch_enable_resource_utilization_stats,json=switchEnableResourceUtilizationStats,proto3,oneof" json:"switch_enable_resource_utilization_stats,omitempty"`
	FabricQ                              *bool   `protobuf:"varint,12,opt,name=fabric_q,json=fabricQ,proto3,oneof" json:"fabric_q,omitempty"`
	NeEnable                             *bool   `protobuf:"varint,13,opt,name=ne_enable,json=neEnable,proto3,oneof" json:"ne_enable,omitempty"`
	DscpValue                            *uint32 `protobuf:"varint,14,opt,name=dscp_value,json=dscpValue,proto3,oneof" json:"dscp_value,omitempty"`
	MathFunc                             *uint64 `protobuf:"varint,15,opt,name=math_func,json=mathFunc,proto3,oneof" json:"math_func,omitempty"`
}

func (x *SetTamTelTypeAttributeRequest) Reset() {
	*x = SetTamTelTypeAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamTelTypeAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamTelTypeAttributeRequest) ProtoMessage() {}

func (x *SetTamTelTypeAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamTelTypeAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTamTelTypeAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{44}
}

func (x *SetTamTelTypeAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTamTelTypeAttributeRequest) GetIntSwitchIdentifier() uint32 {
	if x != nil && x.IntSwitchIdentifier != nil {
		return *x.IntSwitchIdentifier
	}
	return 0
}

func (x *SetTamTelTypeAttributeRequest) GetSwitchEnablePortStats() bool {
	if x != nil && x.SwitchEnablePortStats != nil {
		return *x.SwitchEnablePortStats
	}
	return false
}

func (x *SetTamTelTypeAttributeRequest) GetSwitchEnablePortStatsIngress() bool {
	if x != nil && x.SwitchEnablePortStatsIngress != nil {
		return *x.SwitchEnablePortStatsIngress
	}
	return false
}

func (x *SetTamTelTypeAttributeRequest) GetSwitchEnablePortStatsEgress() bool {
	if x != nil && x.SwitchEnablePortStatsEgress != nil {
		return *x.SwitchEnablePortStatsEgress
	}
	return false
}

func (x *SetTamTelTypeAttributeRequest) GetSwitchEnableVirtualQueueStats() bool {
	if x != nil && x.SwitchEnableVirtualQueueStats != nil {
		return *x.SwitchEnableVirtualQueueStats
	}
	return false
}

func (x *SetTamTelTypeAttributeRequest) GetSwitchEnableOutputQueueStats() bool {
	if x != nil && x.SwitchEnableOutputQueueStats != nil {
		return *x.SwitchEnableOutputQueueStats
	}
	return false
}

func (x *SetTamTelTypeAttributeRequest) GetSwitchEnableMmuStats() bool {
	if x != nil && x.SwitchEnableMmuStats != nil {
		return *x.SwitchEnableMmuStats
	}
	return false
}

func (x *SetTamTelTypeAttributeRequest) GetSwitchEnableFabricStats() bool {
	if x != nil && x.SwitchEnableFabricStats != nil {
		return *x.SwitchEnableFabricStats
	}
	return false
}

func (x *SetTamTelTypeAttributeRequest) GetSwitchEnableFilterStats() bool {
	if x != nil && x.SwitchEnableFilterStats != nil {
		return *x.SwitchEnableFilterStats
	}
	return false
}

func (x *SetTamTelTypeAttributeRequest) GetSwitchEnableResourceUtilizationStats() bool {
	if x != nil && x.SwitchEnableResourceUtilizationStats != nil {
		return *x.SwitchEnableResourceUtilizationStats
	}
	return false
}

func (x *SetTamTelTypeAttributeRequest) GetFabricQ() bool {
	if x != nil && x.FabricQ != nil {
		return *x.FabricQ
	}
	return false
}

func (x *SetTamTelTypeAttributeRequest) GetNeEnable() bool {
	if x != nil && x.NeEnable != nil {
		return *x.NeEnable
	}
	return false
}

func (x *SetTamTelTypeAttributeRequest) GetDscpValue() uint32 {
	if x != nil && x.DscpValue != nil {
		return *x.DscpValue
	}
	return 0
}

func (x *SetTamTelTypeAttributeRequest) GetMathFunc() uint64 {
	if x != nil && x.MathFunc != nil {
		return *x.MathFunc
	}
	return 0
}

type SetTamTelTypeAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTamTelTypeAttributeResponse) Reset() {
	*x = SetTamTelTypeAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamTelTypeAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamTelTypeAttributeResponse) ProtoMessage() {}

func (x *SetTamTelTypeAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamTelTypeAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTamTelTypeAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{45}
}

type GetTamTelTypeAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64           `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TamTelTypeAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TamTelTypeAttr" json:"attr_type,omitempty"`
}

func (x *GetTamTelTypeAttributeRequest) Reset() {
	*x = GetTamTelTypeAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamTelTypeAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamTelTypeAttributeRequest) ProtoMessage() {}

func (x *GetTamTelTypeAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamTelTypeAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTamTelTypeAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{46}
}

func (x *GetTamTelTypeAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTamTelTypeAttributeRequest) GetAttrType() []TamTelTypeAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTamTelTypeAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TamTelTypeAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTamTelTypeAttributeResponse) Reset() {
	*x = GetTamTelTypeAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamTelTypeAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamTelTypeAttributeResponse) ProtoMessage() {}

func (x *GetTamTelTypeAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamTelTypeAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTamTelTypeAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{47}
}

func (x *GetTamTelTypeAttributeResponse) GetAttr() *TamTelTypeAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTamTransportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch            uint64                `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	TransportType     *TamTransportType     `protobuf:"varint,2,opt,name=transport_type,json=transportType,proto3,enum=lemming.dataplane.sai.TamTransportType,oneof" json:"transport_type,omitempty"`
	SrcPort           *uint32               `protobuf:"varint,3,opt,name=src_port,json=srcPort,proto3,oneof" json:"src_port,omitempty"`
	DstPort           *uint32               `protobuf:"varint,4,opt,name=dst_port,json=dstPort,proto3,oneof" json:"dst_port,omitempty"`
	TransportAuthType *TamTransportAuthType `protobuf:"varint,5,opt,name=transport_auth_type,json=transportAuthType,proto3,enum=lemming.dataplane.sai.TamTransportAuthType,oneof" json:"transport_auth_type,omitempty"`
	Mtu               *uint32               `protobuf:"varint,6,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
}

func (x *CreateTamTransportRequest) Reset() {
	*x = CreateTamTransportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamTransportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamTransportRequest) ProtoMessage() {}

func (x *CreateTamTransportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamTransportRequest.ProtoReflect.Descriptor instead.
func (*CreateTamTransportRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{48}
}

func (x *CreateTamTransportRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTamTransportRequest) GetTransportType() TamTransportType {
	if x != nil && x.TransportType != nil {
		return *x.TransportType
	}
	return TamTransportType_TAM_TRANSPORT_TYPE_UNSPECIFIED
}

func (x *CreateTamTransportRequest) GetSrcPort() uint32 {
	if x != nil && x.SrcPort != nil {
		return *x.SrcPort
	}
	return 0
}

func (x *CreateTamTransportRequest) GetDstPort() uint32 {
	if x != nil && x.DstPort != nil {
		return *x.DstPort
	}
	return 0
}

func (x *CreateTamTransportRequest) GetTransportAuthType() TamTransportAuthType {
	if x != nil && x.TransportAuthType != nil {
		return *x.TransportAuthType
	}
	return TamTransportAuthType_TAM_TRANSPORT_AUTH_TYPE_UNSPECIFIED
}

func (x *CreateTamTransportRequest) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

type CreateTamTransportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTamTransportResponse) Reset() {
	*x = CreateTamTransportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamTransportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamTransportResponse) ProtoMessage() {}

func (x *CreateTamTransportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamTransportResponse.ProtoReflect.Descriptor instead.
func (*CreateTamTransportResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{49}
}

func (x *CreateTamTransportResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamTransportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTamTransportRequest) Reset() {
	*x = RemoveTamTransportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamTransportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamTransportRequest) ProtoMessage() {}

func (x *RemoveTamTransportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamTransportRequest.ProtoReflect.Descriptor instead.
func (*RemoveTamTransportRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{50}
}

func (x *RemoveTamTransportRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamTransportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTamTransportResponse) Reset() {
	*x = RemoveTamTransportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamTransportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamTransportResponse) ProtoMessage() {}

func (x *RemoveTamTransportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamTransportResponse.ProtoReflect.Descriptor instead.
func (*RemoveTamTransportResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{51}
}

type SetTamTransportAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid               uint64                `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	SrcPort           *uint32               `protobuf:"varint,2,opt,name=src_port,json=srcPort,proto3,oneof" json:"src_port,omitempty"`
	DstPort           *uint32               `protobuf:"varint,3,opt,name=dst_port,json=dstPort,proto3,oneof" json:"dst_port,omitempty"`
	TransportAuthType *TamTransportAuthType `protobuf:"varint,4,opt,name=transport_auth_type,json=transportAuthType,proto3,enum=lemming.dataplane.sai.TamTransportAuthType,oneof" json:"transport_auth_type,omitempty"`
	Mtu               *uint32               `protobuf:"varint,5,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
}

func (x *SetTamTransportAttributeRequest) Reset() {
	*x = SetTamTransportAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamTransportAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamTransportAttributeRequest) ProtoMessage() {}

func (x *SetTamTransportAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamTransportAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTamTransportAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{52}
}

func (x *SetTamTransportAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTamTransportAttributeRequest) GetSrcPort() uint32 {
	if x != nil && x.SrcPort != nil {
		return *x.SrcPort
	}
	return 0
}

func (x *SetTamTransportAttributeRequest) GetDstPort() uint32 {
	if x != nil && x.DstPort != nil {
		return *x.DstPort
	}
	return 0
}

func (x *SetTamTransportAttributeRequest) GetTransportAuthType() TamTransportAuthType {
	if x != nil && x.TransportAuthType != nil {
		return *x.TransportAuthType
	}
	return TamTransportAuthType_TAM_TRANSPORT_AUTH_TYPE_UNSPECIFIED
}

func (x *SetTamTransportAttributeRequest) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

type SetTamTransportAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTamTransportAttributeResponse) Reset() {
	*x = SetTamTransportAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamTransportAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamTransportAttributeResponse) ProtoMessage() {}

func (x *SetTamTransportAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamTransportAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTamTransportAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{53}
}

type GetTamTransportAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64             `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TamTransportAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TamTransportAttr" json:"attr_type,omitempty"`
}

func (x *GetTamTransportAttributeRequest) Reset() {
	*x = GetTamTransportAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamTransportAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamTransportAttributeRequest) ProtoMessage() {}

func (x *GetTamTransportAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamTransportAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTamTransportAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{54}
}

func (x *GetTamTransportAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTamTransportAttributeRequest) GetAttrType() []TamTransportAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTamTransportAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TamTransportAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTamTransportAttributeResponse) Reset() {
	*x = GetTamTransportAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamTransportAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamTransportAttributeResponse) ProtoMessage() {}

func (x *GetTamTransportAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamTransportAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTamTransportAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{55}
}

func (x *GetTamTransportAttributeResponse) GetAttr() *TamTransportAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTamTelemetryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch            uint64            `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	TamTypeList       []uint64          `protobuf:"varint,2,rep,packed,name=tam_type_list,json=tamTypeList,proto3" json:"tam_type_list,omitempty"`
	CollectorList     []uint64          `protobuf:"varint,3,rep,packed,name=collector_list,json=collectorList,proto3" json:"collector_list,omitempty"`
	TamReportingUnit  *TamReportingUnit `protobuf:"varint,4,opt,name=tam_reporting_unit,json=tamReportingUnit,proto3,enum=lemming.dataplane.sai.TamReportingUnit,oneof" json:"tam_reporting_unit,omitempty"`
	ReportingInterval *uint32           `protobuf:"varint,5,opt,name=reporting_interval,json=reportingInterval,proto3,oneof" json:"reporting_interval,omitempty"`
}

func (x *CreateTamTelemetryRequest) Reset() {
	*x = CreateTamTelemetryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamTelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamTelemetryRequest) ProtoMessage() {}

func (x *CreateTamTelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamTelemetryRequest.ProtoReflect.Descriptor instead.
func (*CreateTamTelemetryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{56}
}

func (x *CreateTamTelemetryRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTamTelemetryRequest) GetTamTypeList() []uint64 {
	if x != nil {
		return x.TamTypeList
	}
	return nil
}

func (x *CreateTamTelemetryRequest) GetCollectorList() []uint64 {
	if x != nil {
		return x.CollectorList
	}
	return nil
}

func (x *CreateTamTelemetryRequest) GetTamReportingUnit() TamReportingUnit {
	if x != nil && x.TamReportingUnit != nil {
		return *x.TamReportingUnit
	}
	return TamReportingUnit_TAM_REPORTING_UNIT_UNSPECIFIED
}

func (x *CreateTamTelemetryRequest) GetReportingInterval() uint32 {
	if x != nil && x.ReportingInterval != nil {
		return *x.ReportingInterval
	}
	return 0
}

type CreateTamTelemetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTamTelemetryResponse) Reset() {
	*x = CreateTamTelemetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamTelemetryResponse) ProtoMessage() {}

func (x *CreateTamTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamTelemetryResponse.ProtoReflect.Descriptor instead.
func (*CreateTamTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{57}
}

func (x *CreateTamTelemetryResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamTelemetryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTamTelemetryRequest) Reset() {
	*x = RemoveTamTelemetryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamTelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamTelemetryRequest) ProtoMessage() {}

func (x *RemoveTamTelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamTelemetryRequest.ProtoReflect.Descriptor instead.
func (*RemoveTamTelemetryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{58}
}

func (x *RemoveTamTelemetryRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamTelemetryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTamTelemetryResponse) Reset() {
	*x = RemoveTamTelemetryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamTelemetryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamTelemetryResponse) ProtoMessage() {}

func (x *RemoveTamTelemetryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamTelemetryResponse.ProtoReflect.Descriptor instead.
func (*RemoveTamTelemetryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{59}
}

type SetTamTelemetryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid               uint64            `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	TamTypeList       []uint64          `protobuf:"varint,2,rep,packed,name=tam_type_list,json=tamTypeList,proto3" json:"tam_type_list,omitempty"`
	TamReportingUnit  *TamReportingUnit `protobuf:"varint,3,opt,name=tam_reporting_unit,json=tamReportingUnit,proto3,enum=lemming.dataplane.sai.TamReportingUnit,oneof" json:"tam_reporting_unit,omitempty"`
	ReportingInterval *uint32           `protobuf:"varint,4,opt,name=reporting_interval,json=reportingInterval,proto3,oneof" json:"reporting_interval,omitempty"`
}

func (x *SetTamTelemetryAttributeRequest) Reset() {
	*x = SetTamTelemetryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamTelemetryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamTelemetryAttributeRequest) ProtoMessage() {}

func (x *SetTamTelemetryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamTelemetryAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTamTelemetryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{60}
}

func (x *SetTamTelemetryAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTamTelemetryAttributeRequest) GetTamTypeList() []uint64 {
	if x != nil {
		return x.TamTypeList
	}
	return nil
}

func (x *SetTamTelemetryAttributeRequest) GetTamReportingUnit() TamReportingUnit {
	if x != nil && x.TamReportingUnit != nil {
		return *x.TamReportingUnit
	}
	return TamReportingUnit_TAM_REPORTING_UNIT_UNSPECIFIED
}

func (x *SetTamTelemetryAttributeRequest) GetReportingInterval() uint32 {
	if x != nil && x.ReportingInterval != nil {
		return *x.ReportingInterval
	}
	return 0
}

type SetTamTelemetryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTamTelemetryAttributeResponse) Reset() {
	*x = SetTamTelemetryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamTelemetryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamTelemetryAttributeResponse) ProtoMessage() {}

func (x *SetTamTelemetryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamTelemetryAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTamTelemetryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{61}
}

type GetTamTelemetryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64             `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TamTelemetryAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TamTelemetryAttr" json:"attr_type,omitempty"`
}

func (x *GetTamTelemetryAttributeRequest) Reset() {
	*x = GetTamTelemetryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamTelemetryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamTelemetryAttributeRequest) ProtoMessage() {}

func (x *GetTamTelemetryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamTelemetryAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTamTelemetryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{62}
}

func (x *GetTamTelemetryAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTamTelemetryAttributeRequest) GetAttrType() []TamTelemetryAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTamTelemetryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TamTelemetryAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTamTelemetryAttributeResponse) Reset() {
	*x = GetTamTelemetryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamTelemetryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamTelemetryAttributeResponse) ProtoMessage() {}

func (x *GetTamTelemetryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamTelemetryAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTamTelemetryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{63}
}

func (x *GetTamTelemetryAttributeResponse) GetAttr() *TamTelemetryAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTamCollectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch          uint64  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	SrcIp           []byte  `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3,oneof" json:"src_ip,omitempty"`
	DstIp           []byte  `protobuf:"bytes,3,opt,name=dst_ip,json=dstIp,proto3,oneof" json:"dst_ip,omitempty"`
	Localhost       *bool   `protobuf:"varint,4,opt,name=localhost,proto3,oneof" json:"localhost,omitempty"`
	VirtualRouterId *uint64 `protobuf:"varint,5,opt,name=virtual_router_id,json=virtualRouterId,proto3,oneof" json:"virtual_router_id,omitempty"`
	TruncateSize    *uint32 `protobuf:"varint,6,opt,name=truncate_size,json=truncateSize,proto3,oneof" json:"truncate_size,omitempty"`
	Transport       *uint64 `protobuf:"varint,7,opt,name=transport,proto3,oneof" json:"transport,omitempty"`
	DscpValue       *uint32 `protobuf:"varint,8,opt,name=dscp_value,json=dscpValue,proto3,oneof" json:"dscp_value,omitempty"`
}

func (x *CreateTamCollectorRequest) Reset() {
	*x = CreateTamCollectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamCollectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamCollectorRequest) ProtoMessage() {}

func (x *CreateTamCollectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamCollectorRequest.ProtoReflect.Descriptor instead.
func (*CreateTamCollectorRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{64}
}

func (x *CreateTamCollectorRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTamCollectorRequest) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *CreateTamCollectorRequest) GetDstIp() []byte {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *CreateTamCollectorRequest) GetLocalhost() bool {
	if x != nil && x.Localhost != nil {
		return *x.Localhost
	}
	return false
}

func (x *CreateTamCollectorRequest) GetVirtualRouterId() uint64 {
	if x != nil && x.VirtualRouterId != nil {
		return *x.VirtualRouterId
	}
	return 0
}

func (x *CreateTamCollectorRequest) GetTruncateSize() uint32 {
	if x != nil && x.TruncateSize != nil {
		return *x.TruncateSize
	}
	return 0
}

func (x *CreateTamCollectorRequest) GetTransport() uint64 {
	if x != nil && x.Transport != nil {
		return *x.Transport
	}
	return 0
}

func (x *CreateTamCollectorRequest) GetDscpValue() uint32 {
	if x != nil && x.DscpValue != nil {
		return *x.DscpValue
	}
	return 0
}

type CreateTamCollectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTamCollectorResponse) Reset() {
	*x = CreateTamCollectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamCollectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamCollectorResponse) ProtoMessage() {}

func (x *CreateTamCollectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamCollectorResponse.ProtoReflect.Descriptor instead.
func (*CreateTamCollectorResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{65}
}

func (x *CreateTamCollectorResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamCollectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTamCollectorRequest) Reset() {
	*x = RemoveTamCollectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamCollectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamCollectorRequest) ProtoMessage() {}

func (x *RemoveTamCollectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamCollectorRequest.ProtoReflect.Descriptor instead.
func (*RemoveTamCollectorRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{66}
}

func (x *RemoveTamCollectorRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamCollectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTamCollectorResponse) Reset() {
	*x = RemoveTamCollectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamCollectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamCollectorResponse) ProtoMessage() {}

func (x *RemoveTamCollectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamCollectorResponse.ProtoReflect.Descriptor instead.
func (*RemoveTamCollectorResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{67}
}

type SetTamCollectorAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid             uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	SrcIp           []byte  `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3,oneof" json:"src_ip,omitempty"`
	DstIp           []byte  `protobuf:"bytes,3,opt,name=dst_ip,json=dstIp,proto3,oneof" json:"dst_ip,omitempty"`
	Localhost       *bool   `protobuf:"varint,4,opt,name=localhost,proto3,oneof" json:"localhost,omitempty"`
	VirtualRouterId *uint64 `protobuf:"varint,5,opt,name=virtual_router_id,json=virtualRouterId,proto3,oneof" json:"virtual_router_id,omitempty"`
	TruncateSize    *uint32 `protobuf:"varint,6,opt,name=truncate_size,json=truncateSize,proto3,oneof" json:"truncate_size,omitempty"`
	Transport       *uint64 `protobuf:"varint,7,opt,name=transport,proto3,oneof" json:"transport,omitempty"`
	DscpValue       *uint32 `protobuf:"varint,8,opt,name=dscp_value,json=dscpValue,proto3,oneof" json:"dscp_value,omitempty"`
}

func (x *SetTamCollectorAttributeRequest) Reset() {
	*x = SetTamCollectorAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamCollectorAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamCollectorAttributeRequest) ProtoMessage() {}

func (x *SetTamCollectorAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamCollectorAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTamCollectorAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{68}
}

func (x *SetTamCollectorAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTamCollectorAttributeRequest) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *SetTamCollectorAttributeRequest) GetDstIp() []byte {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *SetTamCollectorAttributeRequest) GetLocalhost() bool {
	if x != nil && x.Localhost != nil {
		return *x.Localhost
	}
	return false
}

func (x *SetTamCollectorAttributeRequest) GetVirtualRouterId() uint64 {
	if x != nil && x.VirtualRouterId != nil {
		return *x.VirtualRouterId
	}
	return 0
}

func (x *SetTamCollectorAttributeRequest) GetTruncateSize() uint32 {
	if x != nil && x.TruncateSize != nil {
		return *x.TruncateSize
	}
	return 0
}

func (x *SetTamCollectorAttributeRequest) GetTransport() uint64 {
	if x != nil && x.Transport != nil {
		return *x.Transport
	}
	return 0
}

func (x *SetTamCollectorAttributeRequest) GetDscpValue() uint32 {
	if x != nil && x.DscpValue != nil {
		return *x.DscpValue
	}
	return 0
}

type SetTamCollectorAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTamCollectorAttributeResponse) Reset() {
	*x = SetTamCollectorAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamCollectorAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamCollectorAttributeResponse) ProtoMessage() {}

func (x *SetTamCollectorAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamCollectorAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTamCollectorAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{69}
}

type GetTamCollectorAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64             `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TamCollectorAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TamCollectorAttr" json:"attr_type,omitempty"`
}

func (x *GetTamCollectorAttributeRequest) Reset() {
	*x = GetTamCollectorAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamCollectorAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamCollectorAttributeRequest) ProtoMessage() {}

func (x *GetTamCollectorAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamCollectorAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTamCollectorAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{70}
}

func (x *GetTamCollectorAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTamCollectorAttributeRequest) GetAttrType() []TamCollectorAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTamCollectorAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TamCollectorAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTamCollectorAttributeResponse) Reset() {
	*x = GetTamCollectorAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamCollectorAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamCollectorAttributeResponse) ProtoMessage() {}

func (x *GetTamCollectorAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamCollectorAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTamCollectorAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{71}
}

func (x *GetTamCollectorAttributeResponse) GetAttr() *TamCollectorAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTamEventActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch        uint64  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	ReportType    *uint64 `protobuf:"varint,2,opt,name=report_type,json=reportType,proto3,oneof" json:"report_type,omitempty"`
	QosActionType *uint32 `protobuf:"varint,3,opt,name=qos_action_type,json=qosActionType,proto3,oneof" json:"qos_action_type,omitempty"`
}

func (x *CreateTamEventActionRequest) Reset() {
	*x = CreateTamEventActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamEventActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamEventActionRequest) ProtoMessage() {}

func (x *CreateTamEventActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamEventActionRequest.ProtoReflect.Descriptor instead.
func (*CreateTamEventActionRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{72}
}

func (x *CreateTamEventActionRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTamEventActionRequest) GetReportType() uint64 {
	if x != nil && x.ReportType != nil {
		return *x.ReportType
	}
	return 0
}

func (x *CreateTamEventActionRequest) GetQosActionType() uint32 {
	if x != nil && x.QosActionType != nil {
		return *x.QosActionType
	}
	return 0
}

type CreateTamEventActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTamEventActionResponse) Reset() {
	*x = CreateTamEventActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamEventActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamEventActionResponse) ProtoMessage() {}

func (x *CreateTamEventActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamEventActionResponse.ProtoReflect.Descriptor instead.
func (*CreateTamEventActionResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{73}
}

func (x *CreateTamEventActionResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamEventActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTamEventActionRequest) Reset() {
	*x = RemoveTamEventActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamEventActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamEventActionRequest) ProtoMessage() {}

func (x *RemoveTamEventActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamEventActionRequest.ProtoReflect.Descriptor instead.
func (*RemoveTamEventActionRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{74}
}

func (x *RemoveTamEventActionRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamEventActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTamEventActionResponse) Reset() {
	*x = RemoveTamEventActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamEventActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamEventActionResponse) ProtoMessage() {}

func (x *RemoveTamEventActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamEventActionResponse.ProtoReflect.Descriptor instead.
func (*RemoveTamEventActionResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{75}
}

type SetTamEventActionAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid           uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	ReportType    *uint64 `protobuf:"varint,2,opt,name=report_type,json=reportType,proto3,oneof" json:"report_type,omitempty"`
	QosActionType *uint32 `protobuf:"varint,3,opt,name=qos_action_type,json=qosActionType,proto3,oneof" json:"qos_action_type,omitempty"`
}

func (x *SetTamEventActionAttributeRequest) Reset() {
	*x = SetTamEventActionAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamEventActionAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamEventActionAttributeRequest) ProtoMessage() {}

func (x *SetTamEventActionAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamEventActionAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTamEventActionAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{76}
}

func (x *SetTamEventActionAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTamEventActionAttributeRequest) GetReportType() uint64 {
	if x != nil && x.ReportType != nil {
		return *x.ReportType
	}
	return 0
}

func (x *SetTamEventActionAttributeRequest) GetQosActionType() uint32 {
	if x != nil && x.QosActionType != nil {
		return *x.QosActionType
	}
	return 0
}

type SetTamEventActionAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTamEventActionAttributeResponse) Reset() {
	*x = SetTamEventActionAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamEventActionAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamEventActionAttributeResponse) ProtoMessage() {}

func (x *SetTamEventActionAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamEventActionAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTamEventActionAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{77}
}

type GetTamEventActionAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64               `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TamEventActionAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TamEventActionAttr" json:"attr_type,omitempty"`
}

func (x *GetTamEventActionAttributeRequest) Reset() {
	*x = GetTamEventActionAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamEventActionAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamEventActionAttributeRequest) ProtoMessage() {}

func (x *GetTamEventActionAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamEventActionAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTamEventActionAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{78}
}

func (x *GetTamEventActionAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTamEventActionAttributeRequest) GetAttrType() []TamEventActionAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTamEventActionAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TamEventActionAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTamEventActionAttributeResponse) Reset() {
	*x = GetTamEventActionAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamEventActionAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamEventActionAttributeResponse) ProtoMessage() {}

func (x *GetTamEventActionAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamEventActionAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTamEventActionAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{79}
}

func (x *GetTamEventActionAttributeResponse) GetAttr() *TamEventActionAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTamEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch        uint64        `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type          *TamEventType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.TamEventType,oneof" json:"type,omitempty"`
	ActionList    []uint64      `protobuf:"varint,3,rep,packed,name=action_list,json=actionList,proto3" json:"action_list,omitempty"`
	CollectorList []uint64      `protobuf:"varint,4,rep,packed,name=collector_list,json=collectorList,proto3" json:"collector_list,omitempty"`
	Threshold     *uint64       `protobuf:"varint,5,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
	DscpValue     *uint32       `protobuf:"varint,6,opt,name=dscp_value,json=dscpValue,proto3,oneof" json:"dscp_value,omitempty"`
}

func (x *CreateTamEventRequest) Reset() {
	*x = CreateTamEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamEventRequest) ProtoMessage() {}

func (x *CreateTamEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamEventRequest.ProtoReflect.Descriptor instead.
func (*CreateTamEventRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{80}
}

func (x *CreateTamEventRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTamEventRequest) GetType() TamEventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TamEventType_TAM_EVENT_TYPE_UNSPECIFIED
}

func (x *CreateTamEventRequest) GetActionList() []uint64 {
	if x != nil {
		return x.ActionList
	}
	return nil
}

func (x *CreateTamEventRequest) GetCollectorList() []uint64 {
	if x != nil {
		return x.CollectorList
	}
	return nil
}

func (x *CreateTamEventRequest) GetThreshold() uint64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *CreateTamEventRequest) GetDscpValue() uint32 {
	if x != nil && x.DscpValue != nil {
		return *x.DscpValue
	}
	return 0
}

type CreateTamEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTamEventResponse) Reset() {
	*x = CreateTamEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTamEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTamEventResponse) ProtoMessage() {}

func (x *CreateTamEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTamEventResponse.ProtoReflect.Descriptor instead.
func (*CreateTamEventResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{81}
}

func (x *CreateTamEventResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTamEventRequest) Reset() {
	*x = RemoveTamEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamEventRequest) ProtoMessage() {}

func (x *RemoveTamEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamEventRequest.ProtoReflect.Descriptor instead.
func (*RemoveTamEventRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{82}
}

func (x *RemoveTamEventRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTamEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTamEventResponse) Reset() {
	*x = RemoveTamEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTamEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTamEventResponse) ProtoMessage() {}

func (x *RemoveTamEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTamEventResponse.ProtoReflect.Descriptor instead.
func (*RemoveTamEventResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{83}
}

type SetTamEventAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid       uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Threshold *uint64 `protobuf:"varint,2,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
	DscpValue *uint32 `protobuf:"varint,3,opt,name=dscp_value,json=dscpValue,proto3,oneof" json:"dscp_value,omitempty"`
}

func (x *SetTamEventAttributeRequest) Reset() {
	*x = SetTamEventAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamEventAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamEventAttributeRequest) ProtoMessage() {}

func (x *SetTamEventAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamEventAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTamEventAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{84}
}

func (x *SetTamEventAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTamEventAttributeRequest) GetThreshold() uint64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *SetTamEventAttributeRequest) GetDscpValue() uint32 {
	if x != nil && x.DscpValue != nil {
		return *x.DscpValue
	}
	return 0
}

type SetTamEventAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTamEventAttributeResponse) Reset() {
	*x = SetTamEventAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTamEventAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTamEventAttributeResponse) ProtoMessage() {}

func (x *SetTamEventAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTamEventAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTamEventAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{85}
}

type GetTamEventAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64         `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TamEventAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TamEventAttr" json:"attr_type,omitempty"`
}

func (x *GetTamEventAttributeRequest) Reset() {
	*x = GetTamEventAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamEventAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamEventAttributeRequest) ProtoMessage() {}

func (x *GetTamEventAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamEventAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTamEventAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{86}
}

func (x *GetTamEventAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTamEventAttributeRequest) GetAttrType() []TamEventAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTamEventAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TamEventAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTamEventAttributeResponse) Reset() {
	*x = GetTamEventAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTamEventAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTamEventAttributeResponse) ProtoMessage() {}

func (x *GetTamEventAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tam_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTamEventAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTamEventAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tam_proto_rawDescGZIP(), []int{87}
}

func (x *GetTamEventAttributeResponse) GetAttr() *TamEventAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_standalone_proto_tam_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_tam_proto_rawDesc = []byte{
	0x0a, 0x24, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x27, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c,
	0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x16, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x14, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x32, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x02, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x18, 0x74, 0x61, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61,
	0x6d, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x04, 0x52, 0x14, 0x74, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x25, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x22, 0x24, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xca, 0x01, 0x0a,
	0x16, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x16, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52,
	0x14, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x74,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x12, 0x3b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x41,
	0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54,
	0x61, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74,
	0x72, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x4d,
	0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x68, 0x0a, 0x16, 0x74, 0x61, 0x6d, 0x5f, 0x74, 0x65,
	0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54,
	0x61, 0x6d, 0x54, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x12, 0x74, 0x61, 0x6d, 0x54, 0x65,
	0x6c, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x61, 0x6d, 0x5f, 0x74, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x74,
	0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2d, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x18, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d,
	0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x68, 0x0a, 0x16, 0x74, 0x61,
	0x6d, 0x5f, 0x74, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x12, 0x74,
	0x61, 0x6d, 0x54, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x61, 0x6d, 0x5f, 0x74, 0x65, 0x6c,
	0x5f, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x21, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e,
	0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x77, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68,
	0x46, 0x75, 0x6e, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x62, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22,
	0xbe, 0x04, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x62,
	0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48,
	0x01, 0x52, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x42, 0x69, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x16, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x03, 0x52, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x02, 0x52, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48,
	0x05, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x6e, 0x73, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x2b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2a, 0x0a,
	0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x04, 0x48, 0x01, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x02, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x11, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x07, 0x48, 0x03, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xa4, 0x03, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d, 0x6c, 0x6f, 0x77,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x77, 0x57, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x07, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03,
	0x48, 0x02, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x04, 0x48, 0x03, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x09, 0x61, 0x62, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x08, 0x61, 0x62, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x05, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x61, 0x62, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x22, 0x33, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x1f,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xa4, 0x03, 0x0a, 0x24, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0e, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d,
	0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x77,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x07,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x09, 0x61, 0x62, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x08, 0x61, 0x62, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x55, 0x6e, 0x69, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x05, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x62, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x27, 0x0a, 0x25, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x83, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xdb, 0x0f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x49,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02,
	0x48, 0x01, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x0f, 0x69, 0x6f, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02,
	0x52, 0x0d, 0x69, 0x6f, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x60, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03,
	0x52, 0x0f, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x62, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x62, 0x31, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x69, 0x6e, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x62, 0x32, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x62, 0x32, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x17, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x06, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x63, 0x65, 0x44, 0x73, 0x63, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x07, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x33, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x08, 0x52, 0x15, 0x69,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x33, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x0a, 0x48, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x0b, 0x48, 0x0a, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x19, 0x70, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x0b,
	0x52, 0x16, 0x70, 0x34, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x18, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x0d, 0x48, 0x0c, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x43, 0x0a, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48, 0x0d, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48, 0x0e, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x14, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x10, 0x48, 0x0f, 0x52, 0x12, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x13, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x11, 0x48, 0x10,
	0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x61, 0x63, 0x6c, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x12,
	0x48, 0x11, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x13, 0x48, 0x12, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x48, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48, 0x13, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x15, 0x48, 0x14, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x16, 0x48, 0x15, 0x52, 0x11, 0x6e,
	0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x17, 0x48, 0x16,
	0x52, 0x19, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x18, 0x52, 0x0d, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x19, 0x48, 0x17, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x1a, 0x48, 0x18, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6f, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x62,
	0x31, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x62, 0x32, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x33, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x1c, 0x0a,
	0x1a, 0x5f, 0x70, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x74, 0x68,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d,
	0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x27, 0x0a,
	0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab,
	0x0a, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x31,
	0x0a, 0x0f, 0x69, 0x6f, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x00, 0x52,
	0x0d, 0x69, 0x6f, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48, 0x01, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48, 0x02, 0x52, 0x0c,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x19, 0x70, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x03, 0x52, 0x16, 0x70, 0x34, 0x49, 0x6e,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x04, 0x52,
	0x16, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x18, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x0e, 0x48, 0x05, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x0f, 0x48, 0x06, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x14, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x10, 0x48, 0x07, 0x52, 0x12,
	0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x11, 0x48, 0x08, 0x52, 0x12, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x09, 0x61, 0x63, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x12, 0x48, 0x09, 0x52, 0x08, 0x61, 0x63,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x13, 0x48, 0x0a, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x48, 0x6f, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x14, 0x48, 0x0b, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x15, 0x48,
	0x0c, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x3a, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x16, 0x48, 0x0d, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a,
	0x1b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x17, 0x48, 0x0e, 0x52, 0x19, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x18, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x19, 0x48, 0x0f,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x69, 0x6f, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x70, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x42, 0x1e,
	0x0a, 0x1c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x22, 0x1c, 0x0a, 0x1a,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61,
	0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x22, 0x8e, 0x0c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x60, 0x0a, 0x12, 0x74, 0x61, 0x6d, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x10, 0x74, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x15, 0x69, 0x6e, 0x74,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01,
	0x52, 0x13, 0x69, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03,
	0x48, 0x02, 0x52, 0x15, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x20,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x1c,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x4f, 0x0a, 0x1f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04,
	0x52, 0x1b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x53, 0x0a, 0x21, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x06, 0x48, 0x05, 0x52, 0x1d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x06, 0x52, 0x1c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x17, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6d, 0x75, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48,
	0x07, 0x52, 0x14, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x6d, 0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x62, 0x72,
	0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x09, 0x48, 0x08, 0x52, 0x17, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48, 0x09, 0x52, 0x17,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x28, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x0b, 0x48, 0x0a, 0x52, 0x24, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x08, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x0b, 0x52, 0x07, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x0c, 0x52, 0x08,
	0x6e, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x64,
	0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48, 0x0d, 0x52, 0x09, 0x64, 0x73, 0x63, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48, 0x0e,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x10, 0x48, 0x0f, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x61, 0x6d, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x24, 0x0a, 0x22,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6d, 0x75, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x42, 0x2b, 0x0a, 0x29, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x71, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x73,
	0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x74,
	0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x22, 0x2b, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x54,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdf, 0x0a, 0x0a, 0x1d,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x02, 0x48, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x18, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x01, 0x52, 0x15, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x51, 0x0a, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x04, 0x48, 0x02, 0x52, 0x1c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x1f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x05, 0x48, 0x03, 0x52, 0x1b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x21, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x04, 0x52, 0x1d, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x20, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x05, 0x52, 0x1c, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x17, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6d, 0x6d, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x06, 0x52, 0x14, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6d, 0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x46, 0x0a, 0x1a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x07, 0x52, 0x17, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x0a, 0x48, 0x08, 0x52, 0x17, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x61, 0x0a, 0x28, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48, 0x09, 0x52, 0x24, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x71, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x0a, 0x52, 0x07, 0x66,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x6e, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x0d, 0x48, 0x0b, 0x52, 0x08, 0x6e, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48, 0x0c, 0x52, 0x09, 0x64,
	0x73, 0x63, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x0f, 0x48, 0x0d, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63,
	0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x22, 0x0a, 0x20, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x24, 0x0a, 0x22, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6d, 0x6d, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x2b, 0x0a, 0x29, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x5f, 0x71, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x22, 0x20, 0x0a,
	0x1e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x75, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61,
	0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d,
	0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54,
	0x61, 0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xac, 0x03, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x59,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54,
	0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x72, 0x63,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x02, 0x48, 0x01, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x03, 0x6d, 0x74, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05,
	0x48, 0x04, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x74, 0x75, 0x22, 0x2e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x72,
	0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x02, 0x48, 0x00, 0x52, 0x07, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x01, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x66, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x02, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x05, 0x48, 0x03, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x73, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6d, 0x74, 0x75, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x44,
	0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54,
	0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xd4, 0x02, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x28, 0x0a, 0x0d, 0x74, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0b, 0x74,
	0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x12, 0x74, 0x61, 0x6d, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x03, 0x48, 0x00, 0x52, 0x10, 0x74, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x12, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x01, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x22, 0x2e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x22, 0x2d, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7,
	0x02, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x52, 0x0b, 0x74, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x60,
	0x0a, 0x12, 0x74, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x00, 0x52, 0x10, 0x74, 0x61, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x04, 0x48, 0x01, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74,
	0x61, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xc3, 0x03,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x05, 0x73, 0x72, 0x63,
	0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x05, 0x64,
	0x73, 0x74, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03,
	0x48, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x04, 0x48, 0x03, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06,
	0x48, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x06, 0x52, 0x09, 0x64, 0x73,
	0x63, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x69, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xc3, 0x03, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x72, 0x63, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01,
	0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x06, 0x48, 0x05, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x06, 0x52,
	0x09, 0x64, 0x73, 0x63, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x73, 0x74,
	0x5f, 0x69, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x73, 0x63, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x61, 0x74, 0x74,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xb8, 0x01, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x0f, 0x71, 0x6f, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01,
	0x52, 0x0d, 0x71, 0x6f, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x30, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x21, 0x53, 0x65,
	0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x0f, 0x71, 0x6f, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x0d,
	0x71, 0x6f, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x22, 0xc0, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x02, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x52, 0x0d,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x01, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05,
	0x48, 0x02, 0x52, 0x09, 0x64, 0x73, 0x63, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x73, 0x63, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x22, 0x29, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x18, 0x0a,
	0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x04, 0x48, 0x00, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x01, 0x52, 0x09,
	0x64, 0x73, 0x63, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64,
	0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0xaf, 0x01, 0x0a, 0x07, 0x54,
	0x61, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x4d, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x54, 0x41, 0x4d, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x4d, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x41, 0x4d, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x2a, 0x64, 0x0a, 0x0f,
	0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x22, 0x0a, 0x1e, 0x54, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x48, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45,
	0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x01, 0x2a, 0xac, 0x02, 0x0a, 0x0d, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12,
	0x2c, 0x0a, 0x28, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x49, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x2a, 0x0a,
	0x26, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x42, 0x49, 0x4e, 0x5f, 0x42,
	0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x4d,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x55, 0x4f,
	0x54, 0x41, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x41,
	0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0x07, 0x2a, 0xae, 0x02, 0x0a, 0x15, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x12, 0x28, 0x0a, 0x24, 0x54,
	0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f,
	0x4c, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b,
	0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c,
	0x4f, 0x57, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x24,
	0x0a, 0x20, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45,
	0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x41, 0x4d, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x41, 0x42, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12,
	0x21, 0x0a, 0x1d, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x10, 0x06, 0x2a, 0xb1, 0x07, 0x0a, 0x0a, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x49, 0x4f, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41, 0x4d, 0x5f,
	0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x42, 0x31, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x54,
	0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x42, 0x32, 0x10, 0x06, 0x12, 0x28,
	0x0a, 0x24, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49,
	0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x53, 0x43, 0x50,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x4d, 0x5f,
	0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10,
	0x08, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x4c,
	0x33, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x41,
	0x43, 0x45, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x2a, 0x0a, 0x26, 0x54,
	0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x34, 0x5f, 0x49,
	0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x49, 0x54, 0x4d, 0x41, 0x50, 0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x41, 0x4d, 0x5f, 0x49,
	0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x0d, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x53, 0x55, 0x4d, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x23, 0x0a,
	0x1f, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53,
	0x10, 0x0f, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x4e, 0x45, 0x53, 0x53,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x10, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x41, 0x4d,
	0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43,
	0x59, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x11, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x41, 0x43, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x12, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x48, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x14, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x4d, 0x5f,
	0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x15, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x41, 0x4d, 0x5f,
	0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x16, 0x12,
	0x2c, 0x0a, 0x28, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x17, 0x12, 0x1f, 0x0a,
	0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x18, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d,
	0x41, 0x54, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x10, 0x19, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41,
	0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x49, 0x44, 0x10, 0x1a, 0x2a, 0x92, 0x06, 0x0a, 0x0e, 0x54, 0x61, 0x6d, 0x54, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41, 0x4d,
	0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24,
	0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x10, 0x03, 0x12, 0x36, 0x0a, 0x32, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x35, 0x0a, 0x31, 0x54,
	0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x05, 0x12, 0x37, 0x0a, 0x33, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x06, 0x12, 0x36, 0x0a, 0x32, 0x54,
	0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4f,
	0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x10, 0x07, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x4d, 0x55, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53,
	0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x53, 0x10, 0x09, 0x12, 0x30, 0x0a, 0x2c, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x3e, 0x0a, 0x3a, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x53, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52,
	0x49, 0x43, 0x5f, 0x51, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x45, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41, 0x4d, 0x5f, 0x54,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x53, 0x43,
	0x50, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d,
	0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d,
	0x41, 0x54, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41,
	0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x10, 0x2a, 0xe7, 0x01, 0x0a, 0x10,
	0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x22, 0x0a, 0x1e, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54,
	0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x2a, 0x0a,
	0x26, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x4d,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x4d, 0x54, 0x55, 0x10, 0x05, 0x2a, 0xd9, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x41,
	0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x45,
	0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x54,
	0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10,
	0x04, 0x2a, 0xab, 0x02, 0x0a, 0x10, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x41, 0x4d, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41,
	0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x4d,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41, 0x4d, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x41,
	0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41,
	0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d,
	0x54, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x07, 0x2a,
	0x8d, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x2a,
	0xc7, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x4d,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41, 0x4d,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54,
	0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41,
	0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x53, 0x43,
	0x50, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x32, 0xcb, 0x2c, 0x0a, 0x03, 0x54, 0x61,
	0x6d, 0x12, 0x60, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x12, 0x27,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d,
	0x12, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75,
	0x6e, 0x63, 0x12, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x2f, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x4d, 0x61,
	0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x4d,
	0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68,
	0x46, 0x75, 0x6e, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x35, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68,
	0x46, 0x75, 0x6e, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e,
	0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x35, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e,
	0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d,
	0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x72, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x33, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x35, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a,
	0x01, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x35, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x1d,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3b, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3b, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x6d, 0x49, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x6d, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7b, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65,
	0x74, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x54,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x54,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61,
	0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x30, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8d, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74,
	0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x53, 0x65,
	0x74, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53,
	0x65, 0x74, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01,
	0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f,
	0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x81, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_tam_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_tam_proto_rawDescData = file_dataplane_standalone_proto_tam_proto_rawDesc
)

func file_dataplane_standalone_proto_tam_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_tam_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_tam_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_tam_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_tam_proto_rawDescData
}

var file_dataplane_standalone_proto_tam_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_dataplane_standalone_proto_tam_proto_msgTypes = make([]protoimpl.MessageInfo, 88)
var file_dataplane_standalone_proto_tam_proto_goTypes = []interface{}{
	(TamAttr)(0),                                  // 0: lemming.dataplane.sai.TamAttr
	(TamMathFuncAttr)(0),                          // 1: lemming.dataplane.sai.TamMathFuncAttr
	(TamReportAttr)(0),                            // 2: lemming.dataplane.sai.TamReportAttr
	(TamEventThresholdAttr)(0),                    // 3: lemming.dataplane.sai.TamEventThresholdAttr
	(TamIntAttr)(0),                               // 4: lemming.dataplane.sai.TamIntAttr
	(TamTelTypeAttr)(0),                           // 5: lemming.dataplane.sai.TamTelTypeAttr
	(TamTransportAttr)(0),                         // 6: lemming.dataplane.sai.TamTransportAttr
	(TamTelemetryAttr)(0),                         // 7: lemming.dataplane.sai.TamTelemetryAttr
	(TamCollectorAttr)(0),                         // 8: lemming.dataplane.sai.TamCollectorAttr
	(TamEventActionAttr)(0),                       // 9: lemming.dataplane.sai.TamEventActionAttr
	(TamEventAttr)(0),                             // 10: lemming.dataplane.sai.TamEventAttr
	(*CreateTamRequest)(nil),                      // 11: lemming.dataplane.sai.CreateTamRequest
	(*CreateTamResponse)(nil),                     // 12: lemming.dataplane.sai.CreateTamResponse
	(*RemoveTamRequest)(nil),                      // 13: lemming.dataplane.sai.RemoveTamRequest
	(*RemoveTamResponse)(nil),                     // 14: lemming.dataplane.sai.RemoveTamResponse
	(*SetTamAttributeRequest)(nil),                // 15: lemming.dataplane.sai.SetTamAttributeRequest
	(*SetTamAttributeResponse)(nil),               // 16: lemming.dataplane.sai.SetTamAttributeResponse
	(*GetTamAttributeRequest)(nil),                // 17: lemming.dataplane.sai.GetTamAttributeRequest
	(*GetTamAttributeResponse)(nil),               // 18: lemming.dataplane.sai.GetTamAttributeResponse
	(*CreateTamMathFuncRequest)(nil),              // 19: lemming.dataplane.sai.CreateTamMathFuncRequest
	(*CreateTamMathFuncResponse)(nil),             // 20: lemming.dataplane.sai.CreateTamMathFuncResponse
	(*RemoveTamMathFuncRequest)(nil),              // 21: lemming.dataplane.sai.RemoveTamMathFuncRequest
	(*RemoveTamMathFuncResponse)(nil),             // 22: lemming.dataplane.sai.RemoveTamMathFuncResponse
	(*SetTamMathFuncAttributeRequest)(nil),        // 23: lemming.dataplane.sai.SetTamMathFuncAttributeRequest
	(*SetTamMathFuncAttributeResponse)(nil),       // 24: lemming.dataplane.sai.SetTamMathFuncAttributeResponse
	(*GetTamMathFuncAttributeRequest)(nil),        // 25: lemming.dataplane.sai.GetTamMathFuncAttributeRequest
	(*GetTamMathFuncAttributeResponse)(nil),       // 26: lemming.dataplane.sai.GetTamMathFuncAttributeResponse
	(*CreateTamReportRequest)(nil),                // 27: lemming.dataplane.sai.CreateTamReportRequest
	(*CreateTamReportResponse)(nil),               // 28: lemming.dataplane.sai.CreateTamReportResponse
	(*RemoveTamReportRequest)(nil),                // 29: lemming.dataplane.sai.RemoveTamReportRequest
	(*RemoveTamReportResponse)(nil),               // 30: lemming.dataplane.sai.RemoveTamReportResponse
	(*SetTamReportAttributeRequest)(nil),          // 31: lemming.dataplane.sai.SetTamReportAttributeRequest
	(*SetTamReportAttributeResponse)(nil),         // 32: lemming.dataplane.sai.SetTamReportAttributeResponse
	(*GetTamReportAttributeRequest)(nil),          // 33: lemming.dataplane.sai.GetTamReportAttributeRequest
	(*GetTamReportAttributeResponse)(nil),         // 34: lemming.dataplane.sai.GetTamReportAttributeResponse
	(*CreateTamEventThresholdRequest)(nil),        // 35: lemming.dataplane.sai.CreateTamEventThresholdRequest
	(*CreateTamEventThresholdResponse)(nil),       // 36: lemming.dataplane.sai.CreateTamEventThresholdResponse
	(*RemoveTamEventThresholdRequest)(nil),        // 37: lemming.dataplane.sai.RemoveTamEventThresholdRequest
	(*RemoveTamEventThresholdResponse)(nil),       // 38: lemming.dataplane.sai.RemoveTamEventThresholdResponse
	(*SetTamEventThresholdAttributeRequest)(nil),  // 39: lemming.dataplane.sai.SetTamEventThresholdAttributeRequest
	(*SetTamEventThresholdAttributeResponse)(nil), // 40: lemming.dataplane.sai.SetTamEventThresholdAttributeResponse
	(*GetTamEventThresholdAttributeRequest)(nil),  // 41: lemming.dataplane.sai.GetTamEventThresholdAttributeRequest
	(*GetTamEventThresholdAttributeResponse)(nil), // 42: lemming.dataplane.sai.GetTamEventThresholdAttributeResponse
	(*CreateTamIntRequest)(nil),                   // 43: lemming.dataplane.sai.CreateTamIntRequest
	(*CreateTamIntResponse)(nil),                  // 44: lemming.dataplane.sai.CreateTamIntResponse
	(*RemoveTamIntRequest)(nil),                   // 45: lemming.dataplane.sai.RemoveTamIntRequest
	(*RemoveTamIntResponse)(nil),                  // 46: lemming.dataplane.sai.RemoveTamIntResponse
	(*SetTamIntAttributeRequest)(nil),             // 47: lemming.dataplane.sai.SetTamIntAttributeRequest
	(*SetTamIntAttributeResponse)(nil),            // 48: lemming.dataplane.sai.SetTamIntAttributeResponse
	(*GetTamIntAttributeRequest)(nil),             // 49: lemming.dataplane.sai.GetTamIntAttributeRequest
	(*GetTamIntAttributeResponse)(nil),            // 50: lemming.dataplane.sai.GetTamIntAttributeResponse
	(*CreateTamTelTypeRequest)(nil),               // 51: lemming.dataplane.sai.CreateTamTelTypeRequest
	(*CreateTamTelTypeResponse)(nil),              // 52: lemming.dataplane.sai.CreateTamTelTypeResponse
	(*RemoveTamTelTypeRequest)(nil),               // 53: lemming.dataplane.sai.RemoveTamTelTypeRequest
	(*RemoveTamTelTypeResponse)(nil),              // 54: lemming.dataplane.sai.RemoveTamTelTypeResponse
	(*SetTamTelTypeAttributeRequest)(nil),         // 55: lemming.dataplane.sai.SetTamTelTypeAttributeRequest
	(*SetTamTelTypeAttributeResponse)(nil),        // 56: lemming.dataplane.sai.SetTamTelTypeAttributeResponse
	(*GetTamTelTypeAttributeRequest)(nil),         // 57: lemming.dataplane.sai.GetTamTelTypeAttributeRequest
	(*GetTamTelTypeAttributeResponse)(nil),        // 58: lemming.dataplane.sai.GetTamTelTypeAttributeResponse
	(*CreateTamTransportRequest)(nil),             // 59: lemming.dataplane.sai.CreateTamTransportRequest
	(*CreateTamTransportResponse)(nil),            // 60: lemming.dataplane.sai.CreateTamTransportResponse
	(*RemoveTamTransportRequest)(nil),             // 61: lemming.dataplane.sai.RemoveTamTransportRequest
	(*RemoveTamTransportResponse)(nil),            // 62: lemming.dataplane.sai.RemoveTamTransportResponse
	(*SetTamTransportAttributeRequest)(nil),       // 63: lemming.dataplane.sai.SetTamTransportAttributeRequest
	(*SetTamTransportAttributeResponse)(nil),      // 64: lemming.dataplane.sai.SetTamTransportAttributeResponse
	(*GetTamTransportAttributeRequest)(nil),       // 65: lemming.dataplane.sai.GetTamTransportAttributeRequest
	(*GetTamTransportAttributeResponse)(nil),      // 66: lemming.dataplane.sai.GetTamTransportAttributeResponse
	(*CreateTamTelemetryRequest)(nil),             // 67: lemming.dataplane.sai.CreateTamTelemetryRequest
	(*CreateTamTelemetryResponse)(nil),            // 68: lemming.dataplane.sai.CreateTamTelemetryResponse
	(*RemoveTamTelemetryRequest)(nil),             // 69: lemming.dataplane.sai.RemoveTamTelemetryRequest
	(*RemoveTamTelemetryResponse)(nil),            // 70: lemming.dataplane.sai.RemoveTamTelemetryResponse
	(*SetTamTelemetryAttributeRequest)(nil),       // 71: lemming.dataplane.sai.SetTamTelemetryAttributeRequest
	(*SetTamTelemetryAttributeResponse)(nil),      // 72: lemming.dataplane.sai.SetTamTelemetryAttributeResponse
	(*GetTamTelemetryAttributeRequest)(nil),       // 73: lemming.dataplane.sai.GetTamTelemetryAttributeRequest
	(*GetTamTelemetryAttributeResponse)(nil),      // 74: lemming.dataplane.sai.GetTamTelemetryAttributeResponse
	(*CreateTamCollectorRequest)(nil),             // 75: lemming.dataplane.sai.CreateTamCollectorRequest
	(*CreateTamCollectorResponse)(nil),            // 76: lemming.dataplane.sai.CreateTamCollectorResponse
	(*RemoveTamCollectorRequest)(nil),             // 77: lemming.dataplane.sai.RemoveTamCollectorRequest
	(*RemoveTamCollectorResponse)(nil),            // 78: lemming.dataplane.sai.RemoveTamCollectorResponse
	(*SetTamCollectorAttributeRequest)(nil),       // 79: lemming.dataplane.sai.SetTamCollectorAttributeRequest
	(*SetTamCollectorAttributeResponse)(nil),      // 80: lemming.dataplane.sai.SetTamCollectorAttributeResponse
	(*GetTamCollectorAttributeRequest)(nil),       // 81: lemming.dataplane.sai.GetTamCollectorAttributeRequest
	(*GetTamCollectorAttributeResponse)(nil),      // 82: lemming.dataplane.sai.GetTamCollectorAttributeResponse
	(*CreateTamEventActionRequest)(nil),           // 83: lemming.dataplane.sai.CreateTamEventActionRequest
	(*CreateTamEventActionResponse)(nil),          // 84: lemming.dataplane.sai.CreateTamEventActionResponse
	(*RemoveTamEventActionRequest)(nil),           // 85: lemming.dataplane.sai.RemoveTamEventActionRequest
	(*RemoveTamEventActionResponse)(nil),          // 86: lemming.dataplane.sai.RemoveTamEventActionResponse
	(*SetTamEventActionAttributeRequest)(nil),     // 87: lemming.dataplane.sai.SetTamEventActionAttributeRequest
	(*SetTamEventActionAttributeResponse)(nil),    // 88: lemming.dataplane.sai.SetTamEventActionAttributeResponse
	(*GetTamEventActionAttributeRequest)(nil),     // 89: lemming.dataplane.sai.GetTamEventActionAttributeRequest
	(*GetTamEventActionAttributeResponse)(nil),    // 90: lemming.dataplane.sai.GetTamEventActionAttributeResponse
	(*CreateTamEventRequest)(nil),                 // 91: lemming.dataplane.sai.CreateTamEventRequest
	(*CreateTamEventResponse)(nil),                // 92: lemming.dataplane.sai.CreateTamEventResponse
	(*RemoveTamEventRequest)(nil),                 // 93: lemming.dataplane.sai.RemoveTamEventRequest
	(*RemoveTamEventResponse)(nil),                // 94: lemming.dataplane.sai.RemoveTamEventResponse
	(*SetTamEventAttributeRequest)(nil),           // 95: lemming.dataplane.sai.SetTamEventAttributeRequest
	(*SetTamEventAttributeResponse)(nil),          // 96: lemming.dataplane.sai.SetTamEventAttributeResponse
	(*GetTamEventAttributeRequest)(nil),           // 97: lemming.dataplane.sai.GetTamEventAttributeRequest
	(*GetTamEventAttributeResponse)(nil),          // 98: lemming.dataplane.sai.GetTamEventAttributeResponse
	(TamBindPointType)(0),                         // 99: lemming.dataplane.sai.TamBindPointType
	(*TamAttribute)(nil),                          // 100: lemming.dataplane.sai.TamAttribute
	(TamTelMathFuncType)(0),                       // 101: lemming.dataplane.sai.TamTelMathFuncType
	(*TamMathFuncAttribute)(nil),                  // 102: lemming.dataplane.sai.TamMathFuncAttribute
	(TamReportType)(0),                            // 103: lemming.dataplane.sai.TamReportType
	(TamReportMode)(0),                            // 104: lemming.dataplane.sai.TamReportMode
	(*TamReportAttribute)(nil),                    // 105: lemming.dataplane.sai.TamReportAttribute
	(TamEventThresholdUnit)(0),                    // 106: lemming.dataplane.sai.TamEventThresholdUnit
	(*TamEventThresholdAttribute)(nil),            // 107: lemming.dataplane.sai.TamEventThresholdAttribute
	(TamIntType)(0),                               // 108: lemming.dataplane.sai.TamIntType
	(TamIntPresenceType)(0),                       // 109: lemming.dataplane.sai.TamIntPresenceType
	(*TamIntAttribute)(nil),                       // 110: lemming.dataplane.sai.TamIntAttribute
	(TamTelemetryType)(0),                         // 111: lemming.dataplane.sai.TamTelemetryType
	(*TamTelTypeAttribute)(nil),                   // 112: lemming.dataplane.sai.TamTelTypeAttribute
	(TamTransportType)(0),                         // 113: lemming.dataplane.sai.TamTransportType
	(TamTransportAuthType)(0),                     // 114: lemming.dataplane.sai.TamTransportAuthType
	(*TamTransportAttribute)(nil),                 // 115: lemming.dataplane.sai.TamTransportAttribute
	(TamReportingUnit)(0),                         // 116: lemming.dataplane.sai.TamReportingUnit
	(*TamTelemetryAttribute)(nil),                 // 117: lemming.dataplane.sai.TamTelemetryAttribute
	(*TamCollectorAttribute)(nil),                 // 118: lemming.dataplane.sai.TamCollectorAttribute
	(*TamEventActionAttribute)(nil),               // 119: lemming.dataplane.sai.TamEventActionAttribute
	(TamEventType)(0),                             // 120: lemming.dataplane.sai.TamEventType
	(*TamEventAttribute)(nil),                     // 121: lemming.dataplane.sai.TamEventAttribute
}
var file_dataplane_standalone_proto_tam_proto_depIdxs = []int32{
	99,  // 0: lemming.dataplane.sai.CreateTamRequest.tam_bind_point_type_list:type_name -> lemming.dataplane.sai.TamBindPointType
	0,   // 1: lemming.dataplane.sai.GetTamAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TamAttr
	100, // 2: lemming.dataplane.sai.GetTamAttributeResponse.attr:type_name -> lemming.dataplane.sai.TamAttribute
	101, // 3: lemming.dataplane.sai.CreateTamMathFuncRequest.tam_tel_math_func_type:type_name -> lemming.dataplane.sai.TamTelMathFuncType
	101, // 4: lemming.dataplane.sai.SetTamMathFuncAttributeRequest.tam_tel_math_func_type:type_name -> lemming.dataplane.sai.TamTelMathFuncType
	1,   // 5: lemming.dataplane.sai.GetTamMathFuncAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TamMathFuncAttr
	102, // 6: lemming.dataplane.sai.GetTamMathFuncAttributeResponse.attr:type_name -> lemming.dataplane.sai.TamMathFuncAttribute
	103, // 7: lemming.dataplane.sai.CreateTamReportRequest.type:type_name -> lemming.dataplane.sai.TamReportType
	104, // 8: lemming.dataplane.sai.CreateTamReportRequest.report_mode:type_name -> lemming.dataplane.sai.TamReportMode
	103, // 9: lemming.dataplane.sai.SetTamReportAttributeRequest.type:type_name -> lemming.dataplane.sai.TamReportType
	2,   // 10: lemming.dataplane.sai.GetTamReportAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TamReportAttr
	105, // 11: lemming.dataplane.sai.GetTamReportAttributeResponse.attr:type_name -> lemming.dataplane.sai.TamReportAttribute
	106, // 12: lemming.dataplane.sai.CreateTamEventThresholdRequest.unit:type_name -> lemming.dataplane.sai.TamEventThresholdUnit
	106, // 13: lemming.dataplane.sai.SetTamEventThresholdAttributeRequest.unit:type_name -> lemming.dataplane.sai.TamEventThresholdUnit
	3,   // 14: lemming.dataplane.sai.GetTamEventThresholdAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TamEventThresholdAttr
	107, // 15: lemming.dataplane.sai.GetTamEventThresholdAttributeResponse.attr:type_name -> lemming.dataplane.sai.TamEventThresholdAttribute
	108, // 16: lemming.dataplane.sai.CreateTamIntRequest.type:type_name -> lemming.dataplane.sai.TamIntType
	109, // 17: lemming.dataplane.sai.CreateTamIntRequest.int_presence_type:type_name -> lemming.dataplane.sai.TamIntPresenceType
	4,   // 18: lemming.dataplane.sai.GetTamIntAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TamIntAttr
	110, // 19: lemming.dataplane.sai.GetTamIntAttributeResponse.attr:type_name -> lemming.dataplane.sai.TamIntAttribute
	111, // 20: lemming.dataplane.sai.CreateTamTelTypeRequest.tam_telemetry_type:type_name -> lemming.dataplane.sai.TamTelemetryType
	5,   // 21: lemming.dataplane.sai.GetTamTelTypeAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TamTelTypeAttr
	112, // 22: lemming.dataplane.sai.GetTamTelTypeAttributeResponse.attr:type_name -> lemming.dataplane.sai.TamTelTypeAttribute
	113, // 23: lemming.dataplane.sai.CreateTamTransportRequest.transport_type:type_name -> lemming.dataplane.sai.TamTransportType
	114, // 24: lemming.dataplane.sai.CreateTamTransportRequest.transport_auth_type:type_name -> lemming.dataplane.sai.TamTransportAuthType
	114, // 25: lemming.dataplane.sai.SetTamTransportAttributeRequest.transport_auth_type:type_name -> lemming.dataplane.sai.TamTransportAuthType
	6,   // 26: lemming.dataplane.sai.GetTamTransportAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TamTransportAttr
	115, // 27: lemming.dataplane.sai.GetTamTransportAttributeResponse.attr:type_name -> lemming.dataplane.sai.TamTransportAttribute
	116, // 28: lemming.dataplane.sai.CreateTamTelemetryRequest.tam_reporting_unit:type_name -> lemming.dataplane.sai.TamReportingUnit
	116, // 29: lemming.dataplane.sai.SetTamTelemetryAttributeRequest.tam_reporting_unit:type_name -> lemming.dataplane.sai.TamReportingUnit
	7,   // 30: lemming.dataplane.sai.GetTamTelemetryAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TamTelemetryAttr
	117, // 31: lemming.dataplane.sai.GetTamTelemetryAttributeResponse.attr:type_name -> lemming.dataplane.sai.TamTelemetryAttribute
	8,   // 32: lemming.dataplane.sai.GetTamCollectorAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TamCollectorAttr
	118, // 33: lemming.dataplane.sai.GetTamCollectorAttributeResponse.attr:type_name -> lemming.dataplane.sai.TamCollectorAttribute
	9,   // 34: lemming.dataplane.sai.GetTamEventActionAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TamEventActionAttr
	119, // 35: lemming.dataplane.sai.GetTamEventActionAttributeResponse.attr:type_name -> lemming.dataplane.sai.TamEventActionAttribute
	120, // 36: lemming.dataplane.sai.CreateTamEventRequest.type:type_name -> lemming.dataplane.sai.TamEventType
	10,  // 37: lemming.dataplane.sai.GetTamEventAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TamEventAttr
	121, // 38: lemming.dataplane.sai.GetTamEventAttributeResponse.attr:type_name -> lemming.dataplane.sai.TamEventAttribute
	11,  // 39: lemming.dataplane.sai.Tam.CreateTam:input_type -> lemming.dataplane.sai.CreateTamRequest
	13,  // 40: lemming.dataplane.sai.Tam.RemoveTam:input_type -> lemming.dataplane.sai.RemoveTamRequest
	15,  // 41: lemming.dataplane.sai.Tam.SetTamAttribute:input_type -> lemming.dataplane.sai.SetTamAttributeRequest
	17,  // 42: lemming.dataplane.sai.Tam.GetTamAttribute:input_type -> lemming.dataplane.sai.GetTamAttributeRequest
	19,  // 43: lemming.dataplane.sai.Tam.CreateTamMathFunc:input_type -> lemming.dataplane.sai.CreateTamMathFuncRequest
	21,  // 44: lemming.dataplane.sai.Tam.RemoveTamMathFunc:input_type -> lemming.dataplane.sai.RemoveTamMathFuncRequest
	23,  // 45: lemming.dataplane.sai.Tam.SetTamMathFuncAttribute:input_type -> lemming.dataplane.sai.SetTamMathFuncAttributeRequest
	25,  // 46: lemming.dataplane.sai.Tam.GetTamMathFuncAttribute:input_type -> lemming.dataplane.sai.GetTamMathFuncAttributeRequest
	27,  // 47: lemming.dataplane.sai.Tam.CreateTamReport:input_type -> lemming.dataplane.sai.CreateTamReportRequest
	29,  // 48: lemming.dataplane.sai.Tam.RemoveTamReport:input_type -> lemming.dataplane.sai.RemoveTamReportRequest
	31,  // 49: lemming.dataplane.sai.Tam.SetTamReportAttribute:input_type -> lemming.dataplane.sai.SetTamReportAttributeRequest
	33,  // 50: lemming.dataplane.sai.Tam.GetTamReportAttribute:input_type -> lemming.dataplane.sai.GetTamReportAttributeRequest
	35,  // 51: lemming.dataplane.sai.Tam.CreateTamEventThreshold:input_type -> lemming.dataplane.sai.CreateTamEventThresholdRequest
	37,  // 52: lemming.dataplane.sai.Tam.RemoveTamEventThreshold:input_type -> lemming.dataplane.sai.RemoveTamEventThresholdRequest
	39,  // 53: lemming.dataplane.sai.Tam.SetTamEventThresholdAttribute:input_type -> lemming.dataplane.sai.SetTamEventThresholdAttributeRequest
	41,  // 54: lemming.dataplane.sai.Tam.GetTamEventThresholdAttribute:input_type -> lemming.dataplane.sai.GetTamEventThresholdAttributeRequest
	43,  // 55: lemming.dataplane.sai.Tam.CreateTamInt:input_type -> lemming.dataplane.sai.CreateTamIntRequest
	45,  // 56: lemming.dataplane.sai.Tam.RemoveTamInt:input_type -> lemming.dataplane.sai.RemoveTamIntRequest
	47,  // 57: lemming.dataplane.sai.Tam.SetTamIntAttribute:input_type -> lemming.dataplane.sai.SetTamIntAttributeRequest
	49,  // 58: lemming.dataplane.sai.Tam.GetTamIntAttribute:input_type -> lemming.dataplane.sai.GetTamIntAttributeRequest
	51,  // 59: lemming.dataplane.sai.Tam.CreateTamTelType:input_type -> lemming.dataplane.sai.CreateTamTelTypeRequest
	53,  // 60: lemming.dataplane.sai.Tam.RemoveTamTelType:input_type -> lemming.dataplane.sai.RemoveTamTelTypeRequest
	55,  // 61: lemming.dataplane.sai.Tam.SetTamTelTypeAttribute:input_type -> lemming.dataplane.sai.SetTamTelTypeAttributeRequest
	57,  // 62: lemming.dataplane.sai.Tam.GetTamTelTypeAttribute:input_type -> lemming.dataplane.sai.GetTamTelTypeAttributeRequest
	59,  // 63: lemming.dataplane.sai.Tam.CreateTamTransport:input_type -> lemming.dataplane.sai.CreateTamTransportRequest
	61,  // 64: lemming.dataplane.sai.Tam.RemoveTamTransport:input_type -> lemming.dataplane.sai.RemoveTamTransportRequest
	63,  // 65: lemming.dataplane.sai.Tam.SetTamTransportAttribute:input_type -> lemming.dataplane.sai.SetTamTransportAttributeRequest
	65,  // 66: lemming.dataplane.sai.Tam.GetTamTransportAttribute:input_type -> lemming.dataplane.sai.GetTamTransportAttributeRequest
	67,  // 67: lemming.dataplane.sai.Tam.CreateTamTelemetry:input_type -> lemming.dataplane.sai.CreateTamTelemetryRequest
	69,  // 68: lemming.dataplane.sai.Tam.RemoveTamTelemetry:input_type -> lemming.dataplane.sai.RemoveTamTelemetryRequest
	71,  // 69: lemming.dataplane.sai.Tam.SetTamTelemetryAttribute:input_type -> lemming.dataplane.sai.SetTamTelemetryAttributeRequest
	73,  // 70: lemming.dataplane.sai.Tam.GetTamTelemetryAttribute:input_type -> lemming.dataplane.sai.GetTamTelemetryAttributeRequest
	75,  // 71: lemming.dataplane.sai.Tam.CreateTamCollector:input_type -> lemming.dataplane.sai.CreateTamCollectorRequest
	77,  // 72: lemming.dataplane.sai.Tam.RemoveTamCollector:input_type -> lemming.dataplane.sai.RemoveTamCollectorRequest
	79,  // 73: lemming.dataplane.sai.Tam.SetTamCollectorAttribute:input_type -> lemming.dataplane.sai.SetTamCollectorAttributeRequest
	81,  // 74: lemming.dataplane.sai.Tam.GetTamCollectorAttribute:input_type -> lemming.dataplane.sai.GetTamCollectorAttributeRequest
	83,  // 75: lemming.dataplane.sai.Tam.CreateTamEventAction:input_type -> lemming.dataplane.sai.CreateTamEventActionRequest
	85,  // 76: lemming.dataplane.sai.Tam.RemoveTamEventAction:input_type -> lemming.dataplane.sai.RemoveTamEventActionRequest
	87,  // 77: lemming.dataplane.sai.Tam.SetTamEventActionAttribute:input_type -> lemming.dataplane.sai.SetTamEventActionAttributeRequest
	89,  // 78: lemming.dataplane.sai.Tam.GetTamEventActionAttribute:input_type -> lemming.dataplane.sai.GetTamEventActionAttributeRequest
	91,  // 79: lemming.dataplane.sai.Tam.CreateTamEvent:input_type -> lemming.dataplane.sai.CreateTamEventRequest
	93,  // 80: lemming.dataplane.sai.Tam.RemoveTamEvent:input_type -> lemming.dataplane.sai.RemoveTamEventRequest
	95,  // 81: lemming.dataplane.sai.Tam.SetTamEventAttribute:input_type -> lemming.dataplane.sai.SetTamEventAttributeRequest
	97,  // 82: lemming.dataplane.sai.Tam.GetTamEventAttribute:input_type -> lemming.dataplane.sai.GetTamEventAttributeRequest
	12,  // 83: lemming.dataplane.sai.Tam.CreateTam:output_type -> lemming.dataplane.sai.CreateTamResponse
	14,  // 84: lemming.dataplane.sai.Tam.RemoveTam:output_type -> lemming.dataplane.sai.RemoveTamResponse
	16,  // 85: lemming.dataplane.sai.Tam.SetTamAttribute:output_type -> lemming.dataplane.sai.SetTamAttributeResponse
	18,  // 86: lemming.dataplane.sai.Tam.GetTamAttribute:output_type -> lemming.dataplane.sai.GetTamAttributeResponse
	20,  // 87: lemming.dataplane.sai.Tam.CreateTamMathFunc:output_type -> lemming.dataplane.sai.CreateTamMathFuncResponse
	22,  // 88: lemming.dataplane.sai.Tam.RemoveTamMathFunc:output_type -> lemming.dataplane.sai.RemoveTamMathFuncResponse
	24,  // 89: lemming.dataplane.sai.Tam.SetTamMathFuncAttribute:output_type -> lemming.dataplane.sai.SetTamMathFuncAttributeResponse
	26,  // 90: lemming.dataplane.sai.Tam.GetTamMathFuncAttribute:output_type -> lemming.dataplane.sai.GetTamMathFuncAttributeResponse
	28,  // 91: lemming.dataplane.sai.Tam.CreateTamReport:output_type -> lemming.dataplane.sai.CreateTamReportResponse
	30,  // 92: lemming.dataplane.sai.Tam.RemoveTamReport:output_type -> lemming.dataplane.sai.RemoveTamReportResponse
	32,  // 93: lemming.dataplane.sai.Tam.SetTamReportAttribute:output_type -> lemming.dataplane.sai.SetTamReportAttributeResponse
	34,  // 94: lemming.dataplane.sai.Tam.GetTamReportAttribute:output_type -> lemming.dataplane.sai.GetTamReportAttributeResponse
	36,  // 95: lemming.dataplane.sai.Tam.CreateTamEventThreshold:output_type -> lemming.dataplane.sai.CreateTamEventThresholdResponse
	38,  // 96: lemming.dataplane.sai.Tam.RemoveTamEventThreshold:output_type -> lemming.dataplane.sai.RemoveTamEventThresholdResponse
	40,  // 97: lemming.dataplane.sai.Tam.SetTamEventThresholdAttribute:output_type -> lemming.dataplane.sai.SetTamEventThresholdAttributeResponse
	42,  // 98: lemming.dataplane.sai.Tam.GetTamEventThresholdAttribute:output_type -> lemming.dataplane.sai.GetTamEventThresholdAttributeResponse
	44,  // 99: lemming.dataplane.sai.Tam.CreateTamInt:output_type -> lemming.dataplane.sai.CreateTamIntResponse
	46,  // 100: lemming.dataplane.sai.Tam.RemoveTamInt:output_type -> lemming.dataplane.sai.RemoveTamIntResponse
	48,  // 101: lemming.dataplane.sai.Tam.SetTamIntAttribute:output_type -> lemming.dataplane.sai.SetTamIntAttributeResponse
	50,  // 102: lemming.dataplane.sai.Tam.GetTamIntAttribute:output_type -> lemming.dataplane.sai.GetTamIntAttributeResponse
	52,  // 103: lemming.dataplane.sai.Tam.CreateTamTelType:output_type -> lemming.dataplane.sai.CreateTamTelTypeResponse
	54,  // 104: lemming.dataplane.sai.Tam.RemoveTamTelType:output_type -> lemming.dataplane.sai.RemoveTamTelTypeResponse
	56,  // 105: lemming.dataplane.sai.Tam.SetTamTelTypeAttribute:output_type -> lemming.dataplane.sai.SetTamTelTypeAttributeResponse
	58,  // 106: lemming.dataplane.sai.Tam.GetTamTelTypeAttribute:output_type -> lemming.dataplane.sai.GetTamTelTypeAttributeResponse
	60,  // 107: lemming.dataplane.sai.Tam.CreateTamTransport:output_type -> lemming.dataplane.sai.CreateTamTransportResponse
	62,  // 108: lemming.dataplane.sai.Tam.RemoveTamTransport:output_type -> lemming.dataplane.sai.RemoveTamTransportResponse
	64,  // 109: lemming.dataplane.sai.Tam.SetTamTransportAttribute:output_type -> lemming.dataplane.sai.SetTamTransportAttributeResponse
	66,  // 110: lemming.dataplane.sai.Tam.GetTamTransportAttribute:output_type -> lemming.dataplane.sai.GetTamTransportAttributeResponse
	68,  // 111: lemming.dataplane.sai.Tam.CreateTamTelemetry:output_type -> lemming.dataplane.sai.CreateTamTelemetryResponse
	70,  // 112: lemming.dataplane.sai.Tam.RemoveTamTelemetry:output_type -> lemming.dataplane.sai.RemoveTamTelemetryResponse
	72,  // 113: lemming.dataplane.sai.Tam.SetTamTelemetryAttribute:output_type -> lemming.dataplane.sai.SetTamTelemetryAttributeResponse
	74,  // 114: lemming.dataplane.sai.Tam.GetTamTelemetryAttribute:output_type -> lemming.dataplane.sai.GetTamTelemetryAttributeResponse
	76,  // 115: lemming.dataplane.sai.Tam.CreateTamCollector:output_type -> lemming.dataplane.sai.CreateTamCollectorResponse
	78,  // 116: lemming.dataplane.sai.Tam.RemoveTamCollector:output_type -> lemming.dataplane.sai.RemoveTamCollectorResponse
	80,  // 117: lemming.dataplane.sai.Tam.SetTamCollectorAttribute:output_type -> lemming.dataplane.sai.SetTamCollectorAttributeResponse
	82,  // 118: lemming.dataplane.sai.Tam.GetTamCollectorAttribute:output_type -> lemming.dataplane.sai.GetTamCollectorAttributeResponse
	84,  // 119: lemming.dataplane.sai.Tam.CreateTamEventAction:output_type -> lemming.dataplane.sai.CreateTamEventActionResponse
	86,  // 120: lemming.dataplane.sai.Tam.RemoveTamEventAction:output_type -> lemming.dataplane.sai.RemoveTamEventActionResponse
	88,  // 121: lemming.dataplane.sai.Tam.SetTamEventActionAttribute:output_type -> lemming.dataplane.sai.SetTamEventActionAttributeResponse
	90,  // 122: lemming.dataplane.sai.Tam.GetTamEventActionAttribute:output_type -> lemming.dataplane.sai.GetTamEventActionAttributeResponse
	92,  // 123: lemming.dataplane.sai.Tam.CreateTamEvent:output_type -> lemming.dataplane.sai.CreateTamEventResponse
	94,  // 124: lemming.dataplane.sai.Tam.RemoveTamEvent:output_type -> lemming.dataplane.sai.RemoveTamEventResponse
	96,  // 125: lemming.dataplane.sai.Tam.SetTamEventAttribute:output_type -> lemming.dataplane.sai.SetTamEventAttributeResponse
	98,  // 126: lemming.dataplane.sai.Tam.GetTamEventAttribute:output_type -> lemming.dataplane.sai.GetTamEventAttributeResponse
	83,  // [83:127] is the sub-list for method output_type
	39,  // [39:83] is the sub-list for method input_type
	39,  // [39:39] is the sub-list for extension type_name
	39,  // [39:39] is the sub-list for extension extendee
	0,   // [0:39] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_tam_proto_init() }
func file_dataplane_standalone_proto_tam_proto_init() {
	if File_dataplane_standalone_proto_tam_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_tam_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamMathFuncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamMathFuncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamMathFuncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamMathFuncResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamMathFuncAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamMathFuncAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamMathFuncAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamMathFuncAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamReportAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamReportAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamReportAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamReportAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamEventThresholdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamEventThresholdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamEventThresholdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamEventThresholdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamEventThresholdAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamEventThresholdAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamEventThresholdAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamEventThresholdAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamIntRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamIntResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamIntRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamIntResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamIntAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamIntAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamIntAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamIntAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamTelTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamTelTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamTelTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamTelTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamTelTypeAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamTelTypeAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamTelTypeAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamTelTypeAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamTransportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamTransportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamTransportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamTransportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamTransportAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamTransportAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamTransportAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamTransportAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamTelemetryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamTelemetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamTelemetryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamTelemetryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamTelemetryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamTelemetryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamTelemetryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamTelemetryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamCollectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamCollectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamCollectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamCollectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamCollectorAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamCollectorAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamCollectorAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamCollectorAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamEventActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamEventActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamEventActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamEventActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamEventActionAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamEventActionAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamEventActionAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamEventActionAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTamEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTamEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamEventAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTamEventAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamEventAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tam_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTamEventAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_tam_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[32].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[40].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[44].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[60].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[68].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[72].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[76].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tam_proto_msgTypes[84].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_tam_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   88,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_tam_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_tam_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_tam_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_tam_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_tam_proto = out.File
	file_dataplane_standalone_proto_tam_proto_rawDesc = nil
	file_dataplane_standalone_proto_tam_proto_goTypes = nil
	file_dataplane_standalone_proto_tam_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TamClient is the client API for Tam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TamClient interface {
	CreateTam(ctx context.Context, in *CreateTamRequest, opts ...grpc.CallOption) (*CreateTamResponse, error)
	RemoveTam(ctx context.Context, in *RemoveTamRequest, opts ...grpc.CallOption) (*RemoveTamResponse, error)
	SetTamAttribute(ctx context.Context, in *SetTamAttributeRequest, opts ...grpc.CallOption) (*SetTamAttributeResponse, error)
	GetTamAttribute(ctx context.Context, in *GetTamAttributeRequest, opts ...grpc.CallOption) (*GetTamAttributeResponse, error)
	CreateTamMathFunc(ctx context.Context, in *CreateTamMathFuncRequest, opts ...grpc.CallOption) (*CreateTamMathFuncResponse, error)
	RemoveTamMathFunc(ctx context.Context, in *RemoveTamMathFuncRequest, opts ...grpc.CallOption) (*RemoveTamMathFuncResponse, error)
	SetTamMathFuncAttribute(ctx context.Context, in *SetTamMathFuncAttributeRequest, opts ...grpc.CallOption) (*SetTamMathFuncAttributeResponse, error)
	GetTamMathFuncAttribute(ctx context.Context, in *GetTamMathFuncAttributeRequest, opts ...grpc.CallOption) (*GetTamMathFuncAttributeResponse, error)
	CreateTamReport(ctx context.Context, in *CreateTamReportRequest, opts ...grpc.CallOption) (*CreateTamReportResponse, error)
	RemoveTamReport(ctx context.Context, in *RemoveTamReportRequest, opts ...grpc.CallOption) (*RemoveTamReportResponse, error)
	SetTamReportAttribute(ctx context.Context, in *SetTamReportAttributeRequest, opts ...grpc.CallOption) (*SetTamReportAttributeResponse, error)
	GetTamReportAttribute(ctx context.Context, in *GetTamReportAttributeRequest, opts ...grpc.CallOption) (*GetTamReportAttributeResponse, error)
	CreateTamEventThreshold(ctx context.Context, in *CreateTamEventThresholdRequest, opts ...grpc.CallOption) (*CreateTamEventThresholdResponse, error)
	RemoveTamEventThreshold(ctx context.Context, in *RemoveTamEventThresholdRequest, opts ...grpc.CallOption) (*RemoveTamEventThresholdResponse, error)
	SetTamEventThresholdAttribute(ctx context.Context, in *SetTamEventThresholdAttributeRequest, opts ...grpc.CallOption) (*SetTamEventThresholdAttributeResponse, error)
	GetTamEventThresholdAttribute(ctx context.Context, in *GetTamEventThresholdAttributeRequest, opts ...grpc.CallOption) (*GetTamEventThresholdAttributeResponse, error)
	CreateTamInt(ctx context.Context, in *CreateTamIntRequest, opts ...grpc.CallOption) (*CreateTamIntResponse, error)
	RemoveTamInt(ctx context.Context, in *RemoveTamIntRequest, opts ...grpc.CallOption) (*RemoveTamIntResponse, error)
	SetTamIntAttribute(ctx context.Context, in *SetTamIntAttributeRequest, opts ...grpc.CallOption) (*SetTamIntAttributeResponse, error)
	GetTamIntAttribute(ctx context.Context, in *GetTamIntAttributeRequest, opts ...grpc.CallOption) (*GetTamIntAttributeResponse, error)
	CreateTamTelType(ctx context.Context, in *CreateTamTelTypeRequest, opts ...grpc.CallOption) (*CreateTamTelTypeResponse, error)
	RemoveTamTelType(ctx context.Context, in *RemoveTamTelTypeRequest, opts ...grpc.CallOption) (*RemoveTamTelTypeResponse, error)
	SetTamTelTypeAttribute(ctx context.Context, in *SetTamTelTypeAttributeRequest, opts ...grpc.CallOption) (*SetTamTelTypeAttributeResponse, error)
	GetTamTelTypeAttribute(ctx context.Context, in *GetTamTelTypeAttributeRequest, opts ...grpc.CallOption) (*GetTamTelTypeAttributeResponse, error)
	CreateTamTransport(ctx context.Context, in *CreateTamTransportRequest, opts ...grpc.CallOption) (*CreateTamTransportResponse, error)
	RemoveTamTransport(ctx context.Context, in *RemoveTamTransportRequest, opts ...grpc.CallOption) (*RemoveTamTransportResponse, error)
	SetTamTransportAttribute(ctx context.Context, in *SetTamTransportAttributeRequest, opts ...grpc.CallOption) (*SetTamTransportAttributeResponse, error)
	GetTamTransportAttribute(ctx context.Context, in *GetTamTransportAttributeRequest, opts ...grpc.CallOption) (*GetTamTransportAttributeResponse, error)
	CreateTamTelemetry(ctx context.Context, in *CreateTamTelemetryRequest, opts ...grpc.CallOption) (*CreateTamTelemetryResponse, error)
	RemoveTamTelemetry(ctx context.Context, in *RemoveTamTelemetryRequest, opts ...grpc.CallOption) (*RemoveTamTelemetryResponse, error)
	SetTamTelemetryAttribute(ctx context.Context, in *SetTamTelemetryAttributeRequest, opts ...grpc.CallOption) (*SetTamTelemetryAttributeResponse, error)
	GetTamTelemetryAttribute(ctx context.Context, in *GetTamTelemetryAttributeRequest, opts ...grpc.CallOption) (*GetTamTelemetryAttributeResponse, error)
	CreateTamCollector(ctx context.Context, in *CreateTamCollectorRequest, opts ...grpc.CallOption) (*CreateTamCollectorResponse, error)
	RemoveTamCollector(ctx context.Context, in *RemoveTamCollectorRequest, opts ...grpc.CallOption) (*RemoveTamCollectorResponse, error)
	SetTamCollectorAttribute(ctx context.Context, in *SetTamCollectorAttributeRequest, opts ...grpc.CallOption) (*SetTamCollectorAttributeResponse, error)
	GetTamCollectorAttribute(ctx context.Context, in *GetTamCollectorAttributeRequest, opts ...grpc.CallOption) (*GetTamCollectorAttributeResponse, error)
	CreateTamEventAction(ctx context.Context, in *CreateTamEventActionRequest, opts ...grpc.CallOption) (*CreateTamEventActionResponse, error)
	RemoveTamEventAction(ctx context.Context, in *RemoveTamEventActionRequest, opts ...grpc.CallOption) (*RemoveTamEventActionResponse, error)
	SetTamEventActionAttribute(ctx context.Context, in *SetTamEventActionAttributeRequest, opts ...grpc.CallOption) (*SetTamEventActionAttributeResponse, error)
	GetTamEventActionAttribute(ctx context.Context, in *GetTamEventActionAttributeRequest, opts ...grpc.CallOption) (*GetTamEventActionAttributeResponse, error)
	CreateTamEvent(ctx context.Context, in *CreateTamEventRequest, opts ...grpc.CallOption) (*CreateTamEventResponse, error)
	RemoveTamEvent(ctx context.Context, in *RemoveTamEventRequest, opts ...grpc.CallOption) (*RemoveTamEventResponse, error)
	SetTamEventAttribute(ctx context.Context, in *SetTamEventAttributeRequest, opts ...grpc.CallOption) (*SetTamEventAttributeResponse, error)
	GetTamEventAttribute(ctx context.Context, in *GetTamEventAttributeRequest, opts ...grpc.CallOption) (*GetTamEventAttributeResponse, error)
}

type tamClient struct {
	cc grpc.ClientConnInterface
}

func NewTamClient(cc grpc.ClientConnInterface) TamClient {
	return &tamClient{cc}
}

func (c *tamClient) CreateTam(ctx context.Context, in *CreateTamRequest, opts ...grpc.CallOption) (*CreateTamResponse, error) {
	out := new(CreateTamResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/CreateTam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTam(ctx context.Context, in *RemoveTamRequest, opts ...grpc.CallOption) (*RemoveTamResponse, error) {
	out := new(RemoveTamResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/RemoveTam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamAttribute(ctx context.Context, in *SetTamAttributeRequest, opts ...grpc.CallOption) (*SetTamAttributeResponse, error) {
	out := new(SetTamAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/SetTamAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamAttribute(ctx context.Context, in *GetTamAttributeRequest, opts ...grpc.CallOption) (*GetTamAttributeResponse, error) {
	out := new(GetTamAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/GetTamAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamMathFunc(ctx context.Context, in *CreateTamMathFuncRequest, opts ...grpc.CallOption) (*CreateTamMathFuncResponse, error) {
	out := new(CreateTamMathFuncResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/CreateTamMathFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamMathFunc(ctx context.Context, in *RemoveTamMathFuncRequest, opts ...grpc.CallOption) (*RemoveTamMathFuncResponse, error) {
	out := new(RemoveTamMathFuncResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/RemoveTamMathFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamMathFuncAttribute(ctx context.Context, in *SetTamMathFuncAttributeRequest, opts ...grpc.CallOption) (*SetTamMathFuncAttributeResponse, error) {
	out := new(SetTamMathFuncAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/SetTamMathFuncAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamMathFuncAttribute(ctx context.Context, in *GetTamMathFuncAttributeRequest, opts ...grpc.CallOption) (*GetTamMathFuncAttributeResponse, error) {
	out := new(GetTamMathFuncAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/GetTamMathFuncAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamReport(ctx context.Context, in *CreateTamReportRequest, opts ...grpc.CallOption) (*CreateTamReportResponse, error) {
	out := new(CreateTamReportResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/CreateTamReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamReport(ctx context.Context, in *RemoveTamReportRequest, opts ...grpc.CallOption) (*RemoveTamReportResponse, error) {
	out := new(RemoveTamReportResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/RemoveTamReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamReportAttribute(ctx context.Context, in *SetTamReportAttributeRequest, opts ...grpc.CallOption) (*SetTamReportAttributeResponse, error) {
	out := new(SetTamReportAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/SetTamReportAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamReportAttribute(ctx context.Context, in *GetTamReportAttributeRequest, opts ...grpc.CallOption) (*GetTamReportAttributeResponse, error) {
	out := new(GetTamReportAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/GetTamReportAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamEventThreshold(ctx context.Context, in *CreateTamEventThresholdRequest, opts ...grpc.CallOption) (*CreateTamEventThresholdResponse, error) {
	out := new(CreateTamEventThresholdResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/CreateTamEventThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamEventThreshold(ctx context.Context, in *RemoveTamEventThresholdRequest, opts ...grpc.CallOption) (*RemoveTamEventThresholdResponse, error) {
	out := new(RemoveTamEventThresholdResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/RemoveTamEventThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamEventThresholdAttribute(ctx context.Context, in *SetTamEventThresholdAttributeRequest, opts ...grpc.CallOption) (*SetTamEventThresholdAttributeResponse, error) {
	out := new(SetTamEventThresholdAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/SetTamEventThresholdAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamEventThresholdAttribute(ctx context.Context, in *GetTamEventThresholdAttributeRequest, opts ...grpc.CallOption) (*GetTamEventThresholdAttributeResponse, error) {
	out := new(GetTamEventThresholdAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/GetTamEventThresholdAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamInt(ctx context.Context, in *CreateTamIntRequest, opts ...grpc.CallOption) (*CreateTamIntResponse, error) {
	out := new(CreateTamIntResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/CreateTamInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamInt(ctx context.Context, in *RemoveTamIntRequest, opts ...grpc.CallOption) (*RemoveTamIntResponse, error) {
	out := new(RemoveTamIntResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/RemoveTamInt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamIntAttribute(ctx context.Context, in *SetTamIntAttributeRequest, opts ...grpc.CallOption) (*SetTamIntAttributeResponse, error) {
	out := new(SetTamIntAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/SetTamIntAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamIntAttribute(ctx context.Context, in *GetTamIntAttributeRequest, opts ...grpc.CallOption) (*GetTamIntAttributeResponse, error) {
	out := new(GetTamIntAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/GetTamIntAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamTelType(ctx context.Context, in *CreateTamTelTypeRequest, opts ...grpc.CallOption) (*CreateTamTelTypeResponse, error) {
	out := new(CreateTamTelTypeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/CreateTamTelType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamTelType(ctx context.Context, in *RemoveTamTelTypeRequest, opts ...grpc.CallOption) (*RemoveTamTelTypeResponse, error) {
	out := new(RemoveTamTelTypeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/RemoveTamTelType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamTelTypeAttribute(ctx context.Context, in *SetTamTelTypeAttributeRequest, opts ...grpc.CallOption) (*SetTamTelTypeAttributeResponse, error) {
	out := new(SetTamTelTypeAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/SetTamTelTypeAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamTelTypeAttribute(ctx context.Context, in *GetTamTelTypeAttributeRequest, opts ...grpc.CallOption) (*GetTamTelTypeAttributeResponse, error) {
	out := new(GetTamTelTypeAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/GetTamTelTypeAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamTransport(ctx context.Context, in *CreateTamTransportRequest, opts ...grpc.CallOption) (*CreateTamTransportResponse, error) {
	out := new(CreateTamTransportResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/CreateTamTransport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamTransport(ctx context.Context, in *RemoveTamTransportRequest, opts ...grpc.CallOption) (*RemoveTamTransportResponse, error) {
	out := new(RemoveTamTransportResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/RemoveTamTransport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamTransportAttribute(ctx context.Context, in *SetTamTransportAttributeRequest, opts ...grpc.CallOption) (*SetTamTransportAttributeResponse, error) {
	out := new(SetTamTransportAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/SetTamTransportAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamTransportAttribute(ctx context.Context, in *GetTamTransportAttributeRequest, opts ...grpc.CallOption) (*GetTamTransportAttributeResponse, error) {
	out := new(GetTamTransportAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/GetTamTransportAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamTelemetry(ctx context.Context, in *CreateTamTelemetryRequest, opts ...grpc.CallOption) (*CreateTamTelemetryResponse, error) {
	out := new(CreateTamTelemetryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/CreateTamTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamTelemetry(ctx context.Context, in *RemoveTamTelemetryRequest, opts ...grpc.CallOption) (*RemoveTamTelemetryResponse, error) {
	out := new(RemoveTamTelemetryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/RemoveTamTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamTelemetryAttribute(ctx context.Context, in *SetTamTelemetryAttributeRequest, opts ...grpc.CallOption) (*SetTamTelemetryAttributeResponse, error) {
	out := new(SetTamTelemetryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/SetTamTelemetryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamTelemetryAttribute(ctx context.Context, in *GetTamTelemetryAttributeRequest, opts ...grpc.CallOption) (*GetTamTelemetryAttributeResponse, error) {
	out := new(GetTamTelemetryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/GetTamTelemetryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamCollector(ctx context.Context, in *CreateTamCollectorRequest, opts ...grpc.CallOption) (*CreateTamCollectorResponse, error) {
	out := new(CreateTamCollectorResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/CreateTamCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamCollector(ctx context.Context, in *RemoveTamCollectorRequest, opts ...grpc.CallOption) (*RemoveTamCollectorResponse, error) {
	out := new(RemoveTamCollectorResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/RemoveTamCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamCollectorAttribute(ctx context.Context, in *SetTamCollectorAttributeRequest, opts ...grpc.CallOption) (*SetTamCollectorAttributeResponse, error) {
	out := new(SetTamCollectorAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/SetTamCollectorAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamCollectorAttribute(ctx context.Context, in *GetTamCollectorAttributeRequest, opts ...grpc.CallOption) (*GetTamCollectorAttributeResponse, error) {
	out := new(GetTamCollectorAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/GetTamCollectorAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamEventAction(ctx context.Context, in *CreateTamEventActionRequest, opts ...grpc.CallOption) (*CreateTamEventActionResponse, error) {
	out := new(CreateTamEventActionResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/CreateTamEventAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamEventAction(ctx context.Context, in *RemoveTamEventActionRequest, opts ...grpc.CallOption) (*RemoveTamEventActionResponse, error) {
	out := new(RemoveTamEventActionResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/RemoveTamEventAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamEventActionAttribute(ctx context.Context, in *SetTamEventActionAttributeRequest, opts ...grpc.CallOption) (*SetTamEventActionAttributeResponse, error) {
	out := new(SetTamEventActionAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/SetTamEventActionAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamEventActionAttribute(ctx context.Context, in *GetTamEventActionAttributeRequest, opts ...grpc.CallOption) (*GetTamEventActionAttributeResponse, error) {
	out := new(GetTamEventActionAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/GetTamEventActionAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamEvent(ctx context.Context, in *CreateTamEventRequest, opts ...grpc.CallOption) (*CreateTamEventResponse, error) {
	out := new(CreateTamEventResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/CreateTamEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamEvent(ctx context.Context, in *RemoveTamEventRequest, opts ...grpc.CallOption) (*RemoveTamEventResponse, error) {
	out := new(RemoveTamEventResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/RemoveTamEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamEventAttribute(ctx context.Context, in *SetTamEventAttributeRequest, opts ...grpc.CallOption) (*SetTamEventAttributeResponse, error) {
	out := new(SetTamEventAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/SetTamEventAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamEventAttribute(ctx context.Context, in *GetTamEventAttributeRequest, opts ...grpc.CallOption) (*GetTamEventAttributeResponse, error) {
	out := new(GetTamEventAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tam/GetTamEventAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TamServer is the server API for Tam service.
type TamServer interface {
	CreateTam(context.Context, *CreateTamRequest) (*CreateTamResponse, error)
	RemoveTam(context.Context, *RemoveTamRequest) (*RemoveTamResponse, error)
	SetTamAttribute(context.Context, *SetTamAttributeRequest) (*SetTamAttributeResponse, error)
	GetTamAttribute(context.Context, *GetTamAttributeRequest) (*GetTamAttributeResponse, error)
	CreateTamMathFunc(context.Context, *CreateTamMathFuncRequest) (*CreateTamMathFuncResponse, error)
	RemoveTamMathFunc(context.Context, *RemoveTamMathFuncRequest) (*RemoveTamMathFuncResponse, error)
	SetTamMathFuncAttribute(context.Context, *SetTamMathFuncAttributeRequest) (*SetTamMathFuncAttributeResponse, error)
	GetTamMathFuncAttribute(context.Context, *GetTamMathFuncAttributeRequest) (*GetTamMathFuncAttributeResponse, error)
	CreateTamReport(context.Context, *CreateTamReportRequest) (*CreateTamReportResponse, error)
	RemoveTamReport(context.Context, *RemoveTamReportRequest) (*RemoveTamReportResponse, error)
	SetTamReportAttribute(context.Context, *SetTamReportAttributeRequest) (*SetTamReportAttributeResponse, error)
	GetTamReportAttribute(context.Context, *GetTamReportAttributeRequest) (*GetTamReportAttributeResponse, error)
	CreateTamEventThreshold(context.Context, *CreateTamEventThresholdRequest) (*CreateTamEventThresholdResponse, error)
	RemoveTamEventThreshold(context.Context, *RemoveTamEventThresholdRequest) (*RemoveTamEventThresholdResponse, error)
	SetTamEventThresholdAttribute(context.Context, *SetTamEventThresholdAttributeRequest) (*SetTamEventThresholdAttributeResponse, error)
	GetTamEventThresholdAttribute(context.Context, *GetTamEventThresholdAttributeRequest) (*GetTamEventThresholdAttributeResponse, error)
	CreateTamInt(context.Context, *CreateTamIntRequest) (*CreateTamIntResponse, error)
	RemoveTamInt(context.Context, *RemoveTamIntRequest) (*RemoveTamIntResponse, error)
	SetTamIntAttribute(context.Context, *SetTamIntAttributeRequest) (*SetTamIntAttributeResponse, error)
	GetTamIntAttribute(context.Context, *GetTamIntAttributeRequest) (*GetTamIntAttributeResponse, error)
	CreateTamTelType(context.Context, *CreateTamTelTypeRequest) (*CreateTamTelTypeResponse, error)
	RemoveTamTelType(context.Context, *RemoveTamTelTypeRequest) (*RemoveTamTelTypeResponse, error)
	SetTamTelTypeAttribute(context.Context, *SetTamTelTypeAttributeRequest) (*SetTamTelTypeAttributeResponse, error)
	GetTamTelTypeAttribute(context.Context, *GetTamTelTypeAttributeRequest) (*GetTamTelTypeAttributeResponse, error)
	CreateTamTransport(context.Context, *CreateTamTransportRequest) (*CreateTamTransportResponse, error)
	RemoveTamTransport(context.Context, *RemoveTamTransportRequest) (*RemoveTamTransportResponse, error)
	SetTamTransportAttribute(context.Context, *SetTamTransportAttributeRequest) (*SetTamTransportAttributeResponse, error)
	GetTamTransportAttribute(context.Context, *GetTamTransportAttributeRequest) (*GetTamTransportAttributeResponse, error)
	CreateTamTelemetry(context.Context, *CreateTamTelemetryRequest) (*CreateTamTelemetryResponse, error)
	RemoveTamTelemetry(context.Context, *RemoveTamTelemetryRequest) (*RemoveTamTelemetryResponse, error)
	SetTamTelemetryAttribute(context.Context, *SetTamTelemetryAttributeRequest) (*SetTamTelemetryAttributeResponse, error)
	GetTamTelemetryAttribute(context.Context, *GetTamTelemetryAttributeRequest) (*GetTamTelemetryAttributeResponse, error)
	CreateTamCollector(context.Context, *CreateTamCollectorRequest) (*CreateTamCollectorResponse, error)
	RemoveTamCollector(context.Context, *RemoveTamCollectorRequest) (*RemoveTamCollectorResponse, error)
	SetTamCollectorAttribute(context.Context, *SetTamCollectorAttributeRequest) (*SetTamCollectorAttributeResponse, error)
	GetTamCollectorAttribute(context.Context, *GetTamCollectorAttributeRequest) (*GetTamCollectorAttributeResponse, error)
	CreateTamEventAction(context.Context, *CreateTamEventActionRequest) (*CreateTamEventActionResponse, error)
	RemoveTamEventAction(context.Context, *RemoveTamEventActionRequest) (*RemoveTamEventActionResponse, error)
	SetTamEventActionAttribute(context.Context, *SetTamEventActionAttributeRequest) (*SetTamEventActionAttributeResponse, error)
	GetTamEventActionAttribute(context.Context, *GetTamEventActionAttributeRequest) (*GetTamEventActionAttributeResponse, error)
	CreateTamEvent(context.Context, *CreateTamEventRequest) (*CreateTamEventResponse, error)
	RemoveTamEvent(context.Context, *RemoveTamEventRequest) (*RemoveTamEventResponse, error)
	SetTamEventAttribute(context.Context, *SetTamEventAttributeRequest) (*SetTamEventAttributeResponse, error)
	GetTamEventAttribute(context.Context, *GetTamEventAttributeRequest) (*GetTamEventAttributeResponse, error)
}

// UnimplementedTamServer can be embedded to have forward compatible implementations.
type UnimplementedTamServer struct {
}

func (*UnimplementedTamServer) CreateTam(context.Context, *CreateTamRequest) (*CreateTamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTam not implemented")
}
func (*UnimplementedTamServer) RemoveTam(context.Context, *RemoveTamRequest) (*RemoveTamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTam not implemented")
}
func (*UnimplementedTamServer) SetTamAttribute(context.Context, *SetTamAttributeRequest) (*SetTamAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamAttribute not implemented")
}
func (*UnimplementedTamServer) GetTamAttribute(context.Context, *GetTamAttributeRequest) (*GetTamAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamAttribute not implemented")
}
func (*UnimplementedTamServer) CreateTamMathFunc(context.Context, *CreateTamMathFuncRequest) (*CreateTamMathFuncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamMathFunc not implemented")
}
func (*UnimplementedTamServer) RemoveTamMathFunc(context.Context, *RemoveTamMathFuncRequest) (*RemoveTamMathFuncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamMathFunc not implemented")
}
func (*UnimplementedTamServer) SetTamMathFuncAttribute(context.Context, *SetTamMathFuncAttributeRequest) (*SetTamMathFuncAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamMathFuncAttribute not implemented")
}
func (*UnimplementedTamServer) GetTamMathFuncAttribute(context.Context, *GetTamMathFuncAttributeRequest) (*GetTamMathFuncAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamMathFuncAttribute not implemented")
}
func (*UnimplementedTamServer) CreateTamReport(context.Context, *CreateTamReportRequest) (*CreateTamReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamReport not implemented")
}
func (*UnimplementedTamServer) RemoveTamReport(context.Context, *RemoveTamReportRequest) (*RemoveTamReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamReport not implemented")
}
func (*UnimplementedTamServer) SetTamReportAttribute(context.Context, *SetTamReportAttributeRequest) (*SetTamReportAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamReportAttribute not implemented")
}
func (*UnimplementedTamServer) GetTamReportAttribute(context.Context, *GetTamReportAttributeRequest) (*GetTamReportAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamReportAttribute not implemented")
}
func (*UnimplementedTamServer) CreateTamEventThreshold(context.Context, *CreateTamEventThresholdRequest) (*CreateTamEventThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamEventThreshold not implemented")
}
func (*UnimplementedTamServer) RemoveTamEventThreshold(context.Context, *RemoveTamEventThresholdRequest) (*RemoveTamEventThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamEventThreshold not implemented")
}
func (*UnimplementedTamServer) SetTamEventThresholdAttribute(context.Context, *SetTamEventThresholdAttributeRequest) (*SetTamEventThresholdAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamEventThresholdAttribute not implemented")
}
func (*UnimplementedTamServer) GetTamEventThresholdAttribute(context.Context, *GetTamEventThresholdAttributeRequest) (*GetTamEventThresholdAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamEventThresholdAttribute not implemented")
}
func (*UnimplementedTamServer) CreateTamInt(context.Context, *CreateTamIntRequest) (*CreateTamIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamInt not implemented")
}
func (*UnimplementedTamServer) RemoveTamInt(context.Context, *RemoveTamIntRequest) (*RemoveTamIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamInt not implemented")
}
func (*UnimplementedTamServer) SetTamIntAttribute(context.Context, *SetTamIntAttributeRequest) (*SetTamIntAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamIntAttribute not implemented")
}
func (*UnimplementedTamServer) GetTamIntAttribute(context.Context, *GetTamIntAttributeRequest) (*GetTamIntAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamIntAttribute not implemented")
}
func (*UnimplementedTamServer) CreateTamTelType(context.Context, *CreateTamTelTypeRequest) (*CreateTamTelTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamTelType not implemented")
}
func (*UnimplementedTamServer) RemoveTamTelType(context.Context, *RemoveTamTelTypeRequest) (*RemoveTamTelTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamTelType not implemented")
}
func (*UnimplementedTamServer) SetTamTelTypeAttribute(context.Context, *SetTamTelTypeAttributeRequest) (*SetTamTelTypeAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamTelTypeAttribute not implemented")
}
func (*UnimplementedTamServer) GetTamTelTypeAttribute(context.Context, *GetTamTelTypeAttributeRequest) (*GetTamTelTypeAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamTelTypeAttribute not implemented")
}
func (*UnimplementedTamServer) CreateTamTransport(context.Context, *CreateTamTransportRequest) (*CreateTamTransportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamTransport not implemented")
}
func (*UnimplementedTamServer) RemoveTamTransport(context.Context, *RemoveTamTransportRequest) (*RemoveTamTransportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamTransport not implemented")
}
func (*UnimplementedTamServer) SetTamTransportAttribute(context.Context, *SetTamTransportAttributeRequest) (*SetTamTransportAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamTransportAttribute not implemented")
}
func (*UnimplementedTamServer) GetTamTransportAttribute(context.Context, *GetTamTransportAttributeRequest) (*GetTamTransportAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamTransportAttribute not implemented")
}
func (*UnimplementedTamServer) CreateTamTelemetry(context.Context, *CreateTamTelemetryRequest) (*CreateTamTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamTelemetry not implemented")
}
func (*UnimplementedTamServer) RemoveTamTelemetry(context.Context, *RemoveTamTelemetryRequest) (*RemoveTamTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamTelemetry not implemented")
}
func (*UnimplementedTamServer) SetTamTelemetryAttribute(context.Context, *SetTamTelemetryAttributeRequest) (*SetTamTelemetryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamTelemetryAttribute not implemented")
}
func (*UnimplementedTamServer) GetTamTelemetryAttribute(context.Context, *GetTamTelemetryAttributeRequest) (*GetTamTelemetryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamTelemetryAttribute not implemented")
}
func (*UnimplementedTamServer) CreateTamCollector(context.Context, *CreateTamCollectorRequest) (*CreateTamCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamCollector not implemented")
}
func (*UnimplementedTamServer) RemoveTamCollector(context.Context, *RemoveTamCollectorRequest) (*RemoveTamCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamCollector not implemented")
}
func (*UnimplementedTamServer) SetTamCollectorAttribute(context.Context, *SetTamCollectorAttributeRequest) (*SetTamCollectorAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamCollectorAttribute not implemented")
}
func (*UnimplementedTamServer) GetTamCollectorAttribute(context.Context, *GetTamCollectorAttributeRequest) (*GetTamCollectorAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamCollectorAttribute not implemented")
}
func (*UnimplementedTamServer) CreateTamEventAction(context.Context, *CreateTamEventActionRequest) (*CreateTamEventActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamEventAction not implemented")
}
func (*UnimplementedTamServer) RemoveTamEventAction(context.Context, *RemoveTamEventActionRequest) (*RemoveTamEventActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamEventAction not implemented")
}
func (*UnimplementedTamServer) SetTamEventActionAttribute(context.Context, *SetTamEventActionAttributeRequest) (*SetTamEventActionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamEventActionAttribute not implemented")
}
func (*UnimplementedTamServer) GetTamEventActionAttribute(context.Context, *GetTamEventActionAttributeRequest) (*GetTamEventActionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamEventActionAttribute not implemented")
}
func (*UnimplementedTamServer) CreateTamEvent(context.Context, *CreateTamEventRequest) (*CreateTamEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamEvent not implemented")
}
func (*UnimplementedTamServer) RemoveTamEvent(context.Context, *RemoveTamEventRequest) (*RemoveTamEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamEvent not implemented")
}
func (*UnimplementedTamServer) SetTamEventAttribute(context.Context, *SetTamEventAttributeRequest) (*SetTamEventAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamEventAttribute not implemented")
}
func (*UnimplementedTamServer) GetTamEventAttribute(context.Context, *GetTamEventAttributeRequest) (*GetTamEventAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamEventAttribute not implemented")
}

func RegisterTamServer(s *grpc.Server, srv TamServer) {
	s.RegisterService(&_Tam_serviceDesc, srv)
}

func _Tam_CreateTam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/CreateTam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTam(ctx, req.(*CreateTamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/RemoveTam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTam(ctx, req.(*RemoveTamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/SetTamAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamAttribute(ctx, req.(*SetTamAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/GetTamAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamAttribute(ctx, req.(*GetTamAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamMathFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamMathFuncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamMathFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/CreateTamMathFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamMathFunc(ctx, req.(*CreateTamMathFuncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamMathFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamMathFuncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamMathFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/RemoveTamMathFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamMathFunc(ctx, req.(*RemoveTamMathFuncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamMathFuncAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamMathFuncAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamMathFuncAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/SetTamMathFuncAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamMathFuncAttribute(ctx, req.(*SetTamMathFuncAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamMathFuncAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamMathFuncAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamMathFuncAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/GetTamMathFuncAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamMathFuncAttribute(ctx, req.(*GetTamMathFuncAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/CreateTamReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamReport(ctx, req.(*CreateTamReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/RemoveTamReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamReport(ctx, req.(*RemoveTamReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamReportAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamReportAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamReportAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/SetTamReportAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamReportAttribute(ctx, req.(*SetTamReportAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamReportAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamReportAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamReportAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/GetTamReportAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamReportAttribute(ctx, req.(*GetTamReportAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamEventThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamEventThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamEventThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/CreateTamEventThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamEventThreshold(ctx, req.(*CreateTamEventThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamEventThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamEventThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamEventThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/RemoveTamEventThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamEventThreshold(ctx, req.(*RemoveTamEventThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamEventThresholdAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamEventThresholdAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamEventThresholdAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/SetTamEventThresholdAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamEventThresholdAttribute(ctx, req.(*SetTamEventThresholdAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamEventThresholdAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamEventThresholdAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamEventThresholdAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/GetTamEventThresholdAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamEventThresholdAttribute(ctx, req.(*GetTamEventThresholdAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/CreateTamInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamInt(ctx, req.(*CreateTamIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/RemoveTamInt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamInt(ctx, req.(*RemoveTamIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamIntAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamIntAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamIntAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/SetTamIntAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamIntAttribute(ctx, req.(*SetTamIntAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamIntAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamIntAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamIntAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/GetTamIntAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamIntAttribute(ctx, req.(*GetTamIntAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamTelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamTelTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamTelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/CreateTamTelType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamTelType(ctx, req.(*CreateTamTelTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamTelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamTelTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamTelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/RemoveTamTelType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamTelType(ctx, req.(*RemoveTamTelTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamTelTypeAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamTelTypeAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamTelTypeAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/SetTamTelTypeAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamTelTypeAttribute(ctx, req.(*SetTamTelTypeAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamTelTypeAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamTelTypeAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamTelTypeAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/GetTamTelTypeAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamTelTypeAttribute(ctx, req.(*GetTamTelTypeAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamTransport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamTransportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamTransport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/CreateTamTransport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamTransport(ctx, req.(*CreateTamTransportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamTransport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamTransportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamTransport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/RemoveTamTransport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamTransport(ctx, req.(*RemoveTamTransportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamTransportAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamTransportAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamTransportAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/SetTamTransportAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamTransportAttribute(ctx, req.(*SetTamTransportAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamTransportAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamTransportAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamTransportAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/GetTamTransportAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamTransportAttribute(ctx, req.(*GetTamTransportAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/CreateTamTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamTelemetry(ctx, req.(*CreateTamTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/RemoveTamTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamTelemetry(ctx, req.(*RemoveTamTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamTelemetryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamTelemetryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamTelemetryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/SetTamTelemetryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamTelemetryAttribute(ctx, req.(*SetTamTelemetryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamTelemetryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamTelemetryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamTelemetryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/GetTamTelemetryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamTelemetryAttribute(ctx, req.(*GetTamTelemetryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/CreateTamCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamCollector(ctx, req.(*CreateTamCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/RemoveTamCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamCollector(ctx, req.(*RemoveTamCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamCollectorAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamCollectorAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamCollectorAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/SetTamCollectorAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamCollectorAttribute(ctx, req.(*SetTamCollectorAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamCollectorAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamCollectorAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamCollectorAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/GetTamCollectorAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamCollectorAttribute(ctx, req.(*GetTamCollectorAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamEventAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamEventActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamEventAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/CreateTamEventAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamEventAction(ctx, req.(*CreateTamEventActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamEventAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamEventActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamEventAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/RemoveTamEventAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamEventAction(ctx, req.(*RemoveTamEventActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamEventActionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamEventActionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamEventActionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/SetTamEventActionAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamEventActionAttribute(ctx, req.(*SetTamEventActionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamEventActionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamEventActionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamEventActionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/GetTamEventActionAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamEventActionAttribute(ctx, req.(*GetTamEventActionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/CreateTamEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamEvent(ctx, req.(*CreateTamEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/RemoveTamEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamEvent(ctx, req.(*RemoveTamEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamEventAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamEventAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamEventAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/SetTamEventAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamEventAttribute(ctx, req.(*SetTamEventAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamEventAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamEventAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamEventAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tam/GetTamEventAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamEventAttribute(ctx, req.(*GetTamEventAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tam_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Tam",
	HandlerType: (*TamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTam",
			Handler:    _Tam_CreateTam_Handler,
		},
		{
			MethodName: "RemoveTam",
			Handler:    _Tam_RemoveTam_Handler,
		},
		{
			MethodName: "SetTamAttribute",
			Handler:    _Tam_SetTamAttribute_Handler,
		},
		{
			MethodName: "GetTamAttribute",
			Handler:    _Tam_GetTamAttribute_Handler,
		},
		{
			MethodName: "CreateTamMathFunc",
			Handler:    _Tam_CreateTamMathFunc_Handler,
		},
		{
			MethodName: "RemoveTamMathFunc",
			Handler:    _Tam_RemoveTamMathFunc_Handler,
		},
		{
			MethodName: "SetTamMathFuncAttribute",
			Handler:    _Tam_SetTamMathFuncAttribute_Handler,
		},
		{
			MethodName: "GetTamMathFuncAttribute",
			Handler:    _Tam_GetTamMathFuncAttribute_Handler,
		},
		{
			MethodName: "CreateTamReport",
			Handler:    _Tam_CreateTamReport_Handler,
		},
		{
			MethodName: "RemoveTamReport",
			Handler:    _Tam_RemoveTamReport_Handler,
		},
		{
			MethodName: "SetTamReportAttribute",
			Handler:    _Tam_SetTamReportAttribute_Handler,
		},
		{
			MethodName: "GetTamReportAttribute",
			Handler:    _Tam_GetTamReportAttribute_Handler,
		},
		{
			MethodName: "CreateTamEventThreshold",
			Handler:    _Tam_CreateTamEventThreshold_Handler,
		},
		{
			MethodName: "RemoveTamEventThreshold",
			Handler:    _Tam_RemoveTamEventThreshold_Handler,
		},
		{
			MethodName: "SetTamEventThresholdAttribute",
			Handler:    _Tam_SetTamEventThresholdAttribute_Handler,
		},
		{
			MethodName: "GetTamEventThresholdAttribute",
			Handler:    _Tam_GetTamEventThresholdAttribute_Handler,
		},
		{
			MethodName: "CreateTamInt",
			Handler:    _Tam_CreateTamInt_Handler,
		},
		{
			MethodName: "RemoveTamInt",
			Handler:    _Tam_RemoveTamInt_Handler,
		},
		{
			MethodName: "SetTamIntAttribute",
			Handler:    _Tam_SetTamIntAttribute_Handler,
		},
		{
			MethodName: "GetTamIntAttribute",
			Handler:    _Tam_GetTamIntAttribute_Handler,
		},
		{
			MethodName: "CreateTamTelType",
			Handler:    _Tam_CreateTamTelType_Handler,
		},
		{
			MethodName: "RemoveTamTelType",
			Handler:    _Tam_RemoveTamTelType_Handler,
		},
		{
			MethodName: "SetTamTelTypeAttribute",
			Handler:    _Tam_SetTamTelTypeAttribute_Handler,
		},
		{
			MethodName: "GetTamTelTypeAttribute",
			Handler:    _Tam_GetTamTelTypeAttribute_Handler,
		},
		{
			MethodName: "CreateTamTransport",
			Handler:    _Tam_CreateTamTransport_Handler,
		},
		{
			MethodName: "RemoveTamTransport",
			Handler:    _Tam_RemoveTamTransport_Handler,
		},
		{
			MethodName: "SetTamTransportAttribute",
			Handler:    _Tam_SetTamTransportAttribute_Handler,
		},
		{
			MethodName: "GetTamTransportAttribute",
			Handler:    _Tam_GetTamTransportAttribute_Handler,
		},
		{
			MethodName: "CreateTamTelemetry",
			Handler:    _Tam_CreateTamTelemetry_Handler,
		},
		{
			MethodName: "RemoveTamTelemetry",
			Handler:    _Tam_RemoveTamTelemetry_Handler,
		},
		{
			MethodName: "SetTamTelemetryAttribute",
			Handler:    _Tam_SetTamTelemetryAttribute_Handler,
		},
		{
			MethodName: "GetTamTelemetryAttribute",
			Handler:    _Tam_GetTamTelemetryAttribute_Handler,
		},
		{
			MethodName: "CreateTamCollector",
			Handler:    _Tam_CreateTamCollector_Handler,
		},
		{
			MethodName: "RemoveTamCollector",
			Handler:    _Tam_RemoveTamCollector_Handler,
		},
		{
			MethodName: "SetTamCollectorAttribute",
			Handler:    _Tam_SetTamCollectorAttribute_Handler,
		},
		{
			MethodName: "GetTamCollectorAttribute",
			Handler:    _Tam_GetTamCollectorAttribute_Handler,
		},
		{
			MethodName: "CreateTamEventAction",
			Handler:    _Tam_CreateTamEventAction_Handler,
		},
		{
			MethodName: "RemoveTamEventAction",
			Handler:    _Tam_RemoveTamEventAction_Handler,
		},
		{
			MethodName: "SetTamEventActionAttribute",
			Handler:    _Tam_SetTamEventActionAttribute_Handler,
		},
		{
			MethodName: "GetTamEventActionAttribute",
			Handler:    _Tam_GetTamEventActionAttribute_Handler,
		},
		{
			MethodName: "CreateTamEvent",
			Handler:    _Tam_CreateTamEvent_Handler,
		},
		{
			MethodName: "RemoveTamEvent",
			Handler:    _Tam_RemoveTamEvent_Handler,
		},
		{
			MethodName: "SetTamEventAttribute",
			Handler:    _Tam_SetTamEventAttribute_Handler,
		},
		{
			MethodName: "GetTamEventAttribute",
			Handler:    _Tam_GetTamEventAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/tam.proto",
}
