// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/fdb.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FdbEntryAttr int32

const (
	FdbEntryAttr_FDB_ENTRY_ATTR_UNSPECIFIED    FdbEntryAttr = 0
	FdbEntryAttr_FDB_ENTRY_ATTR_TYPE           FdbEntryAttr = 1
	FdbEntryAttr_FDB_ENTRY_ATTR_PACKET_ACTION  FdbEntryAttr = 2
	FdbEntryAttr_FDB_ENTRY_ATTR_USER_TRAP_ID   FdbEntryAttr = 3
	FdbEntryAttr_FDB_ENTRY_ATTR_BRIDGE_PORT_ID FdbEntryAttr = 4
	FdbEntryAttr_FDB_ENTRY_ATTR_META_DATA      FdbEntryAttr = 5
	FdbEntryAttr_FDB_ENTRY_ATTR_ENDPOINT_IP    FdbEntryAttr = 6
	FdbEntryAttr_FDB_ENTRY_ATTR_COUNTER_ID     FdbEntryAttr = 7
	FdbEntryAttr_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE FdbEntryAttr = 8
)

// Enum value maps for FdbEntryAttr.
var (
	FdbEntryAttr_name = map[int32]string{
		0: "FDB_ENTRY_ATTR_UNSPECIFIED",
		1: "FDB_ENTRY_ATTR_TYPE",
		2: "FDB_ENTRY_ATTR_PACKET_ACTION",
		3: "FDB_ENTRY_ATTR_USER_TRAP_ID",
		4: "FDB_ENTRY_ATTR_BRIDGE_PORT_ID",
		5: "FDB_ENTRY_ATTR_META_DATA",
		6: "FDB_ENTRY_ATTR_ENDPOINT_IP",
		7: "FDB_ENTRY_ATTR_COUNTER_ID",
		8: "FDB_ENTRY_ATTR_ALLOW_MAC_MOVE",
	}
	FdbEntryAttr_value = map[string]int32{
		"FDB_ENTRY_ATTR_UNSPECIFIED":    0,
		"FDB_ENTRY_ATTR_TYPE":           1,
		"FDB_ENTRY_ATTR_PACKET_ACTION":  2,
		"FDB_ENTRY_ATTR_USER_TRAP_ID":   3,
		"FDB_ENTRY_ATTR_BRIDGE_PORT_ID": 4,
		"FDB_ENTRY_ATTR_META_DATA":      5,
		"FDB_ENTRY_ATTR_ENDPOINT_IP":    6,
		"FDB_ENTRY_ATTR_COUNTER_ID":     7,
		"FDB_ENTRY_ATTR_ALLOW_MAC_MOVE": 8,
	}
)

func (x FdbEntryAttr) Enum() *FdbEntryAttr {
	p := new(FdbEntryAttr)
	*p = x
	return p
}

func (x FdbEntryAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FdbEntryAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_fdb_proto_enumTypes[0].Descriptor()
}

func (FdbEntryAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_fdb_proto_enumTypes[0]
}

func (x FdbEntryAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FdbEntryAttr.Descriptor instead.
func (FdbEntryAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_fdb_proto_rawDescGZIP(), []int{0}
}

type CreateFdbEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry        *FdbEntry     `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	Type         *FdbEntryType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.FdbEntryType,oneof" json:"type,omitempty"`
	PacketAction *PacketAction `protobuf:"varint,3,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"packet_action,omitempty"`
	UserTrapId   *uint64       `protobuf:"varint,4,opt,name=user_trap_id,json=userTrapId,proto3,oneof" json:"user_trap_id,omitempty"`
	BridgePortId *uint64       `protobuf:"varint,5,opt,name=bridge_port_id,json=bridgePortId,proto3,oneof" json:"bridge_port_id,omitempty"`
	MetaData     *uint32       `protobuf:"varint,6,opt,name=meta_data,json=metaData,proto3,oneof" json:"meta_data,omitempty"`
	EndpointIp   []byte        `protobuf:"bytes,7,opt,name=endpoint_ip,json=endpointIp,proto3,oneof" json:"endpoint_ip,omitempty"`
	CounterId    *uint64       `protobuf:"varint,8,opt,name=counter_id,json=counterId,proto3,oneof" json:"counter_id,omitempty"`
	AllowMacMove *bool         `protobuf:"varint,9,opt,name=allow_mac_move,json=allowMacMove,proto3,oneof" json:"allow_mac_move,omitempty"`
}

func (x *CreateFdbEntryRequest) Reset() {
	*x = CreateFdbEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFdbEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFdbEntryRequest) ProtoMessage() {}

func (x *CreateFdbEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFdbEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateFdbEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_fdb_proto_rawDescGZIP(), []int{0}
}

func (x *CreateFdbEntryRequest) GetEntry() *FdbEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *CreateFdbEntryRequest) GetType() FdbEntryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FdbEntryType_FDB_ENTRY_TYPE_UNSPECIFIED
}

func (x *CreateFdbEntryRequest) GetPacketAction() PacketAction {
	if x != nil && x.PacketAction != nil {
		return *x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateFdbEntryRequest) GetUserTrapId() uint64 {
	if x != nil && x.UserTrapId != nil {
		return *x.UserTrapId
	}
	return 0
}

func (x *CreateFdbEntryRequest) GetBridgePortId() uint64 {
	if x != nil && x.BridgePortId != nil {
		return *x.BridgePortId
	}
	return 0
}

func (x *CreateFdbEntryRequest) GetMetaData() uint32 {
	if x != nil && x.MetaData != nil {
		return *x.MetaData
	}
	return 0
}

func (x *CreateFdbEntryRequest) GetEndpointIp() []byte {
	if x != nil {
		return x.EndpointIp
	}
	return nil
}

func (x *CreateFdbEntryRequest) GetCounterId() uint64 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

func (x *CreateFdbEntryRequest) GetAllowMacMove() bool {
	if x != nil && x.AllowMacMove != nil {
		return *x.AllowMacMove
	}
	return false
}

type CreateFdbEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateFdbEntryResponse) Reset() {
	*x = CreateFdbEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFdbEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFdbEntryResponse) ProtoMessage() {}

func (x *CreateFdbEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFdbEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateFdbEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_fdb_proto_rawDescGZIP(), []int{1}
}

type RemoveFdbEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *FdbEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *RemoveFdbEntryRequest) Reset() {
	*x = RemoveFdbEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFdbEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFdbEntryRequest) ProtoMessage() {}

func (x *RemoveFdbEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFdbEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveFdbEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_fdb_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveFdbEntryRequest) GetEntry() *FdbEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type RemoveFdbEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveFdbEntryResponse) Reset() {
	*x = RemoveFdbEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveFdbEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFdbEntryResponse) ProtoMessage() {}

func (x *RemoveFdbEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFdbEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveFdbEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_fdb_proto_rawDescGZIP(), []int{3}
}

type SetFdbEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry        *FdbEntry     `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	Type         *FdbEntryType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.FdbEntryType,oneof" json:"type,omitempty"`
	PacketAction *PacketAction `protobuf:"varint,3,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"packet_action,omitempty"`
	UserTrapId   *uint64       `protobuf:"varint,4,opt,name=user_trap_id,json=userTrapId,proto3,oneof" json:"user_trap_id,omitempty"`
	BridgePortId *uint64       `protobuf:"varint,5,opt,name=bridge_port_id,json=bridgePortId,proto3,oneof" json:"bridge_port_id,omitempty"`
	MetaData     *uint32       `protobuf:"varint,6,opt,name=meta_data,json=metaData,proto3,oneof" json:"meta_data,omitempty"`
	EndpointIp   []byte        `protobuf:"bytes,7,opt,name=endpoint_ip,json=endpointIp,proto3,oneof" json:"endpoint_ip,omitempty"`
	CounterId    *uint64       `protobuf:"varint,8,opt,name=counter_id,json=counterId,proto3,oneof" json:"counter_id,omitempty"`
	AllowMacMove *bool         `protobuf:"varint,9,opt,name=allow_mac_move,json=allowMacMove,proto3,oneof" json:"allow_mac_move,omitempty"`
}

func (x *SetFdbEntryAttributeRequest) Reset() {
	*x = SetFdbEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFdbEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFdbEntryAttributeRequest) ProtoMessage() {}

func (x *SetFdbEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFdbEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetFdbEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_fdb_proto_rawDescGZIP(), []int{4}
}

func (x *SetFdbEntryAttributeRequest) GetEntry() *FdbEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *SetFdbEntryAttributeRequest) GetType() FdbEntryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FdbEntryType_FDB_ENTRY_TYPE_UNSPECIFIED
}

func (x *SetFdbEntryAttributeRequest) GetPacketAction() PacketAction {
	if x != nil && x.PacketAction != nil {
		return *x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetFdbEntryAttributeRequest) GetUserTrapId() uint64 {
	if x != nil && x.UserTrapId != nil {
		return *x.UserTrapId
	}
	return 0
}

func (x *SetFdbEntryAttributeRequest) GetBridgePortId() uint64 {
	if x != nil && x.BridgePortId != nil {
		return *x.BridgePortId
	}
	return 0
}

func (x *SetFdbEntryAttributeRequest) GetMetaData() uint32 {
	if x != nil && x.MetaData != nil {
		return *x.MetaData
	}
	return 0
}

func (x *SetFdbEntryAttributeRequest) GetEndpointIp() []byte {
	if x != nil {
		return x.EndpointIp
	}
	return nil
}

func (x *SetFdbEntryAttributeRequest) GetCounterId() uint64 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

func (x *SetFdbEntryAttributeRequest) GetAllowMacMove() bool {
	if x != nil && x.AllowMacMove != nil {
		return *x.AllowMacMove
	}
	return false
}

type SetFdbEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetFdbEntryAttributeResponse) Reset() {
	*x = SetFdbEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetFdbEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetFdbEntryAttributeResponse) ProtoMessage() {}

func (x *SetFdbEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetFdbEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetFdbEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_fdb_proto_rawDescGZIP(), []int{5}
}

type GetFdbEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry    *FdbEntry      `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	AttrType []FdbEntryAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.FdbEntryAttr" json:"attr_type,omitempty"`
}

func (x *GetFdbEntryAttributeRequest) Reset() {
	*x = GetFdbEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFdbEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFdbEntryAttributeRequest) ProtoMessage() {}

func (x *GetFdbEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFdbEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetFdbEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_fdb_proto_rawDescGZIP(), []int{6}
}

func (x *GetFdbEntryAttributeRequest) GetEntry() *FdbEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *GetFdbEntryAttributeRequest) GetAttrType() []FdbEntryAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetFdbEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *FdbEntryAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetFdbEntryAttributeResponse) Reset() {
	*x = GetFdbEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFdbEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFdbEntryAttributeResponse) ProtoMessage() {}

func (x *GetFdbEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_fdb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFdbEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetFdbEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_fdb_proto_rawDescGZIP(), []int{7}
}

func (x *GetFdbEntryAttributeResponse) GetAttr() *FdbEntryAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_standalone_proto_fdb_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_fdb_proto_rawDesc = []byte{
	0x0a, 0x24, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x64, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x27, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c,
	0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x04, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46, 0x64,
	0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x0c, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x06, 0x48, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x06, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x07, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x63, 0x4d, 0x6f, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x18, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xf9, 0x04, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46, 0x64,
	0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x0d, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x0c, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x06, 0x48, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x06, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x07, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x63, 0x4d, 0x6f, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x1e, 0x0a, 0x1c,
	0x53, 0x65, 0x74, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46,
	0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x64, 0x62, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46, 0x64, 0x62, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x2a, 0xad, 0x02, 0x0a, 0x0c, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a,
	0x1c, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49,
	0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x49, 0x50, 0x10,
	0x06, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x07,
	0x12, 0x21, 0x0a, 0x1d, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x4d, 0x4f, 0x56,
	0x45, 0x10, 0x08, 0x32, 0xef, 0x03, 0x0a, 0x03, 0x46, 0x64, 0x62, 0x12, 0x6f, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x64, 0x62, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x64, 0x62,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x64, 0x62, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01,
	0x0a, 0x14, 0x53, 0x65, 0x74, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53,
	0x65, 0x74, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_fdb_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_fdb_proto_rawDescData = file_dataplane_standalone_proto_fdb_proto_rawDesc
)

func file_dataplane_standalone_proto_fdb_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_fdb_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_fdb_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_fdb_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_fdb_proto_rawDescData
}

var file_dataplane_standalone_proto_fdb_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_standalone_proto_fdb_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dataplane_standalone_proto_fdb_proto_goTypes = []interface{}{
	(FdbEntryAttr)(0),                    // 0: lemming.dataplane.sai.FdbEntryAttr
	(*CreateFdbEntryRequest)(nil),        // 1: lemming.dataplane.sai.CreateFdbEntryRequest
	(*CreateFdbEntryResponse)(nil),       // 2: lemming.dataplane.sai.CreateFdbEntryResponse
	(*RemoveFdbEntryRequest)(nil),        // 3: lemming.dataplane.sai.RemoveFdbEntryRequest
	(*RemoveFdbEntryResponse)(nil),       // 4: lemming.dataplane.sai.RemoveFdbEntryResponse
	(*SetFdbEntryAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetFdbEntryAttributeRequest
	(*SetFdbEntryAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetFdbEntryAttributeResponse
	(*GetFdbEntryAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetFdbEntryAttributeRequest
	(*GetFdbEntryAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetFdbEntryAttributeResponse
	(*FdbEntry)(nil),                     // 9: lemming.dataplane.sai.FdbEntry
	(FdbEntryType)(0),                    // 10: lemming.dataplane.sai.FdbEntryType
	(PacketAction)(0),                    // 11: lemming.dataplane.sai.PacketAction
	(*FdbEntryAttribute)(nil),            // 12: lemming.dataplane.sai.FdbEntryAttribute
}
var file_dataplane_standalone_proto_fdb_proto_depIdxs = []int32{
	9,  // 0: lemming.dataplane.sai.CreateFdbEntryRequest.entry:type_name -> lemming.dataplane.sai.FdbEntry
	10, // 1: lemming.dataplane.sai.CreateFdbEntryRequest.type:type_name -> lemming.dataplane.sai.FdbEntryType
	11, // 2: lemming.dataplane.sai.CreateFdbEntryRequest.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	9,  // 3: lemming.dataplane.sai.RemoveFdbEntryRequest.entry:type_name -> lemming.dataplane.sai.FdbEntry
	9,  // 4: lemming.dataplane.sai.SetFdbEntryAttributeRequest.entry:type_name -> lemming.dataplane.sai.FdbEntry
	10, // 5: lemming.dataplane.sai.SetFdbEntryAttributeRequest.type:type_name -> lemming.dataplane.sai.FdbEntryType
	11, // 6: lemming.dataplane.sai.SetFdbEntryAttributeRequest.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	9,  // 7: lemming.dataplane.sai.GetFdbEntryAttributeRequest.entry:type_name -> lemming.dataplane.sai.FdbEntry
	0,  // 8: lemming.dataplane.sai.GetFdbEntryAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.FdbEntryAttr
	12, // 9: lemming.dataplane.sai.GetFdbEntryAttributeResponse.attr:type_name -> lemming.dataplane.sai.FdbEntryAttribute
	1,  // 10: lemming.dataplane.sai.Fdb.CreateFdbEntry:input_type -> lemming.dataplane.sai.CreateFdbEntryRequest
	3,  // 11: lemming.dataplane.sai.Fdb.RemoveFdbEntry:input_type -> lemming.dataplane.sai.RemoveFdbEntryRequest
	5,  // 12: lemming.dataplane.sai.Fdb.SetFdbEntryAttribute:input_type -> lemming.dataplane.sai.SetFdbEntryAttributeRequest
	7,  // 13: lemming.dataplane.sai.Fdb.GetFdbEntryAttribute:input_type -> lemming.dataplane.sai.GetFdbEntryAttributeRequest
	2,  // 14: lemming.dataplane.sai.Fdb.CreateFdbEntry:output_type -> lemming.dataplane.sai.CreateFdbEntryResponse
	4,  // 15: lemming.dataplane.sai.Fdb.RemoveFdbEntry:output_type -> lemming.dataplane.sai.RemoveFdbEntryResponse
	6,  // 16: lemming.dataplane.sai.Fdb.SetFdbEntryAttribute:output_type -> lemming.dataplane.sai.SetFdbEntryAttributeResponse
	8,  // 17: lemming.dataplane.sai.Fdb.GetFdbEntryAttribute:output_type -> lemming.dataplane.sai.GetFdbEntryAttributeResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_fdb_proto_init() }
func file_dataplane_standalone_proto_fdb_proto_init() {
	if File_dataplane_standalone_proto_fdb_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_fdb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFdbEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_fdb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFdbEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_fdb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFdbEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_fdb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveFdbEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_fdb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFdbEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_fdb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetFdbEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_fdb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFdbEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_fdb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFdbEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_fdb_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_fdb_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_fdb_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_fdb_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_fdb_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_fdb_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_fdb_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_fdb_proto = out.File
	file_dataplane_standalone_proto_fdb_proto_rawDesc = nil
	file_dataplane_standalone_proto_fdb_proto_goTypes = nil
	file_dataplane_standalone_proto_fdb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FdbClient is the client API for Fdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FdbClient interface {
	CreateFdbEntry(ctx context.Context, in *CreateFdbEntryRequest, opts ...grpc.CallOption) (*CreateFdbEntryResponse, error)
	RemoveFdbEntry(ctx context.Context, in *RemoveFdbEntryRequest, opts ...grpc.CallOption) (*RemoveFdbEntryResponse, error)
	SetFdbEntryAttribute(ctx context.Context, in *SetFdbEntryAttributeRequest, opts ...grpc.CallOption) (*SetFdbEntryAttributeResponse, error)
	GetFdbEntryAttribute(ctx context.Context, in *GetFdbEntryAttributeRequest, opts ...grpc.CallOption) (*GetFdbEntryAttributeResponse, error)
}

type fdbClient struct {
	cc grpc.ClientConnInterface
}

func NewFdbClient(cc grpc.ClientConnInterface) FdbClient {
	return &fdbClient{cc}
}

func (c *fdbClient) CreateFdbEntry(ctx context.Context, in *CreateFdbEntryRequest, opts ...grpc.CallOption) (*CreateFdbEntryResponse, error) {
	out := new(CreateFdbEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Fdb/CreateFdbEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdbClient) RemoveFdbEntry(ctx context.Context, in *RemoveFdbEntryRequest, opts ...grpc.CallOption) (*RemoveFdbEntryResponse, error) {
	out := new(RemoveFdbEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Fdb/RemoveFdbEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdbClient) SetFdbEntryAttribute(ctx context.Context, in *SetFdbEntryAttributeRequest, opts ...grpc.CallOption) (*SetFdbEntryAttributeResponse, error) {
	out := new(SetFdbEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Fdb/SetFdbEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdbClient) GetFdbEntryAttribute(ctx context.Context, in *GetFdbEntryAttributeRequest, opts ...grpc.CallOption) (*GetFdbEntryAttributeResponse, error) {
	out := new(GetFdbEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Fdb/GetFdbEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FdbServer is the server API for Fdb service.
type FdbServer interface {
	CreateFdbEntry(context.Context, *CreateFdbEntryRequest) (*CreateFdbEntryResponse, error)
	RemoveFdbEntry(context.Context, *RemoveFdbEntryRequest) (*RemoveFdbEntryResponse, error)
	SetFdbEntryAttribute(context.Context, *SetFdbEntryAttributeRequest) (*SetFdbEntryAttributeResponse, error)
	GetFdbEntryAttribute(context.Context, *GetFdbEntryAttributeRequest) (*GetFdbEntryAttributeResponse, error)
}

// UnimplementedFdbServer can be embedded to have forward compatible implementations.
type UnimplementedFdbServer struct {
}

func (*UnimplementedFdbServer) CreateFdbEntry(context.Context, *CreateFdbEntryRequest) (*CreateFdbEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFdbEntry not implemented")
}
func (*UnimplementedFdbServer) RemoveFdbEntry(context.Context, *RemoveFdbEntryRequest) (*RemoveFdbEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFdbEntry not implemented")
}
func (*UnimplementedFdbServer) SetFdbEntryAttribute(context.Context, *SetFdbEntryAttributeRequest) (*SetFdbEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFdbEntryAttribute not implemented")
}
func (*UnimplementedFdbServer) GetFdbEntryAttribute(context.Context, *GetFdbEntryAttributeRequest) (*GetFdbEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFdbEntryAttribute not implemented")
}

func RegisterFdbServer(s *grpc.Server, srv FdbServer) {
	s.RegisterService(&_Fdb_serviceDesc, srv)
}

func _Fdb_CreateFdbEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFdbEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FdbServer).CreateFdbEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Fdb/CreateFdbEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FdbServer).CreateFdbEntry(ctx, req.(*CreateFdbEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fdb_RemoveFdbEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFdbEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FdbServer).RemoveFdbEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Fdb/RemoveFdbEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FdbServer).RemoveFdbEntry(ctx, req.(*RemoveFdbEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fdb_SetFdbEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFdbEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FdbServer).SetFdbEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Fdb/SetFdbEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FdbServer).SetFdbEntryAttribute(ctx, req.(*SetFdbEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fdb_GetFdbEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFdbEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FdbServer).GetFdbEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Fdb/GetFdbEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FdbServer).GetFdbEntryAttribute(ctx, req.(*GetFdbEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fdb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Fdb",
	HandlerType: (*FdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFdbEntry",
			Handler:    _Fdb_CreateFdbEntry_Handler,
		},
		{
			MethodName: "RemoveFdbEntry",
			Handler:    _Fdb_RemoveFdbEntry_Handler,
		},
		{
			MethodName: "SetFdbEntryAttribute",
			Handler:    _Fdb_SetFdbEntryAttribute_Handler,
		},
		{
			MethodName: "GetFdbEntryAttribute",
			Handler:    _Fdb_GetFdbEntryAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/fdb.proto",
}
