// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/udf.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UdfAttr int32

const (
	UdfAttr_UDF_ATTR_UNSPECIFIED UdfAttr = 0
	UdfAttr_UDF_ATTR_MATCH_ID    UdfAttr = 1
	UdfAttr_UDF_ATTR_GROUP_ID    UdfAttr = 2
	UdfAttr_UDF_ATTR_BASE        UdfAttr = 3
	UdfAttr_UDF_ATTR_OFFSET      UdfAttr = 4
	UdfAttr_UDF_ATTR_HASH_MASK   UdfAttr = 5
)

// Enum value maps for UdfAttr.
var (
	UdfAttr_name = map[int32]string{
		0: "UDF_ATTR_UNSPECIFIED",
		1: "UDF_ATTR_MATCH_ID",
		2: "UDF_ATTR_GROUP_ID",
		3: "UDF_ATTR_BASE",
		4: "UDF_ATTR_OFFSET",
		5: "UDF_ATTR_HASH_MASK",
	}
	UdfAttr_value = map[string]int32{
		"UDF_ATTR_UNSPECIFIED": 0,
		"UDF_ATTR_MATCH_ID":    1,
		"UDF_ATTR_GROUP_ID":    2,
		"UDF_ATTR_BASE":        3,
		"UDF_ATTR_OFFSET":      4,
		"UDF_ATTR_HASH_MASK":   5,
	}
)

func (x UdfAttr) Enum() *UdfAttr {
	p := new(UdfAttr)
	*p = x
	return p
}

func (x UdfAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UdfAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_udf_proto_enumTypes[0].Descriptor()
}

func (UdfAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_udf_proto_enumTypes[0]
}

func (x UdfAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UdfAttr.Descriptor instead.
func (UdfAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{0}
}

type UdfMatchAttr int32

const (
	UdfMatchAttr_UDF_MATCH_ATTR_UNSPECIFIED UdfMatchAttr = 0
	UdfMatchAttr_UDF_MATCH_ATTR_L2_TYPE     UdfMatchAttr = 1
	UdfMatchAttr_UDF_MATCH_ATTR_L3_TYPE     UdfMatchAttr = 2
	UdfMatchAttr_UDF_MATCH_ATTR_GRE_TYPE    UdfMatchAttr = 3
	UdfMatchAttr_UDF_MATCH_ATTR_PRIORITY    UdfMatchAttr = 4
)

// Enum value maps for UdfMatchAttr.
var (
	UdfMatchAttr_name = map[int32]string{
		0: "UDF_MATCH_ATTR_UNSPECIFIED",
		1: "UDF_MATCH_ATTR_L2_TYPE",
		2: "UDF_MATCH_ATTR_L3_TYPE",
		3: "UDF_MATCH_ATTR_GRE_TYPE",
		4: "UDF_MATCH_ATTR_PRIORITY",
	}
	UdfMatchAttr_value = map[string]int32{
		"UDF_MATCH_ATTR_UNSPECIFIED": 0,
		"UDF_MATCH_ATTR_L2_TYPE":     1,
		"UDF_MATCH_ATTR_L3_TYPE":     2,
		"UDF_MATCH_ATTR_GRE_TYPE":    3,
		"UDF_MATCH_ATTR_PRIORITY":    4,
	}
)

func (x UdfMatchAttr) Enum() *UdfMatchAttr {
	p := new(UdfMatchAttr)
	*p = x
	return p
}

func (x UdfMatchAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UdfMatchAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_udf_proto_enumTypes[1].Descriptor()
}

func (UdfMatchAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_udf_proto_enumTypes[1]
}

func (x UdfMatchAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UdfMatchAttr.Descriptor instead.
func (UdfMatchAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{1}
}

type UdfGroupAttr int32

const (
	UdfGroupAttr_UDF_GROUP_ATTR_UNSPECIFIED UdfGroupAttr = 0
	UdfGroupAttr_UDF_GROUP_ATTR_UDF_LIST    UdfGroupAttr = 1
	UdfGroupAttr_UDF_GROUP_ATTR_TYPE        UdfGroupAttr = 2
	UdfGroupAttr_UDF_GROUP_ATTR_LENGTH      UdfGroupAttr = 3
)

// Enum value maps for UdfGroupAttr.
var (
	UdfGroupAttr_name = map[int32]string{
		0: "UDF_GROUP_ATTR_UNSPECIFIED",
		1: "UDF_GROUP_ATTR_UDF_LIST",
		2: "UDF_GROUP_ATTR_TYPE",
		3: "UDF_GROUP_ATTR_LENGTH",
	}
	UdfGroupAttr_value = map[string]int32{
		"UDF_GROUP_ATTR_UNSPECIFIED": 0,
		"UDF_GROUP_ATTR_UDF_LIST":    1,
		"UDF_GROUP_ATTR_TYPE":        2,
		"UDF_GROUP_ATTR_LENGTH":      3,
	}
)

func (x UdfGroupAttr) Enum() *UdfGroupAttr {
	p := new(UdfGroupAttr)
	*p = x
	return p
}

func (x UdfGroupAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UdfGroupAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_udf_proto_enumTypes[2].Descriptor()
}

func (UdfGroupAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_udf_proto_enumTypes[2]
}

func (x UdfGroupAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UdfGroupAttr.Descriptor instead.
func (UdfGroupAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{2}
}

type CreateUdfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch   uint64   `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	MatchId  *uint64  `protobuf:"varint,2,opt,name=match_id,json=matchId,proto3,oneof" json:"match_id,omitempty"`
	GroupId  *uint64  `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3,oneof" json:"group_id,omitempty"`
	Base     *UdfBase `protobuf:"varint,4,opt,name=base,proto3,enum=lemming.dataplane.sai.UdfBase,oneof" json:"base,omitempty"`
	Offset   *uint32  `protobuf:"varint,5,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	HashMask []uint32 `protobuf:"varint,6,rep,packed,name=hash_mask,json=hashMask,proto3" json:"hash_mask,omitempty"`
}

func (x *CreateUdfRequest) Reset() {
	*x = CreateUdfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUdfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUdfRequest) ProtoMessage() {}

func (x *CreateUdfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUdfRequest.ProtoReflect.Descriptor instead.
func (*CreateUdfRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{0}
}

func (x *CreateUdfRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateUdfRequest) GetMatchId() uint64 {
	if x != nil && x.MatchId != nil {
		return *x.MatchId
	}
	return 0
}

func (x *CreateUdfRequest) GetGroupId() uint64 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *CreateUdfRequest) GetBase() UdfBase {
	if x != nil && x.Base != nil {
		return *x.Base
	}
	return UdfBase_UDF_BASE_UNSPECIFIED
}

func (x *CreateUdfRequest) GetOffset() uint32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *CreateUdfRequest) GetHashMask() []uint32 {
	if x != nil {
		return x.HashMask
	}
	return nil
}

type CreateUdfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateUdfResponse) Reset() {
	*x = CreateUdfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUdfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUdfResponse) ProtoMessage() {}

func (x *CreateUdfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUdfResponse.ProtoReflect.Descriptor instead.
func (*CreateUdfResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUdfResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveUdfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveUdfRequest) Reset() {
	*x = RemoveUdfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUdfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUdfRequest) ProtoMessage() {}

func (x *RemoveUdfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUdfRequest.ProtoReflect.Descriptor instead.
func (*RemoveUdfRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveUdfRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveUdfResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveUdfResponse) Reset() {
	*x = RemoveUdfResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUdfResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUdfResponse) ProtoMessage() {}

func (x *RemoveUdfResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUdfResponse.ProtoReflect.Descriptor instead.
func (*RemoveUdfResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{3}
}

type SetUdfAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64   `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Base     *UdfBase `protobuf:"varint,2,opt,name=base,proto3,enum=lemming.dataplane.sai.UdfBase,oneof" json:"base,omitempty"`
	HashMask []uint32 `protobuf:"varint,3,rep,packed,name=hash_mask,json=hashMask,proto3" json:"hash_mask,omitempty"`
}

func (x *SetUdfAttributeRequest) Reset() {
	*x = SetUdfAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUdfAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUdfAttributeRequest) ProtoMessage() {}

func (x *SetUdfAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUdfAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetUdfAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{4}
}

func (x *SetUdfAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetUdfAttributeRequest) GetBase() UdfBase {
	if x != nil && x.Base != nil {
		return *x.Base
	}
	return UdfBase_UDF_BASE_UNSPECIFIED
}

func (x *SetUdfAttributeRequest) GetHashMask() []uint32 {
	if x != nil {
		return x.HashMask
	}
	return nil
}

type SetUdfAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetUdfAttributeResponse) Reset() {
	*x = SetUdfAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUdfAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUdfAttributeResponse) ProtoMessage() {}

func (x *SetUdfAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUdfAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetUdfAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{5}
}

type GetUdfAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64    `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []UdfAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.UdfAttr" json:"attr_type,omitempty"`
}

func (x *GetUdfAttributeRequest) Reset() {
	*x = GetUdfAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUdfAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUdfAttributeRequest) ProtoMessage() {}

func (x *GetUdfAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUdfAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetUdfAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{6}
}

func (x *GetUdfAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetUdfAttributeRequest) GetAttrType() []UdfAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetUdfAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *UdfAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetUdfAttributeResponse) Reset() {
	*x = GetUdfAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUdfAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUdfAttributeResponse) ProtoMessage() {}

func (x *GetUdfAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUdfAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetUdfAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{7}
}

func (x *GetUdfAttributeResponse) GetAttr() *UdfAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateUdfMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch   uint64        `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	L2Type   *AclFieldData `protobuf:"bytes,2,opt,name=l2_type,json=l2Type,proto3,oneof" json:"l2_type,omitempty"`
	L3Type   *AclFieldData `protobuf:"bytes,3,opt,name=l3_type,json=l3Type,proto3,oneof" json:"l3_type,omitempty"`
	GreType  *AclFieldData `protobuf:"bytes,4,opt,name=gre_type,json=greType,proto3,oneof" json:"gre_type,omitempty"`
	Priority *uint32       `protobuf:"varint,5,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
}

func (x *CreateUdfMatchRequest) Reset() {
	*x = CreateUdfMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUdfMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUdfMatchRequest) ProtoMessage() {}

func (x *CreateUdfMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUdfMatchRequest.ProtoReflect.Descriptor instead.
func (*CreateUdfMatchRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{8}
}

func (x *CreateUdfMatchRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateUdfMatchRequest) GetL2Type() *AclFieldData {
	if x != nil {
		return x.L2Type
	}
	return nil
}

func (x *CreateUdfMatchRequest) GetL3Type() *AclFieldData {
	if x != nil {
		return x.L3Type
	}
	return nil
}

func (x *CreateUdfMatchRequest) GetGreType() *AclFieldData {
	if x != nil {
		return x.GreType
	}
	return nil
}

func (x *CreateUdfMatchRequest) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

type CreateUdfMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateUdfMatchResponse) Reset() {
	*x = CreateUdfMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUdfMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUdfMatchResponse) ProtoMessage() {}

func (x *CreateUdfMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUdfMatchResponse.ProtoReflect.Descriptor instead.
func (*CreateUdfMatchResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{9}
}

func (x *CreateUdfMatchResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveUdfMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveUdfMatchRequest) Reset() {
	*x = RemoveUdfMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUdfMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUdfMatchRequest) ProtoMessage() {}

func (x *RemoveUdfMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUdfMatchRequest.ProtoReflect.Descriptor instead.
func (*RemoveUdfMatchRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveUdfMatchRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveUdfMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveUdfMatchResponse) Reset() {
	*x = RemoveUdfMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUdfMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUdfMatchResponse) ProtoMessage() {}

func (x *RemoveUdfMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUdfMatchResponse.ProtoReflect.Descriptor instead.
func (*RemoveUdfMatchResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{11}
}

type GetUdfMatchAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64         `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []UdfMatchAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.UdfMatchAttr" json:"attr_type,omitempty"`
}

func (x *GetUdfMatchAttributeRequest) Reset() {
	*x = GetUdfMatchAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUdfMatchAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUdfMatchAttributeRequest) ProtoMessage() {}

func (x *GetUdfMatchAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUdfMatchAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetUdfMatchAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{12}
}

func (x *GetUdfMatchAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetUdfMatchAttributeRequest) GetAttrType() []UdfMatchAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetUdfMatchAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *UdfMatchAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetUdfMatchAttributeResponse) Reset() {
	*x = GetUdfMatchAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUdfMatchAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUdfMatchAttributeResponse) ProtoMessage() {}

func (x *GetUdfMatchAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUdfMatchAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetUdfMatchAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{13}
}

func (x *GetUdfMatchAttributeResponse) GetAttr() *UdfMatchAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateUdfGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch uint64        `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type   *UdfGroupType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.UdfGroupType,oneof" json:"type,omitempty"`
	Length *uint32       `protobuf:"varint,3,opt,name=length,proto3,oneof" json:"length,omitempty"`
}

func (x *CreateUdfGroupRequest) Reset() {
	*x = CreateUdfGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUdfGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUdfGroupRequest) ProtoMessage() {}

func (x *CreateUdfGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUdfGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateUdfGroupRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{14}
}

func (x *CreateUdfGroupRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateUdfGroupRequest) GetType() UdfGroupType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return UdfGroupType_UDF_GROUP_TYPE_UNSPECIFIED
}

func (x *CreateUdfGroupRequest) GetLength() uint32 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

type CreateUdfGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateUdfGroupResponse) Reset() {
	*x = CreateUdfGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUdfGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUdfGroupResponse) ProtoMessage() {}

func (x *CreateUdfGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUdfGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateUdfGroupResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{15}
}

func (x *CreateUdfGroupResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveUdfGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveUdfGroupRequest) Reset() {
	*x = RemoveUdfGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUdfGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUdfGroupRequest) ProtoMessage() {}

func (x *RemoveUdfGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUdfGroupRequest.ProtoReflect.Descriptor instead.
func (*RemoveUdfGroupRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveUdfGroupRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveUdfGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveUdfGroupResponse) Reset() {
	*x = RemoveUdfGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveUdfGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveUdfGroupResponse) ProtoMessage() {}

func (x *RemoveUdfGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveUdfGroupResponse.ProtoReflect.Descriptor instead.
func (*RemoveUdfGroupResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{17}
}

type GetUdfGroupAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64         `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []UdfGroupAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.UdfGroupAttr" json:"attr_type,omitempty"`
}

func (x *GetUdfGroupAttributeRequest) Reset() {
	*x = GetUdfGroupAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUdfGroupAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUdfGroupAttributeRequest) ProtoMessage() {}

func (x *GetUdfGroupAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUdfGroupAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetUdfGroupAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{18}
}

func (x *GetUdfGroupAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetUdfGroupAttributeRequest) GetAttrType() []UdfGroupAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetUdfGroupAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *UdfGroupAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetUdfGroupAttributeResponse) Reset() {
	*x = GetUdfGroupAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUdfGroupAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUdfGroupAttributeResponse) ProtoMessage() {}

func (x *GetUdfGroupAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_udf_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUdfGroupAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetUdfGroupAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_udf_proto_rawDescGZIP(), []int{19}
}

func (x *GetUdfGroupAttributeResponse) GetAttr() *UdfGroupAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_standalone_proto_udf_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_udf_proto_rawDesc = []byte{
	0x0a, 0x24, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x64, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x27, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c,
	0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x64, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x24, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x02, 0x48, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x64, 0x66, 0x42, 0x61, 0x73, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x4d, 0x61, 0x73, 0x6b, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x1e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x25, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x64, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x24, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x64, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55,
	0x64, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x53,
	0x65, 0x74, 0x55, 0x64, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x64,
	0x66, 0x42, 0x61, 0x73, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x00, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x52,
	0x08, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x55, 0x64, 0x66, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x55, 0x64, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x64, 0x66, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x64, 0x66,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x64, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xeb, 0x02, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x47, 0x0a, 0x07,
	0x6c, 0x32, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x32, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x07, 0x6c, 0x33, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41,
	0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x02, 0x48, 0x01, 0x52, 0x06, 0x6c, 0x33, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49,
	0x0a, 0x08, 0x67, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x07, 0x67,
	0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x04, 0x48, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x3a, 0x04, 0x88, 0xb5, 0x18, 0x1f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x32, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x33, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x67, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x2a, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x64,
	0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x18, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x20, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x2a, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x15, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x64,
	0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x64, 0x66, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a,
	0x91, 0x01, 0x0a, 0x07, 0x55, 0x64, 0x66, 0x41, 0x74, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x44, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x44, 0x46, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x55, 0x44, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x44, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x44, 0x46, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x55,
	0x44, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x41, 0x53,
	0x4b, 0x10, 0x05, 0x2a, 0xa0, 0x01, 0x0a, 0x0c, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x44, 0x46, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x44, 0x46, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x32, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x55, 0x44, 0x46, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4c, 0x33, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x55, 0x44, 0x46, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47,
	0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x44, 0x46,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x10, 0x04, 0x2a, 0x7f, 0x0a, 0x0c, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x55, 0x44, 0x46, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x44, 0x46, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x44, 0x46, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x44, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x55, 0x44, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c,
	0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x03, 0x32, 0xfd, 0x08, 0x0a, 0x03, 0x55, 0x64, 0x66, 0x12,
	0x60, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x64, 0x66, 0x12, 0x27, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x64, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x64, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x09, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x64, 0x66, 0x12, 0x27,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x64, 0x66,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x64, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x55, 0x64, 0x66, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53,
	0x65, 0x74, 0x55, 0x64, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65,
	0x74, 0x55, 0x64, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x64,
	0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x64, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x64, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x64, 0x66, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2c,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x64, 0x66,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x64, 0x66, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x64, 0x66, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x64, 0x66, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x64, 0x66, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x64, 0x66, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x64, 0x66, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_udf_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_udf_proto_rawDescData = file_dataplane_standalone_proto_udf_proto_rawDesc
)

func file_dataplane_standalone_proto_udf_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_udf_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_udf_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_udf_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_udf_proto_rawDescData
}

var file_dataplane_standalone_proto_udf_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_dataplane_standalone_proto_udf_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_dataplane_standalone_proto_udf_proto_goTypes = []interface{}{
	(UdfAttr)(0),                         // 0: lemming.dataplane.sai.UdfAttr
	(UdfMatchAttr)(0),                    // 1: lemming.dataplane.sai.UdfMatchAttr
	(UdfGroupAttr)(0),                    // 2: lemming.dataplane.sai.UdfGroupAttr
	(*CreateUdfRequest)(nil),             // 3: lemming.dataplane.sai.CreateUdfRequest
	(*CreateUdfResponse)(nil),            // 4: lemming.dataplane.sai.CreateUdfResponse
	(*RemoveUdfRequest)(nil),             // 5: lemming.dataplane.sai.RemoveUdfRequest
	(*RemoveUdfResponse)(nil),            // 6: lemming.dataplane.sai.RemoveUdfResponse
	(*SetUdfAttributeRequest)(nil),       // 7: lemming.dataplane.sai.SetUdfAttributeRequest
	(*SetUdfAttributeResponse)(nil),      // 8: lemming.dataplane.sai.SetUdfAttributeResponse
	(*GetUdfAttributeRequest)(nil),       // 9: lemming.dataplane.sai.GetUdfAttributeRequest
	(*GetUdfAttributeResponse)(nil),      // 10: lemming.dataplane.sai.GetUdfAttributeResponse
	(*CreateUdfMatchRequest)(nil),        // 11: lemming.dataplane.sai.CreateUdfMatchRequest
	(*CreateUdfMatchResponse)(nil),       // 12: lemming.dataplane.sai.CreateUdfMatchResponse
	(*RemoveUdfMatchRequest)(nil),        // 13: lemming.dataplane.sai.RemoveUdfMatchRequest
	(*RemoveUdfMatchResponse)(nil),       // 14: lemming.dataplane.sai.RemoveUdfMatchResponse
	(*GetUdfMatchAttributeRequest)(nil),  // 15: lemming.dataplane.sai.GetUdfMatchAttributeRequest
	(*GetUdfMatchAttributeResponse)(nil), // 16: lemming.dataplane.sai.GetUdfMatchAttributeResponse
	(*CreateUdfGroupRequest)(nil),        // 17: lemming.dataplane.sai.CreateUdfGroupRequest
	(*CreateUdfGroupResponse)(nil),       // 18: lemming.dataplane.sai.CreateUdfGroupResponse
	(*RemoveUdfGroupRequest)(nil),        // 19: lemming.dataplane.sai.RemoveUdfGroupRequest
	(*RemoveUdfGroupResponse)(nil),       // 20: lemming.dataplane.sai.RemoveUdfGroupResponse
	(*GetUdfGroupAttributeRequest)(nil),  // 21: lemming.dataplane.sai.GetUdfGroupAttributeRequest
	(*GetUdfGroupAttributeResponse)(nil), // 22: lemming.dataplane.sai.GetUdfGroupAttributeResponse
	(UdfBase)(0),                         // 23: lemming.dataplane.sai.UdfBase
	(*UdfAttribute)(nil),                 // 24: lemming.dataplane.sai.UdfAttribute
	(*AclFieldData)(nil),                 // 25: lemming.dataplane.sai.AclFieldData
	(*UdfMatchAttribute)(nil),            // 26: lemming.dataplane.sai.UdfMatchAttribute
	(UdfGroupType)(0),                    // 27: lemming.dataplane.sai.UdfGroupType
	(*UdfGroupAttribute)(nil),            // 28: lemming.dataplane.sai.UdfGroupAttribute
}
var file_dataplane_standalone_proto_udf_proto_depIdxs = []int32{
	23, // 0: lemming.dataplane.sai.CreateUdfRequest.base:type_name -> lemming.dataplane.sai.UdfBase
	23, // 1: lemming.dataplane.sai.SetUdfAttributeRequest.base:type_name -> lemming.dataplane.sai.UdfBase
	0,  // 2: lemming.dataplane.sai.GetUdfAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.UdfAttr
	24, // 3: lemming.dataplane.sai.GetUdfAttributeResponse.attr:type_name -> lemming.dataplane.sai.UdfAttribute
	25, // 4: lemming.dataplane.sai.CreateUdfMatchRequest.l2_type:type_name -> lemming.dataplane.sai.AclFieldData
	25, // 5: lemming.dataplane.sai.CreateUdfMatchRequest.l3_type:type_name -> lemming.dataplane.sai.AclFieldData
	25, // 6: lemming.dataplane.sai.CreateUdfMatchRequest.gre_type:type_name -> lemming.dataplane.sai.AclFieldData
	1,  // 7: lemming.dataplane.sai.GetUdfMatchAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.UdfMatchAttr
	26, // 8: lemming.dataplane.sai.GetUdfMatchAttributeResponse.attr:type_name -> lemming.dataplane.sai.UdfMatchAttribute
	27, // 9: lemming.dataplane.sai.CreateUdfGroupRequest.type:type_name -> lemming.dataplane.sai.UdfGroupType
	2,  // 10: lemming.dataplane.sai.GetUdfGroupAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.UdfGroupAttr
	28, // 11: lemming.dataplane.sai.GetUdfGroupAttributeResponse.attr:type_name -> lemming.dataplane.sai.UdfGroupAttribute
	3,  // 12: lemming.dataplane.sai.Udf.CreateUdf:input_type -> lemming.dataplane.sai.CreateUdfRequest
	5,  // 13: lemming.dataplane.sai.Udf.RemoveUdf:input_type -> lemming.dataplane.sai.RemoveUdfRequest
	7,  // 14: lemming.dataplane.sai.Udf.SetUdfAttribute:input_type -> lemming.dataplane.sai.SetUdfAttributeRequest
	9,  // 15: lemming.dataplane.sai.Udf.GetUdfAttribute:input_type -> lemming.dataplane.sai.GetUdfAttributeRequest
	11, // 16: lemming.dataplane.sai.Udf.CreateUdfMatch:input_type -> lemming.dataplane.sai.CreateUdfMatchRequest
	13, // 17: lemming.dataplane.sai.Udf.RemoveUdfMatch:input_type -> lemming.dataplane.sai.RemoveUdfMatchRequest
	15, // 18: lemming.dataplane.sai.Udf.GetUdfMatchAttribute:input_type -> lemming.dataplane.sai.GetUdfMatchAttributeRequest
	17, // 19: lemming.dataplane.sai.Udf.CreateUdfGroup:input_type -> lemming.dataplane.sai.CreateUdfGroupRequest
	19, // 20: lemming.dataplane.sai.Udf.RemoveUdfGroup:input_type -> lemming.dataplane.sai.RemoveUdfGroupRequest
	21, // 21: lemming.dataplane.sai.Udf.GetUdfGroupAttribute:input_type -> lemming.dataplane.sai.GetUdfGroupAttributeRequest
	4,  // 22: lemming.dataplane.sai.Udf.CreateUdf:output_type -> lemming.dataplane.sai.CreateUdfResponse
	6,  // 23: lemming.dataplane.sai.Udf.RemoveUdf:output_type -> lemming.dataplane.sai.RemoveUdfResponse
	8,  // 24: lemming.dataplane.sai.Udf.SetUdfAttribute:output_type -> lemming.dataplane.sai.SetUdfAttributeResponse
	10, // 25: lemming.dataplane.sai.Udf.GetUdfAttribute:output_type -> lemming.dataplane.sai.GetUdfAttributeResponse
	12, // 26: lemming.dataplane.sai.Udf.CreateUdfMatch:output_type -> lemming.dataplane.sai.CreateUdfMatchResponse
	14, // 27: lemming.dataplane.sai.Udf.RemoveUdfMatch:output_type -> lemming.dataplane.sai.RemoveUdfMatchResponse
	16, // 28: lemming.dataplane.sai.Udf.GetUdfMatchAttribute:output_type -> lemming.dataplane.sai.GetUdfMatchAttributeResponse
	18, // 29: lemming.dataplane.sai.Udf.CreateUdfGroup:output_type -> lemming.dataplane.sai.CreateUdfGroupResponse
	20, // 30: lemming.dataplane.sai.Udf.RemoveUdfGroup:output_type -> lemming.dataplane.sai.RemoveUdfGroupResponse
	22, // 31: lemming.dataplane.sai.Udf.GetUdfGroupAttribute:output_type -> lemming.dataplane.sai.GetUdfGroupAttributeResponse
	22, // [22:32] is the sub-list for method output_type
	12, // [12:22] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_udf_proto_init() }
func file_dataplane_standalone_proto_udf_proto_init() {
	if File_dataplane_standalone_proto_udf_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_udf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUdfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUdfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUdfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUdfResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUdfAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUdfAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUdfAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUdfAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUdfMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUdfMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUdfMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUdfMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUdfMatchAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUdfMatchAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUdfGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUdfGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUdfGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveUdfGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUdfGroupAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_udf_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUdfGroupAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_udf_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_udf_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_udf_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_udf_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_udf_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_udf_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_udf_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_udf_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_udf_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_udf_proto = out.File
	file_dataplane_standalone_proto_udf_proto_rawDesc = nil
	file_dataplane_standalone_proto_udf_proto_goTypes = nil
	file_dataplane_standalone_proto_udf_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UdfClient is the client API for Udf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UdfClient interface {
	CreateUdf(ctx context.Context, in *CreateUdfRequest, opts ...grpc.CallOption) (*CreateUdfResponse, error)
	RemoveUdf(ctx context.Context, in *RemoveUdfRequest, opts ...grpc.CallOption) (*RemoveUdfResponse, error)
	SetUdfAttribute(ctx context.Context, in *SetUdfAttributeRequest, opts ...grpc.CallOption) (*SetUdfAttributeResponse, error)
	GetUdfAttribute(ctx context.Context, in *GetUdfAttributeRequest, opts ...grpc.CallOption) (*GetUdfAttributeResponse, error)
	CreateUdfMatch(ctx context.Context, in *CreateUdfMatchRequest, opts ...grpc.CallOption) (*CreateUdfMatchResponse, error)
	RemoveUdfMatch(ctx context.Context, in *RemoveUdfMatchRequest, opts ...grpc.CallOption) (*RemoveUdfMatchResponse, error)
	GetUdfMatchAttribute(ctx context.Context, in *GetUdfMatchAttributeRequest, opts ...grpc.CallOption) (*GetUdfMatchAttributeResponse, error)
	CreateUdfGroup(ctx context.Context, in *CreateUdfGroupRequest, opts ...grpc.CallOption) (*CreateUdfGroupResponse, error)
	RemoveUdfGroup(ctx context.Context, in *RemoveUdfGroupRequest, opts ...grpc.CallOption) (*RemoveUdfGroupResponse, error)
	GetUdfGroupAttribute(ctx context.Context, in *GetUdfGroupAttributeRequest, opts ...grpc.CallOption) (*GetUdfGroupAttributeResponse, error)
}

type udfClient struct {
	cc grpc.ClientConnInterface
}

func NewUdfClient(cc grpc.ClientConnInterface) UdfClient {
	return &udfClient{cc}
}

func (c *udfClient) CreateUdf(ctx context.Context, in *CreateUdfRequest, opts ...grpc.CallOption) (*CreateUdfResponse, error) {
	out := new(CreateUdfResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Udf/CreateUdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) RemoveUdf(ctx context.Context, in *RemoveUdfRequest, opts ...grpc.CallOption) (*RemoveUdfResponse, error) {
	out := new(RemoveUdfResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Udf/RemoveUdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) SetUdfAttribute(ctx context.Context, in *SetUdfAttributeRequest, opts ...grpc.CallOption) (*SetUdfAttributeResponse, error) {
	out := new(SetUdfAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Udf/SetUdfAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) GetUdfAttribute(ctx context.Context, in *GetUdfAttributeRequest, opts ...grpc.CallOption) (*GetUdfAttributeResponse, error) {
	out := new(GetUdfAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Udf/GetUdfAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) CreateUdfMatch(ctx context.Context, in *CreateUdfMatchRequest, opts ...grpc.CallOption) (*CreateUdfMatchResponse, error) {
	out := new(CreateUdfMatchResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Udf/CreateUdfMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) RemoveUdfMatch(ctx context.Context, in *RemoveUdfMatchRequest, opts ...grpc.CallOption) (*RemoveUdfMatchResponse, error) {
	out := new(RemoveUdfMatchResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Udf/RemoveUdfMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) GetUdfMatchAttribute(ctx context.Context, in *GetUdfMatchAttributeRequest, opts ...grpc.CallOption) (*GetUdfMatchAttributeResponse, error) {
	out := new(GetUdfMatchAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Udf/GetUdfMatchAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) CreateUdfGroup(ctx context.Context, in *CreateUdfGroupRequest, opts ...grpc.CallOption) (*CreateUdfGroupResponse, error) {
	out := new(CreateUdfGroupResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Udf/CreateUdfGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) RemoveUdfGroup(ctx context.Context, in *RemoveUdfGroupRequest, opts ...grpc.CallOption) (*RemoveUdfGroupResponse, error) {
	out := new(RemoveUdfGroupResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Udf/RemoveUdfGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) GetUdfGroupAttribute(ctx context.Context, in *GetUdfGroupAttributeRequest, opts ...grpc.CallOption) (*GetUdfGroupAttributeResponse, error) {
	out := new(GetUdfGroupAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Udf/GetUdfGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UdfServer is the server API for Udf service.
type UdfServer interface {
	CreateUdf(context.Context, *CreateUdfRequest) (*CreateUdfResponse, error)
	RemoveUdf(context.Context, *RemoveUdfRequest) (*RemoveUdfResponse, error)
	SetUdfAttribute(context.Context, *SetUdfAttributeRequest) (*SetUdfAttributeResponse, error)
	GetUdfAttribute(context.Context, *GetUdfAttributeRequest) (*GetUdfAttributeResponse, error)
	CreateUdfMatch(context.Context, *CreateUdfMatchRequest) (*CreateUdfMatchResponse, error)
	RemoveUdfMatch(context.Context, *RemoveUdfMatchRequest) (*RemoveUdfMatchResponse, error)
	GetUdfMatchAttribute(context.Context, *GetUdfMatchAttributeRequest) (*GetUdfMatchAttributeResponse, error)
	CreateUdfGroup(context.Context, *CreateUdfGroupRequest) (*CreateUdfGroupResponse, error)
	RemoveUdfGroup(context.Context, *RemoveUdfGroupRequest) (*RemoveUdfGroupResponse, error)
	GetUdfGroupAttribute(context.Context, *GetUdfGroupAttributeRequest) (*GetUdfGroupAttributeResponse, error)
}

// UnimplementedUdfServer can be embedded to have forward compatible implementations.
type UnimplementedUdfServer struct {
}

func (*UnimplementedUdfServer) CreateUdf(context.Context, *CreateUdfRequest) (*CreateUdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUdf not implemented")
}
func (*UnimplementedUdfServer) RemoveUdf(context.Context, *RemoveUdfRequest) (*RemoveUdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUdf not implemented")
}
func (*UnimplementedUdfServer) SetUdfAttribute(context.Context, *SetUdfAttributeRequest) (*SetUdfAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUdfAttribute not implemented")
}
func (*UnimplementedUdfServer) GetUdfAttribute(context.Context, *GetUdfAttributeRequest) (*GetUdfAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUdfAttribute not implemented")
}
func (*UnimplementedUdfServer) CreateUdfMatch(context.Context, *CreateUdfMatchRequest) (*CreateUdfMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUdfMatch not implemented")
}
func (*UnimplementedUdfServer) RemoveUdfMatch(context.Context, *RemoveUdfMatchRequest) (*RemoveUdfMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUdfMatch not implemented")
}
func (*UnimplementedUdfServer) GetUdfMatchAttribute(context.Context, *GetUdfMatchAttributeRequest) (*GetUdfMatchAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUdfMatchAttribute not implemented")
}
func (*UnimplementedUdfServer) CreateUdfGroup(context.Context, *CreateUdfGroupRequest) (*CreateUdfGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUdfGroup not implemented")
}
func (*UnimplementedUdfServer) RemoveUdfGroup(context.Context, *RemoveUdfGroupRequest) (*RemoveUdfGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUdfGroup not implemented")
}
func (*UnimplementedUdfServer) GetUdfGroupAttribute(context.Context, *GetUdfGroupAttributeRequest) (*GetUdfGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUdfGroupAttribute not implemented")
}

func RegisterUdfServer(s *grpc.Server, srv UdfServer) {
	s.RegisterService(&_Udf_serviceDesc, srv)
}

func _Udf_CreateUdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).CreateUdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Udf/CreateUdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).CreateUdf(ctx, req.(*CreateUdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_RemoveUdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).RemoveUdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Udf/RemoveUdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).RemoveUdf(ctx, req.(*RemoveUdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_SetUdfAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUdfAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).SetUdfAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Udf/SetUdfAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).SetUdfAttribute(ctx, req.(*SetUdfAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_GetUdfAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUdfAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).GetUdfAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Udf/GetUdfAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).GetUdfAttribute(ctx, req.(*GetUdfAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_CreateUdfMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUdfMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).CreateUdfMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Udf/CreateUdfMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).CreateUdfMatch(ctx, req.(*CreateUdfMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_RemoveUdfMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUdfMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).RemoveUdfMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Udf/RemoveUdfMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).RemoveUdfMatch(ctx, req.(*RemoveUdfMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_GetUdfMatchAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUdfMatchAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).GetUdfMatchAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Udf/GetUdfMatchAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).GetUdfMatchAttribute(ctx, req.(*GetUdfMatchAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_CreateUdfGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUdfGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).CreateUdfGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Udf/CreateUdfGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).CreateUdfGroup(ctx, req.(*CreateUdfGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_RemoveUdfGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUdfGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).RemoveUdfGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Udf/RemoveUdfGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).RemoveUdfGroup(ctx, req.(*RemoveUdfGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_GetUdfGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUdfGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).GetUdfGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Udf/GetUdfGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).GetUdfGroupAttribute(ctx, req.(*GetUdfGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Udf_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Udf",
	HandlerType: (*UdfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUdf",
			Handler:    _Udf_CreateUdf_Handler,
		},
		{
			MethodName: "RemoveUdf",
			Handler:    _Udf_RemoveUdf_Handler,
		},
		{
			MethodName: "SetUdfAttribute",
			Handler:    _Udf_SetUdfAttribute_Handler,
		},
		{
			MethodName: "GetUdfAttribute",
			Handler:    _Udf_GetUdfAttribute_Handler,
		},
		{
			MethodName: "CreateUdfMatch",
			Handler:    _Udf_CreateUdfMatch_Handler,
		},
		{
			MethodName: "RemoveUdfMatch",
			Handler:    _Udf_RemoveUdfMatch_Handler,
		},
		{
			MethodName: "GetUdfMatchAttribute",
			Handler:    _Udf_GetUdfMatchAttribute_Handler,
		},
		{
			MethodName: "CreateUdfGroup",
			Handler:    _Udf_CreateUdfGroup_Handler,
		},
		{
			MethodName: "RemoveUdfGroup",
			Handler:    _Udf_RemoveUdfGroup_Handler,
		},
		{
			MethodName: "GetUdfGroupAttribute",
			Handler:    _Udf_GetUdfGroupAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/udf.proto",
}
