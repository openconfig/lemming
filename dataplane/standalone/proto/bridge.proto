
syntax = "proto3";

package lemming.dataplane.sai;

import "dataplane/standalone/proto/common.proto";

option go_package = "github.com/openconfig/lemming/dataplane/standalone/proto;sai";

enum BridgeAttr {
  BRIDGE_ATTR_UNSPECIFIED = 0;
  BRIDGE_ATTR_TYPE = 1;
  BRIDGE_ATTR_PORT_LIST = 2;
  BRIDGE_ATTR_MAX_LEARNED_ADDRESSES = 3;
  BRIDGE_ATTR_LEARN_DISABLE = 4;
  BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE = 5;
  BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP = 6;
  BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE = 7;
  BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP = 8;
  BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE = 9;
  BRIDGE_ATTR_BROADCAST_FLOOD_GROUP = 10;
}

enum BridgePortAttr {
  BRIDGE_PORT_ATTR_UNSPECIFIED = 0;
  BRIDGE_PORT_ATTR_TYPE = 1;
  BRIDGE_PORT_ATTR_PORT_ID = 2;
  BRIDGE_PORT_ATTR_TAGGING_MODE = 3;
  BRIDGE_PORT_ATTR_VLAN_ID = 4;
  BRIDGE_PORT_ATTR_RIF_ID = 5;
  BRIDGE_PORT_ATTR_TUNNEL_ID = 6;
  BRIDGE_PORT_ATTR_BRIDGE_ID = 7;
  BRIDGE_PORT_ATTR_FDB_LEARNING_MODE = 8;
  BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES = 9;
  BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION = 10;
  BRIDGE_PORT_ATTR_ADMIN_STATE = 11;
  BRIDGE_PORT_ATTR_INGRESS_FILTERING = 12;
  BRIDGE_PORT_ATTR_EGRESS_FILTERING = 13;
  BRIDGE_PORT_ATTR_ISOLATION_GROUP = 14;
}

message CreateBridgeRequest {
  option (sai_type) = OBJECT_TYPE_BRIDGE;
  uint64 switch = 1;
  optional BridgeType type = 2 [(attr_enum_value) = 1];
  optional uint32 max_learned_addresses = 3 [(attr_enum_value) = 3];
  optional bool learn_disable = 4 [(attr_enum_value) = 4];
  optional BridgeFloodControlType unknown_unicast_flood_control_type = 5
      [(attr_enum_value) = 5];
  optional uint64 unknown_unicast_flood_group = 6 [(attr_enum_value) = 6];
  optional BridgeFloodControlType unknown_multicast_flood_control_type = 7
      [(attr_enum_value) = 7];
  optional uint64 unknown_multicast_flood_group = 8 [(attr_enum_value) = 8];
  optional BridgeFloodControlType broadcast_flood_control_type = 9
      [(attr_enum_value) = 9];
  optional uint64 broadcast_flood_group = 10 [(attr_enum_value) = 10];
}

message CreateBridgeResponse {
  uint64 oid = 1;
}

message RemoveBridgeRequest {
  uint64 oid = 1;
}

message RemoveBridgeResponse {}

message SetBridgeAttributeRequest {
  uint64 oid = 1;
  optional uint32 max_learned_addresses = 2 [(attr_enum_value) = 3];
  optional bool learn_disable = 3 [(attr_enum_value) = 4];
  optional BridgeFloodControlType unknown_unicast_flood_control_type = 4
      [(attr_enum_value) = 5];
  optional uint64 unknown_unicast_flood_group = 5 [(attr_enum_value) = 6];
  optional BridgeFloodControlType unknown_multicast_flood_control_type = 6
      [(attr_enum_value) = 7];
  optional uint64 unknown_multicast_flood_group = 7 [(attr_enum_value) = 8];
  optional BridgeFloodControlType broadcast_flood_control_type = 8
      [(attr_enum_value) = 9];
  optional uint64 broadcast_flood_group = 9 [(attr_enum_value) = 10];
}

message SetBridgeAttributeResponse {}

message GetBridgeAttributeRequest {
  uint64 oid = 1;
  repeated BridgeAttr attr_type = 2;
}

message GetBridgeAttributeResponse {
  BridgeAttribute attr = 1;
}

message GetBridgeStatsRequest {
  uint64 oid = 1;
  repeated BridgeStat counter_ids = 2;
}

message GetBridgeStatsResponse {
  repeated uint64 values = 1;
}

message CreateBridgePortRequest {
  option (sai_type) = OBJECT_TYPE_BRIDGE_PORT;
  uint64 switch = 1;
  optional BridgePortType type = 2 [(attr_enum_value) = 1];
  optional uint64 port_id = 3 [(attr_enum_value) = 2];
  optional BridgePortTaggingMode tagging_mode = 4 [(attr_enum_value) = 3];
  optional uint32 vlan_id = 5 [(attr_enum_value) = 4];
  optional uint64 rif_id = 6 [(attr_enum_value) = 5];
  optional uint64 tunnel_id = 7 [(attr_enum_value) = 6];
  optional uint64 bridge_id = 8 [(attr_enum_value) = 7];
  optional BridgePortFdbLearningMode fdb_learning_mode = 9
      [(attr_enum_value) = 8];
  optional uint32 max_learned_addresses = 10 [(attr_enum_value) = 9];
  optional PacketAction fdb_learning_limit_violation_packet_action = 11
      [(attr_enum_value) = 10];
  optional bool admin_state = 12 [(attr_enum_value) = 11];
  optional bool ingress_filtering = 13 [(attr_enum_value) = 12];
  optional bool egress_filtering = 14 [(attr_enum_value) = 13];
  optional uint64 isolation_group = 15 [(attr_enum_value) = 14];
}

message CreateBridgePortResponse {
  uint64 oid = 1;
}

message RemoveBridgePortRequest {
  uint64 oid = 1;
}

message RemoveBridgePortResponse {}

message SetBridgePortAttributeRequest {
  uint64 oid = 1;
  optional BridgePortTaggingMode tagging_mode = 2 [(attr_enum_value) = 3];
  optional uint64 bridge_id = 3 [(attr_enum_value) = 7];
  optional BridgePortFdbLearningMode fdb_learning_mode = 4
      [(attr_enum_value) = 8];
  optional uint32 max_learned_addresses = 5 [(attr_enum_value) = 9];
  optional PacketAction fdb_learning_limit_violation_packet_action = 6
      [(attr_enum_value) = 10];
  optional bool admin_state = 7 [(attr_enum_value) = 11];
  optional bool ingress_filtering = 8 [(attr_enum_value) = 12];
  optional bool egress_filtering = 9 [(attr_enum_value) = 13];
  optional uint64 isolation_group = 10 [(attr_enum_value) = 14];
}

message SetBridgePortAttributeResponse {}

message GetBridgePortAttributeRequest {
  uint64 oid = 1;
  repeated BridgePortAttr attr_type = 2;
}

message GetBridgePortAttributeResponse {
  BridgePortAttribute attr = 1;
}

message GetBridgePortStatsRequest {
  uint64 oid = 1;
  repeated BridgePortStat counter_ids = 2;
}

message GetBridgePortStatsResponse {
  repeated uint64 values = 1;
}

service Bridge {
  rpc CreateBridge(CreateBridgeRequest) returns (CreateBridgeResponse) {}
  rpc RemoveBridge(RemoveBridgeRequest) returns (RemoveBridgeResponse) {}
  rpc SetBridgeAttribute(SetBridgeAttributeRequest)
      returns (SetBridgeAttributeResponse) {}
  rpc GetBridgeAttribute(GetBridgeAttributeRequest)
      returns (GetBridgeAttributeResponse) {}
  rpc GetBridgeStats(GetBridgeStatsRequest) returns (GetBridgeStatsResponse) {}
  rpc CreateBridgePort(CreateBridgePortRequest)
      returns (CreateBridgePortResponse) {}
  rpc RemoveBridgePort(RemoveBridgePortRequest)
      returns (RemoveBridgePortResponse) {}
  rpc SetBridgePortAttribute(SetBridgePortAttributeRequest)
      returns (SetBridgePortAttributeResponse) {}
  rpc GetBridgePortAttribute(GetBridgePortAttributeRequest)
      returns (GetBridgePortAttributeResponse) {}
  rpc GetBridgePortStats(GetBridgePortStatsRequest)
      returns (GetBridgePortStatsResponse) {}
}
