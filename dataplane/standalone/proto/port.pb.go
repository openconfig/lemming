// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/port.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PortAttr int32

const (
	PortAttr_PORT_ATTR_UNSPECIFIED                             PortAttr = 0
	PortAttr_PORT_ATTR_TYPE                                    PortAttr = 1
	PortAttr_PORT_ATTR_OPER_STATUS                             PortAttr = 2
	PortAttr_PORT_ATTR_SUPPORTED_BREAKOUT_MODE_TYPE            PortAttr = 3
	PortAttr_PORT_ATTR_CURRENT_BREAKOUT_MODE_TYPE              PortAttr = 4
	PortAttr_PORT_ATTR_QOS_NUMBER_OF_QUEUES                    PortAttr = 5
	PortAttr_PORT_ATTR_QOS_QUEUE_LIST                          PortAttr = 6
	PortAttr_PORT_ATTR_QOS_NUMBER_OF_SCHEDULER_GROUPS          PortAttr = 7
	PortAttr_PORT_ATTR_QOS_SCHEDULER_GROUP_LIST                PortAttr = 8
	PortAttr_PORT_ATTR_QOS_MAXIMUM_HEADROOM_SIZE               PortAttr = 9
	PortAttr_PORT_ATTR_SUPPORTED_SPEED                         PortAttr = 10
	PortAttr_PORT_ATTR_SUPPORTED_FEC_MODE                      PortAttr = 11
	PortAttr_PORT_ATTR_SUPPORTED_FEC_MODE_EXTENDED             PortAttr = 12
	PortAttr_PORT_ATTR_SUPPORTED_HALF_DUPLEX_SPEED             PortAttr = 13
	PortAttr_PORT_ATTR_SUPPORTED_AUTO_NEG_MODE                 PortAttr = 14
	PortAttr_PORT_ATTR_SUPPORTED_FLOW_CONTROL_MODE             PortAttr = 15
	PortAttr_PORT_ATTR_SUPPORTED_ASYMMETRIC_PAUSE_MODE         PortAttr = 16
	PortAttr_PORT_ATTR_SUPPORTED_MEDIA_TYPE                    PortAttr = 17
	PortAttr_PORT_ATTR_REMOTE_ADVERTISED_SPEED                 PortAttr = 18
	PortAttr_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE              PortAttr = 19
	PortAttr_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE_EXTENDED     PortAttr = 20
	PortAttr_PORT_ATTR_REMOTE_ADVERTISED_HALF_DUPLEX_SPEED     PortAttr = 21
	PortAttr_PORT_ATTR_REMOTE_ADVERTISED_AUTO_NEG_MODE         PortAttr = 22
	PortAttr_PORT_ATTR_REMOTE_ADVERTISED_FLOW_CONTROL_MODE     PortAttr = 23
	PortAttr_PORT_ATTR_REMOTE_ADVERTISED_ASYMMETRIC_PAUSE_MODE PortAttr = 24
	PortAttr_PORT_ATTR_REMOTE_ADVERTISED_MEDIA_TYPE            PortAttr = 25
	PortAttr_PORT_ATTR_REMOTE_ADVERTISED_OUI_CODE              PortAttr = 26
	PortAttr_PORT_ATTR_NUMBER_OF_INGRESS_PRIORITY_GROUPS       PortAttr = 27
	PortAttr_PORT_ATTR_INGRESS_PRIORITY_GROUP_LIST             PortAttr = 28
	PortAttr_PORT_ATTR_EYE_VALUES                              PortAttr = 29
	PortAttr_PORT_ATTR_OPER_SPEED                              PortAttr = 30
	PortAttr_PORT_ATTR_HW_LANE_LIST                            PortAttr = 31
	PortAttr_PORT_ATTR_SPEED                                   PortAttr = 32
	PortAttr_PORT_ATTR_FULL_DUPLEX_MODE                        PortAttr = 33
	PortAttr_PORT_ATTR_AUTO_NEG_MODE                           PortAttr = 34
	PortAttr_PORT_ATTR_ADMIN_STATE                             PortAttr = 35
	PortAttr_PORT_ATTR_MEDIA_TYPE                              PortAttr = 36
	PortAttr_PORT_ATTR_ADVERTISED_SPEED                        PortAttr = 37
	PortAttr_PORT_ATTR_ADVERTISED_FEC_MODE                     PortAttr = 38
	PortAttr_PORT_ATTR_ADVERTISED_FEC_MODE_EXTENDED            PortAttr = 39
	PortAttr_PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED            PortAttr = 40
	PortAttr_PORT_ATTR_ADVERTISED_AUTO_NEG_MODE                PortAttr = 41
	PortAttr_PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE            PortAttr = 42
	PortAttr_PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE        PortAttr = 43
	PortAttr_PORT_ATTR_ADVERTISED_MEDIA_TYPE                   PortAttr = 44
	PortAttr_PORT_ATTR_ADVERTISED_OUI_CODE                     PortAttr = 45
	PortAttr_PORT_ATTR_PORT_VLAN_ID                            PortAttr = 46
	PortAttr_PORT_ATTR_DEFAULT_VLAN_PRIORITY                   PortAttr = 47
	PortAttr_PORT_ATTR_DROP_UNTAGGED                           PortAttr = 48
	PortAttr_PORT_ATTR_DROP_TAGGED                             PortAttr = 49
	PortAttr_PORT_ATTR_INTERNAL_LOOPBACK_MODE                  PortAttr = 50
	PortAttr_PORT_ATTR_USE_EXTENDED_FEC                        PortAttr = 51
	PortAttr_PORT_ATTR_FEC_MODE                                PortAttr = 52
	PortAttr_PORT_ATTR_FEC_MODE_EXTENDED                       PortAttr = 53
	PortAttr_PORT_ATTR_UPDATE_DSCP                             PortAttr = 54
	PortAttr_PORT_ATTR_MTU                                     PortAttr = 55
	PortAttr_PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID          PortAttr = 56
	PortAttr_PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID      PortAttr = 57
	PortAttr_PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID      PortAttr = 58
	PortAttr_PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE                PortAttr = 59
	PortAttr_PORT_ATTR_INGRESS_ACL                             PortAttr = 60
	PortAttr_PORT_ATTR_EGRESS_ACL                              PortAttr = 61
	PortAttr_PORT_ATTR_INGRESS_MACSEC_ACL                      PortAttr = 62
	PortAttr_PORT_ATTR_EGRESS_MACSEC_ACL                       PortAttr = 63
	PortAttr_PORT_ATTR_MACSEC_PORT_LIST                        PortAttr = 64
	PortAttr_PORT_ATTR_INGRESS_MIRROR_SESSION                  PortAttr = 65
	PortAttr_PORT_ATTR_EGRESS_MIRROR_SESSION                   PortAttr = 66
	PortAttr_PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE             PortAttr = 67
	PortAttr_PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE              PortAttr = 68
	PortAttr_PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION           PortAttr = 69
	PortAttr_PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION            PortAttr = 70
	PortAttr_PORT_ATTR_POLICER_ID                              PortAttr = 71
	PortAttr_PORT_ATTR_QOS_DEFAULT_TC                          PortAttr = 72
	PortAttr_PORT_ATTR_QOS_DOT1P_TO_TC_MAP                     PortAttr = 73
	PortAttr_PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP                  PortAttr = 74
	PortAttr_PORT_ATTR_QOS_DSCP_TO_TC_MAP                      PortAttr = 75
	PortAttr_PORT_ATTR_QOS_DSCP_TO_COLOR_MAP                   PortAttr = 76
	PortAttr_PORT_ATTR_QOS_TC_TO_QUEUE_MAP                     PortAttr = 77
	PortAttr_PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP           PortAttr = 78
	PortAttr_PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP            PortAttr = 79
	PortAttr_PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP            PortAttr = 80
	PortAttr_PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP  PortAttr = 81
	PortAttr_PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP           PortAttr = 82
	PortAttr_PORT_ATTR_QOS_SCHEDULER_PROFILE_ID                PortAttr = 83
	PortAttr_PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST         PortAttr = 84
	PortAttr_PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST          PortAttr = 85
	PortAttr_PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE              PortAttr = 86
	PortAttr_PORT_ATTR_PRIORITY_FLOW_CONTROL                   PortAttr = 87
	PortAttr_PORT_ATTR_PRIORITY_FLOW_CONTROL_RX                PortAttr = 88
	PortAttr_PORT_ATTR_PRIORITY_FLOW_CONTROL_TX                PortAttr = 89
	PortAttr_PORT_ATTR_META_DATA                               PortAttr = 90
	PortAttr_PORT_ATTR_EGRESS_BLOCK_PORT_LIST                  PortAttr = 91
	PortAttr_PORT_ATTR_HW_PROFILE_ID                           PortAttr = 92
	PortAttr_PORT_ATTR_EEE_ENABLE                              PortAttr = 93
	PortAttr_PORT_ATTR_EEE_IDLE_TIME                           PortAttr = 94
	PortAttr_PORT_ATTR_EEE_WAKE_TIME                           PortAttr = 95
	PortAttr_PORT_ATTR_PORT_POOL_LIST                          PortAttr = 96
	PortAttr_PORT_ATTR_ISOLATION_GROUP                         PortAttr = 97
	PortAttr_PORT_ATTR_PKT_TX_ENABLE                           PortAttr = 98
	PortAttr_PORT_ATTR_TAM_OBJECT                              PortAttr = 99
	PortAttr_PORT_ATTR_SERDES_PREEMPHASIS                      PortAttr = 100
	PortAttr_PORT_ATTR_SERDES_IDRIVER                          PortAttr = 101
	PortAttr_PORT_ATTR_SERDES_IPREDRIVER                       PortAttr = 102
	PortAttr_PORT_ATTR_LINK_TRAINING_ENABLE                    PortAttr = 103
	PortAttr_PORT_ATTR_PTP_MODE                                PortAttr = 104
	PortAttr_PORT_ATTR_INTERFACE_TYPE                          PortAttr = 105
	PortAttr_PORT_ATTR_ADVERTISED_INTERFACE_TYPE               PortAttr = 106
	PortAttr_PORT_ATTR_REFERENCE_CLOCK                         PortAttr = 107
	PortAttr_PORT_ATTR_PRBS_POLYNOMIAL                         PortAttr = 108
	PortAttr_PORT_ATTR_PORT_SERDES_ID                          PortAttr = 109
	PortAttr_PORT_ATTR_LINK_TRAINING_FAILURE_STATUS            PortAttr = 110
	PortAttr_PORT_ATTR_LINK_TRAINING_RX_STATUS                 PortAttr = 111
	PortAttr_PORT_ATTR_PRBS_CONFIG                             PortAttr = 112
	PortAttr_PORT_ATTR_PRBS_LOCK_STATUS                        PortAttr = 113
	PortAttr_PORT_ATTR_PRBS_LOCK_LOSS_STATUS                   PortAttr = 114
	PortAttr_PORT_ATTR_PRBS_RX_STATUS                          PortAttr = 115
	PortAttr_PORT_ATTR_PRBS_RX_STATE                           PortAttr = 116
	PortAttr_PORT_ATTR_AUTO_NEG_STATUS                         PortAttr = 117
	PortAttr_PORT_ATTR_DISABLE_DECREMENT_TTL                   PortAttr = 118
	PortAttr_PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP                  PortAttr = 119
	PortAttr_PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP               PortAttr = 120
	PortAttr_PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP        PortAttr = 121
	PortAttr_PORT_ATTR_TPID                                    PortAttr = 122
	PortAttr_PORT_ATTR_ERR_STATUS_LIST                         PortAttr = 123
	PortAttr_PORT_ATTR_FABRIC_ATTACHED                         PortAttr = 124
	PortAttr_PORT_ATTR_FABRIC_ATTACHED_SWITCH_TYPE             PortAttr = 125
	PortAttr_PORT_ATTR_FABRIC_ATTACHED_SWITCH_ID               PortAttr = 126
	PortAttr_PORT_ATTR_FABRIC_ATTACHED_PORT_INDEX              PortAttr = 127
	PortAttr_PORT_ATTR_FABRIC_REACHABILITY                     PortAttr = 128
	PortAttr_PORT_ATTR_SYSTEM_PORT                             PortAttr = 129
	PortAttr_PORT_ATTR_AUTO_NEG_FEC_MODE_OVERRIDE              PortAttr = 130
	PortAttr_PORT_ATTR_LOOPBACK_MODE                           PortAttr = 131
	PortAttr_PORT_ATTR_MDIX_MODE_STATUS                        PortAttr = 132
	PortAttr_PORT_ATTR_MDIX_MODE_CONFIG                        PortAttr = 133
	PortAttr_PORT_ATTR_AUTO_NEG_CONFIG_MODE                    PortAttr = 134
	PortAttr_PORT_ATTR_1000X_SGMII_SLAVE_AUTODETECT            PortAttr = 135
	PortAttr_PORT_ATTR_MODULE_TYPE                             PortAttr = 136
	PortAttr_PORT_ATTR_DUAL_MEDIA                              PortAttr = 137
	PortAttr_PORT_ATTR_AUTO_NEG_FEC_MODE_EXTENDED              PortAttr = 138
	PortAttr_PORT_ATTR_IPG                                     PortAttr = 139
	PortAttr_PORT_ATTR_GLOBAL_FLOW_CONTROL_FORWARD             PortAttr = 140
	PortAttr_PORT_ATTR_PRIORITY_FLOW_CONTROL_FORWARD           PortAttr = 141
	PortAttr_PORT_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP        PortAttr = 142
	PortAttr_PORT_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP    PortAttr = 143
	PortAttr_PORT_ATTR_IPSEC_PORT                              PortAttr = 144
)

// Enum value maps for PortAttr.
var (
	PortAttr_name = map[int32]string{
		0:   "PORT_ATTR_UNSPECIFIED",
		1:   "PORT_ATTR_TYPE",
		2:   "PORT_ATTR_OPER_STATUS",
		3:   "PORT_ATTR_SUPPORTED_BREAKOUT_MODE_TYPE",
		4:   "PORT_ATTR_CURRENT_BREAKOUT_MODE_TYPE",
		5:   "PORT_ATTR_QOS_NUMBER_OF_QUEUES",
		6:   "PORT_ATTR_QOS_QUEUE_LIST",
		7:   "PORT_ATTR_QOS_NUMBER_OF_SCHEDULER_GROUPS",
		8:   "PORT_ATTR_QOS_SCHEDULER_GROUP_LIST",
		9:   "PORT_ATTR_QOS_MAXIMUM_HEADROOM_SIZE",
		10:  "PORT_ATTR_SUPPORTED_SPEED",
		11:  "PORT_ATTR_SUPPORTED_FEC_MODE",
		12:  "PORT_ATTR_SUPPORTED_FEC_MODE_EXTENDED",
		13:  "PORT_ATTR_SUPPORTED_HALF_DUPLEX_SPEED",
		14:  "PORT_ATTR_SUPPORTED_AUTO_NEG_MODE",
		15:  "PORT_ATTR_SUPPORTED_FLOW_CONTROL_MODE",
		16:  "PORT_ATTR_SUPPORTED_ASYMMETRIC_PAUSE_MODE",
		17:  "PORT_ATTR_SUPPORTED_MEDIA_TYPE",
		18:  "PORT_ATTR_REMOTE_ADVERTISED_SPEED",
		19:  "PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE",
		20:  "PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE_EXTENDED",
		21:  "PORT_ATTR_REMOTE_ADVERTISED_HALF_DUPLEX_SPEED",
		22:  "PORT_ATTR_REMOTE_ADVERTISED_AUTO_NEG_MODE",
		23:  "PORT_ATTR_REMOTE_ADVERTISED_FLOW_CONTROL_MODE",
		24:  "PORT_ATTR_REMOTE_ADVERTISED_ASYMMETRIC_PAUSE_MODE",
		25:  "PORT_ATTR_REMOTE_ADVERTISED_MEDIA_TYPE",
		26:  "PORT_ATTR_REMOTE_ADVERTISED_OUI_CODE",
		27:  "PORT_ATTR_NUMBER_OF_INGRESS_PRIORITY_GROUPS",
		28:  "PORT_ATTR_INGRESS_PRIORITY_GROUP_LIST",
		29:  "PORT_ATTR_EYE_VALUES",
		30:  "PORT_ATTR_OPER_SPEED",
		31:  "PORT_ATTR_HW_LANE_LIST",
		32:  "PORT_ATTR_SPEED",
		33:  "PORT_ATTR_FULL_DUPLEX_MODE",
		34:  "PORT_ATTR_AUTO_NEG_MODE",
		35:  "PORT_ATTR_ADMIN_STATE",
		36:  "PORT_ATTR_MEDIA_TYPE",
		37:  "PORT_ATTR_ADVERTISED_SPEED",
		38:  "PORT_ATTR_ADVERTISED_FEC_MODE",
		39:  "PORT_ATTR_ADVERTISED_FEC_MODE_EXTENDED",
		40:  "PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED",
		41:  "PORT_ATTR_ADVERTISED_AUTO_NEG_MODE",
		42:  "PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE",
		43:  "PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE",
		44:  "PORT_ATTR_ADVERTISED_MEDIA_TYPE",
		45:  "PORT_ATTR_ADVERTISED_OUI_CODE",
		46:  "PORT_ATTR_PORT_VLAN_ID",
		47:  "PORT_ATTR_DEFAULT_VLAN_PRIORITY",
		48:  "PORT_ATTR_DROP_UNTAGGED",
		49:  "PORT_ATTR_DROP_TAGGED",
		50:  "PORT_ATTR_INTERNAL_LOOPBACK_MODE",
		51:  "PORT_ATTR_USE_EXTENDED_FEC",
		52:  "PORT_ATTR_FEC_MODE",
		53:  "PORT_ATTR_FEC_MODE_EXTENDED",
		54:  "PORT_ATTR_UPDATE_DSCP",
		55:  "PORT_ATTR_MTU",
		56:  "PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID",
		57:  "PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID",
		58:  "PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID",
		59:  "PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE",
		60:  "PORT_ATTR_INGRESS_ACL",
		61:  "PORT_ATTR_EGRESS_ACL",
		62:  "PORT_ATTR_INGRESS_MACSEC_ACL",
		63:  "PORT_ATTR_EGRESS_MACSEC_ACL",
		64:  "PORT_ATTR_MACSEC_PORT_LIST",
		65:  "PORT_ATTR_INGRESS_MIRROR_SESSION",
		66:  "PORT_ATTR_EGRESS_MIRROR_SESSION",
		67:  "PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE",
		68:  "PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE",
		69:  "PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION",
		70:  "PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION",
		71:  "PORT_ATTR_POLICER_ID",
		72:  "PORT_ATTR_QOS_DEFAULT_TC",
		73:  "PORT_ATTR_QOS_DOT1P_TO_TC_MAP",
		74:  "PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP",
		75:  "PORT_ATTR_QOS_DSCP_TO_TC_MAP",
		76:  "PORT_ATTR_QOS_DSCP_TO_COLOR_MAP",
		77:  "PORT_ATTR_QOS_TC_TO_QUEUE_MAP",
		78:  "PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP",
		79:  "PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP",
		80:  "PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP",
		81:  "PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP",
		82:  "PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP",
		83:  "PORT_ATTR_QOS_SCHEDULER_PROFILE_ID",
		84:  "PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST",
		85:  "PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST",
		86:  "PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE",
		87:  "PORT_ATTR_PRIORITY_FLOW_CONTROL",
		88:  "PORT_ATTR_PRIORITY_FLOW_CONTROL_RX",
		89:  "PORT_ATTR_PRIORITY_FLOW_CONTROL_TX",
		90:  "PORT_ATTR_META_DATA",
		91:  "PORT_ATTR_EGRESS_BLOCK_PORT_LIST",
		92:  "PORT_ATTR_HW_PROFILE_ID",
		93:  "PORT_ATTR_EEE_ENABLE",
		94:  "PORT_ATTR_EEE_IDLE_TIME",
		95:  "PORT_ATTR_EEE_WAKE_TIME",
		96:  "PORT_ATTR_PORT_POOL_LIST",
		97:  "PORT_ATTR_ISOLATION_GROUP",
		98:  "PORT_ATTR_PKT_TX_ENABLE",
		99:  "PORT_ATTR_TAM_OBJECT",
		100: "PORT_ATTR_SERDES_PREEMPHASIS",
		101: "PORT_ATTR_SERDES_IDRIVER",
		102: "PORT_ATTR_SERDES_IPREDRIVER",
		103: "PORT_ATTR_LINK_TRAINING_ENABLE",
		104: "PORT_ATTR_PTP_MODE",
		105: "PORT_ATTR_INTERFACE_TYPE",
		106: "PORT_ATTR_ADVERTISED_INTERFACE_TYPE",
		107: "PORT_ATTR_REFERENCE_CLOCK",
		108: "PORT_ATTR_PRBS_POLYNOMIAL",
		109: "PORT_ATTR_PORT_SERDES_ID",
		110: "PORT_ATTR_LINK_TRAINING_FAILURE_STATUS",
		111: "PORT_ATTR_LINK_TRAINING_RX_STATUS",
		112: "PORT_ATTR_PRBS_CONFIG",
		113: "PORT_ATTR_PRBS_LOCK_STATUS",
		114: "PORT_ATTR_PRBS_LOCK_LOSS_STATUS",
		115: "PORT_ATTR_PRBS_RX_STATUS",
		116: "PORT_ATTR_PRBS_RX_STATE",
		117: "PORT_ATTR_AUTO_NEG_STATUS",
		118: "PORT_ATTR_DISABLE_DECREMENT_TTL",
		119: "PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP",
		120: "PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP",
		121: "PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP",
		122: "PORT_ATTR_TPID",
		123: "PORT_ATTR_ERR_STATUS_LIST",
		124: "PORT_ATTR_FABRIC_ATTACHED",
		125: "PORT_ATTR_FABRIC_ATTACHED_SWITCH_TYPE",
		126: "PORT_ATTR_FABRIC_ATTACHED_SWITCH_ID",
		127: "PORT_ATTR_FABRIC_ATTACHED_PORT_INDEX",
		128: "PORT_ATTR_FABRIC_REACHABILITY",
		129: "PORT_ATTR_SYSTEM_PORT",
		130: "PORT_ATTR_AUTO_NEG_FEC_MODE_OVERRIDE",
		131: "PORT_ATTR_LOOPBACK_MODE",
		132: "PORT_ATTR_MDIX_MODE_STATUS",
		133: "PORT_ATTR_MDIX_MODE_CONFIG",
		134: "PORT_ATTR_AUTO_NEG_CONFIG_MODE",
		135: "PORT_ATTR_1000X_SGMII_SLAVE_AUTODETECT",
		136: "PORT_ATTR_MODULE_TYPE",
		137: "PORT_ATTR_DUAL_MEDIA",
		138: "PORT_ATTR_AUTO_NEG_FEC_MODE_EXTENDED",
		139: "PORT_ATTR_IPG",
		140: "PORT_ATTR_GLOBAL_FLOW_CONTROL_FORWARD",
		141: "PORT_ATTR_PRIORITY_FLOW_CONTROL_FORWARD",
		142: "PORT_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP",
		143: "PORT_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP",
		144: "PORT_ATTR_IPSEC_PORT",
	}
	PortAttr_value = map[string]int32{
		"PORT_ATTR_UNSPECIFIED":                             0,
		"PORT_ATTR_TYPE":                                    1,
		"PORT_ATTR_OPER_STATUS":                             2,
		"PORT_ATTR_SUPPORTED_BREAKOUT_MODE_TYPE":            3,
		"PORT_ATTR_CURRENT_BREAKOUT_MODE_TYPE":              4,
		"PORT_ATTR_QOS_NUMBER_OF_QUEUES":                    5,
		"PORT_ATTR_QOS_QUEUE_LIST":                          6,
		"PORT_ATTR_QOS_NUMBER_OF_SCHEDULER_GROUPS":          7,
		"PORT_ATTR_QOS_SCHEDULER_GROUP_LIST":                8,
		"PORT_ATTR_QOS_MAXIMUM_HEADROOM_SIZE":               9,
		"PORT_ATTR_SUPPORTED_SPEED":                         10,
		"PORT_ATTR_SUPPORTED_FEC_MODE":                      11,
		"PORT_ATTR_SUPPORTED_FEC_MODE_EXTENDED":             12,
		"PORT_ATTR_SUPPORTED_HALF_DUPLEX_SPEED":             13,
		"PORT_ATTR_SUPPORTED_AUTO_NEG_MODE":                 14,
		"PORT_ATTR_SUPPORTED_FLOW_CONTROL_MODE":             15,
		"PORT_ATTR_SUPPORTED_ASYMMETRIC_PAUSE_MODE":         16,
		"PORT_ATTR_SUPPORTED_MEDIA_TYPE":                    17,
		"PORT_ATTR_REMOTE_ADVERTISED_SPEED":                 18,
		"PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE":              19,
		"PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE_EXTENDED":     20,
		"PORT_ATTR_REMOTE_ADVERTISED_HALF_DUPLEX_SPEED":     21,
		"PORT_ATTR_REMOTE_ADVERTISED_AUTO_NEG_MODE":         22,
		"PORT_ATTR_REMOTE_ADVERTISED_FLOW_CONTROL_MODE":     23,
		"PORT_ATTR_REMOTE_ADVERTISED_ASYMMETRIC_PAUSE_MODE": 24,
		"PORT_ATTR_REMOTE_ADVERTISED_MEDIA_TYPE":            25,
		"PORT_ATTR_REMOTE_ADVERTISED_OUI_CODE":              26,
		"PORT_ATTR_NUMBER_OF_INGRESS_PRIORITY_GROUPS":       27,
		"PORT_ATTR_INGRESS_PRIORITY_GROUP_LIST":             28,
		"PORT_ATTR_EYE_VALUES":                              29,
		"PORT_ATTR_OPER_SPEED":                              30,
		"PORT_ATTR_HW_LANE_LIST":                            31,
		"PORT_ATTR_SPEED":                                   32,
		"PORT_ATTR_FULL_DUPLEX_MODE":                        33,
		"PORT_ATTR_AUTO_NEG_MODE":                           34,
		"PORT_ATTR_ADMIN_STATE":                             35,
		"PORT_ATTR_MEDIA_TYPE":                              36,
		"PORT_ATTR_ADVERTISED_SPEED":                        37,
		"PORT_ATTR_ADVERTISED_FEC_MODE":                     38,
		"PORT_ATTR_ADVERTISED_FEC_MODE_EXTENDED":            39,
		"PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED":            40,
		"PORT_ATTR_ADVERTISED_AUTO_NEG_MODE":                41,
		"PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE":            42,
		"PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE":        43,
		"PORT_ATTR_ADVERTISED_MEDIA_TYPE":                   44,
		"PORT_ATTR_ADVERTISED_OUI_CODE":                     45,
		"PORT_ATTR_PORT_VLAN_ID":                            46,
		"PORT_ATTR_DEFAULT_VLAN_PRIORITY":                   47,
		"PORT_ATTR_DROP_UNTAGGED":                           48,
		"PORT_ATTR_DROP_TAGGED":                             49,
		"PORT_ATTR_INTERNAL_LOOPBACK_MODE":                  50,
		"PORT_ATTR_USE_EXTENDED_FEC":                        51,
		"PORT_ATTR_FEC_MODE":                                52,
		"PORT_ATTR_FEC_MODE_EXTENDED":                       53,
		"PORT_ATTR_UPDATE_DSCP":                             54,
		"PORT_ATTR_MTU":                                     55,
		"PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID":          56,
		"PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID":      57,
		"PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID":      58,
		"PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE":                59,
		"PORT_ATTR_INGRESS_ACL":                             60,
		"PORT_ATTR_EGRESS_ACL":                              61,
		"PORT_ATTR_INGRESS_MACSEC_ACL":                      62,
		"PORT_ATTR_EGRESS_MACSEC_ACL":                       63,
		"PORT_ATTR_MACSEC_PORT_LIST":                        64,
		"PORT_ATTR_INGRESS_MIRROR_SESSION":                  65,
		"PORT_ATTR_EGRESS_MIRROR_SESSION":                   66,
		"PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE":             67,
		"PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE":              68,
		"PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION":           69,
		"PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION":            70,
		"PORT_ATTR_POLICER_ID":                              71,
		"PORT_ATTR_QOS_DEFAULT_TC":                          72,
		"PORT_ATTR_QOS_DOT1P_TO_TC_MAP":                     73,
		"PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP":                  74,
		"PORT_ATTR_QOS_DSCP_TO_TC_MAP":                      75,
		"PORT_ATTR_QOS_DSCP_TO_COLOR_MAP":                   76,
		"PORT_ATTR_QOS_TC_TO_QUEUE_MAP":                     77,
		"PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP":           78,
		"PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP":            79,
		"PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP":            80,
		"PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP":  81,
		"PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP":           82,
		"PORT_ATTR_QOS_SCHEDULER_PROFILE_ID":                83,
		"PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST":         84,
		"PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST":          85,
		"PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE":              86,
		"PORT_ATTR_PRIORITY_FLOW_CONTROL":                   87,
		"PORT_ATTR_PRIORITY_FLOW_CONTROL_RX":                88,
		"PORT_ATTR_PRIORITY_FLOW_CONTROL_TX":                89,
		"PORT_ATTR_META_DATA":                               90,
		"PORT_ATTR_EGRESS_BLOCK_PORT_LIST":                  91,
		"PORT_ATTR_HW_PROFILE_ID":                           92,
		"PORT_ATTR_EEE_ENABLE":                              93,
		"PORT_ATTR_EEE_IDLE_TIME":                           94,
		"PORT_ATTR_EEE_WAKE_TIME":                           95,
		"PORT_ATTR_PORT_POOL_LIST":                          96,
		"PORT_ATTR_ISOLATION_GROUP":                         97,
		"PORT_ATTR_PKT_TX_ENABLE":                           98,
		"PORT_ATTR_TAM_OBJECT":                              99,
		"PORT_ATTR_SERDES_PREEMPHASIS":                      100,
		"PORT_ATTR_SERDES_IDRIVER":                          101,
		"PORT_ATTR_SERDES_IPREDRIVER":                       102,
		"PORT_ATTR_LINK_TRAINING_ENABLE":                    103,
		"PORT_ATTR_PTP_MODE":                                104,
		"PORT_ATTR_INTERFACE_TYPE":                          105,
		"PORT_ATTR_ADVERTISED_INTERFACE_TYPE":               106,
		"PORT_ATTR_REFERENCE_CLOCK":                         107,
		"PORT_ATTR_PRBS_POLYNOMIAL":                         108,
		"PORT_ATTR_PORT_SERDES_ID":                          109,
		"PORT_ATTR_LINK_TRAINING_FAILURE_STATUS":            110,
		"PORT_ATTR_LINK_TRAINING_RX_STATUS":                 111,
		"PORT_ATTR_PRBS_CONFIG":                             112,
		"PORT_ATTR_PRBS_LOCK_STATUS":                        113,
		"PORT_ATTR_PRBS_LOCK_LOSS_STATUS":                   114,
		"PORT_ATTR_PRBS_RX_STATUS":                          115,
		"PORT_ATTR_PRBS_RX_STATE":                           116,
		"PORT_ATTR_AUTO_NEG_STATUS":                         117,
		"PORT_ATTR_DISABLE_DECREMENT_TTL":                   118,
		"PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP":                  119,
		"PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP":               120,
		"PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP":        121,
		"PORT_ATTR_TPID":                                    122,
		"PORT_ATTR_ERR_STATUS_LIST":                         123,
		"PORT_ATTR_FABRIC_ATTACHED":                         124,
		"PORT_ATTR_FABRIC_ATTACHED_SWITCH_TYPE":             125,
		"PORT_ATTR_FABRIC_ATTACHED_SWITCH_ID":               126,
		"PORT_ATTR_FABRIC_ATTACHED_PORT_INDEX":              127,
		"PORT_ATTR_FABRIC_REACHABILITY":                     128,
		"PORT_ATTR_SYSTEM_PORT":                             129,
		"PORT_ATTR_AUTO_NEG_FEC_MODE_OVERRIDE":              130,
		"PORT_ATTR_LOOPBACK_MODE":                           131,
		"PORT_ATTR_MDIX_MODE_STATUS":                        132,
		"PORT_ATTR_MDIX_MODE_CONFIG":                        133,
		"PORT_ATTR_AUTO_NEG_CONFIG_MODE":                    134,
		"PORT_ATTR_1000X_SGMII_SLAVE_AUTODETECT":            135,
		"PORT_ATTR_MODULE_TYPE":                             136,
		"PORT_ATTR_DUAL_MEDIA":                              137,
		"PORT_ATTR_AUTO_NEG_FEC_MODE_EXTENDED":              138,
		"PORT_ATTR_IPG":                                     139,
		"PORT_ATTR_GLOBAL_FLOW_CONTROL_FORWARD":             140,
		"PORT_ATTR_PRIORITY_FLOW_CONTROL_FORWARD":           141,
		"PORT_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP":        142,
		"PORT_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP":    143,
		"PORT_ATTR_IPSEC_PORT":                              144,
	}
)

func (x PortAttr) Enum() *PortAttr {
	p := new(PortAttr)
	*p = x
	return p
}

func (x PortAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_port_proto_enumTypes[0].Descriptor()
}

func (PortAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_port_proto_enumTypes[0]
}

func (x PortAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortAttr.Descriptor instead.
func (PortAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{0}
}

type PortPoolAttr int32

const (
	PortPoolAttr_PORT_POOL_ATTR_UNSPECIFIED         PortPoolAttr = 0
	PortPoolAttr_PORT_POOL_ATTR_PORT_ID             PortPoolAttr = 1
	PortPoolAttr_PORT_POOL_ATTR_BUFFER_POOL_ID      PortPoolAttr = 2
	PortPoolAttr_PORT_POOL_ATTR_QOS_WRED_PROFILE_ID PortPoolAttr = 3
)

// Enum value maps for PortPoolAttr.
var (
	PortPoolAttr_name = map[int32]string{
		0: "PORT_POOL_ATTR_UNSPECIFIED",
		1: "PORT_POOL_ATTR_PORT_ID",
		2: "PORT_POOL_ATTR_BUFFER_POOL_ID",
		3: "PORT_POOL_ATTR_QOS_WRED_PROFILE_ID",
	}
	PortPoolAttr_value = map[string]int32{
		"PORT_POOL_ATTR_UNSPECIFIED":         0,
		"PORT_POOL_ATTR_PORT_ID":             1,
		"PORT_POOL_ATTR_BUFFER_POOL_ID":      2,
		"PORT_POOL_ATTR_QOS_WRED_PROFILE_ID": 3,
	}
)

func (x PortPoolAttr) Enum() *PortPoolAttr {
	p := new(PortPoolAttr)
	*p = x
	return p
}

func (x PortPoolAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortPoolAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_port_proto_enumTypes[1].Descriptor()
}

func (PortPoolAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_port_proto_enumTypes[1]
}

func (x PortPoolAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortPoolAttr.Descriptor instead.
func (PortPoolAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{1}
}

type PortConnectorAttr int32

const (
	PortConnectorAttr_PORT_CONNECTOR_ATTR_UNSPECIFIED                  PortConnectorAttr = 0
	PortConnectorAttr_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_PORT_ID          PortConnectorAttr = 1
	PortConnectorAttr_PORT_CONNECTOR_ATTR_LINE_SIDE_PORT_ID            PortConnectorAttr = 2
	PortConnectorAttr_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_FAILOVER_PORT_ID PortConnectorAttr = 3
	PortConnectorAttr_PORT_CONNECTOR_ATTR_LINE_SIDE_FAILOVER_PORT_ID   PortConnectorAttr = 4
	PortConnectorAttr_PORT_CONNECTOR_ATTR_FAILOVER_MODE                PortConnectorAttr = 5
)

// Enum value maps for PortConnectorAttr.
var (
	PortConnectorAttr_name = map[int32]string{
		0: "PORT_CONNECTOR_ATTR_UNSPECIFIED",
		1: "PORT_CONNECTOR_ATTR_SYSTEM_SIDE_PORT_ID",
		2: "PORT_CONNECTOR_ATTR_LINE_SIDE_PORT_ID",
		3: "PORT_CONNECTOR_ATTR_SYSTEM_SIDE_FAILOVER_PORT_ID",
		4: "PORT_CONNECTOR_ATTR_LINE_SIDE_FAILOVER_PORT_ID",
		5: "PORT_CONNECTOR_ATTR_FAILOVER_MODE",
	}
	PortConnectorAttr_value = map[string]int32{
		"PORT_CONNECTOR_ATTR_UNSPECIFIED":                  0,
		"PORT_CONNECTOR_ATTR_SYSTEM_SIDE_PORT_ID":          1,
		"PORT_CONNECTOR_ATTR_LINE_SIDE_PORT_ID":            2,
		"PORT_CONNECTOR_ATTR_SYSTEM_SIDE_FAILOVER_PORT_ID": 3,
		"PORT_CONNECTOR_ATTR_LINE_SIDE_FAILOVER_PORT_ID":   4,
		"PORT_CONNECTOR_ATTR_FAILOVER_MODE":                5,
	}
)

func (x PortConnectorAttr) Enum() *PortConnectorAttr {
	p := new(PortConnectorAttr)
	*p = x
	return p
}

func (x PortConnectorAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortConnectorAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_port_proto_enumTypes[2].Descriptor()
}

func (PortConnectorAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_port_proto_enumTypes[2]
}

func (x PortConnectorAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortConnectorAttr.Descriptor instead.
func (PortConnectorAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{2}
}

type PortSerdesAttr int32

const (
	PortSerdesAttr_PORT_SERDES_ATTR_UNSPECIFIED  PortSerdesAttr = 0
	PortSerdesAttr_PORT_SERDES_ATTR_PORT_ID      PortSerdesAttr = 1
	PortSerdesAttr_PORT_SERDES_ATTR_PREEMPHASIS  PortSerdesAttr = 2
	PortSerdesAttr_PORT_SERDES_ATTR_IDRIVER      PortSerdesAttr = 3
	PortSerdesAttr_PORT_SERDES_ATTR_IPREDRIVER   PortSerdesAttr = 4
	PortSerdesAttr_PORT_SERDES_ATTR_TX_FIR_PRE1  PortSerdesAttr = 5
	PortSerdesAttr_PORT_SERDES_ATTR_TX_FIR_PRE2  PortSerdesAttr = 6
	PortSerdesAttr_PORT_SERDES_ATTR_TX_FIR_PRE3  PortSerdesAttr = 7
	PortSerdesAttr_PORT_SERDES_ATTR_TX_FIR_MAIN  PortSerdesAttr = 8
	PortSerdesAttr_PORT_SERDES_ATTR_TX_FIR_POST1 PortSerdesAttr = 9
	PortSerdesAttr_PORT_SERDES_ATTR_TX_FIR_POST2 PortSerdesAttr = 10
	PortSerdesAttr_PORT_SERDES_ATTR_TX_FIR_POST3 PortSerdesAttr = 11
	PortSerdesAttr_PORT_SERDES_ATTR_TX_FIR_ATTN  PortSerdesAttr = 12
)

// Enum value maps for PortSerdesAttr.
var (
	PortSerdesAttr_name = map[int32]string{
		0:  "PORT_SERDES_ATTR_UNSPECIFIED",
		1:  "PORT_SERDES_ATTR_PORT_ID",
		2:  "PORT_SERDES_ATTR_PREEMPHASIS",
		3:  "PORT_SERDES_ATTR_IDRIVER",
		4:  "PORT_SERDES_ATTR_IPREDRIVER",
		5:  "PORT_SERDES_ATTR_TX_FIR_PRE1",
		6:  "PORT_SERDES_ATTR_TX_FIR_PRE2",
		7:  "PORT_SERDES_ATTR_TX_FIR_PRE3",
		8:  "PORT_SERDES_ATTR_TX_FIR_MAIN",
		9:  "PORT_SERDES_ATTR_TX_FIR_POST1",
		10: "PORT_SERDES_ATTR_TX_FIR_POST2",
		11: "PORT_SERDES_ATTR_TX_FIR_POST3",
		12: "PORT_SERDES_ATTR_TX_FIR_ATTN",
	}
	PortSerdesAttr_value = map[string]int32{
		"PORT_SERDES_ATTR_UNSPECIFIED":  0,
		"PORT_SERDES_ATTR_PORT_ID":      1,
		"PORT_SERDES_ATTR_PREEMPHASIS":  2,
		"PORT_SERDES_ATTR_IDRIVER":      3,
		"PORT_SERDES_ATTR_IPREDRIVER":   4,
		"PORT_SERDES_ATTR_TX_FIR_PRE1":  5,
		"PORT_SERDES_ATTR_TX_FIR_PRE2":  6,
		"PORT_SERDES_ATTR_TX_FIR_PRE3":  7,
		"PORT_SERDES_ATTR_TX_FIR_MAIN":  8,
		"PORT_SERDES_ATTR_TX_FIR_POST1": 9,
		"PORT_SERDES_ATTR_TX_FIR_POST2": 10,
		"PORT_SERDES_ATTR_TX_FIR_POST3": 11,
		"PORT_SERDES_ATTR_TX_FIR_ATTN":  12,
	}
)

func (x PortSerdesAttr) Enum() *PortSerdesAttr {
	p := new(PortSerdesAttr)
	*p = x
	return p
}

func (x PortSerdesAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortSerdesAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_port_proto_enumTypes[3].Descriptor()
}

func (PortSerdesAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_port_proto_enumTypes[3]
}

func (x PortSerdesAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortSerdesAttr.Descriptor instead.
func (PortSerdesAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{3}
}

type CreatePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                           uint64                       `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	HwLaneList                       []uint32                     `protobuf:"varint,2,rep,packed,name=hw_lane_list,json=hwLaneList,proto3" json:"hw_lane_list,omitempty"`
	Speed                            *uint32                      `protobuf:"varint,3,opt,name=speed,proto3,oneof" json:"speed,omitempty"`
	FullDuplexMode                   *bool                        `protobuf:"varint,4,opt,name=full_duplex_mode,json=fullDuplexMode,proto3,oneof" json:"full_duplex_mode,omitempty"`
	AutoNegMode                      *bool                        `protobuf:"varint,5,opt,name=auto_neg_mode,json=autoNegMode,proto3,oneof" json:"auto_neg_mode,omitempty"`
	AdminState                       *bool                        `protobuf:"varint,6,opt,name=admin_state,json=adminState,proto3,oneof" json:"admin_state,omitempty"`
	MediaType                        *PortMediaType               `protobuf:"varint,7,opt,name=media_type,json=mediaType,proto3,enum=lemming.dataplane.sai.PortMediaType,oneof" json:"media_type,omitempty"`
	AdvertisedSpeed                  []uint32                     `protobuf:"varint,8,rep,packed,name=advertised_speed,json=advertisedSpeed,proto3" json:"advertised_speed,omitempty"`
	AdvertisedFecMode                []PortFecMode                `protobuf:"varint,9,rep,packed,name=advertised_fec_mode,json=advertisedFecMode,proto3,enum=lemming.dataplane.sai.PortFecMode" json:"advertised_fec_mode,omitempty"`
	AdvertisedFecModeExtended        []PortFecModeExtended        `protobuf:"varint,10,rep,packed,name=advertised_fec_mode_extended,json=advertisedFecModeExtended,proto3,enum=lemming.dataplane.sai.PortFecModeExtended" json:"advertised_fec_mode_extended,omitempty"`
	AdvertisedHalfDuplexSpeed        []uint32                     `protobuf:"varint,11,rep,packed,name=advertised_half_duplex_speed,json=advertisedHalfDuplexSpeed,proto3" json:"advertised_half_duplex_speed,omitempty"`
	AdvertisedAutoNegMode            *bool                        `protobuf:"varint,12,opt,name=advertised_auto_neg_mode,json=advertisedAutoNegMode,proto3,oneof" json:"advertised_auto_neg_mode,omitempty"`
	AdvertisedFlowControlMode        *PortFlowControlMode         `protobuf:"varint,13,opt,name=advertised_flow_control_mode,json=advertisedFlowControlMode,proto3,enum=lemming.dataplane.sai.PortFlowControlMode,oneof" json:"advertised_flow_control_mode,omitempty"`
	AdvertisedAsymmetricPauseMode    *bool                        `protobuf:"varint,14,opt,name=advertised_asymmetric_pause_mode,json=advertisedAsymmetricPauseMode,proto3,oneof" json:"advertised_asymmetric_pause_mode,omitempty"`
	AdvertisedMediaType              *PortMediaType               `protobuf:"varint,15,opt,name=advertised_media_type,json=advertisedMediaType,proto3,enum=lemming.dataplane.sai.PortMediaType,oneof" json:"advertised_media_type,omitempty"`
	AdvertisedOuiCode                *uint32                      `protobuf:"varint,16,opt,name=advertised_oui_code,json=advertisedOuiCode,proto3,oneof" json:"advertised_oui_code,omitempty"`
	PortVlanId                       *uint32                      `protobuf:"varint,17,opt,name=port_vlan_id,json=portVlanId,proto3,oneof" json:"port_vlan_id,omitempty"`
	DefaultVlanPriority              *uint32                      `protobuf:"varint,18,opt,name=default_vlan_priority,json=defaultVlanPriority,proto3,oneof" json:"default_vlan_priority,omitempty"`
	DropUntagged                     *bool                        `protobuf:"varint,19,opt,name=drop_untagged,json=dropUntagged,proto3,oneof" json:"drop_untagged,omitempty"`
	DropTagged                       *bool                        `protobuf:"varint,20,opt,name=drop_tagged,json=dropTagged,proto3,oneof" json:"drop_tagged,omitempty"`
	InternalLoopbackMode             *PortInternalLoopbackMode    `protobuf:"varint,21,opt,name=internal_loopback_mode,json=internalLoopbackMode,proto3,enum=lemming.dataplane.sai.PortInternalLoopbackMode,oneof" json:"internal_loopback_mode,omitempty"`
	UseExtendedFec                   *bool                        `protobuf:"varint,22,opt,name=use_extended_fec,json=useExtendedFec,proto3,oneof" json:"use_extended_fec,omitempty"`
	FecMode                          *PortFecMode                 `protobuf:"varint,23,opt,name=fec_mode,json=fecMode,proto3,enum=lemming.dataplane.sai.PortFecMode,oneof" json:"fec_mode,omitempty"`
	FecModeExtended                  *PortFecModeExtended         `protobuf:"varint,24,opt,name=fec_mode_extended,json=fecModeExtended,proto3,enum=lemming.dataplane.sai.PortFecModeExtended,oneof" json:"fec_mode_extended,omitempty"`
	UpdateDscp                       *bool                        `protobuf:"varint,25,opt,name=update_dscp,json=updateDscp,proto3,oneof" json:"update_dscp,omitempty"`
	Mtu                              *uint32                      `protobuf:"varint,26,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
	FloodStormControlPolicerId       *uint64                      `protobuf:"varint,27,opt,name=flood_storm_control_policer_id,json=floodStormControlPolicerId,proto3,oneof" json:"flood_storm_control_policer_id,omitempty"`
	BroadcastStormControlPolicerId   *uint64                      `protobuf:"varint,28,opt,name=broadcast_storm_control_policer_id,json=broadcastStormControlPolicerId,proto3,oneof" json:"broadcast_storm_control_policer_id,omitempty"`
	MulticastStormControlPolicerId   *uint64                      `protobuf:"varint,29,opt,name=multicast_storm_control_policer_id,json=multicastStormControlPolicerId,proto3,oneof" json:"multicast_storm_control_policer_id,omitempty"`
	GlobalFlowControlMode            *PortFlowControlMode         `protobuf:"varint,30,opt,name=global_flow_control_mode,json=globalFlowControlMode,proto3,enum=lemming.dataplane.sai.PortFlowControlMode,oneof" json:"global_flow_control_mode,omitempty"`
	IngressAcl                       *uint64                      `protobuf:"varint,31,opt,name=ingress_acl,json=ingressAcl,proto3,oneof" json:"ingress_acl,omitempty"`
	EgressAcl                        *uint64                      `protobuf:"varint,32,opt,name=egress_acl,json=egressAcl,proto3,oneof" json:"egress_acl,omitempty"`
	IngressMacsecAcl                 *uint64                      `protobuf:"varint,33,opt,name=ingress_macsec_acl,json=ingressMacsecAcl,proto3,oneof" json:"ingress_macsec_acl,omitempty"`
	EgressMacsecAcl                  *uint64                      `protobuf:"varint,34,opt,name=egress_macsec_acl,json=egressMacsecAcl,proto3,oneof" json:"egress_macsec_acl,omitempty"`
	IngressMirrorSession             []uint64                     `protobuf:"varint,35,rep,packed,name=ingress_mirror_session,json=ingressMirrorSession,proto3" json:"ingress_mirror_session,omitempty"`
	EgressMirrorSession              []uint64                     `protobuf:"varint,36,rep,packed,name=egress_mirror_session,json=egressMirrorSession,proto3" json:"egress_mirror_session,omitempty"`
	IngressSamplepacketEnable        *uint64                      `protobuf:"varint,37,opt,name=ingress_samplepacket_enable,json=ingressSamplepacketEnable,proto3,oneof" json:"ingress_samplepacket_enable,omitempty"`
	EgressSamplepacketEnable         *uint64                      `protobuf:"varint,38,opt,name=egress_samplepacket_enable,json=egressSamplepacketEnable,proto3,oneof" json:"egress_samplepacket_enable,omitempty"`
	IngressSampleMirrorSession       []uint64                     `protobuf:"varint,39,rep,packed,name=ingress_sample_mirror_session,json=ingressSampleMirrorSession,proto3" json:"ingress_sample_mirror_session,omitempty"`
	EgressSampleMirrorSession        []uint64                     `protobuf:"varint,40,rep,packed,name=egress_sample_mirror_session,json=egressSampleMirrorSession,proto3" json:"egress_sample_mirror_session,omitempty"`
	PolicerId                        *uint64                      `protobuf:"varint,41,opt,name=policer_id,json=policerId,proto3,oneof" json:"policer_id,omitempty"`
	QosDefaultTc                     *uint32                      `protobuf:"varint,42,opt,name=qos_default_tc,json=qosDefaultTc,proto3,oneof" json:"qos_default_tc,omitempty"`
	QosDot1PToTcMap                  *uint64                      `protobuf:"varint,43,opt,name=qos_dot1p_to_tc_map,json=qosDot1pToTcMap,proto3,oneof" json:"qos_dot1p_to_tc_map,omitempty"`
	QosDot1PToColorMap               *uint64                      `protobuf:"varint,44,opt,name=qos_dot1p_to_color_map,json=qosDot1pToColorMap,proto3,oneof" json:"qos_dot1p_to_color_map,omitempty"`
	QosDscpToTcMap                   *uint64                      `protobuf:"varint,45,opt,name=qos_dscp_to_tc_map,json=qosDscpToTcMap,proto3,oneof" json:"qos_dscp_to_tc_map,omitempty"`
	QosDscpToColorMap                *uint64                      `protobuf:"varint,46,opt,name=qos_dscp_to_color_map,json=qosDscpToColorMap,proto3,oneof" json:"qos_dscp_to_color_map,omitempty"`
	QosTcToQueueMap                  *uint64                      `protobuf:"varint,47,opt,name=qos_tc_to_queue_map,json=qosTcToQueueMap,proto3,oneof" json:"qos_tc_to_queue_map,omitempty"`
	QosTcAndColorToDot1PMap          *uint64                      `protobuf:"varint,48,opt,name=qos_tc_and_color_to_dot1p_map,json=qosTcAndColorToDot1pMap,proto3,oneof" json:"qos_tc_and_color_to_dot1p_map,omitempty"`
	QosTcAndColorToDscpMap           *uint64                      `protobuf:"varint,49,opt,name=qos_tc_and_color_to_dscp_map,json=qosTcAndColorToDscpMap,proto3,oneof" json:"qos_tc_and_color_to_dscp_map,omitempty"`
	QosTcToPriorityGroupMap          *uint64                      `protobuf:"varint,50,opt,name=qos_tc_to_priority_group_map,json=qosTcToPriorityGroupMap,proto3,oneof" json:"qos_tc_to_priority_group_map,omitempty"`
	QosPfcPriorityToPriorityGroupMap *uint64                      `protobuf:"varint,51,opt,name=qos_pfc_priority_to_priority_group_map,json=qosPfcPriorityToPriorityGroupMap,proto3,oneof" json:"qos_pfc_priority_to_priority_group_map,omitempty"`
	QosPfcPriorityToQueueMap         *uint64                      `protobuf:"varint,52,opt,name=qos_pfc_priority_to_queue_map,json=qosPfcPriorityToQueueMap,proto3,oneof" json:"qos_pfc_priority_to_queue_map,omitempty"`
	QosSchedulerProfileId            *uint64                      `protobuf:"varint,53,opt,name=qos_scheduler_profile_id,json=qosSchedulerProfileId,proto3,oneof" json:"qos_scheduler_profile_id,omitempty"`
	QosIngressBufferProfileList      []uint64                     `protobuf:"varint,54,rep,packed,name=qos_ingress_buffer_profile_list,json=qosIngressBufferProfileList,proto3" json:"qos_ingress_buffer_profile_list,omitempty"`
	QosEgressBufferProfileList       []uint64                     `protobuf:"varint,55,rep,packed,name=qos_egress_buffer_profile_list,json=qosEgressBufferProfileList,proto3" json:"qos_egress_buffer_profile_list,omitempty"`
	PriorityFlowControlMode          *PortPriorityFlowControlMode `protobuf:"varint,56,opt,name=priority_flow_control_mode,json=priorityFlowControlMode,proto3,enum=lemming.dataplane.sai.PortPriorityFlowControlMode,oneof" json:"priority_flow_control_mode,omitempty"`
	PriorityFlowControl              *uint32                      `protobuf:"varint,57,opt,name=priority_flow_control,json=priorityFlowControl,proto3,oneof" json:"priority_flow_control,omitempty"`
	PriorityFlowControlRx            *uint32                      `protobuf:"varint,58,opt,name=priority_flow_control_rx,json=priorityFlowControlRx,proto3,oneof" json:"priority_flow_control_rx,omitempty"`
	PriorityFlowControlTx            *uint32                      `protobuf:"varint,59,opt,name=priority_flow_control_tx,json=priorityFlowControlTx,proto3,oneof" json:"priority_flow_control_tx,omitempty"`
	MetaData                         *uint32                      `protobuf:"varint,60,opt,name=meta_data,json=metaData,proto3,oneof" json:"meta_data,omitempty"`
	EgressBlockPortList              []uint64                     `protobuf:"varint,61,rep,packed,name=egress_block_port_list,json=egressBlockPortList,proto3" json:"egress_block_port_list,omitempty"`
	HwProfileId                      *uint64                      `protobuf:"varint,62,opt,name=hw_profile_id,json=hwProfileId,proto3,oneof" json:"hw_profile_id,omitempty"`
	EeeEnable                        *bool                        `protobuf:"varint,63,opt,name=eee_enable,json=eeeEnable,proto3,oneof" json:"eee_enable,omitempty"`
	EeeIdleTime                      *uint32                      `protobuf:"varint,64,opt,name=eee_idle_time,json=eeeIdleTime,proto3,oneof" json:"eee_idle_time,omitempty"`
	EeeWakeTime                      *uint32                      `protobuf:"varint,65,opt,name=eee_wake_time,json=eeeWakeTime,proto3,oneof" json:"eee_wake_time,omitempty"`
	IsolationGroup                   *uint64                      `protobuf:"varint,66,opt,name=isolation_group,json=isolationGroup,proto3,oneof" json:"isolation_group,omitempty"`
	PktTxEnable                      *bool                        `protobuf:"varint,67,opt,name=pkt_tx_enable,json=pktTxEnable,proto3,oneof" json:"pkt_tx_enable,omitempty"`
	TamObject                        []uint64                     `protobuf:"varint,68,rep,packed,name=tam_object,json=tamObject,proto3" json:"tam_object,omitempty"`
	SerdesPreemphasis                []uint32                     `protobuf:"varint,69,rep,packed,name=serdes_preemphasis,json=serdesPreemphasis,proto3" json:"serdes_preemphasis,omitempty"`
	SerdesIdriver                    []uint32                     `protobuf:"varint,70,rep,packed,name=serdes_idriver,json=serdesIdriver,proto3" json:"serdes_idriver,omitempty"`
	SerdesIpredriver                 []uint32                     `protobuf:"varint,71,rep,packed,name=serdes_ipredriver,json=serdesIpredriver,proto3" json:"serdes_ipredriver,omitempty"`
	LinkTrainingEnable               *bool                        `protobuf:"varint,72,opt,name=link_training_enable,json=linkTrainingEnable,proto3,oneof" json:"link_training_enable,omitempty"`
	PtpMode                          *PortPtpMode                 `protobuf:"varint,73,opt,name=ptp_mode,json=ptpMode,proto3,enum=lemming.dataplane.sai.PortPtpMode,oneof" json:"ptp_mode,omitempty"`
	InterfaceType                    *PortInterfaceType           `protobuf:"varint,74,opt,name=interface_type,json=interfaceType,proto3,enum=lemming.dataplane.sai.PortInterfaceType,oneof" json:"interface_type,omitempty"`
	AdvertisedInterfaceType          []PortInterfaceType          `protobuf:"varint,75,rep,packed,name=advertised_interface_type,json=advertisedInterfaceType,proto3,enum=lemming.dataplane.sai.PortInterfaceType" json:"advertised_interface_type,omitempty"`
	ReferenceClock                   *uint64                      `protobuf:"varint,76,opt,name=reference_clock,json=referenceClock,proto3,oneof" json:"reference_clock,omitempty"`
	PrbsPolynomial                   *uint32                      `protobuf:"varint,77,opt,name=prbs_polynomial,json=prbsPolynomial,proto3,oneof" json:"prbs_polynomial,omitempty"`
	PrbsConfig                       *PortPrbsConfig              `protobuf:"varint,78,opt,name=prbs_config,json=prbsConfig,proto3,enum=lemming.dataplane.sai.PortPrbsConfig,oneof" json:"prbs_config,omitempty"`
	DisableDecrementTtl              *bool                        `protobuf:"varint,79,opt,name=disable_decrement_ttl,json=disableDecrementTtl,proto3,oneof" json:"disable_decrement_ttl,omitempty"`
	QosMplsExpToTcMap                *uint64                      `protobuf:"varint,80,opt,name=qos_mpls_exp_to_tc_map,json=qosMplsExpToTcMap,proto3,oneof" json:"qos_mpls_exp_to_tc_map,omitempty"`
	QosMplsExpToColorMap             *uint64                      `protobuf:"varint,81,opt,name=qos_mpls_exp_to_color_map,json=qosMplsExpToColorMap,proto3,oneof" json:"qos_mpls_exp_to_color_map,omitempty"`
	QosTcAndColorToMplsExpMap        *uint64                      `protobuf:"varint,82,opt,name=qos_tc_and_color_to_mpls_exp_map,json=qosTcAndColorToMplsExpMap,proto3,oneof" json:"qos_tc_and_color_to_mpls_exp_map,omitempty"`
	Tpid                             *uint32                      `protobuf:"varint,83,opt,name=tpid,proto3,oneof" json:"tpid,omitempty"`
	AutoNegFecModeOverride           *bool                        `protobuf:"varint,84,opt,name=auto_neg_fec_mode_override,json=autoNegFecModeOverride,proto3,oneof" json:"auto_neg_fec_mode_override,omitempty"`
	LoopbackMode                     *PortLoopbackMode            `protobuf:"varint,85,opt,name=loopback_mode,json=loopbackMode,proto3,enum=lemming.dataplane.sai.PortLoopbackMode,oneof" json:"loopback_mode,omitempty"`
	MdixModeConfig                   *PortMdixModeConfig          `protobuf:"varint,86,opt,name=mdix_mode_config,json=mdixModeConfig,proto3,enum=lemming.dataplane.sai.PortMdixModeConfig,oneof" json:"mdix_mode_config,omitempty"`
	AutoNegConfigMode                *PortAutoNegConfigMode       `protobuf:"varint,87,opt,name=auto_neg_config_mode,json=autoNegConfigMode,proto3,enum=lemming.dataplane.sai.PortAutoNegConfigMode,oneof" json:"auto_neg_config_mode,omitempty"`
	X1000XSgmiiSlaveAutodetect       *bool                        `protobuf:"varint,88,opt,name=_1000x_sgmii_slave_autodetect,json=1000xSgmiiSlaveAutodetect,proto3,oneof" json:"_1000x_sgmii_slave_autodetect,omitempty"`
	ModuleType                       *PortModuleType              `protobuf:"varint,89,opt,name=module_type,json=moduleType,proto3,enum=lemming.dataplane.sai.PortModuleType,oneof" json:"module_type,omitempty"`
	DualMedia                        *PortDualMedia               `protobuf:"varint,90,opt,name=dual_media,json=dualMedia,proto3,enum=lemming.dataplane.sai.PortDualMedia,oneof" json:"dual_media,omitempty"`
	Ipg                              *uint32                      `protobuf:"varint,91,opt,name=ipg,proto3,oneof" json:"ipg,omitempty"`
	GlobalFlowControlForward         *bool                        `protobuf:"varint,92,opt,name=global_flow_control_forward,json=globalFlowControlForward,proto3,oneof" json:"global_flow_control_forward,omitempty"`
	PriorityFlowControlForward       *bool                        `protobuf:"varint,93,opt,name=priority_flow_control_forward,json=priorityFlowControlForward,proto3,oneof" json:"priority_flow_control_forward,omitempty"`
	QosDscpToForwardingClassMap      *uint64                      `protobuf:"varint,94,opt,name=qos_dscp_to_forwarding_class_map,json=qosDscpToForwardingClassMap,proto3,oneof" json:"qos_dscp_to_forwarding_class_map,omitempty"`
	QosMplsExpToForwardingClassMap   *uint64                      `protobuf:"varint,95,opt,name=qos_mpls_exp_to_forwarding_class_map,json=qosMplsExpToForwardingClassMap,proto3,oneof" json:"qos_mpls_exp_to_forwarding_class_map,omitempty"`
}

func (x *CreatePortRequest) Reset() {
	*x = CreatePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortRequest) ProtoMessage() {}

func (x *CreatePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortRequest.ProtoReflect.Descriptor instead.
func (*CreatePortRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePortRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreatePortRequest) GetHwLaneList() []uint32 {
	if x != nil {
		return x.HwLaneList
	}
	return nil
}

func (x *CreatePortRequest) GetSpeed() uint32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *CreatePortRequest) GetFullDuplexMode() bool {
	if x != nil && x.FullDuplexMode != nil {
		return *x.FullDuplexMode
	}
	return false
}

func (x *CreatePortRequest) GetAutoNegMode() bool {
	if x != nil && x.AutoNegMode != nil {
		return *x.AutoNegMode
	}
	return false
}

func (x *CreatePortRequest) GetAdminState() bool {
	if x != nil && x.AdminState != nil {
		return *x.AdminState
	}
	return false
}

func (x *CreatePortRequest) GetMediaType() PortMediaType {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return PortMediaType_PORT_MEDIA_TYPE_UNSPECIFIED
}

func (x *CreatePortRequest) GetAdvertisedSpeed() []uint32 {
	if x != nil {
		return x.AdvertisedSpeed
	}
	return nil
}

func (x *CreatePortRequest) GetAdvertisedFecMode() []PortFecMode {
	if x != nil {
		return x.AdvertisedFecMode
	}
	return nil
}

func (x *CreatePortRequest) GetAdvertisedFecModeExtended() []PortFecModeExtended {
	if x != nil {
		return x.AdvertisedFecModeExtended
	}
	return nil
}

func (x *CreatePortRequest) GetAdvertisedHalfDuplexSpeed() []uint32 {
	if x != nil {
		return x.AdvertisedHalfDuplexSpeed
	}
	return nil
}

func (x *CreatePortRequest) GetAdvertisedAutoNegMode() bool {
	if x != nil && x.AdvertisedAutoNegMode != nil {
		return *x.AdvertisedAutoNegMode
	}
	return false
}

func (x *CreatePortRequest) GetAdvertisedFlowControlMode() PortFlowControlMode {
	if x != nil && x.AdvertisedFlowControlMode != nil {
		return *x.AdvertisedFlowControlMode
	}
	return PortFlowControlMode_PORT_FLOW_CONTROL_MODE_UNSPECIFIED
}

func (x *CreatePortRequest) GetAdvertisedAsymmetricPauseMode() bool {
	if x != nil && x.AdvertisedAsymmetricPauseMode != nil {
		return *x.AdvertisedAsymmetricPauseMode
	}
	return false
}

func (x *CreatePortRequest) GetAdvertisedMediaType() PortMediaType {
	if x != nil && x.AdvertisedMediaType != nil {
		return *x.AdvertisedMediaType
	}
	return PortMediaType_PORT_MEDIA_TYPE_UNSPECIFIED
}

func (x *CreatePortRequest) GetAdvertisedOuiCode() uint32 {
	if x != nil && x.AdvertisedOuiCode != nil {
		return *x.AdvertisedOuiCode
	}
	return 0
}

func (x *CreatePortRequest) GetPortVlanId() uint32 {
	if x != nil && x.PortVlanId != nil {
		return *x.PortVlanId
	}
	return 0
}

func (x *CreatePortRequest) GetDefaultVlanPriority() uint32 {
	if x != nil && x.DefaultVlanPriority != nil {
		return *x.DefaultVlanPriority
	}
	return 0
}

func (x *CreatePortRequest) GetDropUntagged() bool {
	if x != nil && x.DropUntagged != nil {
		return *x.DropUntagged
	}
	return false
}

func (x *CreatePortRequest) GetDropTagged() bool {
	if x != nil && x.DropTagged != nil {
		return *x.DropTagged
	}
	return false
}

func (x *CreatePortRequest) GetInternalLoopbackMode() PortInternalLoopbackMode {
	if x != nil && x.InternalLoopbackMode != nil {
		return *x.InternalLoopbackMode
	}
	return PortInternalLoopbackMode_PORT_INTERNAL_LOOPBACK_MODE_UNSPECIFIED
}

func (x *CreatePortRequest) GetUseExtendedFec() bool {
	if x != nil && x.UseExtendedFec != nil {
		return *x.UseExtendedFec
	}
	return false
}

func (x *CreatePortRequest) GetFecMode() PortFecMode {
	if x != nil && x.FecMode != nil {
		return *x.FecMode
	}
	return PortFecMode_PORT_FEC_MODE_UNSPECIFIED
}

func (x *CreatePortRequest) GetFecModeExtended() PortFecModeExtended {
	if x != nil && x.FecModeExtended != nil {
		return *x.FecModeExtended
	}
	return PortFecModeExtended_PORT_FEC_MODE_EXTENDED_UNSPECIFIED
}

func (x *CreatePortRequest) GetUpdateDscp() bool {
	if x != nil && x.UpdateDscp != nil {
		return *x.UpdateDscp
	}
	return false
}

func (x *CreatePortRequest) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

func (x *CreatePortRequest) GetFloodStormControlPolicerId() uint64 {
	if x != nil && x.FloodStormControlPolicerId != nil {
		return *x.FloodStormControlPolicerId
	}
	return 0
}

func (x *CreatePortRequest) GetBroadcastStormControlPolicerId() uint64 {
	if x != nil && x.BroadcastStormControlPolicerId != nil {
		return *x.BroadcastStormControlPolicerId
	}
	return 0
}

func (x *CreatePortRequest) GetMulticastStormControlPolicerId() uint64 {
	if x != nil && x.MulticastStormControlPolicerId != nil {
		return *x.MulticastStormControlPolicerId
	}
	return 0
}

func (x *CreatePortRequest) GetGlobalFlowControlMode() PortFlowControlMode {
	if x != nil && x.GlobalFlowControlMode != nil {
		return *x.GlobalFlowControlMode
	}
	return PortFlowControlMode_PORT_FLOW_CONTROL_MODE_UNSPECIFIED
}

func (x *CreatePortRequest) GetIngressAcl() uint64 {
	if x != nil && x.IngressAcl != nil {
		return *x.IngressAcl
	}
	return 0
}

func (x *CreatePortRequest) GetEgressAcl() uint64 {
	if x != nil && x.EgressAcl != nil {
		return *x.EgressAcl
	}
	return 0
}

func (x *CreatePortRequest) GetIngressMacsecAcl() uint64 {
	if x != nil && x.IngressMacsecAcl != nil {
		return *x.IngressMacsecAcl
	}
	return 0
}

func (x *CreatePortRequest) GetEgressMacsecAcl() uint64 {
	if x != nil && x.EgressMacsecAcl != nil {
		return *x.EgressMacsecAcl
	}
	return 0
}

func (x *CreatePortRequest) GetIngressMirrorSession() []uint64 {
	if x != nil {
		return x.IngressMirrorSession
	}
	return nil
}

func (x *CreatePortRequest) GetEgressMirrorSession() []uint64 {
	if x != nil {
		return x.EgressMirrorSession
	}
	return nil
}

func (x *CreatePortRequest) GetIngressSamplepacketEnable() uint64 {
	if x != nil && x.IngressSamplepacketEnable != nil {
		return *x.IngressSamplepacketEnable
	}
	return 0
}

func (x *CreatePortRequest) GetEgressSamplepacketEnable() uint64 {
	if x != nil && x.EgressSamplepacketEnable != nil {
		return *x.EgressSamplepacketEnable
	}
	return 0
}

func (x *CreatePortRequest) GetIngressSampleMirrorSession() []uint64 {
	if x != nil {
		return x.IngressSampleMirrorSession
	}
	return nil
}

func (x *CreatePortRequest) GetEgressSampleMirrorSession() []uint64 {
	if x != nil {
		return x.EgressSampleMirrorSession
	}
	return nil
}

func (x *CreatePortRequest) GetPolicerId() uint64 {
	if x != nil && x.PolicerId != nil {
		return *x.PolicerId
	}
	return 0
}

func (x *CreatePortRequest) GetQosDefaultTc() uint32 {
	if x != nil && x.QosDefaultTc != nil {
		return *x.QosDefaultTc
	}
	return 0
}

func (x *CreatePortRequest) GetQosDot1PToTcMap() uint64 {
	if x != nil && x.QosDot1PToTcMap != nil {
		return *x.QosDot1PToTcMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosDot1PToColorMap() uint64 {
	if x != nil && x.QosDot1PToColorMap != nil {
		return *x.QosDot1PToColorMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosDscpToTcMap() uint64 {
	if x != nil && x.QosDscpToTcMap != nil {
		return *x.QosDscpToTcMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosDscpToColorMap() uint64 {
	if x != nil && x.QosDscpToColorMap != nil {
		return *x.QosDscpToColorMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosTcToQueueMap() uint64 {
	if x != nil && x.QosTcToQueueMap != nil {
		return *x.QosTcToQueueMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosTcAndColorToDot1PMap() uint64 {
	if x != nil && x.QosTcAndColorToDot1PMap != nil {
		return *x.QosTcAndColorToDot1PMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosTcAndColorToDscpMap() uint64 {
	if x != nil && x.QosTcAndColorToDscpMap != nil {
		return *x.QosTcAndColorToDscpMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosTcToPriorityGroupMap() uint64 {
	if x != nil && x.QosTcToPriorityGroupMap != nil {
		return *x.QosTcToPriorityGroupMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosPfcPriorityToPriorityGroupMap() uint64 {
	if x != nil && x.QosPfcPriorityToPriorityGroupMap != nil {
		return *x.QosPfcPriorityToPriorityGroupMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosPfcPriorityToQueueMap() uint64 {
	if x != nil && x.QosPfcPriorityToQueueMap != nil {
		return *x.QosPfcPriorityToQueueMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosSchedulerProfileId() uint64 {
	if x != nil && x.QosSchedulerProfileId != nil {
		return *x.QosSchedulerProfileId
	}
	return 0
}

func (x *CreatePortRequest) GetQosIngressBufferProfileList() []uint64 {
	if x != nil {
		return x.QosIngressBufferProfileList
	}
	return nil
}

func (x *CreatePortRequest) GetQosEgressBufferProfileList() []uint64 {
	if x != nil {
		return x.QosEgressBufferProfileList
	}
	return nil
}

func (x *CreatePortRequest) GetPriorityFlowControlMode() PortPriorityFlowControlMode {
	if x != nil && x.PriorityFlowControlMode != nil {
		return *x.PriorityFlowControlMode
	}
	return PortPriorityFlowControlMode_PORT_PRIORITY_FLOW_CONTROL_MODE_UNSPECIFIED
}

func (x *CreatePortRequest) GetPriorityFlowControl() uint32 {
	if x != nil && x.PriorityFlowControl != nil {
		return *x.PriorityFlowControl
	}
	return 0
}

func (x *CreatePortRequest) GetPriorityFlowControlRx() uint32 {
	if x != nil && x.PriorityFlowControlRx != nil {
		return *x.PriorityFlowControlRx
	}
	return 0
}

func (x *CreatePortRequest) GetPriorityFlowControlTx() uint32 {
	if x != nil && x.PriorityFlowControlTx != nil {
		return *x.PriorityFlowControlTx
	}
	return 0
}

func (x *CreatePortRequest) GetMetaData() uint32 {
	if x != nil && x.MetaData != nil {
		return *x.MetaData
	}
	return 0
}

func (x *CreatePortRequest) GetEgressBlockPortList() []uint64 {
	if x != nil {
		return x.EgressBlockPortList
	}
	return nil
}

func (x *CreatePortRequest) GetHwProfileId() uint64 {
	if x != nil && x.HwProfileId != nil {
		return *x.HwProfileId
	}
	return 0
}

func (x *CreatePortRequest) GetEeeEnable() bool {
	if x != nil && x.EeeEnable != nil {
		return *x.EeeEnable
	}
	return false
}

func (x *CreatePortRequest) GetEeeIdleTime() uint32 {
	if x != nil && x.EeeIdleTime != nil {
		return *x.EeeIdleTime
	}
	return 0
}

func (x *CreatePortRequest) GetEeeWakeTime() uint32 {
	if x != nil && x.EeeWakeTime != nil {
		return *x.EeeWakeTime
	}
	return 0
}

func (x *CreatePortRequest) GetIsolationGroup() uint64 {
	if x != nil && x.IsolationGroup != nil {
		return *x.IsolationGroup
	}
	return 0
}

func (x *CreatePortRequest) GetPktTxEnable() bool {
	if x != nil && x.PktTxEnable != nil {
		return *x.PktTxEnable
	}
	return false
}

func (x *CreatePortRequest) GetTamObject() []uint64 {
	if x != nil {
		return x.TamObject
	}
	return nil
}

func (x *CreatePortRequest) GetSerdesPreemphasis() []uint32 {
	if x != nil {
		return x.SerdesPreemphasis
	}
	return nil
}

func (x *CreatePortRequest) GetSerdesIdriver() []uint32 {
	if x != nil {
		return x.SerdesIdriver
	}
	return nil
}

func (x *CreatePortRequest) GetSerdesIpredriver() []uint32 {
	if x != nil {
		return x.SerdesIpredriver
	}
	return nil
}

func (x *CreatePortRequest) GetLinkTrainingEnable() bool {
	if x != nil && x.LinkTrainingEnable != nil {
		return *x.LinkTrainingEnable
	}
	return false
}

func (x *CreatePortRequest) GetPtpMode() PortPtpMode {
	if x != nil && x.PtpMode != nil {
		return *x.PtpMode
	}
	return PortPtpMode_PORT_PTP_MODE_UNSPECIFIED
}

func (x *CreatePortRequest) GetInterfaceType() PortInterfaceType {
	if x != nil && x.InterfaceType != nil {
		return *x.InterfaceType
	}
	return PortInterfaceType_PORT_INTERFACE_TYPE_UNSPECIFIED
}

func (x *CreatePortRequest) GetAdvertisedInterfaceType() []PortInterfaceType {
	if x != nil {
		return x.AdvertisedInterfaceType
	}
	return nil
}

func (x *CreatePortRequest) GetReferenceClock() uint64 {
	if x != nil && x.ReferenceClock != nil {
		return *x.ReferenceClock
	}
	return 0
}

func (x *CreatePortRequest) GetPrbsPolynomial() uint32 {
	if x != nil && x.PrbsPolynomial != nil {
		return *x.PrbsPolynomial
	}
	return 0
}

func (x *CreatePortRequest) GetPrbsConfig() PortPrbsConfig {
	if x != nil && x.PrbsConfig != nil {
		return *x.PrbsConfig
	}
	return PortPrbsConfig_PORT_PRBS_CONFIG_UNSPECIFIED
}

func (x *CreatePortRequest) GetDisableDecrementTtl() bool {
	if x != nil && x.DisableDecrementTtl != nil {
		return *x.DisableDecrementTtl
	}
	return false
}

func (x *CreatePortRequest) GetQosMplsExpToTcMap() uint64 {
	if x != nil && x.QosMplsExpToTcMap != nil {
		return *x.QosMplsExpToTcMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosMplsExpToColorMap() uint64 {
	if x != nil && x.QosMplsExpToColorMap != nil {
		return *x.QosMplsExpToColorMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosTcAndColorToMplsExpMap() uint64 {
	if x != nil && x.QosTcAndColorToMplsExpMap != nil {
		return *x.QosTcAndColorToMplsExpMap
	}
	return 0
}

func (x *CreatePortRequest) GetTpid() uint32 {
	if x != nil && x.Tpid != nil {
		return *x.Tpid
	}
	return 0
}

func (x *CreatePortRequest) GetAutoNegFecModeOverride() bool {
	if x != nil && x.AutoNegFecModeOverride != nil {
		return *x.AutoNegFecModeOverride
	}
	return false
}

func (x *CreatePortRequest) GetLoopbackMode() PortLoopbackMode {
	if x != nil && x.LoopbackMode != nil {
		return *x.LoopbackMode
	}
	return PortLoopbackMode_PORT_LOOPBACK_MODE_UNSPECIFIED
}

func (x *CreatePortRequest) GetMdixModeConfig() PortMdixModeConfig {
	if x != nil && x.MdixModeConfig != nil {
		return *x.MdixModeConfig
	}
	return PortMdixModeConfig_PORT_MDIX_MODE_CONFIG_UNSPECIFIED
}

func (x *CreatePortRequest) GetAutoNegConfigMode() PortAutoNegConfigMode {
	if x != nil && x.AutoNegConfigMode != nil {
		return *x.AutoNegConfigMode
	}
	return PortAutoNegConfigMode_PORT_AUTO_NEG_CONFIG_MODE_UNSPECIFIED
}

func (x *CreatePortRequest) GetX1000XSgmiiSlaveAutodetect() bool {
	if x != nil && x.X1000XSgmiiSlaveAutodetect != nil {
		return *x.X1000XSgmiiSlaveAutodetect
	}
	return false
}

func (x *CreatePortRequest) GetModuleType() PortModuleType {
	if x != nil && x.ModuleType != nil {
		return *x.ModuleType
	}
	return PortModuleType_PORT_MODULE_TYPE_UNSPECIFIED
}

func (x *CreatePortRequest) GetDualMedia() PortDualMedia {
	if x != nil && x.DualMedia != nil {
		return *x.DualMedia
	}
	return PortDualMedia_PORT_DUAL_MEDIA_UNSPECIFIED
}

func (x *CreatePortRequest) GetIpg() uint32 {
	if x != nil && x.Ipg != nil {
		return *x.Ipg
	}
	return 0
}

func (x *CreatePortRequest) GetGlobalFlowControlForward() bool {
	if x != nil && x.GlobalFlowControlForward != nil {
		return *x.GlobalFlowControlForward
	}
	return false
}

func (x *CreatePortRequest) GetPriorityFlowControlForward() bool {
	if x != nil && x.PriorityFlowControlForward != nil {
		return *x.PriorityFlowControlForward
	}
	return false
}

func (x *CreatePortRequest) GetQosDscpToForwardingClassMap() uint64 {
	if x != nil && x.QosDscpToForwardingClassMap != nil {
		return *x.QosDscpToForwardingClassMap
	}
	return 0
}

func (x *CreatePortRequest) GetQosMplsExpToForwardingClassMap() uint64 {
	if x != nil && x.QosMplsExpToForwardingClassMap != nil {
		return *x.QosMplsExpToForwardingClassMap
	}
	return 0
}

type CreatePortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreatePortResponse) Reset() {
	*x = CreatePortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortResponse) ProtoMessage() {}

func (x *CreatePortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortResponse.ProtoReflect.Descriptor instead.
func (*CreatePortResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePortResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemovePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemovePortRequest) Reset() {
	*x = RemovePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortRequest) ProtoMessage() {}

func (x *RemovePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortRequest.ProtoReflect.Descriptor instead.
func (*RemovePortRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{2}
}

func (x *RemovePortRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemovePortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovePortResponse) Reset() {
	*x = RemovePortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortResponse) ProtoMessage() {}

func (x *RemovePortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortResponse.ProtoReflect.Descriptor instead.
func (*RemovePortResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{3}
}

type SetPortAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                              uint64                       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Speed                            *uint32                      `protobuf:"varint,2,opt,name=speed,proto3,oneof" json:"speed,omitempty"`
	AutoNegMode                      *bool                        `protobuf:"varint,3,opt,name=auto_neg_mode,json=autoNegMode,proto3,oneof" json:"auto_neg_mode,omitempty"`
	AdminState                       *bool                        `protobuf:"varint,4,opt,name=admin_state,json=adminState,proto3,oneof" json:"admin_state,omitempty"`
	MediaType                        *PortMediaType               `protobuf:"varint,5,opt,name=media_type,json=mediaType,proto3,enum=lemming.dataplane.sai.PortMediaType,oneof" json:"media_type,omitempty"`
	AdvertisedSpeed                  []uint32                     `protobuf:"varint,6,rep,packed,name=advertised_speed,json=advertisedSpeed,proto3" json:"advertised_speed,omitempty"`
	AdvertisedFecMode                []PortFecMode                `protobuf:"varint,7,rep,packed,name=advertised_fec_mode,json=advertisedFecMode,proto3,enum=lemming.dataplane.sai.PortFecMode" json:"advertised_fec_mode,omitempty"`
	AdvertisedFecModeExtended        []PortFecModeExtended        `protobuf:"varint,8,rep,packed,name=advertised_fec_mode_extended,json=advertisedFecModeExtended,proto3,enum=lemming.dataplane.sai.PortFecModeExtended" json:"advertised_fec_mode_extended,omitempty"`
	AdvertisedHalfDuplexSpeed        []uint32                     `protobuf:"varint,9,rep,packed,name=advertised_half_duplex_speed,json=advertisedHalfDuplexSpeed,proto3" json:"advertised_half_duplex_speed,omitempty"`
	AdvertisedAutoNegMode            *bool                        `protobuf:"varint,10,opt,name=advertised_auto_neg_mode,json=advertisedAutoNegMode,proto3,oneof" json:"advertised_auto_neg_mode,omitempty"`
	AdvertisedFlowControlMode        *PortFlowControlMode         `protobuf:"varint,11,opt,name=advertised_flow_control_mode,json=advertisedFlowControlMode,proto3,enum=lemming.dataplane.sai.PortFlowControlMode,oneof" json:"advertised_flow_control_mode,omitempty"`
	AdvertisedAsymmetricPauseMode    *bool                        `protobuf:"varint,12,opt,name=advertised_asymmetric_pause_mode,json=advertisedAsymmetricPauseMode,proto3,oneof" json:"advertised_asymmetric_pause_mode,omitempty"`
	AdvertisedMediaType              *PortMediaType               `protobuf:"varint,13,opt,name=advertised_media_type,json=advertisedMediaType,proto3,enum=lemming.dataplane.sai.PortMediaType,oneof" json:"advertised_media_type,omitempty"`
	AdvertisedOuiCode                *uint32                      `protobuf:"varint,14,opt,name=advertised_oui_code,json=advertisedOuiCode,proto3,oneof" json:"advertised_oui_code,omitempty"`
	PortVlanId                       *uint32                      `protobuf:"varint,15,opt,name=port_vlan_id,json=portVlanId,proto3,oneof" json:"port_vlan_id,omitempty"`
	DefaultVlanPriority              *uint32                      `protobuf:"varint,16,opt,name=default_vlan_priority,json=defaultVlanPriority,proto3,oneof" json:"default_vlan_priority,omitempty"`
	DropUntagged                     *bool                        `protobuf:"varint,17,opt,name=drop_untagged,json=dropUntagged,proto3,oneof" json:"drop_untagged,omitempty"`
	DropTagged                       *bool                        `protobuf:"varint,18,opt,name=drop_tagged,json=dropTagged,proto3,oneof" json:"drop_tagged,omitempty"`
	InternalLoopbackMode             *PortInternalLoopbackMode    `protobuf:"varint,19,opt,name=internal_loopback_mode,json=internalLoopbackMode,proto3,enum=lemming.dataplane.sai.PortInternalLoopbackMode,oneof" json:"internal_loopback_mode,omitempty"`
	UseExtendedFec                   *bool                        `protobuf:"varint,20,opt,name=use_extended_fec,json=useExtendedFec,proto3,oneof" json:"use_extended_fec,omitempty"`
	FecMode                          *PortFecMode                 `protobuf:"varint,21,opt,name=fec_mode,json=fecMode,proto3,enum=lemming.dataplane.sai.PortFecMode,oneof" json:"fec_mode,omitempty"`
	FecModeExtended                  *PortFecModeExtended         `protobuf:"varint,22,opt,name=fec_mode_extended,json=fecModeExtended,proto3,enum=lemming.dataplane.sai.PortFecModeExtended,oneof" json:"fec_mode_extended,omitempty"`
	UpdateDscp                       *bool                        `protobuf:"varint,23,opt,name=update_dscp,json=updateDscp,proto3,oneof" json:"update_dscp,omitempty"`
	Mtu                              *uint32                      `protobuf:"varint,24,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
	FloodStormControlPolicerId       *uint64                      `protobuf:"varint,25,opt,name=flood_storm_control_policer_id,json=floodStormControlPolicerId,proto3,oneof" json:"flood_storm_control_policer_id,omitempty"`
	BroadcastStormControlPolicerId   *uint64                      `protobuf:"varint,26,opt,name=broadcast_storm_control_policer_id,json=broadcastStormControlPolicerId,proto3,oneof" json:"broadcast_storm_control_policer_id,omitempty"`
	MulticastStormControlPolicerId   *uint64                      `protobuf:"varint,27,opt,name=multicast_storm_control_policer_id,json=multicastStormControlPolicerId,proto3,oneof" json:"multicast_storm_control_policer_id,omitempty"`
	GlobalFlowControlMode            *PortFlowControlMode         `protobuf:"varint,28,opt,name=global_flow_control_mode,json=globalFlowControlMode,proto3,enum=lemming.dataplane.sai.PortFlowControlMode,oneof" json:"global_flow_control_mode,omitempty"`
	IngressAcl                       *uint64                      `protobuf:"varint,29,opt,name=ingress_acl,json=ingressAcl,proto3,oneof" json:"ingress_acl,omitempty"`
	EgressAcl                        *uint64                      `protobuf:"varint,30,opt,name=egress_acl,json=egressAcl,proto3,oneof" json:"egress_acl,omitempty"`
	IngressMacsecAcl                 *uint64                      `protobuf:"varint,31,opt,name=ingress_macsec_acl,json=ingressMacsecAcl,proto3,oneof" json:"ingress_macsec_acl,omitempty"`
	EgressMacsecAcl                  *uint64                      `protobuf:"varint,32,opt,name=egress_macsec_acl,json=egressMacsecAcl,proto3,oneof" json:"egress_macsec_acl,omitempty"`
	IngressMirrorSession             []uint64                     `protobuf:"varint,33,rep,packed,name=ingress_mirror_session,json=ingressMirrorSession,proto3" json:"ingress_mirror_session,omitempty"`
	EgressMirrorSession              []uint64                     `protobuf:"varint,34,rep,packed,name=egress_mirror_session,json=egressMirrorSession,proto3" json:"egress_mirror_session,omitempty"`
	IngressSamplepacketEnable        *uint64                      `protobuf:"varint,35,opt,name=ingress_samplepacket_enable,json=ingressSamplepacketEnable,proto3,oneof" json:"ingress_samplepacket_enable,omitempty"`
	EgressSamplepacketEnable         *uint64                      `protobuf:"varint,36,opt,name=egress_samplepacket_enable,json=egressSamplepacketEnable,proto3,oneof" json:"egress_samplepacket_enable,omitempty"`
	IngressSampleMirrorSession       []uint64                     `protobuf:"varint,37,rep,packed,name=ingress_sample_mirror_session,json=ingressSampleMirrorSession,proto3" json:"ingress_sample_mirror_session,omitempty"`
	EgressSampleMirrorSession        []uint64                     `protobuf:"varint,38,rep,packed,name=egress_sample_mirror_session,json=egressSampleMirrorSession,proto3" json:"egress_sample_mirror_session,omitempty"`
	PolicerId                        *uint64                      `protobuf:"varint,39,opt,name=policer_id,json=policerId,proto3,oneof" json:"policer_id,omitempty"`
	QosDefaultTc                     *uint32                      `protobuf:"varint,40,opt,name=qos_default_tc,json=qosDefaultTc,proto3,oneof" json:"qos_default_tc,omitempty"`
	QosDot1PToTcMap                  *uint64                      `protobuf:"varint,41,opt,name=qos_dot1p_to_tc_map,json=qosDot1pToTcMap,proto3,oneof" json:"qos_dot1p_to_tc_map,omitempty"`
	QosDot1PToColorMap               *uint64                      `protobuf:"varint,42,opt,name=qos_dot1p_to_color_map,json=qosDot1pToColorMap,proto3,oneof" json:"qos_dot1p_to_color_map,omitempty"`
	QosDscpToTcMap                   *uint64                      `protobuf:"varint,43,opt,name=qos_dscp_to_tc_map,json=qosDscpToTcMap,proto3,oneof" json:"qos_dscp_to_tc_map,omitempty"`
	QosDscpToColorMap                *uint64                      `protobuf:"varint,44,opt,name=qos_dscp_to_color_map,json=qosDscpToColorMap,proto3,oneof" json:"qos_dscp_to_color_map,omitempty"`
	QosTcToQueueMap                  *uint64                      `protobuf:"varint,45,opt,name=qos_tc_to_queue_map,json=qosTcToQueueMap,proto3,oneof" json:"qos_tc_to_queue_map,omitempty"`
	QosTcAndColorToDot1PMap          *uint64                      `protobuf:"varint,46,opt,name=qos_tc_and_color_to_dot1p_map,json=qosTcAndColorToDot1pMap,proto3,oneof" json:"qos_tc_and_color_to_dot1p_map,omitempty"`
	QosTcAndColorToDscpMap           *uint64                      `protobuf:"varint,47,opt,name=qos_tc_and_color_to_dscp_map,json=qosTcAndColorToDscpMap,proto3,oneof" json:"qos_tc_and_color_to_dscp_map,omitempty"`
	QosTcToPriorityGroupMap          *uint64                      `protobuf:"varint,48,opt,name=qos_tc_to_priority_group_map,json=qosTcToPriorityGroupMap,proto3,oneof" json:"qos_tc_to_priority_group_map,omitempty"`
	QosPfcPriorityToPriorityGroupMap *uint64                      `protobuf:"varint,49,opt,name=qos_pfc_priority_to_priority_group_map,json=qosPfcPriorityToPriorityGroupMap,proto3,oneof" json:"qos_pfc_priority_to_priority_group_map,omitempty"`
	QosPfcPriorityToQueueMap         *uint64                      `protobuf:"varint,50,opt,name=qos_pfc_priority_to_queue_map,json=qosPfcPriorityToQueueMap,proto3,oneof" json:"qos_pfc_priority_to_queue_map,omitempty"`
	QosSchedulerProfileId            *uint64                      `protobuf:"varint,51,opt,name=qos_scheduler_profile_id,json=qosSchedulerProfileId,proto3,oneof" json:"qos_scheduler_profile_id,omitempty"`
	QosIngressBufferProfileList      []uint64                     `protobuf:"varint,52,rep,packed,name=qos_ingress_buffer_profile_list,json=qosIngressBufferProfileList,proto3" json:"qos_ingress_buffer_profile_list,omitempty"`
	QosEgressBufferProfileList       []uint64                     `protobuf:"varint,53,rep,packed,name=qos_egress_buffer_profile_list,json=qosEgressBufferProfileList,proto3" json:"qos_egress_buffer_profile_list,omitempty"`
	PriorityFlowControlMode          *PortPriorityFlowControlMode `protobuf:"varint,54,opt,name=priority_flow_control_mode,json=priorityFlowControlMode,proto3,enum=lemming.dataplane.sai.PortPriorityFlowControlMode,oneof" json:"priority_flow_control_mode,omitempty"`
	PriorityFlowControl              *uint32                      `protobuf:"varint,55,opt,name=priority_flow_control,json=priorityFlowControl,proto3,oneof" json:"priority_flow_control,omitempty"`
	PriorityFlowControlRx            *uint32                      `protobuf:"varint,56,opt,name=priority_flow_control_rx,json=priorityFlowControlRx,proto3,oneof" json:"priority_flow_control_rx,omitempty"`
	PriorityFlowControlTx            *uint32                      `protobuf:"varint,57,opt,name=priority_flow_control_tx,json=priorityFlowControlTx,proto3,oneof" json:"priority_flow_control_tx,omitempty"`
	MetaData                         *uint32                      `protobuf:"varint,58,opt,name=meta_data,json=metaData,proto3,oneof" json:"meta_data,omitempty"`
	EgressBlockPortList              []uint64                     `protobuf:"varint,59,rep,packed,name=egress_block_port_list,json=egressBlockPortList,proto3" json:"egress_block_port_list,omitempty"`
	HwProfileId                      *uint64                      `protobuf:"varint,60,opt,name=hw_profile_id,json=hwProfileId,proto3,oneof" json:"hw_profile_id,omitempty"`
	EeeEnable                        *bool                        `protobuf:"varint,61,opt,name=eee_enable,json=eeeEnable,proto3,oneof" json:"eee_enable,omitempty"`
	EeeIdleTime                      *uint32                      `protobuf:"varint,62,opt,name=eee_idle_time,json=eeeIdleTime,proto3,oneof" json:"eee_idle_time,omitempty"`
	EeeWakeTime                      *uint32                      `protobuf:"varint,63,opt,name=eee_wake_time,json=eeeWakeTime,proto3,oneof" json:"eee_wake_time,omitempty"`
	IsolationGroup                   *uint64                      `protobuf:"varint,64,opt,name=isolation_group,json=isolationGroup,proto3,oneof" json:"isolation_group,omitempty"`
	PktTxEnable                      *bool                        `protobuf:"varint,65,opt,name=pkt_tx_enable,json=pktTxEnable,proto3,oneof" json:"pkt_tx_enable,omitempty"`
	TamObject                        []uint64                     `protobuf:"varint,66,rep,packed,name=tam_object,json=tamObject,proto3" json:"tam_object,omitempty"`
	SerdesPreemphasis                []uint32                     `protobuf:"varint,67,rep,packed,name=serdes_preemphasis,json=serdesPreemphasis,proto3" json:"serdes_preemphasis,omitempty"`
	SerdesIdriver                    []uint32                     `protobuf:"varint,68,rep,packed,name=serdes_idriver,json=serdesIdriver,proto3" json:"serdes_idriver,omitempty"`
	SerdesIpredriver                 []uint32                     `protobuf:"varint,69,rep,packed,name=serdes_ipredriver,json=serdesIpredriver,proto3" json:"serdes_ipredriver,omitempty"`
	LinkTrainingEnable               *bool                        `protobuf:"varint,70,opt,name=link_training_enable,json=linkTrainingEnable,proto3,oneof" json:"link_training_enable,omitempty"`
	PtpMode                          *PortPtpMode                 `protobuf:"varint,71,opt,name=ptp_mode,json=ptpMode,proto3,enum=lemming.dataplane.sai.PortPtpMode,oneof" json:"ptp_mode,omitempty"`
	InterfaceType                    *PortInterfaceType           `protobuf:"varint,72,opt,name=interface_type,json=interfaceType,proto3,enum=lemming.dataplane.sai.PortInterfaceType,oneof" json:"interface_type,omitempty"`
	AdvertisedInterfaceType          []PortInterfaceType          `protobuf:"varint,73,rep,packed,name=advertised_interface_type,json=advertisedInterfaceType,proto3,enum=lemming.dataplane.sai.PortInterfaceType" json:"advertised_interface_type,omitempty"`
	PrbsPolynomial                   *uint32                      `protobuf:"varint,74,opt,name=prbs_polynomial,json=prbsPolynomial,proto3,oneof" json:"prbs_polynomial,omitempty"`
	PrbsConfig                       *PortPrbsConfig              `protobuf:"varint,75,opt,name=prbs_config,json=prbsConfig,proto3,enum=lemming.dataplane.sai.PortPrbsConfig,oneof" json:"prbs_config,omitempty"`
	DisableDecrementTtl              *bool                        `protobuf:"varint,76,opt,name=disable_decrement_ttl,json=disableDecrementTtl,proto3,oneof" json:"disable_decrement_ttl,omitempty"`
	QosMplsExpToTcMap                *uint64                      `protobuf:"varint,77,opt,name=qos_mpls_exp_to_tc_map,json=qosMplsExpToTcMap,proto3,oneof" json:"qos_mpls_exp_to_tc_map,omitempty"`
	QosMplsExpToColorMap             *uint64                      `protobuf:"varint,78,opt,name=qos_mpls_exp_to_color_map,json=qosMplsExpToColorMap,proto3,oneof" json:"qos_mpls_exp_to_color_map,omitempty"`
	QosTcAndColorToMplsExpMap        *uint64                      `protobuf:"varint,79,opt,name=qos_tc_and_color_to_mpls_exp_map,json=qosTcAndColorToMplsExpMap,proto3,oneof" json:"qos_tc_and_color_to_mpls_exp_map,omitempty"`
	Tpid                             *uint32                      `protobuf:"varint,80,opt,name=tpid,proto3,oneof" json:"tpid,omitempty"`
	AutoNegFecModeOverride           *bool                        `protobuf:"varint,81,opt,name=auto_neg_fec_mode_override,json=autoNegFecModeOverride,proto3,oneof" json:"auto_neg_fec_mode_override,omitempty"`
	LoopbackMode                     *PortLoopbackMode            `protobuf:"varint,82,opt,name=loopback_mode,json=loopbackMode,proto3,enum=lemming.dataplane.sai.PortLoopbackMode,oneof" json:"loopback_mode,omitempty"`
	MdixModeConfig                   *PortMdixModeConfig          `protobuf:"varint,83,opt,name=mdix_mode_config,json=mdixModeConfig,proto3,enum=lemming.dataplane.sai.PortMdixModeConfig,oneof" json:"mdix_mode_config,omitempty"`
	AutoNegConfigMode                *PortAutoNegConfigMode       `protobuf:"varint,84,opt,name=auto_neg_config_mode,json=autoNegConfigMode,proto3,enum=lemming.dataplane.sai.PortAutoNegConfigMode,oneof" json:"auto_neg_config_mode,omitempty"`
	X1000XSgmiiSlaveAutodetect       *bool                        `protobuf:"varint,85,opt,name=_1000x_sgmii_slave_autodetect,json=1000xSgmiiSlaveAutodetect,proto3,oneof" json:"_1000x_sgmii_slave_autodetect,omitempty"`
	ModuleType                       *PortModuleType              `protobuf:"varint,86,opt,name=module_type,json=moduleType,proto3,enum=lemming.dataplane.sai.PortModuleType,oneof" json:"module_type,omitempty"`
	DualMedia                        *PortDualMedia               `protobuf:"varint,87,opt,name=dual_media,json=dualMedia,proto3,enum=lemming.dataplane.sai.PortDualMedia,oneof" json:"dual_media,omitempty"`
	Ipg                              *uint32                      `protobuf:"varint,88,opt,name=ipg,proto3,oneof" json:"ipg,omitempty"`
	GlobalFlowControlForward         *bool                        `protobuf:"varint,89,opt,name=global_flow_control_forward,json=globalFlowControlForward,proto3,oneof" json:"global_flow_control_forward,omitempty"`
	PriorityFlowControlForward       *bool                        `protobuf:"varint,90,opt,name=priority_flow_control_forward,json=priorityFlowControlForward,proto3,oneof" json:"priority_flow_control_forward,omitempty"`
	QosDscpToForwardingClassMap      *uint64                      `protobuf:"varint,91,opt,name=qos_dscp_to_forwarding_class_map,json=qosDscpToForwardingClassMap,proto3,oneof" json:"qos_dscp_to_forwarding_class_map,omitempty"`
	QosMplsExpToForwardingClassMap   *uint64                      `protobuf:"varint,92,opt,name=qos_mpls_exp_to_forwarding_class_map,json=qosMplsExpToForwardingClassMap,proto3,oneof" json:"qos_mpls_exp_to_forwarding_class_map,omitempty"`
}

func (x *SetPortAttributeRequest) Reset() {
	*x = SetPortAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPortAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPortAttributeRequest) ProtoMessage() {}

func (x *SetPortAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPortAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetPortAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{4}
}

func (x *SetPortAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetPortAttributeRequest) GetSpeed() uint32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *SetPortAttributeRequest) GetAutoNegMode() bool {
	if x != nil && x.AutoNegMode != nil {
		return *x.AutoNegMode
	}
	return false
}

func (x *SetPortAttributeRequest) GetAdminState() bool {
	if x != nil && x.AdminState != nil {
		return *x.AdminState
	}
	return false
}

func (x *SetPortAttributeRequest) GetMediaType() PortMediaType {
	if x != nil && x.MediaType != nil {
		return *x.MediaType
	}
	return PortMediaType_PORT_MEDIA_TYPE_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetAdvertisedSpeed() []uint32 {
	if x != nil {
		return x.AdvertisedSpeed
	}
	return nil
}

func (x *SetPortAttributeRequest) GetAdvertisedFecMode() []PortFecMode {
	if x != nil {
		return x.AdvertisedFecMode
	}
	return nil
}

func (x *SetPortAttributeRequest) GetAdvertisedFecModeExtended() []PortFecModeExtended {
	if x != nil {
		return x.AdvertisedFecModeExtended
	}
	return nil
}

func (x *SetPortAttributeRequest) GetAdvertisedHalfDuplexSpeed() []uint32 {
	if x != nil {
		return x.AdvertisedHalfDuplexSpeed
	}
	return nil
}

func (x *SetPortAttributeRequest) GetAdvertisedAutoNegMode() bool {
	if x != nil && x.AdvertisedAutoNegMode != nil {
		return *x.AdvertisedAutoNegMode
	}
	return false
}

func (x *SetPortAttributeRequest) GetAdvertisedFlowControlMode() PortFlowControlMode {
	if x != nil && x.AdvertisedFlowControlMode != nil {
		return *x.AdvertisedFlowControlMode
	}
	return PortFlowControlMode_PORT_FLOW_CONTROL_MODE_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetAdvertisedAsymmetricPauseMode() bool {
	if x != nil && x.AdvertisedAsymmetricPauseMode != nil {
		return *x.AdvertisedAsymmetricPauseMode
	}
	return false
}

func (x *SetPortAttributeRequest) GetAdvertisedMediaType() PortMediaType {
	if x != nil && x.AdvertisedMediaType != nil {
		return *x.AdvertisedMediaType
	}
	return PortMediaType_PORT_MEDIA_TYPE_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetAdvertisedOuiCode() uint32 {
	if x != nil && x.AdvertisedOuiCode != nil {
		return *x.AdvertisedOuiCode
	}
	return 0
}

func (x *SetPortAttributeRequest) GetPortVlanId() uint32 {
	if x != nil && x.PortVlanId != nil {
		return *x.PortVlanId
	}
	return 0
}

func (x *SetPortAttributeRequest) GetDefaultVlanPriority() uint32 {
	if x != nil && x.DefaultVlanPriority != nil {
		return *x.DefaultVlanPriority
	}
	return 0
}

func (x *SetPortAttributeRequest) GetDropUntagged() bool {
	if x != nil && x.DropUntagged != nil {
		return *x.DropUntagged
	}
	return false
}

func (x *SetPortAttributeRequest) GetDropTagged() bool {
	if x != nil && x.DropTagged != nil {
		return *x.DropTagged
	}
	return false
}

func (x *SetPortAttributeRequest) GetInternalLoopbackMode() PortInternalLoopbackMode {
	if x != nil && x.InternalLoopbackMode != nil {
		return *x.InternalLoopbackMode
	}
	return PortInternalLoopbackMode_PORT_INTERNAL_LOOPBACK_MODE_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetUseExtendedFec() bool {
	if x != nil && x.UseExtendedFec != nil {
		return *x.UseExtendedFec
	}
	return false
}

func (x *SetPortAttributeRequest) GetFecMode() PortFecMode {
	if x != nil && x.FecMode != nil {
		return *x.FecMode
	}
	return PortFecMode_PORT_FEC_MODE_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetFecModeExtended() PortFecModeExtended {
	if x != nil && x.FecModeExtended != nil {
		return *x.FecModeExtended
	}
	return PortFecModeExtended_PORT_FEC_MODE_EXTENDED_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetUpdateDscp() bool {
	if x != nil && x.UpdateDscp != nil {
		return *x.UpdateDscp
	}
	return false
}

func (x *SetPortAttributeRequest) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

func (x *SetPortAttributeRequest) GetFloodStormControlPolicerId() uint64 {
	if x != nil && x.FloodStormControlPolicerId != nil {
		return *x.FloodStormControlPolicerId
	}
	return 0
}

func (x *SetPortAttributeRequest) GetBroadcastStormControlPolicerId() uint64 {
	if x != nil && x.BroadcastStormControlPolicerId != nil {
		return *x.BroadcastStormControlPolicerId
	}
	return 0
}

func (x *SetPortAttributeRequest) GetMulticastStormControlPolicerId() uint64 {
	if x != nil && x.MulticastStormControlPolicerId != nil {
		return *x.MulticastStormControlPolicerId
	}
	return 0
}

func (x *SetPortAttributeRequest) GetGlobalFlowControlMode() PortFlowControlMode {
	if x != nil && x.GlobalFlowControlMode != nil {
		return *x.GlobalFlowControlMode
	}
	return PortFlowControlMode_PORT_FLOW_CONTROL_MODE_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetIngressAcl() uint64 {
	if x != nil && x.IngressAcl != nil {
		return *x.IngressAcl
	}
	return 0
}

func (x *SetPortAttributeRequest) GetEgressAcl() uint64 {
	if x != nil && x.EgressAcl != nil {
		return *x.EgressAcl
	}
	return 0
}

func (x *SetPortAttributeRequest) GetIngressMacsecAcl() uint64 {
	if x != nil && x.IngressMacsecAcl != nil {
		return *x.IngressMacsecAcl
	}
	return 0
}

func (x *SetPortAttributeRequest) GetEgressMacsecAcl() uint64 {
	if x != nil && x.EgressMacsecAcl != nil {
		return *x.EgressMacsecAcl
	}
	return 0
}

func (x *SetPortAttributeRequest) GetIngressMirrorSession() []uint64 {
	if x != nil {
		return x.IngressMirrorSession
	}
	return nil
}

func (x *SetPortAttributeRequest) GetEgressMirrorSession() []uint64 {
	if x != nil {
		return x.EgressMirrorSession
	}
	return nil
}

func (x *SetPortAttributeRequest) GetIngressSamplepacketEnable() uint64 {
	if x != nil && x.IngressSamplepacketEnable != nil {
		return *x.IngressSamplepacketEnable
	}
	return 0
}

func (x *SetPortAttributeRequest) GetEgressSamplepacketEnable() uint64 {
	if x != nil && x.EgressSamplepacketEnable != nil {
		return *x.EgressSamplepacketEnable
	}
	return 0
}

func (x *SetPortAttributeRequest) GetIngressSampleMirrorSession() []uint64 {
	if x != nil {
		return x.IngressSampleMirrorSession
	}
	return nil
}

func (x *SetPortAttributeRequest) GetEgressSampleMirrorSession() []uint64 {
	if x != nil {
		return x.EgressSampleMirrorSession
	}
	return nil
}

func (x *SetPortAttributeRequest) GetPolicerId() uint64 {
	if x != nil && x.PolicerId != nil {
		return *x.PolicerId
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosDefaultTc() uint32 {
	if x != nil && x.QosDefaultTc != nil {
		return *x.QosDefaultTc
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosDot1PToTcMap() uint64 {
	if x != nil && x.QosDot1PToTcMap != nil {
		return *x.QosDot1PToTcMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosDot1PToColorMap() uint64 {
	if x != nil && x.QosDot1PToColorMap != nil {
		return *x.QosDot1PToColorMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosDscpToTcMap() uint64 {
	if x != nil && x.QosDscpToTcMap != nil {
		return *x.QosDscpToTcMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosDscpToColorMap() uint64 {
	if x != nil && x.QosDscpToColorMap != nil {
		return *x.QosDscpToColorMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosTcToQueueMap() uint64 {
	if x != nil && x.QosTcToQueueMap != nil {
		return *x.QosTcToQueueMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosTcAndColorToDot1PMap() uint64 {
	if x != nil && x.QosTcAndColorToDot1PMap != nil {
		return *x.QosTcAndColorToDot1PMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosTcAndColorToDscpMap() uint64 {
	if x != nil && x.QosTcAndColorToDscpMap != nil {
		return *x.QosTcAndColorToDscpMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosTcToPriorityGroupMap() uint64 {
	if x != nil && x.QosTcToPriorityGroupMap != nil {
		return *x.QosTcToPriorityGroupMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosPfcPriorityToPriorityGroupMap() uint64 {
	if x != nil && x.QosPfcPriorityToPriorityGroupMap != nil {
		return *x.QosPfcPriorityToPriorityGroupMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosPfcPriorityToQueueMap() uint64 {
	if x != nil && x.QosPfcPriorityToQueueMap != nil {
		return *x.QosPfcPriorityToQueueMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosSchedulerProfileId() uint64 {
	if x != nil && x.QosSchedulerProfileId != nil {
		return *x.QosSchedulerProfileId
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosIngressBufferProfileList() []uint64 {
	if x != nil {
		return x.QosIngressBufferProfileList
	}
	return nil
}

func (x *SetPortAttributeRequest) GetQosEgressBufferProfileList() []uint64 {
	if x != nil {
		return x.QosEgressBufferProfileList
	}
	return nil
}

func (x *SetPortAttributeRequest) GetPriorityFlowControlMode() PortPriorityFlowControlMode {
	if x != nil && x.PriorityFlowControlMode != nil {
		return *x.PriorityFlowControlMode
	}
	return PortPriorityFlowControlMode_PORT_PRIORITY_FLOW_CONTROL_MODE_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetPriorityFlowControl() uint32 {
	if x != nil && x.PriorityFlowControl != nil {
		return *x.PriorityFlowControl
	}
	return 0
}

func (x *SetPortAttributeRequest) GetPriorityFlowControlRx() uint32 {
	if x != nil && x.PriorityFlowControlRx != nil {
		return *x.PriorityFlowControlRx
	}
	return 0
}

func (x *SetPortAttributeRequest) GetPriorityFlowControlTx() uint32 {
	if x != nil && x.PriorityFlowControlTx != nil {
		return *x.PriorityFlowControlTx
	}
	return 0
}

func (x *SetPortAttributeRequest) GetMetaData() uint32 {
	if x != nil && x.MetaData != nil {
		return *x.MetaData
	}
	return 0
}

func (x *SetPortAttributeRequest) GetEgressBlockPortList() []uint64 {
	if x != nil {
		return x.EgressBlockPortList
	}
	return nil
}

func (x *SetPortAttributeRequest) GetHwProfileId() uint64 {
	if x != nil && x.HwProfileId != nil {
		return *x.HwProfileId
	}
	return 0
}

func (x *SetPortAttributeRequest) GetEeeEnable() bool {
	if x != nil && x.EeeEnable != nil {
		return *x.EeeEnable
	}
	return false
}

func (x *SetPortAttributeRequest) GetEeeIdleTime() uint32 {
	if x != nil && x.EeeIdleTime != nil {
		return *x.EeeIdleTime
	}
	return 0
}

func (x *SetPortAttributeRequest) GetEeeWakeTime() uint32 {
	if x != nil && x.EeeWakeTime != nil {
		return *x.EeeWakeTime
	}
	return 0
}

func (x *SetPortAttributeRequest) GetIsolationGroup() uint64 {
	if x != nil && x.IsolationGroup != nil {
		return *x.IsolationGroup
	}
	return 0
}

func (x *SetPortAttributeRequest) GetPktTxEnable() bool {
	if x != nil && x.PktTxEnable != nil {
		return *x.PktTxEnable
	}
	return false
}

func (x *SetPortAttributeRequest) GetTamObject() []uint64 {
	if x != nil {
		return x.TamObject
	}
	return nil
}

func (x *SetPortAttributeRequest) GetSerdesPreemphasis() []uint32 {
	if x != nil {
		return x.SerdesPreemphasis
	}
	return nil
}

func (x *SetPortAttributeRequest) GetSerdesIdriver() []uint32 {
	if x != nil {
		return x.SerdesIdriver
	}
	return nil
}

func (x *SetPortAttributeRequest) GetSerdesIpredriver() []uint32 {
	if x != nil {
		return x.SerdesIpredriver
	}
	return nil
}

func (x *SetPortAttributeRequest) GetLinkTrainingEnable() bool {
	if x != nil && x.LinkTrainingEnable != nil {
		return *x.LinkTrainingEnable
	}
	return false
}

func (x *SetPortAttributeRequest) GetPtpMode() PortPtpMode {
	if x != nil && x.PtpMode != nil {
		return *x.PtpMode
	}
	return PortPtpMode_PORT_PTP_MODE_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetInterfaceType() PortInterfaceType {
	if x != nil && x.InterfaceType != nil {
		return *x.InterfaceType
	}
	return PortInterfaceType_PORT_INTERFACE_TYPE_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetAdvertisedInterfaceType() []PortInterfaceType {
	if x != nil {
		return x.AdvertisedInterfaceType
	}
	return nil
}

func (x *SetPortAttributeRequest) GetPrbsPolynomial() uint32 {
	if x != nil && x.PrbsPolynomial != nil {
		return *x.PrbsPolynomial
	}
	return 0
}

func (x *SetPortAttributeRequest) GetPrbsConfig() PortPrbsConfig {
	if x != nil && x.PrbsConfig != nil {
		return *x.PrbsConfig
	}
	return PortPrbsConfig_PORT_PRBS_CONFIG_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetDisableDecrementTtl() bool {
	if x != nil && x.DisableDecrementTtl != nil {
		return *x.DisableDecrementTtl
	}
	return false
}

func (x *SetPortAttributeRequest) GetQosMplsExpToTcMap() uint64 {
	if x != nil && x.QosMplsExpToTcMap != nil {
		return *x.QosMplsExpToTcMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosMplsExpToColorMap() uint64 {
	if x != nil && x.QosMplsExpToColorMap != nil {
		return *x.QosMplsExpToColorMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosTcAndColorToMplsExpMap() uint64 {
	if x != nil && x.QosTcAndColorToMplsExpMap != nil {
		return *x.QosTcAndColorToMplsExpMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetTpid() uint32 {
	if x != nil && x.Tpid != nil {
		return *x.Tpid
	}
	return 0
}

func (x *SetPortAttributeRequest) GetAutoNegFecModeOverride() bool {
	if x != nil && x.AutoNegFecModeOverride != nil {
		return *x.AutoNegFecModeOverride
	}
	return false
}

func (x *SetPortAttributeRequest) GetLoopbackMode() PortLoopbackMode {
	if x != nil && x.LoopbackMode != nil {
		return *x.LoopbackMode
	}
	return PortLoopbackMode_PORT_LOOPBACK_MODE_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetMdixModeConfig() PortMdixModeConfig {
	if x != nil && x.MdixModeConfig != nil {
		return *x.MdixModeConfig
	}
	return PortMdixModeConfig_PORT_MDIX_MODE_CONFIG_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetAutoNegConfigMode() PortAutoNegConfigMode {
	if x != nil && x.AutoNegConfigMode != nil {
		return *x.AutoNegConfigMode
	}
	return PortAutoNegConfigMode_PORT_AUTO_NEG_CONFIG_MODE_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetX1000XSgmiiSlaveAutodetect() bool {
	if x != nil && x.X1000XSgmiiSlaveAutodetect != nil {
		return *x.X1000XSgmiiSlaveAutodetect
	}
	return false
}

func (x *SetPortAttributeRequest) GetModuleType() PortModuleType {
	if x != nil && x.ModuleType != nil {
		return *x.ModuleType
	}
	return PortModuleType_PORT_MODULE_TYPE_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetDualMedia() PortDualMedia {
	if x != nil && x.DualMedia != nil {
		return *x.DualMedia
	}
	return PortDualMedia_PORT_DUAL_MEDIA_UNSPECIFIED
}

func (x *SetPortAttributeRequest) GetIpg() uint32 {
	if x != nil && x.Ipg != nil {
		return *x.Ipg
	}
	return 0
}

func (x *SetPortAttributeRequest) GetGlobalFlowControlForward() bool {
	if x != nil && x.GlobalFlowControlForward != nil {
		return *x.GlobalFlowControlForward
	}
	return false
}

func (x *SetPortAttributeRequest) GetPriorityFlowControlForward() bool {
	if x != nil && x.PriorityFlowControlForward != nil {
		return *x.PriorityFlowControlForward
	}
	return false
}

func (x *SetPortAttributeRequest) GetQosDscpToForwardingClassMap() uint64 {
	if x != nil && x.QosDscpToForwardingClassMap != nil {
		return *x.QosDscpToForwardingClassMap
	}
	return 0
}

func (x *SetPortAttributeRequest) GetQosMplsExpToForwardingClassMap() uint64 {
	if x != nil && x.QosMplsExpToForwardingClassMap != nil {
		return *x.QosMplsExpToForwardingClassMap
	}
	return 0
}

type SetPortAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPortAttributeResponse) Reset() {
	*x = SetPortAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPortAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPortAttributeResponse) ProtoMessage() {}

func (x *SetPortAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPortAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetPortAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{5}
}

type GetPortAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []PortAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.PortAttr" json:"attr_type,omitempty"`
}

func (x *GetPortAttributeRequest) Reset() {
	*x = GetPortAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortAttributeRequest) ProtoMessage() {}

func (x *GetPortAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetPortAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{6}
}

func (x *GetPortAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetPortAttributeRequest) GetAttrType() []PortAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetPortAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *PortAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetPortAttributeResponse) Reset() {
	*x = GetPortAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortAttributeResponse) ProtoMessage() {}

func (x *GetPortAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetPortAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{7}
}

func (x *GetPortAttributeResponse) GetAttr() *PortAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreatePortPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch           uint64  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	PortId           *uint64 `protobuf:"varint,2,opt,name=port_id,json=portId,proto3,oneof" json:"port_id,omitempty"`
	BufferPoolId     *uint64 `protobuf:"varint,3,opt,name=buffer_pool_id,json=bufferPoolId,proto3,oneof" json:"buffer_pool_id,omitempty"`
	QosWredProfileId *uint64 `protobuf:"varint,4,opt,name=qos_wred_profile_id,json=qosWredProfileId,proto3,oneof" json:"qos_wred_profile_id,omitempty"`
}

func (x *CreatePortPoolRequest) Reset() {
	*x = CreatePortPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortPoolRequest) ProtoMessage() {}

func (x *CreatePortPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortPoolRequest.ProtoReflect.Descriptor instead.
func (*CreatePortPoolRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{8}
}

func (x *CreatePortPoolRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreatePortPoolRequest) GetPortId() uint64 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

func (x *CreatePortPoolRequest) GetBufferPoolId() uint64 {
	if x != nil && x.BufferPoolId != nil {
		return *x.BufferPoolId
	}
	return 0
}

func (x *CreatePortPoolRequest) GetQosWredProfileId() uint64 {
	if x != nil && x.QosWredProfileId != nil {
		return *x.QosWredProfileId
	}
	return 0
}

type CreatePortPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreatePortPoolResponse) Reset() {
	*x = CreatePortPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortPoolResponse) ProtoMessage() {}

func (x *CreatePortPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortPoolResponse.ProtoReflect.Descriptor instead.
func (*CreatePortPoolResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{9}
}

func (x *CreatePortPoolResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemovePortPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemovePortPoolRequest) Reset() {
	*x = RemovePortPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortPoolRequest) ProtoMessage() {}

func (x *RemovePortPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortPoolRequest.ProtoReflect.Descriptor instead.
func (*RemovePortPoolRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{10}
}

func (x *RemovePortPoolRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemovePortPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovePortPoolResponse) Reset() {
	*x = RemovePortPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortPoolResponse) ProtoMessage() {}

func (x *RemovePortPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortPoolResponse.ProtoReflect.Descriptor instead.
func (*RemovePortPoolResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{11}
}

type SetPortPoolAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid              uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	QosWredProfileId *uint64 `protobuf:"varint,2,opt,name=qos_wred_profile_id,json=qosWredProfileId,proto3,oneof" json:"qos_wred_profile_id,omitempty"`
}

func (x *SetPortPoolAttributeRequest) Reset() {
	*x = SetPortPoolAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPortPoolAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPortPoolAttributeRequest) ProtoMessage() {}

func (x *SetPortPoolAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPortPoolAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetPortPoolAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{12}
}

func (x *SetPortPoolAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetPortPoolAttributeRequest) GetQosWredProfileId() uint64 {
	if x != nil && x.QosWredProfileId != nil {
		return *x.QosWredProfileId
	}
	return 0
}

type SetPortPoolAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPortPoolAttributeResponse) Reset() {
	*x = SetPortPoolAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPortPoolAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPortPoolAttributeResponse) ProtoMessage() {}

func (x *SetPortPoolAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPortPoolAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetPortPoolAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{13}
}

type GetPortPoolAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64         `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []PortPoolAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.PortPoolAttr" json:"attr_type,omitempty"`
}

func (x *GetPortPoolAttributeRequest) Reset() {
	*x = GetPortPoolAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortPoolAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortPoolAttributeRequest) ProtoMessage() {}

func (x *GetPortPoolAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortPoolAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetPortPoolAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{14}
}

func (x *GetPortPoolAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetPortPoolAttributeRequest) GetAttrType() []PortPoolAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetPortPoolAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *PortPoolAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetPortPoolAttributeResponse) Reset() {
	*x = GetPortPoolAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortPoolAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortPoolAttributeResponse) ProtoMessage() {}

func (x *GetPortPoolAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortPoolAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetPortPoolAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{15}
}

func (x *GetPortPoolAttributeResponse) GetAttr() *PortPoolAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreatePortConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                   uint64                     `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	SystemSidePortId         *uint64                    `protobuf:"varint,2,opt,name=system_side_port_id,json=systemSidePortId,proto3,oneof" json:"system_side_port_id,omitempty"`
	LineSidePortId           *uint64                    `protobuf:"varint,3,opt,name=line_side_port_id,json=lineSidePortId,proto3,oneof" json:"line_side_port_id,omitempty"`
	SystemSideFailoverPortId *uint64                    `protobuf:"varint,4,opt,name=system_side_failover_port_id,json=systemSideFailoverPortId,proto3,oneof" json:"system_side_failover_port_id,omitempty"`
	LineSideFailoverPortId   *uint64                    `protobuf:"varint,5,opt,name=line_side_failover_port_id,json=lineSideFailoverPortId,proto3,oneof" json:"line_side_failover_port_id,omitempty"`
	FailoverMode             *PortConnectorFailoverMode `protobuf:"varint,6,opt,name=failover_mode,json=failoverMode,proto3,enum=lemming.dataplane.sai.PortConnectorFailoverMode,oneof" json:"failover_mode,omitempty"`
}

func (x *CreatePortConnectorRequest) Reset() {
	*x = CreatePortConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortConnectorRequest) ProtoMessage() {}

func (x *CreatePortConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortConnectorRequest.ProtoReflect.Descriptor instead.
func (*CreatePortConnectorRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{16}
}

func (x *CreatePortConnectorRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreatePortConnectorRequest) GetSystemSidePortId() uint64 {
	if x != nil && x.SystemSidePortId != nil {
		return *x.SystemSidePortId
	}
	return 0
}

func (x *CreatePortConnectorRequest) GetLineSidePortId() uint64 {
	if x != nil && x.LineSidePortId != nil {
		return *x.LineSidePortId
	}
	return 0
}

func (x *CreatePortConnectorRequest) GetSystemSideFailoverPortId() uint64 {
	if x != nil && x.SystemSideFailoverPortId != nil {
		return *x.SystemSideFailoverPortId
	}
	return 0
}

func (x *CreatePortConnectorRequest) GetLineSideFailoverPortId() uint64 {
	if x != nil && x.LineSideFailoverPortId != nil {
		return *x.LineSideFailoverPortId
	}
	return 0
}

func (x *CreatePortConnectorRequest) GetFailoverMode() PortConnectorFailoverMode {
	if x != nil && x.FailoverMode != nil {
		return *x.FailoverMode
	}
	return PortConnectorFailoverMode_PORT_CONNECTOR_FAILOVER_MODE_UNSPECIFIED
}

type CreatePortConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreatePortConnectorResponse) Reset() {
	*x = CreatePortConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortConnectorResponse) ProtoMessage() {}

func (x *CreatePortConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortConnectorResponse.ProtoReflect.Descriptor instead.
func (*CreatePortConnectorResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{17}
}

func (x *CreatePortConnectorResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemovePortConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemovePortConnectorRequest) Reset() {
	*x = RemovePortConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortConnectorRequest) ProtoMessage() {}

func (x *RemovePortConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortConnectorRequest.ProtoReflect.Descriptor instead.
func (*RemovePortConnectorRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{18}
}

func (x *RemovePortConnectorRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemovePortConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovePortConnectorResponse) Reset() {
	*x = RemovePortConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortConnectorResponse) ProtoMessage() {}

func (x *RemovePortConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortConnectorResponse.ProtoReflect.Descriptor instead.
func (*RemovePortConnectorResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{19}
}

type SetPortConnectorAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid          uint64                     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	FailoverMode *PortConnectorFailoverMode `protobuf:"varint,2,opt,name=failover_mode,json=failoverMode,proto3,enum=lemming.dataplane.sai.PortConnectorFailoverMode,oneof" json:"failover_mode,omitempty"`
}

func (x *SetPortConnectorAttributeRequest) Reset() {
	*x = SetPortConnectorAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPortConnectorAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPortConnectorAttributeRequest) ProtoMessage() {}

func (x *SetPortConnectorAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPortConnectorAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetPortConnectorAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{20}
}

func (x *SetPortConnectorAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetPortConnectorAttributeRequest) GetFailoverMode() PortConnectorFailoverMode {
	if x != nil && x.FailoverMode != nil {
		return *x.FailoverMode
	}
	return PortConnectorFailoverMode_PORT_CONNECTOR_FAILOVER_MODE_UNSPECIFIED
}

type SetPortConnectorAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPortConnectorAttributeResponse) Reset() {
	*x = SetPortConnectorAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPortConnectorAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPortConnectorAttributeResponse) ProtoMessage() {}

func (x *SetPortConnectorAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPortConnectorAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetPortConnectorAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{21}
}

type GetPortConnectorAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64              `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []PortConnectorAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.PortConnectorAttr" json:"attr_type,omitempty"`
}

func (x *GetPortConnectorAttributeRequest) Reset() {
	*x = GetPortConnectorAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortConnectorAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortConnectorAttributeRequest) ProtoMessage() {}

func (x *GetPortConnectorAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortConnectorAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetPortConnectorAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{22}
}

func (x *GetPortConnectorAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetPortConnectorAttributeRequest) GetAttrType() []PortConnectorAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetPortConnectorAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *PortConnectorAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetPortConnectorAttributeResponse) Reset() {
	*x = GetPortConnectorAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortConnectorAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortConnectorAttributeResponse) ProtoMessage() {}

func (x *GetPortConnectorAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortConnectorAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetPortConnectorAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{23}
}

func (x *GetPortConnectorAttributeResponse) GetAttr() *PortConnectorAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreatePortSerdesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch      uint64  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	PortId      *uint64 `protobuf:"varint,2,opt,name=port_id,json=portId,proto3,oneof" json:"port_id,omitempty"`
	Preemphasis []int32 `protobuf:"varint,3,rep,packed,name=preemphasis,proto3" json:"preemphasis,omitempty"`
	Idriver     []int32 `protobuf:"varint,4,rep,packed,name=idriver,proto3" json:"idriver,omitempty"`
	Ipredriver  []int32 `protobuf:"varint,5,rep,packed,name=ipredriver,proto3" json:"ipredriver,omitempty"`
	TxFirPre1   []int32 `protobuf:"varint,6,rep,packed,name=tx_fir_pre1,json=txFirPre1,proto3" json:"tx_fir_pre1,omitempty"`
	TxFirPre2   []int32 `protobuf:"varint,7,rep,packed,name=tx_fir_pre2,json=txFirPre2,proto3" json:"tx_fir_pre2,omitempty"`
	TxFirPre3   []int32 `protobuf:"varint,8,rep,packed,name=tx_fir_pre3,json=txFirPre3,proto3" json:"tx_fir_pre3,omitempty"`
	TxFirMain   []int32 `protobuf:"varint,9,rep,packed,name=tx_fir_main,json=txFirMain,proto3" json:"tx_fir_main,omitempty"`
	TxFirPost1  []int32 `protobuf:"varint,10,rep,packed,name=tx_fir_post1,json=txFirPost1,proto3" json:"tx_fir_post1,omitempty"`
	TxFirPost2  []int32 `protobuf:"varint,11,rep,packed,name=tx_fir_post2,json=txFirPost2,proto3" json:"tx_fir_post2,omitempty"`
	TxFirPost3  []int32 `protobuf:"varint,12,rep,packed,name=tx_fir_post3,json=txFirPost3,proto3" json:"tx_fir_post3,omitempty"`
	TxFirAttn   []int32 `protobuf:"varint,13,rep,packed,name=tx_fir_attn,json=txFirAttn,proto3" json:"tx_fir_attn,omitempty"`
}

func (x *CreatePortSerdesRequest) Reset() {
	*x = CreatePortSerdesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortSerdesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortSerdesRequest) ProtoMessage() {}

func (x *CreatePortSerdesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortSerdesRequest.ProtoReflect.Descriptor instead.
func (*CreatePortSerdesRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{24}
}

func (x *CreatePortSerdesRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreatePortSerdesRequest) GetPortId() uint64 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

func (x *CreatePortSerdesRequest) GetPreemphasis() []int32 {
	if x != nil {
		return x.Preemphasis
	}
	return nil
}

func (x *CreatePortSerdesRequest) GetIdriver() []int32 {
	if x != nil {
		return x.Idriver
	}
	return nil
}

func (x *CreatePortSerdesRequest) GetIpredriver() []int32 {
	if x != nil {
		return x.Ipredriver
	}
	return nil
}

func (x *CreatePortSerdesRequest) GetTxFirPre1() []int32 {
	if x != nil {
		return x.TxFirPre1
	}
	return nil
}

func (x *CreatePortSerdesRequest) GetTxFirPre2() []int32 {
	if x != nil {
		return x.TxFirPre2
	}
	return nil
}

func (x *CreatePortSerdesRequest) GetTxFirPre3() []int32 {
	if x != nil {
		return x.TxFirPre3
	}
	return nil
}

func (x *CreatePortSerdesRequest) GetTxFirMain() []int32 {
	if x != nil {
		return x.TxFirMain
	}
	return nil
}

func (x *CreatePortSerdesRequest) GetTxFirPost1() []int32 {
	if x != nil {
		return x.TxFirPost1
	}
	return nil
}

func (x *CreatePortSerdesRequest) GetTxFirPost2() []int32 {
	if x != nil {
		return x.TxFirPost2
	}
	return nil
}

func (x *CreatePortSerdesRequest) GetTxFirPost3() []int32 {
	if x != nil {
		return x.TxFirPost3
	}
	return nil
}

func (x *CreatePortSerdesRequest) GetTxFirAttn() []int32 {
	if x != nil {
		return x.TxFirAttn
	}
	return nil
}

type CreatePortSerdesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreatePortSerdesResponse) Reset() {
	*x = CreatePortSerdesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePortSerdesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePortSerdesResponse) ProtoMessage() {}

func (x *CreatePortSerdesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePortSerdesResponse.ProtoReflect.Descriptor instead.
func (*CreatePortSerdesResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{25}
}

func (x *CreatePortSerdesResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemovePortSerdesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemovePortSerdesRequest) Reset() {
	*x = RemovePortSerdesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortSerdesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortSerdesRequest) ProtoMessage() {}

func (x *RemovePortSerdesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortSerdesRequest.ProtoReflect.Descriptor instead.
func (*RemovePortSerdesRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{26}
}

func (x *RemovePortSerdesRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemovePortSerdesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovePortSerdesResponse) Reset() {
	*x = RemovePortSerdesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePortSerdesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePortSerdesResponse) ProtoMessage() {}

func (x *RemovePortSerdesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePortSerdesResponse.ProtoReflect.Descriptor instead.
func (*RemovePortSerdesResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{27}
}

type GetPortSerdesAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64           `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []PortSerdesAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.PortSerdesAttr" json:"attr_type,omitempty"`
}

func (x *GetPortSerdesAttributeRequest) Reset() {
	*x = GetPortSerdesAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortSerdesAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortSerdesAttributeRequest) ProtoMessage() {}

func (x *GetPortSerdesAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortSerdesAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetPortSerdesAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{28}
}

func (x *GetPortSerdesAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetPortSerdesAttributeRequest) GetAttrType() []PortSerdesAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetPortSerdesAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *PortSerdesAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetPortSerdesAttributeResponse) Reset() {
	*x = GetPortSerdesAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_port_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortSerdesAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortSerdesAttributeResponse) ProtoMessage() {}

func (x *GetPortSerdesAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_port_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortSerdesAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetPortSerdesAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_port_proto_rawDescGZIP(), []int{29}
}

func (x *GetPortSerdesAttributeResponse) GetAttr() *PortSerdesAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_standalone_proto_port_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_port_proto_rawDesc = []byte{
	0x0a, 0x25, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x27,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x40, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0c, 0x68, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x1f, 0x52, 0x0a, 0x68, 0x77, 0x4c, 0x61, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x20, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x21, 0x48, 0x01,
	0x52, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x22,
	0x48, 0x02, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x23, 0x48, 0x03, 0x52,
	0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e,
	0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x24, 0x48, 0x04,
	0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x25, 0x52, 0x0f,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x58, 0x0a, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x65,
	0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x26, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x64, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x71, 0x0a, 0x1c, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x27, 0x52, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x46, 0x65, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1c,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f,
	0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x28, 0x52, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x18, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x29, 0x48, 0x05, 0x52, 0x15, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x1c, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x2a, 0x48,
	0x06, 0x52, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x52, 0x0a, 0x20, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x2b, 0x48,
	0x07, 0x52, 0x1d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x41, 0x73, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x2c, 0x48, 0x08,
	0x52, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x13, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x69, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x2d, 0x48, 0x09, 0x52, 0x11, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4f, 0x75, 0x69, 0x43, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x2e, 0x48,
	0x0a, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x2f, 0x48, 0x0b, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x30, 0x48, 0x0c, 0x52, 0x0c,
	0x64, 0x72, 0x6f, 0x70, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x31, 0x48, 0x0d, 0x52, 0x0a, 0x64, 0x72,
	0x6f, 0x70, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x70, 0x0a, 0x16, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x32, 0x48, 0x0e, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x65,
	0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x33, 0x48, 0x0f, 0x52,
	0x0e, 0x75, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x48, 0x0a, 0x08, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x34, 0x48, 0x10,
	0x52, 0x07, 0x66, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x11,
	0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x35, 0x48, 0x11, 0x52, 0x0f, 0x66, 0x65, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x36, 0x48, 0x12, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x73, 0x63, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03, 0x6d,
	0x74, 0x75, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x37, 0x48, 0x13,
	0x52, 0x03, 0x6d, 0x74, 0x75, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x1e, 0x66, 0x6c, 0x6f, 0x6f,
	0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x38, 0x48, 0x14, 0x52, 0x1a, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x53,
	0x74, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x22, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x39, 0x48, 0x15, 0x52, 0x1e, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x55,
	0x0a, 0x22, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x3a,
	0x48, 0x16, 0x52, 0x1e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x6e, 0x0a, 0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x3b, 0x48, 0x17, 0x52, 0x15, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x61, 0x63, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x3c,
	0x48, 0x18, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x3d, 0x48, 0x19, 0x52, 0x09, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x12, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x61, 0x63,
	0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x3e, 0x48, 0x1a, 0x52,
	0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x63,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x3f, 0x48, 0x1b, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x63, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x16, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x41, 0x52, 0x14, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x15, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x24, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x42, 0x52, 0x13, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x49, 0x0a, 0x1b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x43, 0x48, 0x1c, 0x52, 0x19,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1a,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x44, 0x48, 0x1d, 0x52, 0x18, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x45, 0x52, 0x1a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x1c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x28,
	0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x46, 0x52, 0x19, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x47, 0x48,
	0x1e, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2f, 0x0a, 0x0e, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x63, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x48, 0x48, 0x1f, 0x52,
	0x0c, 0x71, 0x6f, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f,
	0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x49, 0x48, 0x20, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x54,
	0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x16, 0x71, 0x6f, 0x73,
	0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x4a, 0x48,
	0x21, 0x52, 0x12, 0x71, 0x6f, 0x73, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x12, 0x71, 0x6f, 0x73, 0x5f,
	0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x4b, 0x48, 0x22, 0x52, 0x0e, 0x71, 0x6f,
	0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x15, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x4c, 0x48, 0x23, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54,
	0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x13,
	0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x4d, 0x48,
	0x24, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d,
	0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1d, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x74,
	0x31, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x4e, 0x48, 0x25, 0x52, 0x17, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x47, 0x0a, 0x1c, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x4f, 0x48, 0x26, 0x52, 0x16,
	0x71, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x44,
	0x73, 0x63, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1c, 0x71, 0x6f, 0x73,
	0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x50, 0x48, 0x27, 0x52, 0x17, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x54, 0x6f,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x26, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x51, 0x48, 0x28, 0x52, 0x20, 0x71, 0x6f, 0x73,
	0x50, 0x66, 0x63, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x4a, 0x0a, 0x1d, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x52, 0x48, 0x29, 0x52,
	0x18, 0x71, 0x6f, 0x73, 0x50, 0x66, 0x63, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18,
	0x71, 0x6f, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x53, 0x48, 0x2a, 0x52, 0x15, 0x71, 0x6f, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x4a, 0x0a, 0x1f, 0x71, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x36, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x54, 0x52,
	0x1b, 0x71, 0x6f, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x1e,
	0x71, 0x6f, 0x73, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x37,
	0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x55, 0x52, 0x1a, 0x71, 0x6f, 0x73, 0x45,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x1a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x56, 0x48, 0x2b, 0x52, 0x17, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x57, 0x48, 0x2c, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x78, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x58, 0x48, 0x2d, 0x52, 0x15, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74,
	0x78, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x59, 0x48, 0x2e, 0x52,
	0x15, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x5a, 0x48, 0x2f, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x16, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x03, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x5b, 0x52, 0x13, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0d,
	0x68, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x5c, 0x48, 0x30, 0x52, 0x0b, 0x68, 0x77, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x65,
	0x65, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x5d, 0x48, 0x31, 0x52, 0x09, 0x65, 0x65, 0x65, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x5e, 0x48, 0x32, 0x52, 0x0b, 0x65, 0x65, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x65, 0x65, 0x5f, 0x77, 0x61, 0x6b, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x5f, 0x48, 0x33, 0x52, 0x0b, 0x65, 0x65, 0x65, 0x57, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x42, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x61, 0x48, 0x34, 0x52, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x70, 0x6b, 0x74, 0x5f, 0x74,
	0x78, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x62, 0x48, 0x35, 0x52, 0x0b, 0x70, 0x6b, 0x74, 0x54, 0x78, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x61, 0x6d, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x44, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x63,
	0x52, 0x09, 0x74, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x12, 0x73,
	0x65, 0x72, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69,
	0x73, 0x18, 0x45, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x64, 0x52, 0x11, 0x73,
	0x65, 0x72, 0x64, 0x65, 0x73, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73,
	0x12, 0x2b, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x64, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x46, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x65, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x64, 0x65, 0x73, 0x49, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x11, 0x73, 0x65, 0x72, 0x64, 0x65, 0x73, 0x5f, 0x69, 0x70, 0x72, 0x65, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x18, 0x47, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x66, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x64, 0x65, 0x73, 0x49, 0x70, 0x72, 0x65, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x67, 0x48, 0x36, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a,
	0x08, 0x70, 0x74, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x74, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x68, 0x48, 0x37, 0x52, 0x07, 0x70, 0x74, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x69, 0x48,
	0x38, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x4b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x6a, 0x52, 0x17, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x6b, 0x48, 0x39,
	0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0f, 0x70, 0x72, 0x62, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x79,
	0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x6c, 0x48, 0x3a, 0x52, 0x0e, 0x70, 0x72, 0x62, 0x73, 0x50, 0x6f, 0x6c, 0x79, 0x6e, 0x6f,
	0x6d, 0x69, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x72, 0x62, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x62, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x70, 0x48, 0x3b, 0x52, 0x0a, 0x70, 0x72, 0x62,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x15, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x74, 0x6c, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x76, 0x48,
	0x3c, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x16, 0x71, 0x6f, 0x73,
	0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x50, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x77, 0x48,
	0x3d, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x54,
	0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x19, 0x71, 0x6f, 0x73, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x51, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x78,
	0x48, 0x3e, 0x52, 0x14, 0x71, 0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x20, 0x71,
	0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x79, 0x48, 0x3f, 0x52, 0x19, 0x71,
	0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x4d, 0x70,
	0x6c, 0x73, 0x45, 0x78, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x04, 0x74,
	0x70, 0x69, 0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x7a, 0x48,
	0x40, 0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05,
	0x80, 0xb5, 0x18, 0x82, 0x01, 0x48, 0x41, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67,
	0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x58, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x83, 0x01, 0x48, 0x42, 0x52, 0x0c, 0x6c, 0x6f, 0x6f,
	0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x10,
	0x6d, 0x64, 0x69, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x56, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x4d, 0x64, 0x69, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x85, 0x01, 0x48, 0x43, 0x52, 0x0e, 0x6d, 0x64, 0x69, 0x78,
	0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a,
	0x14, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x86, 0x01,
	0x48, 0x44, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x1d, 0x5f, 0x31, 0x30, 0x30,
	0x30, 0x78, 0x5f, 0x73, 0x67, 0x6d, 0x69, 0x69, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x58, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x05, 0x80, 0xb5, 0x18, 0x87, 0x01, 0x48, 0x45, 0x52, 0x19, 0x31, 0x30, 0x30, 0x30, 0x78, 0x53,
	0x67, 0x6d, 0x69, 0x69, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x88, 0x01, 0x48, 0x46, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0a, 0x64, 0x75,
	0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x75, 0x61, 0x6c, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x89, 0x01, 0x48, 0x47, 0x52, 0x09, 0x64,
	0x75, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x03, 0x69,
	0x70, 0x67, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x8b, 0x01, 0x48,
	0x48, 0x52, 0x03, 0x69, 0x70, 0x67, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1b, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05,
	0x80, 0xb5, 0x18, 0x8c, 0x01, 0x48, 0x49, 0x52, 0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x1d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18,
	0x8d, 0x01, 0x48, 0x4a, 0x52, 0x1a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x20, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f,
	0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80,
	0xb5, 0x18, 0x8e, 0x01, 0x48, 0x4b, 0x52, 0x1b, 0x71, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54,
	0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x24, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x5f,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x8f, 0x01, 0x48, 0x4c, 0x52, 0x1e, 0x71,
	0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01,
	0x3a, 0x04, 0x88, 0xb5, 0x18, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e,
	0x65, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x64, 0x5f, 0x6f, 0x75, 0x69, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x65, 0x63,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6d, 0x74, 0x75, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x25, 0x0a,
	0x23, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63,
	0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x5f, 0x61, 0x63, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x61, 0x63, 0x6c, 0x42, 0x1e, 0x0a,
	0x1c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x71, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x63, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64,
	0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61,
	0x70, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74,
	0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d,
	0x61, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x71,
	0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1f, 0x0a, 0x1d,
	0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1f, 0x0a,
	0x1d, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x29,
	0x0a, 0x27, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x71, 0x6f,
	0x73, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x71, 0x6f, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x78, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x68, 0x77,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x65, 0x65, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65,
	0x65, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x65, 0x65, 0x65, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x74, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x62, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x6e,
	0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x62, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70,
	0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x71,
	0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f,
	0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x6e, 0x65, 0x67, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x64, 0x69, 0x78,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x78,
	0x5f, 0x73, 0x67, 0x6d, 0x69, 0x69, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x75, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x70, 0x67, 0x42, 0x1e,
	0x0a, 0x1c, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x42, 0x20,
	0x0a, 0x1e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x42, 0x23, 0x0a, 0x21, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x22, 0x26,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x14, 0x0a,
	0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xd4, 0x3e, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x20, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x22, 0x48,
	0x01, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x23, 0x48, 0x02, 0x52, 0x0a,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x24, 0x48, 0x03, 0x52,
	0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x25, 0x52, 0x0f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x58,
	0x0a, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x63,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x26, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x64, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x71, 0x0a, 0x1c, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x27,
	0x52, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x46, 0x65, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1c, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x64,
	0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x28, 0x52, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x42, 0x0a, 0x18, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x29, 0x48, 0x04, 0x52, 0x15, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x1c, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x2a, 0x48, 0x05,
	0x52, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52,
	0x0a, 0x20, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x2b, 0x48, 0x06,
	0x52, 0x1d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x41, 0x73, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x63, 0x0a, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x2c, 0x48, 0x07, 0x52,
	0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x69, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x2d, 0x48, 0x08, 0x52, 0x11, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4f, 0x75, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x2e, 0x48, 0x09,
	0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x2f, 0x48, 0x0a, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x30, 0x48, 0x0b, 0x52, 0x0c, 0x64,
	0x72, 0x6f, 0x70, 0x55, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x31, 0x48, 0x0c, 0x52, 0x0a, 0x64, 0x72, 0x6f,
	0x70, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x70, 0x0a, 0x16, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x32, 0x48, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x6f,
	0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10,
	0x75, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x63,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x33, 0x48, 0x0e, 0x52, 0x0e,
	0x75, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x08, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x34, 0x48, 0x0f, 0x52,
	0x07, 0x66, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x11, 0x66,
	0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x35, 0x48, 0x10, 0x52, 0x0f, 0x66, 0x65, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x36, 0x48, 0x11, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x73, 0x63, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x37, 0x48, 0x12, 0x52,
	0x03, 0x6d, 0x74, 0x75, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x1e, 0x66, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x38, 0x48, 0x13, 0x52, 0x1a, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x22, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x39, 0x48, 0x14, 0x52, 0x1e, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a,
	0x22, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x3a, 0x48,
	0x15, 0x52, 0x1e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x6e, 0x0a, 0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x3b, 0x48, 0x16, 0x52, 0x15, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x63, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x3c, 0x48,
	0x17, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x3d, 0x48, 0x18, 0x52, 0x09, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x12, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x61, 0x63, 0x6c,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x3e, 0x48, 0x19, 0x52, 0x10,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x63, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x3f, 0x48, 0x1a, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x41, 0x63, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x16, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x41,
	0x52, 0x14, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x15, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x22, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x42, 0x52, 0x13, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x1b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x43, 0x48, 0x1b, 0x52, 0x19, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1a, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x44, 0x48, 0x1c, 0x52, 0x18, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x25, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x45, 0x52, 0x1a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a,
	0x1c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x26, 0x20,
	0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x46, 0x52, 0x19, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x47, 0x48, 0x1d,
	0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x0e, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x63,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x48, 0x48, 0x1e, 0x52, 0x0c,
	0x71, 0x6f, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x63, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x49, 0x48, 0x1f, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x54, 0x6f,
	0x54, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x16, 0x71, 0x6f, 0x73, 0x5f,
	0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x4a, 0x48, 0x20,
	0x52, 0x12, 0x71, 0x6f, 0x73, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x12, 0x71, 0x6f, 0x73, 0x5f, 0x64,
	0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x4b, 0x48, 0x21, 0x52, 0x0e, 0x71, 0x6f, 0x73,
	0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x15, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x4c, 0x48, 0x22, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x13, 0x71,
	0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x4d, 0x48, 0x23,
	0x52, 0x0f, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1d, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x74, 0x31,
	0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x4e, 0x48, 0x24, 0x52, 0x17, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x54, 0x6f, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x47, 0x0a, 0x1c, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x4f, 0x48, 0x25, 0x52, 0x16, 0x71,
	0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x44, 0x73,
	0x63, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1c, 0x71, 0x6f, 0x73, 0x5f,
	0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x50, 0x48, 0x26, 0x52, 0x17, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x54, 0x6f, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x5b, 0x0a, 0x26, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x51, 0x48, 0x27, 0x52, 0x20, 0x71, 0x6f, 0x73, 0x50,
	0x66, 0x63, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x1d, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x52, 0x48, 0x28, 0x52, 0x18,
	0x71, 0x6f, 0x73, 0x50, 0x66, 0x63, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x71,
	0x6f, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x53, 0x48, 0x29, 0x52, 0x15, 0x71, 0x6f, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x1f, 0x71, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x34, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x54, 0x52, 0x1b,
	0x71, 0x6f, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x1e, 0x71,
	0x6f, 0x73, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x35, 0x20,
	0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x55, 0x52, 0x1a, 0x71, 0x6f, 0x73, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x7a, 0x0a, 0x1a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x56, 0x48, 0x2a, 0x52, 0x17, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x57, 0x48, 0x2b, 0x52, 0x13, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x42, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x78, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x58, 0x48, 0x2c, 0x52, 0x15, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x78,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x59, 0x48, 0x2d, 0x52, 0x15,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x5a, 0x48, 0x2e, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x16, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x5b, 0x52, 0x13, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x68,
	0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x5c, 0x48, 0x2f, 0x52, 0x0b, 0x68, 0x77, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x65, 0x65,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x5d, 0x48, 0x30, 0x52, 0x09, 0x65, 0x65, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x5e, 0x48, 0x31, 0x52, 0x0b, 0x65, 0x65, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x65, 0x65, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x5f,
	0x48, 0x32, 0x52, 0x0b, 0x65, 0x65, 0x65, 0x57, 0x61, 0x6b, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x0f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x40, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x61, 0x48, 0x33, 0x52, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x70, 0x6b, 0x74, 0x5f, 0x74, 0x78,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x62, 0x48, 0x34, 0x52, 0x0b, 0x70, 0x6b, 0x74, 0x54, 0x78, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x61, 0x6d, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x42, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x63, 0x52,
	0x09, 0x74, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x12, 0x73, 0x65,
	0x72, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73,
	0x18, 0x43, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x64, 0x52, 0x11, 0x73, 0x65,
	0x72, 0x64, 0x65, 0x73, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x12,
	0x2b, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x64, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x44, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x65, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x64, 0x65, 0x73, 0x49, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x11,
	0x73, 0x65, 0x72, 0x64, 0x65, 0x73, 0x5f, 0x69, 0x70, 0x72, 0x65, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x45, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x66, 0x52, 0x10, 0x73,
	0x65, 0x72, 0x64, 0x65, 0x73, 0x49, 0x70, 0x72, 0x65, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x67, 0x48, 0x35, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x08,
	0x70, 0x74, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x74, 0x70, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x68, 0x48, 0x36, 0x52, 0x07, 0x70, 0x74, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x69, 0x48, 0x37,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x6a, 0x0a, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x49, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x6a, 0x52, 0x17, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x0a, 0x0f, 0x70, 0x72, 0x62, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61,
	0x6c, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x6c, 0x48, 0x38, 0x52,
	0x0e, 0x70, 0x72, 0x62, 0x73, 0x50, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x51, 0x0a, 0x0b, 0x70, 0x72, 0x62, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x62, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x70, 0x48, 0x39, 0x52, 0x0a, 0x70, 0x72, 0x62, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x4c,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x76, 0x48, 0x3a, 0x52, 0x13, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x74,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x16, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x77, 0x48, 0x3b, 0x52, 0x11, 0x71, 0x6f,
	0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x19, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65,
	0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x4e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x78, 0x48, 0x3c, 0x52, 0x14, 0x71,
	0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x20, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x79, 0x48, 0x3d, 0x52, 0x19, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70,
	0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x04, 0x74, 0x70, 0x69, 0x64, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x7a, 0x48, 0x3e, 0x52, 0x04, 0x74, 0x70,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65,
	0x67, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x82, 0x01,
	0x48, 0x3f, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x46, 0x65, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a,
	0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x05, 0x80,
	0xb5, 0x18, 0x83, 0x01, 0x48, 0x40, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x10, 0x6d, 0x64, 0x69, 0x78, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x53, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x64,
	0x69, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x05, 0x80, 0xb5,
	0x18, 0x85, 0x01, 0x48, 0x41, 0x52, 0x0e, 0x6d, 0x64, 0x69, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x54, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x86, 0x01, 0x48, 0x42, 0x52, 0x11, 0x61,
	0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x1d, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x78, 0x5f, 0x73, 0x67,
	0x6d, 0x69, 0x69, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x87,
	0x01, 0x48, 0x43, 0x52, 0x19, 0x31, 0x30, 0x30, 0x30, 0x78, 0x53, 0x67, 0x6d, 0x69, 0x69, 0x53,
	0x6c, 0x61, 0x76, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x52, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x56, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x05, 0x80,
	0xb5, 0x18, 0x88, 0x01, 0x48, 0x44, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0a, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x42,
	0x05, 0x80, 0xb5, 0x18, 0x89, 0x01, 0x48, 0x45, 0x52, 0x09, 0x64, 0x75, 0x61, 0x6c, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x03, 0x69, 0x70, 0x67, 0x18, 0x58, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x8b, 0x01, 0x48, 0x46, 0x52, 0x03, 0x69, 0x70,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x59, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x8c, 0x01,
	0x48, 0x47, 0x52, 0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x1d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x8d, 0x01, 0x48, 0x48, 0x52,
	0x1a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x51,
	0x0a, 0x20, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x8e, 0x01, 0x48,
	0x49, 0x52, 0x1b, 0x71, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x58, 0x0a, 0x24, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78,
	0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x05, 0x80, 0xb5, 0x18, 0x8f, 0x01, 0x48, 0x4a, 0x52, 0x1e, 0x71, 0x6f, 0x73, 0x4d, 0x70, 0x6c,
	0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e,
	0x65, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70,
	0x61, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x64, 0x5f, 0x6f, 0x75, 0x69, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x65, 0x63,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6d, 0x74, 0x75, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x25, 0x0a,
	0x23, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63,
	0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x5f, 0x61, 0x63, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x61, 0x63, 0x6c, 0x42, 0x1e, 0x0a,
	0x1c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x71, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x63, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64,
	0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61,
	0x70, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74,
	0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d,
	0x61, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x71,
	0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1f, 0x0a, 0x1d,
	0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1f, 0x0a,
	0x1d, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x29,
	0x0a, 0x27, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x71, 0x6f,
	0x73, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x71, 0x6f, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x78, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x68, 0x77,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x65, 0x65, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65,
	0x65, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x65, 0x65, 0x65, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x6b, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x74, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x70, 0x72, 0x62, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61,
	0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x62, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x6d, 0x61, 0x70, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x70,
	0x69, 0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f,
	0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x64, 0x69, 0x78, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x42, 0x20, 0x0a, 0x1e, 0x58, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x78, 0x5f, 0x73, 0x67, 0x6d,
	0x69, 0x69, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x70, 0x67, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x42, 0x23, 0x0a, 0x21,
	0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65,
	0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x54, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38,
	0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x03, 0x48, 0x02, 0x52, 0x10, 0x71, 0x6f, 0x73, 0x57, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x3f, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x22, 0x29, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f,
	0x77, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x00, 0x52, 0x10, 0x71,
	0x6f, 0x73, 0x57, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x9e, 0x04, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x38, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53,
	0x69, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x11,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52,
	0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x1c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02,
	0x52, 0x18, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x69, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a,
	0x1a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x16, 0x6c, 0x69, 0x6e, 0x65, 0x53,
	0x69, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x57, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x69,
	0x64, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x2f, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2e, 0x0a,
	0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1d, 0x0a,
	0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa8, 0x01, 0x0a,
	0x20, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x66, 0x0a, 0x21, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74,
	0x72, 0x22, 0x8b, 0x04, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69,
	0x73, 0x12, 0x1e, 0x0a, 0x07, 0x69, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x05, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x52, 0x07, 0x69, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0a, 0x69, 0x70, 0x72, 0x65, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x52, 0x0a, 0x69, 0x70, 0x72,
	0x65, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x66, 0x69,
	0x72, 0x5f, 0x70, 0x72, 0x65, 0x31, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x05, 0x52, 0x09, 0x74, 0x78, 0x46, 0x69, 0x72, 0x50, 0x72, 0x65, 0x31, 0x12, 0x24, 0x0a,
	0x0b, 0x74, 0x78, 0x5f, 0x66, 0x69, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x32, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x05, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x52, 0x09, 0x74, 0x78, 0x46, 0x69, 0x72, 0x50,
	0x72, 0x65, 0x32, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x66, 0x69, 0x72, 0x5f, 0x70, 0x72,
	0x65, 0x33, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x52, 0x09,
	0x74, 0x78, 0x46, 0x69, 0x72, 0x50, 0x72, 0x65, 0x33, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x78, 0x5f,
	0x66, 0x69, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x08, 0x52, 0x09, 0x74, 0x78, 0x46, 0x69, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x12,
	0x26, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x66, 0x69, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x31, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x52, 0x0a, 0x74, 0x78, 0x46,
	0x69, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x31, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x66, 0x69,
	0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x0a, 0x52, 0x0a, 0x74, 0x78, 0x46, 0x69, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x32, 0x12,
	0x26, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x66, 0x69, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x33, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x52, 0x0a, 0x74, 0x78, 0x46,
	0x69, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x33, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x66, 0x69,
	0x72, 0x5f, 0x61, 0x74, 0x74, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x0c, 0x52, 0x09, 0x74, 0x78, 0x46, 0x69, 0x72, 0x41, 0x74, 0x74, 0x6e, 0x3a, 0x04, 0x88,
	0xb5, 0x18, 0x58, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0x2c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2b, 0x0a,
	0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x41,
	0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a,
	0xa2, 0x29, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x52,
	0x45, 0x41, 0x4b, 0x4f, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x4f, 0x55, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x53, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f,
	0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x2c,
	0x0a, 0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x48, 0x45,
	0x41, 0x44, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x09, 0x12, 0x1d, 0x0a,
	0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52,
	0x54, 0x45, 0x44, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0b, 0x12, 0x29,
	0x0a, 0x25, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0e, 0x12, 0x29, 0x0a, 0x25, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0f, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x53,
	0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44,
	0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x11, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44,
	0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x12,
	0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f,
	0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x13, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41,
	0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x14, 0x12, 0x31, 0x0a,
	0x2d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x48, 0x41, 0x4c,
	0x46, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x15,
	0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x16, 0x12,
	0x31, 0x0a, 0x2d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0x17, 0x12, 0x35, 0x0a, 0x31, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45,
	0x44, 0x5f, 0x41, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x18, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44,
	0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x19, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54,
	0x49, 0x53, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x49, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x1a, 0x12,
	0x2f, 0x0a, 0x2b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x1b,
	0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x1c, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x59, 0x45, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x53, 0x10, 0x1d, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x1e, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x48, 0x57, 0x5f,
	0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x20,
	0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x21,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x22, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x23, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x24, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44,
	0x10, 0x25, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x26, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x45,
	0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x27, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41,
	0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x48, 0x41, 0x4c, 0x46, 0x5f, 0x44,
	0x55, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x28, 0x12, 0x26, 0x0a,
	0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52,
	0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x29, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0x2a, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41,
	0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x59, 0x4d, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0x2b, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41,
	0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x2c, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x4f,
	0x55, 0x49, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x2d, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x56, 0x4c, 0x41, 0x4e,
	0x5f, 0x49, 0x44, 0x10, 0x2e, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x2f, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x54,
	0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x30, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44,
	0x10, 0x31, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x32, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x5f, 0x46, 0x45, 0x43, 0x10, 0x33, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x34,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x45,
	0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x35, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x36, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x54, 0x55, 0x10, 0x37, 0x12,
	0x2c, 0x0a, 0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x4c, 0x4f,
	0x4f, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x38, 0x12, 0x30, 0x0a,
	0x2c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x39, 0x12,
	0x30, 0x0a, 0x2c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10,
	0x3a, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47,
	0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x3b, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x41,
	0x43, 0x4c, 0x10, 0x3c, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x4c, 0x10, 0x3d, 0x12, 0x20,
	0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x43, 0x4c, 0x10, 0x3e,
	0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x43, 0x4c, 0x10,
	0x3f, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x40, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49,
	0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x41, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x49, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x42, 0x12, 0x29, 0x0a, 0x25,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x43, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x41, 0x4d, 0x50,
	0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x44, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49,
	0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x45, 0x12, 0x2a,
	0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x46, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x10, 0x47, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x43,
	0x10, 0x48, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x51, 0x4f, 0x53, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x43, 0x5f,
	0x4d, 0x41, 0x50, 0x10, 0x49, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x50, 0x5f, 0x54, 0x4f, 0x5f,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x4a, 0x12, 0x20, 0x0a, 0x1c, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x44, 0x53, 0x43,
	0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x43, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x4b, 0x12, 0x23, 0x0a,
	0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x44,
	0x53, 0x43, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x50,
	0x10, 0x4c, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x51, 0x4f, 0x53, 0x5f, 0x54, 0x43, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f,
	0x4d, 0x41, 0x50, 0x10, 0x4d, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x54, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x50, 0x5f, 0x4d, 0x41, 0x50,
	0x10, 0x4e, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x51, 0x4f, 0x53, 0x5f, 0x54, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x4f, 0x12, 0x2a,
	0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f,
	0x54, 0x43, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x50, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x50, 0x46, 0x43, 0x5f,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x51,
	0x12, 0x2b, 0x0a, 0x27, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f,
	0x53, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x4f, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x52, 0x12, 0x26, 0x0a,
	0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x49, 0x44, 0x10, 0x53, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x54, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x55, 0x46,
	0x46, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x55, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x56, 0x12, 0x23, 0x0a, 0x1f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10,
	0x57, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x52, 0x58, 0x10, 0x58, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x58, 0x10,
	0x59, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d,
	0x45, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x5a, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x5b,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x48, 0x57,
	0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x5c, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x45, 0x45, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x5d, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x45, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x5e, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x45, 0x45, 0x45, 0x5f, 0x57, 0x41, 0x4b, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x5f, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x60, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x53, 0x4f,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x61, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4b, 0x54, 0x5f,
	0x54, 0x58, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x62, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x10, 0x63, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x44, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50,
	0x48, 0x41, 0x53, 0x49, 0x53, 0x10, 0x64, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x44, 0x45, 0x53, 0x5f, 0x49, 0x44, 0x52, 0x49,
	0x56, 0x45, 0x52, 0x10, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x44, 0x45, 0x53, 0x5f, 0x49, 0x50, 0x52, 0x45, 0x44, 0x52,
	0x49, 0x56, 0x45, 0x52, 0x10, 0x66, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x54, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0x68, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x69,
	0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x44,
	0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x6a, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x6b, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x4e,
	0x4f, 0x4d, 0x49, 0x41, 0x4c, 0x10, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x44, 0x45, 0x53,
	0x5f, 0x49, 0x44, 0x10, 0x6d, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0x6e, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x58, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x6f, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x70, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x71, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x72, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x75, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x54, 0x4c, 0x10, 0x76, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58,
	0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x43, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x77, 0x12, 0x27, 0x0a,
	0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x5f, 0x4d, 0x41, 0x50, 0x10, 0x78, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x54, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50,
	0x5f, 0x4d, 0x41, 0x50, 0x10, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x54, 0x50, 0x49, 0x44, 0x10, 0x7a, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x7b, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x7c, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x7d, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44,
	0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x10, 0x7e, 0x12, 0x28, 0x0a, 0x24,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43,
	0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x10, 0x7f, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x80, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x81, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x46, 0x45, 0x43,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x82,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c,
	0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x83, 0x01, 0x12,
	0x1f, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x44, 0x49,
	0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x84, 0x01,
	0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x44,
	0x49, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x85,
	0x01, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41,
	0x55, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x10, 0x86, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x58, 0x5f, 0x53, 0x47, 0x4d, 0x49, 0x49, 0x5f,
	0x53, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x10, 0x87, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x88, 0x01, 0x12,
	0x19, 0x0a, 0x14, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x55, 0x41,
	0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x89, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x47,
	0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x8a, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x49, 0x50, 0x47, 0x10, 0x8b, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x10, 0x8c, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x10, 0x8d, 0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4d, 0x41,
	0x50, 0x10, 0x8e, 0x01, 0x12, 0x33, 0x0a, 0x2e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x54,
	0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x8f, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x90, 0x01, 0x2a, 0x95, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f,
	0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x2a, 0xa1, 0x02, 0x0a,
	0x11, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12,
	0x34, 0x0a, 0x30, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x49,
	0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x05,
	0x2a, 0xc4, 0x03, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x41,
	0x74, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x44,
	0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45,
	0x52, 0x44, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49,
	0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x44,
	0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x48, 0x41,
	0x53, 0x49, 0x53, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45,
	0x52, 0x44, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x44, 0x52, 0x49, 0x56, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x44,
	0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x52, 0x45, 0x44, 0x52, 0x49, 0x56,
	0x45, 0x52, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52,
	0x44, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x58, 0x5f, 0x46, 0x49, 0x52, 0x5f,
	0x50, 0x52, 0x45, 0x31, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x45, 0x52, 0x44, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x58, 0x5f, 0x46, 0x49,
	0x52, 0x5f, 0x50, 0x52, 0x45, 0x32, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x45, 0x52, 0x44, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x58, 0x5f,
	0x46, 0x49, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x33, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x44, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54,
	0x58, 0x5f, 0x46, 0x49, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x44, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x54, 0x58, 0x5f, 0x46, 0x49, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x31, 0x10, 0x09, 0x12,
	0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x44, 0x45, 0x53, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x54, 0x58, 0x5f, 0x46, 0x49, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x32,
	0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x44, 0x45,
	0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x58, 0x5f, 0x46, 0x49, 0x52, 0x5f, 0x50, 0x4f,
	0x53, 0x54, 0x33, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45,
	0x52, 0x44, 0x45, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x58, 0x5f, 0x46, 0x49, 0x52,
	0x5f, 0x41, 0x54, 0x54, 0x4e, 0x10, 0x0c, 0x32, 0xc6, 0x0e, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x63, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2e,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x75, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2c, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2c, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x53,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7e, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7e, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x65, 0x72, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x65, 0x72, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x75, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72,
	0x64, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_port_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_port_proto_rawDescData = file_dataplane_standalone_proto_port_proto_rawDesc
)

func file_dataplane_standalone_proto_port_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_port_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_port_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_port_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_port_proto_rawDescData
}

var file_dataplane_standalone_proto_port_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_dataplane_standalone_proto_port_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_dataplane_standalone_proto_port_proto_goTypes = []interface{}{
	(PortAttr)(0),                             // 0: lemming.dataplane.sai.PortAttr
	(PortPoolAttr)(0),                         // 1: lemming.dataplane.sai.PortPoolAttr
	(PortConnectorAttr)(0),                    // 2: lemming.dataplane.sai.PortConnectorAttr
	(PortSerdesAttr)(0),                       // 3: lemming.dataplane.sai.PortSerdesAttr
	(*CreatePortRequest)(nil),                 // 4: lemming.dataplane.sai.CreatePortRequest
	(*CreatePortResponse)(nil),                // 5: lemming.dataplane.sai.CreatePortResponse
	(*RemovePortRequest)(nil),                 // 6: lemming.dataplane.sai.RemovePortRequest
	(*RemovePortResponse)(nil),                // 7: lemming.dataplane.sai.RemovePortResponse
	(*SetPortAttributeRequest)(nil),           // 8: lemming.dataplane.sai.SetPortAttributeRequest
	(*SetPortAttributeResponse)(nil),          // 9: lemming.dataplane.sai.SetPortAttributeResponse
	(*GetPortAttributeRequest)(nil),           // 10: lemming.dataplane.sai.GetPortAttributeRequest
	(*GetPortAttributeResponse)(nil),          // 11: lemming.dataplane.sai.GetPortAttributeResponse
	(*CreatePortPoolRequest)(nil),             // 12: lemming.dataplane.sai.CreatePortPoolRequest
	(*CreatePortPoolResponse)(nil),            // 13: lemming.dataplane.sai.CreatePortPoolResponse
	(*RemovePortPoolRequest)(nil),             // 14: lemming.dataplane.sai.RemovePortPoolRequest
	(*RemovePortPoolResponse)(nil),            // 15: lemming.dataplane.sai.RemovePortPoolResponse
	(*SetPortPoolAttributeRequest)(nil),       // 16: lemming.dataplane.sai.SetPortPoolAttributeRequest
	(*SetPortPoolAttributeResponse)(nil),      // 17: lemming.dataplane.sai.SetPortPoolAttributeResponse
	(*GetPortPoolAttributeRequest)(nil),       // 18: lemming.dataplane.sai.GetPortPoolAttributeRequest
	(*GetPortPoolAttributeResponse)(nil),      // 19: lemming.dataplane.sai.GetPortPoolAttributeResponse
	(*CreatePortConnectorRequest)(nil),        // 20: lemming.dataplane.sai.CreatePortConnectorRequest
	(*CreatePortConnectorResponse)(nil),       // 21: lemming.dataplane.sai.CreatePortConnectorResponse
	(*RemovePortConnectorRequest)(nil),        // 22: lemming.dataplane.sai.RemovePortConnectorRequest
	(*RemovePortConnectorResponse)(nil),       // 23: lemming.dataplane.sai.RemovePortConnectorResponse
	(*SetPortConnectorAttributeRequest)(nil),  // 24: lemming.dataplane.sai.SetPortConnectorAttributeRequest
	(*SetPortConnectorAttributeResponse)(nil), // 25: lemming.dataplane.sai.SetPortConnectorAttributeResponse
	(*GetPortConnectorAttributeRequest)(nil),  // 26: lemming.dataplane.sai.GetPortConnectorAttributeRequest
	(*GetPortConnectorAttributeResponse)(nil), // 27: lemming.dataplane.sai.GetPortConnectorAttributeResponse
	(*CreatePortSerdesRequest)(nil),           // 28: lemming.dataplane.sai.CreatePortSerdesRequest
	(*CreatePortSerdesResponse)(nil),          // 29: lemming.dataplane.sai.CreatePortSerdesResponse
	(*RemovePortSerdesRequest)(nil),           // 30: lemming.dataplane.sai.RemovePortSerdesRequest
	(*RemovePortSerdesResponse)(nil),          // 31: lemming.dataplane.sai.RemovePortSerdesResponse
	(*GetPortSerdesAttributeRequest)(nil),     // 32: lemming.dataplane.sai.GetPortSerdesAttributeRequest
	(*GetPortSerdesAttributeResponse)(nil),    // 33: lemming.dataplane.sai.GetPortSerdesAttributeResponse
	(PortMediaType)(0),                        // 34: lemming.dataplane.sai.PortMediaType
	(PortFecMode)(0),                          // 35: lemming.dataplane.sai.PortFecMode
	(PortFecModeExtended)(0),                  // 36: lemming.dataplane.sai.PortFecModeExtended
	(PortFlowControlMode)(0),                  // 37: lemming.dataplane.sai.PortFlowControlMode
	(PortInternalLoopbackMode)(0),             // 38: lemming.dataplane.sai.PortInternalLoopbackMode
	(PortPriorityFlowControlMode)(0),          // 39: lemming.dataplane.sai.PortPriorityFlowControlMode
	(PortPtpMode)(0),                          // 40: lemming.dataplane.sai.PortPtpMode
	(PortInterfaceType)(0),                    // 41: lemming.dataplane.sai.PortInterfaceType
	(PortPrbsConfig)(0),                       // 42: lemming.dataplane.sai.PortPrbsConfig
	(PortLoopbackMode)(0),                     // 43: lemming.dataplane.sai.PortLoopbackMode
	(PortMdixModeConfig)(0),                   // 44: lemming.dataplane.sai.PortMdixModeConfig
	(PortAutoNegConfigMode)(0),                // 45: lemming.dataplane.sai.PortAutoNegConfigMode
	(PortModuleType)(0),                       // 46: lemming.dataplane.sai.PortModuleType
	(PortDualMedia)(0),                        // 47: lemming.dataplane.sai.PortDualMedia
	(*PortAttribute)(nil),                     // 48: lemming.dataplane.sai.PortAttribute
	(*PortPoolAttribute)(nil),                 // 49: lemming.dataplane.sai.PortPoolAttribute
	(PortConnectorFailoverMode)(0),            // 50: lemming.dataplane.sai.PortConnectorFailoverMode
	(*PortConnectorAttribute)(nil),            // 51: lemming.dataplane.sai.PortConnectorAttribute
	(*PortSerdesAttribute)(nil),               // 52: lemming.dataplane.sai.PortSerdesAttribute
}
var file_dataplane_standalone_proto_port_proto_depIdxs = []int32{
	34, // 0: lemming.dataplane.sai.CreatePortRequest.media_type:type_name -> lemming.dataplane.sai.PortMediaType
	35, // 1: lemming.dataplane.sai.CreatePortRequest.advertised_fec_mode:type_name -> lemming.dataplane.sai.PortFecMode
	36, // 2: lemming.dataplane.sai.CreatePortRequest.advertised_fec_mode_extended:type_name -> lemming.dataplane.sai.PortFecModeExtended
	37, // 3: lemming.dataplane.sai.CreatePortRequest.advertised_flow_control_mode:type_name -> lemming.dataplane.sai.PortFlowControlMode
	34, // 4: lemming.dataplane.sai.CreatePortRequest.advertised_media_type:type_name -> lemming.dataplane.sai.PortMediaType
	38, // 5: lemming.dataplane.sai.CreatePortRequest.internal_loopback_mode:type_name -> lemming.dataplane.sai.PortInternalLoopbackMode
	35, // 6: lemming.dataplane.sai.CreatePortRequest.fec_mode:type_name -> lemming.dataplane.sai.PortFecMode
	36, // 7: lemming.dataplane.sai.CreatePortRequest.fec_mode_extended:type_name -> lemming.dataplane.sai.PortFecModeExtended
	37, // 8: lemming.dataplane.sai.CreatePortRequest.global_flow_control_mode:type_name -> lemming.dataplane.sai.PortFlowControlMode
	39, // 9: lemming.dataplane.sai.CreatePortRequest.priority_flow_control_mode:type_name -> lemming.dataplane.sai.PortPriorityFlowControlMode
	40, // 10: lemming.dataplane.sai.CreatePortRequest.ptp_mode:type_name -> lemming.dataplane.sai.PortPtpMode
	41, // 11: lemming.dataplane.sai.CreatePortRequest.interface_type:type_name -> lemming.dataplane.sai.PortInterfaceType
	41, // 12: lemming.dataplane.sai.CreatePortRequest.advertised_interface_type:type_name -> lemming.dataplane.sai.PortInterfaceType
	42, // 13: lemming.dataplane.sai.CreatePortRequest.prbs_config:type_name -> lemming.dataplane.sai.PortPrbsConfig
	43, // 14: lemming.dataplane.sai.CreatePortRequest.loopback_mode:type_name -> lemming.dataplane.sai.PortLoopbackMode
	44, // 15: lemming.dataplane.sai.CreatePortRequest.mdix_mode_config:type_name -> lemming.dataplane.sai.PortMdixModeConfig
	45, // 16: lemming.dataplane.sai.CreatePortRequest.auto_neg_config_mode:type_name -> lemming.dataplane.sai.PortAutoNegConfigMode
	46, // 17: lemming.dataplane.sai.CreatePortRequest.module_type:type_name -> lemming.dataplane.sai.PortModuleType
	47, // 18: lemming.dataplane.sai.CreatePortRequest.dual_media:type_name -> lemming.dataplane.sai.PortDualMedia
	34, // 19: lemming.dataplane.sai.SetPortAttributeRequest.media_type:type_name -> lemming.dataplane.sai.PortMediaType
	35, // 20: lemming.dataplane.sai.SetPortAttributeRequest.advertised_fec_mode:type_name -> lemming.dataplane.sai.PortFecMode
	36, // 21: lemming.dataplane.sai.SetPortAttributeRequest.advertised_fec_mode_extended:type_name -> lemming.dataplane.sai.PortFecModeExtended
	37, // 22: lemming.dataplane.sai.SetPortAttributeRequest.advertised_flow_control_mode:type_name -> lemming.dataplane.sai.PortFlowControlMode
	34, // 23: lemming.dataplane.sai.SetPortAttributeRequest.advertised_media_type:type_name -> lemming.dataplane.sai.PortMediaType
	38, // 24: lemming.dataplane.sai.SetPortAttributeRequest.internal_loopback_mode:type_name -> lemming.dataplane.sai.PortInternalLoopbackMode
	35, // 25: lemming.dataplane.sai.SetPortAttributeRequest.fec_mode:type_name -> lemming.dataplane.sai.PortFecMode
	36, // 26: lemming.dataplane.sai.SetPortAttributeRequest.fec_mode_extended:type_name -> lemming.dataplane.sai.PortFecModeExtended
	37, // 27: lemming.dataplane.sai.SetPortAttributeRequest.global_flow_control_mode:type_name -> lemming.dataplane.sai.PortFlowControlMode
	39, // 28: lemming.dataplane.sai.SetPortAttributeRequest.priority_flow_control_mode:type_name -> lemming.dataplane.sai.PortPriorityFlowControlMode
	40, // 29: lemming.dataplane.sai.SetPortAttributeRequest.ptp_mode:type_name -> lemming.dataplane.sai.PortPtpMode
	41, // 30: lemming.dataplane.sai.SetPortAttributeRequest.interface_type:type_name -> lemming.dataplane.sai.PortInterfaceType
	41, // 31: lemming.dataplane.sai.SetPortAttributeRequest.advertised_interface_type:type_name -> lemming.dataplane.sai.PortInterfaceType
	42, // 32: lemming.dataplane.sai.SetPortAttributeRequest.prbs_config:type_name -> lemming.dataplane.sai.PortPrbsConfig
	43, // 33: lemming.dataplane.sai.SetPortAttributeRequest.loopback_mode:type_name -> lemming.dataplane.sai.PortLoopbackMode
	44, // 34: lemming.dataplane.sai.SetPortAttributeRequest.mdix_mode_config:type_name -> lemming.dataplane.sai.PortMdixModeConfig
	45, // 35: lemming.dataplane.sai.SetPortAttributeRequest.auto_neg_config_mode:type_name -> lemming.dataplane.sai.PortAutoNegConfigMode
	46, // 36: lemming.dataplane.sai.SetPortAttributeRequest.module_type:type_name -> lemming.dataplane.sai.PortModuleType
	47, // 37: lemming.dataplane.sai.SetPortAttributeRequest.dual_media:type_name -> lemming.dataplane.sai.PortDualMedia
	0,  // 38: lemming.dataplane.sai.GetPortAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.PortAttr
	48, // 39: lemming.dataplane.sai.GetPortAttributeResponse.attr:type_name -> lemming.dataplane.sai.PortAttribute
	1,  // 40: lemming.dataplane.sai.GetPortPoolAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.PortPoolAttr
	49, // 41: lemming.dataplane.sai.GetPortPoolAttributeResponse.attr:type_name -> lemming.dataplane.sai.PortPoolAttribute
	50, // 42: lemming.dataplane.sai.CreatePortConnectorRequest.failover_mode:type_name -> lemming.dataplane.sai.PortConnectorFailoverMode
	50, // 43: lemming.dataplane.sai.SetPortConnectorAttributeRequest.failover_mode:type_name -> lemming.dataplane.sai.PortConnectorFailoverMode
	2,  // 44: lemming.dataplane.sai.GetPortConnectorAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.PortConnectorAttr
	51, // 45: lemming.dataplane.sai.GetPortConnectorAttributeResponse.attr:type_name -> lemming.dataplane.sai.PortConnectorAttribute
	3,  // 46: lemming.dataplane.sai.GetPortSerdesAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.PortSerdesAttr
	52, // 47: lemming.dataplane.sai.GetPortSerdesAttributeResponse.attr:type_name -> lemming.dataplane.sai.PortSerdesAttribute
	4,  // 48: lemming.dataplane.sai.Port.CreatePort:input_type -> lemming.dataplane.sai.CreatePortRequest
	6,  // 49: lemming.dataplane.sai.Port.RemovePort:input_type -> lemming.dataplane.sai.RemovePortRequest
	8,  // 50: lemming.dataplane.sai.Port.SetPortAttribute:input_type -> lemming.dataplane.sai.SetPortAttributeRequest
	10, // 51: lemming.dataplane.sai.Port.GetPortAttribute:input_type -> lemming.dataplane.sai.GetPortAttributeRequest
	12, // 52: lemming.dataplane.sai.Port.CreatePortPool:input_type -> lemming.dataplane.sai.CreatePortPoolRequest
	14, // 53: lemming.dataplane.sai.Port.RemovePortPool:input_type -> lemming.dataplane.sai.RemovePortPoolRequest
	16, // 54: lemming.dataplane.sai.Port.SetPortPoolAttribute:input_type -> lemming.dataplane.sai.SetPortPoolAttributeRequest
	18, // 55: lemming.dataplane.sai.Port.GetPortPoolAttribute:input_type -> lemming.dataplane.sai.GetPortPoolAttributeRequest
	20, // 56: lemming.dataplane.sai.Port.CreatePortConnector:input_type -> lemming.dataplane.sai.CreatePortConnectorRequest
	22, // 57: lemming.dataplane.sai.Port.RemovePortConnector:input_type -> lemming.dataplane.sai.RemovePortConnectorRequest
	24, // 58: lemming.dataplane.sai.Port.SetPortConnectorAttribute:input_type -> lemming.dataplane.sai.SetPortConnectorAttributeRequest
	26, // 59: lemming.dataplane.sai.Port.GetPortConnectorAttribute:input_type -> lemming.dataplane.sai.GetPortConnectorAttributeRequest
	28, // 60: lemming.dataplane.sai.Port.CreatePortSerdes:input_type -> lemming.dataplane.sai.CreatePortSerdesRequest
	30, // 61: lemming.dataplane.sai.Port.RemovePortSerdes:input_type -> lemming.dataplane.sai.RemovePortSerdesRequest
	32, // 62: lemming.dataplane.sai.Port.GetPortSerdesAttribute:input_type -> lemming.dataplane.sai.GetPortSerdesAttributeRequest
	5,  // 63: lemming.dataplane.sai.Port.CreatePort:output_type -> lemming.dataplane.sai.CreatePortResponse
	7,  // 64: lemming.dataplane.sai.Port.RemovePort:output_type -> lemming.dataplane.sai.RemovePortResponse
	9,  // 65: lemming.dataplane.sai.Port.SetPortAttribute:output_type -> lemming.dataplane.sai.SetPortAttributeResponse
	11, // 66: lemming.dataplane.sai.Port.GetPortAttribute:output_type -> lemming.dataplane.sai.GetPortAttributeResponse
	13, // 67: lemming.dataplane.sai.Port.CreatePortPool:output_type -> lemming.dataplane.sai.CreatePortPoolResponse
	15, // 68: lemming.dataplane.sai.Port.RemovePortPool:output_type -> lemming.dataplane.sai.RemovePortPoolResponse
	17, // 69: lemming.dataplane.sai.Port.SetPortPoolAttribute:output_type -> lemming.dataplane.sai.SetPortPoolAttributeResponse
	19, // 70: lemming.dataplane.sai.Port.GetPortPoolAttribute:output_type -> lemming.dataplane.sai.GetPortPoolAttributeResponse
	21, // 71: lemming.dataplane.sai.Port.CreatePortConnector:output_type -> lemming.dataplane.sai.CreatePortConnectorResponse
	23, // 72: lemming.dataplane.sai.Port.RemovePortConnector:output_type -> lemming.dataplane.sai.RemovePortConnectorResponse
	25, // 73: lemming.dataplane.sai.Port.SetPortConnectorAttribute:output_type -> lemming.dataplane.sai.SetPortConnectorAttributeResponse
	27, // 74: lemming.dataplane.sai.Port.GetPortConnectorAttribute:output_type -> lemming.dataplane.sai.GetPortConnectorAttributeResponse
	29, // 75: lemming.dataplane.sai.Port.CreatePortSerdes:output_type -> lemming.dataplane.sai.CreatePortSerdesResponse
	31, // 76: lemming.dataplane.sai.Port.RemovePortSerdes:output_type -> lemming.dataplane.sai.RemovePortSerdesResponse
	33, // 77: lemming.dataplane.sai.Port.GetPortSerdesAttribute:output_type -> lemming.dataplane.sai.GetPortSerdesAttributeResponse
	63, // [63:78] is the sub-list for method output_type
	48, // [48:63] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_port_proto_init() }
func file_dataplane_standalone_proto_port_proto_init() {
	if File_dataplane_standalone_proto_port_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_port_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPortAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPortAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePortPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePortPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePortPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePortPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPortPoolAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPortPoolAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortPoolAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortPoolAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePortConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePortConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePortConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePortConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPortConnectorAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPortConnectorAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortConnectorAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortConnectorAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePortSerdesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePortSerdesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePortSerdesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePortSerdesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortSerdesAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_port_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortSerdesAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_port_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_port_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_port_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_port_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_port_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_port_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_port_proto_msgTypes[24].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_port_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_port_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_port_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_port_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_port_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_port_proto = out.File
	file_dataplane_standalone_proto_port_proto_rawDesc = nil
	file_dataplane_standalone_proto_port_proto_goTypes = nil
	file_dataplane_standalone_proto_port_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PortClient is the client API for Port service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortClient interface {
	CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*CreatePortResponse, error)
	RemovePort(ctx context.Context, in *RemovePortRequest, opts ...grpc.CallOption) (*RemovePortResponse, error)
	SetPortAttribute(ctx context.Context, in *SetPortAttributeRequest, opts ...grpc.CallOption) (*SetPortAttributeResponse, error)
	GetPortAttribute(ctx context.Context, in *GetPortAttributeRequest, opts ...grpc.CallOption) (*GetPortAttributeResponse, error)
	CreatePortPool(ctx context.Context, in *CreatePortPoolRequest, opts ...grpc.CallOption) (*CreatePortPoolResponse, error)
	RemovePortPool(ctx context.Context, in *RemovePortPoolRequest, opts ...grpc.CallOption) (*RemovePortPoolResponse, error)
	SetPortPoolAttribute(ctx context.Context, in *SetPortPoolAttributeRequest, opts ...grpc.CallOption) (*SetPortPoolAttributeResponse, error)
	GetPortPoolAttribute(ctx context.Context, in *GetPortPoolAttributeRequest, opts ...grpc.CallOption) (*GetPortPoolAttributeResponse, error)
	CreatePortConnector(ctx context.Context, in *CreatePortConnectorRequest, opts ...grpc.CallOption) (*CreatePortConnectorResponse, error)
	RemovePortConnector(ctx context.Context, in *RemovePortConnectorRequest, opts ...grpc.CallOption) (*RemovePortConnectorResponse, error)
	SetPortConnectorAttribute(ctx context.Context, in *SetPortConnectorAttributeRequest, opts ...grpc.CallOption) (*SetPortConnectorAttributeResponse, error)
	GetPortConnectorAttribute(ctx context.Context, in *GetPortConnectorAttributeRequest, opts ...grpc.CallOption) (*GetPortConnectorAttributeResponse, error)
	CreatePortSerdes(ctx context.Context, in *CreatePortSerdesRequest, opts ...grpc.CallOption) (*CreatePortSerdesResponse, error)
	RemovePortSerdes(ctx context.Context, in *RemovePortSerdesRequest, opts ...grpc.CallOption) (*RemovePortSerdesResponse, error)
	GetPortSerdesAttribute(ctx context.Context, in *GetPortSerdesAttributeRequest, opts ...grpc.CallOption) (*GetPortSerdesAttributeResponse, error)
}

type portClient struct {
	cc grpc.ClientConnInterface
}

func NewPortClient(cc grpc.ClientConnInterface) PortClient {
	return &portClient{cc}
}

func (c *portClient) CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*CreatePortResponse, error) {
	out := new(CreatePortResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/CreatePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) RemovePort(ctx context.Context, in *RemovePortRequest, opts ...grpc.CallOption) (*RemovePortResponse, error) {
	out := new(RemovePortResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/RemovePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) SetPortAttribute(ctx context.Context, in *SetPortAttributeRequest, opts ...grpc.CallOption) (*SetPortAttributeResponse, error) {
	out := new(SetPortAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/SetPortAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetPortAttribute(ctx context.Context, in *GetPortAttributeRequest, opts ...grpc.CallOption) (*GetPortAttributeResponse, error) {
	out := new(GetPortAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/GetPortAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) CreatePortPool(ctx context.Context, in *CreatePortPoolRequest, opts ...grpc.CallOption) (*CreatePortPoolResponse, error) {
	out := new(CreatePortPoolResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/CreatePortPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) RemovePortPool(ctx context.Context, in *RemovePortPoolRequest, opts ...grpc.CallOption) (*RemovePortPoolResponse, error) {
	out := new(RemovePortPoolResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/RemovePortPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) SetPortPoolAttribute(ctx context.Context, in *SetPortPoolAttributeRequest, opts ...grpc.CallOption) (*SetPortPoolAttributeResponse, error) {
	out := new(SetPortPoolAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/SetPortPoolAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetPortPoolAttribute(ctx context.Context, in *GetPortPoolAttributeRequest, opts ...grpc.CallOption) (*GetPortPoolAttributeResponse, error) {
	out := new(GetPortPoolAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/GetPortPoolAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) CreatePortConnector(ctx context.Context, in *CreatePortConnectorRequest, opts ...grpc.CallOption) (*CreatePortConnectorResponse, error) {
	out := new(CreatePortConnectorResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/CreatePortConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) RemovePortConnector(ctx context.Context, in *RemovePortConnectorRequest, opts ...grpc.CallOption) (*RemovePortConnectorResponse, error) {
	out := new(RemovePortConnectorResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/RemovePortConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) SetPortConnectorAttribute(ctx context.Context, in *SetPortConnectorAttributeRequest, opts ...grpc.CallOption) (*SetPortConnectorAttributeResponse, error) {
	out := new(SetPortConnectorAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/SetPortConnectorAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetPortConnectorAttribute(ctx context.Context, in *GetPortConnectorAttributeRequest, opts ...grpc.CallOption) (*GetPortConnectorAttributeResponse, error) {
	out := new(GetPortConnectorAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/GetPortConnectorAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) CreatePortSerdes(ctx context.Context, in *CreatePortSerdesRequest, opts ...grpc.CallOption) (*CreatePortSerdesResponse, error) {
	out := new(CreatePortSerdesResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/CreatePortSerdes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) RemovePortSerdes(ctx context.Context, in *RemovePortSerdesRequest, opts ...grpc.CallOption) (*RemovePortSerdesResponse, error) {
	out := new(RemovePortSerdesResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/RemovePortSerdes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetPortSerdesAttribute(ctx context.Context, in *GetPortSerdesAttributeRequest, opts ...grpc.CallOption) (*GetPortSerdesAttributeResponse, error) {
	out := new(GetPortSerdesAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Port/GetPortSerdesAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServer is the server API for Port service.
type PortServer interface {
	CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error)
	RemovePort(context.Context, *RemovePortRequest) (*RemovePortResponse, error)
	SetPortAttribute(context.Context, *SetPortAttributeRequest) (*SetPortAttributeResponse, error)
	GetPortAttribute(context.Context, *GetPortAttributeRequest) (*GetPortAttributeResponse, error)
	CreatePortPool(context.Context, *CreatePortPoolRequest) (*CreatePortPoolResponse, error)
	RemovePortPool(context.Context, *RemovePortPoolRequest) (*RemovePortPoolResponse, error)
	SetPortPoolAttribute(context.Context, *SetPortPoolAttributeRequest) (*SetPortPoolAttributeResponse, error)
	GetPortPoolAttribute(context.Context, *GetPortPoolAttributeRequest) (*GetPortPoolAttributeResponse, error)
	CreatePortConnector(context.Context, *CreatePortConnectorRequest) (*CreatePortConnectorResponse, error)
	RemovePortConnector(context.Context, *RemovePortConnectorRequest) (*RemovePortConnectorResponse, error)
	SetPortConnectorAttribute(context.Context, *SetPortConnectorAttributeRequest) (*SetPortConnectorAttributeResponse, error)
	GetPortConnectorAttribute(context.Context, *GetPortConnectorAttributeRequest) (*GetPortConnectorAttributeResponse, error)
	CreatePortSerdes(context.Context, *CreatePortSerdesRequest) (*CreatePortSerdesResponse, error)
	RemovePortSerdes(context.Context, *RemovePortSerdesRequest) (*RemovePortSerdesResponse, error)
	GetPortSerdesAttribute(context.Context, *GetPortSerdesAttributeRequest) (*GetPortSerdesAttributeResponse, error)
}

// UnimplementedPortServer can be embedded to have forward compatible implementations.
type UnimplementedPortServer struct {
}

func (*UnimplementedPortServer) CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePort not implemented")
}
func (*UnimplementedPortServer) RemovePort(context.Context, *RemovePortRequest) (*RemovePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePort not implemented")
}
func (*UnimplementedPortServer) SetPortAttribute(context.Context, *SetPortAttributeRequest) (*SetPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPortAttribute not implemented")
}
func (*UnimplementedPortServer) GetPortAttribute(context.Context, *GetPortAttributeRequest) (*GetPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortAttribute not implemented")
}
func (*UnimplementedPortServer) CreatePortPool(context.Context, *CreatePortPoolRequest) (*CreatePortPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortPool not implemented")
}
func (*UnimplementedPortServer) RemovePortPool(context.Context, *RemovePortPoolRequest) (*RemovePortPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePortPool not implemented")
}
func (*UnimplementedPortServer) SetPortPoolAttribute(context.Context, *SetPortPoolAttributeRequest) (*SetPortPoolAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPortPoolAttribute not implemented")
}
func (*UnimplementedPortServer) GetPortPoolAttribute(context.Context, *GetPortPoolAttributeRequest) (*GetPortPoolAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortPoolAttribute not implemented")
}
func (*UnimplementedPortServer) CreatePortConnector(context.Context, *CreatePortConnectorRequest) (*CreatePortConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortConnector not implemented")
}
func (*UnimplementedPortServer) RemovePortConnector(context.Context, *RemovePortConnectorRequest) (*RemovePortConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePortConnector not implemented")
}
func (*UnimplementedPortServer) SetPortConnectorAttribute(context.Context, *SetPortConnectorAttributeRequest) (*SetPortConnectorAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPortConnectorAttribute not implemented")
}
func (*UnimplementedPortServer) GetPortConnectorAttribute(context.Context, *GetPortConnectorAttributeRequest) (*GetPortConnectorAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortConnectorAttribute not implemented")
}
func (*UnimplementedPortServer) CreatePortSerdes(context.Context, *CreatePortSerdesRequest) (*CreatePortSerdesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortSerdes not implemented")
}
func (*UnimplementedPortServer) RemovePortSerdes(context.Context, *RemovePortSerdesRequest) (*RemovePortSerdesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePortSerdes not implemented")
}
func (*UnimplementedPortServer) GetPortSerdesAttribute(context.Context, *GetPortSerdesAttributeRequest) (*GetPortSerdesAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortSerdesAttribute not implemented")
}

func RegisterPortServer(s *grpc.Server, srv PortServer) {
	s.RegisterService(&_Port_serviceDesc, srv)
}

func _Port_CreatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).CreatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/CreatePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).CreatePort(ctx, req.(*CreatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_RemovePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).RemovePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/RemovePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).RemovePort(ctx, req.(*RemovePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_SetPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).SetPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/SetPortAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).SetPortAttribute(ctx, req.(*SetPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/GetPortAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetPortAttribute(ctx, req.(*GetPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_CreatePortPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).CreatePortPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/CreatePortPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).CreatePortPool(ctx, req.(*CreatePortPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_RemovePortPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).RemovePortPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/RemovePortPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).RemovePortPool(ctx, req.(*RemovePortPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_SetPortPoolAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPortPoolAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).SetPortPoolAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/SetPortPoolAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).SetPortPoolAttribute(ctx, req.(*SetPortPoolAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetPortPoolAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortPoolAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetPortPoolAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/GetPortPoolAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetPortPoolAttribute(ctx, req.(*GetPortPoolAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_CreatePortConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).CreatePortConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/CreatePortConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).CreatePortConnector(ctx, req.(*CreatePortConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_RemovePortConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).RemovePortConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/RemovePortConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).RemovePortConnector(ctx, req.(*RemovePortConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_SetPortConnectorAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPortConnectorAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).SetPortConnectorAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/SetPortConnectorAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).SetPortConnectorAttribute(ctx, req.(*SetPortConnectorAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetPortConnectorAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortConnectorAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetPortConnectorAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/GetPortConnectorAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetPortConnectorAttribute(ctx, req.(*GetPortConnectorAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_CreatePortSerdes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortSerdesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).CreatePortSerdes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/CreatePortSerdes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).CreatePortSerdes(ctx, req.(*CreatePortSerdesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_RemovePortSerdes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortSerdesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).RemovePortSerdes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/RemovePortSerdes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).RemovePortSerdes(ctx, req.(*RemovePortSerdesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetPortSerdesAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortSerdesAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetPortSerdesAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Port/GetPortSerdesAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetPortSerdesAttribute(ctx, req.(*GetPortSerdesAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Port_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Port",
	HandlerType: (*PortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePort",
			Handler:    _Port_CreatePort_Handler,
		},
		{
			MethodName: "RemovePort",
			Handler:    _Port_RemovePort_Handler,
		},
		{
			MethodName: "SetPortAttribute",
			Handler:    _Port_SetPortAttribute_Handler,
		},
		{
			MethodName: "GetPortAttribute",
			Handler:    _Port_GetPortAttribute_Handler,
		},
		{
			MethodName: "CreatePortPool",
			Handler:    _Port_CreatePortPool_Handler,
		},
		{
			MethodName: "RemovePortPool",
			Handler:    _Port_RemovePortPool_Handler,
		},
		{
			MethodName: "SetPortPoolAttribute",
			Handler:    _Port_SetPortPoolAttribute_Handler,
		},
		{
			MethodName: "GetPortPoolAttribute",
			Handler:    _Port_GetPortPoolAttribute_Handler,
		},
		{
			MethodName: "CreatePortConnector",
			Handler:    _Port_CreatePortConnector_Handler,
		},
		{
			MethodName: "RemovePortConnector",
			Handler:    _Port_RemovePortConnector_Handler,
		},
		{
			MethodName: "SetPortConnectorAttribute",
			Handler:    _Port_SetPortConnectorAttribute_Handler,
		},
		{
			MethodName: "GetPortConnectorAttribute",
			Handler:    _Port_GetPortConnectorAttribute_Handler,
		},
		{
			MethodName: "CreatePortSerdes",
			Handler:    _Port_CreatePortSerdes_Handler,
		},
		{
			MethodName: "RemovePortSerdes",
			Handler:    _Port_RemovePortSerdes_Handler,
		},
		{
			MethodName: "GetPortSerdesAttribute",
			Handler:    _Port_GetPortSerdesAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/port.proto",
}
