// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/tunnel.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TunnelMapAttr int32

const (
	TunnelMapAttr_TUNNEL_MAP_ATTR_UNSPECIFIED TunnelMapAttr = 0
	TunnelMapAttr_TUNNEL_MAP_ATTR_TYPE        TunnelMapAttr = 1
	TunnelMapAttr_TUNNEL_MAP_ATTR_ENTRY_LIST  TunnelMapAttr = 2
)

// Enum value maps for TunnelMapAttr.
var (
	TunnelMapAttr_name = map[int32]string{
		0: "TUNNEL_MAP_ATTR_UNSPECIFIED",
		1: "TUNNEL_MAP_ATTR_TYPE",
		2: "TUNNEL_MAP_ATTR_ENTRY_LIST",
	}
	TunnelMapAttr_value = map[string]int32{
		"TUNNEL_MAP_ATTR_UNSPECIFIED": 0,
		"TUNNEL_MAP_ATTR_TYPE":        1,
		"TUNNEL_MAP_ATTR_ENTRY_LIST":  2,
	}
)

func (x TunnelMapAttr) Enum() *TunnelMapAttr {
	p := new(TunnelMapAttr)
	*p = x
	return p
}

func (x TunnelMapAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelMapAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tunnel_proto_enumTypes[0].Descriptor()
}

func (TunnelMapAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tunnel_proto_enumTypes[0]
}

func (x TunnelMapAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelMapAttr.Descriptor instead.
func (TunnelMapAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{0}
}

type TunnelAttr int32

const (
	TunnelAttr_TUNNEL_ATTR_UNSPECIFIED                        TunnelAttr = 0
	TunnelAttr_TUNNEL_ATTR_TYPE                               TunnelAttr = 1
	TunnelAttr_TUNNEL_ATTR_UNDERLAY_INTERFACE                 TunnelAttr = 2
	TunnelAttr_TUNNEL_ATTR_OVERLAY_INTERFACE                  TunnelAttr = 3
	TunnelAttr_TUNNEL_ATTR_PEER_MODE                          TunnelAttr = 4
	TunnelAttr_TUNNEL_ATTR_ENCAP_SRC_IP                       TunnelAttr = 5
	TunnelAttr_TUNNEL_ATTR_ENCAP_DST_IP                       TunnelAttr = 6
	TunnelAttr_TUNNEL_ATTR_ENCAP_TTL_MODE                     TunnelAttr = 7
	TunnelAttr_TUNNEL_ATTR_ENCAP_TTL_VAL                      TunnelAttr = 8
	TunnelAttr_TUNNEL_ATTR_ENCAP_DSCP_MODE                    TunnelAttr = 9
	TunnelAttr_TUNNEL_ATTR_ENCAP_DSCP_VAL                     TunnelAttr = 10
	TunnelAttr_TUNNEL_ATTR_ENCAP_GRE_KEY_VALID                TunnelAttr = 11
	TunnelAttr_TUNNEL_ATTR_ENCAP_GRE_KEY                      TunnelAttr = 12
	TunnelAttr_TUNNEL_ATTR_ENCAP_ECN_MODE                     TunnelAttr = 13
	TunnelAttr_TUNNEL_ATTR_ENCAP_MAPPERS                      TunnelAttr = 14
	TunnelAttr_TUNNEL_ATTR_DECAP_ECN_MODE                     TunnelAttr = 15
	TunnelAttr_TUNNEL_ATTR_DECAP_MAPPERS                      TunnelAttr = 16
	TunnelAttr_TUNNEL_ATTR_DECAP_TTL_MODE                     TunnelAttr = 17
	TunnelAttr_TUNNEL_ATTR_DECAP_DSCP_MODE                    TunnelAttr = 18
	TunnelAttr_TUNNEL_ATTR_TERM_TABLE_ENTRY_LIST              TunnelAttr = 19
	TunnelAttr_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION             TunnelAttr = 20
	TunnelAttr_TUNNEL_ATTR_VXLAN_UDP_SPORT_MODE               TunnelAttr = 21
	TunnelAttr_TUNNEL_ATTR_VXLAN_UDP_SPORT                    TunnelAttr = 22
	TunnelAttr_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK               TunnelAttr = 23
	TunnelAttr_TUNNEL_ATTR_SA_INDEX                           TunnelAttr = 24
	TunnelAttr_TUNNEL_ATTR_IPSEC_SA_PORT_LIST                 TunnelAttr = 25
	TunnelAttr_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP TunnelAttr = 26
	TunnelAttr_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP          TunnelAttr = 27
	TunnelAttr_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP           TunnelAttr = 28
	TunnelAttr_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP TunnelAttr = 29
	TunnelAttr_TUNNEL_ATTR_VXLAN_UDP_SPORT_SECURITY           TunnelAttr = 30
)

// Enum value maps for TunnelAttr.
var (
	TunnelAttr_name = map[int32]string{
		0:  "TUNNEL_ATTR_UNSPECIFIED",
		1:  "TUNNEL_ATTR_TYPE",
		2:  "TUNNEL_ATTR_UNDERLAY_INTERFACE",
		3:  "TUNNEL_ATTR_OVERLAY_INTERFACE",
		4:  "TUNNEL_ATTR_PEER_MODE",
		5:  "TUNNEL_ATTR_ENCAP_SRC_IP",
		6:  "TUNNEL_ATTR_ENCAP_DST_IP",
		7:  "TUNNEL_ATTR_ENCAP_TTL_MODE",
		8:  "TUNNEL_ATTR_ENCAP_TTL_VAL",
		9:  "TUNNEL_ATTR_ENCAP_DSCP_MODE",
		10: "TUNNEL_ATTR_ENCAP_DSCP_VAL",
		11: "TUNNEL_ATTR_ENCAP_GRE_KEY_VALID",
		12: "TUNNEL_ATTR_ENCAP_GRE_KEY",
		13: "TUNNEL_ATTR_ENCAP_ECN_MODE",
		14: "TUNNEL_ATTR_ENCAP_MAPPERS",
		15: "TUNNEL_ATTR_DECAP_ECN_MODE",
		16: "TUNNEL_ATTR_DECAP_MAPPERS",
		17: "TUNNEL_ATTR_DECAP_TTL_MODE",
		18: "TUNNEL_ATTR_DECAP_DSCP_MODE",
		19: "TUNNEL_ATTR_TERM_TABLE_ENTRY_LIST",
		20: "TUNNEL_ATTR_LOOPBACK_PACKET_ACTION",
		21: "TUNNEL_ATTR_VXLAN_UDP_SPORT_MODE",
		22: "TUNNEL_ATTR_VXLAN_UDP_SPORT",
		23: "TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK",
		24: "TUNNEL_ATTR_SA_INDEX",
		25: "TUNNEL_ATTR_IPSEC_SA_PORT_LIST",
		26: "TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP",
		27: "TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP",
		28: "TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP",
		29: "TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP",
		30: "TUNNEL_ATTR_VXLAN_UDP_SPORT_SECURITY",
	}
	TunnelAttr_value = map[string]int32{
		"TUNNEL_ATTR_UNSPECIFIED":                        0,
		"TUNNEL_ATTR_TYPE":                               1,
		"TUNNEL_ATTR_UNDERLAY_INTERFACE":                 2,
		"TUNNEL_ATTR_OVERLAY_INTERFACE":                  3,
		"TUNNEL_ATTR_PEER_MODE":                          4,
		"TUNNEL_ATTR_ENCAP_SRC_IP":                       5,
		"TUNNEL_ATTR_ENCAP_DST_IP":                       6,
		"TUNNEL_ATTR_ENCAP_TTL_MODE":                     7,
		"TUNNEL_ATTR_ENCAP_TTL_VAL":                      8,
		"TUNNEL_ATTR_ENCAP_DSCP_MODE":                    9,
		"TUNNEL_ATTR_ENCAP_DSCP_VAL":                     10,
		"TUNNEL_ATTR_ENCAP_GRE_KEY_VALID":                11,
		"TUNNEL_ATTR_ENCAP_GRE_KEY":                      12,
		"TUNNEL_ATTR_ENCAP_ECN_MODE":                     13,
		"TUNNEL_ATTR_ENCAP_MAPPERS":                      14,
		"TUNNEL_ATTR_DECAP_ECN_MODE":                     15,
		"TUNNEL_ATTR_DECAP_MAPPERS":                      16,
		"TUNNEL_ATTR_DECAP_TTL_MODE":                     17,
		"TUNNEL_ATTR_DECAP_DSCP_MODE":                    18,
		"TUNNEL_ATTR_TERM_TABLE_ENTRY_LIST":              19,
		"TUNNEL_ATTR_LOOPBACK_PACKET_ACTION":             20,
		"TUNNEL_ATTR_VXLAN_UDP_SPORT_MODE":               21,
		"TUNNEL_ATTR_VXLAN_UDP_SPORT":                    22,
		"TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK":               23,
		"TUNNEL_ATTR_SA_INDEX":                           24,
		"TUNNEL_ATTR_IPSEC_SA_PORT_LIST":                 25,
		"TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP": 26,
		"TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP":          27,
		"TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP":           28,
		"TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP": 29,
		"TUNNEL_ATTR_VXLAN_UDP_SPORT_SECURITY":           30,
	}
)

func (x TunnelAttr) Enum() *TunnelAttr {
	p := new(TunnelAttr)
	*p = x
	return p
}

func (x TunnelAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tunnel_proto_enumTypes[1].Descriptor()
}

func (TunnelAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tunnel_proto_enumTypes[1]
}

func (x TunnelAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelAttr.Descriptor instead.
func (TunnelAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{1}
}

type TunnelTermTableEntryAttr int32

const (
	TunnelTermTableEntryAttr_TUNNEL_TERM_TABLE_ENTRY_ATTR_UNSPECIFIED      TunnelTermTableEntryAttr = 0
	TunnelTermTableEntryAttr_TUNNEL_TERM_TABLE_ENTRY_ATTR_VR_ID            TunnelTermTableEntryAttr = 1
	TunnelTermTableEntryAttr_TUNNEL_TERM_TABLE_ENTRY_ATTR_TYPE             TunnelTermTableEntryAttr = 2
	TunnelTermTableEntryAttr_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP           TunnelTermTableEntryAttr = 3
	TunnelTermTableEntryAttr_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP_MASK      TunnelTermTableEntryAttr = 4
	TunnelTermTableEntryAttr_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP           TunnelTermTableEntryAttr = 5
	TunnelTermTableEntryAttr_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP_MASK      TunnelTermTableEntryAttr = 6
	TunnelTermTableEntryAttr_TUNNEL_TERM_TABLE_ENTRY_ATTR_TUNNEL_TYPE      TunnelTermTableEntryAttr = 7
	TunnelTermTableEntryAttr_TUNNEL_TERM_TABLE_ENTRY_ATTR_ACTION_TUNNEL_ID TunnelTermTableEntryAttr = 8
	TunnelTermTableEntryAttr_TUNNEL_TERM_TABLE_ENTRY_ATTR_IP_ADDR_FAMILY   TunnelTermTableEntryAttr = 9
	TunnelTermTableEntryAttr_TUNNEL_TERM_TABLE_ENTRY_ATTR_IPSEC_VERIFIED   TunnelTermTableEntryAttr = 10
)

// Enum value maps for TunnelTermTableEntryAttr.
var (
	TunnelTermTableEntryAttr_name = map[int32]string{
		0:  "TUNNEL_TERM_TABLE_ENTRY_ATTR_UNSPECIFIED",
		1:  "TUNNEL_TERM_TABLE_ENTRY_ATTR_VR_ID",
		2:  "TUNNEL_TERM_TABLE_ENTRY_ATTR_TYPE",
		3:  "TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP",
		4:  "TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP_MASK",
		5:  "TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP",
		6:  "TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP_MASK",
		7:  "TUNNEL_TERM_TABLE_ENTRY_ATTR_TUNNEL_TYPE",
		8:  "TUNNEL_TERM_TABLE_ENTRY_ATTR_ACTION_TUNNEL_ID",
		9:  "TUNNEL_TERM_TABLE_ENTRY_ATTR_IP_ADDR_FAMILY",
		10: "TUNNEL_TERM_TABLE_ENTRY_ATTR_IPSEC_VERIFIED",
	}
	TunnelTermTableEntryAttr_value = map[string]int32{
		"TUNNEL_TERM_TABLE_ENTRY_ATTR_UNSPECIFIED":      0,
		"TUNNEL_TERM_TABLE_ENTRY_ATTR_VR_ID":            1,
		"TUNNEL_TERM_TABLE_ENTRY_ATTR_TYPE":             2,
		"TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP":           3,
		"TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP_MASK":      4,
		"TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP":           5,
		"TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP_MASK":      6,
		"TUNNEL_TERM_TABLE_ENTRY_ATTR_TUNNEL_TYPE":      7,
		"TUNNEL_TERM_TABLE_ENTRY_ATTR_ACTION_TUNNEL_ID": 8,
		"TUNNEL_TERM_TABLE_ENTRY_ATTR_IP_ADDR_FAMILY":   9,
		"TUNNEL_TERM_TABLE_ENTRY_ATTR_IPSEC_VERIFIED":   10,
	}
)

func (x TunnelTermTableEntryAttr) Enum() *TunnelTermTableEntryAttr {
	p := new(TunnelTermTableEntryAttr)
	*p = x
	return p
}

func (x TunnelTermTableEntryAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelTermTableEntryAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tunnel_proto_enumTypes[2].Descriptor()
}

func (TunnelTermTableEntryAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tunnel_proto_enumTypes[2]
}

func (x TunnelTermTableEntryAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelTermTableEntryAttr.Descriptor instead.
func (TunnelTermTableEntryAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{2}
}

type TunnelMapEntryAttr int32

const (
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_UNSPECIFIED             TunnelMapEntryAttr = 0
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP_TYPE         TunnelMapEntryAttr = 1
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP              TunnelMapEntryAttr = 2
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_OECN_KEY                TunnelMapEntryAttr = 3
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_OECN_VALUE              TunnelMapEntryAttr = 4
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_UECN_KEY                TunnelMapEntryAttr = 5
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_UECN_VALUE              TunnelMapEntryAttr = 6
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_KEY             TunnelMapEntryAttr = 7
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_VALUE           TunnelMapEntryAttr = 8
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_KEY              TunnelMapEntryAttr = 9
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_VALUE            TunnelMapEntryAttr = 10
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_KEY           TunnelMapEntryAttr = 11
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_VALUE         TunnelMapEntryAttr = 12
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_KEY   TunnelMapEntryAttr = 13
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_VALUE TunnelMapEntryAttr = 14
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_VSID_ID_KEY             TunnelMapEntryAttr = 15
	TunnelMapEntryAttr_TUNNEL_MAP_ENTRY_ATTR_VSID_ID_VALUE           TunnelMapEntryAttr = 16
)

// Enum value maps for TunnelMapEntryAttr.
var (
	TunnelMapEntryAttr_name = map[int32]string{
		0:  "TUNNEL_MAP_ENTRY_ATTR_UNSPECIFIED",
		1:  "TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP_TYPE",
		2:  "TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP",
		3:  "TUNNEL_MAP_ENTRY_ATTR_OECN_KEY",
		4:  "TUNNEL_MAP_ENTRY_ATTR_OECN_VALUE",
		5:  "TUNNEL_MAP_ENTRY_ATTR_UECN_KEY",
		6:  "TUNNEL_MAP_ENTRY_ATTR_UECN_VALUE",
		7:  "TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_KEY",
		8:  "TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_VALUE",
		9:  "TUNNEL_MAP_ENTRY_ATTR_VNI_ID_KEY",
		10: "TUNNEL_MAP_ENTRY_ATTR_VNI_ID_VALUE",
		11: "TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_KEY",
		12: "TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_VALUE",
		13: "TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_KEY",
		14: "TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_VALUE",
		15: "TUNNEL_MAP_ENTRY_ATTR_VSID_ID_KEY",
		16: "TUNNEL_MAP_ENTRY_ATTR_VSID_ID_VALUE",
	}
	TunnelMapEntryAttr_value = map[string]int32{
		"TUNNEL_MAP_ENTRY_ATTR_UNSPECIFIED":             0,
		"TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP_TYPE":         1,
		"TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP":              2,
		"TUNNEL_MAP_ENTRY_ATTR_OECN_KEY":                3,
		"TUNNEL_MAP_ENTRY_ATTR_OECN_VALUE":              4,
		"TUNNEL_MAP_ENTRY_ATTR_UECN_KEY":                5,
		"TUNNEL_MAP_ENTRY_ATTR_UECN_VALUE":              6,
		"TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_KEY":             7,
		"TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_VALUE":           8,
		"TUNNEL_MAP_ENTRY_ATTR_VNI_ID_KEY":              9,
		"TUNNEL_MAP_ENTRY_ATTR_VNI_ID_VALUE":            10,
		"TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_KEY":           11,
		"TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_VALUE":         12,
		"TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_KEY":   13,
		"TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_VALUE": 14,
		"TUNNEL_MAP_ENTRY_ATTR_VSID_ID_KEY":             15,
		"TUNNEL_MAP_ENTRY_ATTR_VSID_ID_VALUE":           16,
	}
)

func (x TunnelMapEntryAttr) Enum() *TunnelMapEntryAttr {
	p := new(TunnelMapEntryAttr)
	*p = x
	return p
}

func (x TunnelMapEntryAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelMapEntryAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_tunnel_proto_enumTypes[3].Descriptor()
}

func (TunnelMapEntryAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_tunnel_proto_enumTypes[3]
}

func (x TunnelMapEntryAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelMapEntryAttr.Descriptor instead.
func (TunnelMapEntryAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{3}
}

type CreateTunnelMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch uint64         `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type   *TunnelMapType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.TunnelMapType,oneof" json:"type,omitempty"`
}

func (x *CreateTunnelMapRequest) Reset() {
	*x = CreateTunnelMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelMapRequest) ProtoMessage() {}

func (x *CreateTunnelMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelMapRequest.ProtoReflect.Descriptor instead.
func (*CreateTunnelMapRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTunnelMapRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTunnelMapRequest) GetType() TunnelMapType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TunnelMapType_TUNNEL_MAP_TYPE_UNSPECIFIED
}

type CreateTunnelMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTunnelMapResponse) Reset() {
	*x = CreateTunnelMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelMapResponse) ProtoMessage() {}

func (x *CreateTunnelMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelMapResponse.ProtoReflect.Descriptor instead.
func (*CreateTunnelMapResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTunnelMapResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTunnelMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTunnelMapRequest) Reset() {
	*x = RemoveTunnelMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTunnelMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTunnelMapRequest) ProtoMessage() {}

func (x *RemoveTunnelMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTunnelMapRequest.ProtoReflect.Descriptor instead.
func (*RemoveTunnelMapRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveTunnelMapRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTunnelMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTunnelMapResponse) Reset() {
	*x = RemoveTunnelMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTunnelMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTunnelMapResponse) ProtoMessage() {}

func (x *RemoveTunnelMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTunnelMapResponse.ProtoReflect.Descriptor instead.
func (*RemoveTunnelMapResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{3}
}

type GetTunnelMapAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64          `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TunnelMapAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TunnelMapAttr" json:"attr_type,omitempty"`
}

func (x *GetTunnelMapAttributeRequest) Reset() {
	*x = GetTunnelMapAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelMapAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelMapAttributeRequest) ProtoMessage() {}

func (x *GetTunnelMapAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelMapAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTunnelMapAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{4}
}

func (x *GetTunnelMapAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTunnelMapAttributeRequest) GetAttrType() []TunnelMapAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTunnelMapAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TunnelMapAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTunnelMapAttributeResponse) Reset() {
	*x = GetTunnelMapAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelMapAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelMapAttributeResponse) ProtoMessage() {}

func (x *GetTunnelMapAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelMapAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTunnelMapAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *GetTunnelMapAttributeResponse) GetAttr() *TunnelMapAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                       uint64                   `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type                         *TunnelType              `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.TunnelType,oneof" json:"type,omitempty"`
	UnderlayInterface            *uint64                  `protobuf:"varint,3,opt,name=underlay_interface,json=underlayInterface,proto3,oneof" json:"underlay_interface,omitempty"`
	OverlayInterface             *uint64                  `protobuf:"varint,4,opt,name=overlay_interface,json=overlayInterface,proto3,oneof" json:"overlay_interface,omitempty"`
	PeerMode                     *TunnelPeerMode          `protobuf:"varint,5,opt,name=peer_mode,json=peerMode,proto3,enum=lemming.dataplane.sai.TunnelPeerMode,oneof" json:"peer_mode,omitempty"`
	EncapSrcIp                   []byte                   `protobuf:"bytes,6,opt,name=encap_src_ip,json=encapSrcIp,proto3,oneof" json:"encap_src_ip,omitempty"`
	EncapDstIp                   []byte                   `protobuf:"bytes,7,opt,name=encap_dst_ip,json=encapDstIp,proto3,oneof" json:"encap_dst_ip,omitempty"`
	EncapTtlMode                 *TunnelTtlMode           `protobuf:"varint,8,opt,name=encap_ttl_mode,json=encapTtlMode,proto3,enum=lemming.dataplane.sai.TunnelTtlMode,oneof" json:"encap_ttl_mode,omitempty"`
	EncapTtlVal                  *uint32                  `protobuf:"varint,9,opt,name=encap_ttl_val,json=encapTtlVal,proto3,oneof" json:"encap_ttl_val,omitempty"`
	EncapDscpMode                *TunnelDscpMode          `protobuf:"varint,10,opt,name=encap_dscp_mode,json=encapDscpMode,proto3,enum=lemming.dataplane.sai.TunnelDscpMode,oneof" json:"encap_dscp_mode,omitempty"`
	EncapDscpVal                 *uint32                  `protobuf:"varint,11,opt,name=encap_dscp_val,json=encapDscpVal,proto3,oneof" json:"encap_dscp_val,omitempty"`
	EncapGreKeyValid             *bool                    `protobuf:"varint,12,opt,name=encap_gre_key_valid,json=encapGreKeyValid,proto3,oneof" json:"encap_gre_key_valid,omitempty"`
	EncapGreKey                  *uint32                  `protobuf:"varint,13,opt,name=encap_gre_key,json=encapGreKey,proto3,oneof" json:"encap_gre_key,omitempty"`
	EncapEcnMode                 *TunnelEncapEcnMode      `protobuf:"varint,14,opt,name=encap_ecn_mode,json=encapEcnMode,proto3,enum=lemming.dataplane.sai.TunnelEncapEcnMode,oneof" json:"encap_ecn_mode,omitempty"`
	EncapMappers                 []uint64                 `protobuf:"varint,15,rep,packed,name=encap_mappers,json=encapMappers,proto3" json:"encap_mappers,omitempty"`
	DecapEcnMode                 *TunnelDecapEcnMode      `protobuf:"varint,16,opt,name=decap_ecn_mode,json=decapEcnMode,proto3,enum=lemming.dataplane.sai.TunnelDecapEcnMode,oneof" json:"decap_ecn_mode,omitempty"`
	DecapMappers                 []uint64                 `protobuf:"varint,17,rep,packed,name=decap_mappers,json=decapMappers,proto3" json:"decap_mappers,omitempty"`
	DecapTtlMode                 *TunnelTtlMode           `protobuf:"varint,18,opt,name=decap_ttl_mode,json=decapTtlMode,proto3,enum=lemming.dataplane.sai.TunnelTtlMode,oneof" json:"decap_ttl_mode,omitempty"`
	DecapDscpMode                *TunnelDscpMode          `protobuf:"varint,19,opt,name=decap_dscp_mode,json=decapDscpMode,proto3,enum=lemming.dataplane.sai.TunnelDscpMode,oneof" json:"decap_dscp_mode,omitempty"`
	LoopbackPacketAction         *PacketAction            `protobuf:"varint,20,opt,name=loopback_packet_action,json=loopbackPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"loopback_packet_action,omitempty"`
	VxlanUdpSportMode            *TunnelVxlanUdpSportMode `protobuf:"varint,21,opt,name=vxlan_udp_sport_mode,json=vxlanUdpSportMode,proto3,enum=lemming.dataplane.sai.TunnelVxlanUdpSportMode,oneof" json:"vxlan_udp_sport_mode,omitempty"`
	VxlanUdpSport                *uint32                  `protobuf:"varint,22,opt,name=vxlan_udp_sport,json=vxlanUdpSport,proto3,oneof" json:"vxlan_udp_sport,omitempty"`
	VxlanUdpSportMask            *uint32                  `protobuf:"varint,23,opt,name=vxlan_udp_sport_mask,json=vxlanUdpSportMask,proto3,oneof" json:"vxlan_udp_sport_mask,omitempty"`
	SaIndex                      *uint32                  `protobuf:"varint,24,opt,name=sa_index,json=saIndex,proto3,oneof" json:"sa_index,omitempty"`
	IpsecSaPortList              []uint64                 `protobuf:"varint,25,rep,packed,name=ipsec_sa_port_list,json=ipsecSaPortList,proto3" json:"ipsec_sa_port_list,omitempty"`
	EncapQosTcAndColorToDscpMap  *uint64                  `protobuf:"varint,26,opt,name=encap_qos_tc_and_color_to_dscp_map,json=encapQosTcAndColorToDscpMap,proto3,oneof" json:"encap_qos_tc_and_color_to_dscp_map,omitempty"`
	EncapQosTcToQueueMap         *uint64                  `protobuf:"varint,27,opt,name=encap_qos_tc_to_queue_map,json=encapQosTcToQueueMap,proto3,oneof" json:"encap_qos_tc_to_queue_map,omitempty"`
	DecapQosDscpToTcMap          *uint64                  `protobuf:"varint,28,opt,name=decap_qos_dscp_to_tc_map,json=decapQosDscpToTcMap,proto3,oneof" json:"decap_qos_dscp_to_tc_map,omitempty"`
	DecapQosTcToPriorityGroupMap *uint64                  `protobuf:"varint,29,opt,name=decap_qos_tc_to_priority_group_map,json=decapQosTcToPriorityGroupMap,proto3,oneof" json:"decap_qos_tc_to_priority_group_map,omitempty"`
	VxlanUdpSportSecurity        *bool                    `protobuf:"varint,30,opt,name=vxlan_udp_sport_security,json=vxlanUdpSportSecurity,proto3,oneof" json:"vxlan_udp_sport_security,omitempty"`
}

func (x *CreateTunnelRequest) Reset() {
	*x = CreateTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelRequest) ProtoMessage() {}

func (x *CreateTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelRequest.ProtoReflect.Descriptor instead.
func (*CreateTunnelRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTunnelRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTunnelRequest) GetType() TunnelType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TunnelType_TUNNEL_TYPE_UNSPECIFIED
}

func (x *CreateTunnelRequest) GetUnderlayInterface() uint64 {
	if x != nil && x.UnderlayInterface != nil {
		return *x.UnderlayInterface
	}
	return 0
}

func (x *CreateTunnelRequest) GetOverlayInterface() uint64 {
	if x != nil && x.OverlayInterface != nil {
		return *x.OverlayInterface
	}
	return 0
}

func (x *CreateTunnelRequest) GetPeerMode() TunnelPeerMode {
	if x != nil && x.PeerMode != nil {
		return *x.PeerMode
	}
	return TunnelPeerMode_TUNNEL_PEER_MODE_UNSPECIFIED
}

func (x *CreateTunnelRequest) GetEncapSrcIp() []byte {
	if x != nil {
		return x.EncapSrcIp
	}
	return nil
}

func (x *CreateTunnelRequest) GetEncapDstIp() []byte {
	if x != nil {
		return x.EncapDstIp
	}
	return nil
}

func (x *CreateTunnelRequest) GetEncapTtlMode() TunnelTtlMode {
	if x != nil && x.EncapTtlMode != nil {
		return *x.EncapTtlMode
	}
	return TunnelTtlMode_TUNNEL_TTL_MODE_UNSPECIFIED
}

func (x *CreateTunnelRequest) GetEncapTtlVal() uint32 {
	if x != nil && x.EncapTtlVal != nil {
		return *x.EncapTtlVal
	}
	return 0
}

func (x *CreateTunnelRequest) GetEncapDscpMode() TunnelDscpMode {
	if x != nil && x.EncapDscpMode != nil {
		return *x.EncapDscpMode
	}
	return TunnelDscpMode_TUNNEL_DSCP_MODE_UNSPECIFIED
}

func (x *CreateTunnelRequest) GetEncapDscpVal() uint32 {
	if x != nil && x.EncapDscpVal != nil {
		return *x.EncapDscpVal
	}
	return 0
}

func (x *CreateTunnelRequest) GetEncapGreKeyValid() bool {
	if x != nil && x.EncapGreKeyValid != nil {
		return *x.EncapGreKeyValid
	}
	return false
}

func (x *CreateTunnelRequest) GetEncapGreKey() uint32 {
	if x != nil && x.EncapGreKey != nil {
		return *x.EncapGreKey
	}
	return 0
}

func (x *CreateTunnelRequest) GetEncapEcnMode() TunnelEncapEcnMode {
	if x != nil && x.EncapEcnMode != nil {
		return *x.EncapEcnMode
	}
	return TunnelEncapEcnMode_TUNNEL_ENCAP_ECN_MODE_UNSPECIFIED
}

func (x *CreateTunnelRequest) GetEncapMappers() []uint64 {
	if x != nil {
		return x.EncapMappers
	}
	return nil
}

func (x *CreateTunnelRequest) GetDecapEcnMode() TunnelDecapEcnMode {
	if x != nil && x.DecapEcnMode != nil {
		return *x.DecapEcnMode
	}
	return TunnelDecapEcnMode_TUNNEL_DECAP_ECN_MODE_UNSPECIFIED
}

func (x *CreateTunnelRequest) GetDecapMappers() []uint64 {
	if x != nil {
		return x.DecapMappers
	}
	return nil
}

func (x *CreateTunnelRequest) GetDecapTtlMode() TunnelTtlMode {
	if x != nil && x.DecapTtlMode != nil {
		return *x.DecapTtlMode
	}
	return TunnelTtlMode_TUNNEL_TTL_MODE_UNSPECIFIED
}

func (x *CreateTunnelRequest) GetDecapDscpMode() TunnelDscpMode {
	if x != nil && x.DecapDscpMode != nil {
		return *x.DecapDscpMode
	}
	return TunnelDscpMode_TUNNEL_DSCP_MODE_UNSPECIFIED
}

func (x *CreateTunnelRequest) GetLoopbackPacketAction() PacketAction {
	if x != nil && x.LoopbackPacketAction != nil {
		return *x.LoopbackPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateTunnelRequest) GetVxlanUdpSportMode() TunnelVxlanUdpSportMode {
	if x != nil && x.VxlanUdpSportMode != nil {
		return *x.VxlanUdpSportMode
	}
	return TunnelVxlanUdpSportMode_TUNNEL_VXLAN_UDP_SPORT_MODE_UNSPECIFIED
}

func (x *CreateTunnelRequest) GetVxlanUdpSport() uint32 {
	if x != nil && x.VxlanUdpSport != nil {
		return *x.VxlanUdpSport
	}
	return 0
}

func (x *CreateTunnelRequest) GetVxlanUdpSportMask() uint32 {
	if x != nil && x.VxlanUdpSportMask != nil {
		return *x.VxlanUdpSportMask
	}
	return 0
}

func (x *CreateTunnelRequest) GetSaIndex() uint32 {
	if x != nil && x.SaIndex != nil {
		return *x.SaIndex
	}
	return 0
}

func (x *CreateTunnelRequest) GetIpsecSaPortList() []uint64 {
	if x != nil {
		return x.IpsecSaPortList
	}
	return nil
}

func (x *CreateTunnelRequest) GetEncapQosTcAndColorToDscpMap() uint64 {
	if x != nil && x.EncapQosTcAndColorToDscpMap != nil {
		return *x.EncapQosTcAndColorToDscpMap
	}
	return 0
}

func (x *CreateTunnelRequest) GetEncapQosTcToQueueMap() uint64 {
	if x != nil && x.EncapQosTcToQueueMap != nil {
		return *x.EncapQosTcToQueueMap
	}
	return 0
}

func (x *CreateTunnelRequest) GetDecapQosDscpToTcMap() uint64 {
	if x != nil && x.DecapQosDscpToTcMap != nil {
		return *x.DecapQosDscpToTcMap
	}
	return 0
}

func (x *CreateTunnelRequest) GetDecapQosTcToPriorityGroupMap() uint64 {
	if x != nil && x.DecapQosTcToPriorityGroupMap != nil {
		return *x.DecapQosTcToPriorityGroupMap
	}
	return 0
}

func (x *CreateTunnelRequest) GetVxlanUdpSportSecurity() bool {
	if x != nil && x.VxlanUdpSportSecurity != nil {
		return *x.VxlanUdpSportSecurity
	}
	return false
}

type CreateTunnelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTunnelResponse) Reset() {
	*x = CreateTunnelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelResponse) ProtoMessage() {}

func (x *CreateTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelResponse.ProtoReflect.Descriptor instead.
func (*CreateTunnelResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTunnelResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTunnelRequest) Reset() {
	*x = RemoveTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTunnelRequest) ProtoMessage() {}

func (x *RemoveTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTunnelRequest.ProtoReflect.Descriptor instead.
func (*RemoveTunnelRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveTunnelRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTunnelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTunnelResponse) Reset() {
	*x = RemoveTunnelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTunnelResponse) ProtoMessage() {}

func (x *RemoveTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTunnelResponse.ProtoReflect.Descriptor instead.
func (*RemoveTunnelResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{9}
}

type SetTunnelAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                          uint64                   `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	EncapTtlMode                 *TunnelTtlMode           `protobuf:"varint,2,opt,name=encap_ttl_mode,json=encapTtlMode,proto3,enum=lemming.dataplane.sai.TunnelTtlMode,oneof" json:"encap_ttl_mode,omitempty"`
	EncapTtlVal                  *uint32                  `protobuf:"varint,3,opt,name=encap_ttl_val,json=encapTtlVal,proto3,oneof" json:"encap_ttl_val,omitempty"`
	EncapDscpMode                *TunnelDscpMode          `protobuf:"varint,4,opt,name=encap_dscp_mode,json=encapDscpMode,proto3,enum=lemming.dataplane.sai.TunnelDscpMode,oneof" json:"encap_dscp_mode,omitempty"`
	EncapDscpVal                 *uint32                  `protobuf:"varint,5,opt,name=encap_dscp_val,json=encapDscpVal,proto3,oneof" json:"encap_dscp_val,omitempty"`
	EncapGreKey                  *uint32                  `protobuf:"varint,6,opt,name=encap_gre_key,json=encapGreKey,proto3,oneof" json:"encap_gre_key,omitempty"`
	DecapTtlMode                 *TunnelTtlMode           `protobuf:"varint,7,opt,name=decap_ttl_mode,json=decapTtlMode,proto3,enum=lemming.dataplane.sai.TunnelTtlMode,oneof" json:"decap_ttl_mode,omitempty"`
	DecapDscpMode                *TunnelDscpMode          `protobuf:"varint,8,opt,name=decap_dscp_mode,json=decapDscpMode,proto3,enum=lemming.dataplane.sai.TunnelDscpMode,oneof" json:"decap_dscp_mode,omitempty"`
	LoopbackPacketAction         *PacketAction            `protobuf:"varint,9,opt,name=loopback_packet_action,json=loopbackPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"loopback_packet_action,omitempty"`
	VxlanUdpSportMode            *TunnelVxlanUdpSportMode `protobuf:"varint,10,opt,name=vxlan_udp_sport_mode,json=vxlanUdpSportMode,proto3,enum=lemming.dataplane.sai.TunnelVxlanUdpSportMode,oneof" json:"vxlan_udp_sport_mode,omitempty"`
	VxlanUdpSport                *uint32                  `protobuf:"varint,11,opt,name=vxlan_udp_sport,json=vxlanUdpSport,proto3,oneof" json:"vxlan_udp_sport,omitempty"`
	VxlanUdpSportMask            *uint32                  `protobuf:"varint,12,opt,name=vxlan_udp_sport_mask,json=vxlanUdpSportMask,proto3,oneof" json:"vxlan_udp_sport_mask,omitempty"`
	SaIndex                      *uint32                  `protobuf:"varint,13,opt,name=sa_index,json=saIndex,proto3,oneof" json:"sa_index,omitempty"`
	IpsecSaPortList              []uint64                 `protobuf:"varint,14,rep,packed,name=ipsec_sa_port_list,json=ipsecSaPortList,proto3" json:"ipsec_sa_port_list,omitempty"`
	EncapQosTcAndColorToDscpMap  *uint64                  `protobuf:"varint,15,opt,name=encap_qos_tc_and_color_to_dscp_map,json=encapQosTcAndColorToDscpMap,proto3,oneof" json:"encap_qos_tc_and_color_to_dscp_map,omitempty"`
	EncapQosTcToQueueMap         *uint64                  `protobuf:"varint,16,opt,name=encap_qos_tc_to_queue_map,json=encapQosTcToQueueMap,proto3,oneof" json:"encap_qos_tc_to_queue_map,omitempty"`
	DecapQosDscpToTcMap          *uint64                  `protobuf:"varint,17,opt,name=decap_qos_dscp_to_tc_map,json=decapQosDscpToTcMap,proto3,oneof" json:"decap_qos_dscp_to_tc_map,omitempty"`
	DecapQosTcToPriorityGroupMap *uint64                  `protobuf:"varint,18,opt,name=decap_qos_tc_to_priority_group_map,json=decapQosTcToPriorityGroupMap,proto3,oneof" json:"decap_qos_tc_to_priority_group_map,omitempty"`
	VxlanUdpSportSecurity        *bool                    `protobuf:"varint,19,opt,name=vxlan_udp_sport_security,json=vxlanUdpSportSecurity,proto3,oneof" json:"vxlan_udp_sport_security,omitempty"`
}

func (x *SetTunnelAttributeRequest) Reset() {
	*x = SetTunnelAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTunnelAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTunnelAttributeRequest) ProtoMessage() {}

func (x *SetTunnelAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTunnelAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTunnelAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{10}
}

func (x *SetTunnelAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTunnelAttributeRequest) GetEncapTtlMode() TunnelTtlMode {
	if x != nil && x.EncapTtlMode != nil {
		return *x.EncapTtlMode
	}
	return TunnelTtlMode_TUNNEL_TTL_MODE_UNSPECIFIED
}

func (x *SetTunnelAttributeRequest) GetEncapTtlVal() uint32 {
	if x != nil && x.EncapTtlVal != nil {
		return *x.EncapTtlVal
	}
	return 0
}

func (x *SetTunnelAttributeRequest) GetEncapDscpMode() TunnelDscpMode {
	if x != nil && x.EncapDscpMode != nil {
		return *x.EncapDscpMode
	}
	return TunnelDscpMode_TUNNEL_DSCP_MODE_UNSPECIFIED
}

func (x *SetTunnelAttributeRequest) GetEncapDscpVal() uint32 {
	if x != nil && x.EncapDscpVal != nil {
		return *x.EncapDscpVal
	}
	return 0
}

func (x *SetTunnelAttributeRequest) GetEncapGreKey() uint32 {
	if x != nil && x.EncapGreKey != nil {
		return *x.EncapGreKey
	}
	return 0
}

func (x *SetTunnelAttributeRequest) GetDecapTtlMode() TunnelTtlMode {
	if x != nil && x.DecapTtlMode != nil {
		return *x.DecapTtlMode
	}
	return TunnelTtlMode_TUNNEL_TTL_MODE_UNSPECIFIED
}

func (x *SetTunnelAttributeRequest) GetDecapDscpMode() TunnelDscpMode {
	if x != nil && x.DecapDscpMode != nil {
		return *x.DecapDscpMode
	}
	return TunnelDscpMode_TUNNEL_DSCP_MODE_UNSPECIFIED
}

func (x *SetTunnelAttributeRequest) GetLoopbackPacketAction() PacketAction {
	if x != nil && x.LoopbackPacketAction != nil {
		return *x.LoopbackPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetTunnelAttributeRequest) GetVxlanUdpSportMode() TunnelVxlanUdpSportMode {
	if x != nil && x.VxlanUdpSportMode != nil {
		return *x.VxlanUdpSportMode
	}
	return TunnelVxlanUdpSportMode_TUNNEL_VXLAN_UDP_SPORT_MODE_UNSPECIFIED
}

func (x *SetTunnelAttributeRequest) GetVxlanUdpSport() uint32 {
	if x != nil && x.VxlanUdpSport != nil {
		return *x.VxlanUdpSport
	}
	return 0
}

func (x *SetTunnelAttributeRequest) GetVxlanUdpSportMask() uint32 {
	if x != nil && x.VxlanUdpSportMask != nil {
		return *x.VxlanUdpSportMask
	}
	return 0
}

func (x *SetTunnelAttributeRequest) GetSaIndex() uint32 {
	if x != nil && x.SaIndex != nil {
		return *x.SaIndex
	}
	return 0
}

func (x *SetTunnelAttributeRequest) GetIpsecSaPortList() []uint64 {
	if x != nil {
		return x.IpsecSaPortList
	}
	return nil
}

func (x *SetTunnelAttributeRequest) GetEncapQosTcAndColorToDscpMap() uint64 {
	if x != nil && x.EncapQosTcAndColorToDscpMap != nil {
		return *x.EncapQosTcAndColorToDscpMap
	}
	return 0
}

func (x *SetTunnelAttributeRequest) GetEncapQosTcToQueueMap() uint64 {
	if x != nil && x.EncapQosTcToQueueMap != nil {
		return *x.EncapQosTcToQueueMap
	}
	return 0
}

func (x *SetTunnelAttributeRequest) GetDecapQosDscpToTcMap() uint64 {
	if x != nil && x.DecapQosDscpToTcMap != nil {
		return *x.DecapQosDscpToTcMap
	}
	return 0
}

func (x *SetTunnelAttributeRequest) GetDecapQosTcToPriorityGroupMap() uint64 {
	if x != nil && x.DecapQosTcToPriorityGroupMap != nil {
		return *x.DecapQosTcToPriorityGroupMap
	}
	return 0
}

func (x *SetTunnelAttributeRequest) GetVxlanUdpSportSecurity() bool {
	if x != nil && x.VxlanUdpSportSecurity != nil {
		return *x.VxlanUdpSportSecurity
	}
	return false
}

type SetTunnelAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTunnelAttributeResponse) Reset() {
	*x = SetTunnelAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTunnelAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTunnelAttributeResponse) ProtoMessage() {}

func (x *SetTunnelAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTunnelAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTunnelAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{11}
}

type GetTunnelAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TunnelAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TunnelAttr" json:"attr_type,omitempty"`
}

func (x *GetTunnelAttributeRequest) Reset() {
	*x = GetTunnelAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelAttributeRequest) ProtoMessage() {}

func (x *GetTunnelAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTunnelAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{12}
}

func (x *GetTunnelAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTunnelAttributeRequest) GetAttrType() []TunnelAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTunnelAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TunnelAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTunnelAttributeResponse) Reset() {
	*x = GetTunnelAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelAttributeResponse) ProtoMessage() {}

func (x *GetTunnelAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTunnelAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{13}
}

func (x *GetTunnelAttributeResponse) GetAttr() *TunnelAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type GetTunnelStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CounterIds []TunnelStat `protobuf:"varint,2,rep,packed,name=counter_ids,json=counterIds,proto3,enum=lemming.dataplane.sai.TunnelStat" json:"counter_ids,omitempty"`
}

func (x *GetTunnelStatsRequest) Reset() {
	*x = GetTunnelStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelStatsRequest) ProtoMessage() {}

func (x *GetTunnelStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelStatsRequest.ProtoReflect.Descriptor instead.
func (*GetTunnelStatsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{14}
}

func (x *GetTunnelStatsRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTunnelStatsRequest) GetCounterIds() []TunnelStat {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

type GetTunnelStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values uint64 `protobuf:"varint,1,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *GetTunnelStatsResponse) Reset() {
	*x = GetTunnelStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelStatsResponse) ProtoMessage() {}

func (x *GetTunnelStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelStatsResponse.ProtoReflect.Descriptor instead.
func (*GetTunnelStatsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{15}
}

func (x *GetTunnelStatsResponse) GetValues() uint64 {
	if x != nil {
		return x.Values
	}
	return 0
}

type CreateTunnelTermTableEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch         uint64                    `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	VrId           *uint64                   `protobuf:"varint,2,opt,name=vr_id,json=vrId,proto3,oneof" json:"vr_id,omitempty"`
	Type           *TunnelTermTableEntryType `protobuf:"varint,3,opt,name=type,proto3,enum=lemming.dataplane.sai.TunnelTermTableEntryType,oneof" json:"type,omitempty"`
	DstIp          []byte                    `protobuf:"bytes,4,opt,name=dst_ip,json=dstIp,proto3,oneof" json:"dst_ip,omitempty"`
	DstIpMask      []byte                    `protobuf:"bytes,5,opt,name=dst_ip_mask,json=dstIpMask,proto3,oneof" json:"dst_ip_mask,omitempty"`
	SrcIp          []byte                    `protobuf:"bytes,6,opt,name=src_ip,json=srcIp,proto3,oneof" json:"src_ip,omitempty"`
	SrcIpMask      []byte                    `protobuf:"bytes,7,opt,name=src_ip_mask,json=srcIpMask,proto3,oneof" json:"src_ip_mask,omitempty"`
	TunnelType     *TunnelType               `protobuf:"varint,8,opt,name=tunnel_type,json=tunnelType,proto3,enum=lemming.dataplane.sai.TunnelType,oneof" json:"tunnel_type,omitempty"`
	ActionTunnelId *uint64                   `protobuf:"varint,9,opt,name=action_tunnel_id,json=actionTunnelId,proto3,oneof" json:"action_tunnel_id,omitempty"`
	IpsecVerified  *bool                     `protobuf:"varint,10,opt,name=ipsec_verified,json=ipsecVerified,proto3,oneof" json:"ipsec_verified,omitempty"`
}

func (x *CreateTunnelTermTableEntryRequest) Reset() {
	*x = CreateTunnelTermTableEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelTermTableEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelTermTableEntryRequest) ProtoMessage() {}

func (x *CreateTunnelTermTableEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelTermTableEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateTunnelTermTableEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{16}
}

func (x *CreateTunnelTermTableEntryRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTunnelTermTableEntryRequest) GetVrId() uint64 {
	if x != nil && x.VrId != nil {
		return *x.VrId
	}
	return 0
}

func (x *CreateTunnelTermTableEntryRequest) GetType() TunnelTermTableEntryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return TunnelTermTableEntryType_TUNNEL_TERM_TABLE_ENTRY_TYPE_UNSPECIFIED
}

func (x *CreateTunnelTermTableEntryRequest) GetDstIp() []byte {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *CreateTunnelTermTableEntryRequest) GetDstIpMask() []byte {
	if x != nil {
		return x.DstIpMask
	}
	return nil
}

func (x *CreateTunnelTermTableEntryRequest) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *CreateTunnelTermTableEntryRequest) GetSrcIpMask() []byte {
	if x != nil {
		return x.SrcIpMask
	}
	return nil
}

func (x *CreateTunnelTermTableEntryRequest) GetTunnelType() TunnelType {
	if x != nil && x.TunnelType != nil {
		return *x.TunnelType
	}
	return TunnelType_TUNNEL_TYPE_UNSPECIFIED
}

func (x *CreateTunnelTermTableEntryRequest) GetActionTunnelId() uint64 {
	if x != nil && x.ActionTunnelId != nil {
		return *x.ActionTunnelId
	}
	return 0
}

func (x *CreateTunnelTermTableEntryRequest) GetIpsecVerified() bool {
	if x != nil && x.IpsecVerified != nil {
		return *x.IpsecVerified
	}
	return false
}

type CreateTunnelTermTableEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTunnelTermTableEntryResponse) Reset() {
	*x = CreateTunnelTermTableEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelTermTableEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelTermTableEntryResponse) ProtoMessage() {}

func (x *CreateTunnelTermTableEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelTermTableEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateTunnelTermTableEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{17}
}

func (x *CreateTunnelTermTableEntryResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTunnelTermTableEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTunnelTermTableEntryRequest) Reset() {
	*x = RemoveTunnelTermTableEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTunnelTermTableEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTunnelTermTableEntryRequest) ProtoMessage() {}

func (x *RemoveTunnelTermTableEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTunnelTermTableEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveTunnelTermTableEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveTunnelTermTableEntryRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTunnelTermTableEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTunnelTermTableEntryResponse) Reset() {
	*x = RemoveTunnelTermTableEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTunnelTermTableEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTunnelTermTableEntryResponse) ProtoMessage() {}

func (x *RemoveTunnelTermTableEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTunnelTermTableEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveTunnelTermTableEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{19}
}

type SetTunnelTermTableEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid           uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	IpsecVerified *bool  `protobuf:"varint,2,opt,name=ipsec_verified,json=ipsecVerified,proto3,oneof" json:"ipsec_verified,omitempty"`
}

func (x *SetTunnelTermTableEntryAttributeRequest) Reset() {
	*x = SetTunnelTermTableEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTunnelTermTableEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTunnelTermTableEntryAttributeRequest) ProtoMessage() {}

func (x *SetTunnelTermTableEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTunnelTermTableEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetTunnelTermTableEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{20}
}

func (x *SetTunnelTermTableEntryAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetTunnelTermTableEntryAttributeRequest) GetIpsecVerified() bool {
	if x != nil && x.IpsecVerified != nil {
		return *x.IpsecVerified
	}
	return false
}

type SetTunnelTermTableEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetTunnelTermTableEntryAttributeResponse) Reset() {
	*x = SetTunnelTermTableEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTunnelTermTableEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTunnelTermTableEntryAttributeResponse) ProtoMessage() {}

func (x *SetTunnelTermTableEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTunnelTermTableEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetTunnelTermTableEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{21}
}

type GetTunnelTermTableEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64                     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TunnelTermTableEntryAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TunnelTermTableEntryAttr" json:"attr_type,omitempty"`
}

func (x *GetTunnelTermTableEntryAttributeRequest) Reset() {
	*x = GetTunnelTermTableEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelTermTableEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelTermTableEntryAttributeRequest) ProtoMessage() {}

func (x *GetTunnelTermTableEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelTermTableEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTunnelTermTableEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{22}
}

func (x *GetTunnelTermTableEntryAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTunnelTermTableEntryAttributeRequest) GetAttrType() []TunnelTermTableEntryAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTunnelTermTableEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TunnelTermTableEntryAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTunnelTermTableEntryAttributeResponse) Reset() {
	*x = GetTunnelTermTableEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelTermTableEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelTermTableEntryAttributeResponse) ProtoMessage() {}

func (x *GetTunnelTermTableEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelTermTableEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTunnelTermTableEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{23}
}

func (x *GetTunnelTermTableEntryAttributeResponse) GetAttr() *TunnelTermTableEntryAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTunnelMapEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch               uint64         `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	TunnelMapType        *TunnelMapType `protobuf:"varint,2,opt,name=tunnel_map_type,json=tunnelMapType,proto3,enum=lemming.dataplane.sai.TunnelMapType,oneof" json:"tunnel_map_type,omitempty"`
	TunnelMap            *uint64        `protobuf:"varint,3,opt,name=tunnel_map,json=tunnelMap,proto3,oneof" json:"tunnel_map,omitempty"`
	OecnKey              *uint32        `protobuf:"varint,4,opt,name=oecn_key,json=oecnKey,proto3,oneof" json:"oecn_key,omitempty"`
	OecnValue            *uint32        `protobuf:"varint,5,opt,name=oecn_value,json=oecnValue,proto3,oneof" json:"oecn_value,omitempty"`
	UecnKey              *uint32        `protobuf:"varint,6,opt,name=uecn_key,json=uecnKey,proto3,oneof" json:"uecn_key,omitempty"`
	UecnValue            *uint32        `protobuf:"varint,7,opt,name=uecn_value,json=uecnValue,proto3,oneof" json:"uecn_value,omitempty"`
	VlanIdKey            *uint32        `protobuf:"varint,8,opt,name=vlan_id_key,json=vlanIdKey,proto3,oneof" json:"vlan_id_key,omitempty"`
	VlanIdValue          *uint32        `protobuf:"varint,9,opt,name=vlan_id_value,json=vlanIdValue,proto3,oneof" json:"vlan_id_value,omitempty"`
	VniIdKey             *uint32        `protobuf:"varint,10,opt,name=vni_id_key,json=vniIdKey,proto3,oneof" json:"vni_id_key,omitempty"`
	VniIdValue           *uint32        `protobuf:"varint,11,opt,name=vni_id_value,json=vniIdValue,proto3,oneof" json:"vni_id_value,omitempty"`
	BridgeIdKey          *uint64        `protobuf:"varint,12,opt,name=bridge_id_key,json=bridgeIdKey,proto3,oneof" json:"bridge_id_key,omitempty"`
	BridgeIdValue        *uint64        `protobuf:"varint,13,opt,name=bridge_id_value,json=bridgeIdValue,proto3,oneof" json:"bridge_id_value,omitempty"`
	VirtualRouterIdKey   *uint64        `protobuf:"varint,14,opt,name=virtual_router_id_key,json=virtualRouterIdKey,proto3,oneof" json:"virtual_router_id_key,omitempty"`
	VirtualRouterIdValue *uint64        `protobuf:"varint,15,opt,name=virtual_router_id_value,json=virtualRouterIdValue,proto3,oneof" json:"virtual_router_id_value,omitempty"`
	VsidIdKey            *uint32        `protobuf:"varint,16,opt,name=vsid_id_key,json=vsidIdKey,proto3,oneof" json:"vsid_id_key,omitempty"`
	VsidIdValue          *uint32        `protobuf:"varint,17,opt,name=vsid_id_value,json=vsidIdValue,proto3,oneof" json:"vsid_id_value,omitempty"`
}

func (x *CreateTunnelMapEntryRequest) Reset() {
	*x = CreateTunnelMapEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelMapEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelMapEntryRequest) ProtoMessage() {}

func (x *CreateTunnelMapEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelMapEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateTunnelMapEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{24}
}

func (x *CreateTunnelMapEntryRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetTunnelMapType() TunnelMapType {
	if x != nil && x.TunnelMapType != nil {
		return *x.TunnelMapType
	}
	return TunnelMapType_TUNNEL_MAP_TYPE_UNSPECIFIED
}

func (x *CreateTunnelMapEntryRequest) GetTunnelMap() uint64 {
	if x != nil && x.TunnelMap != nil {
		return *x.TunnelMap
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetOecnKey() uint32 {
	if x != nil && x.OecnKey != nil {
		return *x.OecnKey
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetOecnValue() uint32 {
	if x != nil && x.OecnValue != nil {
		return *x.OecnValue
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetUecnKey() uint32 {
	if x != nil && x.UecnKey != nil {
		return *x.UecnKey
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetUecnValue() uint32 {
	if x != nil && x.UecnValue != nil {
		return *x.UecnValue
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetVlanIdKey() uint32 {
	if x != nil && x.VlanIdKey != nil {
		return *x.VlanIdKey
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetVlanIdValue() uint32 {
	if x != nil && x.VlanIdValue != nil {
		return *x.VlanIdValue
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetVniIdKey() uint32 {
	if x != nil && x.VniIdKey != nil {
		return *x.VniIdKey
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetVniIdValue() uint32 {
	if x != nil && x.VniIdValue != nil {
		return *x.VniIdValue
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetBridgeIdKey() uint64 {
	if x != nil && x.BridgeIdKey != nil {
		return *x.BridgeIdKey
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetBridgeIdValue() uint64 {
	if x != nil && x.BridgeIdValue != nil {
		return *x.BridgeIdValue
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetVirtualRouterIdKey() uint64 {
	if x != nil && x.VirtualRouterIdKey != nil {
		return *x.VirtualRouterIdKey
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetVirtualRouterIdValue() uint64 {
	if x != nil && x.VirtualRouterIdValue != nil {
		return *x.VirtualRouterIdValue
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetVsidIdKey() uint32 {
	if x != nil && x.VsidIdKey != nil {
		return *x.VsidIdKey
	}
	return 0
}

func (x *CreateTunnelMapEntryRequest) GetVsidIdValue() uint32 {
	if x != nil && x.VsidIdValue != nil {
		return *x.VsidIdValue
	}
	return 0
}

type CreateTunnelMapEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTunnelMapEntryResponse) Reset() {
	*x = CreateTunnelMapEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelMapEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelMapEntryResponse) ProtoMessage() {}

func (x *CreateTunnelMapEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelMapEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateTunnelMapEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{25}
}

func (x *CreateTunnelMapEntryResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTunnelMapEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTunnelMapEntryRequest) Reset() {
	*x = RemoveTunnelMapEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTunnelMapEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTunnelMapEntryRequest) ProtoMessage() {}

func (x *RemoveTunnelMapEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTunnelMapEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveTunnelMapEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{26}
}

func (x *RemoveTunnelMapEntryRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTunnelMapEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTunnelMapEntryResponse) Reset() {
	*x = RemoveTunnelMapEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTunnelMapEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTunnelMapEntryResponse) ProtoMessage() {}

func (x *RemoveTunnelMapEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTunnelMapEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveTunnelMapEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{27}
}

type GetTunnelMapEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64               `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TunnelMapEntryAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TunnelMapEntryAttr" json:"attr_type,omitempty"`
}

func (x *GetTunnelMapEntryAttributeRequest) Reset() {
	*x = GetTunnelMapEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelMapEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelMapEntryAttributeRequest) ProtoMessage() {}

func (x *GetTunnelMapEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelMapEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTunnelMapEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{28}
}

func (x *GetTunnelMapEntryAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTunnelMapEntryAttributeRequest) GetAttrType() []TunnelMapEntryAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTunnelMapEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TunnelMapEntryAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTunnelMapEntryAttributeResponse) Reset() {
	*x = GetTunnelMapEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTunnelMapEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTunnelMapEntryAttributeResponse) ProtoMessage() {}

func (x *GetTunnelMapEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTunnelMapEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTunnelMapEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{29}
}

func (x *GetTunnelMapEntryAttributeResponse) GetAttr() *TunnelMapEntryAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateTunnelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reqs []*CreateTunnelRequest `protobuf:"bytes,1,rep,name=reqs,proto3" json:"reqs,omitempty"`
}

func (x *CreateTunnelsRequest) Reset() {
	*x = CreateTunnelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelsRequest) ProtoMessage() {}

func (x *CreateTunnelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelsRequest.ProtoReflect.Descriptor instead.
func (*CreateTunnelsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{30}
}

func (x *CreateTunnelsRequest) GetReqs() []*CreateTunnelRequest {
	if x != nil {
		return x.Reqs
	}
	return nil
}

type CreateTunnelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resps []*CreateTunnelResponse `protobuf:"bytes,1,rep,name=resps,proto3" json:"resps,omitempty"`
}

func (x *CreateTunnelsResponse) Reset() {
	*x = CreateTunnelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelsResponse) ProtoMessage() {}

func (x *CreateTunnelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_tunnel_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelsResponse.ProtoReflect.Descriptor instead.
func (*CreateTunnelsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP(), []int{31}
}

func (x *CreateTunnelsResponse) GetResps() []*CreateTunnelResponse {
	if x != nil {
		return x.Resps
	}
	return nil
}

var File_dataplane_standalone_proto_tunnel_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_tunnel_proto_rawDesc = []byte{
	0x0a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x1a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x2a, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x2b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2a, 0x0a,
	0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x61, 0x74,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x93, 0x14, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x12, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52,
	0x11, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a,
	0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x65, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x53, 0x72, 0x63, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x44, 0x73,
	0x74, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f,
	0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x74, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x06, 0x52, 0x0c, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x07, 0x52, 0x0b, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x54, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0f,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x44, 0x73, 0x63, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f,
	0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x0a, 0x48, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x44, 0x73, 0x63,
	0x70, 0x56, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x5f, 0x67, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48, 0x0a, 0x52, 0x10, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x47, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x0b,
	0x52, 0x0b, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x47, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x5a, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x0c, 0x52, 0x0c, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x61, 0x70,
	0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65,
	0x63, 0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f,
	0x48, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x10,
	0x52, 0x0c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x55,
	0x0a, 0x0e, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x11, 0x48, 0x0e, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x54, 0x74, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x64,
	0x73, 0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x73, 0x63,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x12, 0x48, 0x0f, 0x52, 0x0d, 0x64,
	0x65, 0x63, 0x61, 0x70, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x64, 0x0a, 0x16, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48, 0x10, 0x52, 0x14, 0x6c, 0x6f,
	0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x14, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75,
	0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x15, 0x48, 0x11, 0x52, 0x11, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x0f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x16,
	0x48, 0x12, 0x52, 0x0d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x14, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64,
	0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x17, 0x48, 0x13, 0x52, 0x11, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x08, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x18, 0x48, 0x14, 0x52, 0x07, 0x73, 0x61, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f,
	0x73, 0x61, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x19, 0x52, 0x0f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x53,
	0x61, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x22, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x1a, 0x48, 0x15, 0x52, 0x1b, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x51, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x54, 0x6f, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a,
	0x19, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x1b, 0x48, 0x16, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x51,
	0x6f, 0x73, 0x54, 0x63, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x18, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64,
	0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x1c, 0x48, 0x17, 0x52, 0x13, 0x64, 0x65, 0x63,
	0x61, 0x70, 0x51, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x22, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x1d, 0x48, 0x18, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x51, 0x6f,
	0x73, 0x54, 0x63, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x1e,
	0x48, 0x19, 0x52, 0x15, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5,
	0x18, 0x2b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x67,
	0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x63, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x74,
	0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x63, 0x61,
	0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64,
	0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74,
	0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63,
	0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x25, 0x0a, 0x23, 0x5f,
	0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d,
	0x61, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70,
	0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x22,
	0x28, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc4, 0x0d, 0x0a, 0x19, 0x53,
	0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x0e, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x00,
	0x52, 0x0c, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x01,
	0x52, 0x0b, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x54, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x58, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x44,
	0x73, 0x63, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x44, 0x73, 0x63, 0x70, 0x56, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x04, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x61,
	0x70, 0x47, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0e, 0x64, 0x65,
	0x63, 0x61, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x11, 0x48, 0x05,
	0x52, 0x0c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x58, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x12, 0x48, 0x06, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x61, 0x70,
	0x44, 0x73, 0x63, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x16, 0x6c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48, 0x07, 0x52, 0x14, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61,
	0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x6a, 0x0a, 0x14, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x78,
	0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x15, 0x48, 0x08, 0x52, 0x11, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64,
	0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x0f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x16, 0x48, 0x09, 0x52, 0x0d,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x14, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x17, 0x48, 0x0a, 0x52, 0x11, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08,
	0x73, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x18, 0x48, 0x0b, 0x52, 0x07, 0x73, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x61, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x19, 0x52, 0x0f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x22, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x71,
	0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x1a, 0x48, 0x0c, 0x52, 0x1b, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x51, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x44,
	0x73, 0x63, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x19, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x1b, 0x48, 0x0d, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x51, 0x6f, 0x73, 0x54, 0x63,
	0x54, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x18, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f,
	0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x1c, 0x48, 0x0e, 0x52, 0x13, 0x64, 0x65, 0x63, 0x61, 0x70, 0x51, 0x6f,
	0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x53, 0x0a, 0x22, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x1d, 0x48, 0x0f, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x51, 0x6f, 0x73, 0x54, 0x63, 0x54,
	0x6f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64,
	0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x1e, 0x48, 0x10, 0x52, 0x15,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x67,
	0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70,
	0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65,
	0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f,
	0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x25, 0x0a, 0x23, 0x5f,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d,
	0x61, 0x70, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64,
	0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x25, 0x0a,
	0x23, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74,
	0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75,
	0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3e,
	0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x6d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x82, 0x05, 0x0a, 0x21, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x04,
	0x76, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52,
	0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0b, 0x64, 0x73, 0x74,
	0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x09, 0x64, 0x73, 0x74, 0x49, 0x70, 0x4d, 0x61, 0x73,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x05, 0x73, 0x72,
	0x63, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x06, 0x48, 0x05, 0x52, 0x09, 0x73, 0x72, 0x63, 0x49, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01,
	0x01, 0x12, 0x4d, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48,
	0x06, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08,
	0x48, 0x07, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x0a, 0x48, 0x08, 0x52, 0x0d, 0x69, 0x70, 0x73, 0x65, 0x63, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x2c, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x76, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x36,
	0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65,
	0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x24, 0x0a,
	0x22, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72,
	0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x27, 0x53, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x30, 0x0a, 0x0e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48,
	0x00, 0x52, 0x0d, 0x69, 0x70, 0x73, 0x65, 0x63, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x2a, 0x0a, 0x28, 0x53, 0x65, 0x74, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x12, 0x4c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x74,
	0x0a, 0x28, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x61, 0x74,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x22, 0xe5, 0x08, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x57, 0x0a, 0x0f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48,
	0x01, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x08, 0x6f, 0x65, 0x63, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x07, 0x6f, 0x65, 0x63, 0x6e, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x6f, 0x65, 0x63, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48,
	0x03, 0x52, 0x09, 0x6f, 0x65, 0x63, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x08, 0x75, 0x65, 0x63, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x07, 0x75, 0x65, 0x63, 0x6e, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x75, 0x65, 0x63, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48,
	0x05, 0x52, 0x09, 0x75, 0x65, 0x63, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x06, 0x52, 0x09, 0x76, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x07, 0x52, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x76, 0x6e, 0x69,
	0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x09, 0x48, 0x08, 0x52, 0x08, 0x76, 0x6e, 0x69, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x76, 0x6e, 0x69, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48, 0x09,
	0x52, 0x0a, 0x76, 0x6e, 0x69, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x0d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48, 0x0a, 0x52, 0x0b,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x31,
	0x0a, 0x0f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x0b, 0x52,
	0x0d, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3c, 0x0a, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x0c, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x17, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48, 0x0d, 0x52, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0b, 0x76, 0x73, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48, 0x0e, 0x52, 0x09,
	0x76, 0x73, 0x69, 0x64, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d,
	0x76, 0x73, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x10, 0x48, 0x0f, 0x52, 0x0b, 0x76, 0x73, 0x69,
	0x64, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18,
	0x3c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6d, 0x61, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x65, 0x63, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x65, 0x63, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x65, 0x63, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x75, 0x65, 0x63, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x76, 0x6e, 0x69, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x76, 0x6e, 0x69, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x76,
	0x73, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76,
	0x73, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2f,
	0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x7d, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x68,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x56, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x04, 0x72, 0x65, 0x71, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x72, 0x65, 0x71, 0x73,
	0x22, 0x5a, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x65, 0x73,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x72, 0x65, 0x73, 0x70, 0x73, 0x2a, 0x6a, 0x0a, 0x0d,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1f, 0x0a,
	0x1b, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x2a, 0xc1, 0x08, 0x0a, 0x0a, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x4c,
	0x41, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x41,
	0x50, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x54, 0x54,
	0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x54, 0x54,
	0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x44, 0x53, 0x43,
	0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x44, 0x53,
	0x43, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x47, 0x52,
	0x45, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x1d, 0x0a,
	0x19, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43,
	0x41, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x41,
	0x50, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x41,
	0x50, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x45, 0x52, 0x53, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x41, 0x50,
	0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0f, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x41, 0x50,
	0x5f, 0x4d, 0x41, 0x50, 0x50, 0x45, 0x52, 0x53, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x41, 0x50, 0x5f,
	0x54, 0x54, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x41, 0x50, 0x5f,
	0x44, 0x53, 0x43, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54,
	0x10, 0x13, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f,
	0x55, 0x44, 0x50, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x15,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x16, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x41, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10,
	0x18, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x19, 0x12, 0x32, 0x0a, 0x2e, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x54,
	0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x44,
	0x53, 0x43, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x1a, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x51,
	0x4f, 0x53, 0x5f, 0x54, 0x43, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4d,
	0x41, 0x50, 0x10, 0x1b, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x41, 0x50, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x44, 0x53,
	0x43, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x43, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x1c, 0x12, 0x32,
	0x0a, 0x2e, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x45,
	0x43, 0x41, 0x50, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x54, 0x43, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x52,
	0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x50,
	0x10, 0x1d, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x53, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x1e, 0x2a, 0x88, 0x04, 0x0a,
	0x18, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x25, 0x0a, 0x21, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x03, 0x12,
	0x2c, 0x0a, 0x28, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x04, 0x12, 0x27, 0x0a,
	0x23, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x52,
	0x43, 0x5f, 0x49, 0x50, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x5f, 0x4d, 0x41,
	0x53, 0x4b, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54,
	0x45, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x07, 0x12, 0x31, 0x0a, 0x2d, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x52,
	0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x59, 0x10, 0x09, 0x12, 0x2f, 0x0a, 0x2b, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x0a, 0x2a, 0xc6, 0x05, 0x0a, 0x12, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x12, 0x25,
	0x0a, 0x21, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x4d, 0x41, 0x50, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x4f, 0x45, 0x43, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x4f, 0x45, 0x43, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x04,
	0x12, 0x22, 0x0a, 0x1e, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x45, 0x43, 0x4e, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d,
	0x41, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x45,
	0x43, 0x4e, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0x07, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x49, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x56, 0x4e, 0x49, 0x5f, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x09,
	0x12, 0x26, 0x0a, 0x22, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x4e, 0x49, 0x5f, 0x49, 0x44,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10,
	0x0b, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x0c, 0x12, 0x2f, 0x0a, 0x2b,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x0d, 0x12, 0x31, 0x0a,
	0x2d, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x0e,
	0x12, 0x25, 0x0a, 0x21, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x53, 0x49, 0x44, 0x5f, 0x49,
	0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x0f, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x56, 0x53, 0x49, 0x44, 0x5f, 0x49, 0x44, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x10,
	0x32, 0xc0, 0x10, 0x0a, 0x06, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x72, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x2d,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x72, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x61, 0x70, 0x12, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x33, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7b, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53,
	0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3e, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65,
	0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65,
	0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xa5, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72,
	0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x3e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x93, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b,
	0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_tunnel_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_tunnel_proto_rawDescData = file_dataplane_standalone_proto_tunnel_proto_rawDesc
)

func file_dataplane_standalone_proto_tunnel_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_tunnel_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_tunnel_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_tunnel_proto_rawDescData
}

var file_dataplane_standalone_proto_tunnel_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_dataplane_standalone_proto_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_dataplane_standalone_proto_tunnel_proto_goTypes = []interface{}{
	(TunnelMapAttr)(0),                               // 0: lemming.dataplane.sai.TunnelMapAttr
	(TunnelAttr)(0),                                  // 1: lemming.dataplane.sai.TunnelAttr
	(TunnelTermTableEntryAttr)(0),                    // 2: lemming.dataplane.sai.TunnelTermTableEntryAttr
	(TunnelMapEntryAttr)(0),                          // 3: lemming.dataplane.sai.TunnelMapEntryAttr
	(*CreateTunnelMapRequest)(nil),                   // 4: lemming.dataplane.sai.CreateTunnelMapRequest
	(*CreateTunnelMapResponse)(nil),                  // 5: lemming.dataplane.sai.CreateTunnelMapResponse
	(*RemoveTunnelMapRequest)(nil),                   // 6: lemming.dataplane.sai.RemoveTunnelMapRequest
	(*RemoveTunnelMapResponse)(nil),                  // 7: lemming.dataplane.sai.RemoveTunnelMapResponse
	(*GetTunnelMapAttributeRequest)(nil),             // 8: lemming.dataplane.sai.GetTunnelMapAttributeRequest
	(*GetTunnelMapAttributeResponse)(nil),            // 9: lemming.dataplane.sai.GetTunnelMapAttributeResponse
	(*CreateTunnelRequest)(nil),                      // 10: lemming.dataplane.sai.CreateTunnelRequest
	(*CreateTunnelResponse)(nil),                     // 11: lemming.dataplane.sai.CreateTunnelResponse
	(*RemoveTunnelRequest)(nil),                      // 12: lemming.dataplane.sai.RemoveTunnelRequest
	(*RemoveTunnelResponse)(nil),                     // 13: lemming.dataplane.sai.RemoveTunnelResponse
	(*SetTunnelAttributeRequest)(nil),                // 14: lemming.dataplane.sai.SetTunnelAttributeRequest
	(*SetTunnelAttributeResponse)(nil),               // 15: lemming.dataplane.sai.SetTunnelAttributeResponse
	(*GetTunnelAttributeRequest)(nil),                // 16: lemming.dataplane.sai.GetTunnelAttributeRequest
	(*GetTunnelAttributeResponse)(nil),               // 17: lemming.dataplane.sai.GetTunnelAttributeResponse
	(*GetTunnelStatsRequest)(nil),                    // 18: lemming.dataplane.sai.GetTunnelStatsRequest
	(*GetTunnelStatsResponse)(nil),                   // 19: lemming.dataplane.sai.GetTunnelStatsResponse
	(*CreateTunnelTermTableEntryRequest)(nil),        // 20: lemming.dataplane.sai.CreateTunnelTermTableEntryRequest
	(*CreateTunnelTermTableEntryResponse)(nil),       // 21: lemming.dataplane.sai.CreateTunnelTermTableEntryResponse
	(*RemoveTunnelTermTableEntryRequest)(nil),        // 22: lemming.dataplane.sai.RemoveTunnelTermTableEntryRequest
	(*RemoveTunnelTermTableEntryResponse)(nil),       // 23: lemming.dataplane.sai.RemoveTunnelTermTableEntryResponse
	(*SetTunnelTermTableEntryAttributeRequest)(nil),  // 24: lemming.dataplane.sai.SetTunnelTermTableEntryAttributeRequest
	(*SetTunnelTermTableEntryAttributeResponse)(nil), // 25: lemming.dataplane.sai.SetTunnelTermTableEntryAttributeResponse
	(*GetTunnelTermTableEntryAttributeRequest)(nil),  // 26: lemming.dataplane.sai.GetTunnelTermTableEntryAttributeRequest
	(*GetTunnelTermTableEntryAttributeResponse)(nil), // 27: lemming.dataplane.sai.GetTunnelTermTableEntryAttributeResponse
	(*CreateTunnelMapEntryRequest)(nil),              // 28: lemming.dataplane.sai.CreateTunnelMapEntryRequest
	(*CreateTunnelMapEntryResponse)(nil),             // 29: lemming.dataplane.sai.CreateTunnelMapEntryResponse
	(*RemoveTunnelMapEntryRequest)(nil),              // 30: lemming.dataplane.sai.RemoveTunnelMapEntryRequest
	(*RemoveTunnelMapEntryResponse)(nil),             // 31: lemming.dataplane.sai.RemoveTunnelMapEntryResponse
	(*GetTunnelMapEntryAttributeRequest)(nil),        // 32: lemming.dataplane.sai.GetTunnelMapEntryAttributeRequest
	(*GetTunnelMapEntryAttributeResponse)(nil),       // 33: lemming.dataplane.sai.GetTunnelMapEntryAttributeResponse
	(*CreateTunnelsRequest)(nil),                     // 34: lemming.dataplane.sai.CreateTunnelsRequest
	(*CreateTunnelsResponse)(nil),                    // 35: lemming.dataplane.sai.CreateTunnelsResponse
	(TunnelMapType)(0),                               // 36: lemming.dataplane.sai.TunnelMapType
	(*TunnelMapAttribute)(nil),                       // 37: lemming.dataplane.sai.TunnelMapAttribute
	(TunnelType)(0),                                  // 38: lemming.dataplane.sai.TunnelType
	(TunnelPeerMode)(0),                              // 39: lemming.dataplane.sai.TunnelPeerMode
	(TunnelTtlMode)(0),                               // 40: lemming.dataplane.sai.TunnelTtlMode
	(TunnelDscpMode)(0),                              // 41: lemming.dataplane.sai.TunnelDscpMode
	(TunnelEncapEcnMode)(0),                          // 42: lemming.dataplane.sai.TunnelEncapEcnMode
	(TunnelDecapEcnMode)(0),                          // 43: lemming.dataplane.sai.TunnelDecapEcnMode
	(PacketAction)(0),                                // 44: lemming.dataplane.sai.PacketAction
	(TunnelVxlanUdpSportMode)(0),                     // 45: lemming.dataplane.sai.TunnelVxlanUdpSportMode
	(*TunnelAttribute)(nil),                          // 46: lemming.dataplane.sai.TunnelAttribute
	(TunnelStat)(0),                                  // 47: lemming.dataplane.sai.TunnelStat
	(TunnelTermTableEntryType)(0),                    // 48: lemming.dataplane.sai.TunnelTermTableEntryType
	(*TunnelTermTableEntryAttribute)(nil),            // 49: lemming.dataplane.sai.TunnelTermTableEntryAttribute
	(*TunnelMapEntryAttribute)(nil),                  // 50: lemming.dataplane.sai.TunnelMapEntryAttribute
}
var file_dataplane_standalone_proto_tunnel_proto_depIdxs = []int32{
	36, // 0: lemming.dataplane.sai.CreateTunnelMapRequest.type:type_name -> lemming.dataplane.sai.TunnelMapType
	0,  // 1: lemming.dataplane.sai.GetTunnelMapAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TunnelMapAttr
	37, // 2: lemming.dataplane.sai.GetTunnelMapAttributeResponse.attr:type_name -> lemming.dataplane.sai.TunnelMapAttribute
	38, // 3: lemming.dataplane.sai.CreateTunnelRequest.type:type_name -> lemming.dataplane.sai.TunnelType
	39, // 4: lemming.dataplane.sai.CreateTunnelRequest.peer_mode:type_name -> lemming.dataplane.sai.TunnelPeerMode
	40, // 5: lemming.dataplane.sai.CreateTunnelRequest.encap_ttl_mode:type_name -> lemming.dataplane.sai.TunnelTtlMode
	41, // 6: lemming.dataplane.sai.CreateTunnelRequest.encap_dscp_mode:type_name -> lemming.dataplane.sai.TunnelDscpMode
	42, // 7: lemming.dataplane.sai.CreateTunnelRequest.encap_ecn_mode:type_name -> lemming.dataplane.sai.TunnelEncapEcnMode
	43, // 8: lemming.dataplane.sai.CreateTunnelRequest.decap_ecn_mode:type_name -> lemming.dataplane.sai.TunnelDecapEcnMode
	40, // 9: lemming.dataplane.sai.CreateTunnelRequest.decap_ttl_mode:type_name -> lemming.dataplane.sai.TunnelTtlMode
	41, // 10: lemming.dataplane.sai.CreateTunnelRequest.decap_dscp_mode:type_name -> lemming.dataplane.sai.TunnelDscpMode
	44, // 11: lemming.dataplane.sai.CreateTunnelRequest.loopback_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	45, // 12: lemming.dataplane.sai.CreateTunnelRequest.vxlan_udp_sport_mode:type_name -> lemming.dataplane.sai.TunnelVxlanUdpSportMode
	40, // 13: lemming.dataplane.sai.SetTunnelAttributeRequest.encap_ttl_mode:type_name -> lemming.dataplane.sai.TunnelTtlMode
	41, // 14: lemming.dataplane.sai.SetTunnelAttributeRequest.encap_dscp_mode:type_name -> lemming.dataplane.sai.TunnelDscpMode
	40, // 15: lemming.dataplane.sai.SetTunnelAttributeRequest.decap_ttl_mode:type_name -> lemming.dataplane.sai.TunnelTtlMode
	41, // 16: lemming.dataplane.sai.SetTunnelAttributeRequest.decap_dscp_mode:type_name -> lemming.dataplane.sai.TunnelDscpMode
	44, // 17: lemming.dataplane.sai.SetTunnelAttributeRequest.loopback_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	45, // 18: lemming.dataplane.sai.SetTunnelAttributeRequest.vxlan_udp_sport_mode:type_name -> lemming.dataplane.sai.TunnelVxlanUdpSportMode
	1,  // 19: lemming.dataplane.sai.GetTunnelAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TunnelAttr
	46, // 20: lemming.dataplane.sai.GetTunnelAttributeResponse.attr:type_name -> lemming.dataplane.sai.TunnelAttribute
	47, // 21: lemming.dataplane.sai.GetTunnelStatsRequest.counter_ids:type_name -> lemming.dataplane.sai.TunnelStat
	48, // 22: lemming.dataplane.sai.CreateTunnelTermTableEntryRequest.type:type_name -> lemming.dataplane.sai.TunnelTermTableEntryType
	38, // 23: lemming.dataplane.sai.CreateTunnelTermTableEntryRequest.tunnel_type:type_name -> lemming.dataplane.sai.TunnelType
	2,  // 24: lemming.dataplane.sai.GetTunnelTermTableEntryAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TunnelTermTableEntryAttr
	49, // 25: lemming.dataplane.sai.GetTunnelTermTableEntryAttributeResponse.attr:type_name -> lemming.dataplane.sai.TunnelTermTableEntryAttribute
	36, // 26: lemming.dataplane.sai.CreateTunnelMapEntryRequest.tunnel_map_type:type_name -> lemming.dataplane.sai.TunnelMapType
	3,  // 27: lemming.dataplane.sai.GetTunnelMapEntryAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TunnelMapEntryAttr
	50, // 28: lemming.dataplane.sai.GetTunnelMapEntryAttributeResponse.attr:type_name -> lemming.dataplane.sai.TunnelMapEntryAttribute
	10, // 29: lemming.dataplane.sai.CreateTunnelsRequest.reqs:type_name -> lemming.dataplane.sai.CreateTunnelRequest
	11, // 30: lemming.dataplane.sai.CreateTunnelsResponse.resps:type_name -> lemming.dataplane.sai.CreateTunnelResponse
	4,  // 31: lemming.dataplane.sai.Tunnel.CreateTunnelMap:input_type -> lemming.dataplane.sai.CreateTunnelMapRequest
	6,  // 32: lemming.dataplane.sai.Tunnel.RemoveTunnelMap:input_type -> lemming.dataplane.sai.RemoveTunnelMapRequest
	8,  // 33: lemming.dataplane.sai.Tunnel.GetTunnelMapAttribute:input_type -> lemming.dataplane.sai.GetTunnelMapAttributeRequest
	10, // 34: lemming.dataplane.sai.Tunnel.CreateTunnel:input_type -> lemming.dataplane.sai.CreateTunnelRequest
	12, // 35: lemming.dataplane.sai.Tunnel.RemoveTunnel:input_type -> lemming.dataplane.sai.RemoveTunnelRequest
	14, // 36: lemming.dataplane.sai.Tunnel.SetTunnelAttribute:input_type -> lemming.dataplane.sai.SetTunnelAttributeRequest
	16, // 37: lemming.dataplane.sai.Tunnel.GetTunnelAttribute:input_type -> lemming.dataplane.sai.GetTunnelAttributeRequest
	18, // 38: lemming.dataplane.sai.Tunnel.GetTunnelStats:input_type -> lemming.dataplane.sai.GetTunnelStatsRequest
	20, // 39: lemming.dataplane.sai.Tunnel.CreateTunnelTermTableEntry:input_type -> lemming.dataplane.sai.CreateTunnelTermTableEntryRequest
	22, // 40: lemming.dataplane.sai.Tunnel.RemoveTunnelTermTableEntry:input_type -> lemming.dataplane.sai.RemoveTunnelTermTableEntryRequest
	24, // 41: lemming.dataplane.sai.Tunnel.SetTunnelTermTableEntryAttribute:input_type -> lemming.dataplane.sai.SetTunnelTermTableEntryAttributeRequest
	26, // 42: lemming.dataplane.sai.Tunnel.GetTunnelTermTableEntryAttribute:input_type -> lemming.dataplane.sai.GetTunnelTermTableEntryAttributeRequest
	28, // 43: lemming.dataplane.sai.Tunnel.CreateTunnelMapEntry:input_type -> lemming.dataplane.sai.CreateTunnelMapEntryRequest
	30, // 44: lemming.dataplane.sai.Tunnel.RemoveTunnelMapEntry:input_type -> lemming.dataplane.sai.RemoveTunnelMapEntryRequest
	32, // 45: lemming.dataplane.sai.Tunnel.GetTunnelMapEntryAttribute:input_type -> lemming.dataplane.sai.GetTunnelMapEntryAttributeRequest
	34, // 46: lemming.dataplane.sai.Tunnel.CreateTunnels:input_type -> lemming.dataplane.sai.CreateTunnelsRequest
	5,  // 47: lemming.dataplane.sai.Tunnel.CreateTunnelMap:output_type -> lemming.dataplane.sai.CreateTunnelMapResponse
	7,  // 48: lemming.dataplane.sai.Tunnel.RemoveTunnelMap:output_type -> lemming.dataplane.sai.RemoveTunnelMapResponse
	9,  // 49: lemming.dataplane.sai.Tunnel.GetTunnelMapAttribute:output_type -> lemming.dataplane.sai.GetTunnelMapAttributeResponse
	11, // 50: lemming.dataplane.sai.Tunnel.CreateTunnel:output_type -> lemming.dataplane.sai.CreateTunnelResponse
	13, // 51: lemming.dataplane.sai.Tunnel.RemoveTunnel:output_type -> lemming.dataplane.sai.RemoveTunnelResponse
	15, // 52: lemming.dataplane.sai.Tunnel.SetTunnelAttribute:output_type -> lemming.dataplane.sai.SetTunnelAttributeResponse
	17, // 53: lemming.dataplane.sai.Tunnel.GetTunnelAttribute:output_type -> lemming.dataplane.sai.GetTunnelAttributeResponse
	19, // 54: lemming.dataplane.sai.Tunnel.GetTunnelStats:output_type -> lemming.dataplane.sai.GetTunnelStatsResponse
	21, // 55: lemming.dataplane.sai.Tunnel.CreateTunnelTermTableEntry:output_type -> lemming.dataplane.sai.CreateTunnelTermTableEntryResponse
	23, // 56: lemming.dataplane.sai.Tunnel.RemoveTunnelTermTableEntry:output_type -> lemming.dataplane.sai.RemoveTunnelTermTableEntryResponse
	25, // 57: lemming.dataplane.sai.Tunnel.SetTunnelTermTableEntryAttribute:output_type -> lemming.dataplane.sai.SetTunnelTermTableEntryAttributeResponse
	27, // 58: lemming.dataplane.sai.Tunnel.GetTunnelTermTableEntryAttribute:output_type -> lemming.dataplane.sai.GetTunnelTermTableEntryAttributeResponse
	29, // 59: lemming.dataplane.sai.Tunnel.CreateTunnelMapEntry:output_type -> lemming.dataplane.sai.CreateTunnelMapEntryResponse
	31, // 60: lemming.dataplane.sai.Tunnel.RemoveTunnelMapEntry:output_type -> lemming.dataplane.sai.RemoveTunnelMapEntryResponse
	33, // 61: lemming.dataplane.sai.Tunnel.GetTunnelMapEntryAttribute:output_type -> lemming.dataplane.sai.GetTunnelMapEntryAttributeResponse
	35, // 62: lemming.dataplane.sai.Tunnel.CreateTunnels:output_type -> lemming.dataplane.sai.CreateTunnelsResponse
	47, // [47:63] is the sub-list for method output_type
	31, // [31:47] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_tunnel_proto_init() }
func file_dataplane_standalone_proto_tunnel_proto_init() {
	if File_dataplane_standalone_proto_tunnel_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTunnelMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTunnelMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelMapAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelMapAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTunnelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTunnelAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTunnelAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelTermTableEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelTermTableEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTunnelTermTableEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTunnelTermTableEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTunnelTermTableEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTunnelTermTableEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelTermTableEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelTermTableEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelMapEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelMapEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTunnelMapEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTunnelMapEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelMapEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTunnelMapEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_tunnel_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_tunnel_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tunnel_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tunnel_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tunnel_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tunnel_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_tunnel_proto_msgTypes[24].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_tunnel_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_tunnel_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_tunnel_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_tunnel_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_tunnel_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_tunnel_proto = out.File
	file_dataplane_standalone_proto_tunnel_proto_rawDesc = nil
	file_dataplane_standalone_proto_tunnel_proto_goTypes = nil
	file_dataplane_standalone_proto_tunnel_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TunnelClient interface {
	CreateTunnelMap(ctx context.Context, in *CreateTunnelMapRequest, opts ...grpc.CallOption) (*CreateTunnelMapResponse, error)
	RemoveTunnelMap(ctx context.Context, in *RemoveTunnelMapRequest, opts ...grpc.CallOption) (*RemoveTunnelMapResponse, error)
	GetTunnelMapAttribute(ctx context.Context, in *GetTunnelMapAttributeRequest, opts ...grpc.CallOption) (*GetTunnelMapAttributeResponse, error)
	CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*CreateTunnelResponse, error)
	RemoveTunnel(ctx context.Context, in *RemoveTunnelRequest, opts ...grpc.CallOption) (*RemoveTunnelResponse, error)
	SetTunnelAttribute(ctx context.Context, in *SetTunnelAttributeRequest, opts ...grpc.CallOption) (*SetTunnelAttributeResponse, error)
	GetTunnelAttribute(ctx context.Context, in *GetTunnelAttributeRequest, opts ...grpc.CallOption) (*GetTunnelAttributeResponse, error)
	GetTunnelStats(ctx context.Context, in *GetTunnelStatsRequest, opts ...grpc.CallOption) (*GetTunnelStatsResponse, error)
	CreateTunnelTermTableEntry(ctx context.Context, in *CreateTunnelTermTableEntryRequest, opts ...grpc.CallOption) (*CreateTunnelTermTableEntryResponse, error)
	RemoveTunnelTermTableEntry(ctx context.Context, in *RemoveTunnelTermTableEntryRequest, opts ...grpc.CallOption) (*RemoveTunnelTermTableEntryResponse, error)
	SetTunnelTermTableEntryAttribute(ctx context.Context, in *SetTunnelTermTableEntryAttributeRequest, opts ...grpc.CallOption) (*SetTunnelTermTableEntryAttributeResponse, error)
	GetTunnelTermTableEntryAttribute(ctx context.Context, in *GetTunnelTermTableEntryAttributeRequest, opts ...grpc.CallOption) (*GetTunnelTermTableEntryAttributeResponse, error)
	CreateTunnelMapEntry(ctx context.Context, in *CreateTunnelMapEntryRequest, opts ...grpc.CallOption) (*CreateTunnelMapEntryResponse, error)
	RemoveTunnelMapEntry(ctx context.Context, in *RemoveTunnelMapEntryRequest, opts ...grpc.CallOption) (*RemoveTunnelMapEntryResponse, error)
	GetTunnelMapEntryAttribute(ctx context.Context, in *GetTunnelMapEntryAttributeRequest, opts ...grpc.CallOption) (*GetTunnelMapEntryAttributeResponse, error)
	CreateTunnels(ctx context.Context, in *CreateTunnelsRequest, opts ...grpc.CallOption) (*CreateTunnelsResponse, error)
}

type tunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelClient(cc grpc.ClientConnInterface) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) CreateTunnelMap(ctx context.Context, in *CreateTunnelMapRequest, opts ...grpc.CallOption) (*CreateTunnelMapResponse, error) {
	out := new(CreateTunnelMapResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/CreateTunnelMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) RemoveTunnelMap(ctx context.Context, in *RemoveTunnelMapRequest, opts ...grpc.CallOption) (*RemoveTunnelMapResponse, error) {
	out := new(RemoveTunnelMapResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/RemoveTunnelMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetTunnelMapAttribute(ctx context.Context, in *GetTunnelMapAttributeRequest, opts ...grpc.CallOption) (*GetTunnelMapAttributeResponse, error) {
	out := new(GetTunnelMapAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/GetTunnelMapAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*CreateTunnelResponse, error) {
	out := new(CreateTunnelResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/CreateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) RemoveTunnel(ctx context.Context, in *RemoveTunnelRequest, opts ...grpc.CallOption) (*RemoveTunnelResponse, error) {
	out := new(RemoveTunnelResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/RemoveTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) SetTunnelAttribute(ctx context.Context, in *SetTunnelAttributeRequest, opts ...grpc.CallOption) (*SetTunnelAttributeResponse, error) {
	out := new(SetTunnelAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/SetTunnelAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetTunnelAttribute(ctx context.Context, in *GetTunnelAttributeRequest, opts ...grpc.CallOption) (*GetTunnelAttributeResponse, error) {
	out := new(GetTunnelAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/GetTunnelAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetTunnelStats(ctx context.Context, in *GetTunnelStatsRequest, opts ...grpc.CallOption) (*GetTunnelStatsResponse, error) {
	out := new(GetTunnelStatsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/GetTunnelStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) CreateTunnelTermTableEntry(ctx context.Context, in *CreateTunnelTermTableEntryRequest, opts ...grpc.CallOption) (*CreateTunnelTermTableEntryResponse, error) {
	out := new(CreateTunnelTermTableEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/CreateTunnelTermTableEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) RemoveTunnelTermTableEntry(ctx context.Context, in *RemoveTunnelTermTableEntryRequest, opts ...grpc.CallOption) (*RemoveTunnelTermTableEntryResponse, error) {
	out := new(RemoveTunnelTermTableEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/RemoveTunnelTermTableEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) SetTunnelTermTableEntryAttribute(ctx context.Context, in *SetTunnelTermTableEntryAttributeRequest, opts ...grpc.CallOption) (*SetTunnelTermTableEntryAttributeResponse, error) {
	out := new(SetTunnelTermTableEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/SetTunnelTermTableEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetTunnelTermTableEntryAttribute(ctx context.Context, in *GetTunnelTermTableEntryAttributeRequest, opts ...grpc.CallOption) (*GetTunnelTermTableEntryAttributeResponse, error) {
	out := new(GetTunnelTermTableEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/GetTunnelTermTableEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) CreateTunnelMapEntry(ctx context.Context, in *CreateTunnelMapEntryRequest, opts ...grpc.CallOption) (*CreateTunnelMapEntryResponse, error) {
	out := new(CreateTunnelMapEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/CreateTunnelMapEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) RemoveTunnelMapEntry(ctx context.Context, in *RemoveTunnelMapEntryRequest, opts ...grpc.CallOption) (*RemoveTunnelMapEntryResponse, error) {
	out := new(RemoveTunnelMapEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/RemoveTunnelMapEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetTunnelMapEntryAttribute(ctx context.Context, in *GetTunnelMapEntryAttributeRequest, opts ...grpc.CallOption) (*GetTunnelMapEntryAttributeResponse, error) {
	out := new(GetTunnelMapEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/GetTunnelMapEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) CreateTunnels(ctx context.Context, in *CreateTunnelsRequest, opts ...grpc.CallOption) (*CreateTunnelsResponse, error) {
	out := new(CreateTunnelsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Tunnel/CreateTunnels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelServer is the server API for Tunnel service.
type TunnelServer interface {
	CreateTunnelMap(context.Context, *CreateTunnelMapRequest) (*CreateTunnelMapResponse, error)
	RemoveTunnelMap(context.Context, *RemoveTunnelMapRequest) (*RemoveTunnelMapResponse, error)
	GetTunnelMapAttribute(context.Context, *GetTunnelMapAttributeRequest) (*GetTunnelMapAttributeResponse, error)
	CreateTunnel(context.Context, *CreateTunnelRequest) (*CreateTunnelResponse, error)
	RemoveTunnel(context.Context, *RemoveTunnelRequest) (*RemoveTunnelResponse, error)
	SetTunnelAttribute(context.Context, *SetTunnelAttributeRequest) (*SetTunnelAttributeResponse, error)
	GetTunnelAttribute(context.Context, *GetTunnelAttributeRequest) (*GetTunnelAttributeResponse, error)
	GetTunnelStats(context.Context, *GetTunnelStatsRequest) (*GetTunnelStatsResponse, error)
	CreateTunnelTermTableEntry(context.Context, *CreateTunnelTermTableEntryRequest) (*CreateTunnelTermTableEntryResponse, error)
	RemoveTunnelTermTableEntry(context.Context, *RemoveTunnelTermTableEntryRequest) (*RemoveTunnelTermTableEntryResponse, error)
	SetTunnelTermTableEntryAttribute(context.Context, *SetTunnelTermTableEntryAttributeRequest) (*SetTunnelTermTableEntryAttributeResponse, error)
	GetTunnelTermTableEntryAttribute(context.Context, *GetTunnelTermTableEntryAttributeRequest) (*GetTunnelTermTableEntryAttributeResponse, error)
	CreateTunnelMapEntry(context.Context, *CreateTunnelMapEntryRequest) (*CreateTunnelMapEntryResponse, error)
	RemoveTunnelMapEntry(context.Context, *RemoveTunnelMapEntryRequest) (*RemoveTunnelMapEntryResponse, error)
	GetTunnelMapEntryAttribute(context.Context, *GetTunnelMapEntryAttributeRequest) (*GetTunnelMapEntryAttributeResponse, error)
	CreateTunnels(context.Context, *CreateTunnelsRequest) (*CreateTunnelsResponse, error)
}

// UnimplementedTunnelServer can be embedded to have forward compatible implementations.
type UnimplementedTunnelServer struct {
}

func (*UnimplementedTunnelServer) CreateTunnelMap(context.Context, *CreateTunnelMapRequest) (*CreateTunnelMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnelMap not implemented")
}
func (*UnimplementedTunnelServer) RemoveTunnelMap(context.Context, *RemoveTunnelMapRequest) (*RemoveTunnelMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTunnelMap not implemented")
}
func (*UnimplementedTunnelServer) GetTunnelMapAttribute(context.Context, *GetTunnelMapAttributeRequest) (*GetTunnelMapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelMapAttribute not implemented")
}
func (*UnimplementedTunnelServer) CreateTunnel(context.Context, *CreateTunnelRequest) (*CreateTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (*UnimplementedTunnelServer) RemoveTunnel(context.Context, *RemoveTunnelRequest) (*RemoveTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTunnel not implemented")
}
func (*UnimplementedTunnelServer) SetTunnelAttribute(context.Context, *SetTunnelAttributeRequest) (*SetTunnelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTunnelAttribute not implemented")
}
func (*UnimplementedTunnelServer) GetTunnelAttribute(context.Context, *GetTunnelAttributeRequest) (*GetTunnelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelAttribute not implemented")
}
func (*UnimplementedTunnelServer) GetTunnelStats(context.Context, *GetTunnelStatsRequest) (*GetTunnelStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelStats not implemented")
}
func (*UnimplementedTunnelServer) CreateTunnelTermTableEntry(context.Context, *CreateTunnelTermTableEntryRequest) (*CreateTunnelTermTableEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnelTermTableEntry not implemented")
}
func (*UnimplementedTunnelServer) RemoveTunnelTermTableEntry(context.Context, *RemoveTunnelTermTableEntryRequest) (*RemoveTunnelTermTableEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTunnelTermTableEntry not implemented")
}
func (*UnimplementedTunnelServer) SetTunnelTermTableEntryAttribute(context.Context, *SetTunnelTermTableEntryAttributeRequest) (*SetTunnelTermTableEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTunnelTermTableEntryAttribute not implemented")
}
func (*UnimplementedTunnelServer) GetTunnelTermTableEntryAttribute(context.Context, *GetTunnelTermTableEntryAttributeRequest) (*GetTunnelTermTableEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelTermTableEntryAttribute not implemented")
}
func (*UnimplementedTunnelServer) CreateTunnelMapEntry(context.Context, *CreateTunnelMapEntryRequest) (*CreateTunnelMapEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnelMapEntry not implemented")
}
func (*UnimplementedTunnelServer) RemoveTunnelMapEntry(context.Context, *RemoveTunnelMapEntryRequest) (*RemoveTunnelMapEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTunnelMapEntry not implemented")
}
func (*UnimplementedTunnelServer) GetTunnelMapEntryAttribute(context.Context, *GetTunnelMapEntryAttributeRequest) (*GetTunnelMapEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelMapEntryAttribute not implemented")
}
func (*UnimplementedTunnelServer) CreateTunnels(context.Context, *CreateTunnelsRequest) (*CreateTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnels not implemented")
}

func RegisterTunnelServer(s *grpc.Server, srv TunnelServer) {
	s.RegisterService(&_Tunnel_serviceDesc, srv)
}

func _Tunnel_CreateTunnelMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).CreateTunnelMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/CreateTunnelMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).CreateTunnelMap(ctx, req.(*CreateTunnelMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_RemoveTunnelMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTunnelMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RemoveTunnelMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/RemoveTunnelMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RemoveTunnelMap(ctx, req.(*RemoveTunnelMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetTunnelMapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelMapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetTunnelMapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/GetTunnelMapAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetTunnelMapAttribute(ctx, req.(*GetTunnelMapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/CreateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).CreateTunnel(ctx, req.(*CreateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_RemoveTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RemoveTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/RemoveTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RemoveTunnel(ctx, req.(*RemoveTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_SetTunnelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTunnelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).SetTunnelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/SetTunnelAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).SetTunnelAttribute(ctx, req.(*SetTunnelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetTunnelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetTunnelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/GetTunnelAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetTunnelAttribute(ctx, req.(*GetTunnelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetTunnelStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetTunnelStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/GetTunnelStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetTunnelStats(ctx, req.(*GetTunnelStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_CreateTunnelTermTableEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelTermTableEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).CreateTunnelTermTableEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/CreateTunnelTermTableEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).CreateTunnelTermTableEntry(ctx, req.(*CreateTunnelTermTableEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_RemoveTunnelTermTableEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTunnelTermTableEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RemoveTunnelTermTableEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/RemoveTunnelTermTableEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RemoveTunnelTermTableEntry(ctx, req.(*RemoveTunnelTermTableEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_SetTunnelTermTableEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTunnelTermTableEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).SetTunnelTermTableEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/SetTunnelTermTableEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).SetTunnelTermTableEntryAttribute(ctx, req.(*SetTunnelTermTableEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetTunnelTermTableEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelTermTableEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetTunnelTermTableEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/GetTunnelTermTableEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetTunnelTermTableEntryAttribute(ctx, req.(*GetTunnelTermTableEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_CreateTunnelMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).CreateTunnelMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/CreateTunnelMapEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).CreateTunnelMapEntry(ctx, req.(*CreateTunnelMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_RemoveTunnelMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTunnelMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RemoveTunnelMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/RemoveTunnelMapEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RemoveTunnelMapEntry(ctx, req.(*RemoveTunnelMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetTunnelMapEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelMapEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetTunnelMapEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/GetTunnelMapEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetTunnelMapEntryAttribute(ctx, req.(*GetTunnelMapEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_CreateTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).CreateTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Tunnel/CreateTunnels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).CreateTunnels(ctx, req.(*CreateTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tunnel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTunnelMap",
			Handler:    _Tunnel_CreateTunnelMap_Handler,
		},
		{
			MethodName: "RemoveTunnelMap",
			Handler:    _Tunnel_RemoveTunnelMap_Handler,
		},
		{
			MethodName: "GetTunnelMapAttribute",
			Handler:    _Tunnel_GetTunnelMapAttribute_Handler,
		},
		{
			MethodName: "CreateTunnel",
			Handler:    _Tunnel_CreateTunnel_Handler,
		},
		{
			MethodName: "RemoveTunnel",
			Handler:    _Tunnel_RemoveTunnel_Handler,
		},
		{
			MethodName: "SetTunnelAttribute",
			Handler:    _Tunnel_SetTunnelAttribute_Handler,
		},
		{
			MethodName: "GetTunnelAttribute",
			Handler:    _Tunnel_GetTunnelAttribute_Handler,
		},
		{
			MethodName: "GetTunnelStats",
			Handler:    _Tunnel_GetTunnelStats_Handler,
		},
		{
			MethodName: "CreateTunnelTermTableEntry",
			Handler:    _Tunnel_CreateTunnelTermTableEntry_Handler,
		},
		{
			MethodName: "RemoveTunnelTermTableEntry",
			Handler:    _Tunnel_RemoveTunnelTermTableEntry_Handler,
		},
		{
			MethodName: "SetTunnelTermTableEntryAttribute",
			Handler:    _Tunnel_SetTunnelTermTableEntryAttribute_Handler,
		},
		{
			MethodName: "GetTunnelTermTableEntryAttribute",
			Handler:    _Tunnel_GetTunnelTermTableEntryAttribute_Handler,
		},
		{
			MethodName: "CreateTunnelMapEntry",
			Handler:    _Tunnel_CreateTunnelMapEntry_Handler,
		},
		{
			MethodName: "RemoveTunnelMapEntry",
			Handler:    _Tunnel_RemoveTunnelMapEntry_Handler,
		},
		{
			MethodName: "GetTunnelMapEntryAttribute",
			Handler:    _Tunnel_GetTunnelMapEntryAttribute_Handler,
		},
		{
			MethodName: "CreateTunnels",
			Handler:    _Tunnel_CreateTunnels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/tunnel.proto",
}
