// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/policer.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicerAttr int32

const (
	PolicerAttr_POLICER_ATTR_UNSPECIFIED                       PolicerAttr = 0
	PolicerAttr_POLICER_ATTR_METER_TYPE                        PolicerAttr = 1
	PolicerAttr_POLICER_ATTR_MODE                              PolicerAttr = 2
	PolicerAttr_POLICER_ATTR_COLOR_SOURCE                      PolicerAttr = 3
	PolicerAttr_POLICER_ATTR_CBS                               PolicerAttr = 4
	PolicerAttr_POLICER_ATTR_CIR                               PolicerAttr = 5
	PolicerAttr_POLICER_ATTR_PBS                               PolicerAttr = 6
	PolicerAttr_POLICER_ATTR_PIR                               PolicerAttr = 7
	PolicerAttr_POLICER_ATTR_GREEN_PACKET_ACTION               PolicerAttr = 8
	PolicerAttr_POLICER_ATTR_YELLOW_PACKET_ACTION              PolicerAttr = 9
	PolicerAttr_POLICER_ATTR_RED_PACKET_ACTION                 PolicerAttr = 10
	PolicerAttr_POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST PolicerAttr = 11
	PolicerAttr_POLICER_ATTR_OBJECT_STAGE                      PolicerAttr = 12
)

// Enum value maps for PolicerAttr.
var (
	PolicerAttr_name = map[int32]string{
		0:  "POLICER_ATTR_UNSPECIFIED",
		1:  "POLICER_ATTR_METER_TYPE",
		2:  "POLICER_ATTR_MODE",
		3:  "POLICER_ATTR_COLOR_SOURCE",
		4:  "POLICER_ATTR_CBS",
		5:  "POLICER_ATTR_CIR",
		6:  "POLICER_ATTR_PBS",
		7:  "POLICER_ATTR_PIR",
		8:  "POLICER_ATTR_GREEN_PACKET_ACTION",
		9:  "POLICER_ATTR_YELLOW_PACKET_ACTION",
		10: "POLICER_ATTR_RED_PACKET_ACTION",
		11: "POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST",
		12: "POLICER_ATTR_OBJECT_STAGE",
	}
	PolicerAttr_value = map[string]int32{
		"POLICER_ATTR_UNSPECIFIED":                       0,
		"POLICER_ATTR_METER_TYPE":                        1,
		"POLICER_ATTR_MODE":                              2,
		"POLICER_ATTR_COLOR_SOURCE":                      3,
		"POLICER_ATTR_CBS":                               4,
		"POLICER_ATTR_CIR":                               5,
		"POLICER_ATTR_PBS":                               6,
		"POLICER_ATTR_PIR":                               7,
		"POLICER_ATTR_GREEN_PACKET_ACTION":               8,
		"POLICER_ATTR_YELLOW_PACKET_ACTION":              9,
		"POLICER_ATTR_RED_PACKET_ACTION":                 10,
		"POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST": 11,
		"POLICER_ATTR_OBJECT_STAGE":                      12,
	}
)

func (x PolicerAttr) Enum() *PolicerAttr {
	p := new(PolicerAttr)
	*p = x
	return p
}

func (x PolicerAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicerAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_policer_proto_enumTypes[0].Descriptor()
}

func (PolicerAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_policer_proto_enumTypes[0]
}

func (x PolicerAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicerAttr.Descriptor instead.
func (PolicerAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_policer_proto_rawDescGZIP(), []int{0}
}

type CreatePolicerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                        uint64              `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	MeterType                     *MeterType          `protobuf:"varint,2,opt,name=meter_type,json=meterType,proto3,enum=lemming.dataplane.sai.MeterType,oneof" json:"meter_type,omitempty"`
	Mode                          *PolicerMode        `protobuf:"varint,3,opt,name=mode,proto3,enum=lemming.dataplane.sai.PolicerMode,oneof" json:"mode,omitempty"`
	ColorSource                   *PolicerColorSource `protobuf:"varint,4,opt,name=color_source,json=colorSource,proto3,enum=lemming.dataplane.sai.PolicerColorSource,oneof" json:"color_source,omitempty"`
	Cbs                           *uint64             `protobuf:"varint,5,opt,name=cbs,proto3,oneof" json:"cbs,omitempty"`
	Cir                           *uint64             `protobuf:"varint,6,opt,name=cir,proto3,oneof" json:"cir,omitempty"`
	Pbs                           *uint64             `protobuf:"varint,7,opt,name=pbs,proto3,oneof" json:"pbs,omitempty"`
	Pir                           *uint64             `protobuf:"varint,8,opt,name=pir,proto3,oneof" json:"pir,omitempty"`
	GreenPacketAction             *PacketAction       `protobuf:"varint,9,opt,name=green_packet_action,json=greenPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"green_packet_action,omitempty"`
	YellowPacketAction            *PacketAction       `protobuf:"varint,10,opt,name=yellow_packet_action,json=yellowPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"yellow_packet_action,omitempty"`
	RedPacketAction               *PacketAction       `protobuf:"varint,11,opt,name=red_packet_action,json=redPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"red_packet_action,omitempty"`
	EnableCounterPacketActionList []PacketAction      `protobuf:"varint,12,rep,packed,name=enable_counter_packet_action_list,json=enableCounterPacketActionList,proto3,enum=lemming.dataplane.sai.PacketAction" json:"enable_counter_packet_action_list,omitempty"`
	ObjectStage                   *ObjectStage        `protobuf:"varint,13,opt,name=object_stage,json=objectStage,proto3,enum=lemming.dataplane.sai.ObjectStage,oneof" json:"object_stage,omitempty"`
}

func (x *CreatePolicerRequest) Reset() {
	*x = CreatePolicerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicerRequest) ProtoMessage() {}

func (x *CreatePolicerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicerRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicerRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_policer_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePolicerRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreatePolicerRequest) GetMeterType() MeterType {
	if x != nil && x.MeterType != nil {
		return *x.MeterType
	}
	return MeterType_METER_TYPE_UNSPECIFIED
}

func (x *CreatePolicerRequest) GetMode() PolicerMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return PolicerMode_POLICER_MODE_UNSPECIFIED
}

func (x *CreatePolicerRequest) GetColorSource() PolicerColorSource {
	if x != nil && x.ColorSource != nil {
		return *x.ColorSource
	}
	return PolicerColorSource_POLICER_COLOR_SOURCE_UNSPECIFIED
}

func (x *CreatePolicerRequest) GetCbs() uint64 {
	if x != nil && x.Cbs != nil {
		return *x.Cbs
	}
	return 0
}

func (x *CreatePolicerRequest) GetCir() uint64 {
	if x != nil && x.Cir != nil {
		return *x.Cir
	}
	return 0
}

func (x *CreatePolicerRequest) GetPbs() uint64 {
	if x != nil && x.Pbs != nil {
		return *x.Pbs
	}
	return 0
}

func (x *CreatePolicerRequest) GetPir() uint64 {
	if x != nil && x.Pir != nil {
		return *x.Pir
	}
	return 0
}

func (x *CreatePolicerRequest) GetGreenPacketAction() PacketAction {
	if x != nil && x.GreenPacketAction != nil {
		return *x.GreenPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreatePolicerRequest) GetYellowPacketAction() PacketAction {
	if x != nil && x.YellowPacketAction != nil {
		return *x.YellowPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreatePolicerRequest) GetRedPacketAction() PacketAction {
	if x != nil && x.RedPacketAction != nil {
		return *x.RedPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreatePolicerRequest) GetEnableCounterPacketActionList() []PacketAction {
	if x != nil {
		return x.EnableCounterPacketActionList
	}
	return nil
}

func (x *CreatePolicerRequest) GetObjectStage() ObjectStage {
	if x != nil && x.ObjectStage != nil {
		return *x.ObjectStage
	}
	return ObjectStage_OBJECT_STAGE_UNSPECIFIED
}

type CreatePolicerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreatePolicerResponse) Reset() {
	*x = CreatePolicerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicerResponse) ProtoMessage() {}

func (x *CreatePolicerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicerResponse.ProtoReflect.Descriptor instead.
func (*CreatePolicerResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_policer_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePolicerResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemovePolicerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemovePolicerRequest) Reset() {
	*x = RemovePolicerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePolicerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePolicerRequest) ProtoMessage() {}

func (x *RemovePolicerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePolicerRequest.ProtoReflect.Descriptor instead.
func (*RemovePolicerRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_policer_proto_rawDescGZIP(), []int{2}
}

func (x *RemovePolicerRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemovePolicerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovePolicerResponse) Reset() {
	*x = RemovePolicerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePolicerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePolicerResponse) ProtoMessage() {}

func (x *RemovePolicerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePolicerResponse.ProtoReflect.Descriptor instead.
func (*RemovePolicerResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_policer_proto_rawDescGZIP(), []int{3}
}

type SetPolicerAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                           uint64         `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Cbs                           *uint64        `protobuf:"varint,2,opt,name=cbs,proto3,oneof" json:"cbs,omitempty"`
	Cir                           *uint64        `protobuf:"varint,3,opt,name=cir,proto3,oneof" json:"cir,omitempty"`
	Pbs                           *uint64        `protobuf:"varint,4,opt,name=pbs,proto3,oneof" json:"pbs,omitempty"`
	Pir                           *uint64        `protobuf:"varint,5,opt,name=pir,proto3,oneof" json:"pir,omitempty"`
	GreenPacketAction             *PacketAction  `protobuf:"varint,6,opt,name=green_packet_action,json=greenPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"green_packet_action,omitempty"`
	YellowPacketAction            *PacketAction  `protobuf:"varint,7,opt,name=yellow_packet_action,json=yellowPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"yellow_packet_action,omitempty"`
	RedPacketAction               *PacketAction  `protobuf:"varint,8,opt,name=red_packet_action,json=redPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"red_packet_action,omitempty"`
	EnableCounterPacketActionList []PacketAction `protobuf:"varint,9,rep,packed,name=enable_counter_packet_action_list,json=enableCounterPacketActionList,proto3,enum=lemming.dataplane.sai.PacketAction" json:"enable_counter_packet_action_list,omitempty"`
}

func (x *SetPolicerAttributeRequest) Reset() {
	*x = SetPolicerAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPolicerAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPolicerAttributeRequest) ProtoMessage() {}

func (x *SetPolicerAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPolicerAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetPolicerAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_policer_proto_rawDescGZIP(), []int{4}
}

func (x *SetPolicerAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetPolicerAttributeRequest) GetCbs() uint64 {
	if x != nil && x.Cbs != nil {
		return *x.Cbs
	}
	return 0
}

func (x *SetPolicerAttributeRequest) GetCir() uint64 {
	if x != nil && x.Cir != nil {
		return *x.Cir
	}
	return 0
}

func (x *SetPolicerAttributeRequest) GetPbs() uint64 {
	if x != nil && x.Pbs != nil {
		return *x.Pbs
	}
	return 0
}

func (x *SetPolicerAttributeRequest) GetPir() uint64 {
	if x != nil && x.Pir != nil {
		return *x.Pir
	}
	return 0
}

func (x *SetPolicerAttributeRequest) GetGreenPacketAction() PacketAction {
	if x != nil && x.GreenPacketAction != nil {
		return *x.GreenPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetPolicerAttributeRequest) GetYellowPacketAction() PacketAction {
	if x != nil && x.YellowPacketAction != nil {
		return *x.YellowPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetPolicerAttributeRequest) GetRedPacketAction() PacketAction {
	if x != nil && x.RedPacketAction != nil {
		return *x.RedPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetPolicerAttributeRequest) GetEnableCounterPacketActionList() []PacketAction {
	if x != nil {
		return x.EnableCounterPacketActionList
	}
	return nil
}

type SetPolicerAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPolicerAttributeResponse) Reset() {
	*x = SetPolicerAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPolicerAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPolicerAttributeResponse) ProtoMessage() {}

func (x *SetPolicerAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPolicerAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetPolicerAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_policer_proto_rawDescGZIP(), []int{5}
}

type GetPolicerAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64        `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []PolicerAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.PolicerAttr" json:"attr_type,omitempty"`
}

func (x *GetPolicerAttributeRequest) Reset() {
	*x = GetPolicerAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicerAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicerAttributeRequest) ProtoMessage() {}

func (x *GetPolicerAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicerAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetPolicerAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_policer_proto_rawDescGZIP(), []int{6}
}

func (x *GetPolicerAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetPolicerAttributeRequest) GetAttrType() []PolicerAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetPolicerAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *PolicerAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetPolicerAttributeResponse) Reset() {
	*x = GetPolicerAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicerAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicerAttributeResponse) ProtoMessage() {}

func (x *GetPolicerAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_policer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicerAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetPolicerAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_policer_proto_rawDescGZIP(), []int{7}
}

func (x *GetPolicerAttributeResponse) GetAttr() *PolicerAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_standalone_proto_policer_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_policer_proto_rawDesc = []byte{
	0x0a, 0x28, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x1a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x08, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x0a, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48,
	0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0c, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x03, 0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x03, 0x63, 0x62, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x03, 0x63, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x03, 0x70, 0x62, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06,
	0x48, 0x05, 0x52, 0x03, 0x70, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03, 0x70, 0x69,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x06, 0x52,
	0x03, 0x70, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x13, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48,
	0x07, 0x52, 0x11, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09,
	0x48, 0x08, 0x52, 0x12, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x11, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x73, 0x0a, 0x21, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x52, 0x1d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x0a, 0x52, 0x0b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5,
	0x18, 0x13, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x63, 0x62, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x69, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x70, 0x62, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x69, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x28,
	0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9c, 0x05, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x00, 0x52, 0x03, 0x63, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x05, 0x48, 0x01, 0x52, 0x03, 0x63, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03,
	0x70, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48,
	0x02, 0x52, 0x03, 0x70, 0x62, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03, 0x70, 0x69, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x03, 0x52, 0x03,
	0x70, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x13, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x04,
	0x52, 0x11, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48,
	0x05, 0x52, 0x12, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48, 0x06,
	0x52, 0x0f, 0x72, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x73, 0x0a, 0x21, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x52, 0x1d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x62,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x69, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x62,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x69, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6f, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x5a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0x9a, 0x03, 0x0a,
	0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x42,
	0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x43, 0x49, 0x52, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x42, 0x53, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x50, 0x49, 0x52, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x59, 0x45, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45,
	0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x10, 0x0c, 0x32, 0xe5, 0x03, 0x0a, 0x07, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7e, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x73, 0x61,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_policer_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_policer_proto_rawDescData = file_dataplane_standalone_proto_policer_proto_rawDesc
)

func file_dataplane_standalone_proto_policer_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_policer_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_policer_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_policer_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_policer_proto_rawDescData
}

var file_dataplane_standalone_proto_policer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_standalone_proto_policer_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dataplane_standalone_proto_policer_proto_goTypes = []interface{}{
	(PolicerAttr)(0),                    // 0: lemming.dataplane.sai.PolicerAttr
	(*CreatePolicerRequest)(nil),        // 1: lemming.dataplane.sai.CreatePolicerRequest
	(*CreatePolicerResponse)(nil),       // 2: lemming.dataplane.sai.CreatePolicerResponse
	(*RemovePolicerRequest)(nil),        // 3: lemming.dataplane.sai.RemovePolicerRequest
	(*RemovePolicerResponse)(nil),       // 4: lemming.dataplane.sai.RemovePolicerResponse
	(*SetPolicerAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetPolicerAttributeRequest
	(*SetPolicerAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetPolicerAttributeResponse
	(*GetPolicerAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetPolicerAttributeRequest
	(*GetPolicerAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetPolicerAttributeResponse
	(MeterType)(0),                      // 9: lemming.dataplane.sai.MeterType
	(PolicerMode)(0),                    // 10: lemming.dataplane.sai.PolicerMode
	(PolicerColorSource)(0),             // 11: lemming.dataplane.sai.PolicerColorSource
	(PacketAction)(0),                   // 12: lemming.dataplane.sai.PacketAction
	(ObjectStage)(0),                    // 13: lemming.dataplane.sai.ObjectStage
	(*PolicerAttribute)(nil),            // 14: lemming.dataplane.sai.PolicerAttribute
}
var file_dataplane_standalone_proto_policer_proto_depIdxs = []int32{
	9,  // 0: lemming.dataplane.sai.CreatePolicerRequest.meter_type:type_name -> lemming.dataplane.sai.MeterType
	10, // 1: lemming.dataplane.sai.CreatePolicerRequest.mode:type_name -> lemming.dataplane.sai.PolicerMode
	11, // 2: lemming.dataplane.sai.CreatePolicerRequest.color_source:type_name -> lemming.dataplane.sai.PolicerColorSource
	12, // 3: lemming.dataplane.sai.CreatePolicerRequest.green_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	12, // 4: lemming.dataplane.sai.CreatePolicerRequest.yellow_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	12, // 5: lemming.dataplane.sai.CreatePolicerRequest.red_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	12, // 6: lemming.dataplane.sai.CreatePolicerRequest.enable_counter_packet_action_list:type_name -> lemming.dataplane.sai.PacketAction
	13, // 7: lemming.dataplane.sai.CreatePolicerRequest.object_stage:type_name -> lemming.dataplane.sai.ObjectStage
	12, // 8: lemming.dataplane.sai.SetPolicerAttributeRequest.green_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	12, // 9: lemming.dataplane.sai.SetPolicerAttributeRequest.yellow_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	12, // 10: lemming.dataplane.sai.SetPolicerAttributeRequest.red_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	12, // 11: lemming.dataplane.sai.SetPolicerAttributeRequest.enable_counter_packet_action_list:type_name -> lemming.dataplane.sai.PacketAction
	0,  // 12: lemming.dataplane.sai.GetPolicerAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.PolicerAttr
	14, // 13: lemming.dataplane.sai.GetPolicerAttributeResponse.attr:type_name -> lemming.dataplane.sai.PolicerAttribute
	1,  // 14: lemming.dataplane.sai.Policer.CreatePolicer:input_type -> lemming.dataplane.sai.CreatePolicerRequest
	3,  // 15: lemming.dataplane.sai.Policer.RemovePolicer:input_type -> lemming.dataplane.sai.RemovePolicerRequest
	5,  // 16: lemming.dataplane.sai.Policer.SetPolicerAttribute:input_type -> lemming.dataplane.sai.SetPolicerAttributeRequest
	7,  // 17: lemming.dataplane.sai.Policer.GetPolicerAttribute:input_type -> lemming.dataplane.sai.GetPolicerAttributeRequest
	2,  // 18: lemming.dataplane.sai.Policer.CreatePolicer:output_type -> lemming.dataplane.sai.CreatePolicerResponse
	4,  // 19: lemming.dataplane.sai.Policer.RemovePolicer:output_type -> lemming.dataplane.sai.RemovePolicerResponse
	6,  // 20: lemming.dataplane.sai.Policer.SetPolicerAttribute:output_type -> lemming.dataplane.sai.SetPolicerAttributeResponse
	8,  // 21: lemming.dataplane.sai.Policer.GetPolicerAttribute:output_type -> lemming.dataplane.sai.GetPolicerAttributeResponse
	18, // [18:22] is the sub-list for method output_type
	14, // [14:18] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_policer_proto_init() }
func file_dataplane_standalone_proto_policer_proto_init() {
	if File_dataplane_standalone_proto_policer_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_policer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_policer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_policer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePolicerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_policer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePolicerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_policer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPolicerAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_policer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPolicerAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_policer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicerAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_policer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicerAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_policer_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_policer_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_policer_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_policer_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_policer_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_policer_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_policer_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_policer_proto = out.File
	file_dataplane_standalone_proto_policer_proto_rawDesc = nil
	file_dataplane_standalone_proto_policer_proto_goTypes = nil
	file_dataplane_standalone_proto_policer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PolicerClient is the client API for Policer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PolicerClient interface {
	CreatePolicer(ctx context.Context, in *CreatePolicerRequest, opts ...grpc.CallOption) (*CreatePolicerResponse, error)
	RemovePolicer(ctx context.Context, in *RemovePolicerRequest, opts ...grpc.CallOption) (*RemovePolicerResponse, error)
	SetPolicerAttribute(ctx context.Context, in *SetPolicerAttributeRequest, opts ...grpc.CallOption) (*SetPolicerAttributeResponse, error)
	GetPolicerAttribute(ctx context.Context, in *GetPolicerAttributeRequest, opts ...grpc.CallOption) (*GetPolicerAttributeResponse, error)
}

type policerClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicerClient(cc grpc.ClientConnInterface) PolicerClient {
	return &policerClient{cc}
}

func (c *policerClient) CreatePolicer(ctx context.Context, in *CreatePolicerRequest, opts ...grpc.CallOption) (*CreatePolicerResponse, error) {
	out := new(CreatePolicerResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Policer/CreatePolicer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policerClient) RemovePolicer(ctx context.Context, in *RemovePolicerRequest, opts ...grpc.CallOption) (*RemovePolicerResponse, error) {
	out := new(RemovePolicerResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Policer/RemovePolicer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policerClient) SetPolicerAttribute(ctx context.Context, in *SetPolicerAttributeRequest, opts ...grpc.CallOption) (*SetPolicerAttributeResponse, error) {
	out := new(SetPolicerAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Policer/SetPolicerAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policerClient) GetPolicerAttribute(ctx context.Context, in *GetPolicerAttributeRequest, opts ...grpc.CallOption) (*GetPolicerAttributeResponse, error) {
	out := new(GetPolicerAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Policer/GetPolicerAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicerServer is the server API for Policer service.
type PolicerServer interface {
	CreatePolicer(context.Context, *CreatePolicerRequest) (*CreatePolicerResponse, error)
	RemovePolicer(context.Context, *RemovePolicerRequest) (*RemovePolicerResponse, error)
	SetPolicerAttribute(context.Context, *SetPolicerAttributeRequest) (*SetPolicerAttributeResponse, error)
	GetPolicerAttribute(context.Context, *GetPolicerAttributeRequest) (*GetPolicerAttributeResponse, error)
}

// UnimplementedPolicerServer can be embedded to have forward compatible implementations.
type UnimplementedPolicerServer struct {
}

func (*UnimplementedPolicerServer) CreatePolicer(context.Context, *CreatePolicerRequest) (*CreatePolicerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicer not implemented")
}
func (*UnimplementedPolicerServer) RemovePolicer(context.Context, *RemovePolicerRequest) (*RemovePolicerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicer not implemented")
}
func (*UnimplementedPolicerServer) SetPolicerAttribute(context.Context, *SetPolicerAttributeRequest) (*SetPolicerAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPolicerAttribute not implemented")
}
func (*UnimplementedPolicerServer) GetPolicerAttribute(context.Context, *GetPolicerAttributeRequest) (*GetPolicerAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicerAttribute not implemented")
}

func RegisterPolicerServer(s *grpc.Server, srv PolicerServer) {
	s.RegisterService(&_Policer_serviceDesc, srv)
}

func _Policer_CreatePolicer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicerServer).CreatePolicer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Policer/CreatePolicer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicerServer).CreatePolicer(ctx, req.(*CreatePolicerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policer_RemovePolicer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePolicerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicerServer).RemovePolicer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Policer/RemovePolicer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicerServer).RemovePolicer(ctx, req.(*RemovePolicerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policer_SetPolicerAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPolicerAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicerServer).SetPolicerAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Policer/SetPolicerAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicerServer).SetPolicerAttribute(ctx, req.(*SetPolicerAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policer_GetPolicerAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicerAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicerServer).GetPolicerAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Policer/GetPolicerAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicerServer).GetPolicerAttribute(ctx, req.(*GetPolicerAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Policer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Policer",
	HandlerType: (*PolicerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicer",
			Handler:    _Policer_CreatePolicer_Handler,
		},
		{
			MethodName: "RemovePolicer",
			Handler:    _Policer_RemovePolicer_Handler,
		},
		{
			MethodName: "SetPolicerAttribute",
			Handler:    _Policer_SetPolicerAttribute_Handler,
		},
		{
			MethodName: "GetPolicerAttribute",
			Handler:    _Policer_GetPolicerAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/policer.proto",
}
