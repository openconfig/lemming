// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/macsec.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MacsecAttr int32

const (
	MacsecAttr_MACSEC_ATTR_UNSPECIFIED                                MacsecAttr = 0
	MacsecAttr_MACSEC_ATTR_DIRECTION                                  MacsecAttr = 1
	MacsecAttr_MACSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED       MacsecAttr = 2
	MacsecAttr_MACSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED MacsecAttr = 3
	MacsecAttr_MACSEC_ATTR_STATS_MODE_READ_SUPPORTED                  MacsecAttr = 4
	MacsecAttr_MACSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED            MacsecAttr = 5
	MacsecAttr_MACSEC_ATTR_SCI_IN_INGRESS_MACSEC_ACL                  MacsecAttr = 6
	MacsecAttr_MACSEC_ATTR_SUPPORTED_CIPHER_SUITE_LIST                MacsecAttr = 7
	MacsecAttr_MACSEC_ATTR_PN_32BIT_SUPPORTED                         MacsecAttr = 8
	MacsecAttr_MACSEC_ATTR_XPN_64BIT_SUPPORTED                        MacsecAttr = 9
	MacsecAttr_MACSEC_ATTR_GCM_AES128_SUPPORTED                       MacsecAttr = 10
	MacsecAttr_MACSEC_ATTR_GCM_AES256_SUPPORTED                       MacsecAttr = 11
	MacsecAttr_MACSEC_ATTR_SECTAG_OFFSETS_SUPPORTED                   MacsecAttr = 12
	MacsecAttr_MACSEC_ATTR_SYSTEM_SIDE_MTU                            MacsecAttr = 13
	MacsecAttr_MACSEC_ATTR_WARM_BOOT_SUPPORTED                        MacsecAttr = 14
	MacsecAttr_MACSEC_ATTR_WARM_BOOT_ENABLE                           MacsecAttr = 15
	MacsecAttr_MACSEC_ATTR_CTAG_TPID                                  MacsecAttr = 16
	MacsecAttr_MACSEC_ATTR_STAG_TPID                                  MacsecAttr = 17
	MacsecAttr_MACSEC_ATTR_MAX_VLAN_TAGS_PARSED                       MacsecAttr = 18
	MacsecAttr_MACSEC_ATTR_STATS_MODE                                 MacsecAttr = 19
	MacsecAttr_MACSEC_ATTR_PHYSICAL_BYPASS_ENABLE                     MacsecAttr = 20
	MacsecAttr_MACSEC_ATTR_SUPPORTED_PORT_LIST                        MacsecAttr = 21
	MacsecAttr_MACSEC_ATTR_AVAILABLE_MACSEC_FLOW                      MacsecAttr = 22
	MacsecAttr_MACSEC_ATTR_FLOW_LIST                                  MacsecAttr = 23
	MacsecAttr_MACSEC_ATTR_AVAILABLE_MACSEC_SC                        MacsecAttr = 24
	MacsecAttr_MACSEC_ATTR_AVAILABLE_MACSEC_SA                        MacsecAttr = 25
)

// Enum value maps for MacsecAttr.
var (
	MacsecAttr_name = map[int32]string{
		0:  "MACSEC_ATTR_UNSPECIFIED",
		1:  "MACSEC_ATTR_DIRECTION",
		2:  "MACSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED",
		3:  "MACSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED",
		4:  "MACSEC_ATTR_STATS_MODE_READ_SUPPORTED",
		5:  "MACSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED",
		6:  "MACSEC_ATTR_SCI_IN_INGRESS_MACSEC_ACL",
		7:  "MACSEC_ATTR_SUPPORTED_CIPHER_SUITE_LIST",
		8:  "MACSEC_ATTR_PN_32BIT_SUPPORTED",
		9:  "MACSEC_ATTR_XPN_64BIT_SUPPORTED",
		10: "MACSEC_ATTR_GCM_AES128_SUPPORTED",
		11: "MACSEC_ATTR_GCM_AES256_SUPPORTED",
		12: "MACSEC_ATTR_SECTAG_OFFSETS_SUPPORTED",
		13: "MACSEC_ATTR_SYSTEM_SIDE_MTU",
		14: "MACSEC_ATTR_WARM_BOOT_SUPPORTED",
		15: "MACSEC_ATTR_WARM_BOOT_ENABLE",
		16: "MACSEC_ATTR_CTAG_TPID",
		17: "MACSEC_ATTR_STAG_TPID",
		18: "MACSEC_ATTR_MAX_VLAN_TAGS_PARSED",
		19: "MACSEC_ATTR_STATS_MODE",
		20: "MACSEC_ATTR_PHYSICAL_BYPASS_ENABLE",
		21: "MACSEC_ATTR_SUPPORTED_PORT_LIST",
		22: "MACSEC_ATTR_AVAILABLE_MACSEC_FLOW",
		23: "MACSEC_ATTR_FLOW_LIST",
		24: "MACSEC_ATTR_AVAILABLE_MACSEC_SC",
		25: "MACSEC_ATTR_AVAILABLE_MACSEC_SA",
	}
	MacsecAttr_value = map[string]int32{
		"MACSEC_ATTR_UNSPECIFIED":                                0,
		"MACSEC_ATTR_DIRECTION":                                  1,
		"MACSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED":       2,
		"MACSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED": 3,
		"MACSEC_ATTR_STATS_MODE_READ_SUPPORTED":                  4,
		"MACSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED":            5,
		"MACSEC_ATTR_SCI_IN_INGRESS_MACSEC_ACL":                  6,
		"MACSEC_ATTR_SUPPORTED_CIPHER_SUITE_LIST":                7,
		"MACSEC_ATTR_PN_32BIT_SUPPORTED":                         8,
		"MACSEC_ATTR_XPN_64BIT_SUPPORTED":                        9,
		"MACSEC_ATTR_GCM_AES128_SUPPORTED":                       10,
		"MACSEC_ATTR_GCM_AES256_SUPPORTED":                       11,
		"MACSEC_ATTR_SECTAG_OFFSETS_SUPPORTED":                   12,
		"MACSEC_ATTR_SYSTEM_SIDE_MTU":                            13,
		"MACSEC_ATTR_WARM_BOOT_SUPPORTED":                        14,
		"MACSEC_ATTR_WARM_BOOT_ENABLE":                           15,
		"MACSEC_ATTR_CTAG_TPID":                                  16,
		"MACSEC_ATTR_STAG_TPID":                                  17,
		"MACSEC_ATTR_MAX_VLAN_TAGS_PARSED":                       18,
		"MACSEC_ATTR_STATS_MODE":                                 19,
		"MACSEC_ATTR_PHYSICAL_BYPASS_ENABLE":                     20,
		"MACSEC_ATTR_SUPPORTED_PORT_LIST":                        21,
		"MACSEC_ATTR_AVAILABLE_MACSEC_FLOW":                      22,
		"MACSEC_ATTR_FLOW_LIST":                                  23,
		"MACSEC_ATTR_AVAILABLE_MACSEC_SC":                        24,
		"MACSEC_ATTR_AVAILABLE_MACSEC_SA":                        25,
	}
)

func (x MacsecAttr) Enum() *MacsecAttr {
	p := new(MacsecAttr)
	*p = x
	return p
}

func (x MacsecAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_macsec_proto_enumTypes[0].Descriptor()
}

func (MacsecAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_macsec_proto_enumTypes[0]
}

func (x MacsecAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecAttr.Descriptor instead.
func (MacsecAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{0}
}

type MacsecPortAttr int32

const (
	MacsecPortAttr_MACSEC_PORT_ATTR_UNSPECIFIED           MacsecPortAttr = 0
	MacsecPortAttr_MACSEC_PORT_ATTR_MACSEC_DIRECTION      MacsecPortAttr = 1
	MacsecPortAttr_MACSEC_PORT_ATTR_PORT_ID               MacsecPortAttr = 2
	MacsecPortAttr_MACSEC_PORT_ATTR_CTAG_ENABLE           MacsecPortAttr = 3
	MacsecPortAttr_MACSEC_PORT_ATTR_STAG_ENABLE           MacsecPortAttr = 4
	MacsecPortAttr_MACSEC_PORT_ATTR_SWITCH_SWITCHING_MODE MacsecPortAttr = 5
)

// Enum value maps for MacsecPortAttr.
var (
	MacsecPortAttr_name = map[int32]string{
		0: "MACSEC_PORT_ATTR_UNSPECIFIED",
		1: "MACSEC_PORT_ATTR_MACSEC_DIRECTION",
		2: "MACSEC_PORT_ATTR_PORT_ID",
		3: "MACSEC_PORT_ATTR_CTAG_ENABLE",
		4: "MACSEC_PORT_ATTR_STAG_ENABLE",
		5: "MACSEC_PORT_ATTR_SWITCH_SWITCHING_MODE",
	}
	MacsecPortAttr_value = map[string]int32{
		"MACSEC_PORT_ATTR_UNSPECIFIED":           0,
		"MACSEC_PORT_ATTR_MACSEC_DIRECTION":      1,
		"MACSEC_PORT_ATTR_PORT_ID":               2,
		"MACSEC_PORT_ATTR_CTAG_ENABLE":           3,
		"MACSEC_PORT_ATTR_STAG_ENABLE":           4,
		"MACSEC_PORT_ATTR_SWITCH_SWITCHING_MODE": 5,
	}
)

func (x MacsecPortAttr) Enum() *MacsecPortAttr {
	p := new(MacsecPortAttr)
	*p = x
	return p
}

func (x MacsecPortAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecPortAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_macsec_proto_enumTypes[1].Descriptor()
}

func (MacsecPortAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_macsec_proto_enumTypes[1]
}

func (x MacsecPortAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecPortAttr.Descriptor instead.
func (MacsecPortAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{1}
}

type MacsecFlowAttr int32

const (
	MacsecFlowAttr_MACSEC_FLOW_ATTR_UNSPECIFIED      MacsecFlowAttr = 0
	MacsecFlowAttr_MACSEC_FLOW_ATTR_MACSEC_DIRECTION MacsecFlowAttr = 1
	MacsecFlowAttr_MACSEC_FLOW_ATTR_ACL_ENTRY_LIST   MacsecFlowAttr = 2
	MacsecFlowAttr_MACSEC_FLOW_ATTR_SC_LIST          MacsecFlowAttr = 3
)

// Enum value maps for MacsecFlowAttr.
var (
	MacsecFlowAttr_name = map[int32]string{
		0: "MACSEC_FLOW_ATTR_UNSPECIFIED",
		1: "MACSEC_FLOW_ATTR_MACSEC_DIRECTION",
		2: "MACSEC_FLOW_ATTR_ACL_ENTRY_LIST",
		3: "MACSEC_FLOW_ATTR_SC_LIST",
	}
	MacsecFlowAttr_value = map[string]int32{
		"MACSEC_FLOW_ATTR_UNSPECIFIED":      0,
		"MACSEC_FLOW_ATTR_MACSEC_DIRECTION": 1,
		"MACSEC_FLOW_ATTR_ACL_ENTRY_LIST":   2,
		"MACSEC_FLOW_ATTR_SC_LIST":          3,
	}
)

func (x MacsecFlowAttr) Enum() *MacsecFlowAttr {
	p := new(MacsecFlowAttr)
	*p = x
	return p
}

func (x MacsecFlowAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecFlowAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_macsec_proto_enumTypes[2].Descriptor()
}

func (MacsecFlowAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_macsec_proto_enumTypes[2]
}

func (x MacsecFlowAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecFlowAttr.Descriptor instead.
func (MacsecFlowAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{2}
}

type MacsecScAttr int32

const (
	MacsecScAttr_MACSEC_SC_ATTR_UNSPECIFIED                     MacsecScAttr = 0
	MacsecScAttr_MACSEC_SC_ATTR_MACSEC_DIRECTION                MacsecScAttr = 1
	MacsecScAttr_MACSEC_SC_ATTR_FLOW_ID                         MacsecScAttr = 2
	MacsecScAttr_MACSEC_SC_ATTR_MACSEC_SCI                      MacsecScAttr = 3
	MacsecScAttr_MACSEC_SC_ATTR_MACSEC_EXPLICIT_SCI_ENABLE      MacsecScAttr = 4
	MacsecScAttr_MACSEC_SC_ATTR_MACSEC_SECTAG_OFFSET            MacsecScAttr = 5
	MacsecScAttr_MACSEC_SC_ATTR_ACTIVE_EGRESS_SA_ID             MacsecScAttr = 6
	MacsecScAttr_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_ENABLE MacsecScAttr = 7
	MacsecScAttr_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_WINDOW MacsecScAttr = 8
	MacsecScAttr_MACSEC_SC_ATTR_SA_LIST                         MacsecScAttr = 9
	MacsecScAttr_MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE             MacsecScAttr = 10
	MacsecScAttr_MACSEC_SC_ATTR_ENCRYPTION_ENABLE               MacsecScAttr = 11
)

// Enum value maps for MacsecScAttr.
var (
	MacsecScAttr_name = map[int32]string{
		0:  "MACSEC_SC_ATTR_UNSPECIFIED",
		1:  "MACSEC_SC_ATTR_MACSEC_DIRECTION",
		2:  "MACSEC_SC_ATTR_FLOW_ID",
		3:  "MACSEC_SC_ATTR_MACSEC_SCI",
		4:  "MACSEC_SC_ATTR_MACSEC_EXPLICIT_SCI_ENABLE",
		5:  "MACSEC_SC_ATTR_MACSEC_SECTAG_OFFSET",
		6:  "MACSEC_SC_ATTR_ACTIVE_EGRESS_SA_ID",
		7:  "MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_ENABLE",
		8:  "MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_WINDOW",
		9:  "MACSEC_SC_ATTR_SA_LIST",
		10: "MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE",
		11: "MACSEC_SC_ATTR_ENCRYPTION_ENABLE",
	}
	MacsecScAttr_value = map[string]int32{
		"MACSEC_SC_ATTR_UNSPECIFIED":                     0,
		"MACSEC_SC_ATTR_MACSEC_DIRECTION":                1,
		"MACSEC_SC_ATTR_FLOW_ID":                         2,
		"MACSEC_SC_ATTR_MACSEC_SCI":                      3,
		"MACSEC_SC_ATTR_MACSEC_EXPLICIT_SCI_ENABLE":      4,
		"MACSEC_SC_ATTR_MACSEC_SECTAG_OFFSET":            5,
		"MACSEC_SC_ATTR_ACTIVE_EGRESS_SA_ID":             6,
		"MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_ENABLE": 7,
		"MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_WINDOW": 8,
		"MACSEC_SC_ATTR_SA_LIST":                         9,
		"MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE":             10,
		"MACSEC_SC_ATTR_ENCRYPTION_ENABLE":               11,
	}
)

func (x MacsecScAttr) Enum() *MacsecScAttr {
	p := new(MacsecScAttr)
	*p = x
	return p
}

func (x MacsecScAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecScAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_macsec_proto_enumTypes[3].Descriptor()
}

func (MacsecScAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_macsec_proto_enumTypes[3]
}

func (x MacsecScAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecScAttr.Descriptor instead.
func (MacsecScAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{3}
}

type MacsecSaAttr int32

const (
	MacsecSaAttr_MACSEC_SA_ATTR_UNSPECIFIED           MacsecSaAttr = 0
	MacsecSaAttr_MACSEC_SA_ATTR_MACSEC_DIRECTION      MacsecSaAttr = 1
	MacsecSaAttr_MACSEC_SA_ATTR_SC_ID                 MacsecSaAttr = 2
	MacsecSaAttr_MACSEC_SA_ATTR_AN                    MacsecSaAttr = 3
	MacsecSaAttr_MACSEC_SA_ATTR_SAK                   MacsecSaAttr = 4
	MacsecSaAttr_MACSEC_SA_ATTR_SALT                  MacsecSaAttr = 5
	MacsecSaAttr_MACSEC_SA_ATTR_AUTH_KEY              MacsecSaAttr = 6
	MacsecSaAttr_MACSEC_SA_ATTR_CONFIGURED_EGRESS_XPN MacsecSaAttr = 7
	MacsecSaAttr_MACSEC_SA_ATTR_CURRENT_XPN           MacsecSaAttr = 8
	MacsecSaAttr_MACSEC_SA_ATTR_MINIMUM_INGRESS_XPN   MacsecSaAttr = 9
	MacsecSaAttr_MACSEC_SA_ATTR_MACSEC_SSCI           MacsecSaAttr = 10
)

// Enum value maps for MacsecSaAttr.
var (
	MacsecSaAttr_name = map[int32]string{
		0:  "MACSEC_SA_ATTR_UNSPECIFIED",
		1:  "MACSEC_SA_ATTR_MACSEC_DIRECTION",
		2:  "MACSEC_SA_ATTR_SC_ID",
		3:  "MACSEC_SA_ATTR_AN",
		4:  "MACSEC_SA_ATTR_SAK",
		5:  "MACSEC_SA_ATTR_SALT",
		6:  "MACSEC_SA_ATTR_AUTH_KEY",
		7:  "MACSEC_SA_ATTR_CONFIGURED_EGRESS_XPN",
		8:  "MACSEC_SA_ATTR_CURRENT_XPN",
		9:  "MACSEC_SA_ATTR_MINIMUM_INGRESS_XPN",
		10: "MACSEC_SA_ATTR_MACSEC_SSCI",
	}
	MacsecSaAttr_value = map[string]int32{
		"MACSEC_SA_ATTR_UNSPECIFIED":           0,
		"MACSEC_SA_ATTR_MACSEC_DIRECTION":      1,
		"MACSEC_SA_ATTR_SC_ID":                 2,
		"MACSEC_SA_ATTR_AN":                    3,
		"MACSEC_SA_ATTR_SAK":                   4,
		"MACSEC_SA_ATTR_SALT":                  5,
		"MACSEC_SA_ATTR_AUTH_KEY":              6,
		"MACSEC_SA_ATTR_CONFIGURED_EGRESS_XPN": 7,
		"MACSEC_SA_ATTR_CURRENT_XPN":           8,
		"MACSEC_SA_ATTR_MINIMUM_INGRESS_XPN":   9,
		"MACSEC_SA_ATTR_MACSEC_SSCI":           10,
	}
)

func (x MacsecSaAttr) Enum() *MacsecSaAttr {
	p := new(MacsecSaAttr)
	*p = x
	return p
}

func (x MacsecSaAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecSaAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_macsec_proto_enumTypes[4].Descriptor()
}

func (MacsecSaAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_macsec_proto_enumTypes[4]
}

func (x MacsecSaAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecSaAttr.Descriptor instead.
func (MacsecSaAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{4}
}

type CreateMacsecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch               uint64           `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Direction            *MacsecDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=lemming.dataplane.sai.MacsecDirection,oneof" json:"direction,omitempty"`
	WarmBootEnable       *bool            `protobuf:"varint,3,opt,name=warm_boot_enable,json=warmBootEnable,proto3,oneof" json:"warm_boot_enable,omitempty"`
	CtagTpid             *uint32          `protobuf:"varint,4,opt,name=ctag_tpid,json=ctagTpid,proto3,oneof" json:"ctag_tpid,omitempty"`
	StagTpid             *uint32          `protobuf:"varint,5,opt,name=stag_tpid,json=stagTpid,proto3,oneof" json:"stag_tpid,omitempty"`
	MaxVlanTagsParsed    *uint32          `protobuf:"varint,6,opt,name=max_vlan_tags_parsed,json=maxVlanTagsParsed,proto3,oneof" json:"max_vlan_tags_parsed,omitempty"`
	StatsMode            *StatsMode       `protobuf:"varint,7,opt,name=stats_mode,json=statsMode,proto3,enum=lemming.dataplane.sai.StatsMode,oneof" json:"stats_mode,omitempty"`
	PhysicalBypassEnable *bool            `protobuf:"varint,8,opt,name=physical_bypass_enable,json=physicalBypassEnable,proto3,oneof" json:"physical_bypass_enable,omitempty"`
}

func (x *CreateMacsecRequest) Reset() {
	*x = CreateMacsecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMacsecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMacsecRequest) ProtoMessage() {}

func (x *CreateMacsecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMacsecRequest.ProtoReflect.Descriptor instead.
func (*CreateMacsecRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{0}
}

func (x *CreateMacsecRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateMacsecRequest) GetDirection() MacsecDirection {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return MacsecDirection_MACSEC_DIRECTION_UNSPECIFIED
}

func (x *CreateMacsecRequest) GetWarmBootEnable() bool {
	if x != nil && x.WarmBootEnable != nil {
		return *x.WarmBootEnable
	}
	return false
}

func (x *CreateMacsecRequest) GetCtagTpid() uint32 {
	if x != nil && x.CtagTpid != nil {
		return *x.CtagTpid
	}
	return 0
}

func (x *CreateMacsecRequest) GetStagTpid() uint32 {
	if x != nil && x.StagTpid != nil {
		return *x.StagTpid
	}
	return 0
}

func (x *CreateMacsecRequest) GetMaxVlanTagsParsed() uint32 {
	if x != nil && x.MaxVlanTagsParsed != nil {
		return *x.MaxVlanTagsParsed
	}
	return 0
}

func (x *CreateMacsecRequest) GetStatsMode() StatsMode {
	if x != nil && x.StatsMode != nil {
		return *x.StatsMode
	}
	return StatsMode_STATS_MODE_UNSPECIFIED
}

func (x *CreateMacsecRequest) GetPhysicalBypassEnable() bool {
	if x != nil && x.PhysicalBypassEnable != nil {
		return *x.PhysicalBypassEnable
	}
	return false
}

type CreateMacsecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateMacsecResponse) Reset() {
	*x = CreateMacsecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMacsecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMacsecResponse) ProtoMessage() {}

func (x *CreateMacsecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMacsecResponse.ProtoReflect.Descriptor instead.
func (*CreateMacsecResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMacsecResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveMacsecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveMacsecRequest) Reset() {
	*x = RemoveMacsecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMacsecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMacsecRequest) ProtoMessage() {}

func (x *RemoveMacsecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMacsecRequest.ProtoReflect.Descriptor instead.
func (*RemoveMacsecRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveMacsecRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveMacsecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveMacsecResponse) Reset() {
	*x = RemoveMacsecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMacsecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMacsecResponse) ProtoMessage() {}

func (x *RemoveMacsecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMacsecResponse.ProtoReflect.Descriptor instead.
func (*RemoveMacsecResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{3}
}

type SetMacsecAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                  uint64     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	WarmBootEnable       *bool      `protobuf:"varint,2,opt,name=warm_boot_enable,json=warmBootEnable,proto3,oneof" json:"warm_boot_enable,omitempty"`
	CtagTpid             *uint32    `protobuf:"varint,3,opt,name=ctag_tpid,json=ctagTpid,proto3,oneof" json:"ctag_tpid,omitempty"`
	StagTpid             *uint32    `protobuf:"varint,4,opt,name=stag_tpid,json=stagTpid,proto3,oneof" json:"stag_tpid,omitempty"`
	MaxVlanTagsParsed    *uint32    `protobuf:"varint,5,opt,name=max_vlan_tags_parsed,json=maxVlanTagsParsed,proto3,oneof" json:"max_vlan_tags_parsed,omitempty"`
	StatsMode            *StatsMode `protobuf:"varint,6,opt,name=stats_mode,json=statsMode,proto3,enum=lemming.dataplane.sai.StatsMode,oneof" json:"stats_mode,omitempty"`
	PhysicalBypassEnable *bool      `protobuf:"varint,7,opt,name=physical_bypass_enable,json=physicalBypassEnable,proto3,oneof" json:"physical_bypass_enable,omitempty"`
}

func (x *SetMacsecAttributeRequest) Reset() {
	*x = SetMacsecAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMacsecAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMacsecAttributeRequest) ProtoMessage() {}

func (x *SetMacsecAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMacsecAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetMacsecAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{4}
}

func (x *SetMacsecAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetMacsecAttributeRequest) GetWarmBootEnable() bool {
	if x != nil && x.WarmBootEnable != nil {
		return *x.WarmBootEnable
	}
	return false
}

func (x *SetMacsecAttributeRequest) GetCtagTpid() uint32 {
	if x != nil && x.CtagTpid != nil {
		return *x.CtagTpid
	}
	return 0
}

func (x *SetMacsecAttributeRequest) GetStagTpid() uint32 {
	if x != nil && x.StagTpid != nil {
		return *x.StagTpid
	}
	return 0
}

func (x *SetMacsecAttributeRequest) GetMaxVlanTagsParsed() uint32 {
	if x != nil && x.MaxVlanTagsParsed != nil {
		return *x.MaxVlanTagsParsed
	}
	return 0
}

func (x *SetMacsecAttributeRequest) GetStatsMode() StatsMode {
	if x != nil && x.StatsMode != nil {
		return *x.StatsMode
	}
	return StatsMode_STATS_MODE_UNSPECIFIED
}

func (x *SetMacsecAttributeRequest) GetPhysicalBypassEnable() bool {
	if x != nil && x.PhysicalBypassEnable != nil {
		return *x.PhysicalBypassEnable
	}
	return false
}

type SetMacsecAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMacsecAttributeResponse) Reset() {
	*x = SetMacsecAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMacsecAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMacsecAttributeResponse) ProtoMessage() {}

func (x *SetMacsecAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMacsecAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetMacsecAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{5}
}

type GetMacsecAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []MacsecAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.MacsecAttr" json:"attr_type,omitempty"`
}

func (x *GetMacsecAttributeRequest) Reset() {
	*x = GetMacsecAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMacsecAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMacsecAttributeRequest) ProtoMessage() {}

func (x *GetMacsecAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMacsecAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetMacsecAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{6}
}

func (x *GetMacsecAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetMacsecAttributeRequest) GetAttrType() []MacsecAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetMacsecAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *MacsecAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetMacsecAttributeResponse) Reset() {
	*x = GetMacsecAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMacsecAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMacsecAttributeResponse) ProtoMessage() {}

func (x *GetMacsecAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMacsecAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetMacsecAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{7}
}

func (x *GetMacsecAttributeResponse) GetAttr() *MacsecAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateMacsecPortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch              uint64               `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	MacsecDirection     *MacsecDirection     `protobuf:"varint,2,opt,name=macsec_direction,json=macsecDirection,proto3,enum=lemming.dataplane.sai.MacsecDirection,oneof" json:"macsec_direction,omitempty"`
	PortId              *uint64              `protobuf:"varint,3,opt,name=port_id,json=portId,proto3,oneof" json:"port_id,omitempty"`
	CtagEnable          *bool                `protobuf:"varint,4,opt,name=ctag_enable,json=ctagEnable,proto3,oneof" json:"ctag_enable,omitempty"`
	StagEnable          *bool                `protobuf:"varint,5,opt,name=stag_enable,json=stagEnable,proto3,oneof" json:"stag_enable,omitempty"`
	SwitchSwitchingMode *SwitchSwitchingMode `protobuf:"varint,6,opt,name=switch_switching_mode,json=switchSwitchingMode,proto3,enum=lemming.dataplane.sai.SwitchSwitchingMode,oneof" json:"switch_switching_mode,omitempty"`
}

func (x *CreateMacsecPortRequest) Reset() {
	*x = CreateMacsecPortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMacsecPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMacsecPortRequest) ProtoMessage() {}

func (x *CreateMacsecPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMacsecPortRequest.ProtoReflect.Descriptor instead.
func (*CreateMacsecPortRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{8}
}

func (x *CreateMacsecPortRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateMacsecPortRequest) GetMacsecDirection() MacsecDirection {
	if x != nil && x.MacsecDirection != nil {
		return *x.MacsecDirection
	}
	return MacsecDirection_MACSEC_DIRECTION_UNSPECIFIED
}

func (x *CreateMacsecPortRequest) GetPortId() uint64 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

func (x *CreateMacsecPortRequest) GetCtagEnable() bool {
	if x != nil && x.CtagEnable != nil {
		return *x.CtagEnable
	}
	return false
}

func (x *CreateMacsecPortRequest) GetStagEnable() bool {
	if x != nil && x.StagEnable != nil {
		return *x.StagEnable
	}
	return false
}

func (x *CreateMacsecPortRequest) GetSwitchSwitchingMode() SwitchSwitchingMode {
	if x != nil && x.SwitchSwitchingMode != nil {
		return *x.SwitchSwitchingMode
	}
	return SwitchSwitchingMode_SWITCH_SWITCHING_MODE_UNSPECIFIED
}

type CreateMacsecPortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateMacsecPortResponse) Reset() {
	*x = CreateMacsecPortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMacsecPortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMacsecPortResponse) ProtoMessage() {}

func (x *CreateMacsecPortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMacsecPortResponse.ProtoReflect.Descriptor instead.
func (*CreateMacsecPortResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{9}
}

func (x *CreateMacsecPortResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveMacsecPortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveMacsecPortRequest) Reset() {
	*x = RemoveMacsecPortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMacsecPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMacsecPortRequest) ProtoMessage() {}

func (x *RemoveMacsecPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMacsecPortRequest.ProtoReflect.Descriptor instead.
func (*RemoveMacsecPortRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveMacsecPortRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveMacsecPortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveMacsecPortResponse) Reset() {
	*x = RemoveMacsecPortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMacsecPortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMacsecPortResponse) ProtoMessage() {}

func (x *RemoveMacsecPortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMacsecPortResponse.ProtoReflect.Descriptor instead.
func (*RemoveMacsecPortResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{11}
}

type SetMacsecPortAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                 uint64               `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CtagEnable          *bool                `protobuf:"varint,2,opt,name=ctag_enable,json=ctagEnable,proto3,oneof" json:"ctag_enable,omitempty"`
	StagEnable          *bool                `protobuf:"varint,3,opt,name=stag_enable,json=stagEnable,proto3,oneof" json:"stag_enable,omitempty"`
	SwitchSwitchingMode *SwitchSwitchingMode `protobuf:"varint,4,opt,name=switch_switching_mode,json=switchSwitchingMode,proto3,enum=lemming.dataplane.sai.SwitchSwitchingMode,oneof" json:"switch_switching_mode,omitempty"`
}

func (x *SetMacsecPortAttributeRequest) Reset() {
	*x = SetMacsecPortAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMacsecPortAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMacsecPortAttributeRequest) ProtoMessage() {}

func (x *SetMacsecPortAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMacsecPortAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetMacsecPortAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{12}
}

func (x *SetMacsecPortAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetMacsecPortAttributeRequest) GetCtagEnable() bool {
	if x != nil && x.CtagEnable != nil {
		return *x.CtagEnable
	}
	return false
}

func (x *SetMacsecPortAttributeRequest) GetStagEnable() bool {
	if x != nil && x.StagEnable != nil {
		return *x.StagEnable
	}
	return false
}

func (x *SetMacsecPortAttributeRequest) GetSwitchSwitchingMode() SwitchSwitchingMode {
	if x != nil && x.SwitchSwitchingMode != nil {
		return *x.SwitchSwitchingMode
	}
	return SwitchSwitchingMode_SWITCH_SWITCHING_MODE_UNSPECIFIED
}

type SetMacsecPortAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMacsecPortAttributeResponse) Reset() {
	*x = SetMacsecPortAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMacsecPortAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMacsecPortAttributeResponse) ProtoMessage() {}

func (x *SetMacsecPortAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMacsecPortAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetMacsecPortAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{13}
}

type GetMacsecPortAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64           `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []MacsecPortAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.MacsecPortAttr" json:"attr_type,omitempty"`
}

func (x *GetMacsecPortAttributeRequest) Reset() {
	*x = GetMacsecPortAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMacsecPortAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMacsecPortAttributeRequest) ProtoMessage() {}

func (x *GetMacsecPortAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMacsecPortAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetMacsecPortAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{14}
}

func (x *GetMacsecPortAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetMacsecPortAttributeRequest) GetAttrType() []MacsecPortAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetMacsecPortAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *MacsecPortAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetMacsecPortAttributeResponse) Reset() {
	*x = GetMacsecPortAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMacsecPortAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMacsecPortAttributeResponse) ProtoMessage() {}

func (x *GetMacsecPortAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMacsecPortAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetMacsecPortAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{15}
}

func (x *GetMacsecPortAttributeResponse) GetAttr() *MacsecPortAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateMacsecFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch          uint64           `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	MacsecDirection *MacsecDirection `protobuf:"varint,2,opt,name=macsec_direction,json=macsecDirection,proto3,enum=lemming.dataplane.sai.MacsecDirection,oneof" json:"macsec_direction,omitempty"`
}

func (x *CreateMacsecFlowRequest) Reset() {
	*x = CreateMacsecFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMacsecFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMacsecFlowRequest) ProtoMessage() {}

func (x *CreateMacsecFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMacsecFlowRequest.ProtoReflect.Descriptor instead.
func (*CreateMacsecFlowRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{16}
}

func (x *CreateMacsecFlowRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateMacsecFlowRequest) GetMacsecDirection() MacsecDirection {
	if x != nil && x.MacsecDirection != nil {
		return *x.MacsecDirection
	}
	return MacsecDirection_MACSEC_DIRECTION_UNSPECIFIED
}

type CreateMacsecFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateMacsecFlowResponse) Reset() {
	*x = CreateMacsecFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMacsecFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMacsecFlowResponse) ProtoMessage() {}

func (x *CreateMacsecFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMacsecFlowResponse.ProtoReflect.Descriptor instead.
func (*CreateMacsecFlowResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{17}
}

func (x *CreateMacsecFlowResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveMacsecFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveMacsecFlowRequest) Reset() {
	*x = RemoveMacsecFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMacsecFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMacsecFlowRequest) ProtoMessage() {}

func (x *RemoveMacsecFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMacsecFlowRequest.ProtoReflect.Descriptor instead.
func (*RemoveMacsecFlowRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveMacsecFlowRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveMacsecFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveMacsecFlowResponse) Reset() {
	*x = RemoveMacsecFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMacsecFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMacsecFlowResponse) ProtoMessage() {}

func (x *RemoveMacsecFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMacsecFlowResponse.ProtoReflect.Descriptor instead.
func (*RemoveMacsecFlowResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{19}
}

type GetMacsecFlowAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64           `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []MacsecFlowAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.MacsecFlowAttr" json:"attr_type,omitempty"`
}

func (x *GetMacsecFlowAttributeRequest) Reset() {
	*x = GetMacsecFlowAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMacsecFlowAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMacsecFlowAttributeRequest) ProtoMessage() {}

func (x *GetMacsecFlowAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMacsecFlowAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetMacsecFlowAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{20}
}

func (x *GetMacsecFlowAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetMacsecFlowAttributeRequest) GetAttrType() []MacsecFlowAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetMacsecFlowAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *MacsecFlowAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetMacsecFlowAttributeResponse) Reset() {
	*x = GetMacsecFlowAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMacsecFlowAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMacsecFlowAttributeResponse) ProtoMessage() {}

func (x *GetMacsecFlowAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMacsecFlowAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetMacsecFlowAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{21}
}

func (x *GetMacsecFlowAttributeResponse) GetAttr() *MacsecFlowAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateMacsecScRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                       uint64             `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	MacsecDirection              *MacsecDirection   `protobuf:"varint,2,opt,name=macsec_direction,json=macsecDirection,proto3,enum=lemming.dataplane.sai.MacsecDirection,oneof" json:"macsec_direction,omitempty"`
	FlowId                       *uint64            `protobuf:"varint,3,opt,name=flow_id,json=flowId,proto3,oneof" json:"flow_id,omitempty"`
	MacsecSci                    *uint64            `protobuf:"varint,4,opt,name=macsec_sci,json=macsecSci,proto3,oneof" json:"macsec_sci,omitempty"`
	MacsecExplicitSciEnable      *bool              `protobuf:"varint,5,opt,name=macsec_explicit_sci_enable,json=macsecExplicitSciEnable,proto3,oneof" json:"macsec_explicit_sci_enable,omitempty"`
	MacsecSectagOffset           *uint32            `protobuf:"varint,6,opt,name=macsec_sectag_offset,json=macsecSectagOffset,proto3,oneof" json:"macsec_sectag_offset,omitempty"`
	MacsecReplayProtectionEnable *bool              `protobuf:"varint,7,opt,name=macsec_replay_protection_enable,json=macsecReplayProtectionEnable,proto3,oneof" json:"macsec_replay_protection_enable,omitempty"`
	MacsecReplayProtectionWindow *uint32            `protobuf:"varint,8,opt,name=macsec_replay_protection_window,json=macsecReplayProtectionWindow,proto3,oneof" json:"macsec_replay_protection_window,omitempty"`
	MacsecCipherSuite            *MacsecCipherSuite `protobuf:"varint,9,opt,name=macsec_cipher_suite,json=macsecCipherSuite,proto3,enum=lemming.dataplane.sai.MacsecCipherSuite,oneof" json:"macsec_cipher_suite,omitempty"`
	EncryptionEnable             *bool              `protobuf:"varint,10,opt,name=encryption_enable,json=encryptionEnable,proto3,oneof" json:"encryption_enable,omitempty"`
}

func (x *CreateMacsecScRequest) Reset() {
	*x = CreateMacsecScRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMacsecScRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMacsecScRequest) ProtoMessage() {}

func (x *CreateMacsecScRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMacsecScRequest.ProtoReflect.Descriptor instead.
func (*CreateMacsecScRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{22}
}

func (x *CreateMacsecScRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateMacsecScRequest) GetMacsecDirection() MacsecDirection {
	if x != nil && x.MacsecDirection != nil {
		return *x.MacsecDirection
	}
	return MacsecDirection_MACSEC_DIRECTION_UNSPECIFIED
}

func (x *CreateMacsecScRequest) GetFlowId() uint64 {
	if x != nil && x.FlowId != nil {
		return *x.FlowId
	}
	return 0
}

func (x *CreateMacsecScRequest) GetMacsecSci() uint64 {
	if x != nil && x.MacsecSci != nil {
		return *x.MacsecSci
	}
	return 0
}

func (x *CreateMacsecScRequest) GetMacsecExplicitSciEnable() bool {
	if x != nil && x.MacsecExplicitSciEnable != nil {
		return *x.MacsecExplicitSciEnable
	}
	return false
}

func (x *CreateMacsecScRequest) GetMacsecSectagOffset() uint32 {
	if x != nil && x.MacsecSectagOffset != nil {
		return *x.MacsecSectagOffset
	}
	return 0
}

func (x *CreateMacsecScRequest) GetMacsecReplayProtectionEnable() bool {
	if x != nil && x.MacsecReplayProtectionEnable != nil {
		return *x.MacsecReplayProtectionEnable
	}
	return false
}

func (x *CreateMacsecScRequest) GetMacsecReplayProtectionWindow() uint32 {
	if x != nil && x.MacsecReplayProtectionWindow != nil {
		return *x.MacsecReplayProtectionWindow
	}
	return 0
}

func (x *CreateMacsecScRequest) GetMacsecCipherSuite() MacsecCipherSuite {
	if x != nil && x.MacsecCipherSuite != nil {
		return *x.MacsecCipherSuite
	}
	return MacsecCipherSuite_MACSEC_CIPHER_SUITE_UNSPECIFIED
}

func (x *CreateMacsecScRequest) GetEncryptionEnable() bool {
	if x != nil && x.EncryptionEnable != nil {
		return *x.EncryptionEnable
	}
	return false
}

type CreateMacsecScResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateMacsecScResponse) Reset() {
	*x = CreateMacsecScResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMacsecScResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMacsecScResponse) ProtoMessage() {}

func (x *CreateMacsecScResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMacsecScResponse.ProtoReflect.Descriptor instead.
func (*CreateMacsecScResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{23}
}

func (x *CreateMacsecScResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveMacsecScRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveMacsecScRequest) Reset() {
	*x = RemoveMacsecScRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMacsecScRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMacsecScRequest) ProtoMessage() {}

func (x *RemoveMacsecScRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMacsecScRequest.ProtoReflect.Descriptor instead.
func (*RemoveMacsecScRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{24}
}

func (x *RemoveMacsecScRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveMacsecScResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveMacsecScResponse) Reset() {
	*x = RemoveMacsecScResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMacsecScResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMacsecScResponse) ProtoMessage() {}

func (x *RemoveMacsecScResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMacsecScResponse.ProtoReflect.Descriptor instead.
func (*RemoveMacsecScResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{25}
}

type SetMacsecScAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                          uint64             `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	MacsecExplicitSciEnable      *bool              `protobuf:"varint,2,opt,name=macsec_explicit_sci_enable,json=macsecExplicitSciEnable,proto3,oneof" json:"macsec_explicit_sci_enable,omitempty"`
	MacsecSectagOffset           *uint32            `protobuf:"varint,3,opt,name=macsec_sectag_offset,json=macsecSectagOffset,proto3,oneof" json:"macsec_sectag_offset,omitempty"`
	MacsecReplayProtectionEnable *bool              `protobuf:"varint,4,opt,name=macsec_replay_protection_enable,json=macsecReplayProtectionEnable,proto3,oneof" json:"macsec_replay_protection_enable,omitempty"`
	MacsecReplayProtectionWindow *uint32            `protobuf:"varint,5,opt,name=macsec_replay_protection_window,json=macsecReplayProtectionWindow,proto3,oneof" json:"macsec_replay_protection_window,omitempty"`
	MacsecCipherSuite            *MacsecCipherSuite `protobuf:"varint,6,opt,name=macsec_cipher_suite,json=macsecCipherSuite,proto3,enum=lemming.dataplane.sai.MacsecCipherSuite,oneof" json:"macsec_cipher_suite,omitempty"`
	EncryptionEnable             *bool              `protobuf:"varint,7,opt,name=encryption_enable,json=encryptionEnable,proto3,oneof" json:"encryption_enable,omitempty"`
}

func (x *SetMacsecScAttributeRequest) Reset() {
	*x = SetMacsecScAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMacsecScAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMacsecScAttributeRequest) ProtoMessage() {}

func (x *SetMacsecScAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMacsecScAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetMacsecScAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{26}
}

func (x *SetMacsecScAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetMacsecScAttributeRequest) GetMacsecExplicitSciEnable() bool {
	if x != nil && x.MacsecExplicitSciEnable != nil {
		return *x.MacsecExplicitSciEnable
	}
	return false
}

func (x *SetMacsecScAttributeRequest) GetMacsecSectagOffset() uint32 {
	if x != nil && x.MacsecSectagOffset != nil {
		return *x.MacsecSectagOffset
	}
	return 0
}

func (x *SetMacsecScAttributeRequest) GetMacsecReplayProtectionEnable() bool {
	if x != nil && x.MacsecReplayProtectionEnable != nil {
		return *x.MacsecReplayProtectionEnable
	}
	return false
}

func (x *SetMacsecScAttributeRequest) GetMacsecReplayProtectionWindow() uint32 {
	if x != nil && x.MacsecReplayProtectionWindow != nil {
		return *x.MacsecReplayProtectionWindow
	}
	return 0
}

func (x *SetMacsecScAttributeRequest) GetMacsecCipherSuite() MacsecCipherSuite {
	if x != nil && x.MacsecCipherSuite != nil {
		return *x.MacsecCipherSuite
	}
	return MacsecCipherSuite_MACSEC_CIPHER_SUITE_UNSPECIFIED
}

func (x *SetMacsecScAttributeRequest) GetEncryptionEnable() bool {
	if x != nil && x.EncryptionEnable != nil {
		return *x.EncryptionEnable
	}
	return false
}

type SetMacsecScAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMacsecScAttributeResponse) Reset() {
	*x = SetMacsecScAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMacsecScAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMacsecScAttributeResponse) ProtoMessage() {}

func (x *SetMacsecScAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMacsecScAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetMacsecScAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{27}
}

type GetMacsecScAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64         `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []MacsecScAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.MacsecScAttr" json:"attr_type,omitempty"`
}

func (x *GetMacsecScAttributeRequest) Reset() {
	*x = GetMacsecScAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMacsecScAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMacsecScAttributeRequest) ProtoMessage() {}

func (x *GetMacsecScAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMacsecScAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetMacsecScAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{28}
}

func (x *GetMacsecScAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetMacsecScAttributeRequest) GetAttrType() []MacsecScAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetMacsecScAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *MacsecScAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetMacsecScAttributeResponse) Reset() {
	*x = GetMacsecScAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMacsecScAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMacsecScAttributeResponse) ProtoMessage() {}

func (x *GetMacsecScAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMacsecScAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetMacsecScAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{29}
}

func (x *GetMacsecScAttributeResponse) GetAttr() *MacsecScAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateMacsecSaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch              uint64           `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	MacsecDirection     *MacsecDirection `protobuf:"varint,2,opt,name=macsec_direction,json=macsecDirection,proto3,enum=lemming.dataplane.sai.MacsecDirection,oneof" json:"macsec_direction,omitempty"`
	ScId                *uint64          `protobuf:"varint,3,opt,name=sc_id,json=scId,proto3,oneof" json:"sc_id,omitempty"`
	An                  *uint32          `protobuf:"varint,4,opt,name=an,proto3,oneof" json:"an,omitempty"`
	Sak                 []byte           `protobuf:"bytes,5,opt,name=sak,proto3,oneof" json:"sak,omitempty"`
	Salt                []byte           `protobuf:"bytes,6,opt,name=salt,proto3,oneof" json:"salt,omitempty"`
	AuthKey             []byte           `protobuf:"bytes,7,opt,name=auth_key,json=authKey,proto3,oneof" json:"auth_key,omitempty"`
	ConfiguredEgressXpn *uint64          `protobuf:"varint,8,opt,name=configured_egress_xpn,json=configuredEgressXpn,proto3,oneof" json:"configured_egress_xpn,omitempty"`
	MinimumIngressXpn   *uint64          `protobuf:"varint,9,opt,name=minimum_ingress_xpn,json=minimumIngressXpn,proto3,oneof" json:"minimum_ingress_xpn,omitempty"`
	MacsecSsci          *uint32          `protobuf:"varint,10,opt,name=macsec_ssci,json=macsecSsci,proto3,oneof" json:"macsec_ssci,omitempty"`
}

func (x *CreateMacsecSaRequest) Reset() {
	*x = CreateMacsecSaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMacsecSaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMacsecSaRequest) ProtoMessage() {}

func (x *CreateMacsecSaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMacsecSaRequest.ProtoReflect.Descriptor instead.
func (*CreateMacsecSaRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{30}
}

func (x *CreateMacsecSaRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateMacsecSaRequest) GetMacsecDirection() MacsecDirection {
	if x != nil && x.MacsecDirection != nil {
		return *x.MacsecDirection
	}
	return MacsecDirection_MACSEC_DIRECTION_UNSPECIFIED
}

func (x *CreateMacsecSaRequest) GetScId() uint64 {
	if x != nil && x.ScId != nil {
		return *x.ScId
	}
	return 0
}

func (x *CreateMacsecSaRequest) GetAn() uint32 {
	if x != nil && x.An != nil {
		return *x.An
	}
	return 0
}

func (x *CreateMacsecSaRequest) GetSak() []byte {
	if x != nil {
		return x.Sak
	}
	return nil
}

func (x *CreateMacsecSaRequest) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *CreateMacsecSaRequest) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *CreateMacsecSaRequest) GetConfiguredEgressXpn() uint64 {
	if x != nil && x.ConfiguredEgressXpn != nil {
		return *x.ConfiguredEgressXpn
	}
	return 0
}

func (x *CreateMacsecSaRequest) GetMinimumIngressXpn() uint64 {
	if x != nil && x.MinimumIngressXpn != nil {
		return *x.MinimumIngressXpn
	}
	return 0
}

func (x *CreateMacsecSaRequest) GetMacsecSsci() uint32 {
	if x != nil && x.MacsecSsci != nil {
		return *x.MacsecSsci
	}
	return 0
}

type CreateMacsecSaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateMacsecSaResponse) Reset() {
	*x = CreateMacsecSaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMacsecSaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMacsecSaResponse) ProtoMessage() {}

func (x *CreateMacsecSaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMacsecSaResponse.ProtoReflect.Descriptor instead.
func (*CreateMacsecSaResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{31}
}

func (x *CreateMacsecSaResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveMacsecSaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveMacsecSaRequest) Reset() {
	*x = RemoveMacsecSaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMacsecSaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMacsecSaRequest) ProtoMessage() {}

func (x *RemoveMacsecSaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMacsecSaRequest.ProtoReflect.Descriptor instead.
func (*RemoveMacsecSaRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{32}
}

func (x *RemoveMacsecSaRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveMacsecSaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveMacsecSaResponse) Reset() {
	*x = RemoveMacsecSaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveMacsecSaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveMacsecSaResponse) ProtoMessage() {}

func (x *RemoveMacsecSaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveMacsecSaResponse.ProtoReflect.Descriptor instead.
func (*RemoveMacsecSaResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{33}
}

type SetMacsecSaAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                 uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	ConfiguredEgressXpn *uint64 `protobuf:"varint,2,opt,name=configured_egress_xpn,json=configuredEgressXpn,proto3,oneof" json:"configured_egress_xpn,omitempty"`
	MinimumIngressXpn   *uint64 `protobuf:"varint,3,opt,name=minimum_ingress_xpn,json=minimumIngressXpn,proto3,oneof" json:"minimum_ingress_xpn,omitempty"`
}

func (x *SetMacsecSaAttributeRequest) Reset() {
	*x = SetMacsecSaAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMacsecSaAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMacsecSaAttributeRequest) ProtoMessage() {}

func (x *SetMacsecSaAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMacsecSaAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetMacsecSaAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{34}
}

func (x *SetMacsecSaAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetMacsecSaAttributeRequest) GetConfiguredEgressXpn() uint64 {
	if x != nil && x.ConfiguredEgressXpn != nil {
		return *x.ConfiguredEgressXpn
	}
	return 0
}

func (x *SetMacsecSaAttributeRequest) GetMinimumIngressXpn() uint64 {
	if x != nil && x.MinimumIngressXpn != nil {
		return *x.MinimumIngressXpn
	}
	return 0
}

type SetMacsecSaAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetMacsecSaAttributeResponse) Reset() {
	*x = SetMacsecSaAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMacsecSaAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMacsecSaAttributeResponse) ProtoMessage() {}

func (x *SetMacsecSaAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMacsecSaAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetMacsecSaAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{35}
}

type GetMacsecSaAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64         `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []MacsecSaAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.MacsecSaAttr" json:"attr_type,omitempty"`
}

func (x *GetMacsecSaAttributeRequest) Reset() {
	*x = GetMacsecSaAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMacsecSaAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMacsecSaAttributeRequest) ProtoMessage() {}

func (x *GetMacsecSaAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMacsecSaAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetMacsecSaAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{36}
}

func (x *GetMacsecSaAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetMacsecSaAttributeRequest) GetAttrType() []MacsecSaAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetMacsecSaAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *MacsecSaAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetMacsecSaAttributeResponse) Reset() {
	*x = GetMacsecSaAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMacsecSaAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMacsecSaAttributeResponse) ProtoMessage() {}

func (x *GetMacsecSaAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_macsec_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMacsecSaAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetMacsecSaAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_macsec_proto_rawDescGZIP(), []int{37}
}

func (x *GetMacsecSaAttributeResponse) GetAttr() *MacsecSaAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_standalone_proto_macsec_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_macsec_proto_rawDesc = []byte{
	0x0a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x1a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x04, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x4f, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x77, 0x61,
	0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48, 0x01, 0x52, 0x0e, 0x77, 0x61,
	0x72, 0x6d, 0x42, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x09, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x10, 0x48, 0x02, 0x52, 0x08, 0x63, 0x74, 0x61, 0x67,
	0x54, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x5f,
	0x74, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x11,
	0x48, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67, 0x54, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x12, 0x48, 0x04, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61,
	0x67, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x13, 0x48, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x16, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48, 0x06, 0x52,
	0x14, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x59, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x28, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xef, 0x03, 0x0a, 0x19,
	0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x10, 0x77,
	0x61, 0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48, 0x00, 0x52, 0x0e, 0x77,
	0x61, 0x72, 0x6d, 0x42, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x09, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x10, 0x48, 0x01, 0x52, 0x08, 0x63, 0x74, 0x61,
	0x67, 0x54, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67,
	0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x11, 0x48, 0x02, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67, 0x54, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x12, 0x48, 0x03, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x56, 0x6c, 0x61, 0x6e, 0x54,
	0x61, 0x67, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x13, 0x48, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x16, 0x70, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48, 0x05,
	0x52, 0x14, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x77, 0x61,
	0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x1c, 0x0a,
	0x1a, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x22, 0xd7, 0x03, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x5c, 0x0a, 0x10, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52,
	0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x63, 0x74,
	0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x74, 0x61, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x04, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x69, 0x0a, 0x15, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88,
	0xb5, 0x18, 0x5a, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x2c,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x17,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x63, 0x74, 0x61,
	0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x74, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04,
	0x48, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x69, 0x0a, 0x15, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x05, 0x48, 0x02, 0x52, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x60, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74,
	0x72, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x5c, 0x0a, 0x10, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52,
	0x0f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x5b, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c,
	0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x17,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x74,
	0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x85,
	0x07, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x5c, 0x0a, 0x10, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x63, 0x69,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x09,
	0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x69, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1a,
	0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f,
	0x73, 0x63, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x17, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x63, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x14, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x73,
	0x65, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x53, 0x65, 0x63, 0x74, 0x61, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x50, 0x0a, 0x1f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07,
	0x48, 0x05, 0x52, 0x1c, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x1f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x08, 0x48, 0x06, 0x52, 0x1c, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x0a, 0x48, 0x07, 0x52, 0x11, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x11, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48, 0x08, 0x52, 0x10, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x5c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x63, 0x69, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x69,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x2a, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x22, 0x29, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x53, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x18, 0x0a,
	0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x05, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x1a, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x69,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x04, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x45, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x63, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x14, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x74,
	0x61, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53,
	0x65, 0x63, 0x74, 0x61, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x50,
	0x0a, 0x1f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x02, 0x52,
	0x1c, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x50, 0x0a, 0x1f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48,
	0x03, 0x52, 0x1c, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x88,
	0x01, 0x01, 0x12, 0x63, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48,
	0x04, 0x52, 0x11, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x1d, 0x0a, 0x1b, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x61, 0x67,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x22, 0x0a, 0x20, 0x5f,
	0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x1e, 0x0a,
	0x1c, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x53, 0x63, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xdc,
	0x04, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x5c, 0x0a, 0x10, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x05, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x04, 0x73, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x02, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03,
	0x48, 0x02, 0x52, 0x02, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x03, 0x73, 0x61, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x03,
	0x73, 0x61, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x05, 0x52,
	0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x78, 0x70, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07,
	0x48, 0x06, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x58, 0x70, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x13, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x78, 0x70,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x07, 0x52,
	0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x58,
	0x70, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f,
	0x73, 0x73, 0x63, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a,
	0x48, 0x08, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x73, 0x63, 0x69, 0x88, 0x01,
	0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x5d, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x61, 0x6e, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x73, 0x61, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x61, 0x6c, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x78, 0x70, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x78, 0x70, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x73, 0x63, 0x69, 0x22, 0x2a, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x15, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdb,
	0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x12, 0x3d, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x78, 0x70, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x58, 0x70, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x78, 0x70, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x09, 0x48, 0x01, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x58, 0x70, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x78, 0x70, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x78, 0x70, 0x6e, 0x22, 0x1e, 0x0a, 0x1c,
	0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x40, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53,
	0x61, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0xe2, 0x07,
	0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x43,
	0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x34, 0x0a, 0x30, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x43, 0x55, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x3a, 0x0a, 0x36, 0x4d, 0x41,
	0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x53, 0x43, 0x49, 0x5f, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x43, 0x4c, 0x10, 0x06, 0x12, 0x2b, 0x0a,
	0x27, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55,
	0x49, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41,
	0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4e, 0x5f, 0x33, 0x32, 0x42,
	0x49, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x23,
	0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x58, 0x50,
	0x4e, 0x5f, 0x36, 0x34, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x31, 0x32, 0x38, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x43,
	0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45, 0x53,
	0x32, 0x35, 0x36, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12,
	0x28, 0x0a, 0x24, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53,
	0x45, 0x43, 0x54, 0x41, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x43,
	0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x5f, 0x4d, 0x54, 0x55, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41,
	0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x42,
	0x4f, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0e, 0x12,
	0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x57,
	0x41, 0x52, 0x4d, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x0f, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x43, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x50, 0x49, 0x44, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x47,
	0x5f, 0x54, 0x50, 0x49, 0x44, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x54, 0x41, 0x47, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x44, 0x10, 0x12, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x13, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x43,
	0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x14, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x15, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x16, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x17, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53,
	0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x43, 0x10, 0x18, 0x12, 0x23, 0x0a,
	0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41,
	0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41,
	0x10, 0x19, 0x2a, 0xe7, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x43, 0x53,
	0x45, 0x43, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x43, 0x54, 0x41, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x20,
	0x0a, 0x1c, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04,
	0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x05, 0x2a, 0x9c, 0x01, 0x0a,
	0x0e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53,
	0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x4c,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x53, 0x43, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x2a, 0xe0, 0x03, 0x0a, 0x0c,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x1a,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x43, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x43, 0x49, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x53,
	0x43, 0x49, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41,
	0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x41, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x53,
	0x45, 0x54, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53,
	0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x41, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x32, 0x0a, 0x2e,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x07,
	0x12, 0x32, 0x0a, 0x2e, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x43, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44,
	0x4f, 0x57, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53,
	0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x41, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x09,
	0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x43, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52,
	0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x43, 0x53,
	0x45, 0x43, 0x5f, 0x53, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x2a, 0xe4,
	0x02, 0x0a, 0x0c, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53,
	0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x43, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f,
	0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x41, 0x4b, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x53, 0x41, 0x4c, 0x54, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43,
	0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x4b, 0x45,
	0x59, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44,
	0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x58, 0x50, 0x4e, 0x10, 0x07, 0x12, 0x1e, 0x0a,
	0x1a, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x58, 0x50, 0x4e, 0x10, 0x08, 0x12, 0x26, 0x0a,
	0x22, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x58, 0x50, 0x4e, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f,
	0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53,
	0x53, 0x43, 0x49, 0x10, 0x0a, 0x32, 0xa6, 0x12, 0x0a, 0x06, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x12, 0x69, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0c, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x12, 0x2a, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87,
	0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2e, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c,
	0x6f, 0x77, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f,
	0x77, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x12, 0x2c, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x53, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x12, 0x2c, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x53, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x53, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a,
	0x14, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65,
	0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x81, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53,
	0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x12, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x12, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a,
	0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_macsec_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_macsec_proto_rawDescData = file_dataplane_standalone_proto_macsec_proto_rawDesc
)

func file_dataplane_standalone_proto_macsec_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_macsec_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_macsec_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_macsec_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_macsec_proto_rawDescData
}

var file_dataplane_standalone_proto_macsec_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_dataplane_standalone_proto_macsec_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_dataplane_standalone_proto_macsec_proto_goTypes = []interface{}{
	(MacsecAttr)(0),                        // 0: lemming.dataplane.sai.MacsecAttr
	(MacsecPortAttr)(0),                    // 1: lemming.dataplane.sai.MacsecPortAttr
	(MacsecFlowAttr)(0),                    // 2: lemming.dataplane.sai.MacsecFlowAttr
	(MacsecScAttr)(0),                      // 3: lemming.dataplane.sai.MacsecScAttr
	(MacsecSaAttr)(0),                      // 4: lemming.dataplane.sai.MacsecSaAttr
	(*CreateMacsecRequest)(nil),            // 5: lemming.dataplane.sai.CreateMacsecRequest
	(*CreateMacsecResponse)(nil),           // 6: lemming.dataplane.sai.CreateMacsecResponse
	(*RemoveMacsecRequest)(nil),            // 7: lemming.dataplane.sai.RemoveMacsecRequest
	(*RemoveMacsecResponse)(nil),           // 8: lemming.dataplane.sai.RemoveMacsecResponse
	(*SetMacsecAttributeRequest)(nil),      // 9: lemming.dataplane.sai.SetMacsecAttributeRequest
	(*SetMacsecAttributeResponse)(nil),     // 10: lemming.dataplane.sai.SetMacsecAttributeResponse
	(*GetMacsecAttributeRequest)(nil),      // 11: lemming.dataplane.sai.GetMacsecAttributeRequest
	(*GetMacsecAttributeResponse)(nil),     // 12: lemming.dataplane.sai.GetMacsecAttributeResponse
	(*CreateMacsecPortRequest)(nil),        // 13: lemming.dataplane.sai.CreateMacsecPortRequest
	(*CreateMacsecPortResponse)(nil),       // 14: lemming.dataplane.sai.CreateMacsecPortResponse
	(*RemoveMacsecPortRequest)(nil),        // 15: lemming.dataplane.sai.RemoveMacsecPortRequest
	(*RemoveMacsecPortResponse)(nil),       // 16: lemming.dataplane.sai.RemoveMacsecPortResponse
	(*SetMacsecPortAttributeRequest)(nil),  // 17: lemming.dataplane.sai.SetMacsecPortAttributeRequest
	(*SetMacsecPortAttributeResponse)(nil), // 18: lemming.dataplane.sai.SetMacsecPortAttributeResponse
	(*GetMacsecPortAttributeRequest)(nil),  // 19: lemming.dataplane.sai.GetMacsecPortAttributeRequest
	(*GetMacsecPortAttributeResponse)(nil), // 20: lemming.dataplane.sai.GetMacsecPortAttributeResponse
	(*CreateMacsecFlowRequest)(nil),        // 21: lemming.dataplane.sai.CreateMacsecFlowRequest
	(*CreateMacsecFlowResponse)(nil),       // 22: lemming.dataplane.sai.CreateMacsecFlowResponse
	(*RemoveMacsecFlowRequest)(nil),        // 23: lemming.dataplane.sai.RemoveMacsecFlowRequest
	(*RemoveMacsecFlowResponse)(nil),       // 24: lemming.dataplane.sai.RemoveMacsecFlowResponse
	(*GetMacsecFlowAttributeRequest)(nil),  // 25: lemming.dataplane.sai.GetMacsecFlowAttributeRequest
	(*GetMacsecFlowAttributeResponse)(nil), // 26: lemming.dataplane.sai.GetMacsecFlowAttributeResponse
	(*CreateMacsecScRequest)(nil),          // 27: lemming.dataplane.sai.CreateMacsecScRequest
	(*CreateMacsecScResponse)(nil),         // 28: lemming.dataplane.sai.CreateMacsecScResponse
	(*RemoveMacsecScRequest)(nil),          // 29: lemming.dataplane.sai.RemoveMacsecScRequest
	(*RemoveMacsecScResponse)(nil),         // 30: lemming.dataplane.sai.RemoveMacsecScResponse
	(*SetMacsecScAttributeRequest)(nil),    // 31: lemming.dataplane.sai.SetMacsecScAttributeRequest
	(*SetMacsecScAttributeResponse)(nil),   // 32: lemming.dataplane.sai.SetMacsecScAttributeResponse
	(*GetMacsecScAttributeRequest)(nil),    // 33: lemming.dataplane.sai.GetMacsecScAttributeRequest
	(*GetMacsecScAttributeResponse)(nil),   // 34: lemming.dataplane.sai.GetMacsecScAttributeResponse
	(*CreateMacsecSaRequest)(nil),          // 35: lemming.dataplane.sai.CreateMacsecSaRequest
	(*CreateMacsecSaResponse)(nil),         // 36: lemming.dataplane.sai.CreateMacsecSaResponse
	(*RemoveMacsecSaRequest)(nil),          // 37: lemming.dataplane.sai.RemoveMacsecSaRequest
	(*RemoveMacsecSaResponse)(nil),         // 38: lemming.dataplane.sai.RemoveMacsecSaResponse
	(*SetMacsecSaAttributeRequest)(nil),    // 39: lemming.dataplane.sai.SetMacsecSaAttributeRequest
	(*SetMacsecSaAttributeResponse)(nil),   // 40: lemming.dataplane.sai.SetMacsecSaAttributeResponse
	(*GetMacsecSaAttributeRequest)(nil),    // 41: lemming.dataplane.sai.GetMacsecSaAttributeRequest
	(*GetMacsecSaAttributeResponse)(nil),   // 42: lemming.dataplane.sai.GetMacsecSaAttributeResponse
	(MacsecDirection)(0),                   // 43: lemming.dataplane.sai.MacsecDirection
	(StatsMode)(0),                         // 44: lemming.dataplane.sai.StatsMode
	(*MacsecAttribute)(nil),                // 45: lemming.dataplane.sai.MacsecAttribute
	(SwitchSwitchingMode)(0),               // 46: lemming.dataplane.sai.SwitchSwitchingMode
	(*MacsecPortAttribute)(nil),            // 47: lemming.dataplane.sai.MacsecPortAttribute
	(*MacsecFlowAttribute)(nil),            // 48: lemming.dataplane.sai.MacsecFlowAttribute
	(MacsecCipherSuite)(0),                 // 49: lemming.dataplane.sai.MacsecCipherSuite
	(*MacsecScAttribute)(nil),              // 50: lemming.dataplane.sai.MacsecScAttribute
	(*MacsecSaAttribute)(nil),              // 51: lemming.dataplane.sai.MacsecSaAttribute
}
var file_dataplane_standalone_proto_macsec_proto_depIdxs = []int32{
	43, // 0: lemming.dataplane.sai.CreateMacsecRequest.direction:type_name -> lemming.dataplane.sai.MacsecDirection
	44, // 1: lemming.dataplane.sai.CreateMacsecRequest.stats_mode:type_name -> lemming.dataplane.sai.StatsMode
	44, // 2: lemming.dataplane.sai.SetMacsecAttributeRequest.stats_mode:type_name -> lemming.dataplane.sai.StatsMode
	0,  // 3: lemming.dataplane.sai.GetMacsecAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.MacsecAttr
	45, // 4: lemming.dataplane.sai.GetMacsecAttributeResponse.attr:type_name -> lemming.dataplane.sai.MacsecAttribute
	43, // 5: lemming.dataplane.sai.CreateMacsecPortRequest.macsec_direction:type_name -> lemming.dataplane.sai.MacsecDirection
	46, // 6: lemming.dataplane.sai.CreateMacsecPortRequest.switch_switching_mode:type_name -> lemming.dataplane.sai.SwitchSwitchingMode
	46, // 7: lemming.dataplane.sai.SetMacsecPortAttributeRequest.switch_switching_mode:type_name -> lemming.dataplane.sai.SwitchSwitchingMode
	1,  // 8: lemming.dataplane.sai.GetMacsecPortAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.MacsecPortAttr
	47, // 9: lemming.dataplane.sai.GetMacsecPortAttributeResponse.attr:type_name -> lemming.dataplane.sai.MacsecPortAttribute
	43, // 10: lemming.dataplane.sai.CreateMacsecFlowRequest.macsec_direction:type_name -> lemming.dataplane.sai.MacsecDirection
	2,  // 11: lemming.dataplane.sai.GetMacsecFlowAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.MacsecFlowAttr
	48, // 12: lemming.dataplane.sai.GetMacsecFlowAttributeResponse.attr:type_name -> lemming.dataplane.sai.MacsecFlowAttribute
	43, // 13: lemming.dataplane.sai.CreateMacsecScRequest.macsec_direction:type_name -> lemming.dataplane.sai.MacsecDirection
	49, // 14: lemming.dataplane.sai.CreateMacsecScRequest.macsec_cipher_suite:type_name -> lemming.dataplane.sai.MacsecCipherSuite
	49, // 15: lemming.dataplane.sai.SetMacsecScAttributeRequest.macsec_cipher_suite:type_name -> lemming.dataplane.sai.MacsecCipherSuite
	3,  // 16: lemming.dataplane.sai.GetMacsecScAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.MacsecScAttr
	50, // 17: lemming.dataplane.sai.GetMacsecScAttributeResponse.attr:type_name -> lemming.dataplane.sai.MacsecScAttribute
	43, // 18: lemming.dataplane.sai.CreateMacsecSaRequest.macsec_direction:type_name -> lemming.dataplane.sai.MacsecDirection
	4,  // 19: lemming.dataplane.sai.GetMacsecSaAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.MacsecSaAttr
	51, // 20: lemming.dataplane.sai.GetMacsecSaAttributeResponse.attr:type_name -> lemming.dataplane.sai.MacsecSaAttribute
	5,  // 21: lemming.dataplane.sai.Macsec.CreateMacsec:input_type -> lemming.dataplane.sai.CreateMacsecRequest
	7,  // 22: lemming.dataplane.sai.Macsec.RemoveMacsec:input_type -> lemming.dataplane.sai.RemoveMacsecRequest
	9,  // 23: lemming.dataplane.sai.Macsec.SetMacsecAttribute:input_type -> lemming.dataplane.sai.SetMacsecAttributeRequest
	11, // 24: lemming.dataplane.sai.Macsec.GetMacsecAttribute:input_type -> lemming.dataplane.sai.GetMacsecAttributeRequest
	13, // 25: lemming.dataplane.sai.Macsec.CreateMacsecPort:input_type -> lemming.dataplane.sai.CreateMacsecPortRequest
	15, // 26: lemming.dataplane.sai.Macsec.RemoveMacsecPort:input_type -> lemming.dataplane.sai.RemoveMacsecPortRequest
	17, // 27: lemming.dataplane.sai.Macsec.SetMacsecPortAttribute:input_type -> lemming.dataplane.sai.SetMacsecPortAttributeRequest
	19, // 28: lemming.dataplane.sai.Macsec.GetMacsecPortAttribute:input_type -> lemming.dataplane.sai.GetMacsecPortAttributeRequest
	21, // 29: lemming.dataplane.sai.Macsec.CreateMacsecFlow:input_type -> lemming.dataplane.sai.CreateMacsecFlowRequest
	23, // 30: lemming.dataplane.sai.Macsec.RemoveMacsecFlow:input_type -> lemming.dataplane.sai.RemoveMacsecFlowRequest
	25, // 31: lemming.dataplane.sai.Macsec.GetMacsecFlowAttribute:input_type -> lemming.dataplane.sai.GetMacsecFlowAttributeRequest
	27, // 32: lemming.dataplane.sai.Macsec.CreateMacsecSc:input_type -> lemming.dataplane.sai.CreateMacsecScRequest
	29, // 33: lemming.dataplane.sai.Macsec.RemoveMacsecSc:input_type -> lemming.dataplane.sai.RemoveMacsecScRequest
	31, // 34: lemming.dataplane.sai.Macsec.SetMacsecScAttribute:input_type -> lemming.dataplane.sai.SetMacsecScAttributeRequest
	33, // 35: lemming.dataplane.sai.Macsec.GetMacsecScAttribute:input_type -> lemming.dataplane.sai.GetMacsecScAttributeRequest
	35, // 36: lemming.dataplane.sai.Macsec.CreateMacsecSa:input_type -> lemming.dataplane.sai.CreateMacsecSaRequest
	37, // 37: lemming.dataplane.sai.Macsec.RemoveMacsecSa:input_type -> lemming.dataplane.sai.RemoveMacsecSaRequest
	39, // 38: lemming.dataplane.sai.Macsec.SetMacsecSaAttribute:input_type -> lemming.dataplane.sai.SetMacsecSaAttributeRequest
	41, // 39: lemming.dataplane.sai.Macsec.GetMacsecSaAttribute:input_type -> lemming.dataplane.sai.GetMacsecSaAttributeRequest
	6,  // 40: lemming.dataplane.sai.Macsec.CreateMacsec:output_type -> lemming.dataplane.sai.CreateMacsecResponse
	8,  // 41: lemming.dataplane.sai.Macsec.RemoveMacsec:output_type -> lemming.dataplane.sai.RemoveMacsecResponse
	10, // 42: lemming.dataplane.sai.Macsec.SetMacsecAttribute:output_type -> lemming.dataplane.sai.SetMacsecAttributeResponse
	12, // 43: lemming.dataplane.sai.Macsec.GetMacsecAttribute:output_type -> lemming.dataplane.sai.GetMacsecAttributeResponse
	14, // 44: lemming.dataplane.sai.Macsec.CreateMacsecPort:output_type -> lemming.dataplane.sai.CreateMacsecPortResponse
	16, // 45: lemming.dataplane.sai.Macsec.RemoveMacsecPort:output_type -> lemming.dataplane.sai.RemoveMacsecPortResponse
	18, // 46: lemming.dataplane.sai.Macsec.SetMacsecPortAttribute:output_type -> lemming.dataplane.sai.SetMacsecPortAttributeResponse
	20, // 47: lemming.dataplane.sai.Macsec.GetMacsecPortAttribute:output_type -> lemming.dataplane.sai.GetMacsecPortAttributeResponse
	22, // 48: lemming.dataplane.sai.Macsec.CreateMacsecFlow:output_type -> lemming.dataplane.sai.CreateMacsecFlowResponse
	24, // 49: lemming.dataplane.sai.Macsec.RemoveMacsecFlow:output_type -> lemming.dataplane.sai.RemoveMacsecFlowResponse
	26, // 50: lemming.dataplane.sai.Macsec.GetMacsecFlowAttribute:output_type -> lemming.dataplane.sai.GetMacsecFlowAttributeResponse
	28, // 51: lemming.dataplane.sai.Macsec.CreateMacsecSc:output_type -> lemming.dataplane.sai.CreateMacsecScResponse
	30, // 52: lemming.dataplane.sai.Macsec.RemoveMacsecSc:output_type -> lemming.dataplane.sai.RemoveMacsecScResponse
	32, // 53: lemming.dataplane.sai.Macsec.SetMacsecScAttribute:output_type -> lemming.dataplane.sai.SetMacsecScAttributeResponse
	34, // 54: lemming.dataplane.sai.Macsec.GetMacsecScAttribute:output_type -> lemming.dataplane.sai.GetMacsecScAttributeResponse
	36, // 55: lemming.dataplane.sai.Macsec.CreateMacsecSa:output_type -> lemming.dataplane.sai.CreateMacsecSaResponse
	38, // 56: lemming.dataplane.sai.Macsec.RemoveMacsecSa:output_type -> lemming.dataplane.sai.RemoveMacsecSaResponse
	40, // 57: lemming.dataplane.sai.Macsec.SetMacsecSaAttribute:output_type -> lemming.dataplane.sai.SetMacsecSaAttributeResponse
	42, // 58: lemming.dataplane.sai.Macsec.GetMacsecSaAttribute:output_type -> lemming.dataplane.sai.GetMacsecSaAttributeResponse
	40, // [40:59] is the sub-list for method output_type
	21, // [21:40] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_macsec_proto_init() }
func file_dataplane_standalone_proto_macsec_proto_init() {
	if File_dataplane_standalone_proto_macsec_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_macsec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMacsecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMacsecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMacsecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMacsecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMacsecAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMacsecAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMacsecAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMacsecAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMacsecPortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMacsecPortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMacsecPortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMacsecPortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMacsecPortAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMacsecPortAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMacsecPortAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMacsecPortAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMacsecFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMacsecFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMacsecFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMacsecFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMacsecFlowAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMacsecFlowAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMacsecScRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMacsecScResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMacsecScRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMacsecScResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMacsecScAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMacsecScAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMacsecScAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMacsecScAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMacsecSaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMacsecSaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMacsecSaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveMacsecSaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMacsecSaAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMacsecSaAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMacsecSaAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_macsec_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMacsecSaAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_macsec_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_macsec_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_macsec_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_macsec_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_macsec_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_macsec_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_macsec_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_macsec_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_macsec_proto_msgTypes[34].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_macsec_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_macsec_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_macsec_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_macsec_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_macsec_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_macsec_proto = out.File
	file_dataplane_standalone_proto_macsec_proto_rawDesc = nil
	file_dataplane_standalone_proto_macsec_proto_goTypes = nil
	file_dataplane_standalone_proto_macsec_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MacsecClient is the client API for Macsec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MacsecClient interface {
	CreateMacsec(ctx context.Context, in *CreateMacsecRequest, opts ...grpc.CallOption) (*CreateMacsecResponse, error)
	RemoveMacsec(ctx context.Context, in *RemoveMacsecRequest, opts ...grpc.CallOption) (*RemoveMacsecResponse, error)
	SetMacsecAttribute(ctx context.Context, in *SetMacsecAttributeRequest, opts ...grpc.CallOption) (*SetMacsecAttributeResponse, error)
	GetMacsecAttribute(ctx context.Context, in *GetMacsecAttributeRequest, opts ...grpc.CallOption) (*GetMacsecAttributeResponse, error)
	CreateMacsecPort(ctx context.Context, in *CreateMacsecPortRequest, opts ...grpc.CallOption) (*CreateMacsecPortResponse, error)
	RemoveMacsecPort(ctx context.Context, in *RemoveMacsecPortRequest, opts ...grpc.CallOption) (*RemoveMacsecPortResponse, error)
	SetMacsecPortAttribute(ctx context.Context, in *SetMacsecPortAttributeRequest, opts ...grpc.CallOption) (*SetMacsecPortAttributeResponse, error)
	GetMacsecPortAttribute(ctx context.Context, in *GetMacsecPortAttributeRequest, opts ...grpc.CallOption) (*GetMacsecPortAttributeResponse, error)
	CreateMacsecFlow(ctx context.Context, in *CreateMacsecFlowRequest, opts ...grpc.CallOption) (*CreateMacsecFlowResponse, error)
	RemoveMacsecFlow(ctx context.Context, in *RemoveMacsecFlowRequest, opts ...grpc.CallOption) (*RemoveMacsecFlowResponse, error)
	GetMacsecFlowAttribute(ctx context.Context, in *GetMacsecFlowAttributeRequest, opts ...grpc.CallOption) (*GetMacsecFlowAttributeResponse, error)
	CreateMacsecSc(ctx context.Context, in *CreateMacsecScRequest, opts ...grpc.CallOption) (*CreateMacsecScResponse, error)
	RemoveMacsecSc(ctx context.Context, in *RemoveMacsecScRequest, opts ...grpc.CallOption) (*RemoveMacsecScResponse, error)
	SetMacsecScAttribute(ctx context.Context, in *SetMacsecScAttributeRequest, opts ...grpc.CallOption) (*SetMacsecScAttributeResponse, error)
	GetMacsecScAttribute(ctx context.Context, in *GetMacsecScAttributeRequest, opts ...grpc.CallOption) (*GetMacsecScAttributeResponse, error)
	CreateMacsecSa(ctx context.Context, in *CreateMacsecSaRequest, opts ...grpc.CallOption) (*CreateMacsecSaResponse, error)
	RemoveMacsecSa(ctx context.Context, in *RemoveMacsecSaRequest, opts ...grpc.CallOption) (*RemoveMacsecSaResponse, error)
	SetMacsecSaAttribute(ctx context.Context, in *SetMacsecSaAttributeRequest, opts ...grpc.CallOption) (*SetMacsecSaAttributeResponse, error)
	GetMacsecSaAttribute(ctx context.Context, in *GetMacsecSaAttributeRequest, opts ...grpc.CallOption) (*GetMacsecSaAttributeResponse, error)
}

type macsecClient struct {
	cc grpc.ClientConnInterface
}

func NewMacsecClient(cc grpc.ClientConnInterface) MacsecClient {
	return &macsecClient{cc}
}

func (c *macsecClient) CreateMacsec(ctx context.Context, in *CreateMacsecRequest, opts ...grpc.CallOption) (*CreateMacsecResponse, error) {
	out := new(CreateMacsecResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/CreateMacsec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) RemoveMacsec(ctx context.Context, in *RemoveMacsecRequest, opts ...grpc.CallOption) (*RemoveMacsecResponse, error) {
	out := new(RemoveMacsecResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/RemoveMacsec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) SetMacsecAttribute(ctx context.Context, in *SetMacsecAttributeRequest, opts ...grpc.CallOption) (*SetMacsecAttributeResponse, error) {
	out := new(SetMacsecAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/SetMacsecAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecAttribute(ctx context.Context, in *GetMacsecAttributeRequest, opts ...grpc.CallOption) (*GetMacsecAttributeResponse, error) {
	out := new(GetMacsecAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/GetMacsecAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) CreateMacsecPort(ctx context.Context, in *CreateMacsecPortRequest, opts ...grpc.CallOption) (*CreateMacsecPortResponse, error) {
	out := new(CreateMacsecPortResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/CreateMacsecPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) RemoveMacsecPort(ctx context.Context, in *RemoveMacsecPortRequest, opts ...grpc.CallOption) (*RemoveMacsecPortResponse, error) {
	out := new(RemoveMacsecPortResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/RemoveMacsecPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) SetMacsecPortAttribute(ctx context.Context, in *SetMacsecPortAttributeRequest, opts ...grpc.CallOption) (*SetMacsecPortAttributeResponse, error) {
	out := new(SetMacsecPortAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/SetMacsecPortAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecPortAttribute(ctx context.Context, in *GetMacsecPortAttributeRequest, opts ...grpc.CallOption) (*GetMacsecPortAttributeResponse, error) {
	out := new(GetMacsecPortAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/GetMacsecPortAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) CreateMacsecFlow(ctx context.Context, in *CreateMacsecFlowRequest, opts ...grpc.CallOption) (*CreateMacsecFlowResponse, error) {
	out := new(CreateMacsecFlowResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/CreateMacsecFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) RemoveMacsecFlow(ctx context.Context, in *RemoveMacsecFlowRequest, opts ...grpc.CallOption) (*RemoveMacsecFlowResponse, error) {
	out := new(RemoveMacsecFlowResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/RemoveMacsecFlow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecFlowAttribute(ctx context.Context, in *GetMacsecFlowAttributeRequest, opts ...grpc.CallOption) (*GetMacsecFlowAttributeResponse, error) {
	out := new(GetMacsecFlowAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/GetMacsecFlowAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) CreateMacsecSc(ctx context.Context, in *CreateMacsecScRequest, opts ...grpc.CallOption) (*CreateMacsecScResponse, error) {
	out := new(CreateMacsecScResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/CreateMacsecSc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) RemoveMacsecSc(ctx context.Context, in *RemoveMacsecScRequest, opts ...grpc.CallOption) (*RemoveMacsecScResponse, error) {
	out := new(RemoveMacsecScResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/RemoveMacsecSc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) SetMacsecScAttribute(ctx context.Context, in *SetMacsecScAttributeRequest, opts ...grpc.CallOption) (*SetMacsecScAttributeResponse, error) {
	out := new(SetMacsecScAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/SetMacsecScAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecScAttribute(ctx context.Context, in *GetMacsecScAttributeRequest, opts ...grpc.CallOption) (*GetMacsecScAttributeResponse, error) {
	out := new(GetMacsecScAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/GetMacsecScAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) CreateMacsecSa(ctx context.Context, in *CreateMacsecSaRequest, opts ...grpc.CallOption) (*CreateMacsecSaResponse, error) {
	out := new(CreateMacsecSaResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/CreateMacsecSa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) RemoveMacsecSa(ctx context.Context, in *RemoveMacsecSaRequest, opts ...grpc.CallOption) (*RemoveMacsecSaResponse, error) {
	out := new(RemoveMacsecSaResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/RemoveMacsecSa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) SetMacsecSaAttribute(ctx context.Context, in *SetMacsecSaAttributeRequest, opts ...grpc.CallOption) (*SetMacsecSaAttributeResponse, error) {
	out := new(SetMacsecSaAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/SetMacsecSaAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecSaAttribute(ctx context.Context, in *GetMacsecSaAttributeRequest, opts ...grpc.CallOption) (*GetMacsecSaAttributeResponse, error) {
	out := new(GetMacsecSaAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Macsec/GetMacsecSaAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MacsecServer is the server API for Macsec service.
type MacsecServer interface {
	CreateMacsec(context.Context, *CreateMacsecRequest) (*CreateMacsecResponse, error)
	RemoveMacsec(context.Context, *RemoveMacsecRequest) (*RemoveMacsecResponse, error)
	SetMacsecAttribute(context.Context, *SetMacsecAttributeRequest) (*SetMacsecAttributeResponse, error)
	GetMacsecAttribute(context.Context, *GetMacsecAttributeRequest) (*GetMacsecAttributeResponse, error)
	CreateMacsecPort(context.Context, *CreateMacsecPortRequest) (*CreateMacsecPortResponse, error)
	RemoveMacsecPort(context.Context, *RemoveMacsecPortRequest) (*RemoveMacsecPortResponse, error)
	SetMacsecPortAttribute(context.Context, *SetMacsecPortAttributeRequest) (*SetMacsecPortAttributeResponse, error)
	GetMacsecPortAttribute(context.Context, *GetMacsecPortAttributeRequest) (*GetMacsecPortAttributeResponse, error)
	CreateMacsecFlow(context.Context, *CreateMacsecFlowRequest) (*CreateMacsecFlowResponse, error)
	RemoveMacsecFlow(context.Context, *RemoveMacsecFlowRequest) (*RemoveMacsecFlowResponse, error)
	GetMacsecFlowAttribute(context.Context, *GetMacsecFlowAttributeRequest) (*GetMacsecFlowAttributeResponse, error)
	CreateMacsecSc(context.Context, *CreateMacsecScRequest) (*CreateMacsecScResponse, error)
	RemoveMacsecSc(context.Context, *RemoveMacsecScRequest) (*RemoveMacsecScResponse, error)
	SetMacsecScAttribute(context.Context, *SetMacsecScAttributeRequest) (*SetMacsecScAttributeResponse, error)
	GetMacsecScAttribute(context.Context, *GetMacsecScAttributeRequest) (*GetMacsecScAttributeResponse, error)
	CreateMacsecSa(context.Context, *CreateMacsecSaRequest) (*CreateMacsecSaResponse, error)
	RemoveMacsecSa(context.Context, *RemoveMacsecSaRequest) (*RemoveMacsecSaResponse, error)
	SetMacsecSaAttribute(context.Context, *SetMacsecSaAttributeRequest) (*SetMacsecSaAttributeResponse, error)
	GetMacsecSaAttribute(context.Context, *GetMacsecSaAttributeRequest) (*GetMacsecSaAttributeResponse, error)
}

// UnimplementedMacsecServer can be embedded to have forward compatible implementations.
type UnimplementedMacsecServer struct {
}

func (*UnimplementedMacsecServer) CreateMacsec(context.Context, *CreateMacsecRequest) (*CreateMacsecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMacsec not implemented")
}
func (*UnimplementedMacsecServer) RemoveMacsec(context.Context, *RemoveMacsecRequest) (*RemoveMacsecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMacsec not implemented")
}
func (*UnimplementedMacsecServer) SetMacsecAttribute(context.Context, *SetMacsecAttributeRequest) (*SetMacsecAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMacsecAttribute not implemented")
}
func (*UnimplementedMacsecServer) GetMacsecAttribute(context.Context, *GetMacsecAttributeRequest) (*GetMacsecAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecAttribute not implemented")
}
func (*UnimplementedMacsecServer) CreateMacsecPort(context.Context, *CreateMacsecPortRequest) (*CreateMacsecPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMacsecPort not implemented")
}
func (*UnimplementedMacsecServer) RemoveMacsecPort(context.Context, *RemoveMacsecPortRequest) (*RemoveMacsecPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMacsecPort not implemented")
}
func (*UnimplementedMacsecServer) SetMacsecPortAttribute(context.Context, *SetMacsecPortAttributeRequest) (*SetMacsecPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMacsecPortAttribute not implemented")
}
func (*UnimplementedMacsecServer) GetMacsecPortAttribute(context.Context, *GetMacsecPortAttributeRequest) (*GetMacsecPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecPortAttribute not implemented")
}
func (*UnimplementedMacsecServer) CreateMacsecFlow(context.Context, *CreateMacsecFlowRequest) (*CreateMacsecFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMacsecFlow not implemented")
}
func (*UnimplementedMacsecServer) RemoveMacsecFlow(context.Context, *RemoveMacsecFlowRequest) (*RemoveMacsecFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMacsecFlow not implemented")
}
func (*UnimplementedMacsecServer) GetMacsecFlowAttribute(context.Context, *GetMacsecFlowAttributeRequest) (*GetMacsecFlowAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecFlowAttribute not implemented")
}
func (*UnimplementedMacsecServer) CreateMacsecSc(context.Context, *CreateMacsecScRequest) (*CreateMacsecScResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMacsecSc not implemented")
}
func (*UnimplementedMacsecServer) RemoveMacsecSc(context.Context, *RemoveMacsecScRequest) (*RemoveMacsecScResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMacsecSc not implemented")
}
func (*UnimplementedMacsecServer) SetMacsecScAttribute(context.Context, *SetMacsecScAttributeRequest) (*SetMacsecScAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMacsecScAttribute not implemented")
}
func (*UnimplementedMacsecServer) GetMacsecScAttribute(context.Context, *GetMacsecScAttributeRequest) (*GetMacsecScAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecScAttribute not implemented")
}
func (*UnimplementedMacsecServer) CreateMacsecSa(context.Context, *CreateMacsecSaRequest) (*CreateMacsecSaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMacsecSa not implemented")
}
func (*UnimplementedMacsecServer) RemoveMacsecSa(context.Context, *RemoveMacsecSaRequest) (*RemoveMacsecSaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMacsecSa not implemented")
}
func (*UnimplementedMacsecServer) SetMacsecSaAttribute(context.Context, *SetMacsecSaAttributeRequest) (*SetMacsecSaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMacsecSaAttribute not implemented")
}
func (*UnimplementedMacsecServer) GetMacsecSaAttribute(context.Context, *GetMacsecSaAttributeRequest) (*GetMacsecSaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecSaAttribute not implemented")
}

func RegisterMacsecServer(s *grpc.Server, srv MacsecServer) {
	s.RegisterService(&_Macsec_serviceDesc, srv)
}

func _Macsec_CreateMacsec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMacsecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).CreateMacsec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/CreateMacsec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).CreateMacsec(ctx, req.(*CreateMacsecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_RemoveMacsec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMacsecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).RemoveMacsec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/RemoveMacsec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).RemoveMacsec(ctx, req.(*RemoveMacsecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_SetMacsecAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMacsecAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).SetMacsecAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/SetMacsecAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).SetMacsecAttribute(ctx, req.(*SetMacsecAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/GetMacsecAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecAttribute(ctx, req.(*GetMacsecAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_CreateMacsecPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMacsecPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).CreateMacsecPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/CreateMacsecPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).CreateMacsecPort(ctx, req.(*CreateMacsecPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_RemoveMacsecPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMacsecPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).RemoveMacsecPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/RemoveMacsecPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).RemoveMacsecPort(ctx, req.(*RemoveMacsecPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_SetMacsecPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMacsecPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).SetMacsecPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/SetMacsecPortAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).SetMacsecPortAttribute(ctx, req.(*SetMacsecPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/GetMacsecPortAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecPortAttribute(ctx, req.(*GetMacsecPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_CreateMacsecFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMacsecFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).CreateMacsecFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/CreateMacsecFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).CreateMacsecFlow(ctx, req.(*CreateMacsecFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_RemoveMacsecFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMacsecFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).RemoveMacsecFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/RemoveMacsecFlow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).RemoveMacsecFlow(ctx, req.(*RemoveMacsecFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecFlowAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecFlowAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecFlowAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/GetMacsecFlowAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecFlowAttribute(ctx, req.(*GetMacsecFlowAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_CreateMacsecSc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMacsecScRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).CreateMacsecSc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/CreateMacsecSc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).CreateMacsecSc(ctx, req.(*CreateMacsecScRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_RemoveMacsecSc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMacsecScRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).RemoveMacsecSc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/RemoveMacsecSc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).RemoveMacsecSc(ctx, req.(*RemoveMacsecScRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_SetMacsecScAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMacsecScAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).SetMacsecScAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/SetMacsecScAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).SetMacsecScAttribute(ctx, req.(*SetMacsecScAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecScAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecScAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecScAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/GetMacsecScAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecScAttribute(ctx, req.(*GetMacsecScAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_CreateMacsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMacsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).CreateMacsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/CreateMacsecSa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).CreateMacsecSa(ctx, req.(*CreateMacsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_RemoveMacsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMacsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).RemoveMacsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/RemoveMacsecSa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).RemoveMacsecSa(ctx, req.(*RemoveMacsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_SetMacsecSaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMacsecSaAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).SetMacsecSaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/SetMacsecSaAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).SetMacsecSaAttribute(ctx, req.(*SetMacsecSaAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecSaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecSaAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecSaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Macsec/GetMacsecSaAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecSaAttribute(ctx, req.(*GetMacsecSaAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Macsec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Macsec",
	HandlerType: (*MacsecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMacsec",
			Handler:    _Macsec_CreateMacsec_Handler,
		},
		{
			MethodName: "RemoveMacsec",
			Handler:    _Macsec_RemoveMacsec_Handler,
		},
		{
			MethodName: "SetMacsecAttribute",
			Handler:    _Macsec_SetMacsecAttribute_Handler,
		},
		{
			MethodName: "GetMacsecAttribute",
			Handler:    _Macsec_GetMacsecAttribute_Handler,
		},
		{
			MethodName: "CreateMacsecPort",
			Handler:    _Macsec_CreateMacsecPort_Handler,
		},
		{
			MethodName: "RemoveMacsecPort",
			Handler:    _Macsec_RemoveMacsecPort_Handler,
		},
		{
			MethodName: "SetMacsecPortAttribute",
			Handler:    _Macsec_SetMacsecPortAttribute_Handler,
		},
		{
			MethodName: "GetMacsecPortAttribute",
			Handler:    _Macsec_GetMacsecPortAttribute_Handler,
		},
		{
			MethodName: "CreateMacsecFlow",
			Handler:    _Macsec_CreateMacsecFlow_Handler,
		},
		{
			MethodName: "RemoveMacsecFlow",
			Handler:    _Macsec_RemoveMacsecFlow_Handler,
		},
		{
			MethodName: "GetMacsecFlowAttribute",
			Handler:    _Macsec_GetMacsecFlowAttribute_Handler,
		},
		{
			MethodName: "CreateMacsecSc",
			Handler:    _Macsec_CreateMacsecSc_Handler,
		},
		{
			MethodName: "RemoveMacsecSc",
			Handler:    _Macsec_RemoveMacsecSc_Handler,
		},
		{
			MethodName: "SetMacsecScAttribute",
			Handler:    _Macsec_SetMacsecScAttribute_Handler,
		},
		{
			MethodName: "GetMacsecScAttribute",
			Handler:    _Macsec_GetMacsecScAttribute_Handler,
		},
		{
			MethodName: "CreateMacsecSa",
			Handler:    _Macsec_CreateMacsecSa_Handler,
		},
		{
			MethodName: "RemoveMacsecSa",
			Handler:    _Macsec_RemoveMacsecSa_Handler,
		},
		{
			MethodName: "SetMacsecSaAttribute",
			Handler:    _Macsec_SetMacsecSaAttribute_Handler,
		},
		{
			MethodName: "GetMacsecSaAttribute",
			Handler:    _Macsec_GetMacsecSaAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/macsec.proto",
}
