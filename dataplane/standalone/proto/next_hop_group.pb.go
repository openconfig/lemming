// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/next_hop_group.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NextHopGroupAttr int32

const (
	NextHopGroupAttr_NEXT_HOP_GROUP_ATTR_UNSPECIFIED          NextHopGroupAttr = 0
	NextHopGroupAttr_NEXT_HOP_GROUP_ATTR_NEXT_HOP_COUNT       NextHopGroupAttr = 1
	NextHopGroupAttr_NEXT_HOP_GROUP_ATTR_NEXT_HOP_MEMBER_LIST NextHopGroupAttr = 2
	NextHopGroupAttr_NEXT_HOP_GROUP_ATTR_TYPE                 NextHopGroupAttr = 3
	NextHopGroupAttr_NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER       NextHopGroupAttr = 4
	NextHopGroupAttr_NEXT_HOP_GROUP_ATTR_COUNTER_ID           NextHopGroupAttr = 5
	NextHopGroupAttr_NEXT_HOP_GROUP_ATTR_CONFIGURED_SIZE      NextHopGroupAttr = 6
	NextHopGroupAttr_NEXT_HOP_GROUP_ATTR_REAL_SIZE            NextHopGroupAttr = 7
	NextHopGroupAttr_NEXT_HOP_GROUP_ATTR_SELECTION_MAP        NextHopGroupAttr = 8
)

// Enum value maps for NextHopGroupAttr.
var (
	NextHopGroupAttr_name = map[int32]string{
		0: "NEXT_HOP_GROUP_ATTR_UNSPECIFIED",
		1: "NEXT_HOP_GROUP_ATTR_NEXT_HOP_COUNT",
		2: "NEXT_HOP_GROUP_ATTR_NEXT_HOP_MEMBER_LIST",
		3: "NEXT_HOP_GROUP_ATTR_TYPE",
		4: "NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER",
		5: "NEXT_HOP_GROUP_ATTR_COUNTER_ID",
		6: "NEXT_HOP_GROUP_ATTR_CONFIGURED_SIZE",
		7: "NEXT_HOP_GROUP_ATTR_REAL_SIZE",
		8: "NEXT_HOP_GROUP_ATTR_SELECTION_MAP",
	}
	NextHopGroupAttr_value = map[string]int32{
		"NEXT_HOP_GROUP_ATTR_UNSPECIFIED":          0,
		"NEXT_HOP_GROUP_ATTR_NEXT_HOP_COUNT":       1,
		"NEXT_HOP_GROUP_ATTR_NEXT_HOP_MEMBER_LIST": 2,
		"NEXT_HOP_GROUP_ATTR_TYPE":                 3,
		"NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER":       4,
		"NEXT_HOP_GROUP_ATTR_COUNTER_ID":           5,
		"NEXT_HOP_GROUP_ATTR_CONFIGURED_SIZE":      6,
		"NEXT_HOP_GROUP_ATTR_REAL_SIZE":            7,
		"NEXT_HOP_GROUP_ATTR_SELECTION_MAP":        8,
	}
)

func (x NextHopGroupAttr) Enum() *NextHopGroupAttr {
	p := new(NextHopGroupAttr)
	*p = x
	return p
}

func (x NextHopGroupAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHopGroupAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_next_hop_group_proto_enumTypes[0].Descriptor()
}

func (NextHopGroupAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_next_hop_group_proto_enumTypes[0]
}

func (x NextHopGroupAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHopGroupAttr.Descriptor instead.
func (NextHopGroupAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{0}
}

type NextHopGroupMemberAttr int32

const (
	NextHopGroupMemberAttr_NEXT_HOP_GROUP_MEMBER_ATTR_UNSPECIFIED       NextHopGroupMemberAttr = 0
	NextHopGroupMemberAttr_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_GROUP_ID NextHopGroupMemberAttr = 1
	NextHopGroupMemberAttr_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID       NextHopGroupMemberAttr = 2
	NextHopGroupMemberAttr_NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT            NextHopGroupMemberAttr = 3
	NextHopGroupMemberAttr_NEXT_HOP_GROUP_MEMBER_ATTR_CONFIGURED_ROLE   NextHopGroupMemberAttr = 4
	NextHopGroupMemberAttr_NEXT_HOP_GROUP_MEMBER_ATTR_OBSERVED_ROLE     NextHopGroupMemberAttr = 5
	NextHopGroupMemberAttr_NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT  NextHopGroupMemberAttr = 6
	NextHopGroupMemberAttr_NEXT_HOP_GROUP_MEMBER_ATTR_INDEX             NextHopGroupMemberAttr = 7
	NextHopGroupMemberAttr_NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID       NextHopGroupMemberAttr = 8
	NextHopGroupMemberAttr_NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID        NextHopGroupMemberAttr = 9
)

// Enum value maps for NextHopGroupMemberAttr.
var (
	NextHopGroupMemberAttr_name = map[int32]string{
		0: "NEXT_HOP_GROUP_MEMBER_ATTR_UNSPECIFIED",
		1: "NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_GROUP_ID",
		2: "NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID",
		3: "NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT",
		4: "NEXT_HOP_GROUP_MEMBER_ATTR_CONFIGURED_ROLE",
		5: "NEXT_HOP_GROUP_MEMBER_ATTR_OBSERVED_ROLE",
		6: "NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT",
		7: "NEXT_HOP_GROUP_MEMBER_ATTR_INDEX",
		8: "NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID",
		9: "NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID",
	}
	NextHopGroupMemberAttr_value = map[string]int32{
		"NEXT_HOP_GROUP_MEMBER_ATTR_UNSPECIFIED":       0,
		"NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_GROUP_ID": 1,
		"NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID":       2,
		"NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT":            3,
		"NEXT_HOP_GROUP_MEMBER_ATTR_CONFIGURED_ROLE":   4,
		"NEXT_HOP_GROUP_MEMBER_ATTR_OBSERVED_ROLE":     5,
		"NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT":  6,
		"NEXT_HOP_GROUP_MEMBER_ATTR_INDEX":             7,
		"NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID":       8,
		"NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID":        9,
	}
)

func (x NextHopGroupMemberAttr) Enum() *NextHopGroupMemberAttr {
	p := new(NextHopGroupMemberAttr)
	*p = x
	return p
}

func (x NextHopGroupMemberAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHopGroupMemberAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_next_hop_group_proto_enumTypes[1].Descriptor()
}

func (NextHopGroupMemberAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_next_hop_group_proto_enumTypes[1]
}

func (x NextHopGroupMemberAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHopGroupMemberAttr.Descriptor instead.
func (NextHopGroupMemberAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{1}
}

type NextHopGroupMapAttr int32

const (
	NextHopGroupMapAttr_NEXT_HOP_GROUP_MAP_ATTR_UNSPECIFIED       NextHopGroupMapAttr = 0
	NextHopGroupMapAttr_NEXT_HOP_GROUP_MAP_ATTR_TYPE              NextHopGroupMapAttr = 1
	NextHopGroupMapAttr_NEXT_HOP_GROUP_MAP_ATTR_MAP_TO_VALUE_LIST NextHopGroupMapAttr = 2
)

// Enum value maps for NextHopGroupMapAttr.
var (
	NextHopGroupMapAttr_name = map[int32]string{
		0: "NEXT_HOP_GROUP_MAP_ATTR_UNSPECIFIED",
		1: "NEXT_HOP_GROUP_MAP_ATTR_TYPE",
		2: "NEXT_HOP_GROUP_MAP_ATTR_MAP_TO_VALUE_LIST",
	}
	NextHopGroupMapAttr_value = map[string]int32{
		"NEXT_HOP_GROUP_MAP_ATTR_UNSPECIFIED":       0,
		"NEXT_HOP_GROUP_MAP_ATTR_TYPE":              1,
		"NEXT_HOP_GROUP_MAP_ATTR_MAP_TO_VALUE_LIST": 2,
	}
)

func (x NextHopGroupMapAttr) Enum() *NextHopGroupMapAttr {
	p := new(NextHopGroupMapAttr)
	*p = x
	return p
}

func (x NextHopGroupMapAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHopGroupMapAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_next_hop_group_proto_enumTypes[2].Descriptor()
}

func (NextHopGroupMapAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_next_hop_group_proto_enumTypes[2]
}

func (x NextHopGroupMapAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHopGroupMapAttr.Descriptor instead.
func (NextHopGroupMapAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{2}
}

type CreateNextHopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch         uint64            `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type           *NextHopGroupType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.NextHopGroupType,oneof" json:"type,omitempty"`
	SetSwitchover  *bool             `protobuf:"varint,3,opt,name=set_switchover,json=setSwitchover,proto3,oneof" json:"set_switchover,omitempty"`
	CounterId      *uint64           `protobuf:"varint,4,opt,name=counter_id,json=counterId,proto3,oneof" json:"counter_id,omitempty"`
	ConfiguredSize *uint32           `protobuf:"varint,5,opt,name=configured_size,json=configuredSize,proto3,oneof" json:"configured_size,omitempty"`
	SelectionMap   *uint64           `protobuf:"varint,6,opt,name=selection_map,json=selectionMap,proto3,oneof" json:"selection_map,omitempty"`
}

func (x *CreateNextHopGroupRequest) Reset() {
	*x = CreateNextHopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNextHopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopGroupRequest) ProtoMessage() {}

func (x *CreateNextHopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateNextHopGroupRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNextHopGroupRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateNextHopGroupRequest) GetType() NextHopGroupType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return NextHopGroupType_NEXT_HOP_GROUP_TYPE_UNSPECIFIED
}

func (x *CreateNextHopGroupRequest) GetSetSwitchover() bool {
	if x != nil && x.SetSwitchover != nil {
		return *x.SetSwitchover
	}
	return false
}

func (x *CreateNextHopGroupRequest) GetCounterId() uint64 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

func (x *CreateNextHopGroupRequest) GetConfiguredSize() uint32 {
	if x != nil && x.ConfiguredSize != nil {
		return *x.ConfiguredSize
	}
	return 0
}

func (x *CreateNextHopGroupRequest) GetSelectionMap() uint64 {
	if x != nil && x.SelectionMap != nil {
		return *x.SelectionMap
	}
	return 0
}

type CreateNextHopGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateNextHopGroupResponse) Reset() {
	*x = CreateNextHopGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNextHopGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopGroupResponse) ProtoMessage() {}

func (x *CreateNextHopGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateNextHopGroupResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNextHopGroupResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveNextHopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveNextHopGroupRequest) Reset() {
	*x = RemoveNextHopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNextHopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNextHopGroupRequest) ProtoMessage() {}

func (x *RemoveNextHopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNextHopGroupRequest.ProtoReflect.Descriptor instead.
func (*RemoveNextHopGroupRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveNextHopGroupRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveNextHopGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveNextHopGroupResponse) Reset() {
	*x = RemoveNextHopGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNextHopGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNextHopGroupResponse) ProtoMessage() {}

func (x *RemoveNextHopGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNextHopGroupResponse.ProtoReflect.Descriptor instead.
func (*RemoveNextHopGroupResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{3}
}

type SetNextHopGroupAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid           uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	SetSwitchover *bool   `protobuf:"varint,2,opt,name=set_switchover,json=setSwitchover,proto3,oneof" json:"set_switchover,omitempty"`
	CounterId     *uint64 `protobuf:"varint,3,opt,name=counter_id,json=counterId,proto3,oneof" json:"counter_id,omitempty"`
	SelectionMap  *uint64 `protobuf:"varint,4,opt,name=selection_map,json=selectionMap,proto3,oneof" json:"selection_map,omitempty"`
}

func (x *SetNextHopGroupAttributeRequest) Reset() {
	*x = SetNextHopGroupAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNextHopGroupAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNextHopGroupAttributeRequest) ProtoMessage() {}

func (x *SetNextHopGroupAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNextHopGroupAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetNextHopGroupAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{4}
}

func (x *SetNextHopGroupAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetNextHopGroupAttributeRequest) GetSetSwitchover() bool {
	if x != nil && x.SetSwitchover != nil {
		return *x.SetSwitchover
	}
	return false
}

func (x *SetNextHopGroupAttributeRequest) GetCounterId() uint64 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

func (x *SetNextHopGroupAttributeRequest) GetSelectionMap() uint64 {
	if x != nil && x.SelectionMap != nil {
		return *x.SelectionMap
	}
	return 0
}

type SetNextHopGroupAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNextHopGroupAttributeResponse) Reset() {
	*x = SetNextHopGroupAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNextHopGroupAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNextHopGroupAttributeResponse) ProtoMessage() {}

func (x *SetNextHopGroupAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNextHopGroupAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetNextHopGroupAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{5}
}

type GetNextHopGroupAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64             `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []NextHopGroupAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.NextHopGroupAttr" json:"attr_type,omitempty"`
}

func (x *GetNextHopGroupAttributeRequest) Reset() {
	*x = GetNextHopGroupAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextHopGroupAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextHopGroupAttributeRequest) ProtoMessage() {}

func (x *GetNextHopGroupAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextHopGroupAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetNextHopGroupAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{6}
}

func (x *GetNextHopGroupAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetNextHopGroupAttributeRequest) GetAttrType() []NextHopGroupAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetNextHopGroupAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *NextHopGroupAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetNextHopGroupAttributeResponse) Reset() {
	*x = GetNextHopGroupAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextHopGroupAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextHopGroupAttributeResponse) ProtoMessage() {}

func (x *GetNextHopGroupAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextHopGroupAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetNextHopGroupAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{7}
}

func (x *GetNextHopGroupAttributeResponse) GetAttr() *NextHopGroupAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateNextHopGroupMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch          uint64                            `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	NextHopGroupId  *uint64                           `protobuf:"varint,2,opt,name=next_hop_group_id,json=nextHopGroupId,proto3,oneof" json:"next_hop_group_id,omitempty"`
	NextHopId       *uint64                           `protobuf:"varint,3,opt,name=next_hop_id,json=nextHopId,proto3,oneof" json:"next_hop_id,omitempty"`
	Weight          *uint32                           `protobuf:"varint,4,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	ConfiguredRole  *NextHopGroupMemberConfiguredRole `protobuf:"varint,5,opt,name=configured_role,json=configuredRole,proto3,enum=lemming.dataplane.sai.NextHopGroupMemberConfiguredRole,oneof" json:"configured_role,omitempty"`
	MonitoredObject *uint64                           `protobuf:"varint,6,opt,name=monitored_object,json=monitoredObject,proto3,oneof" json:"monitored_object,omitempty"`
	Index           *uint32                           `protobuf:"varint,7,opt,name=index,proto3,oneof" json:"index,omitempty"`
	SequenceId      *uint32                           `protobuf:"varint,8,opt,name=sequence_id,json=sequenceId,proto3,oneof" json:"sequence_id,omitempty"`
	CounterId       *uint64                           `protobuf:"varint,9,opt,name=counter_id,json=counterId,proto3,oneof" json:"counter_id,omitempty"`
}

func (x *CreateNextHopGroupMemberRequest) Reset() {
	*x = CreateNextHopGroupMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNextHopGroupMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopGroupMemberRequest) ProtoMessage() {}

func (x *CreateNextHopGroupMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopGroupMemberRequest.ProtoReflect.Descriptor instead.
func (*CreateNextHopGroupMemberRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{8}
}

func (x *CreateNextHopGroupMemberRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateNextHopGroupMemberRequest) GetNextHopGroupId() uint64 {
	if x != nil && x.NextHopGroupId != nil {
		return *x.NextHopGroupId
	}
	return 0
}

func (x *CreateNextHopGroupMemberRequest) GetNextHopId() uint64 {
	if x != nil && x.NextHopId != nil {
		return *x.NextHopId
	}
	return 0
}

func (x *CreateNextHopGroupMemberRequest) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *CreateNextHopGroupMemberRequest) GetConfiguredRole() NextHopGroupMemberConfiguredRole {
	if x != nil && x.ConfiguredRole != nil {
		return *x.ConfiguredRole
	}
	return NextHopGroupMemberConfiguredRole_NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_UNSPECIFIED
}

func (x *CreateNextHopGroupMemberRequest) GetMonitoredObject() uint64 {
	if x != nil && x.MonitoredObject != nil {
		return *x.MonitoredObject
	}
	return 0
}

func (x *CreateNextHopGroupMemberRequest) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CreateNextHopGroupMemberRequest) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *CreateNextHopGroupMemberRequest) GetCounterId() uint64 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

type CreateNextHopGroupMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateNextHopGroupMemberResponse) Reset() {
	*x = CreateNextHopGroupMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNextHopGroupMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopGroupMemberResponse) ProtoMessage() {}

func (x *CreateNextHopGroupMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopGroupMemberResponse.ProtoReflect.Descriptor instead.
func (*CreateNextHopGroupMemberResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{9}
}

func (x *CreateNextHopGroupMemberResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveNextHopGroupMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveNextHopGroupMemberRequest) Reset() {
	*x = RemoveNextHopGroupMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNextHopGroupMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNextHopGroupMemberRequest) ProtoMessage() {}

func (x *RemoveNextHopGroupMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNextHopGroupMemberRequest.ProtoReflect.Descriptor instead.
func (*RemoveNextHopGroupMemberRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveNextHopGroupMemberRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveNextHopGroupMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveNextHopGroupMemberResponse) Reset() {
	*x = RemoveNextHopGroupMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNextHopGroupMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNextHopGroupMemberResponse) ProtoMessage() {}

func (x *RemoveNextHopGroupMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNextHopGroupMemberResponse.ProtoReflect.Descriptor instead.
func (*RemoveNextHopGroupMemberResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{11}
}

type SetNextHopGroupMemberAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid             uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	NextHopId       *uint64 `protobuf:"varint,2,opt,name=next_hop_id,json=nextHopId,proto3,oneof" json:"next_hop_id,omitempty"`
	Weight          *uint32 `protobuf:"varint,3,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	MonitoredObject *uint64 `protobuf:"varint,4,opt,name=monitored_object,json=monitoredObject,proto3,oneof" json:"monitored_object,omitempty"`
	SequenceId      *uint32 `protobuf:"varint,5,opt,name=sequence_id,json=sequenceId,proto3,oneof" json:"sequence_id,omitempty"`
	CounterId       *uint64 `protobuf:"varint,6,opt,name=counter_id,json=counterId,proto3,oneof" json:"counter_id,omitempty"`
}

func (x *SetNextHopGroupMemberAttributeRequest) Reset() {
	*x = SetNextHopGroupMemberAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNextHopGroupMemberAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNextHopGroupMemberAttributeRequest) ProtoMessage() {}

func (x *SetNextHopGroupMemberAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNextHopGroupMemberAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetNextHopGroupMemberAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{12}
}

func (x *SetNextHopGroupMemberAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetNextHopGroupMemberAttributeRequest) GetNextHopId() uint64 {
	if x != nil && x.NextHopId != nil {
		return *x.NextHopId
	}
	return 0
}

func (x *SetNextHopGroupMemberAttributeRequest) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *SetNextHopGroupMemberAttributeRequest) GetMonitoredObject() uint64 {
	if x != nil && x.MonitoredObject != nil {
		return *x.MonitoredObject
	}
	return 0
}

func (x *SetNextHopGroupMemberAttributeRequest) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

func (x *SetNextHopGroupMemberAttributeRequest) GetCounterId() uint64 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

type SetNextHopGroupMemberAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNextHopGroupMemberAttributeResponse) Reset() {
	*x = SetNextHopGroupMemberAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNextHopGroupMemberAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNextHopGroupMemberAttributeResponse) ProtoMessage() {}

func (x *SetNextHopGroupMemberAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNextHopGroupMemberAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetNextHopGroupMemberAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{13}
}

type GetNextHopGroupMemberAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64                   `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []NextHopGroupMemberAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.NextHopGroupMemberAttr" json:"attr_type,omitempty"`
}

func (x *GetNextHopGroupMemberAttributeRequest) Reset() {
	*x = GetNextHopGroupMemberAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextHopGroupMemberAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextHopGroupMemberAttributeRequest) ProtoMessage() {}

func (x *GetNextHopGroupMemberAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextHopGroupMemberAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetNextHopGroupMemberAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{14}
}

func (x *GetNextHopGroupMemberAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetNextHopGroupMemberAttributeRequest) GetAttrType() []NextHopGroupMemberAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetNextHopGroupMemberAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *NextHopGroupMemberAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetNextHopGroupMemberAttributeResponse) Reset() {
	*x = GetNextHopGroupMemberAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextHopGroupMemberAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextHopGroupMemberAttributeResponse) ProtoMessage() {}

func (x *GetNextHopGroupMemberAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextHopGroupMemberAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetNextHopGroupMemberAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{15}
}

func (x *GetNextHopGroupMemberAttributeResponse) GetAttr() *NextHopGroupMemberAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateNextHopGroupMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch         uint64               `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type           *NextHopGroupMapType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.NextHopGroupMapType,oneof" json:"type,omitempty"`
	MapToValueList []*UintMap           `protobuf:"bytes,3,rep,name=map_to_value_list,json=mapToValueList,proto3" json:"map_to_value_list,omitempty"`
}

func (x *CreateNextHopGroupMapRequest) Reset() {
	*x = CreateNextHopGroupMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNextHopGroupMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopGroupMapRequest) ProtoMessage() {}

func (x *CreateNextHopGroupMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopGroupMapRequest.ProtoReflect.Descriptor instead.
func (*CreateNextHopGroupMapRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{16}
}

func (x *CreateNextHopGroupMapRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateNextHopGroupMapRequest) GetType() NextHopGroupMapType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return NextHopGroupMapType_NEXT_HOP_GROUP_MAP_TYPE_UNSPECIFIED
}

func (x *CreateNextHopGroupMapRequest) GetMapToValueList() []*UintMap {
	if x != nil {
		return x.MapToValueList
	}
	return nil
}

type CreateNextHopGroupMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateNextHopGroupMapResponse) Reset() {
	*x = CreateNextHopGroupMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNextHopGroupMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopGroupMapResponse) ProtoMessage() {}

func (x *CreateNextHopGroupMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopGroupMapResponse.ProtoReflect.Descriptor instead.
func (*CreateNextHopGroupMapResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{17}
}

func (x *CreateNextHopGroupMapResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveNextHopGroupMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveNextHopGroupMapRequest) Reset() {
	*x = RemoveNextHopGroupMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNextHopGroupMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNextHopGroupMapRequest) ProtoMessage() {}

func (x *RemoveNextHopGroupMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNextHopGroupMapRequest.ProtoReflect.Descriptor instead.
func (*RemoveNextHopGroupMapRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveNextHopGroupMapRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveNextHopGroupMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveNextHopGroupMapResponse) Reset() {
	*x = RemoveNextHopGroupMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNextHopGroupMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNextHopGroupMapResponse) ProtoMessage() {}

func (x *RemoveNextHopGroupMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNextHopGroupMapResponse.ProtoReflect.Descriptor instead.
func (*RemoveNextHopGroupMapResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{19}
}

type SetNextHopGroupMapAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid            uint64     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	MapToValueList []*UintMap `protobuf:"bytes,2,rep,name=map_to_value_list,json=mapToValueList,proto3" json:"map_to_value_list,omitempty"`
}

func (x *SetNextHopGroupMapAttributeRequest) Reset() {
	*x = SetNextHopGroupMapAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNextHopGroupMapAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNextHopGroupMapAttributeRequest) ProtoMessage() {}

func (x *SetNextHopGroupMapAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNextHopGroupMapAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetNextHopGroupMapAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{20}
}

func (x *SetNextHopGroupMapAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetNextHopGroupMapAttributeRequest) GetMapToValueList() []*UintMap {
	if x != nil {
		return x.MapToValueList
	}
	return nil
}

type SetNextHopGroupMapAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNextHopGroupMapAttributeResponse) Reset() {
	*x = SetNextHopGroupMapAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNextHopGroupMapAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNextHopGroupMapAttributeResponse) ProtoMessage() {}

func (x *SetNextHopGroupMapAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNextHopGroupMapAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetNextHopGroupMapAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{21}
}

type GetNextHopGroupMapAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64                `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []NextHopGroupMapAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.NextHopGroupMapAttr" json:"attr_type,omitempty"`
}

func (x *GetNextHopGroupMapAttributeRequest) Reset() {
	*x = GetNextHopGroupMapAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextHopGroupMapAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextHopGroupMapAttributeRequest) ProtoMessage() {}

func (x *GetNextHopGroupMapAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextHopGroupMapAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetNextHopGroupMapAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{22}
}

func (x *GetNextHopGroupMapAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetNextHopGroupMapAttributeRequest) GetAttrType() []NextHopGroupMapAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetNextHopGroupMapAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *NextHopGroupMapAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetNextHopGroupMapAttributeResponse) Reset() {
	*x = GetNextHopGroupMapAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextHopGroupMapAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextHopGroupMapAttributeResponse) ProtoMessage() {}

func (x *GetNextHopGroupMapAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextHopGroupMapAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetNextHopGroupMapAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP(), []int{23}
}

func (x *GetNextHopGroupMapAttributeResponse) GetAttr() *NextHopGroupMapAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_standalone_proto_next_hop_group_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_next_hop_group_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x92, 0x03, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x03, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x01, 0x52,
	0x0d, 0x73, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x02, 0x52, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x03, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x04, 0x52, 0x0c,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x3a,
	0x04, 0x88, 0xb5, 0x18, 0x06, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65,
	0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x22, 0x2e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0e, 0x73, 0x65, 0x74,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x08, 0x48, 0x02, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xe0,
	0x04, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x11, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x03, 0x48, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6b,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x10, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x04, 0x52, 0x0f, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x06, 0x52,
	0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x07, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x2e, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x22, 0x34, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x33, 0x0a, 0x1f, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x20,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xe2, 0x02, 0x0a, 0x25, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0b,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x01, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x10, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x02, 0x52, 0x0f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x26, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x70, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xe1, 0x01, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a,
	0x11, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x52, 0x0e,
	0x6d, 0x61, 0x70, 0x54, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x04,
	0x88, 0xb5, 0x18, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x22, 0x30, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x4f, 0x0a, 0x11,
	0x6d, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x52, 0x0e, 0x6d,
	0x61, 0x70, 0x54, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x25, 0x0a,
	0x23, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6a, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74,
	0x72, 0x2a, 0xea, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48,
	0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x48, 0x4f, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12,
	0x26, 0x0a, 0x22, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x4c,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x08, 0x2a, 0xd5,
	0x03, 0x0a, 0x16, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f,
	0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x45, 0x58, 0x54,
	0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x45, 0x44,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x07, 0x12,
	0x2a, 0x0a, 0x26, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x45,
	0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x29, 0x0a, 0x25, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x10, 0x09, 0x2a, 0x8f, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x12, 0x27,
	0x0a, 0x23, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x32, 0xcc, 0x0d, 0x0a, 0x0c, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x7b, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61,
	0x70, 0x12, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84,
	0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x39,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_next_hop_group_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_next_hop_group_proto_rawDescData = file_dataplane_standalone_proto_next_hop_group_proto_rawDesc
)

func file_dataplane_standalone_proto_next_hop_group_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_next_hop_group_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_next_hop_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_next_hop_group_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_next_hop_group_proto_rawDescData
}

var file_dataplane_standalone_proto_next_hop_group_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_dataplane_standalone_proto_next_hop_group_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_dataplane_standalone_proto_next_hop_group_proto_goTypes = []interface{}{
	(NextHopGroupAttr)(0),                          // 0: lemming.dataplane.sai.NextHopGroupAttr
	(NextHopGroupMemberAttr)(0),                    // 1: lemming.dataplane.sai.NextHopGroupMemberAttr
	(NextHopGroupMapAttr)(0),                       // 2: lemming.dataplane.sai.NextHopGroupMapAttr
	(*CreateNextHopGroupRequest)(nil),              // 3: lemming.dataplane.sai.CreateNextHopGroupRequest
	(*CreateNextHopGroupResponse)(nil),             // 4: lemming.dataplane.sai.CreateNextHopGroupResponse
	(*RemoveNextHopGroupRequest)(nil),              // 5: lemming.dataplane.sai.RemoveNextHopGroupRequest
	(*RemoveNextHopGroupResponse)(nil),             // 6: lemming.dataplane.sai.RemoveNextHopGroupResponse
	(*SetNextHopGroupAttributeRequest)(nil),        // 7: lemming.dataplane.sai.SetNextHopGroupAttributeRequest
	(*SetNextHopGroupAttributeResponse)(nil),       // 8: lemming.dataplane.sai.SetNextHopGroupAttributeResponse
	(*GetNextHopGroupAttributeRequest)(nil),        // 9: lemming.dataplane.sai.GetNextHopGroupAttributeRequest
	(*GetNextHopGroupAttributeResponse)(nil),       // 10: lemming.dataplane.sai.GetNextHopGroupAttributeResponse
	(*CreateNextHopGroupMemberRequest)(nil),        // 11: lemming.dataplane.sai.CreateNextHopGroupMemberRequest
	(*CreateNextHopGroupMemberResponse)(nil),       // 12: lemming.dataplane.sai.CreateNextHopGroupMemberResponse
	(*RemoveNextHopGroupMemberRequest)(nil),        // 13: lemming.dataplane.sai.RemoveNextHopGroupMemberRequest
	(*RemoveNextHopGroupMemberResponse)(nil),       // 14: lemming.dataplane.sai.RemoveNextHopGroupMemberResponse
	(*SetNextHopGroupMemberAttributeRequest)(nil),  // 15: lemming.dataplane.sai.SetNextHopGroupMemberAttributeRequest
	(*SetNextHopGroupMemberAttributeResponse)(nil), // 16: lemming.dataplane.sai.SetNextHopGroupMemberAttributeResponse
	(*GetNextHopGroupMemberAttributeRequest)(nil),  // 17: lemming.dataplane.sai.GetNextHopGroupMemberAttributeRequest
	(*GetNextHopGroupMemberAttributeResponse)(nil), // 18: lemming.dataplane.sai.GetNextHopGroupMemberAttributeResponse
	(*CreateNextHopGroupMapRequest)(nil),           // 19: lemming.dataplane.sai.CreateNextHopGroupMapRequest
	(*CreateNextHopGroupMapResponse)(nil),          // 20: lemming.dataplane.sai.CreateNextHopGroupMapResponse
	(*RemoveNextHopGroupMapRequest)(nil),           // 21: lemming.dataplane.sai.RemoveNextHopGroupMapRequest
	(*RemoveNextHopGroupMapResponse)(nil),          // 22: lemming.dataplane.sai.RemoveNextHopGroupMapResponse
	(*SetNextHopGroupMapAttributeRequest)(nil),     // 23: lemming.dataplane.sai.SetNextHopGroupMapAttributeRequest
	(*SetNextHopGroupMapAttributeResponse)(nil),    // 24: lemming.dataplane.sai.SetNextHopGroupMapAttributeResponse
	(*GetNextHopGroupMapAttributeRequest)(nil),     // 25: lemming.dataplane.sai.GetNextHopGroupMapAttributeRequest
	(*GetNextHopGroupMapAttributeResponse)(nil),    // 26: lemming.dataplane.sai.GetNextHopGroupMapAttributeResponse
	(NextHopGroupType)(0),                          // 27: lemming.dataplane.sai.NextHopGroupType
	(*NextHopGroupAttribute)(nil),                  // 28: lemming.dataplane.sai.NextHopGroupAttribute
	(NextHopGroupMemberConfiguredRole)(0),          // 29: lemming.dataplane.sai.NextHopGroupMemberConfiguredRole
	(*NextHopGroupMemberAttribute)(nil),            // 30: lemming.dataplane.sai.NextHopGroupMemberAttribute
	(NextHopGroupMapType)(0),                       // 31: lemming.dataplane.sai.NextHopGroupMapType
	(*UintMap)(nil),                                // 32: lemming.dataplane.sai.UintMap
	(*NextHopGroupMapAttribute)(nil),               // 33: lemming.dataplane.sai.NextHopGroupMapAttribute
}
var file_dataplane_standalone_proto_next_hop_group_proto_depIdxs = []int32{
	27, // 0: lemming.dataplane.sai.CreateNextHopGroupRequest.type:type_name -> lemming.dataplane.sai.NextHopGroupType
	0,  // 1: lemming.dataplane.sai.GetNextHopGroupAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.NextHopGroupAttr
	28, // 2: lemming.dataplane.sai.GetNextHopGroupAttributeResponse.attr:type_name -> lemming.dataplane.sai.NextHopGroupAttribute
	29, // 3: lemming.dataplane.sai.CreateNextHopGroupMemberRequest.configured_role:type_name -> lemming.dataplane.sai.NextHopGroupMemberConfiguredRole
	1,  // 4: lemming.dataplane.sai.GetNextHopGroupMemberAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.NextHopGroupMemberAttr
	30, // 5: lemming.dataplane.sai.GetNextHopGroupMemberAttributeResponse.attr:type_name -> lemming.dataplane.sai.NextHopGroupMemberAttribute
	31, // 6: lemming.dataplane.sai.CreateNextHopGroupMapRequest.type:type_name -> lemming.dataplane.sai.NextHopGroupMapType
	32, // 7: lemming.dataplane.sai.CreateNextHopGroupMapRequest.map_to_value_list:type_name -> lemming.dataplane.sai.UintMap
	32, // 8: lemming.dataplane.sai.SetNextHopGroupMapAttributeRequest.map_to_value_list:type_name -> lemming.dataplane.sai.UintMap
	2,  // 9: lemming.dataplane.sai.GetNextHopGroupMapAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.NextHopGroupMapAttr
	33, // 10: lemming.dataplane.sai.GetNextHopGroupMapAttributeResponse.attr:type_name -> lemming.dataplane.sai.NextHopGroupMapAttribute
	3,  // 11: lemming.dataplane.sai.NextHopGroup.CreateNextHopGroup:input_type -> lemming.dataplane.sai.CreateNextHopGroupRequest
	5,  // 12: lemming.dataplane.sai.NextHopGroup.RemoveNextHopGroup:input_type -> lemming.dataplane.sai.RemoveNextHopGroupRequest
	7,  // 13: lemming.dataplane.sai.NextHopGroup.SetNextHopGroupAttribute:input_type -> lemming.dataplane.sai.SetNextHopGroupAttributeRequest
	9,  // 14: lemming.dataplane.sai.NextHopGroup.GetNextHopGroupAttribute:input_type -> lemming.dataplane.sai.GetNextHopGroupAttributeRequest
	11, // 15: lemming.dataplane.sai.NextHopGroup.CreateNextHopGroupMember:input_type -> lemming.dataplane.sai.CreateNextHopGroupMemberRequest
	13, // 16: lemming.dataplane.sai.NextHopGroup.RemoveNextHopGroupMember:input_type -> lemming.dataplane.sai.RemoveNextHopGroupMemberRequest
	15, // 17: lemming.dataplane.sai.NextHopGroup.SetNextHopGroupMemberAttribute:input_type -> lemming.dataplane.sai.SetNextHopGroupMemberAttributeRequest
	17, // 18: lemming.dataplane.sai.NextHopGroup.GetNextHopGroupMemberAttribute:input_type -> lemming.dataplane.sai.GetNextHopGroupMemberAttributeRequest
	19, // 19: lemming.dataplane.sai.NextHopGroup.CreateNextHopGroupMap:input_type -> lemming.dataplane.sai.CreateNextHopGroupMapRequest
	21, // 20: lemming.dataplane.sai.NextHopGroup.RemoveNextHopGroupMap:input_type -> lemming.dataplane.sai.RemoveNextHopGroupMapRequest
	23, // 21: lemming.dataplane.sai.NextHopGroup.SetNextHopGroupMapAttribute:input_type -> lemming.dataplane.sai.SetNextHopGroupMapAttributeRequest
	25, // 22: lemming.dataplane.sai.NextHopGroup.GetNextHopGroupMapAttribute:input_type -> lemming.dataplane.sai.GetNextHopGroupMapAttributeRequest
	4,  // 23: lemming.dataplane.sai.NextHopGroup.CreateNextHopGroup:output_type -> lemming.dataplane.sai.CreateNextHopGroupResponse
	6,  // 24: lemming.dataplane.sai.NextHopGroup.RemoveNextHopGroup:output_type -> lemming.dataplane.sai.RemoveNextHopGroupResponse
	8,  // 25: lemming.dataplane.sai.NextHopGroup.SetNextHopGroupAttribute:output_type -> lemming.dataplane.sai.SetNextHopGroupAttributeResponse
	10, // 26: lemming.dataplane.sai.NextHopGroup.GetNextHopGroupAttribute:output_type -> lemming.dataplane.sai.GetNextHopGroupAttributeResponse
	12, // 27: lemming.dataplane.sai.NextHopGroup.CreateNextHopGroupMember:output_type -> lemming.dataplane.sai.CreateNextHopGroupMemberResponse
	14, // 28: lemming.dataplane.sai.NextHopGroup.RemoveNextHopGroupMember:output_type -> lemming.dataplane.sai.RemoveNextHopGroupMemberResponse
	16, // 29: lemming.dataplane.sai.NextHopGroup.SetNextHopGroupMemberAttribute:output_type -> lemming.dataplane.sai.SetNextHopGroupMemberAttributeResponse
	18, // 30: lemming.dataplane.sai.NextHopGroup.GetNextHopGroupMemberAttribute:output_type -> lemming.dataplane.sai.GetNextHopGroupMemberAttributeResponse
	20, // 31: lemming.dataplane.sai.NextHopGroup.CreateNextHopGroupMap:output_type -> lemming.dataplane.sai.CreateNextHopGroupMapResponse
	22, // 32: lemming.dataplane.sai.NextHopGroup.RemoveNextHopGroupMap:output_type -> lemming.dataplane.sai.RemoveNextHopGroupMapResponse
	24, // 33: lemming.dataplane.sai.NextHopGroup.SetNextHopGroupMapAttribute:output_type -> lemming.dataplane.sai.SetNextHopGroupMapAttributeResponse
	26, // 34: lemming.dataplane.sai.NextHopGroup.GetNextHopGroupMapAttribute:output_type -> lemming.dataplane.sai.GetNextHopGroupMapAttributeResponse
	23, // [23:35] is the sub-list for method output_type
	11, // [11:23] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_next_hop_group_proto_init() }
func file_dataplane_standalone_proto_next_hop_group_proto_init() {
	if File_dataplane_standalone_proto_next_hop_group_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNextHopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNextHopGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNextHopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNextHopGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNextHopGroupAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNextHopGroupAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextHopGroupAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextHopGroupAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNextHopGroupMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNextHopGroupMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNextHopGroupMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNextHopGroupMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNextHopGroupMemberAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNextHopGroupMemberAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextHopGroupMemberAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextHopGroupMemberAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNextHopGroupMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNextHopGroupMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNextHopGroupMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNextHopGroupMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNextHopGroupMapAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNextHopGroupMapAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextHopGroupMapAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextHopGroupMapAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_next_hop_group_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_next_hop_group_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_next_hop_group_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_next_hop_group_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_next_hop_group_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_next_hop_group_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_next_hop_group_proto = out.File
	file_dataplane_standalone_proto_next_hop_group_proto_rawDesc = nil
	file_dataplane_standalone_proto_next_hop_group_proto_goTypes = nil
	file_dataplane_standalone_proto_next_hop_group_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NextHopGroupClient is the client API for NextHopGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NextHopGroupClient interface {
	CreateNextHopGroup(ctx context.Context, in *CreateNextHopGroupRequest, opts ...grpc.CallOption) (*CreateNextHopGroupResponse, error)
	RemoveNextHopGroup(ctx context.Context, in *RemoveNextHopGroupRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupResponse, error)
	SetNextHopGroupAttribute(ctx context.Context, in *SetNextHopGroupAttributeRequest, opts ...grpc.CallOption) (*SetNextHopGroupAttributeResponse, error)
	GetNextHopGroupAttribute(ctx context.Context, in *GetNextHopGroupAttributeRequest, opts ...grpc.CallOption) (*GetNextHopGroupAttributeResponse, error)
	CreateNextHopGroupMember(ctx context.Context, in *CreateNextHopGroupMemberRequest, opts ...grpc.CallOption) (*CreateNextHopGroupMemberResponse, error)
	RemoveNextHopGroupMember(ctx context.Context, in *RemoveNextHopGroupMemberRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupMemberResponse, error)
	SetNextHopGroupMemberAttribute(ctx context.Context, in *SetNextHopGroupMemberAttributeRequest, opts ...grpc.CallOption) (*SetNextHopGroupMemberAttributeResponse, error)
	GetNextHopGroupMemberAttribute(ctx context.Context, in *GetNextHopGroupMemberAttributeRequest, opts ...grpc.CallOption) (*GetNextHopGroupMemberAttributeResponse, error)
	CreateNextHopGroupMap(ctx context.Context, in *CreateNextHopGroupMapRequest, opts ...grpc.CallOption) (*CreateNextHopGroupMapResponse, error)
	RemoveNextHopGroupMap(ctx context.Context, in *RemoveNextHopGroupMapRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupMapResponse, error)
	SetNextHopGroupMapAttribute(ctx context.Context, in *SetNextHopGroupMapAttributeRequest, opts ...grpc.CallOption) (*SetNextHopGroupMapAttributeResponse, error)
	GetNextHopGroupMapAttribute(ctx context.Context, in *GetNextHopGroupMapAttributeRequest, opts ...grpc.CallOption) (*GetNextHopGroupMapAttributeResponse, error)
}

type nextHopGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewNextHopGroupClient(cc grpc.ClientConnInterface) NextHopGroupClient {
	return &nextHopGroupClient{cc}
}

func (c *nextHopGroupClient) CreateNextHopGroup(ctx context.Context, in *CreateNextHopGroupRequest, opts ...grpc.CallOption) (*CreateNextHopGroupResponse, error) {
	out := new(CreateNextHopGroupResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHopGroup/CreateNextHopGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) RemoveNextHopGroup(ctx context.Context, in *RemoveNextHopGroupRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupResponse, error) {
	out := new(RemoveNextHopGroupResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHopGroup/RemoveNextHopGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) SetNextHopGroupAttribute(ctx context.Context, in *SetNextHopGroupAttributeRequest, opts ...grpc.CallOption) (*SetNextHopGroupAttributeResponse, error) {
	out := new(SetNextHopGroupAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHopGroup/SetNextHopGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) GetNextHopGroupAttribute(ctx context.Context, in *GetNextHopGroupAttributeRequest, opts ...grpc.CallOption) (*GetNextHopGroupAttributeResponse, error) {
	out := new(GetNextHopGroupAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHopGroup/GetNextHopGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) CreateNextHopGroupMember(ctx context.Context, in *CreateNextHopGroupMemberRequest, opts ...grpc.CallOption) (*CreateNextHopGroupMemberResponse, error) {
	out := new(CreateNextHopGroupMemberResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHopGroup/CreateNextHopGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) RemoveNextHopGroupMember(ctx context.Context, in *RemoveNextHopGroupMemberRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupMemberResponse, error) {
	out := new(RemoveNextHopGroupMemberResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHopGroup/RemoveNextHopGroupMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) SetNextHopGroupMemberAttribute(ctx context.Context, in *SetNextHopGroupMemberAttributeRequest, opts ...grpc.CallOption) (*SetNextHopGroupMemberAttributeResponse, error) {
	out := new(SetNextHopGroupMemberAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHopGroup/SetNextHopGroupMemberAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) GetNextHopGroupMemberAttribute(ctx context.Context, in *GetNextHopGroupMemberAttributeRequest, opts ...grpc.CallOption) (*GetNextHopGroupMemberAttributeResponse, error) {
	out := new(GetNextHopGroupMemberAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHopGroup/GetNextHopGroupMemberAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) CreateNextHopGroupMap(ctx context.Context, in *CreateNextHopGroupMapRequest, opts ...grpc.CallOption) (*CreateNextHopGroupMapResponse, error) {
	out := new(CreateNextHopGroupMapResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHopGroup/CreateNextHopGroupMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) RemoveNextHopGroupMap(ctx context.Context, in *RemoveNextHopGroupMapRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupMapResponse, error) {
	out := new(RemoveNextHopGroupMapResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHopGroup/RemoveNextHopGroupMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) SetNextHopGroupMapAttribute(ctx context.Context, in *SetNextHopGroupMapAttributeRequest, opts ...grpc.CallOption) (*SetNextHopGroupMapAttributeResponse, error) {
	out := new(SetNextHopGroupMapAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHopGroup/SetNextHopGroupMapAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) GetNextHopGroupMapAttribute(ctx context.Context, in *GetNextHopGroupMapAttributeRequest, opts ...grpc.CallOption) (*GetNextHopGroupMapAttributeResponse, error) {
	out := new(GetNextHopGroupMapAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHopGroup/GetNextHopGroupMapAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NextHopGroupServer is the server API for NextHopGroup service.
type NextHopGroupServer interface {
	CreateNextHopGroup(context.Context, *CreateNextHopGroupRequest) (*CreateNextHopGroupResponse, error)
	RemoveNextHopGroup(context.Context, *RemoveNextHopGroupRequest) (*RemoveNextHopGroupResponse, error)
	SetNextHopGroupAttribute(context.Context, *SetNextHopGroupAttributeRequest) (*SetNextHopGroupAttributeResponse, error)
	GetNextHopGroupAttribute(context.Context, *GetNextHopGroupAttributeRequest) (*GetNextHopGroupAttributeResponse, error)
	CreateNextHopGroupMember(context.Context, *CreateNextHopGroupMemberRequest) (*CreateNextHopGroupMemberResponse, error)
	RemoveNextHopGroupMember(context.Context, *RemoveNextHopGroupMemberRequest) (*RemoveNextHopGroupMemberResponse, error)
	SetNextHopGroupMemberAttribute(context.Context, *SetNextHopGroupMemberAttributeRequest) (*SetNextHopGroupMemberAttributeResponse, error)
	GetNextHopGroupMemberAttribute(context.Context, *GetNextHopGroupMemberAttributeRequest) (*GetNextHopGroupMemberAttributeResponse, error)
	CreateNextHopGroupMap(context.Context, *CreateNextHopGroupMapRequest) (*CreateNextHopGroupMapResponse, error)
	RemoveNextHopGroupMap(context.Context, *RemoveNextHopGroupMapRequest) (*RemoveNextHopGroupMapResponse, error)
	SetNextHopGroupMapAttribute(context.Context, *SetNextHopGroupMapAttributeRequest) (*SetNextHopGroupMapAttributeResponse, error)
	GetNextHopGroupMapAttribute(context.Context, *GetNextHopGroupMapAttributeRequest) (*GetNextHopGroupMapAttributeResponse, error)
}

// UnimplementedNextHopGroupServer can be embedded to have forward compatible implementations.
type UnimplementedNextHopGroupServer struct {
}

func (*UnimplementedNextHopGroupServer) CreateNextHopGroup(context.Context, *CreateNextHopGroupRequest) (*CreateNextHopGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHopGroup not implemented")
}
func (*UnimplementedNextHopGroupServer) RemoveNextHopGroup(context.Context, *RemoveNextHopGroupRequest) (*RemoveNextHopGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNextHopGroup not implemented")
}
func (*UnimplementedNextHopGroupServer) SetNextHopGroupAttribute(context.Context, *SetNextHopGroupAttributeRequest) (*SetNextHopGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextHopGroupAttribute not implemented")
}
func (*UnimplementedNextHopGroupServer) GetNextHopGroupAttribute(context.Context, *GetNextHopGroupAttributeRequest) (*GetNextHopGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHopGroupAttribute not implemented")
}
func (*UnimplementedNextHopGroupServer) CreateNextHopGroupMember(context.Context, *CreateNextHopGroupMemberRequest) (*CreateNextHopGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHopGroupMember not implemented")
}
func (*UnimplementedNextHopGroupServer) RemoveNextHopGroupMember(context.Context, *RemoveNextHopGroupMemberRequest) (*RemoveNextHopGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNextHopGroupMember not implemented")
}
func (*UnimplementedNextHopGroupServer) SetNextHopGroupMemberAttribute(context.Context, *SetNextHopGroupMemberAttributeRequest) (*SetNextHopGroupMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextHopGroupMemberAttribute not implemented")
}
func (*UnimplementedNextHopGroupServer) GetNextHopGroupMemberAttribute(context.Context, *GetNextHopGroupMemberAttributeRequest) (*GetNextHopGroupMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHopGroupMemberAttribute not implemented")
}
func (*UnimplementedNextHopGroupServer) CreateNextHopGroupMap(context.Context, *CreateNextHopGroupMapRequest) (*CreateNextHopGroupMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHopGroupMap not implemented")
}
func (*UnimplementedNextHopGroupServer) RemoveNextHopGroupMap(context.Context, *RemoveNextHopGroupMapRequest) (*RemoveNextHopGroupMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNextHopGroupMap not implemented")
}
func (*UnimplementedNextHopGroupServer) SetNextHopGroupMapAttribute(context.Context, *SetNextHopGroupMapAttributeRequest) (*SetNextHopGroupMapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextHopGroupMapAttribute not implemented")
}
func (*UnimplementedNextHopGroupServer) GetNextHopGroupMapAttribute(context.Context, *GetNextHopGroupMapAttributeRequest) (*GetNextHopGroupMapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHopGroupMapAttribute not implemented")
}

func RegisterNextHopGroupServer(s *grpc.Server, srv NextHopGroupServer) {
	s.RegisterService(&_NextHopGroup_serviceDesc, srv)
}

func _NextHopGroup_CreateNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).CreateNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHopGroup/CreateNextHopGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).CreateNextHopGroup(ctx, req.(*CreateNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_RemoveNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).RemoveNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHopGroup/RemoveNextHopGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).RemoveNextHopGroup(ctx, req.(*RemoveNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_SetNextHopGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNextHopGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).SetNextHopGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHopGroup/SetNextHopGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).SetNextHopGroupAttribute(ctx, req.(*SetNextHopGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_GetNextHopGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).GetNextHopGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHopGroup/GetNextHopGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).GetNextHopGroupAttribute(ctx, req.(*GetNextHopGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_CreateNextHopGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).CreateNextHopGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHopGroup/CreateNextHopGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).CreateNextHopGroupMember(ctx, req.(*CreateNextHopGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_RemoveNextHopGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNextHopGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).RemoveNextHopGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHopGroup/RemoveNextHopGroupMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).RemoveNextHopGroupMember(ctx, req.(*RemoveNextHopGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_SetNextHopGroupMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNextHopGroupMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).SetNextHopGroupMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHopGroup/SetNextHopGroupMemberAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).SetNextHopGroupMemberAttribute(ctx, req.(*SetNextHopGroupMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_GetNextHopGroupMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopGroupMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).GetNextHopGroupMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHopGroup/GetNextHopGroupMemberAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).GetNextHopGroupMemberAttribute(ctx, req.(*GetNextHopGroupMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_CreateNextHopGroupMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopGroupMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).CreateNextHopGroupMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHopGroup/CreateNextHopGroupMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).CreateNextHopGroupMap(ctx, req.(*CreateNextHopGroupMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_RemoveNextHopGroupMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNextHopGroupMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).RemoveNextHopGroupMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHopGroup/RemoveNextHopGroupMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).RemoveNextHopGroupMap(ctx, req.(*RemoveNextHopGroupMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_SetNextHopGroupMapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNextHopGroupMapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).SetNextHopGroupMapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHopGroup/SetNextHopGroupMapAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).SetNextHopGroupMapAttribute(ctx, req.(*SetNextHopGroupMapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_GetNextHopGroupMapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopGroupMapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).GetNextHopGroupMapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHopGroup/GetNextHopGroupMapAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).GetNextHopGroupMapAttribute(ctx, req.(*GetNextHopGroupMapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NextHopGroup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.NextHopGroup",
	HandlerType: (*NextHopGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNextHopGroup",
			Handler:    _NextHopGroup_CreateNextHopGroup_Handler,
		},
		{
			MethodName: "RemoveNextHopGroup",
			Handler:    _NextHopGroup_RemoveNextHopGroup_Handler,
		},
		{
			MethodName: "SetNextHopGroupAttribute",
			Handler:    _NextHopGroup_SetNextHopGroupAttribute_Handler,
		},
		{
			MethodName: "GetNextHopGroupAttribute",
			Handler:    _NextHopGroup_GetNextHopGroupAttribute_Handler,
		},
		{
			MethodName: "CreateNextHopGroupMember",
			Handler:    _NextHopGroup_CreateNextHopGroupMember_Handler,
		},
		{
			MethodName: "RemoveNextHopGroupMember",
			Handler:    _NextHopGroup_RemoveNextHopGroupMember_Handler,
		},
		{
			MethodName: "SetNextHopGroupMemberAttribute",
			Handler:    _NextHopGroup_SetNextHopGroupMemberAttribute_Handler,
		},
		{
			MethodName: "GetNextHopGroupMemberAttribute",
			Handler:    _NextHopGroup_GetNextHopGroupMemberAttribute_Handler,
		},
		{
			MethodName: "CreateNextHopGroupMap",
			Handler:    _NextHopGroup_CreateNextHopGroupMap_Handler,
		},
		{
			MethodName: "RemoveNextHopGroupMap",
			Handler:    _NextHopGroup_RemoveNextHopGroupMap_Handler,
		},
		{
			MethodName: "SetNextHopGroupMapAttribute",
			Handler:    _NextHopGroup_SetNextHopGroupMapAttribute_Handler,
		},
		{
			MethodName: "GetNextHopGroupMapAttribute",
			Handler:    _NextHopGroup_GetNextHopGroupMapAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/next_hop_group.proto",
}
