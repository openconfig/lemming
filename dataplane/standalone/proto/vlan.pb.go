// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/vlan.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VlanAttr int32

const (
	VlanAttr_VLAN_ATTR_UNSPECIFIED                             VlanAttr = 0
	VlanAttr_VLAN_ATTR_VLAN_ID                                 VlanAttr = 1
	VlanAttr_VLAN_ATTR_MEMBER_LIST                             VlanAttr = 2
	VlanAttr_VLAN_ATTR_MAX_LEARNED_ADDRESSES                   VlanAttr = 3
	VlanAttr_VLAN_ATTR_STP_INSTANCE                            VlanAttr = 4
	VlanAttr_VLAN_ATTR_LEARN_DISABLE                           VlanAttr = 5
	VlanAttr_VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE              VlanAttr = 6
	VlanAttr_VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE              VlanAttr = 7
	VlanAttr_VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID    VlanAttr = 8
	VlanAttr_VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID      VlanAttr = 9
	VlanAttr_VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID      VlanAttr = 10
	VlanAttr_VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID VlanAttr = 11
	VlanAttr_VLAN_ATTR_INGRESS_ACL                             VlanAttr = 12
	VlanAttr_VLAN_ATTR_EGRESS_ACL                              VlanAttr = 13
	VlanAttr_VLAN_ATTR_META_DATA                               VlanAttr = 14
	VlanAttr_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE      VlanAttr = 15
	VlanAttr_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP             VlanAttr = 16
	VlanAttr_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE    VlanAttr = 17
	VlanAttr_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP           VlanAttr = 18
	VlanAttr_VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE            VlanAttr = 19
	VlanAttr_VLAN_ATTR_BROADCAST_FLOOD_GROUP                   VlanAttr = 20
	VlanAttr_VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE             VlanAttr = 21
	VlanAttr_VLAN_ATTR_TAM_OBJECT                              VlanAttr = 22
)

// Enum value maps for VlanAttr.
var (
	VlanAttr_name = map[int32]string{
		0:  "VLAN_ATTR_UNSPECIFIED",
		1:  "VLAN_ATTR_VLAN_ID",
		2:  "VLAN_ATTR_MEMBER_LIST",
		3:  "VLAN_ATTR_MAX_LEARNED_ADDRESSES",
		4:  "VLAN_ATTR_STP_INSTANCE",
		5:  "VLAN_ATTR_LEARN_DISABLE",
		6:  "VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE",
		7:  "VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE",
		8:  "VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID",
		9:  "VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID",
		10: "VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID",
		11: "VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID",
		12: "VLAN_ATTR_INGRESS_ACL",
		13: "VLAN_ATTR_EGRESS_ACL",
		14: "VLAN_ATTR_META_DATA",
		15: "VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE",
		16: "VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP",
		17: "VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE",
		18: "VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP",
		19: "VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE",
		20: "VLAN_ATTR_BROADCAST_FLOOD_GROUP",
		21: "VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE",
		22: "VLAN_ATTR_TAM_OBJECT",
	}
	VlanAttr_value = map[string]int32{
		"VLAN_ATTR_UNSPECIFIED":                             0,
		"VLAN_ATTR_VLAN_ID":                                 1,
		"VLAN_ATTR_MEMBER_LIST":                             2,
		"VLAN_ATTR_MAX_LEARNED_ADDRESSES":                   3,
		"VLAN_ATTR_STP_INSTANCE":                            4,
		"VLAN_ATTR_LEARN_DISABLE":                           5,
		"VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE":              6,
		"VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE":              7,
		"VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID":    8,
		"VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID":      9,
		"VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID":      10,
		"VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID": 11,
		"VLAN_ATTR_INGRESS_ACL":                             12,
		"VLAN_ATTR_EGRESS_ACL":                              13,
		"VLAN_ATTR_META_DATA":                               14,
		"VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE":      15,
		"VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP":             16,
		"VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE":    17,
		"VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP":           18,
		"VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE":            19,
		"VLAN_ATTR_BROADCAST_FLOOD_GROUP":                   20,
		"VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE":             21,
		"VLAN_ATTR_TAM_OBJECT":                              22,
	}
)

func (x VlanAttr) Enum() *VlanAttr {
	p := new(VlanAttr)
	*p = x
	return p
}

func (x VlanAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VlanAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_vlan_proto_enumTypes[0].Descriptor()
}

func (VlanAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_vlan_proto_enumTypes[0]
}

func (x VlanAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VlanAttr.Descriptor instead.
func (VlanAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{0}
}

type VlanMemberAttr int32

const (
	VlanMemberAttr_VLAN_MEMBER_ATTR_UNSPECIFIED       VlanMemberAttr = 0
	VlanMemberAttr_VLAN_MEMBER_ATTR_VLAN_ID           VlanMemberAttr = 1
	VlanMemberAttr_VLAN_MEMBER_ATTR_BRIDGE_PORT_ID    VlanMemberAttr = 2
	VlanMemberAttr_VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE VlanMemberAttr = 3
)

// Enum value maps for VlanMemberAttr.
var (
	VlanMemberAttr_name = map[int32]string{
		0: "VLAN_MEMBER_ATTR_UNSPECIFIED",
		1: "VLAN_MEMBER_ATTR_VLAN_ID",
		2: "VLAN_MEMBER_ATTR_BRIDGE_PORT_ID",
		3: "VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE",
	}
	VlanMemberAttr_value = map[string]int32{
		"VLAN_MEMBER_ATTR_UNSPECIFIED":       0,
		"VLAN_MEMBER_ATTR_VLAN_ID":           1,
		"VLAN_MEMBER_ATTR_BRIDGE_PORT_ID":    2,
		"VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE": 3,
	}
)

func (x VlanMemberAttr) Enum() *VlanMemberAttr {
	p := new(VlanMemberAttr)
	*p = x
	return p
}

func (x VlanMemberAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VlanMemberAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_vlan_proto_enumTypes[1].Descriptor()
}

func (VlanMemberAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_vlan_proto_enumTypes[1]
}

func (x VlanMemberAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VlanMemberAttr.Descriptor instead.
func (VlanMemberAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{1}
}

type CreateVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                             uint64                  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	VlanId                             *uint32                 `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3,oneof" json:"vlan_id,omitempty"`
	MaxLearnedAddresses                *uint32                 `protobuf:"varint,3,opt,name=max_learned_addresses,json=maxLearnedAddresses,proto3,oneof" json:"max_learned_addresses,omitempty"`
	StpInstance                        *uint64                 `protobuf:"varint,4,opt,name=stp_instance,json=stpInstance,proto3,oneof" json:"stp_instance,omitempty"`
	LearnDisable                       *bool                   `protobuf:"varint,5,opt,name=learn_disable,json=learnDisable,proto3,oneof" json:"learn_disable,omitempty"`
	Ipv4McastLookupKeyType             *VlanMcastLookupKeyType `protobuf:"varint,6,opt,name=ipv4_mcast_lookup_key_type,json=ipv4McastLookupKeyType,proto3,enum=lemming.dataplane.sai.VlanMcastLookupKeyType,oneof" json:"ipv4_mcast_lookup_key_type,omitempty"`
	Ipv6McastLookupKeyType             *VlanMcastLookupKeyType `protobuf:"varint,7,opt,name=ipv6_mcast_lookup_key_type,json=ipv6McastLookupKeyType,proto3,enum=lemming.dataplane.sai.VlanMcastLookupKeyType,oneof" json:"ipv6_mcast_lookup_key_type,omitempty"`
	UnknownNonIpMcastOutputGroupId     *uint64                 `protobuf:"varint,8,opt,name=unknown_non_ip_mcast_output_group_id,json=unknownNonIpMcastOutputGroupId,proto3,oneof" json:"unknown_non_ip_mcast_output_group_id,omitempty"`
	UnknownIpv4McastOutputGroupId      *uint64                 `protobuf:"varint,9,opt,name=unknown_ipv4_mcast_output_group_id,json=unknownIpv4McastOutputGroupId,proto3,oneof" json:"unknown_ipv4_mcast_output_group_id,omitempty"`
	UnknownIpv6McastOutputGroupId      *uint64                 `protobuf:"varint,10,opt,name=unknown_ipv6_mcast_output_group_id,json=unknownIpv6McastOutputGroupId,proto3,oneof" json:"unknown_ipv6_mcast_output_group_id,omitempty"`
	UnknownLinklocalMcastOutputGroupId *uint64                 `protobuf:"varint,11,opt,name=unknown_linklocal_mcast_output_group_id,json=unknownLinklocalMcastOutputGroupId,proto3,oneof" json:"unknown_linklocal_mcast_output_group_id,omitempty"`
	IngressAcl                         *uint64                 `protobuf:"varint,12,opt,name=ingress_acl,json=ingressAcl,proto3,oneof" json:"ingress_acl,omitempty"`
	EgressAcl                          *uint64                 `protobuf:"varint,13,opt,name=egress_acl,json=egressAcl,proto3,oneof" json:"egress_acl,omitempty"`
	MetaData                           *uint32                 `protobuf:"varint,14,opt,name=meta_data,json=metaData,proto3,oneof" json:"meta_data,omitempty"`
	UnknownUnicastFloodControlType     *VlanFloodControlType   `protobuf:"varint,15,opt,name=unknown_unicast_flood_control_type,json=unknownUnicastFloodControlType,proto3,enum=lemming.dataplane.sai.VlanFloodControlType,oneof" json:"unknown_unicast_flood_control_type,omitempty"`
	UnknownUnicastFloodGroup           *uint64                 `protobuf:"varint,16,opt,name=unknown_unicast_flood_group,json=unknownUnicastFloodGroup,proto3,oneof" json:"unknown_unicast_flood_group,omitempty"`
	UnknownMulticastFloodControlType   *VlanFloodControlType   `protobuf:"varint,17,opt,name=unknown_multicast_flood_control_type,json=unknownMulticastFloodControlType,proto3,enum=lemming.dataplane.sai.VlanFloodControlType,oneof" json:"unknown_multicast_flood_control_type,omitempty"`
	UnknownMulticastFloodGroup         *uint64                 `protobuf:"varint,18,opt,name=unknown_multicast_flood_group,json=unknownMulticastFloodGroup,proto3,oneof" json:"unknown_multicast_flood_group,omitempty"`
	BroadcastFloodControlType          *VlanFloodControlType   `protobuf:"varint,19,opt,name=broadcast_flood_control_type,json=broadcastFloodControlType,proto3,enum=lemming.dataplane.sai.VlanFloodControlType,oneof" json:"broadcast_flood_control_type,omitempty"`
	BroadcastFloodGroup                *uint64                 `protobuf:"varint,20,opt,name=broadcast_flood_group,json=broadcastFloodGroup,proto3,oneof" json:"broadcast_flood_group,omitempty"`
	CustomIgmpSnoopingEnable           *bool                   `protobuf:"varint,21,opt,name=custom_igmp_snooping_enable,json=customIgmpSnoopingEnable,proto3,oneof" json:"custom_igmp_snooping_enable,omitempty"`
	TamObject                          []uint64                `protobuf:"varint,22,rep,packed,name=tam_object,json=tamObject,proto3" json:"tam_object,omitempty"`
}

func (x *CreateVlanRequest) Reset() {
	*x = CreateVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVlanRequest) ProtoMessage() {}

func (x *CreateVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVlanRequest.ProtoReflect.Descriptor instead.
func (*CreateVlanRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVlanRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateVlanRequest) GetVlanId() uint32 {
	if x != nil && x.VlanId != nil {
		return *x.VlanId
	}
	return 0
}

func (x *CreateVlanRequest) GetMaxLearnedAddresses() uint32 {
	if x != nil && x.MaxLearnedAddresses != nil {
		return *x.MaxLearnedAddresses
	}
	return 0
}

func (x *CreateVlanRequest) GetStpInstance() uint64 {
	if x != nil && x.StpInstance != nil {
		return *x.StpInstance
	}
	return 0
}

func (x *CreateVlanRequest) GetLearnDisable() bool {
	if x != nil && x.LearnDisable != nil {
		return *x.LearnDisable
	}
	return false
}

func (x *CreateVlanRequest) GetIpv4McastLookupKeyType() VlanMcastLookupKeyType {
	if x != nil && x.Ipv4McastLookupKeyType != nil {
		return *x.Ipv4McastLookupKeyType
	}
	return VlanMcastLookupKeyType_VLAN_MCAST_LOOKUP_KEY_TYPE_UNSPECIFIED
}

func (x *CreateVlanRequest) GetIpv6McastLookupKeyType() VlanMcastLookupKeyType {
	if x != nil && x.Ipv6McastLookupKeyType != nil {
		return *x.Ipv6McastLookupKeyType
	}
	return VlanMcastLookupKeyType_VLAN_MCAST_LOOKUP_KEY_TYPE_UNSPECIFIED
}

func (x *CreateVlanRequest) GetUnknownNonIpMcastOutputGroupId() uint64 {
	if x != nil && x.UnknownNonIpMcastOutputGroupId != nil {
		return *x.UnknownNonIpMcastOutputGroupId
	}
	return 0
}

func (x *CreateVlanRequest) GetUnknownIpv4McastOutputGroupId() uint64 {
	if x != nil && x.UnknownIpv4McastOutputGroupId != nil {
		return *x.UnknownIpv4McastOutputGroupId
	}
	return 0
}

func (x *CreateVlanRequest) GetUnknownIpv6McastOutputGroupId() uint64 {
	if x != nil && x.UnknownIpv6McastOutputGroupId != nil {
		return *x.UnknownIpv6McastOutputGroupId
	}
	return 0
}

func (x *CreateVlanRequest) GetUnknownLinklocalMcastOutputGroupId() uint64 {
	if x != nil && x.UnknownLinklocalMcastOutputGroupId != nil {
		return *x.UnknownLinklocalMcastOutputGroupId
	}
	return 0
}

func (x *CreateVlanRequest) GetIngressAcl() uint64 {
	if x != nil && x.IngressAcl != nil {
		return *x.IngressAcl
	}
	return 0
}

func (x *CreateVlanRequest) GetEgressAcl() uint64 {
	if x != nil && x.EgressAcl != nil {
		return *x.EgressAcl
	}
	return 0
}

func (x *CreateVlanRequest) GetMetaData() uint32 {
	if x != nil && x.MetaData != nil {
		return *x.MetaData
	}
	return 0
}

func (x *CreateVlanRequest) GetUnknownUnicastFloodControlType() VlanFloodControlType {
	if x != nil && x.UnknownUnicastFloodControlType != nil {
		return *x.UnknownUnicastFloodControlType
	}
	return VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *CreateVlanRequest) GetUnknownUnicastFloodGroup() uint64 {
	if x != nil && x.UnknownUnicastFloodGroup != nil {
		return *x.UnknownUnicastFloodGroup
	}
	return 0
}

func (x *CreateVlanRequest) GetUnknownMulticastFloodControlType() VlanFloodControlType {
	if x != nil && x.UnknownMulticastFloodControlType != nil {
		return *x.UnknownMulticastFloodControlType
	}
	return VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *CreateVlanRequest) GetUnknownMulticastFloodGroup() uint64 {
	if x != nil && x.UnknownMulticastFloodGroup != nil {
		return *x.UnknownMulticastFloodGroup
	}
	return 0
}

func (x *CreateVlanRequest) GetBroadcastFloodControlType() VlanFloodControlType {
	if x != nil && x.BroadcastFloodControlType != nil {
		return *x.BroadcastFloodControlType
	}
	return VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *CreateVlanRequest) GetBroadcastFloodGroup() uint64 {
	if x != nil && x.BroadcastFloodGroup != nil {
		return *x.BroadcastFloodGroup
	}
	return 0
}

func (x *CreateVlanRequest) GetCustomIgmpSnoopingEnable() bool {
	if x != nil && x.CustomIgmpSnoopingEnable != nil {
		return *x.CustomIgmpSnoopingEnable
	}
	return false
}

func (x *CreateVlanRequest) GetTamObject() []uint64 {
	if x != nil {
		return x.TamObject
	}
	return nil
}

type CreateVlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateVlanResponse) Reset() {
	*x = CreateVlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVlanResponse) ProtoMessage() {}

func (x *CreateVlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVlanResponse.ProtoReflect.Descriptor instead.
func (*CreateVlanResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVlanResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveVlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveVlanRequest) Reset() {
	*x = RemoveVlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveVlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveVlanRequest) ProtoMessage() {}

func (x *RemoveVlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveVlanRequest.ProtoReflect.Descriptor instead.
func (*RemoveVlanRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveVlanRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveVlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveVlanResponse) Reset() {
	*x = RemoveVlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveVlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveVlanResponse) ProtoMessage() {}

func (x *RemoveVlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveVlanResponse.ProtoReflect.Descriptor instead.
func (*RemoveVlanResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{3}
}

type SetVlanAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                                uint64                  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	MaxLearnedAddresses                *uint32                 `protobuf:"varint,2,opt,name=max_learned_addresses,json=maxLearnedAddresses,proto3,oneof" json:"max_learned_addresses,omitempty"`
	StpInstance                        *uint64                 `protobuf:"varint,3,opt,name=stp_instance,json=stpInstance,proto3,oneof" json:"stp_instance,omitempty"`
	LearnDisable                       *bool                   `protobuf:"varint,4,opt,name=learn_disable,json=learnDisable,proto3,oneof" json:"learn_disable,omitempty"`
	Ipv4McastLookupKeyType             *VlanMcastLookupKeyType `protobuf:"varint,5,opt,name=ipv4_mcast_lookup_key_type,json=ipv4McastLookupKeyType,proto3,enum=lemming.dataplane.sai.VlanMcastLookupKeyType,oneof" json:"ipv4_mcast_lookup_key_type,omitempty"`
	Ipv6McastLookupKeyType             *VlanMcastLookupKeyType `protobuf:"varint,6,opt,name=ipv6_mcast_lookup_key_type,json=ipv6McastLookupKeyType,proto3,enum=lemming.dataplane.sai.VlanMcastLookupKeyType,oneof" json:"ipv6_mcast_lookup_key_type,omitempty"`
	UnknownNonIpMcastOutputGroupId     *uint64                 `protobuf:"varint,7,opt,name=unknown_non_ip_mcast_output_group_id,json=unknownNonIpMcastOutputGroupId,proto3,oneof" json:"unknown_non_ip_mcast_output_group_id,omitempty"`
	UnknownIpv4McastOutputGroupId      *uint64                 `protobuf:"varint,8,opt,name=unknown_ipv4_mcast_output_group_id,json=unknownIpv4McastOutputGroupId,proto3,oneof" json:"unknown_ipv4_mcast_output_group_id,omitempty"`
	UnknownIpv6McastOutputGroupId      *uint64                 `protobuf:"varint,9,opt,name=unknown_ipv6_mcast_output_group_id,json=unknownIpv6McastOutputGroupId,proto3,oneof" json:"unknown_ipv6_mcast_output_group_id,omitempty"`
	UnknownLinklocalMcastOutputGroupId *uint64                 `protobuf:"varint,10,opt,name=unknown_linklocal_mcast_output_group_id,json=unknownLinklocalMcastOutputGroupId,proto3,oneof" json:"unknown_linklocal_mcast_output_group_id,omitempty"`
	IngressAcl                         *uint64                 `protobuf:"varint,11,opt,name=ingress_acl,json=ingressAcl,proto3,oneof" json:"ingress_acl,omitempty"`
	EgressAcl                          *uint64                 `protobuf:"varint,12,opt,name=egress_acl,json=egressAcl,proto3,oneof" json:"egress_acl,omitempty"`
	MetaData                           *uint32                 `protobuf:"varint,13,opt,name=meta_data,json=metaData,proto3,oneof" json:"meta_data,omitempty"`
	UnknownUnicastFloodControlType     *VlanFloodControlType   `protobuf:"varint,14,opt,name=unknown_unicast_flood_control_type,json=unknownUnicastFloodControlType,proto3,enum=lemming.dataplane.sai.VlanFloodControlType,oneof" json:"unknown_unicast_flood_control_type,omitempty"`
	UnknownUnicastFloodGroup           *uint64                 `protobuf:"varint,15,opt,name=unknown_unicast_flood_group,json=unknownUnicastFloodGroup,proto3,oneof" json:"unknown_unicast_flood_group,omitempty"`
	UnknownMulticastFloodControlType   *VlanFloodControlType   `protobuf:"varint,16,opt,name=unknown_multicast_flood_control_type,json=unknownMulticastFloodControlType,proto3,enum=lemming.dataplane.sai.VlanFloodControlType,oneof" json:"unknown_multicast_flood_control_type,omitempty"`
	UnknownMulticastFloodGroup         *uint64                 `protobuf:"varint,17,opt,name=unknown_multicast_flood_group,json=unknownMulticastFloodGroup,proto3,oneof" json:"unknown_multicast_flood_group,omitempty"`
	BroadcastFloodControlType          *VlanFloodControlType   `protobuf:"varint,18,opt,name=broadcast_flood_control_type,json=broadcastFloodControlType,proto3,enum=lemming.dataplane.sai.VlanFloodControlType,oneof" json:"broadcast_flood_control_type,omitempty"`
	BroadcastFloodGroup                *uint64                 `protobuf:"varint,19,opt,name=broadcast_flood_group,json=broadcastFloodGroup,proto3,oneof" json:"broadcast_flood_group,omitempty"`
	CustomIgmpSnoopingEnable           *bool                   `protobuf:"varint,20,opt,name=custom_igmp_snooping_enable,json=customIgmpSnoopingEnable,proto3,oneof" json:"custom_igmp_snooping_enable,omitempty"`
	TamObject                          []uint64                `protobuf:"varint,21,rep,packed,name=tam_object,json=tamObject,proto3" json:"tam_object,omitempty"`
}

func (x *SetVlanAttributeRequest) Reset() {
	*x = SetVlanAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVlanAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVlanAttributeRequest) ProtoMessage() {}

func (x *SetVlanAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVlanAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetVlanAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{4}
}

func (x *SetVlanAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetMaxLearnedAddresses() uint32 {
	if x != nil && x.MaxLearnedAddresses != nil {
		return *x.MaxLearnedAddresses
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetStpInstance() uint64 {
	if x != nil && x.StpInstance != nil {
		return *x.StpInstance
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetLearnDisable() bool {
	if x != nil && x.LearnDisable != nil {
		return *x.LearnDisable
	}
	return false
}

func (x *SetVlanAttributeRequest) GetIpv4McastLookupKeyType() VlanMcastLookupKeyType {
	if x != nil && x.Ipv4McastLookupKeyType != nil {
		return *x.Ipv4McastLookupKeyType
	}
	return VlanMcastLookupKeyType_VLAN_MCAST_LOOKUP_KEY_TYPE_UNSPECIFIED
}

func (x *SetVlanAttributeRequest) GetIpv6McastLookupKeyType() VlanMcastLookupKeyType {
	if x != nil && x.Ipv6McastLookupKeyType != nil {
		return *x.Ipv6McastLookupKeyType
	}
	return VlanMcastLookupKeyType_VLAN_MCAST_LOOKUP_KEY_TYPE_UNSPECIFIED
}

func (x *SetVlanAttributeRequest) GetUnknownNonIpMcastOutputGroupId() uint64 {
	if x != nil && x.UnknownNonIpMcastOutputGroupId != nil {
		return *x.UnknownNonIpMcastOutputGroupId
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetUnknownIpv4McastOutputGroupId() uint64 {
	if x != nil && x.UnknownIpv4McastOutputGroupId != nil {
		return *x.UnknownIpv4McastOutputGroupId
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetUnknownIpv6McastOutputGroupId() uint64 {
	if x != nil && x.UnknownIpv6McastOutputGroupId != nil {
		return *x.UnknownIpv6McastOutputGroupId
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetUnknownLinklocalMcastOutputGroupId() uint64 {
	if x != nil && x.UnknownLinklocalMcastOutputGroupId != nil {
		return *x.UnknownLinklocalMcastOutputGroupId
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetIngressAcl() uint64 {
	if x != nil && x.IngressAcl != nil {
		return *x.IngressAcl
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetEgressAcl() uint64 {
	if x != nil && x.EgressAcl != nil {
		return *x.EgressAcl
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetMetaData() uint32 {
	if x != nil && x.MetaData != nil {
		return *x.MetaData
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetUnknownUnicastFloodControlType() VlanFloodControlType {
	if x != nil && x.UnknownUnicastFloodControlType != nil {
		return *x.UnknownUnicastFloodControlType
	}
	return VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *SetVlanAttributeRequest) GetUnknownUnicastFloodGroup() uint64 {
	if x != nil && x.UnknownUnicastFloodGroup != nil {
		return *x.UnknownUnicastFloodGroup
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetUnknownMulticastFloodControlType() VlanFloodControlType {
	if x != nil && x.UnknownMulticastFloodControlType != nil {
		return *x.UnknownMulticastFloodControlType
	}
	return VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *SetVlanAttributeRequest) GetUnknownMulticastFloodGroup() uint64 {
	if x != nil && x.UnknownMulticastFloodGroup != nil {
		return *x.UnknownMulticastFloodGroup
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetBroadcastFloodControlType() VlanFloodControlType {
	if x != nil && x.BroadcastFloodControlType != nil {
		return *x.BroadcastFloodControlType
	}
	return VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *SetVlanAttributeRequest) GetBroadcastFloodGroup() uint64 {
	if x != nil && x.BroadcastFloodGroup != nil {
		return *x.BroadcastFloodGroup
	}
	return 0
}

func (x *SetVlanAttributeRequest) GetCustomIgmpSnoopingEnable() bool {
	if x != nil && x.CustomIgmpSnoopingEnable != nil {
		return *x.CustomIgmpSnoopingEnable
	}
	return false
}

func (x *SetVlanAttributeRequest) GetTamObject() []uint64 {
	if x != nil {
		return x.TamObject
	}
	return nil
}

type SetVlanAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetVlanAttributeResponse) Reset() {
	*x = SetVlanAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVlanAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVlanAttributeResponse) ProtoMessage() {}

func (x *SetVlanAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVlanAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetVlanAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{5}
}

type GetVlanAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []VlanAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.VlanAttr" json:"attr_type,omitempty"`
}

func (x *GetVlanAttributeRequest) Reset() {
	*x = GetVlanAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVlanAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVlanAttributeRequest) ProtoMessage() {}

func (x *GetVlanAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVlanAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetVlanAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{6}
}

func (x *GetVlanAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetVlanAttributeRequest) GetAttrType() []VlanAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetVlanAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *VlanAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetVlanAttributeResponse) Reset() {
	*x = GetVlanAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVlanAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVlanAttributeResponse) ProtoMessage() {}

func (x *GetVlanAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVlanAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetVlanAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{7}
}

func (x *GetVlanAttributeResponse) GetAttr() *VlanAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateVlanMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch          uint64           `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	VlanId          *uint64          `protobuf:"varint,2,opt,name=vlan_id,json=vlanId,proto3,oneof" json:"vlan_id,omitempty"`
	BridgePortId    *uint64          `protobuf:"varint,3,opt,name=bridge_port_id,json=bridgePortId,proto3,oneof" json:"bridge_port_id,omitempty"`
	VlanTaggingMode *VlanTaggingMode `protobuf:"varint,4,opt,name=vlan_tagging_mode,json=vlanTaggingMode,proto3,enum=lemming.dataplane.sai.VlanTaggingMode,oneof" json:"vlan_tagging_mode,omitempty"`
}

func (x *CreateVlanMemberRequest) Reset() {
	*x = CreateVlanMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVlanMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVlanMemberRequest) ProtoMessage() {}

func (x *CreateVlanMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVlanMemberRequest.ProtoReflect.Descriptor instead.
func (*CreateVlanMemberRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{8}
}

func (x *CreateVlanMemberRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateVlanMemberRequest) GetVlanId() uint64 {
	if x != nil && x.VlanId != nil {
		return *x.VlanId
	}
	return 0
}

func (x *CreateVlanMemberRequest) GetBridgePortId() uint64 {
	if x != nil && x.BridgePortId != nil {
		return *x.BridgePortId
	}
	return 0
}

func (x *CreateVlanMemberRequest) GetVlanTaggingMode() VlanTaggingMode {
	if x != nil && x.VlanTaggingMode != nil {
		return *x.VlanTaggingMode
	}
	return VlanTaggingMode_VLAN_TAGGING_MODE_UNSPECIFIED
}

type CreateVlanMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateVlanMemberResponse) Reset() {
	*x = CreateVlanMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVlanMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVlanMemberResponse) ProtoMessage() {}

func (x *CreateVlanMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVlanMemberResponse.ProtoReflect.Descriptor instead.
func (*CreateVlanMemberResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{9}
}

func (x *CreateVlanMemberResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveVlanMemberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveVlanMemberRequest) Reset() {
	*x = RemoveVlanMemberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveVlanMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveVlanMemberRequest) ProtoMessage() {}

func (x *RemoveVlanMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveVlanMemberRequest.ProtoReflect.Descriptor instead.
func (*RemoveVlanMemberRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveVlanMemberRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveVlanMemberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveVlanMemberResponse) Reset() {
	*x = RemoveVlanMemberResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveVlanMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveVlanMemberResponse) ProtoMessage() {}

func (x *RemoveVlanMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveVlanMemberResponse.ProtoReflect.Descriptor instead.
func (*RemoveVlanMemberResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{11}
}

type SetVlanMemberAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid             uint64           `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	VlanTaggingMode *VlanTaggingMode `protobuf:"varint,2,opt,name=vlan_tagging_mode,json=vlanTaggingMode,proto3,enum=lemming.dataplane.sai.VlanTaggingMode,oneof" json:"vlan_tagging_mode,omitempty"`
}

func (x *SetVlanMemberAttributeRequest) Reset() {
	*x = SetVlanMemberAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVlanMemberAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVlanMemberAttributeRequest) ProtoMessage() {}

func (x *SetVlanMemberAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVlanMemberAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetVlanMemberAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{12}
}

func (x *SetVlanMemberAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetVlanMemberAttributeRequest) GetVlanTaggingMode() VlanTaggingMode {
	if x != nil && x.VlanTaggingMode != nil {
		return *x.VlanTaggingMode
	}
	return VlanTaggingMode_VLAN_TAGGING_MODE_UNSPECIFIED
}

type SetVlanMemberAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetVlanMemberAttributeResponse) Reset() {
	*x = SetVlanMemberAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVlanMemberAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVlanMemberAttributeResponse) ProtoMessage() {}

func (x *SetVlanMemberAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVlanMemberAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetVlanMemberAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{13}
}

type GetVlanMemberAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64           `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []VlanMemberAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.VlanMemberAttr" json:"attr_type,omitempty"`
}

func (x *GetVlanMemberAttributeRequest) Reset() {
	*x = GetVlanMemberAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVlanMemberAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVlanMemberAttributeRequest) ProtoMessage() {}

func (x *GetVlanMemberAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVlanMemberAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetVlanMemberAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{14}
}

func (x *GetVlanMemberAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetVlanMemberAttributeRequest) GetAttrType() []VlanMemberAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetVlanMemberAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *VlanMemberAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetVlanMemberAttributeResponse) Reset() {
	*x = GetVlanMemberAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVlanMemberAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVlanMemberAttributeResponse) ProtoMessage() {}

func (x *GetVlanMemberAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVlanMemberAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetVlanMemberAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{15}
}

func (x *GetVlanMemberAttributeResponse) GetAttr() *VlanMemberAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateVlanMembersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reqs []*CreateVlanMemberRequest `protobuf:"bytes,1,rep,name=reqs,proto3" json:"reqs,omitempty"`
}

func (x *CreateVlanMembersRequest) Reset() {
	*x = CreateVlanMembersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVlanMembersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVlanMembersRequest) ProtoMessage() {}

func (x *CreateVlanMembersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVlanMembersRequest.ProtoReflect.Descriptor instead.
func (*CreateVlanMembersRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{16}
}

func (x *CreateVlanMembersRequest) GetReqs() []*CreateVlanMemberRequest {
	if x != nil {
		return x.Reqs
	}
	return nil
}

type CreateVlanMembersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resps []*CreateVlanMemberResponse `protobuf:"bytes,1,rep,name=resps,proto3" json:"resps,omitempty"`
}

func (x *CreateVlanMembersResponse) Reset() {
	*x = CreateVlanMembersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVlanMembersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVlanMembersResponse) ProtoMessage() {}

func (x *CreateVlanMembersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVlanMembersResponse.ProtoReflect.Descriptor instead.
func (*CreateVlanMembersResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{17}
}

func (x *CreateVlanMembersResponse) GetResps() []*CreateVlanMemberResponse {
	if x != nil {
		return x.Resps
	}
	return nil
}

type GetVlanStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CounterIds []VlanStat `protobuf:"varint,2,rep,packed,name=counter_ids,json=counterIds,proto3,enum=lemming.dataplane.sai.VlanStat" json:"counter_ids,omitempty"`
}

func (x *GetVlanStatsRequest) Reset() {
	*x = GetVlanStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVlanStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVlanStatsRequest) ProtoMessage() {}

func (x *GetVlanStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVlanStatsRequest.ProtoReflect.Descriptor instead.
func (*GetVlanStatsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{18}
}

func (x *GetVlanStatsRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetVlanStatsRequest) GetCounterIds() []VlanStat {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

type GetVlanStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values uint64 `protobuf:"varint,1,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *GetVlanStatsResponse) Reset() {
	*x = GetVlanStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVlanStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVlanStatsResponse) ProtoMessage() {}

func (x *GetVlanStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_vlan_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVlanStatsResponse.ProtoReflect.Descriptor instead.
func (*GetVlanStatsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_vlan_proto_rawDescGZIP(), []int{19}
}

func (x *GetVlanStatsResponse) GetValues() uint64 {
	if x != nil {
		return x.Values
	}
	return 0
}

var File_dataplane_standalone_proto_vlan_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_vlan_proto_rawDesc = []byte{
	0x0a, 0x25, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x6c, 0x61,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x27,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x11, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x06,
	0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x15, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x01,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0c, 0x73, 0x74, 0x70, 0x5f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x04, 0x48, 0x02, 0x52, 0x0b, 0x73, 0x74, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x05, 0x48, 0x03, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x74, 0x0a, 0x1a, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48,
	0x04, 0x52, 0x16, 0x69, 0x70, 0x76, 0x34, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x74, 0x0a, 0x1a,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x63, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x05, 0x52, 0x16, 0x69, 0x70, 0x76, 0x36, 0x4d, 0x63, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x57, 0x0a, 0x24, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6e, 0x6f,
	0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x06, 0x52, 0x1e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x4e, 0x6f, 0x6e, 0x49, 0x70, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x22, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x07, 0x52,
	0x1d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x63, 0x61, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x54, 0x0a, 0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x0a, 0x48, 0x08, 0x52, 0x1d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x70,
	0x76, 0x36, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x27, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48, 0x09,
	0x52, 0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x0c, 0x48, 0x0a, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x0b, 0x52,
	0x09, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x46,
	0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48, 0x0d, 0x52, 0x1e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1b, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c,
	0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x10, 0x48, 0x0e, 0x52, 0x18, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x24, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e,
	0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x11, 0x48, 0x0f, 0x52, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x1d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x12, 0x48, 0x10, 0x52, 0x1a, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x77, 0x0a, 0x1c, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x13, 0x48, 0x11, 0x52, 0x19, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48, 0x12, 0x52, 0x13, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x67,
	0x6d, 0x70, 0x5f, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x15, 0x48, 0x13,
	0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x67, 0x6d, 0x70, 0x53, 0x6e, 0x6f, 0x6f,
	0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x74, 0x61, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x16, 0x52, 0x09, 0x74, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x27, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x27, 0x0a, 0x25, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f,
	0x69, 0x70, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42,
	0x25, 0x0a, 0x23, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x63, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63,
	0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x25, 0x0a, 0x23, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x20, 0x0a, 0x1e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x1e, 0x0a, 0x1c,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x67, 0x6d, 0x70, 0x5f, 0x73, 0x6e, 0x6f,
	0x6f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x26, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9c, 0x11, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x03, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0c, 0x73, 0x74, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74,
	0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x02, 0x52, 0x0c, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x74, 0x0a, 0x1a,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x63, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x03, 0x52, 0x16, 0x69, 0x70, 0x76, 0x34, 0x4d, 0x63, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x74, 0x0a, 0x1a, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x04, 0x52, 0x16, 0x69,
	0x70, 0x76, 0x36, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x24, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x05, 0x52, 0x1e,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4e, 0x6f, 0x6e, 0x49, 0x70, 0x4d, 0x63, 0x61, 0x73,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x54, 0x0a, 0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x09, 0x48, 0x06, 0x52, 0x1d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x70,
	0x76, 0x34, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48, 0x07, 0x52, 0x1d, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a,
	0x27, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x0b, 0x48, 0x08, 0x52, 0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c,
	0x69, 0x6e, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x0d, 0x48, 0x0a, 0x52, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48, 0x0b, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x82, 0x01, 0x0a, 0x22,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48, 0x0c, 0x52, 0x1e, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x1b, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x10, 0x48, 0x0d, 0x52, 0x18, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x24, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x11, 0x48, 0x0e, 0x52, 0x20,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x1d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x12,
	0x48, 0x0f, 0x52, 0x1a, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x77, 0x0a, 0x1c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x13, 0x48, 0x10, 0x52, 0x19, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x15, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48,
	0x11, 0x52, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x67, 0x6d, 0x70, 0x5f, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x15, 0x48, 0x12, 0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x67,
	0x6d, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x74, 0x61, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x16, 0x52, 0x09, 0x74,
	0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x25, 0x0a, 0x23,
	0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x2a, 0x0a, 0x28, 0x5f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x63, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x67, 0x6d, 0x70,
	0x5f, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x6c,
	0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xa0, 0x02,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x22, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74,
	0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48,
	0x02, 0x52, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x28, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x2c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2b,
	0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x56,
	0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x11, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x75, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x5e, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x72, 0x65, 0x71, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x72, 0x65, 0x71, 0x73, 0x22, 0x62, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x70,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x72, 0x65, 0x73, 0x70, 0x73, 0x22,
	0x69, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2a, 0xfa, 0x06, 0x0a, 0x08, 0x56,
	0x6c, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4c, 0x41,
	0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x44, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x4c, 0x41,
	0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x05, 0x12, 0x28, 0x0a, 0x24, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55,
	0x50, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24,
	0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x32, 0x0a, 0x2e, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f,
	0x49, 0x50, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x56, 0x4c,
	0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55,
	0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x09, 0x12, 0x30, 0x0a, 0x2c,
	0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x55, 0x54,
	0x50, 0x55, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x35,
	0x0a, 0x31, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x4d, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x4c, 0x10, 0x0c,
	0x12, 0x18, 0x0a, 0x14, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x4c, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4c,
	0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x0e, 0x12, 0x30, 0x0a, 0x2c, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x0f, 0x12, 0x29, 0x0a, 0x25, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x10,
	0x12, 0x32, 0x0a, 0x2e, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x11, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x12, 0x12, 0x2a, 0x0a, 0x26, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x13, 0x12, 0x23, 0x0a,
	0x1f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x14, 0x12, 0x29, 0x0a, 0x25, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x5f, 0x53, 0x4e, 0x4f, 0x4f,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x15, 0x12, 0x18, 0x0a,
	0x14, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x16, 0x2a, 0x9d, 0x01, 0x0a, 0x0e, 0x56, 0x6c, 0x61, 0x6e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x4c,
	0x41, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x4c,
	0x41, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x42,
	0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12,
	0x26, 0x0a, 0x22, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x32, 0xa5, 0x09, 0x0a, 0x04, 0x56, 0x6c, 0x61, 0x6e,
	0x12, 0x63, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x28,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56,
	0x6c, 0x61, 0x6e, 0x12, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2e,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x75, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x75, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x56, 0x6c,
	0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x6c, 0x61,
	0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x53, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61,
	0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6c,
	0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x73, 0x61, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_vlan_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_vlan_proto_rawDescData = file_dataplane_standalone_proto_vlan_proto_rawDesc
)

func file_dataplane_standalone_proto_vlan_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_vlan_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_vlan_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_vlan_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_vlan_proto_rawDescData
}

var file_dataplane_standalone_proto_vlan_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dataplane_standalone_proto_vlan_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_dataplane_standalone_proto_vlan_proto_goTypes = []interface{}{
	(VlanAttr)(0),                          // 0: lemming.dataplane.sai.VlanAttr
	(VlanMemberAttr)(0),                    // 1: lemming.dataplane.sai.VlanMemberAttr
	(*CreateVlanRequest)(nil),              // 2: lemming.dataplane.sai.CreateVlanRequest
	(*CreateVlanResponse)(nil),             // 3: lemming.dataplane.sai.CreateVlanResponse
	(*RemoveVlanRequest)(nil),              // 4: lemming.dataplane.sai.RemoveVlanRequest
	(*RemoveVlanResponse)(nil),             // 5: lemming.dataplane.sai.RemoveVlanResponse
	(*SetVlanAttributeRequest)(nil),        // 6: lemming.dataplane.sai.SetVlanAttributeRequest
	(*SetVlanAttributeResponse)(nil),       // 7: lemming.dataplane.sai.SetVlanAttributeResponse
	(*GetVlanAttributeRequest)(nil),        // 8: lemming.dataplane.sai.GetVlanAttributeRequest
	(*GetVlanAttributeResponse)(nil),       // 9: lemming.dataplane.sai.GetVlanAttributeResponse
	(*CreateVlanMemberRequest)(nil),        // 10: lemming.dataplane.sai.CreateVlanMemberRequest
	(*CreateVlanMemberResponse)(nil),       // 11: lemming.dataplane.sai.CreateVlanMemberResponse
	(*RemoveVlanMemberRequest)(nil),        // 12: lemming.dataplane.sai.RemoveVlanMemberRequest
	(*RemoveVlanMemberResponse)(nil),       // 13: lemming.dataplane.sai.RemoveVlanMemberResponse
	(*SetVlanMemberAttributeRequest)(nil),  // 14: lemming.dataplane.sai.SetVlanMemberAttributeRequest
	(*SetVlanMemberAttributeResponse)(nil), // 15: lemming.dataplane.sai.SetVlanMemberAttributeResponse
	(*GetVlanMemberAttributeRequest)(nil),  // 16: lemming.dataplane.sai.GetVlanMemberAttributeRequest
	(*GetVlanMemberAttributeResponse)(nil), // 17: lemming.dataplane.sai.GetVlanMemberAttributeResponse
	(*CreateVlanMembersRequest)(nil),       // 18: lemming.dataplane.sai.CreateVlanMembersRequest
	(*CreateVlanMembersResponse)(nil),      // 19: lemming.dataplane.sai.CreateVlanMembersResponse
	(*GetVlanStatsRequest)(nil),            // 20: lemming.dataplane.sai.GetVlanStatsRequest
	(*GetVlanStatsResponse)(nil),           // 21: lemming.dataplane.sai.GetVlanStatsResponse
	(VlanMcastLookupKeyType)(0),            // 22: lemming.dataplane.sai.VlanMcastLookupKeyType
	(VlanFloodControlType)(0),              // 23: lemming.dataplane.sai.VlanFloodControlType
	(*VlanAttribute)(nil),                  // 24: lemming.dataplane.sai.VlanAttribute
	(VlanTaggingMode)(0),                   // 25: lemming.dataplane.sai.VlanTaggingMode
	(*VlanMemberAttribute)(nil),            // 26: lemming.dataplane.sai.VlanMemberAttribute
	(VlanStat)(0),                          // 27: lemming.dataplane.sai.VlanStat
}
var file_dataplane_standalone_proto_vlan_proto_depIdxs = []int32{
	22, // 0: lemming.dataplane.sai.CreateVlanRequest.ipv4_mcast_lookup_key_type:type_name -> lemming.dataplane.sai.VlanMcastLookupKeyType
	22, // 1: lemming.dataplane.sai.CreateVlanRequest.ipv6_mcast_lookup_key_type:type_name -> lemming.dataplane.sai.VlanMcastLookupKeyType
	23, // 2: lemming.dataplane.sai.CreateVlanRequest.unknown_unicast_flood_control_type:type_name -> lemming.dataplane.sai.VlanFloodControlType
	23, // 3: lemming.dataplane.sai.CreateVlanRequest.unknown_multicast_flood_control_type:type_name -> lemming.dataplane.sai.VlanFloodControlType
	23, // 4: lemming.dataplane.sai.CreateVlanRequest.broadcast_flood_control_type:type_name -> lemming.dataplane.sai.VlanFloodControlType
	22, // 5: lemming.dataplane.sai.SetVlanAttributeRequest.ipv4_mcast_lookup_key_type:type_name -> lemming.dataplane.sai.VlanMcastLookupKeyType
	22, // 6: lemming.dataplane.sai.SetVlanAttributeRequest.ipv6_mcast_lookup_key_type:type_name -> lemming.dataplane.sai.VlanMcastLookupKeyType
	23, // 7: lemming.dataplane.sai.SetVlanAttributeRequest.unknown_unicast_flood_control_type:type_name -> lemming.dataplane.sai.VlanFloodControlType
	23, // 8: lemming.dataplane.sai.SetVlanAttributeRequest.unknown_multicast_flood_control_type:type_name -> lemming.dataplane.sai.VlanFloodControlType
	23, // 9: lemming.dataplane.sai.SetVlanAttributeRequest.broadcast_flood_control_type:type_name -> lemming.dataplane.sai.VlanFloodControlType
	0,  // 10: lemming.dataplane.sai.GetVlanAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.VlanAttr
	24, // 11: lemming.dataplane.sai.GetVlanAttributeResponse.attr:type_name -> lemming.dataplane.sai.VlanAttribute
	25, // 12: lemming.dataplane.sai.CreateVlanMemberRequest.vlan_tagging_mode:type_name -> lemming.dataplane.sai.VlanTaggingMode
	25, // 13: lemming.dataplane.sai.SetVlanMemberAttributeRequest.vlan_tagging_mode:type_name -> lemming.dataplane.sai.VlanTaggingMode
	1,  // 14: lemming.dataplane.sai.GetVlanMemberAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.VlanMemberAttr
	26, // 15: lemming.dataplane.sai.GetVlanMemberAttributeResponse.attr:type_name -> lemming.dataplane.sai.VlanMemberAttribute
	10, // 16: lemming.dataplane.sai.CreateVlanMembersRequest.reqs:type_name -> lemming.dataplane.sai.CreateVlanMemberRequest
	11, // 17: lemming.dataplane.sai.CreateVlanMembersResponse.resps:type_name -> lemming.dataplane.sai.CreateVlanMemberResponse
	27, // 18: lemming.dataplane.sai.GetVlanStatsRequest.counter_ids:type_name -> lemming.dataplane.sai.VlanStat
	2,  // 19: lemming.dataplane.sai.Vlan.CreateVlan:input_type -> lemming.dataplane.sai.CreateVlanRequest
	4,  // 20: lemming.dataplane.sai.Vlan.RemoveVlan:input_type -> lemming.dataplane.sai.RemoveVlanRequest
	6,  // 21: lemming.dataplane.sai.Vlan.SetVlanAttribute:input_type -> lemming.dataplane.sai.SetVlanAttributeRequest
	8,  // 22: lemming.dataplane.sai.Vlan.GetVlanAttribute:input_type -> lemming.dataplane.sai.GetVlanAttributeRequest
	10, // 23: lemming.dataplane.sai.Vlan.CreateVlanMember:input_type -> lemming.dataplane.sai.CreateVlanMemberRequest
	12, // 24: lemming.dataplane.sai.Vlan.RemoveVlanMember:input_type -> lemming.dataplane.sai.RemoveVlanMemberRequest
	14, // 25: lemming.dataplane.sai.Vlan.SetVlanMemberAttribute:input_type -> lemming.dataplane.sai.SetVlanMemberAttributeRequest
	16, // 26: lemming.dataplane.sai.Vlan.GetVlanMemberAttribute:input_type -> lemming.dataplane.sai.GetVlanMemberAttributeRequest
	18, // 27: lemming.dataplane.sai.Vlan.CreateVlanMembers:input_type -> lemming.dataplane.sai.CreateVlanMembersRequest
	20, // 28: lemming.dataplane.sai.Vlan.GetVlanStats:input_type -> lemming.dataplane.sai.GetVlanStatsRequest
	3,  // 29: lemming.dataplane.sai.Vlan.CreateVlan:output_type -> lemming.dataplane.sai.CreateVlanResponse
	5,  // 30: lemming.dataplane.sai.Vlan.RemoveVlan:output_type -> lemming.dataplane.sai.RemoveVlanResponse
	7,  // 31: lemming.dataplane.sai.Vlan.SetVlanAttribute:output_type -> lemming.dataplane.sai.SetVlanAttributeResponse
	9,  // 32: lemming.dataplane.sai.Vlan.GetVlanAttribute:output_type -> lemming.dataplane.sai.GetVlanAttributeResponse
	11, // 33: lemming.dataplane.sai.Vlan.CreateVlanMember:output_type -> lemming.dataplane.sai.CreateVlanMemberResponse
	13, // 34: lemming.dataplane.sai.Vlan.RemoveVlanMember:output_type -> lemming.dataplane.sai.RemoveVlanMemberResponse
	15, // 35: lemming.dataplane.sai.Vlan.SetVlanMemberAttribute:output_type -> lemming.dataplane.sai.SetVlanMemberAttributeResponse
	17, // 36: lemming.dataplane.sai.Vlan.GetVlanMemberAttribute:output_type -> lemming.dataplane.sai.GetVlanMemberAttributeResponse
	19, // 37: lemming.dataplane.sai.Vlan.CreateVlanMembers:output_type -> lemming.dataplane.sai.CreateVlanMembersResponse
	21, // 38: lemming.dataplane.sai.Vlan.GetVlanStats:output_type -> lemming.dataplane.sai.GetVlanStatsResponse
	29, // [29:39] is the sub-list for method output_type
	19, // [19:29] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_vlan_proto_init() }
func file_dataplane_standalone_proto_vlan_proto_init() {
	if File_dataplane_standalone_proto_vlan_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_vlan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveVlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveVlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVlanAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVlanAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVlanAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVlanAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVlanMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVlanMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveVlanMemberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveVlanMemberResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVlanMemberAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVlanMemberAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVlanMemberAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVlanMemberAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVlanMembersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVlanMembersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVlanStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_vlan_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVlanStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_vlan_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_vlan_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_vlan_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_vlan_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_vlan_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_vlan_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_vlan_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_vlan_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_vlan_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_vlan_proto = out.File
	file_dataplane_standalone_proto_vlan_proto_rawDesc = nil
	file_dataplane_standalone_proto_vlan_proto_goTypes = nil
	file_dataplane_standalone_proto_vlan_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VlanClient is the client API for Vlan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VlanClient interface {
	CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*CreateVlanResponse, error)
	RemoveVlan(ctx context.Context, in *RemoveVlanRequest, opts ...grpc.CallOption) (*RemoveVlanResponse, error)
	SetVlanAttribute(ctx context.Context, in *SetVlanAttributeRequest, opts ...grpc.CallOption) (*SetVlanAttributeResponse, error)
	GetVlanAttribute(ctx context.Context, in *GetVlanAttributeRequest, opts ...grpc.CallOption) (*GetVlanAttributeResponse, error)
	CreateVlanMember(ctx context.Context, in *CreateVlanMemberRequest, opts ...grpc.CallOption) (*CreateVlanMemberResponse, error)
	RemoveVlanMember(ctx context.Context, in *RemoveVlanMemberRequest, opts ...grpc.CallOption) (*RemoveVlanMemberResponse, error)
	SetVlanMemberAttribute(ctx context.Context, in *SetVlanMemberAttributeRequest, opts ...grpc.CallOption) (*SetVlanMemberAttributeResponse, error)
	GetVlanMemberAttribute(ctx context.Context, in *GetVlanMemberAttributeRequest, opts ...grpc.CallOption) (*GetVlanMemberAttributeResponse, error)
	CreateVlanMembers(ctx context.Context, in *CreateVlanMembersRequest, opts ...grpc.CallOption) (*CreateVlanMembersResponse, error)
	GetVlanStats(ctx context.Context, in *GetVlanStatsRequest, opts ...grpc.CallOption) (*GetVlanStatsResponse, error)
}

type vlanClient struct {
	cc grpc.ClientConnInterface
}

func NewVlanClient(cc grpc.ClientConnInterface) VlanClient {
	return &vlanClient{cc}
}

func (c *vlanClient) CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*CreateVlanResponse, error) {
	out := new(CreateVlanResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Vlan/CreateVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) RemoveVlan(ctx context.Context, in *RemoveVlanRequest, opts ...grpc.CallOption) (*RemoveVlanResponse, error) {
	out := new(RemoveVlanResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Vlan/RemoveVlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) SetVlanAttribute(ctx context.Context, in *SetVlanAttributeRequest, opts ...grpc.CallOption) (*SetVlanAttributeResponse, error) {
	out := new(SetVlanAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Vlan/SetVlanAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) GetVlanAttribute(ctx context.Context, in *GetVlanAttributeRequest, opts ...grpc.CallOption) (*GetVlanAttributeResponse, error) {
	out := new(GetVlanAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Vlan/GetVlanAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) CreateVlanMember(ctx context.Context, in *CreateVlanMemberRequest, opts ...grpc.CallOption) (*CreateVlanMemberResponse, error) {
	out := new(CreateVlanMemberResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Vlan/CreateVlanMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) RemoveVlanMember(ctx context.Context, in *RemoveVlanMemberRequest, opts ...grpc.CallOption) (*RemoveVlanMemberResponse, error) {
	out := new(RemoveVlanMemberResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Vlan/RemoveVlanMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) SetVlanMemberAttribute(ctx context.Context, in *SetVlanMemberAttributeRequest, opts ...grpc.CallOption) (*SetVlanMemberAttributeResponse, error) {
	out := new(SetVlanMemberAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Vlan/SetVlanMemberAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) GetVlanMemberAttribute(ctx context.Context, in *GetVlanMemberAttributeRequest, opts ...grpc.CallOption) (*GetVlanMemberAttributeResponse, error) {
	out := new(GetVlanMemberAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Vlan/GetVlanMemberAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) CreateVlanMembers(ctx context.Context, in *CreateVlanMembersRequest, opts ...grpc.CallOption) (*CreateVlanMembersResponse, error) {
	out := new(CreateVlanMembersResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Vlan/CreateVlanMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) GetVlanStats(ctx context.Context, in *GetVlanStatsRequest, opts ...grpc.CallOption) (*GetVlanStatsResponse, error) {
	out := new(GetVlanStatsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Vlan/GetVlanStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VlanServer is the server API for Vlan service.
type VlanServer interface {
	CreateVlan(context.Context, *CreateVlanRequest) (*CreateVlanResponse, error)
	RemoveVlan(context.Context, *RemoveVlanRequest) (*RemoveVlanResponse, error)
	SetVlanAttribute(context.Context, *SetVlanAttributeRequest) (*SetVlanAttributeResponse, error)
	GetVlanAttribute(context.Context, *GetVlanAttributeRequest) (*GetVlanAttributeResponse, error)
	CreateVlanMember(context.Context, *CreateVlanMemberRequest) (*CreateVlanMemberResponse, error)
	RemoveVlanMember(context.Context, *RemoveVlanMemberRequest) (*RemoveVlanMemberResponse, error)
	SetVlanMemberAttribute(context.Context, *SetVlanMemberAttributeRequest) (*SetVlanMemberAttributeResponse, error)
	GetVlanMemberAttribute(context.Context, *GetVlanMemberAttributeRequest) (*GetVlanMemberAttributeResponse, error)
	CreateVlanMembers(context.Context, *CreateVlanMembersRequest) (*CreateVlanMembersResponse, error)
	GetVlanStats(context.Context, *GetVlanStatsRequest) (*GetVlanStatsResponse, error)
}

// UnimplementedVlanServer can be embedded to have forward compatible implementations.
type UnimplementedVlanServer struct {
}

func (*UnimplementedVlanServer) CreateVlan(context.Context, *CreateVlanRequest) (*CreateVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVlan not implemented")
}
func (*UnimplementedVlanServer) RemoveVlan(context.Context, *RemoveVlanRequest) (*RemoveVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVlan not implemented")
}
func (*UnimplementedVlanServer) SetVlanAttribute(context.Context, *SetVlanAttributeRequest) (*SetVlanAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVlanAttribute not implemented")
}
func (*UnimplementedVlanServer) GetVlanAttribute(context.Context, *GetVlanAttributeRequest) (*GetVlanAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVlanAttribute not implemented")
}
func (*UnimplementedVlanServer) CreateVlanMember(context.Context, *CreateVlanMemberRequest) (*CreateVlanMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVlanMember not implemented")
}
func (*UnimplementedVlanServer) RemoveVlanMember(context.Context, *RemoveVlanMemberRequest) (*RemoveVlanMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVlanMember not implemented")
}
func (*UnimplementedVlanServer) SetVlanMemberAttribute(context.Context, *SetVlanMemberAttributeRequest) (*SetVlanMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVlanMemberAttribute not implemented")
}
func (*UnimplementedVlanServer) GetVlanMemberAttribute(context.Context, *GetVlanMemberAttributeRequest) (*GetVlanMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVlanMemberAttribute not implemented")
}
func (*UnimplementedVlanServer) CreateVlanMembers(context.Context, *CreateVlanMembersRequest) (*CreateVlanMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVlanMembers not implemented")
}
func (*UnimplementedVlanServer) GetVlanStats(context.Context, *GetVlanStatsRequest) (*GetVlanStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVlanStats not implemented")
}

func RegisterVlanServer(s *grpc.Server, srv VlanServer) {
	s.RegisterService(&_Vlan_serviceDesc, srv)
}

func _Vlan_CreateVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).CreateVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Vlan/CreateVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).CreateVlan(ctx, req.(*CreateVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_RemoveVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).RemoveVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Vlan/RemoveVlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).RemoveVlan(ctx, req.(*RemoveVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_SetVlanAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVlanAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).SetVlanAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Vlan/SetVlanAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).SetVlanAttribute(ctx, req.(*SetVlanAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_GetVlanAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVlanAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).GetVlanAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Vlan/GetVlanAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).GetVlanAttribute(ctx, req.(*GetVlanAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_CreateVlanMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVlanMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).CreateVlanMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Vlan/CreateVlanMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).CreateVlanMember(ctx, req.(*CreateVlanMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_RemoveVlanMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVlanMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).RemoveVlanMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Vlan/RemoveVlanMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).RemoveVlanMember(ctx, req.(*RemoveVlanMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_SetVlanMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVlanMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).SetVlanMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Vlan/SetVlanMemberAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).SetVlanMemberAttribute(ctx, req.(*SetVlanMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_GetVlanMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVlanMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).GetVlanMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Vlan/GetVlanMemberAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).GetVlanMemberAttribute(ctx, req.(*GetVlanMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_CreateVlanMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVlanMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).CreateVlanMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Vlan/CreateVlanMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).CreateVlanMembers(ctx, req.(*CreateVlanMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_GetVlanStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVlanStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).GetVlanStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Vlan/GetVlanStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).GetVlanStats(ctx, req.(*GetVlanStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vlan_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Vlan",
	HandlerType: (*VlanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVlan",
			Handler:    _Vlan_CreateVlan_Handler,
		},
		{
			MethodName: "RemoveVlan",
			Handler:    _Vlan_RemoveVlan_Handler,
		},
		{
			MethodName: "SetVlanAttribute",
			Handler:    _Vlan_SetVlanAttribute_Handler,
		},
		{
			MethodName: "GetVlanAttribute",
			Handler:    _Vlan_GetVlanAttribute_Handler,
		},
		{
			MethodName: "CreateVlanMember",
			Handler:    _Vlan_CreateVlanMember_Handler,
		},
		{
			MethodName: "RemoveVlanMember",
			Handler:    _Vlan_RemoveVlanMember_Handler,
		},
		{
			MethodName: "SetVlanMemberAttribute",
			Handler:    _Vlan_SetVlanMemberAttribute_Handler,
		},
		{
			MethodName: "GetVlanMemberAttribute",
			Handler:    _Vlan_GetVlanMemberAttribute_Handler,
		},
		{
			MethodName: "CreateVlanMembers",
			Handler:    _Vlan_CreateVlanMembers_Handler,
		},
		{
			MethodName: "GetVlanStats",
			Handler:    _Vlan_GetVlanStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/vlan.proto",
}
