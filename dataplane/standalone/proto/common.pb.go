// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/common.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AclActionType int32

const (
	AclActionType_ACL_ACTION_TYPE_UNSPECIFIED                  AclActionType = 0
	AclActionType_ACL_ACTION_TYPE_REDIRECT                     AclActionType = 1
	AclActionType_ACL_ACTION_TYPE_ENDPOINT_IP                  AclActionType = 2
	AclActionType_ACL_ACTION_TYPE_REDIRECT_LIST                AclActionType = 3
	AclActionType_ACL_ACTION_TYPE_PACKET_ACTION                AclActionType = 4
	AclActionType_ACL_ACTION_TYPE_FLOOD                        AclActionType = 5
	AclActionType_ACL_ACTION_TYPE_COUNTER                      AclActionType = 6
	AclActionType_ACL_ACTION_TYPE_MIRROR_INGRESS               AclActionType = 7
	AclActionType_ACL_ACTION_TYPE_MIRROR_EGRESS                AclActionType = 8
	AclActionType_ACL_ACTION_TYPE_SET_POLICER                  AclActionType = 9
	AclActionType_ACL_ACTION_TYPE_DECREMENT_TTL                AclActionType = 10
	AclActionType_ACL_ACTION_TYPE_SET_TC                       AclActionType = 11
	AclActionType_ACL_ACTION_TYPE_SET_PACKET_COLOR             AclActionType = 12
	AclActionType_ACL_ACTION_TYPE_SET_INNER_VLAN_ID            AclActionType = 13
	AclActionType_ACL_ACTION_TYPE_SET_INNER_VLAN_PRI           AclActionType = 14
	AclActionType_ACL_ACTION_TYPE_SET_OUTER_VLAN_ID            AclActionType = 15
	AclActionType_ACL_ACTION_TYPE_SET_OUTER_VLAN_PRI           AclActionType = 16
	AclActionType_ACL_ACTION_TYPE_ADD_VLAN_ID                  AclActionType = 17
	AclActionType_ACL_ACTION_TYPE_ADD_VLAN_PRI                 AclActionType = 18
	AclActionType_ACL_ACTION_TYPE_SET_SRC_MAC                  AclActionType = 19
	AclActionType_ACL_ACTION_TYPE_SET_DST_MAC                  AclActionType = 20
	AclActionType_ACL_ACTION_TYPE_SET_SRC_IP                   AclActionType = 21
	AclActionType_ACL_ACTION_TYPE_SET_DST_IP                   AclActionType = 22
	AclActionType_ACL_ACTION_TYPE_SET_SRC_IPV6                 AclActionType = 23
	AclActionType_ACL_ACTION_TYPE_SET_DST_IPV6                 AclActionType = 24
	AclActionType_ACL_ACTION_TYPE_SET_DSCP                     AclActionType = 25
	AclActionType_ACL_ACTION_TYPE_SET_ECN                      AclActionType = 26
	AclActionType_ACL_ACTION_TYPE_SET_L4_SRC_PORT              AclActionType = 27
	AclActionType_ACL_ACTION_TYPE_SET_L4_DST_PORT              AclActionType = 28
	AclActionType_ACL_ACTION_TYPE_INGRESS_SAMPLEPACKET_ENABLE  AclActionType = 29
	AclActionType_ACL_ACTION_TYPE_EGRESS_SAMPLEPACKET_ENABLE   AclActionType = 30
	AclActionType_ACL_ACTION_TYPE_SET_ACL_META_DATA            AclActionType = 31
	AclActionType_ACL_ACTION_TYPE_EGRESS_BLOCK_PORT_LIST       AclActionType = 32
	AclActionType_ACL_ACTION_TYPE_SET_USER_TRAP_ID             AclActionType = 33
	AclActionType_ACL_ACTION_TYPE_SET_DO_NOT_LEARN             AclActionType = 34
	AclActionType_ACL_ACTION_TYPE_ACL_DTEL_FLOW_OP             AclActionType = 35
	AclActionType_ACL_ACTION_TYPE_DTEL_INT_SESSION             AclActionType = 36
	AclActionType_ACL_ACTION_TYPE_DTEL_DROP_REPORT_ENABLE      AclActionType = 37
	AclActionType_ACL_ACTION_TYPE_DTEL_TAIL_DROP_REPORT_ENABLE AclActionType = 38
	AclActionType_ACL_ACTION_TYPE_DTEL_FLOW_SAMPLE_PERCENT     AclActionType = 39
	AclActionType_ACL_ACTION_TYPE_DTEL_REPORT_ALL_PACKETS      AclActionType = 40
	AclActionType_ACL_ACTION_TYPE_NO_NAT                       AclActionType = 41
	AclActionType_ACL_ACTION_TYPE_INT_INSERT                   AclActionType = 42
	AclActionType_ACL_ACTION_TYPE_INT_DELETE                   AclActionType = 43
	AclActionType_ACL_ACTION_TYPE_INT_REPORT_FLOW              AclActionType = 44
	AclActionType_ACL_ACTION_TYPE_INT_REPORT_DROPS             AclActionType = 45
	AclActionType_ACL_ACTION_TYPE_INT_REPORT_TAIL_DROPS        AclActionType = 46
	AclActionType_ACL_ACTION_TYPE_TAM_INT_OBJECT               AclActionType = 47
	AclActionType_ACL_ACTION_TYPE_SET_ISOLATION_GROUP          AclActionType = 48
	AclActionType_ACL_ACTION_TYPE_MACSEC_FLOW                  AclActionType = 49
	AclActionType_ACL_ACTION_TYPE_SET_LAG_HASH_ID              AclActionType = 50
	AclActionType_ACL_ACTION_TYPE_SET_ECMP_HASH_ID             AclActionType = 51
	AclActionType_ACL_ACTION_TYPE_SET_VRF                      AclActionType = 52
	AclActionType_ACL_ACTION_TYPE_SET_FORWARDING_CLASS         AclActionType = 53
)

// Enum value maps for AclActionType.
var (
	AclActionType_name = map[int32]string{
		0:  "ACL_ACTION_TYPE_UNSPECIFIED",
		1:  "ACL_ACTION_TYPE_REDIRECT",
		2:  "ACL_ACTION_TYPE_ENDPOINT_IP",
		3:  "ACL_ACTION_TYPE_REDIRECT_LIST",
		4:  "ACL_ACTION_TYPE_PACKET_ACTION",
		5:  "ACL_ACTION_TYPE_FLOOD",
		6:  "ACL_ACTION_TYPE_COUNTER",
		7:  "ACL_ACTION_TYPE_MIRROR_INGRESS",
		8:  "ACL_ACTION_TYPE_MIRROR_EGRESS",
		9:  "ACL_ACTION_TYPE_SET_POLICER",
		10: "ACL_ACTION_TYPE_DECREMENT_TTL",
		11: "ACL_ACTION_TYPE_SET_TC",
		12: "ACL_ACTION_TYPE_SET_PACKET_COLOR",
		13: "ACL_ACTION_TYPE_SET_INNER_VLAN_ID",
		14: "ACL_ACTION_TYPE_SET_INNER_VLAN_PRI",
		15: "ACL_ACTION_TYPE_SET_OUTER_VLAN_ID",
		16: "ACL_ACTION_TYPE_SET_OUTER_VLAN_PRI",
		17: "ACL_ACTION_TYPE_ADD_VLAN_ID",
		18: "ACL_ACTION_TYPE_ADD_VLAN_PRI",
		19: "ACL_ACTION_TYPE_SET_SRC_MAC",
		20: "ACL_ACTION_TYPE_SET_DST_MAC",
		21: "ACL_ACTION_TYPE_SET_SRC_IP",
		22: "ACL_ACTION_TYPE_SET_DST_IP",
		23: "ACL_ACTION_TYPE_SET_SRC_IPV6",
		24: "ACL_ACTION_TYPE_SET_DST_IPV6",
		25: "ACL_ACTION_TYPE_SET_DSCP",
		26: "ACL_ACTION_TYPE_SET_ECN",
		27: "ACL_ACTION_TYPE_SET_L4_SRC_PORT",
		28: "ACL_ACTION_TYPE_SET_L4_DST_PORT",
		29: "ACL_ACTION_TYPE_INGRESS_SAMPLEPACKET_ENABLE",
		30: "ACL_ACTION_TYPE_EGRESS_SAMPLEPACKET_ENABLE",
		31: "ACL_ACTION_TYPE_SET_ACL_META_DATA",
		32: "ACL_ACTION_TYPE_EGRESS_BLOCK_PORT_LIST",
		33: "ACL_ACTION_TYPE_SET_USER_TRAP_ID",
		34: "ACL_ACTION_TYPE_SET_DO_NOT_LEARN",
		35: "ACL_ACTION_TYPE_ACL_DTEL_FLOW_OP",
		36: "ACL_ACTION_TYPE_DTEL_INT_SESSION",
		37: "ACL_ACTION_TYPE_DTEL_DROP_REPORT_ENABLE",
		38: "ACL_ACTION_TYPE_DTEL_TAIL_DROP_REPORT_ENABLE",
		39: "ACL_ACTION_TYPE_DTEL_FLOW_SAMPLE_PERCENT",
		40: "ACL_ACTION_TYPE_DTEL_REPORT_ALL_PACKETS",
		41: "ACL_ACTION_TYPE_NO_NAT",
		42: "ACL_ACTION_TYPE_INT_INSERT",
		43: "ACL_ACTION_TYPE_INT_DELETE",
		44: "ACL_ACTION_TYPE_INT_REPORT_FLOW",
		45: "ACL_ACTION_TYPE_INT_REPORT_DROPS",
		46: "ACL_ACTION_TYPE_INT_REPORT_TAIL_DROPS",
		47: "ACL_ACTION_TYPE_TAM_INT_OBJECT",
		48: "ACL_ACTION_TYPE_SET_ISOLATION_GROUP",
		49: "ACL_ACTION_TYPE_MACSEC_FLOW",
		50: "ACL_ACTION_TYPE_SET_LAG_HASH_ID",
		51: "ACL_ACTION_TYPE_SET_ECMP_HASH_ID",
		52: "ACL_ACTION_TYPE_SET_VRF",
		53: "ACL_ACTION_TYPE_SET_FORWARDING_CLASS",
	}
	AclActionType_value = map[string]int32{
		"ACL_ACTION_TYPE_UNSPECIFIED":                  0,
		"ACL_ACTION_TYPE_REDIRECT":                     1,
		"ACL_ACTION_TYPE_ENDPOINT_IP":                  2,
		"ACL_ACTION_TYPE_REDIRECT_LIST":                3,
		"ACL_ACTION_TYPE_PACKET_ACTION":                4,
		"ACL_ACTION_TYPE_FLOOD":                        5,
		"ACL_ACTION_TYPE_COUNTER":                      6,
		"ACL_ACTION_TYPE_MIRROR_INGRESS":               7,
		"ACL_ACTION_TYPE_MIRROR_EGRESS":                8,
		"ACL_ACTION_TYPE_SET_POLICER":                  9,
		"ACL_ACTION_TYPE_DECREMENT_TTL":                10,
		"ACL_ACTION_TYPE_SET_TC":                       11,
		"ACL_ACTION_TYPE_SET_PACKET_COLOR":             12,
		"ACL_ACTION_TYPE_SET_INNER_VLAN_ID":            13,
		"ACL_ACTION_TYPE_SET_INNER_VLAN_PRI":           14,
		"ACL_ACTION_TYPE_SET_OUTER_VLAN_ID":            15,
		"ACL_ACTION_TYPE_SET_OUTER_VLAN_PRI":           16,
		"ACL_ACTION_TYPE_ADD_VLAN_ID":                  17,
		"ACL_ACTION_TYPE_ADD_VLAN_PRI":                 18,
		"ACL_ACTION_TYPE_SET_SRC_MAC":                  19,
		"ACL_ACTION_TYPE_SET_DST_MAC":                  20,
		"ACL_ACTION_TYPE_SET_SRC_IP":                   21,
		"ACL_ACTION_TYPE_SET_DST_IP":                   22,
		"ACL_ACTION_TYPE_SET_SRC_IPV6":                 23,
		"ACL_ACTION_TYPE_SET_DST_IPV6":                 24,
		"ACL_ACTION_TYPE_SET_DSCP":                     25,
		"ACL_ACTION_TYPE_SET_ECN":                      26,
		"ACL_ACTION_TYPE_SET_L4_SRC_PORT":              27,
		"ACL_ACTION_TYPE_SET_L4_DST_PORT":              28,
		"ACL_ACTION_TYPE_INGRESS_SAMPLEPACKET_ENABLE":  29,
		"ACL_ACTION_TYPE_EGRESS_SAMPLEPACKET_ENABLE":   30,
		"ACL_ACTION_TYPE_SET_ACL_META_DATA":            31,
		"ACL_ACTION_TYPE_EGRESS_BLOCK_PORT_LIST":       32,
		"ACL_ACTION_TYPE_SET_USER_TRAP_ID":             33,
		"ACL_ACTION_TYPE_SET_DO_NOT_LEARN":             34,
		"ACL_ACTION_TYPE_ACL_DTEL_FLOW_OP":             35,
		"ACL_ACTION_TYPE_DTEL_INT_SESSION":             36,
		"ACL_ACTION_TYPE_DTEL_DROP_REPORT_ENABLE":      37,
		"ACL_ACTION_TYPE_DTEL_TAIL_DROP_REPORT_ENABLE": 38,
		"ACL_ACTION_TYPE_DTEL_FLOW_SAMPLE_PERCENT":     39,
		"ACL_ACTION_TYPE_DTEL_REPORT_ALL_PACKETS":      40,
		"ACL_ACTION_TYPE_NO_NAT":                       41,
		"ACL_ACTION_TYPE_INT_INSERT":                   42,
		"ACL_ACTION_TYPE_INT_DELETE":                   43,
		"ACL_ACTION_TYPE_INT_REPORT_FLOW":              44,
		"ACL_ACTION_TYPE_INT_REPORT_DROPS":             45,
		"ACL_ACTION_TYPE_INT_REPORT_TAIL_DROPS":        46,
		"ACL_ACTION_TYPE_TAM_INT_OBJECT":               47,
		"ACL_ACTION_TYPE_SET_ISOLATION_GROUP":          48,
		"ACL_ACTION_TYPE_MACSEC_FLOW":                  49,
		"ACL_ACTION_TYPE_SET_LAG_HASH_ID":              50,
		"ACL_ACTION_TYPE_SET_ECMP_HASH_ID":             51,
		"ACL_ACTION_TYPE_SET_VRF":                      52,
		"ACL_ACTION_TYPE_SET_FORWARDING_CLASS":         53,
	}
)

func (x AclActionType) Enum() *AclActionType {
	p := new(AclActionType)
	*p = x
	return p
}

func (x AclActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[0].Descriptor()
}

func (AclActionType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[0]
}

func (x AclActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclActionType.Descriptor instead.
func (AclActionType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{0}
}

type AclBindPointType int32

const (
	AclBindPointType_ACL_BIND_POINT_TYPE_UNSPECIFIED      AclBindPointType = 0
	AclBindPointType_ACL_BIND_POINT_TYPE_PORT             AclBindPointType = 1
	AclBindPointType_ACL_BIND_POINT_TYPE_LAG              AclBindPointType = 2
	AclBindPointType_ACL_BIND_POINT_TYPE_VLAN             AclBindPointType = 3
	AclBindPointType_ACL_BIND_POINT_TYPE_ROUTER_INTERFACE AclBindPointType = 4
	AclBindPointType_ACL_BIND_POINT_TYPE_ROUTER_INTF      AclBindPointType = 5
	AclBindPointType_ACL_BIND_POINT_TYPE_SWITCH           AclBindPointType = 6
)

// Enum value maps for AclBindPointType.
var (
	AclBindPointType_name = map[int32]string{
		0: "ACL_BIND_POINT_TYPE_UNSPECIFIED",
		1: "ACL_BIND_POINT_TYPE_PORT",
		2: "ACL_BIND_POINT_TYPE_LAG",
		3: "ACL_BIND_POINT_TYPE_VLAN",
		4: "ACL_BIND_POINT_TYPE_ROUTER_INTERFACE",
		5: "ACL_BIND_POINT_TYPE_ROUTER_INTF",
		6: "ACL_BIND_POINT_TYPE_SWITCH",
	}
	AclBindPointType_value = map[string]int32{
		"ACL_BIND_POINT_TYPE_UNSPECIFIED":      0,
		"ACL_BIND_POINT_TYPE_PORT":             1,
		"ACL_BIND_POINT_TYPE_LAG":              2,
		"ACL_BIND_POINT_TYPE_VLAN":             3,
		"ACL_BIND_POINT_TYPE_ROUTER_INTERFACE": 4,
		"ACL_BIND_POINT_TYPE_ROUTER_INTF":      5,
		"ACL_BIND_POINT_TYPE_SWITCH":           6,
	}
)

func (x AclBindPointType) Enum() *AclBindPointType {
	p := new(AclBindPointType)
	*p = x
	return p
}

func (x AclBindPointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclBindPointType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[1].Descriptor()
}

func (AclBindPointType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[1]
}

func (x AclBindPointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclBindPointType.Descriptor instead.
func (AclBindPointType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{1}
}

type AclDtelFlowOp int32

const (
	AclDtelFlowOp_ACL_DTEL_FLOW_OP_UNSPECIFIED AclDtelFlowOp = 0
	AclDtelFlowOp_ACL_DTEL_FLOW_OP_NOP         AclDtelFlowOp = 1
	AclDtelFlowOp_ACL_DTEL_FLOW_OP_INT         AclDtelFlowOp = 2
	AclDtelFlowOp_ACL_DTEL_FLOW_OP_IOAM        AclDtelFlowOp = 3
	AclDtelFlowOp_ACL_DTEL_FLOW_OP_POSTCARD    AclDtelFlowOp = 4
)

// Enum value maps for AclDtelFlowOp.
var (
	AclDtelFlowOp_name = map[int32]string{
		0: "ACL_DTEL_FLOW_OP_UNSPECIFIED",
		1: "ACL_DTEL_FLOW_OP_NOP",
		2: "ACL_DTEL_FLOW_OP_INT",
		3: "ACL_DTEL_FLOW_OP_IOAM",
		4: "ACL_DTEL_FLOW_OP_POSTCARD",
	}
	AclDtelFlowOp_value = map[string]int32{
		"ACL_DTEL_FLOW_OP_UNSPECIFIED": 0,
		"ACL_DTEL_FLOW_OP_NOP":         1,
		"ACL_DTEL_FLOW_OP_INT":         2,
		"ACL_DTEL_FLOW_OP_IOAM":        3,
		"ACL_DTEL_FLOW_OP_POSTCARD":    4,
	}
)

func (x AclDtelFlowOp) Enum() *AclDtelFlowOp {
	p := new(AclDtelFlowOp)
	*p = x
	return p
}

func (x AclDtelFlowOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclDtelFlowOp) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[2].Descriptor()
}

func (AclDtelFlowOp) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[2]
}

func (x AclDtelFlowOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclDtelFlowOp.Descriptor instead.
func (AclDtelFlowOp) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{2}
}

type AclIpFrag int32

const (
	AclIpFrag_ACL_IP_FRAG_UNSPECIFIED      AclIpFrag = 0
	AclIpFrag_ACL_IP_FRAG_ANY              AclIpFrag = 1
	AclIpFrag_ACL_IP_FRAG_NON_FRAG         AclIpFrag = 2
	AclIpFrag_ACL_IP_FRAG_NON_FRAG_OR_HEAD AclIpFrag = 3
	AclIpFrag_ACL_IP_FRAG_HEAD             AclIpFrag = 4
	AclIpFrag_ACL_IP_FRAG_NON_HEAD         AclIpFrag = 5
)

// Enum value maps for AclIpFrag.
var (
	AclIpFrag_name = map[int32]string{
		0: "ACL_IP_FRAG_UNSPECIFIED",
		1: "ACL_IP_FRAG_ANY",
		2: "ACL_IP_FRAG_NON_FRAG",
		3: "ACL_IP_FRAG_NON_FRAG_OR_HEAD",
		4: "ACL_IP_FRAG_HEAD",
		5: "ACL_IP_FRAG_NON_HEAD",
	}
	AclIpFrag_value = map[string]int32{
		"ACL_IP_FRAG_UNSPECIFIED":      0,
		"ACL_IP_FRAG_ANY":              1,
		"ACL_IP_FRAG_NON_FRAG":         2,
		"ACL_IP_FRAG_NON_FRAG_OR_HEAD": 3,
		"ACL_IP_FRAG_HEAD":             4,
		"ACL_IP_FRAG_NON_HEAD":         5,
	}
)

func (x AclIpFrag) Enum() *AclIpFrag {
	p := new(AclIpFrag)
	*p = x
	return p
}

func (x AclIpFrag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclIpFrag) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[3].Descriptor()
}

func (AclIpFrag) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[3]
}

func (x AclIpFrag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclIpFrag.Descriptor instead.
func (AclIpFrag) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{3}
}

type AclIpType int32

const (
	AclIpType_ACL_IP_TYPE_UNSPECIFIED AclIpType = 0
	AclIpType_ACL_IP_TYPE_ANY         AclIpType = 1
	AclIpType_ACL_IP_TYPE_IP          AclIpType = 2
	AclIpType_ACL_IP_TYPE_NON_IP      AclIpType = 3
	AclIpType_ACL_IP_TYPE_IPV4ANY     AclIpType = 4
	AclIpType_ACL_IP_TYPE_NON_IPV4    AclIpType = 5
	AclIpType_ACL_IP_TYPE_IPV6ANY     AclIpType = 6
	AclIpType_ACL_IP_TYPE_NON_IPV6    AclIpType = 7
	AclIpType_ACL_IP_TYPE_ARP         AclIpType = 8
	AclIpType_ACL_IP_TYPE_ARP_REQUEST AclIpType = 9
	AclIpType_ACL_IP_TYPE_ARP_REPLY   AclIpType = 10
)

// Enum value maps for AclIpType.
var (
	AclIpType_name = map[int32]string{
		0:  "ACL_IP_TYPE_UNSPECIFIED",
		1:  "ACL_IP_TYPE_ANY",
		2:  "ACL_IP_TYPE_IP",
		3:  "ACL_IP_TYPE_NON_IP",
		4:  "ACL_IP_TYPE_IPV4ANY",
		5:  "ACL_IP_TYPE_NON_IPV4",
		6:  "ACL_IP_TYPE_IPV6ANY",
		7:  "ACL_IP_TYPE_NON_IPV6",
		8:  "ACL_IP_TYPE_ARP",
		9:  "ACL_IP_TYPE_ARP_REQUEST",
		10: "ACL_IP_TYPE_ARP_REPLY",
	}
	AclIpType_value = map[string]int32{
		"ACL_IP_TYPE_UNSPECIFIED": 0,
		"ACL_IP_TYPE_ANY":         1,
		"ACL_IP_TYPE_IP":          2,
		"ACL_IP_TYPE_NON_IP":      3,
		"ACL_IP_TYPE_IPV4ANY":     4,
		"ACL_IP_TYPE_NON_IPV4":    5,
		"ACL_IP_TYPE_IPV6ANY":     6,
		"ACL_IP_TYPE_NON_IPV6":    7,
		"ACL_IP_TYPE_ARP":         8,
		"ACL_IP_TYPE_ARP_REQUEST": 9,
		"ACL_IP_TYPE_ARP_REPLY":   10,
	}
)

func (x AclIpType) Enum() *AclIpType {
	p := new(AclIpType)
	*p = x
	return p
}

func (x AclIpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclIpType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[4].Descriptor()
}

func (AclIpType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[4]
}

func (x AclIpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclIpType.Descriptor instead.
func (AclIpType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{4}
}

type AclRangeType int32

const (
	AclRangeType_ACL_RANGE_TYPE_UNSPECIFIED       AclRangeType = 0
	AclRangeType_ACL_RANGE_TYPE_L4_SRC_PORT_RANGE AclRangeType = 1
	AclRangeType_ACL_RANGE_TYPE_L4_DST_PORT_RANGE AclRangeType = 2
	AclRangeType_ACL_RANGE_TYPE_OUTER_VLAN        AclRangeType = 3
	AclRangeType_ACL_RANGE_TYPE_INNER_VLAN        AclRangeType = 4
	AclRangeType_ACL_RANGE_TYPE_PACKET_LENGTH     AclRangeType = 5
)

// Enum value maps for AclRangeType.
var (
	AclRangeType_name = map[int32]string{
		0: "ACL_RANGE_TYPE_UNSPECIFIED",
		1: "ACL_RANGE_TYPE_L4_SRC_PORT_RANGE",
		2: "ACL_RANGE_TYPE_L4_DST_PORT_RANGE",
		3: "ACL_RANGE_TYPE_OUTER_VLAN",
		4: "ACL_RANGE_TYPE_INNER_VLAN",
		5: "ACL_RANGE_TYPE_PACKET_LENGTH",
	}
	AclRangeType_value = map[string]int32{
		"ACL_RANGE_TYPE_UNSPECIFIED":       0,
		"ACL_RANGE_TYPE_L4_SRC_PORT_RANGE": 1,
		"ACL_RANGE_TYPE_L4_DST_PORT_RANGE": 2,
		"ACL_RANGE_TYPE_OUTER_VLAN":        3,
		"ACL_RANGE_TYPE_INNER_VLAN":        4,
		"ACL_RANGE_TYPE_PACKET_LENGTH":     5,
	}
)

func (x AclRangeType) Enum() *AclRangeType {
	p := new(AclRangeType)
	*p = x
	return p
}

func (x AclRangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclRangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[5].Descriptor()
}

func (AclRangeType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[5]
}

func (x AclRangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclRangeType.Descriptor instead.
func (AclRangeType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{5}
}

type AclStage int32

const (
	AclStage_ACL_STAGE_UNSPECIFIED    AclStage = 0
	AclStage_ACL_STAGE_INGRESS        AclStage = 1
	AclStage_ACL_STAGE_EGRESS         AclStage = 2
	AclStage_ACL_STAGE_INGRESS_MACSEC AclStage = 3
	AclStage_ACL_STAGE_EGRESS_MACSEC  AclStage = 4
	AclStage_ACL_STAGE_PRE_INGRESS    AclStage = 5
)

// Enum value maps for AclStage.
var (
	AclStage_name = map[int32]string{
		0: "ACL_STAGE_UNSPECIFIED",
		1: "ACL_STAGE_INGRESS",
		2: "ACL_STAGE_EGRESS",
		3: "ACL_STAGE_INGRESS_MACSEC",
		4: "ACL_STAGE_EGRESS_MACSEC",
		5: "ACL_STAGE_PRE_INGRESS",
	}
	AclStage_value = map[string]int32{
		"ACL_STAGE_UNSPECIFIED":    0,
		"ACL_STAGE_INGRESS":        1,
		"ACL_STAGE_EGRESS":         2,
		"ACL_STAGE_INGRESS_MACSEC": 3,
		"ACL_STAGE_EGRESS_MACSEC":  4,
		"ACL_STAGE_PRE_INGRESS":    5,
	}
)

func (x AclStage) Enum() *AclStage {
	p := new(AclStage)
	*p = x
	return p
}

func (x AclStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclStage) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[6].Descriptor()
}

func (AclStage) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[6]
}

func (x AclStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclStage.Descriptor instead.
func (AclStage) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{6}
}

type AclTableGroupType int32

const (
	AclTableGroupType_ACL_TABLE_GROUP_TYPE_UNSPECIFIED AclTableGroupType = 0
	AclTableGroupType_ACL_TABLE_GROUP_TYPE_SEQUENTIAL  AclTableGroupType = 1
	AclTableGroupType_ACL_TABLE_GROUP_TYPE_PARALLEL    AclTableGroupType = 2
)

// Enum value maps for AclTableGroupType.
var (
	AclTableGroupType_name = map[int32]string{
		0: "ACL_TABLE_GROUP_TYPE_UNSPECIFIED",
		1: "ACL_TABLE_GROUP_TYPE_SEQUENTIAL",
		2: "ACL_TABLE_GROUP_TYPE_PARALLEL",
	}
	AclTableGroupType_value = map[string]int32{
		"ACL_TABLE_GROUP_TYPE_UNSPECIFIED": 0,
		"ACL_TABLE_GROUP_TYPE_SEQUENTIAL":  1,
		"ACL_TABLE_GROUP_TYPE_PARALLEL":    2,
	}
)

func (x AclTableGroupType) Enum() *AclTableGroupType {
	p := new(AclTableGroupType)
	*p = x
	return p
}

func (x AclTableGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclTableGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[7].Descriptor()
}

func (AclTableGroupType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[7]
}

func (x AclTableGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclTableGroupType.Descriptor instead.
func (AclTableGroupType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{7}
}

type Api int32

const (
	Api_API_UNSPECIFIED      Api = 0
	Api_API_SAI_UNSPECIFIED  Api = 1
	Api_API_SWITCH           Api = 2
	Api_API_PORT             Api = 3
	Api_API_FDB              Api = 4
	Api_API_VLAN             Api = 5
	Api_API_VIRTUAL_ROUTER   Api = 6
	Api_API_ROUTE            Api = 7
	Api_API_NEXT_HOP         Api = 8
	Api_API_NEXT_HOP_GROUP   Api = 9
	Api_API_ROUTER_INTERFACE Api = 10
	Api_API_NEIGHBOR         Api = 11
	Api_API_ACL              Api = 12
	Api_API_HOSTIF           Api = 13
	Api_API_MIRROR           Api = 14
	Api_API_SAMPLEPACKET     Api = 15
	Api_API_STP              Api = 16
	Api_API_LAG              Api = 17
	Api_API_POLICER          Api = 18
	Api_API_WRED             Api = 19
	Api_API_QOS_MAP          Api = 20
	Api_API_QUEUE            Api = 21
	Api_API_SCHEDULER        Api = 22
	Api_API_SCHEDULER_GROUP  Api = 23
	Api_API_BUFFER           Api = 24
	Api_API_HASH             Api = 25
	Api_API_UDF              Api = 26
	Api_API_TUNNEL           Api = 27
	Api_API_L2MC             Api = 28
	Api_API_IPMC             Api = 29
	Api_API_RPF_GROUP        Api = 30
	Api_API_L2MC_GROUP       Api = 31
	Api_API_IPMC_GROUP       Api = 32
	Api_API_MCAST_FDB        Api = 33
	Api_API_BRIDGE           Api = 34
	Api_API_TAM              Api = 35
	Api_API_SRV6             Api = 36
	Api_API_MPLS             Api = 37
	Api_API_DTEL             Api = 38
	Api_API_BFD              Api = 39
	Api_API_ISOLATION_GROUP  Api = 40
	Api_API_NAT              Api = 41
	Api_API_COUNTER          Api = 42
	Api_API_DEBUG_COUNTER    Api = 43
	Api_API_MACSEC           Api = 44
	Api_API_SYSTEM_PORT      Api = 45
	Api_API_MY_MAC           Api = 46
	Api_API_IPSEC            Api = 47
	Api_API_MAX              Api = 48
)

// Enum value maps for Api.
var (
	Api_name = map[int32]string{
		0:  "API_UNSPECIFIED",
		1:  "API_SAI_UNSPECIFIED",
		2:  "API_SWITCH",
		3:  "API_PORT",
		4:  "API_FDB",
		5:  "API_VLAN",
		6:  "API_VIRTUAL_ROUTER",
		7:  "API_ROUTE",
		8:  "API_NEXT_HOP",
		9:  "API_NEXT_HOP_GROUP",
		10: "API_ROUTER_INTERFACE",
		11: "API_NEIGHBOR",
		12: "API_ACL",
		13: "API_HOSTIF",
		14: "API_MIRROR",
		15: "API_SAMPLEPACKET",
		16: "API_STP",
		17: "API_LAG",
		18: "API_POLICER",
		19: "API_WRED",
		20: "API_QOS_MAP",
		21: "API_QUEUE",
		22: "API_SCHEDULER",
		23: "API_SCHEDULER_GROUP",
		24: "API_BUFFER",
		25: "API_HASH",
		26: "API_UDF",
		27: "API_TUNNEL",
		28: "API_L2MC",
		29: "API_IPMC",
		30: "API_RPF_GROUP",
		31: "API_L2MC_GROUP",
		32: "API_IPMC_GROUP",
		33: "API_MCAST_FDB",
		34: "API_BRIDGE",
		35: "API_TAM",
		36: "API_SRV6",
		37: "API_MPLS",
		38: "API_DTEL",
		39: "API_BFD",
		40: "API_ISOLATION_GROUP",
		41: "API_NAT",
		42: "API_COUNTER",
		43: "API_DEBUG_COUNTER",
		44: "API_MACSEC",
		45: "API_SYSTEM_PORT",
		46: "API_MY_MAC",
		47: "API_IPSEC",
		48: "API_MAX",
	}
	Api_value = map[string]int32{
		"API_UNSPECIFIED":      0,
		"API_SAI_UNSPECIFIED":  1,
		"API_SWITCH":           2,
		"API_PORT":             3,
		"API_FDB":              4,
		"API_VLAN":             5,
		"API_VIRTUAL_ROUTER":   6,
		"API_ROUTE":            7,
		"API_NEXT_HOP":         8,
		"API_NEXT_HOP_GROUP":   9,
		"API_ROUTER_INTERFACE": 10,
		"API_NEIGHBOR":         11,
		"API_ACL":              12,
		"API_HOSTIF":           13,
		"API_MIRROR":           14,
		"API_SAMPLEPACKET":     15,
		"API_STP":              16,
		"API_LAG":              17,
		"API_POLICER":          18,
		"API_WRED":             19,
		"API_QOS_MAP":          20,
		"API_QUEUE":            21,
		"API_SCHEDULER":        22,
		"API_SCHEDULER_GROUP":  23,
		"API_BUFFER":           24,
		"API_HASH":             25,
		"API_UDF":              26,
		"API_TUNNEL":           27,
		"API_L2MC":             28,
		"API_IPMC":             29,
		"API_RPF_GROUP":        30,
		"API_L2MC_GROUP":       31,
		"API_IPMC_GROUP":       32,
		"API_MCAST_FDB":        33,
		"API_BRIDGE":           34,
		"API_TAM":              35,
		"API_SRV6":             36,
		"API_MPLS":             37,
		"API_DTEL":             38,
		"API_BFD":              39,
		"API_ISOLATION_GROUP":  40,
		"API_NAT":              41,
		"API_COUNTER":          42,
		"API_DEBUG_COUNTER":    43,
		"API_MACSEC":           44,
		"API_SYSTEM_PORT":      45,
		"API_MY_MAC":           46,
		"API_IPSEC":            47,
		"API_MAX":              48,
	}
)

func (x Api) Enum() *Api {
	p := new(Api)
	*p = x
	return p
}

func (x Api) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Api) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[8].Descriptor()
}

func (Api) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[8]
}

func (x Api) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Api.Descriptor instead.
func (Api) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{8}
}

type BfdEncapsulationType int32

const (
	BfdEncapsulationType_BFD_ENCAPSULATION_TYPE_UNSPECIFIED   BfdEncapsulationType = 0
	BfdEncapsulationType_BFD_ENCAPSULATION_TYPE_IP_IN_IP      BfdEncapsulationType = 1
	BfdEncapsulationType_BFD_ENCAPSULATION_TYPE_L3_GRE_TUNNEL BfdEncapsulationType = 2
	BfdEncapsulationType_BFD_ENCAPSULATION_TYPE_NONE          BfdEncapsulationType = 3
)

// Enum value maps for BfdEncapsulationType.
var (
	BfdEncapsulationType_name = map[int32]string{
		0: "BFD_ENCAPSULATION_TYPE_UNSPECIFIED",
		1: "BFD_ENCAPSULATION_TYPE_IP_IN_IP",
		2: "BFD_ENCAPSULATION_TYPE_L3_GRE_TUNNEL",
		3: "BFD_ENCAPSULATION_TYPE_NONE",
	}
	BfdEncapsulationType_value = map[string]int32{
		"BFD_ENCAPSULATION_TYPE_UNSPECIFIED":   0,
		"BFD_ENCAPSULATION_TYPE_IP_IN_IP":      1,
		"BFD_ENCAPSULATION_TYPE_L3_GRE_TUNNEL": 2,
		"BFD_ENCAPSULATION_TYPE_NONE":          3,
	}
)

func (x BfdEncapsulationType) Enum() *BfdEncapsulationType {
	p := new(BfdEncapsulationType)
	*p = x
	return p
}

func (x BfdEncapsulationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BfdEncapsulationType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[9].Descriptor()
}

func (BfdEncapsulationType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[9]
}

func (x BfdEncapsulationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BfdEncapsulationType.Descriptor instead.
func (BfdEncapsulationType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{9}
}

type BfdSessionOffloadType int32

const (
	BfdSessionOffloadType_BFD_SESSION_OFFLOAD_TYPE_UNSPECIFIED BfdSessionOffloadType = 0
	BfdSessionOffloadType_BFD_SESSION_OFFLOAD_TYPE_NONE        BfdSessionOffloadType = 1
	BfdSessionOffloadType_BFD_SESSION_OFFLOAD_TYPE_FULL        BfdSessionOffloadType = 2
	BfdSessionOffloadType_BFD_SESSION_OFFLOAD_TYPE_SUSTENANCE  BfdSessionOffloadType = 3
)

// Enum value maps for BfdSessionOffloadType.
var (
	BfdSessionOffloadType_name = map[int32]string{
		0: "BFD_SESSION_OFFLOAD_TYPE_UNSPECIFIED",
		1: "BFD_SESSION_OFFLOAD_TYPE_NONE",
		2: "BFD_SESSION_OFFLOAD_TYPE_FULL",
		3: "BFD_SESSION_OFFLOAD_TYPE_SUSTENANCE",
	}
	BfdSessionOffloadType_value = map[string]int32{
		"BFD_SESSION_OFFLOAD_TYPE_UNSPECIFIED": 0,
		"BFD_SESSION_OFFLOAD_TYPE_NONE":        1,
		"BFD_SESSION_OFFLOAD_TYPE_FULL":        2,
		"BFD_SESSION_OFFLOAD_TYPE_SUSTENANCE":  3,
	}
)

func (x BfdSessionOffloadType) Enum() *BfdSessionOffloadType {
	p := new(BfdSessionOffloadType)
	*p = x
	return p
}

func (x BfdSessionOffloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BfdSessionOffloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[10].Descriptor()
}

func (BfdSessionOffloadType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[10]
}

func (x BfdSessionOffloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BfdSessionOffloadType.Descriptor instead.
func (BfdSessionOffloadType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{10}
}

type BfdSessionStat int32

const (
	BfdSessionStat_BFD_SESSION_STAT_UNSPECIFIED  BfdSessionStat = 0
	BfdSessionStat_BFD_SESSION_STAT_IN_PACKETS   BfdSessionStat = 1
	BfdSessionStat_BFD_SESSION_STAT_OUT_PACKETS  BfdSessionStat = 2
	BfdSessionStat_BFD_SESSION_STAT_DROP_PACKETS BfdSessionStat = 3
)

// Enum value maps for BfdSessionStat.
var (
	BfdSessionStat_name = map[int32]string{
		0: "BFD_SESSION_STAT_UNSPECIFIED",
		1: "BFD_SESSION_STAT_IN_PACKETS",
		2: "BFD_SESSION_STAT_OUT_PACKETS",
		3: "BFD_SESSION_STAT_DROP_PACKETS",
	}
	BfdSessionStat_value = map[string]int32{
		"BFD_SESSION_STAT_UNSPECIFIED":  0,
		"BFD_SESSION_STAT_IN_PACKETS":   1,
		"BFD_SESSION_STAT_OUT_PACKETS":  2,
		"BFD_SESSION_STAT_DROP_PACKETS": 3,
	}
)

func (x BfdSessionStat) Enum() *BfdSessionStat {
	p := new(BfdSessionStat)
	*p = x
	return p
}

func (x BfdSessionStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BfdSessionStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[11].Descriptor()
}

func (BfdSessionStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[11]
}

func (x BfdSessionStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BfdSessionStat.Descriptor instead.
func (BfdSessionStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{11}
}

type BfdSessionState int32

const (
	BfdSessionState_BFD_SESSION_STATE_UNSPECIFIED BfdSessionState = 0
	BfdSessionState_BFD_SESSION_STATE_ADMIN_DOWN  BfdSessionState = 1
	BfdSessionState_BFD_SESSION_STATE_DOWN        BfdSessionState = 2
	BfdSessionState_BFD_SESSION_STATE_INIT        BfdSessionState = 3
	BfdSessionState_BFD_SESSION_STATE_UP          BfdSessionState = 4
)

// Enum value maps for BfdSessionState.
var (
	BfdSessionState_name = map[int32]string{
		0: "BFD_SESSION_STATE_UNSPECIFIED",
		1: "BFD_SESSION_STATE_ADMIN_DOWN",
		2: "BFD_SESSION_STATE_DOWN",
		3: "BFD_SESSION_STATE_INIT",
		4: "BFD_SESSION_STATE_UP",
	}
	BfdSessionState_value = map[string]int32{
		"BFD_SESSION_STATE_UNSPECIFIED": 0,
		"BFD_SESSION_STATE_ADMIN_DOWN":  1,
		"BFD_SESSION_STATE_DOWN":        2,
		"BFD_SESSION_STATE_INIT":        3,
		"BFD_SESSION_STATE_UP":          4,
	}
)

func (x BfdSessionState) Enum() *BfdSessionState {
	p := new(BfdSessionState)
	*p = x
	return p
}

func (x BfdSessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BfdSessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[12].Descriptor()
}

func (BfdSessionState) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[12]
}

func (x BfdSessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BfdSessionState.Descriptor instead.
func (BfdSessionState) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{12}
}

type BfdSessionType int32

const (
	BfdSessionType_BFD_SESSION_TYPE_UNSPECIFIED    BfdSessionType = 0
	BfdSessionType_BFD_SESSION_TYPE_DEMAND_ACTIVE  BfdSessionType = 1
	BfdSessionType_BFD_SESSION_TYPE_DEMAND_PASSIVE BfdSessionType = 2
	BfdSessionType_BFD_SESSION_TYPE_ASYNC_ACTIVE   BfdSessionType = 3
	BfdSessionType_BFD_SESSION_TYPE_ASYNC_PASSIVE  BfdSessionType = 4
)

// Enum value maps for BfdSessionType.
var (
	BfdSessionType_name = map[int32]string{
		0: "BFD_SESSION_TYPE_UNSPECIFIED",
		1: "BFD_SESSION_TYPE_DEMAND_ACTIVE",
		2: "BFD_SESSION_TYPE_DEMAND_PASSIVE",
		3: "BFD_SESSION_TYPE_ASYNC_ACTIVE",
		4: "BFD_SESSION_TYPE_ASYNC_PASSIVE",
	}
	BfdSessionType_value = map[string]int32{
		"BFD_SESSION_TYPE_UNSPECIFIED":    0,
		"BFD_SESSION_TYPE_DEMAND_ACTIVE":  1,
		"BFD_SESSION_TYPE_DEMAND_PASSIVE": 2,
		"BFD_SESSION_TYPE_ASYNC_ACTIVE":   3,
		"BFD_SESSION_TYPE_ASYNC_PASSIVE":  4,
	}
)

func (x BfdSessionType) Enum() *BfdSessionType {
	p := new(BfdSessionType)
	*p = x
	return p
}

func (x BfdSessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BfdSessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[13].Descriptor()
}

func (BfdSessionType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[13]
}

func (x BfdSessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BfdSessionType.Descriptor instead.
func (BfdSessionType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{13}
}

type BridgeFloodControlType int32

const (
	BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED BridgeFloodControlType = 0
	BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS   BridgeFloodControlType = 1
	BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_NONE        BridgeFloodControlType = 2
	BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_L2MC_GROUP  BridgeFloodControlType = 3
	BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_COMBINED    BridgeFloodControlType = 4
)

// Enum value maps for BridgeFloodControlType.
var (
	BridgeFloodControlType_name = map[int32]string{
		0: "BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED",
		1: "BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS",
		2: "BRIDGE_FLOOD_CONTROL_TYPE_NONE",
		3: "BRIDGE_FLOOD_CONTROL_TYPE_L2MC_GROUP",
		4: "BRIDGE_FLOOD_CONTROL_TYPE_COMBINED",
	}
	BridgeFloodControlType_value = map[string]int32{
		"BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED": 0,
		"BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS":   1,
		"BRIDGE_FLOOD_CONTROL_TYPE_NONE":        2,
		"BRIDGE_FLOOD_CONTROL_TYPE_L2MC_GROUP":  3,
		"BRIDGE_FLOOD_CONTROL_TYPE_COMBINED":    4,
	}
)

func (x BridgeFloodControlType) Enum() *BridgeFloodControlType {
	p := new(BridgeFloodControlType)
	*p = x
	return p
}

func (x BridgeFloodControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgeFloodControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[14].Descriptor()
}

func (BridgeFloodControlType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[14]
}

func (x BridgeFloodControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgeFloodControlType.Descriptor instead.
func (BridgeFloodControlType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{14}
}

type BridgePortFdbLearningMode int32

const (
	BridgePortFdbLearningMode_BRIDGE_PORT_FDB_LEARNING_MODE_UNSPECIFIED      BridgePortFdbLearningMode = 0
	BridgePortFdbLearningMode_BRIDGE_PORT_FDB_LEARNING_MODE_DROP             BridgePortFdbLearningMode = 1
	BridgePortFdbLearningMode_BRIDGE_PORT_FDB_LEARNING_MODE_DISABLE          BridgePortFdbLearningMode = 2
	BridgePortFdbLearningMode_BRIDGE_PORT_FDB_LEARNING_MODE_HW               BridgePortFdbLearningMode = 3
	BridgePortFdbLearningMode_BRIDGE_PORT_FDB_LEARNING_MODE_CPU_TRAP         BridgePortFdbLearningMode = 4
	BridgePortFdbLearningMode_BRIDGE_PORT_FDB_LEARNING_MODE_CPU_LOG          BridgePortFdbLearningMode = 5
	BridgePortFdbLearningMode_BRIDGE_PORT_FDB_LEARNING_MODE_FDB_NOTIFICATION BridgePortFdbLearningMode = 6
)

// Enum value maps for BridgePortFdbLearningMode.
var (
	BridgePortFdbLearningMode_name = map[int32]string{
		0: "BRIDGE_PORT_FDB_LEARNING_MODE_UNSPECIFIED",
		1: "BRIDGE_PORT_FDB_LEARNING_MODE_DROP",
		2: "BRIDGE_PORT_FDB_LEARNING_MODE_DISABLE",
		3: "BRIDGE_PORT_FDB_LEARNING_MODE_HW",
		4: "BRIDGE_PORT_FDB_LEARNING_MODE_CPU_TRAP",
		5: "BRIDGE_PORT_FDB_LEARNING_MODE_CPU_LOG",
		6: "BRIDGE_PORT_FDB_LEARNING_MODE_FDB_NOTIFICATION",
	}
	BridgePortFdbLearningMode_value = map[string]int32{
		"BRIDGE_PORT_FDB_LEARNING_MODE_UNSPECIFIED":      0,
		"BRIDGE_PORT_FDB_LEARNING_MODE_DROP":             1,
		"BRIDGE_PORT_FDB_LEARNING_MODE_DISABLE":          2,
		"BRIDGE_PORT_FDB_LEARNING_MODE_HW":               3,
		"BRIDGE_PORT_FDB_LEARNING_MODE_CPU_TRAP":         4,
		"BRIDGE_PORT_FDB_LEARNING_MODE_CPU_LOG":          5,
		"BRIDGE_PORT_FDB_LEARNING_MODE_FDB_NOTIFICATION": 6,
	}
)

func (x BridgePortFdbLearningMode) Enum() *BridgePortFdbLearningMode {
	p := new(BridgePortFdbLearningMode)
	*p = x
	return p
}

func (x BridgePortFdbLearningMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgePortFdbLearningMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[15].Descriptor()
}

func (BridgePortFdbLearningMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[15]
}

func (x BridgePortFdbLearningMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgePortFdbLearningMode.Descriptor instead.
func (BridgePortFdbLearningMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{15}
}

type BridgePortStat int32

const (
	BridgePortStat_BRIDGE_PORT_STAT_UNSPECIFIED BridgePortStat = 0
	BridgePortStat_BRIDGE_PORT_STAT_IN_OCTETS   BridgePortStat = 1
	BridgePortStat_BRIDGE_PORT_STAT_IN_PACKETS  BridgePortStat = 2
	BridgePortStat_BRIDGE_PORT_STAT_OUT_OCTETS  BridgePortStat = 3
	BridgePortStat_BRIDGE_PORT_STAT_OUT_PACKETS BridgePortStat = 4
)

// Enum value maps for BridgePortStat.
var (
	BridgePortStat_name = map[int32]string{
		0: "BRIDGE_PORT_STAT_UNSPECIFIED",
		1: "BRIDGE_PORT_STAT_IN_OCTETS",
		2: "BRIDGE_PORT_STAT_IN_PACKETS",
		3: "BRIDGE_PORT_STAT_OUT_OCTETS",
		4: "BRIDGE_PORT_STAT_OUT_PACKETS",
	}
	BridgePortStat_value = map[string]int32{
		"BRIDGE_PORT_STAT_UNSPECIFIED": 0,
		"BRIDGE_PORT_STAT_IN_OCTETS":   1,
		"BRIDGE_PORT_STAT_IN_PACKETS":  2,
		"BRIDGE_PORT_STAT_OUT_OCTETS":  3,
		"BRIDGE_PORT_STAT_OUT_PACKETS": 4,
	}
)

func (x BridgePortStat) Enum() *BridgePortStat {
	p := new(BridgePortStat)
	*p = x
	return p
}

func (x BridgePortStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgePortStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[16].Descriptor()
}

func (BridgePortStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[16]
}

func (x BridgePortStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgePortStat.Descriptor instead.
func (BridgePortStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{16}
}

type BridgePortTaggingMode int32

const (
	BridgePortTaggingMode_BRIDGE_PORT_TAGGING_MODE_UNSPECIFIED BridgePortTaggingMode = 0
	BridgePortTaggingMode_BRIDGE_PORT_TAGGING_MODE_UNTAGGED    BridgePortTaggingMode = 1
	BridgePortTaggingMode_BRIDGE_PORT_TAGGING_MODE_TAGGED      BridgePortTaggingMode = 2
)

// Enum value maps for BridgePortTaggingMode.
var (
	BridgePortTaggingMode_name = map[int32]string{
		0: "BRIDGE_PORT_TAGGING_MODE_UNSPECIFIED",
		1: "BRIDGE_PORT_TAGGING_MODE_UNTAGGED",
		2: "BRIDGE_PORT_TAGGING_MODE_TAGGED",
	}
	BridgePortTaggingMode_value = map[string]int32{
		"BRIDGE_PORT_TAGGING_MODE_UNSPECIFIED": 0,
		"BRIDGE_PORT_TAGGING_MODE_UNTAGGED":    1,
		"BRIDGE_PORT_TAGGING_MODE_TAGGED":      2,
	}
)

func (x BridgePortTaggingMode) Enum() *BridgePortTaggingMode {
	p := new(BridgePortTaggingMode)
	*p = x
	return p
}

func (x BridgePortTaggingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgePortTaggingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[17].Descriptor()
}

func (BridgePortTaggingMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[17]
}

func (x BridgePortTaggingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgePortTaggingMode.Descriptor instead.
func (BridgePortTaggingMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{17}
}

type BridgePortType int32

const (
	BridgePortType_BRIDGE_PORT_TYPE_UNSPECIFIED BridgePortType = 0
	BridgePortType_BRIDGE_PORT_TYPE_PORT        BridgePortType = 1
	BridgePortType_BRIDGE_PORT_TYPE_SUB_PORT    BridgePortType = 2
	BridgePortType_BRIDGE_PORT_TYPE_1Q_ROUTER   BridgePortType = 3
	BridgePortType_BRIDGE_PORT_TYPE_1D_ROUTER   BridgePortType = 4
	BridgePortType_BRIDGE_PORT_TYPE_TUNNEL      BridgePortType = 5
)

// Enum value maps for BridgePortType.
var (
	BridgePortType_name = map[int32]string{
		0: "BRIDGE_PORT_TYPE_UNSPECIFIED",
		1: "BRIDGE_PORT_TYPE_PORT",
		2: "BRIDGE_PORT_TYPE_SUB_PORT",
		3: "BRIDGE_PORT_TYPE_1Q_ROUTER",
		4: "BRIDGE_PORT_TYPE_1D_ROUTER",
		5: "BRIDGE_PORT_TYPE_TUNNEL",
	}
	BridgePortType_value = map[string]int32{
		"BRIDGE_PORT_TYPE_UNSPECIFIED": 0,
		"BRIDGE_PORT_TYPE_PORT":        1,
		"BRIDGE_PORT_TYPE_SUB_PORT":    2,
		"BRIDGE_PORT_TYPE_1Q_ROUTER":   3,
		"BRIDGE_PORT_TYPE_1D_ROUTER":   4,
		"BRIDGE_PORT_TYPE_TUNNEL":      5,
	}
)

func (x BridgePortType) Enum() *BridgePortType {
	p := new(BridgePortType)
	*p = x
	return p
}

func (x BridgePortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgePortType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[18].Descriptor()
}

func (BridgePortType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[18]
}

func (x BridgePortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgePortType.Descriptor instead.
func (BridgePortType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{18}
}

type BridgeStat int32

const (
	BridgeStat_BRIDGE_STAT_UNSPECIFIED BridgeStat = 0
	BridgeStat_BRIDGE_STAT_IN_OCTETS   BridgeStat = 1
	BridgeStat_BRIDGE_STAT_IN_PACKETS  BridgeStat = 2
	BridgeStat_BRIDGE_STAT_OUT_OCTETS  BridgeStat = 3
	BridgeStat_BRIDGE_STAT_OUT_PACKETS BridgeStat = 4
)

// Enum value maps for BridgeStat.
var (
	BridgeStat_name = map[int32]string{
		0: "BRIDGE_STAT_UNSPECIFIED",
		1: "BRIDGE_STAT_IN_OCTETS",
		2: "BRIDGE_STAT_IN_PACKETS",
		3: "BRIDGE_STAT_OUT_OCTETS",
		4: "BRIDGE_STAT_OUT_PACKETS",
	}
	BridgeStat_value = map[string]int32{
		"BRIDGE_STAT_UNSPECIFIED": 0,
		"BRIDGE_STAT_IN_OCTETS":   1,
		"BRIDGE_STAT_IN_PACKETS":  2,
		"BRIDGE_STAT_OUT_OCTETS":  3,
		"BRIDGE_STAT_OUT_PACKETS": 4,
	}
)

func (x BridgeStat) Enum() *BridgeStat {
	p := new(BridgeStat)
	*p = x
	return p
}

func (x BridgeStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgeStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[19].Descriptor()
}

func (BridgeStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[19]
}

func (x BridgeStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgeStat.Descriptor instead.
func (BridgeStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{19}
}

type BridgeType int32

const (
	BridgeType_BRIDGE_TYPE_UNSPECIFIED BridgeType = 0
	BridgeType_BRIDGE_TYPE_1Q          BridgeType = 1
	BridgeType_BRIDGE_TYPE_1D          BridgeType = 2
)

// Enum value maps for BridgeType.
var (
	BridgeType_name = map[int32]string{
		0: "BRIDGE_TYPE_UNSPECIFIED",
		1: "BRIDGE_TYPE_1Q",
		2: "BRIDGE_TYPE_1D",
	}
	BridgeType_value = map[string]int32{
		"BRIDGE_TYPE_UNSPECIFIED": 0,
		"BRIDGE_TYPE_1Q":          1,
		"BRIDGE_TYPE_1D":          2,
	}
)

func (x BridgeType) Enum() *BridgeType {
	p := new(BridgeType)
	*p = x
	return p
}

func (x BridgeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgeType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[20].Descriptor()
}

func (BridgeType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[20]
}

func (x BridgeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgeType.Descriptor instead.
func (BridgeType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{20}
}

type BufferPoolStat int32

const (
	BufferPoolStat_BUFFER_POOL_STAT_UNSPECIFIED                    BufferPoolStat = 0
	BufferPoolStat_BUFFER_POOL_STAT_CURR_OCCUPANCY_BYTES           BufferPoolStat = 1
	BufferPoolStat_BUFFER_POOL_STAT_WATERMARK_BYTES                BufferPoolStat = 2
	BufferPoolStat_BUFFER_POOL_STAT_DROPPED_PACKETS                BufferPoolStat = 3
	BufferPoolStat_BUFFER_POOL_STAT_GREEN_WRED_DROPPED_PACKETS     BufferPoolStat = 4
	BufferPoolStat_BUFFER_POOL_STAT_GREEN_WRED_DROPPED_BYTES       BufferPoolStat = 5
	BufferPoolStat_BUFFER_POOL_STAT_YELLOW_WRED_DROPPED_PACKETS    BufferPoolStat = 6
	BufferPoolStat_BUFFER_POOL_STAT_YELLOW_WRED_DROPPED_BYTES      BufferPoolStat = 7
	BufferPoolStat_BUFFER_POOL_STAT_RED_WRED_DROPPED_PACKETS       BufferPoolStat = 8
	BufferPoolStat_BUFFER_POOL_STAT_RED_WRED_DROPPED_BYTES         BufferPoolStat = 9
	BufferPoolStat_BUFFER_POOL_STAT_WRED_DROPPED_PACKETS           BufferPoolStat = 10
	BufferPoolStat_BUFFER_POOL_STAT_WRED_DROPPED_BYTES             BufferPoolStat = 11
	BufferPoolStat_BUFFER_POOL_STAT_GREEN_WRED_ECN_MARKED_PACKETS  BufferPoolStat = 12
	BufferPoolStat_BUFFER_POOL_STAT_GREEN_WRED_ECN_MARKED_BYTES    BufferPoolStat = 13
	BufferPoolStat_BUFFER_POOL_STAT_YELLOW_WRED_ECN_MARKED_PACKETS BufferPoolStat = 14
	BufferPoolStat_BUFFER_POOL_STAT_YELLOW_WRED_ECN_MARKED_BYTES   BufferPoolStat = 15
	BufferPoolStat_BUFFER_POOL_STAT_RED_WRED_ECN_MARKED_PACKETS    BufferPoolStat = 16
	BufferPoolStat_BUFFER_POOL_STAT_RED_WRED_ECN_MARKED_BYTES      BufferPoolStat = 17
	BufferPoolStat_BUFFER_POOL_STAT_WRED_ECN_MARKED_PACKETS        BufferPoolStat = 18
	BufferPoolStat_BUFFER_POOL_STAT_WRED_ECN_MARKED_BYTES          BufferPoolStat = 19
	BufferPoolStat_BUFFER_POOL_STAT_XOFF_ROOM_CURR_OCCUPANCY_BYTES BufferPoolStat = 20
	BufferPoolStat_BUFFER_POOL_STAT_XOFF_ROOM_WATERMARK_BYTES      BufferPoolStat = 21
	BufferPoolStat_BUFFER_POOL_STAT_CUSTOM_RANGE_BASE              BufferPoolStat = 22
)

// Enum value maps for BufferPoolStat.
var (
	BufferPoolStat_name = map[int32]string{
		0:  "BUFFER_POOL_STAT_UNSPECIFIED",
		1:  "BUFFER_POOL_STAT_CURR_OCCUPANCY_BYTES",
		2:  "BUFFER_POOL_STAT_WATERMARK_BYTES",
		3:  "BUFFER_POOL_STAT_DROPPED_PACKETS",
		4:  "BUFFER_POOL_STAT_GREEN_WRED_DROPPED_PACKETS",
		5:  "BUFFER_POOL_STAT_GREEN_WRED_DROPPED_BYTES",
		6:  "BUFFER_POOL_STAT_YELLOW_WRED_DROPPED_PACKETS",
		7:  "BUFFER_POOL_STAT_YELLOW_WRED_DROPPED_BYTES",
		8:  "BUFFER_POOL_STAT_RED_WRED_DROPPED_PACKETS",
		9:  "BUFFER_POOL_STAT_RED_WRED_DROPPED_BYTES",
		10: "BUFFER_POOL_STAT_WRED_DROPPED_PACKETS",
		11: "BUFFER_POOL_STAT_WRED_DROPPED_BYTES",
		12: "BUFFER_POOL_STAT_GREEN_WRED_ECN_MARKED_PACKETS",
		13: "BUFFER_POOL_STAT_GREEN_WRED_ECN_MARKED_BYTES",
		14: "BUFFER_POOL_STAT_YELLOW_WRED_ECN_MARKED_PACKETS",
		15: "BUFFER_POOL_STAT_YELLOW_WRED_ECN_MARKED_BYTES",
		16: "BUFFER_POOL_STAT_RED_WRED_ECN_MARKED_PACKETS",
		17: "BUFFER_POOL_STAT_RED_WRED_ECN_MARKED_BYTES",
		18: "BUFFER_POOL_STAT_WRED_ECN_MARKED_PACKETS",
		19: "BUFFER_POOL_STAT_WRED_ECN_MARKED_BYTES",
		20: "BUFFER_POOL_STAT_XOFF_ROOM_CURR_OCCUPANCY_BYTES",
		21: "BUFFER_POOL_STAT_XOFF_ROOM_WATERMARK_BYTES",
		22: "BUFFER_POOL_STAT_CUSTOM_RANGE_BASE",
	}
	BufferPoolStat_value = map[string]int32{
		"BUFFER_POOL_STAT_UNSPECIFIED":                    0,
		"BUFFER_POOL_STAT_CURR_OCCUPANCY_BYTES":           1,
		"BUFFER_POOL_STAT_WATERMARK_BYTES":                2,
		"BUFFER_POOL_STAT_DROPPED_PACKETS":                3,
		"BUFFER_POOL_STAT_GREEN_WRED_DROPPED_PACKETS":     4,
		"BUFFER_POOL_STAT_GREEN_WRED_DROPPED_BYTES":       5,
		"BUFFER_POOL_STAT_YELLOW_WRED_DROPPED_PACKETS":    6,
		"BUFFER_POOL_STAT_YELLOW_WRED_DROPPED_BYTES":      7,
		"BUFFER_POOL_STAT_RED_WRED_DROPPED_PACKETS":       8,
		"BUFFER_POOL_STAT_RED_WRED_DROPPED_BYTES":         9,
		"BUFFER_POOL_STAT_WRED_DROPPED_PACKETS":           10,
		"BUFFER_POOL_STAT_WRED_DROPPED_BYTES":             11,
		"BUFFER_POOL_STAT_GREEN_WRED_ECN_MARKED_PACKETS":  12,
		"BUFFER_POOL_STAT_GREEN_WRED_ECN_MARKED_BYTES":    13,
		"BUFFER_POOL_STAT_YELLOW_WRED_ECN_MARKED_PACKETS": 14,
		"BUFFER_POOL_STAT_YELLOW_WRED_ECN_MARKED_BYTES":   15,
		"BUFFER_POOL_STAT_RED_WRED_ECN_MARKED_PACKETS":    16,
		"BUFFER_POOL_STAT_RED_WRED_ECN_MARKED_BYTES":      17,
		"BUFFER_POOL_STAT_WRED_ECN_MARKED_PACKETS":        18,
		"BUFFER_POOL_STAT_WRED_ECN_MARKED_BYTES":          19,
		"BUFFER_POOL_STAT_XOFF_ROOM_CURR_OCCUPANCY_BYTES": 20,
		"BUFFER_POOL_STAT_XOFF_ROOM_WATERMARK_BYTES":      21,
		"BUFFER_POOL_STAT_CUSTOM_RANGE_BASE":              22,
	}
)

func (x BufferPoolStat) Enum() *BufferPoolStat {
	p := new(BufferPoolStat)
	*p = x
	return p
}

func (x BufferPoolStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BufferPoolStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[21].Descriptor()
}

func (BufferPoolStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[21]
}

func (x BufferPoolStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BufferPoolStat.Descriptor instead.
func (BufferPoolStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{21}
}

type BufferPoolThresholdMode int32

const (
	BufferPoolThresholdMode_BUFFER_POOL_THRESHOLD_MODE_UNSPECIFIED BufferPoolThresholdMode = 0
	BufferPoolThresholdMode_BUFFER_POOL_THRESHOLD_MODE_STATIC      BufferPoolThresholdMode = 1
	BufferPoolThresholdMode_BUFFER_POOL_THRESHOLD_MODE_DYNAMIC     BufferPoolThresholdMode = 2
)

// Enum value maps for BufferPoolThresholdMode.
var (
	BufferPoolThresholdMode_name = map[int32]string{
		0: "BUFFER_POOL_THRESHOLD_MODE_UNSPECIFIED",
		1: "BUFFER_POOL_THRESHOLD_MODE_STATIC",
		2: "BUFFER_POOL_THRESHOLD_MODE_DYNAMIC",
	}
	BufferPoolThresholdMode_value = map[string]int32{
		"BUFFER_POOL_THRESHOLD_MODE_UNSPECIFIED": 0,
		"BUFFER_POOL_THRESHOLD_MODE_STATIC":      1,
		"BUFFER_POOL_THRESHOLD_MODE_DYNAMIC":     2,
	}
)

func (x BufferPoolThresholdMode) Enum() *BufferPoolThresholdMode {
	p := new(BufferPoolThresholdMode)
	*p = x
	return p
}

func (x BufferPoolThresholdMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BufferPoolThresholdMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[22].Descriptor()
}

func (BufferPoolThresholdMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[22]
}

func (x BufferPoolThresholdMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BufferPoolThresholdMode.Descriptor instead.
func (BufferPoolThresholdMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{22}
}

type BufferPoolType int32

const (
	BufferPoolType_BUFFER_POOL_TYPE_UNSPECIFIED BufferPoolType = 0
	BufferPoolType_BUFFER_POOL_TYPE_INGRESS     BufferPoolType = 1
	BufferPoolType_BUFFER_POOL_TYPE_EGRESS      BufferPoolType = 2
	BufferPoolType_BUFFER_POOL_TYPE_BOTH        BufferPoolType = 3
)

// Enum value maps for BufferPoolType.
var (
	BufferPoolType_name = map[int32]string{
		0: "BUFFER_POOL_TYPE_UNSPECIFIED",
		1: "BUFFER_POOL_TYPE_INGRESS",
		2: "BUFFER_POOL_TYPE_EGRESS",
		3: "BUFFER_POOL_TYPE_BOTH",
	}
	BufferPoolType_value = map[string]int32{
		"BUFFER_POOL_TYPE_UNSPECIFIED": 0,
		"BUFFER_POOL_TYPE_INGRESS":     1,
		"BUFFER_POOL_TYPE_EGRESS":      2,
		"BUFFER_POOL_TYPE_BOTH":        3,
	}
)

func (x BufferPoolType) Enum() *BufferPoolType {
	p := new(BufferPoolType)
	*p = x
	return p
}

func (x BufferPoolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BufferPoolType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[23].Descriptor()
}

func (BufferPoolType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[23]
}

func (x BufferPoolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BufferPoolType.Descriptor instead.
func (BufferPoolType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{23}
}

type BufferProfileThresholdMode int32

const (
	BufferProfileThresholdMode_BUFFER_PROFILE_THRESHOLD_MODE_UNSPECIFIED BufferProfileThresholdMode = 0
	BufferProfileThresholdMode_BUFFER_PROFILE_THRESHOLD_MODE_STATIC      BufferProfileThresholdMode = 1
	BufferProfileThresholdMode_BUFFER_PROFILE_THRESHOLD_MODE_DYNAMIC     BufferProfileThresholdMode = 2
)

// Enum value maps for BufferProfileThresholdMode.
var (
	BufferProfileThresholdMode_name = map[int32]string{
		0: "BUFFER_PROFILE_THRESHOLD_MODE_UNSPECIFIED",
		1: "BUFFER_PROFILE_THRESHOLD_MODE_STATIC",
		2: "BUFFER_PROFILE_THRESHOLD_MODE_DYNAMIC",
	}
	BufferProfileThresholdMode_value = map[string]int32{
		"BUFFER_PROFILE_THRESHOLD_MODE_UNSPECIFIED": 0,
		"BUFFER_PROFILE_THRESHOLD_MODE_STATIC":      1,
		"BUFFER_PROFILE_THRESHOLD_MODE_DYNAMIC":     2,
	}
)

func (x BufferProfileThresholdMode) Enum() *BufferProfileThresholdMode {
	p := new(BufferProfileThresholdMode)
	*p = x
	return p
}

func (x BufferProfileThresholdMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BufferProfileThresholdMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[24].Descriptor()
}

func (BufferProfileThresholdMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[24]
}

func (x BufferProfileThresholdMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BufferProfileThresholdMode.Descriptor instead.
func (BufferProfileThresholdMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{24}
}

type BulkOpErrorMode int32

const (
	BulkOpErrorMode_BULK_OP_ERROR_MODE_UNSPECIFIED   BulkOpErrorMode = 0
	BulkOpErrorMode_BULK_OP_ERROR_MODE_STOP_ON_ERROR BulkOpErrorMode = 1
	BulkOpErrorMode_BULK_OP_ERROR_MODE_IGNORE_ERROR  BulkOpErrorMode = 2
)

// Enum value maps for BulkOpErrorMode.
var (
	BulkOpErrorMode_name = map[int32]string{
		0: "BULK_OP_ERROR_MODE_UNSPECIFIED",
		1: "BULK_OP_ERROR_MODE_STOP_ON_ERROR",
		2: "BULK_OP_ERROR_MODE_IGNORE_ERROR",
	}
	BulkOpErrorMode_value = map[string]int32{
		"BULK_OP_ERROR_MODE_UNSPECIFIED":   0,
		"BULK_OP_ERROR_MODE_STOP_ON_ERROR": 1,
		"BULK_OP_ERROR_MODE_IGNORE_ERROR":  2,
	}
)

func (x BulkOpErrorMode) Enum() *BulkOpErrorMode {
	p := new(BulkOpErrorMode)
	*p = x
	return p
}

func (x BulkOpErrorMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BulkOpErrorMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[25].Descriptor()
}

func (BulkOpErrorMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[25]
}

func (x BulkOpErrorMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BulkOpErrorMode.Descriptor instead.
func (BulkOpErrorMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{25}
}

type CommonApi int32

const (
	CommonApi_COMMON_API_UNSPECIFIED CommonApi = 0
	CommonApi_COMMON_API_CREATE      CommonApi = 1
	CommonApi_COMMON_API_REMOVE      CommonApi = 2
	CommonApi_COMMON_API_SET         CommonApi = 3
	CommonApi_COMMON_API_GET         CommonApi = 4
	CommonApi_COMMON_API_BULK_CREATE CommonApi = 5
	CommonApi_COMMON_API_BULK_REMOVE CommonApi = 6
	CommonApi_COMMON_API_BULK_SET    CommonApi = 7
	CommonApi_COMMON_API_BULK_GET    CommonApi = 8
	CommonApi_COMMON_API_MAX         CommonApi = 9
)

// Enum value maps for CommonApi.
var (
	CommonApi_name = map[int32]string{
		0: "COMMON_API_UNSPECIFIED",
		1: "COMMON_API_CREATE",
		2: "COMMON_API_REMOVE",
		3: "COMMON_API_SET",
		4: "COMMON_API_GET",
		5: "COMMON_API_BULK_CREATE",
		6: "COMMON_API_BULK_REMOVE",
		7: "COMMON_API_BULK_SET",
		8: "COMMON_API_BULK_GET",
		9: "COMMON_API_MAX",
	}
	CommonApi_value = map[string]int32{
		"COMMON_API_UNSPECIFIED": 0,
		"COMMON_API_CREATE":      1,
		"COMMON_API_REMOVE":      2,
		"COMMON_API_SET":         3,
		"COMMON_API_GET":         4,
		"COMMON_API_BULK_CREATE": 5,
		"COMMON_API_BULK_REMOVE": 6,
		"COMMON_API_BULK_SET":    7,
		"COMMON_API_BULK_GET":    8,
		"COMMON_API_MAX":         9,
	}
)

func (x CommonApi) Enum() *CommonApi {
	p := new(CommonApi)
	*p = x
	return p
}

func (x CommonApi) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommonApi) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[26].Descriptor()
}

func (CommonApi) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[26]
}

func (x CommonApi) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommonApi.Descriptor instead.
func (CommonApi) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{26}
}

type CounterStat int32

const (
	CounterStat_COUNTER_STAT_UNSPECIFIED       CounterStat = 0
	CounterStat_COUNTER_STAT_PACKETS           CounterStat = 1
	CounterStat_COUNTER_STAT_BYTES             CounterStat = 2
	CounterStat_COUNTER_STAT_CUSTOM_RANGE_BASE CounterStat = 3
)

// Enum value maps for CounterStat.
var (
	CounterStat_name = map[int32]string{
		0: "COUNTER_STAT_UNSPECIFIED",
		1: "COUNTER_STAT_PACKETS",
		2: "COUNTER_STAT_BYTES",
		3: "COUNTER_STAT_CUSTOM_RANGE_BASE",
	}
	CounterStat_value = map[string]int32{
		"COUNTER_STAT_UNSPECIFIED":       0,
		"COUNTER_STAT_PACKETS":           1,
		"COUNTER_STAT_BYTES":             2,
		"COUNTER_STAT_CUSTOM_RANGE_BASE": 3,
	}
)

func (x CounterStat) Enum() *CounterStat {
	p := new(CounterStat)
	*p = x
	return p
}

func (x CounterStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CounterStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[27].Descriptor()
}

func (CounterStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[27]
}

func (x CounterStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CounterStat.Descriptor instead.
func (CounterStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{27}
}

type CounterType int32

const (
	CounterType_COUNTER_TYPE_UNSPECIFIED CounterType = 0
	CounterType_COUNTER_TYPE_REGULAR     CounterType = 1
)

// Enum value maps for CounterType.
var (
	CounterType_name = map[int32]string{
		0: "COUNTER_TYPE_UNSPECIFIED",
		1: "COUNTER_TYPE_REGULAR",
	}
	CounterType_value = map[string]int32{
		"COUNTER_TYPE_UNSPECIFIED": 0,
		"COUNTER_TYPE_REGULAR":     1,
	}
)

func (x CounterType) Enum() *CounterType {
	p := new(CounterType)
	*p = x
	return p
}

func (x CounterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CounterType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[28].Descriptor()
}

func (CounterType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[28]
}

func (x CounterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CounterType.Descriptor instead.
func (CounterType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{28}
}

type DebugCounterBindMethod int32

const (
	DebugCounterBindMethod_DEBUG_COUNTER_BIND_METHOD_UNSPECIFIED DebugCounterBindMethod = 0
	DebugCounterBindMethod_DEBUG_COUNTER_BIND_METHOD_AUTOMATIC   DebugCounterBindMethod = 1
)

// Enum value maps for DebugCounterBindMethod.
var (
	DebugCounterBindMethod_name = map[int32]string{
		0: "DEBUG_COUNTER_BIND_METHOD_UNSPECIFIED",
		1: "DEBUG_COUNTER_BIND_METHOD_AUTOMATIC",
	}
	DebugCounterBindMethod_value = map[string]int32{
		"DEBUG_COUNTER_BIND_METHOD_UNSPECIFIED": 0,
		"DEBUG_COUNTER_BIND_METHOD_AUTOMATIC":   1,
	}
)

func (x DebugCounterBindMethod) Enum() *DebugCounterBindMethod {
	p := new(DebugCounterBindMethod)
	*p = x
	return p
}

func (x DebugCounterBindMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugCounterBindMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[29].Descriptor()
}

func (DebugCounterBindMethod) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[29]
}

func (x DebugCounterBindMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebugCounterBindMethod.Descriptor instead.
func (DebugCounterBindMethod) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{29}
}

type DebugCounterType int32

const (
	DebugCounterType_DEBUG_COUNTER_TYPE_UNSPECIFIED             DebugCounterType = 0
	DebugCounterType_DEBUG_COUNTER_TYPE_PORT_IN_DROP_REASONS    DebugCounterType = 1
	DebugCounterType_DEBUG_COUNTER_TYPE_PORT_OUT_DROP_REASONS   DebugCounterType = 2
	DebugCounterType_DEBUG_COUNTER_TYPE_SWITCH_IN_DROP_REASONS  DebugCounterType = 3
	DebugCounterType_DEBUG_COUNTER_TYPE_SWITCH_OUT_DROP_REASONS DebugCounterType = 4
)

// Enum value maps for DebugCounterType.
var (
	DebugCounterType_name = map[int32]string{
		0: "DEBUG_COUNTER_TYPE_UNSPECIFIED",
		1: "DEBUG_COUNTER_TYPE_PORT_IN_DROP_REASONS",
		2: "DEBUG_COUNTER_TYPE_PORT_OUT_DROP_REASONS",
		3: "DEBUG_COUNTER_TYPE_SWITCH_IN_DROP_REASONS",
		4: "DEBUG_COUNTER_TYPE_SWITCH_OUT_DROP_REASONS",
	}
	DebugCounterType_value = map[string]int32{
		"DEBUG_COUNTER_TYPE_UNSPECIFIED":             0,
		"DEBUG_COUNTER_TYPE_PORT_IN_DROP_REASONS":    1,
		"DEBUG_COUNTER_TYPE_PORT_OUT_DROP_REASONS":   2,
		"DEBUG_COUNTER_TYPE_SWITCH_IN_DROP_REASONS":  3,
		"DEBUG_COUNTER_TYPE_SWITCH_OUT_DROP_REASONS": 4,
	}
)

func (x DebugCounterType) Enum() *DebugCounterType {
	p := new(DebugCounterType)
	*p = x
	return p
}

func (x DebugCounterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugCounterType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[30].Descriptor()
}

func (DebugCounterType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[30]
}

func (x DebugCounterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebugCounterType.Descriptor instead.
func (DebugCounterType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{30}
}

type DtelEventType int32

const (
	DtelEventType_DTEL_EVENT_TYPE_UNSPECIFIED                   DtelEventType = 0
	DtelEventType_DTEL_EVENT_TYPE_FLOW_STATE                    DtelEventType = 1
	DtelEventType_DTEL_EVENT_TYPE_FLOW_REPORT_ALL_PACKETS       DtelEventType = 2
	DtelEventType_DTEL_EVENT_TYPE_FLOW_TCPFLAG                  DtelEventType = 3
	DtelEventType_DTEL_EVENT_TYPE_QUEUE_REPORT_THRESHOLD_BREACH DtelEventType = 4
	DtelEventType_DTEL_EVENT_TYPE_QUEUE_REPORT_TAIL_DROP        DtelEventType = 5
	DtelEventType_DTEL_EVENT_TYPE_DROP_REPORT                   DtelEventType = 6
	DtelEventType_DTEL_EVENT_TYPE_MAX                           DtelEventType = 7
)

// Enum value maps for DtelEventType.
var (
	DtelEventType_name = map[int32]string{
		0: "DTEL_EVENT_TYPE_UNSPECIFIED",
		1: "DTEL_EVENT_TYPE_FLOW_STATE",
		2: "DTEL_EVENT_TYPE_FLOW_REPORT_ALL_PACKETS",
		3: "DTEL_EVENT_TYPE_FLOW_TCPFLAG",
		4: "DTEL_EVENT_TYPE_QUEUE_REPORT_THRESHOLD_BREACH",
		5: "DTEL_EVENT_TYPE_QUEUE_REPORT_TAIL_DROP",
		6: "DTEL_EVENT_TYPE_DROP_REPORT",
		7: "DTEL_EVENT_TYPE_MAX",
	}
	DtelEventType_value = map[string]int32{
		"DTEL_EVENT_TYPE_UNSPECIFIED":                   0,
		"DTEL_EVENT_TYPE_FLOW_STATE":                    1,
		"DTEL_EVENT_TYPE_FLOW_REPORT_ALL_PACKETS":       2,
		"DTEL_EVENT_TYPE_FLOW_TCPFLAG":                  3,
		"DTEL_EVENT_TYPE_QUEUE_REPORT_THRESHOLD_BREACH": 4,
		"DTEL_EVENT_TYPE_QUEUE_REPORT_TAIL_DROP":        5,
		"DTEL_EVENT_TYPE_DROP_REPORT":                   6,
		"DTEL_EVENT_TYPE_MAX":                           7,
	}
)

func (x DtelEventType) Enum() *DtelEventType {
	p := new(DtelEventType)
	*p = x
	return p
}

func (x DtelEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DtelEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[31].Descriptor()
}

func (DtelEventType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[31]
}

func (x DtelEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DtelEventType.Descriptor instead.
func (DtelEventType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{31}
}

type EcnMarkMode int32

const (
	EcnMarkMode_ECN_MARK_MODE_UNSPECIFIED  EcnMarkMode = 0
	EcnMarkMode_ECN_MARK_MODE_NONE         EcnMarkMode = 1
	EcnMarkMode_ECN_MARK_MODE_GREEN        EcnMarkMode = 2
	EcnMarkMode_ECN_MARK_MODE_YELLOW       EcnMarkMode = 3
	EcnMarkMode_ECN_MARK_MODE_RED          EcnMarkMode = 4
	EcnMarkMode_ECN_MARK_MODE_GREEN_YELLOW EcnMarkMode = 5
	EcnMarkMode_ECN_MARK_MODE_GREEN_RED    EcnMarkMode = 6
	EcnMarkMode_ECN_MARK_MODE_YELLOW_RED   EcnMarkMode = 7
	EcnMarkMode_ECN_MARK_MODE_ALL          EcnMarkMode = 8
)

// Enum value maps for EcnMarkMode.
var (
	EcnMarkMode_name = map[int32]string{
		0: "ECN_MARK_MODE_UNSPECIFIED",
		1: "ECN_MARK_MODE_NONE",
		2: "ECN_MARK_MODE_GREEN",
		3: "ECN_MARK_MODE_YELLOW",
		4: "ECN_MARK_MODE_RED",
		5: "ECN_MARK_MODE_GREEN_YELLOW",
		6: "ECN_MARK_MODE_GREEN_RED",
		7: "ECN_MARK_MODE_YELLOW_RED",
		8: "ECN_MARK_MODE_ALL",
	}
	EcnMarkMode_value = map[string]int32{
		"ECN_MARK_MODE_UNSPECIFIED":  0,
		"ECN_MARK_MODE_NONE":         1,
		"ECN_MARK_MODE_GREEN":        2,
		"ECN_MARK_MODE_YELLOW":       3,
		"ECN_MARK_MODE_RED":          4,
		"ECN_MARK_MODE_GREEN_YELLOW": 5,
		"ECN_MARK_MODE_GREEN_RED":    6,
		"ECN_MARK_MODE_YELLOW_RED":   7,
		"ECN_MARK_MODE_ALL":          8,
	}
)

func (x EcnMarkMode) Enum() *EcnMarkMode {
	p := new(EcnMarkMode)
	*p = x
	return p
}

func (x EcnMarkMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EcnMarkMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[32].Descriptor()
}

func (EcnMarkMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[32]
}

func (x EcnMarkMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EcnMarkMode.Descriptor instead.
func (EcnMarkMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{32}
}

type ErspanEncapsulationType int32

const (
	ErspanEncapsulationType_ERSPAN_ENCAPSULATION_TYPE_UNSPECIFIED          ErspanEncapsulationType = 0
	ErspanEncapsulationType_ERSPAN_ENCAPSULATION_TYPE_MIRROR_L3_GRE_TUNNEL ErspanEncapsulationType = 1
)

// Enum value maps for ErspanEncapsulationType.
var (
	ErspanEncapsulationType_name = map[int32]string{
		0: "ERSPAN_ENCAPSULATION_TYPE_UNSPECIFIED",
		1: "ERSPAN_ENCAPSULATION_TYPE_MIRROR_L3_GRE_TUNNEL",
	}
	ErspanEncapsulationType_value = map[string]int32{
		"ERSPAN_ENCAPSULATION_TYPE_UNSPECIFIED":          0,
		"ERSPAN_ENCAPSULATION_TYPE_MIRROR_L3_GRE_TUNNEL": 1,
	}
)

func (x ErspanEncapsulationType) Enum() *ErspanEncapsulationType {
	p := new(ErspanEncapsulationType)
	*p = x
	return p
}

func (x ErspanEncapsulationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErspanEncapsulationType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[33].Descriptor()
}

func (ErspanEncapsulationType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[33]
}

func (x ErspanEncapsulationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErspanEncapsulationType.Descriptor instead.
func (ErspanEncapsulationType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{33}
}

type FdbEntryType int32

const (
	FdbEntryType_FDB_ENTRY_TYPE_UNSPECIFIED FdbEntryType = 0
	FdbEntryType_FDB_ENTRY_TYPE_DYNAMIC     FdbEntryType = 1
	FdbEntryType_FDB_ENTRY_TYPE_STATIC      FdbEntryType = 2
)

// Enum value maps for FdbEntryType.
var (
	FdbEntryType_name = map[int32]string{
		0: "FDB_ENTRY_TYPE_UNSPECIFIED",
		1: "FDB_ENTRY_TYPE_DYNAMIC",
		2: "FDB_ENTRY_TYPE_STATIC",
	}
	FdbEntryType_value = map[string]int32{
		"FDB_ENTRY_TYPE_UNSPECIFIED": 0,
		"FDB_ENTRY_TYPE_DYNAMIC":     1,
		"FDB_ENTRY_TYPE_STATIC":      2,
	}
)

func (x FdbEntryType) Enum() *FdbEntryType {
	p := new(FdbEntryType)
	*p = x
	return p
}

func (x FdbEntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FdbEntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[34].Descriptor()
}

func (FdbEntryType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[34]
}

func (x FdbEntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FdbEntryType.Descriptor instead.
func (FdbEntryType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{34}
}

type FdbEvent int32

const (
	FdbEvent_FDB_EVENT_UNSPECIFIED FdbEvent = 0
	FdbEvent_FDB_EVENT_LEARNED     FdbEvent = 1
	FdbEvent_FDB_EVENT_AGED        FdbEvent = 2
	FdbEvent_FDB_EVENT_MOVE        FdbEvent = 3
	FdbEvent_FDB_EVENT_FLUSHED     FdbEvent = 4
)

// Enum value maps for FdbEvent.
var (
	FdbEvent_name = map[int32]string{
		0: "FDB_EVENT_UNSPECIFIED",
		1: "FDB_EVENT_LEARNED",
		2: "FDB_EVENT_AGED",
		3: "FDB_EVENT_MOVE",
		4: "FDB_EVENT_FLUSHED",
	}
	FdbEvent_value = map[string]int32{
		"FDB_EVENT_UNSPECIFIED": 0,
		"FDB_EVENT_LEARNED":     1,
		"FDB_EVENT_AGED":        2,
		"FDB_EVENT_MOVE":        3,
		"FDB_EVENT_FLUSHED":     4,
	}
)

func (x FdbEvent) Enum() *FdbEvent {
	p := new(FdbEvent)
	*p = x
	return p
}

func (x FdbEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FdbEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[35].Descriptor()
}

func (FdbEvent) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[35]
}

func (x FdbEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FdbEvent.Descriptor instead.
func (FdbEvent) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{35}
}

type FdbFlushEntryType int32

const (
	FdbFlushEntryType_FDB_FLUSH_ENTRY_TYPE_UNSPECIFIED FdbFlushEntryType = 0
	FdbFlushEntryType_FDB_FLUSH_ENTRY_TYPE_DYNAMIC     FdbFlushEntryType = 1
	FdbFlushEntryType_FDB_FLUSH_ENTRY_TYPE_STATIC      FdbFlushEntryType = 2
	FdbFlushEntryType_FDB_FLUSH_ENTRY_TYPE_ALL         FdbFlushEntryType = 3
)

// Enum value maps for FdbFlushEntryType.
var (
	FdbFlushEntryType_name = map[int32]string{
		0: "FDB_FLUSH_ENTRY_TYPE_UNSPECIFIED",
		1: "FDB_FLUSH_ENTRY_TYPE_DYNAMIC",
		2: "FDB_FLUSH_ENTRY_TYPE_STATIC",
		3: "FDB_FLUSH_ENTRY_TYPE_ALL",
	}
	FdbFlushEntryType_value = map[string]int32{
		"FDB_FLUSH_ENTRY_TYPE_UNSPECIFIED": 0,
		"FDB_FLUSH_ENTRY_TYPE_DYNAMIC":     1,
		"FDB_FLUSH_ENTRY_TYPE_STATIC":      2,
		"FDB_FLUSH_ENTRY_TYPE_ALL":         3,
	}
)

func (x FdbFlushEntryType) Enum() *FdbFlushEntryType {
	p := new(FdbFlushEntryType)
	*p = x
	return p
}

func (x FdbFlushEntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FdbFlushEntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[36].Descriptor()
}

func (FdbFlushEntryType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[36]
}

func (x FdbFlushEntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FdbFlushEntryType.Descriptor instead.
func (FdbFlushEntryType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{36}
}

type HashAlgorithm int32

const (
	HashAlgorithm_HASH_ALGORITHM_UNSPECIFIED HashAlgorithm = 0
	HashAlgorithm_HASH_ALGORITHM_CRC         HashAlgorithm = 1
	HashAlgorithm_HASH_ALGORITHM_XOR         HashAlgorithm = 2
	HashAlgorithm_HASH_ALGORITHM_RANDOM      HashAlgorithm = 3
	HashAlgorithm_HASH_ALGORITHM_CRC_32LO    HashAlgorithm = 4
	HashAlgorithm_HASH_ALGORITHM_CRC_32HI    HashAlgorithm = 5
	HashAlgorithm_HASH_ALGORITHM_CRC_CCITT   HashAlgorithm = 6
	HashAlgorithm_HASH_ALGORITHM_CRC_XOR     HashAlgorithm = 7
)

// Enum value maps for HashAlgorithm.
var (
	HashAlgorithm_name = map[int32]string{
		0: "HASH_ALGORITHM_UNSPECIFIED",
		1: "HASH_ALGORITHM_CRC",
		2: "HASH_ALGORITHM_XOR",
		3: "HASH_ALGORITHM_RANDOM",
		4: "HASH_ALGORITHM_CRC_32LO",
		5: "HASH_ALGORITHM_CRC_32HI",
		6: "HASH_ALGORITHM_CRC_CCITT",
		7: "HASH_ALGORITHM_CRC_XOR",
	}
	HashAlgorithm_value = map[string]int32{
		"HASH_ALGORITHM_UNSPECIFIED": 0,
		"HASH_ALGORITHM_CRC":         1,
		"HASH_ALGORITHM_XOR":         2,
		"HASH_ALGORITHM_RANDOM":      3,
		"HASH_ALGORITHM_CRC_32LO":    4,
		"HASH_ALGORITHM_CRC_32HI":    5,
		"HASH_ALGORITHM_CRC_CCITT":   6,
		"HASH_ALGORITHM_CRC_XOR":     7,
	}
)

func (x HashAlgorithm) Enum() *HashAlgorithm {
	p := new(HashAlgorithm)
	*p = x
	return p
}

func (x HashAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[37].Descriptor()
}

func (HashAlgorithm) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[37]
}

func (x HashAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashAlgorithm.Descriptor instead.
func (HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{37}
}

type HostifTableEntryChannelType int32

const (
	HostifTableEntryChannelType_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_UNSPECIFIED          HostifTableEntryChannelType = 0
	HostifTableEntryChannelType_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_CB                   HostifTableEntryChannelType = 1
	HostifTableEntryChannelType_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_FD                   HostifTableEntryChannelType = 2
	HostifTableEntryChannelType_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_PHYSICAL_PORT HostifTableEntryChannelType = 3
	HostifTableEntryChannelType_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_LOGICAL_PORT  HostifTableEntryChannelType = 4
	HostifTableEntryChannelType_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_L3            HostifTableEntryChannelType = 5
	HostifTableEntryChannelType_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_GENETLINK            HostifTableEntryChannelType = 6
)

// Enum value maps for HostifTableEntryChannelType.
var (
	HostifTableEntryChannelType_name = map[int32]string{
		0: "HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_UNSPECIFIED",
		1: "HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_CB",
		2: "HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_FD",
		3: "HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_PHYSICAL_PORT",
		4: "HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_LOGICAL_PORT",
		5: "HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_L3",
		6: "HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_GENETLINK",
	}
	HostifTableEntryChannelType_value = map[string]int32{
		"HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_UNSPECIFIED":          0,
		"HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_CB":                   1,
		"HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_FD":                   2,
		"HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_PHYSICAL_PORT": 3,
		"HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_LOGICAL_PORT":  4,
		"HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_L3":            5,
		"HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_GENETLINK":            6,
	}
)

func (x HostifTableEntryChannelType) Enum() *HostifTableEntryChannelType {
	p := new(HostifTableEntryChannelType)
	*p = x
	return p
}

func (x HostifTableEntryChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostifTableEntryChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[38].Descriptor()
}

func (HostifTableEntryChannelType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[38]
}

func (x HostifTableEntryChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostifTableEntryChannelType.Descriptor instead.
func (HostifTableEntryChannelType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{38}
}

type HostifTableEntryType int32

const (
	HostifTableEntryType_HOSTIF_TABLE_ENTRY_TYPE_UNSPECIFIED HostifTableEntryType = 0
	HostifTableEntryType_HOSTIF_TABLE_ENTRY_TYPE_PORT        HostifTableEntryType = 1
	HostifTableEntryType_HOSTIF_TABLE_ENTRY_TYPE_LAG         HostifTableEntryType = 2
	HostifTableEntryType_HOSTIF_TABLE_ENTRY_TYPE_VLAN        HostifTableEntryType = 3
	HostifTableEntryType_HOSTIF_TABLE_ENTRY_TYPE_TRAP_ID     HostifTableEntryType = 4
	HostifTableEntryType_HOSTIF_TABLE_ENTRY_TYPE_WILDCARD    HostifTableEntryType = 5
)

// Enum value maps for HostifTableEntryType.
var (
	HostifTableEntryType_name = map[int32]string{
		0: "HOSTIF_TABLE_ENTRY_TYPE_UNSPECIFIED",
		1: "HOSTIF_TABLE_ENTRY_TYPE_PORT",
		2: "HOSTIF_TABLE_ENTRY_TYPE_LAG",
		3: "HOSTIF_TABLE_ENTRY_TYPE_VLAN",
		4: "HOSTIF_TABLE_ENTRY_TYPE_TRAP_ID",
		5: "HOSTIF_TABLE_ENTRY_TYPE_WILDCARD",
	}
	HostifTableEntryType_value = map[string]int32{
		"HOSTIF_TABLE_ENTRY_TYPE_UNSPECIFIED": 0,
		"HOSTIF_TABLE_ENTRY_TYPE_PORT":        1,
		"HOSTIF_TABLE_ENTRY_TYPE_LAG":         2,
		"HOSTIF_TABLE_ENTRY_TYPE_VLAN":        3,
		"HOSTIF_TABLE_ENTRY_TYPE_TRAP_ID":     4,
		"HOSTIF_TABLE_ENTRY_TYPE_WILDCARD":    5,
	}
)

func (x HostifTableEntryType) Enum() *HostifTableEntryType {
	p := new(HostifTableEntryType)
	*p = x
	return p
}

func (x HostifTableEntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostifTableEntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[39].Descriptor()
}

func (HostifTableEntryType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[39]
}

func (x HostifTableEntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostifTableEntryType.Descriptor instead.
func (HostifTableEntryType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{39}
}

type HostifTrapType int32

const (
	HostifTrapType_HOSTIF_TRAP_TYPE_UNSPECIFIED                    HostifTrapType = 0
	HostifTrapType_HOSTIF_TRAP_TYPE_START                          HostifTrapType = 1
	HostifTrapType_HOSTIF_TRAP_TYPE_STP                            HostifTrapType = 2
	HostifTrapType_HOSTIF_TRAP_TYPE_LACP                           HostifTrapType = 3
	HostifTrapType_HOSTIF_TRAP_TYPE_EAPOL                          HostifTrapType = 4
	HostifTrapType_HOSTIF_TRAP_TYPE_LLDP                           HostifTrapType = 5
	HostifTrapType_HOSTIF_TRAP_TYPE_PVRST                          HostifTrapType = 6
	HostifTrapType_HOSTIF_TRAP_TYPE_IGMP_TYPE_QUERY                HostifTrapType = 7
	HostifTrapType_HOSTIF_TRAP_TYPE_IGMP_TYPE_LEAVE                HostifTrapType = 8
	HostifTrapType_HOSTIF_TRAP_TYPE_IGMP_TYPE_V1_REPORT            HostifTrapType = 9
	HostifTrapType_HOSTIF_TRAP_TYPE_IGMP_TYPE_V2_REPORT            HostifTrapType = 10
	HostifTrapType_HOSTIF_TRAP_TYPE_IGMP_TYPE_V3_REPORT            HostifTrapType = 11
	HostifTrapType_HOSTIF_TRAP_TYPE_SAMPLEPACKET                   HostifTrapType = 12
	HostifTrapType_HOSTIF_TRAP_TYPE_UDLD                           HostifTrapType = 13
	HostifTrapType_HOSTIF_TRAP_TYPE_CDP                            HostifTrapType = 14
	HostifTrapType_HOSTIF_TRAP_TYPE_VTP                            HostifTrapType = 15
	HostifTrapType_HOSTIF_TRAP_TYPE_DTP                            HostifTrapType = 16
	HostifTrapType_HOSTIF_TRAP_TYPE_PAGP                           HostifTrapType = 17
	HostifTrapType_HOSTIF_TRAP_TYPE_PTP                            HostifTrapType = 18
	HostifTrapType_HOSTIF_TRAP_TYPE_PTP_TX_EVENT                   HostifTrapType = 19
	HostifTrapType_HOSTIF_TRAP_TYPE_DHCP_L2                        HostifTrapType = 20
	HostifTrapType_HOSTIF_TRAP_TYPE_DHCPV6_L2                      HostifTrapType = 21
	HostifTrapType_HOSTIF_TRAP_TYPE_SWITCH_CUSTOM_RANGE_BASE       HostifTrapType = 22
	HostifTrapType_HOSTIF_TRAP_TYPE_ARP_REQUEST                    HostifTrapType = 23
	HostifTrapType_HOSTIF_TRAP_TYPE_ARP_RESPONSE                   HostifTrapType = 24
	HostifTrapType_HOSTIF_TRAP_TYPE_DHCP                           HostifTrapType = 25
	HostifTrapType_HOSTIF_TRAP_TYPE_OSPF                           HostifTrapType = 26
	HostifTrapType_HOSTIF_TRAP_TYPE_PIM                            HostifTrapType = 27
	HostifTrapType_HOSTIF_TRAP_TYPE_VRRP                           HostifTrapType = 28
	HostifTrapType_HOSTIF_TRAP_TYPE_DHCPV6                         HostifTrapType = 29
	HostifTrapType_HOSTIF_TRAP_TYPE_OSPFV6                         HostifTrapType = 30
	HostifTrapType_HOSTIF_TRAP_TYPE_VRRPV6                         HostifTrapType = 31
	HostifTrapType_HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_DISCOVERY        HostifTrapType = 32
	HostifTrapType_HOSTIF_TRAP_TYPE_IPV6_MLD_V1_V2                 HostifTrapType = 33
	HostifTrapType_HOSTIF_TRAP_TYPE_IPV6_MLD_V1_REPORT             HostifTrapType = 34
	HostifTrapType_HOSTIF_TRAP_TYPE_IPV6_MLD_V1_DONE               HostifTrapType = 35
	HostifTrapType_HOSTIF_TRAP_TYPE_MLD_V2_REPORT                  HostifTrapType = 36
	HostifTrapType_HOSTIF_TRAP_TYPE_UNKNOWN_L3_MULTICAST           HostifTrapType = 37
	HostifTrapType_HOSTIF_TRAP_TYPE_SNAT_MISS                      HostifTrapType = 38
	HostifTrapType_HOSTIF_TRAP_TYPE_DNAT_MISS                      HostifTrapType = 39
	HostifTrapType_HOSTIF_TRAP_TYPE_NAT_HAIRPIN                    HostifTrapType = 40
	HostifTrapType_HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_SOLICITATION     HostifTrapType = 41
	HostifTrapType_HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_ADVERTISEMENT    HostifTrapType = 42
	HostifTrapType_HOSTIF_TRAP_TYPE_ISIS                           HostifTrapType = 43
	HostifTrapType_HOSTIF_TRAP_TYPE_ROUTER_CUSTOM_RANGE_BASE       HostifTrapType = 44
	HostifTrapType_HOSTIF_TRAP_TYPE_IP2ME                          HostifTrapType = 45
	HostifTrapType_HOSTIF_TRAP_TYPE_SSH                            HostifTrapType = 46
	HostifTrapType_HOSTIF_TRAP_TYPE_SNMP                           HostifTrapType = 47
	HostifTrapType_HOSTIF_TRAP_TYPE_BGP                            HostifTrapType = 48
	HostifTrapType_HOSTIF_TRAP_TYPE_BGPV6                          HostifTrapType = 49
	HostifTrapType_HOSTIF_TRAP_TYPE_BFD                            HostifTrapType = 50
	HostifTrapType_HOSTIF_TRAP_TYPE_BFDV6                          HostifTrapType = 51
	HostifTrapType_HOSTIF_TRAP_TYPE_BFD_MICRO                      HostifTrapType = 52
	HostifTrapType_HOSTIF_TRAP_TYPE_BFDV6_MICRO                    HostifTrapType = 53
	HostifTrapType_HOSTIF_TRAP_TYPE_LDP                            HostifTrapType = 54
	HostifTrapType_HOSTIF_TRAP_TYPE_LOCAL_IP_CUSTOM_RANGE_BASE     HostifTrapType = 55
	HostifTrapType_HOSTIF_TRAP_TYPE_L3_MTU_ERROR                   HostifTrapType = 56
	HostifTrapType_HOSTIF_TRAP_TYPE_TTL_ERROR                      HostifTrapType = 57
	HostifTrapType_HOSTIF_TRAP_TYPE_STATIC_FDB_MOVE                HostifTrapType = 58
	HostifTrapType_HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_EGRESS_BUFFER HostifTrapType = 59
	HostifTrapType_HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_WRED          HostifTrapType = 60
	HostifTrapType_HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_ROUTER        HostifTrapType = 61
	HostifTrapType_HOSTIF_TRAP_TYPE_MPLS_TTL_ERROR                 HostifTrapType = 62
	HostifTrapType_HOSTIF_TRAP_TYPE_MPLS_ROUTER_ALERT_LABEL        HostifTrapType = 63
	HostifTrapType_HOSTIF_TRAP_TYPE_MPLS_LABEL_LOOKUP_MISS         HostifTrapType = 64
	HostifTrapType_HOSTIF_TRAP_TYPE_CUSTOM_EXCEPTION_RANGE_BASE    HostifTrapType = 65
	HostifTrapType_HOSTIF_TRAP_TYPE_END                            HostifTrapType = 66
)

// Enum value maps for HostifTrapType.
var (
	HostifTrapType_name = map[int32]string{
		0:  "HOSTIF_TRAP_TYPE_UNSPECIFIED",
		1:  "HOSTIF_TRAP_TYPE_START",
		2:  "HOSTIF_TRAP_TYPE_STP",
		3:  "HOSTIF_TRAP_TYPE_LACP",
		4:  "HOSTIF_TRAP_TYPE_EAPOL",
		5:  "HOSTIF_TRAP_TYPE_LLDP",
		6:  "HOSTIF_TRAP_TYPE_PVRST",
		7:  "HOSTIF_TRAP_TYPE_IGMP_TYPE_QUERY",
		8:  "HOSTIF_TRAP_TYPE_IGMP_TYPE_LEAVE",
		9:  "HOSTIF_TRAP_TYPE_IGMP_TYPE_V1_REPORT",
		10: "HOSTIF_TRAP_TYPE_IGMP_TYPE_V2_REPORT",
		11: "HOSTIF_TRAP_TYPE_IGMP_TYPE_V3_REPORT",
		12: "HOSTIF_TRAP_TYPE_SAMPLEPACKET",
		13: "HOSTIF_TRAP_TYPE_UDLD",
		14: "HOSTIF_TRAP_TYPE_CDP",
		15: "HOSTIF_TRAP_TYPE_VTP",
		16: "HOSTIF_TRAP_TYPE_DTP",
		17: "HOSTIF_TRAP_TYPE_PAGP",
		18: "HOSTIF_TRAP_TYPE_PTP",
		19: "HOSTIF_TRAP_TYPE_PTP_TX_EVENT",
		20: "HOSTIF_TRAP_TYPE_DHCP_L2",
		21: "HOSTIF_TRAP_TYPE_DHCPV6_L2",
		22: "HOSTIF_TRAP_TYPE_SWITCH_CUSTOM_RANGE_BASE",
		23: "HOSTIF_TRAP_TYPE_ARP_REQUEST",
		24: "HOSTIF_TRAP_TYPE_ARP_RESPONSE",
		25: "HOSTIF_TRAP_TYPE_DHCP",
		26: "HOSTIF_TRAP_TYPE_OSPF",
		27: "HOSTIF_TRAP_TYPE_PIM",
		28: "HOSTIF_TRAP_TYPE_VRRP",
		29: "HOSTIF_TRAP_TYPE_DHCPV6",
		30: "HOSTIF_TRAP_TYPE_OSPFV6",
		31: "HOSTIF_TRAP_TYPE_VRRPV6",
		32: "HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_DISCOVERY",
		33: "HOSTIF_TRAP_TYPE_IPV6_MLD_V1_V2",
		34: "HOSTIF_TRAP_TYPE_IPV6_MLD_V1_REPORT",
		35: "HOSTIF_TRAP_TYPE_IPV6_MLD_V1_DONE",
		36: "HOSTIF_TRAP_TYPE_MLD_V2_REPORT",
		37: "HOSTIF_TRAP_TYPE_UNKNOWN_L3_MULTICAST",
		38: "HOSTIF_TRAP_TYPE_SNAT_MISS",
		39: "HOSTIF_TRAP_TYPE_DNAT_MISS",
		40: "HOSTIF_TRAP_TYPE_NAT_HAIRPIN",
		41: "HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_SOLICITATION",
		42: "HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_ADVERTISEMENT",
		43: "HOSTIF_TRAP_TYPE_ISIS",
		44: "HOSTIF_TRAP_TYPE_ROUTER_CUSTOM_RANGE_BASE",
		45: "HOSTIF_TRAP_TYPE_IP2ME",
		46: "HOSTIF_TRAP_TYPE_SSH",
		47: "HOSTIF_TRAP_TYPE_SNMP",
		48: "HOSTIF_TRAP_TYPE_BGP",
		49: "HOSTIF_TRAP_TYPE_BGPV6",
		50: "HOSTIF_TRAP_TYPE_BFD",
		51: "HOSTIF_TRAP_TYPE_BFDV6",
		52: "HOSTIF_TRAP_TYPE_BFD_MICRO",
		53: "HOSTIF_TRAP_TYPE_BFDV6_MICRO",
		54: "HOSTIF_TRAP_TYPE_LDP",
		55: "HOSTIF_TRAP_TYPE_LOCAL_IP_CUSTOM_RANGE_BASE",
		56: "HOSTIF_TRAP_TYPE_L3_MTU_ERROR",
		57: "HOSTIF_TRAP_TYPE_TTL_ERROR",
		58: "HOSTIF_TRAP_TYPE_STATIC_FDB_MOVE",
		59: "HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_EGRESS_BUFFER",
		60: "HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_WRED",
		61: "HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_ROUTER",
		62: "HOSTIF_TRAP_TYPE_MPLS_TTL_ERROR",
		63: "HOSTIF_TRAP_TYPE_MPLS_ROUTER_ALERT_LABEL",
		64: "HOSTIF_TRAP_TYPE_MPLS_LABEL_LOOKUP_MISS",
		65: "HOSTIF_TRAP_TYPE_CUSTOM_EXCEPTION_RANGE_BASE",
		66: "HOSTIF_TRAP_TYPE_END",
	}
	HostifTrapType_value = map[string]int32{
		"HOSTIF_TRAP_TYPE_UNSPECIFIED":                    0,
		"HOSTIF_TRAP_TYPE_START":                          1,
		"HOSTIF_TRAP_TYPE_STP":                            2,
		"HOSTIF_TRAP_TYPE_LACP":                           3,
		"HOSTIF_TRAP_TYPE_EAPOL":                          4,
		"HOSTIF_TRAP_TYPE_LLDP":                           5,
		"HOSTIF_TRAP_TYPE_PVRST":                          6,
		"HOSTIF_TRAP_TYPE_IGMP_TYPE_QUERY":                7,
		"HOSTIF_TRAP_TYPE_IGMP_TYPE_LEAVE":                8,
		"HOSTIF_TRAP_TYPE_IGMP_TYPE_V1_REPORT":            9,
		"HOSTIF_TRAP_TYPE_IGMP_TYPE_V2_REPORT":            10,
		"HOSTIF_TRAP_TYPE_IGMP_TYPE_V3_REPORT":            11,
		"HOSTIF_TRAP_TYPE_SAMPLEPACKET":                   12,
		"HOSTIF_TRAP_TYPE_UDLD":                           13,
		"HOSTIF_TRAP_TYPE_CDP":                            14,
		"HOSTIF_TRAP_TYPE_VTP":                            15,
		"HOSTIF_TRAP_TYPE_DTP":                            16,
		"HOSTIF_TRAP_TYPE_PAGP":                           17,
		"HOSTIF_TRAP_TYPE_PTP":                            18,
		"HOSTIF_TRAP_TYPE_PTP_TX_EVENT":                   19,
		"HOSTIF_TRAP_TYPE_DHCP_L2":                        20,
		"HOSTIF_TRAP_TYPE_DHCPV6_L2":                      21,
		"HOSTIF_TRAP_TYPE_SWITCH_CUSTOM_RANGE_BASE":       22,
		"HOSTIF_TRAP_TYPE_ARP_REQUEST":                    23,
		"HOSTIF_TRAP_TYPE_ARP_RESPONSE":                   24,
		"HOSTIF_TRAP_TYPE_DHCP":                           25,
		"HOSTIF_TRAP_TYPE_OSPF":                           26,
		"HOSTIF_TRAP_TYPE_PIM":                            27,
		"HOSTIF_TRAP_TYPE_VRRP":                           28,
		"HOSTIF_TRAP_TYPE_DHCPV6":                         29,
		"HOSTIF_TRAP_TYPE_OSPFV6":                         30,
		"HOSTIF_TRAP_TYPE_VRRPV6":                         31,
		"HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_DISCOVERY":        32,
		"HOSTIF_TRAP_TYPE_IPV6_MLD_V1_V2":                 33,
		"HOSTIF_TRAP_TYPE_IPV6_MLD_V1_REPORT":             34,
		"HOSTIF_TRAP_TYPE_IPV6_MLD_V1_DONE":               35,
		"HOSTIF_TRAP_TYPE_MLD_V2_REPORT":                  36,
		"HOSTIF_TRAP_TYPE_UNKNOWN_L3_MULTICAST":           37,
		"HOSTIF_TRAP_TYPE_SNAT_MISS":                      38,
		"HOSTIF_TRAP_TYPE_DNAT_MISS":                      39,
		"HOSTIF_TRAP_TYPE_NAT_HAIRPIN":                    40,
		"HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_SOLICITATION":     41,
		"HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_ADVERTISEMENT":    42,
		"HOSTIF_TRAP_TYPE_ISIS":                           43,
		"HOSTIF_TRAP_TYPE_ROUTER_CUSTOM_RANGE_BASE":       44,
		"HOSTIF_TRAP_TYPE_IP2ME":                          45,
		"HOSTIF_TRAP_TYPE_SSH":                            46,
		"HOSTIF_TRAP_TYPE_SNMP":                           47,
		"HOSTIF_TRAP_TYPE_BGP":                            48,
		"HOSTIF_TRAP_TYPE_BGPV6":                          49,
		"HOSTIF_TRAP_TYPE_BFD":                            50,
		"HOSTIF_TRAP_TYPE_BFDV6":                          51,
		"HOSTIF_TRAP_TYPE_BFD_MICRO":                      52,
		"HOSTIF_TRAP_TYPE_BFDV6_MICRO":                    53,
		"HOSTIF_TRAP_TYPE_LDP":                            54,
		"HOSTIF_TRAP_TYPE_LOCAL_IP_CUSTOM_RANGE_BASE":     55,
		"HOSTIF_TRAP_TYPE_L3_MTU_ERROR":                   56,
		"HOSTIF_TRAP_TYPE_TTL_ERROR":                      57,
		"HOSTIF_TRAP_TYPE_STATIC_FDB_MOVE":                58,
		"HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_EGRESS_BUFFER": 59,
		"HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_WRED":          60,
		"HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_ROUTER":        61,
		"HOSTIF_TRAP_TYPE_MPLS_TTL_ERROR":                 62,
		"HOSTIF_TRAP_TYPE_MPLS_ROUTER_ALERT_LABEL":        63,
		"HOSTIF_TRAP_TYPE_MPLS_LABEL_LOOKUP_MISS":         64,
		"HOSTIF_TRAP_TYPE_CUSTOM_EXCEPTION_RANGE_BASE":    65,
		"HOSTIF_TRAP_TYPE_END":                            66,
	}
)

func (x HostifTrapType) Enum() *HostifTrapType {
	p := new(HostifTrapType)
	*p = x
	return p
}

func (x HostifTrapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostifTrapType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[40].Descriptor()
}

func (HostifTrapType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[40]
}

func (x HostifTrapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostifTrapType.Descriptor instead.
func (HostifTrapType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{40}
}

type HostifTxType int32

const (
	HostifTxType_HOSTIF_TX_TYPE_UNSPECIFIED       HostifTxType = 0
	HostifTxType_HOSTIF_TX_TYPE_PIPELINE_BYPASS   HostifTxType = 1
	HostifTxType_HOSTIF_TX_TYPE_PIPELINE_LOOKUP   HostifTxType = 2
	HostifTxType_HOSTIF_TX_TYPE_CUSTOM_RANGE_BASE HostifTxType = 3
)

// Enum value maps for HostifTxType.
var (
	HostifTxType_name = map[int32]string{
		0: "HOSTIF_TX_TYPE_UNSPECIFIED",
		1: "HOSTIF_TX_TYPE_PIPELINE_BYPASS",
		2: "HOSTIF_TX_TYPE_PIPELINE_LOOKUP",
		3: "HOSTIF_TX_TYPE_CUSTOM_RANGE_BASE",
	}
	HostifTxType_value = map[string]int32{
		"HOSTIF_TX_TYPE_UNSPECIFIED":       0,
		"HOSTIF_TX_TYPE_PIPELINE_BYPASS":   1,
		"HOSTIF_TX_TYPE_PIPELINE_LOOKUP":   2,
		"HOSTIF_TX_TYPE_CUSTOM_RANGE_BASE": 3,
	}
)

func (x HostifTxType) Enum() *HostifTxType {
	p := new(HostifTxType)
	*p = x
	return p
}

func (x HostifTxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostifTxType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[41].Descriptor()
}

func (HostifTxType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[41]
}

func (x HostifTxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostifTxType.Descriptor instead.
func (HostifTxType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{41}
}

type HostifType int32

const (
	HostifType_HOSTIF_TYPE_UNSPECIFIED HostifType = 0
	HostifType_HOSTIF_TYPE_NETDEV      HostifType = 1
	HostifType_HOSTIF_TYPE_FD          HostifType = 2
	HostifType_HOSTIF_TYPE_GENETLINK   HostifType = 3
)

// Enum value maps for HostifType.
var (
	HostifType_name = map[int32]string{
		0: "HOSTIF_TYPE_UNSPECIFIED",
		1: "HOSTIF_TYPE_NETDEV",
		2: "HOSTIF_TYPE_FD",
		3: "HOSTIF_TYPE_GENETLINK",
	}
	HostifType_value = map[string]int32{
		"HOSTIF_TYPE_UNSPECIFIED": 0,
		"HOSTIF_TYPE_NETDEV":      1,
		"HOSTIF_TYPE_FD":          2,
		"HOSTIF_TYPE_GENETLINK":   3,
	}
)

func (x HostifType) Enum() *HostifType {
	p := new(HostifType)
	*p = x
	return p
}

func (x HostifType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostifType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[42].Descriptor()
}

func (HostifType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[42]
}

func (x HostifType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostifType.Descriptor instead.
func (HostifType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{42}
}

type HostifUserDefinedTrapType int32

const (
	HostifUserDefinedTrapType_HOSTIF_USER_DEFINED_TRAP_TYPE_UNSPECIFIED       HostifUserDefinedTrapType = 0
	HostifUserDefinedTrapType_HOSTIF_USER_DEFINED_TRAP_TYPE_START             HostifUserDefinedTrapType = 1
	HostifUserDefinedTrapType_HOSTIF_USER_DEFINED_TRAP_TYPE_ROUTER            HostifUserDefinedTrapType = 2
	HostifUserDefinedTrapType_HOSTIF_USER_DEFINED_TRAP_TYPE_NEIGHBOR          HostifUserDefinedTrapType = 3
	HostifUserDefinedTrapType_HOSTIF_USER_DEFINED_TRAP_TYPE_NEIGH             HostifUserDefinedTrapType = 4
	HostifUserDefinedTrapType_HOSTIF_USER_DEFINED_TRAP_TYPE_ACL               HostifUserDefinedTrapType = 5
	HostifUserDefinedTrapType_HOSTIF_USER_DEFINED_TRAP_TYPE_FDB               HostifUserDefinedTrapType = 6
	HostifUserDefinedTrapType_HOSTIF_USER_DEFINED_TRAP_TYPE_INSEG_ENTRY       HostifUserDefinedTrapType = 7
	HostifUserDefinedTrapType_HOSTIF_USER_DEFINED_TRAP_TYPE_CUSTOM_RANGE_BASE HostifUserDefinedTrapType = 8
	HostifUserDefinedTrapType_HOSTIF_USER_DEFINED_TRAP_TYPE_END               HostifUserDefinedTrapType = 9
)

// Enum value maps for HostifUserDefinedTrapType.
var (
	HostifUserDefinedTrapType_name = map[int32]string{
		0: "HOSTIF_USER_DEFINED_TRAP_TYPE_UNSPECIFIED",
		1: "HOSTIF_USER_DEFINED_TRAP_TYPE_START",
		2: "HOSTIF_USER_DEFINED_TRAP_TYPE_ROUTER",
		3: "HOSTIF_USER_DEFINED_TRAP_TYPE_NEIGHBOR",
		4: "HOSTIF_USER_DEFINED_TRAP_TYPE_NEIGH",
		5: "HOSTIF_USER_DEFINED_TRAP_TYPE_ACL",
		6: "HOSTIF_USER_DEFINED_TRAP_TYPE_FDB",
		7: "HOSTIF_USER_DEFINED_TRAP_TYPE_INSEG_ENTRY",
		8: "HOSTIF_USER_DEFINED_TRAP_TYPE_CUSTOM_RANGE_BASE",
		9: "HOSTIF_USER_DEFINED_TRAP_TYPE_END",
	}
	HostifUserDefinedTrapType_value = map[string]int32{
		"HOSTIF_USER_DEFINED_TRAP_TYPE_UNSPECIFIED":       0,
		"HOSTIF_USER_DEFINED_TRAP_TYPE_START":             1,
		"HOSTIF_USER_DEFINED_TRAP_TYPE_ROUTER":            2,
		"HOSTIF_USER_DEFINED_TRAP_TYPE_NEIGHBOR":          3,
		"HOSTIF_USER_DEFINED_TRAP_TYPE_NEIGH":             4,
		"HOSTIF_USER_DEFINED_TRAP_TYPE_ACL":               5,
		"HOSTIF_USER_DEFINED_TRAP_TYPE_FDB":               6,
		"HOSTIF_USER_DEFINED_TRAP_TYPE_INSEG_ENTRY":       7,
		"HOSTIF_USER_DEFINED_TRAP_TYPE_CUSTOM_RANGE_BASE": 8,
		"HOSTIF_USER_DEFINED_TRAP_TYPE_END":               9,
	}
)

func (x HostifUserDefinedTrapType) Enum() *HostifUserDefinedTrapType {
	p := new(HostifUserDefinedTrapType)
	*p = x
	return p
}

func (x HostifUserDefinedTrapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostifUserDefinedTrapType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[43].Descriptor()
}

func (HostifUserDefinedTrapType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[43]
}

func (x HostifUserDefinedTrapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostifUserDefinedTrapType.Descriptor instead.
func (HostifUserDefinedTrapType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{43}
}

type HostifVlanTag int32

const (
	HostifVlanTag_HOSTIF_VLAN_TAG_UNSPECIFIED HostifVlanTag = 0
	HostifVlanTag_HOSTIF_VLAN_TAG_STRIP       HostifVlanTag = 1
	HostifVlanTag_HOSTIF_VLAN_TAG_KEEP        HostifVlanTag = 2
	HostifVlanTag_HOSTIF_VLAN_TAG_ORIGINAL    HostifVlanTag = 3
)

// Enum value maps for HostifVlanTag.
var (
	HostifVlanTag_name = map[int32]string{
		0: "HOSTIF_VLAN_TAG_UNSPECIFIED",
		1: "HOSTIF_VLAN_TAG_STRIP",
		2: "HOSTIF_VLAN_TAG_KEEP",
		3: "HOSTIF_VLAN_TAG_ORIGINAL",
	}
	HostifVlanTag_value = map[string]int32{
		"HOSTIF_VLAN_TAG_UNSPECIFIED": 0,
		"HOSTIF_VLAN_TAG_STRIP":       1,
		"HOSTIF_VLAN_TAG_KEEP":        2,
		"HOSTIF_VLAN_TAG_ORIGINAL":    3,
	}
)

func (x HostifVlanTag) Enum() *HostifVlanTag {
	p := new(HostifVlanTag)
	*p = x
	return p
}

func (x HostifVlanTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostifVlanTag) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[44].Descriptor()
}

func (HostifVlanTag) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[44]
}

func (x HostifVlanTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostifVlanTag.Descriptor instead.
func (HostifVlanTag) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{44}
}

type InDropReason int32

const (
	InDropReason_IN_DROP_REASON_UNSPECIFIED                InDropReason = 0
	InDropReason_IN_DROP_REASON_START                      InDropReason = 1
	InDropReason_IN_DROP_REASON_L2_ANY                     InDropReason = 2
	InDropReason_IN_DROP_REASON_SMAC_MULTICAST             InDropReason = 3
	InDropReason_IN_DROP_REASON_SMAC_EQUALS_DMAC           InDropReason = 4
	InDropReason_IN_DROP_REASON_DMAC_RESERVED              InDropReason = 5
	InDropReason_IN_DROP_REASON_VLAN_TAG_NOT_ALLOWED       InDropReason = 6
	InDropReason_IN_DROP_REASON_INGRESS_VLAN_FILTER        InDropReason = 7
	InDropReason_IN_DROP_REASON_INGRESS_STP_FILTER         InDropReason = 8
	InDropReason_IN_DROP_REASON_FDB_UC_DISCARD             InDropReason = 9
	InDropReason_IN_DROP_REASON_FDB_MC_DISCARD             InDropReason = 10
	InDropReason_IN_DROP_REASON_L2_LOOPBACK_FILTER         InDropReason = 11
	InDropReason_IN_DROP_REASON_EXCEEDS_L2_MTU             InDropReason = 12
	InDropReason_IN_DROP_REASON_L3_ANY                     InDropReason = 13
	InDropReason_IN_DROP_REASON_EXCEEDS_L3_MTU             InDropReason = 14
	InDropReason_IN_DROP_REASON_TTL                        InDropReason = 15
	InDropReason_IN_DROP_REASON_L3_LOOPBACK_FILTER         InDropReason = 16
	InDropReason_IN_DROP_REASON_NON_ROUTABLE               InDropReason = 17
	InDropReason_IN_DROP_REASON_NO_L3_HEADER               InDropReason = 18
	InDropReason_IN_DROP_REASON_IP_HEADER_ERROR            InDropReason = 19
	InDropReason_IN_DROP_REASON_UC_DIP_MC_DMAC             InDropReason = 20
	InDropReason_IN_DROP_REASON_DIP_LOOPBACK               InDropReason = 21
	InDropReason_IN_DROP_REASON_SIP_LOOPBACK               InDropReason = 22
	InDropReason_IN_DROP_REASON_SIP_MC                     InDropReason = 23
	InDropReason_IN_DROP_REASON_SIP_CLASS_E                InDropReason = 24
	InDropReason_IN_DROP_REASON_SIP_UNSPECIFIED            InDropReason = 25
	InDropReason_IN_DROP_REASON_MC_DMAC_MISMATCH           InDropReason = 26
	InDropReason_IN_DROP_REASON_SIP_EQUALS_DIP             InDropReason = 27
	InDropReason_IN_DROP_REASON_SIP_BC                     InDropReason = 28
	InDropReason_IN_DROP_REASON_DIP_LOCAL                  InDropReason = 29
	InDropReason_IN_DROP_REASON_DIP_LINK_LOCAL             InDropReason = 30
	InDropReason_IN_DROP_REASON_SIP_LINK_LOCAL             InDropReason = 31
	InDropReason_IN_DROP_REASON_IPV6_MC_SCOPE0             InDropReason = 32
	InDropReason_IN_DROP_REASON_IPV6_MC_SCOPE1             InDropReason = 33
	InDropReason_IN_DROP_REASON_IRIF_DISABLED              InDropReason = 34
	InDropReason_IN_DROP_REASON_ERIF_DISABLED              InDropReason = 35
	InDropReason_IN_DROP_REASON_LPM4_MISS                  InDropReason = 36
	InDropReason_IN_DROP_REASON_LPM6_MISS                  InDropReason = 37
	InDropReason_IN_DROP_REASON_BLACKHOLE_ROUTE            InDropReason = 38
	InDropReason_IN_DROP_REASON_BLACKHOLE_ARP              InDropReason = 39
	InDropReason_IN_DROP_REASON_UNRESOLVED_NEXT_HOP        InDropReason = 40
	InDropReason_IN_DROP_REASON_L3_EGRESS_LINK_DOWN        InDropReason = 41
	InDropReason_IN_DROP_REASON_DECAP_ERROR                InDropReason = 42
	InDropReason_IN_DROP_REASON_ACL_ANY                    InDropReason = 43
	InDropReason_IN_DROP_REASON_ACL_INGRESS_PORT           InDropReason = 44
	InDropReason_IN_DROP_REASON_ACL_INGRESS_LAG            InDropReason = 45
	InDropReason_IN_DROP_REASON_ACL_INGRESS_VLAN           InDropReason = 46
	InDropReason_IN_DROP_REASON_ACL_INGRESS_RIF            InDropReason = 47
	InDropReason_IN_DROP_REASON_ACL_INGRESS_SWITCH         InDropReason = 48
	InDropReason_IN_DROP_REASON_ACL_EGRESS_PORT            InDropReason = 49
	InDropReason_IN_DROP_REASON_ACL_EGRESS_LAG             InDropReason = 50
	InDropReason_IN_DROP_REASON_ACL_EGRESS_VLAN            InDropReason = 51
	InDropReason_IN_DROP_REASON_ACL_EGRESS_RIF             InDropReason = 52
	InDropReason_IN_DROP_REASON_ACL_EGRESS_SWITCH          InDropReason = 53
	InDropReason_IN_DROP_REASON_FDB_AND_BLACKHOLE_DISCARDS InDropReason = 54
	InDropReason_IN_DROP_REASON_MPLS_MISS                  InDropReason = 55
	InDropReason_IN_DROP_REASON_SRV6_LOCAL_SID_DROP        InDropReason = 56
	InDropReason_IN_DROP_REASON_END                        InDropReason = 57
	InDropReason_IN_DROP_REASON_CUSTOM_RANGE_BASE          InDropReason = 58
	InDropReason_IN_DROP_REASON_CUSTOM_RANGE_END           InDropReason = 59
)

// Enum value maps for InDropReason.
var (
	InDropReason_name = map[int32]string{
		0:  "IN_DROP_REASON_UNSPECIFIED",
		1:  "IN_DROP_REASON_START",
		2:  "IN_DROP_REASON_L2_ANY",
		3:  "IN_DROP_REASON_SMAC_MULTICAST",
		4:  "IN_DROP_REASON_SMAC_EQUALS_DMAC",
		5:  "IN_DROP_REASON_DMAC_RESERVED",
		6:  "IN_DROP_REASON_VLAN_TAG_NOT_ALLOWED",
		7:  "IN_DROP_REASON_INGRESS_VLAN_FILTER",
		8:  "IN_DROP_REASON_INGRESS_STP_FILTER",
		9:  "IN_DROP_REASON_FDB_UC_DISCARD",
		10: "IN_DROP_REASON_FDB_MC_DISCARD",
		11: "IN_DROP_REASON_L2_LOOPBACK_FILTER",
		12: "IN_DROP_REASON_EXCEEDS_L2_MTU",
		13: "IN_DROP_REASON_L3_ANY",
		14: "IN_DROP_REASON_EXCEEDS_L3_MTU",
		15: "IN_DROP_REASON_TTL",
		16: "IN_DROP_REASON_L3_LOOPBACK_FILTER",
		17: "IN_DROP_REASON_NON_ROUTABLE",
		18: "IN_DROP_REASON_NO_L3_HEADER",
		19: "IN_DROP_REASON_IP_HEADER_ERROR",
		20: "IN_DROP_REASON_UC_DIP_MC_DMAC",
		21: "IN_DROP_REASON_DIP_LOOPBACK",
		22: "IN_DROP_REASON_SIP_LOOPBACK",
		23: "IN_DROP_REASON_SIP_MC",
		24: "IN_DROP_REASON_SIP_CLASS_E",
		25: "IN_DROP_REASON_SIP_UNSPECIFIED",
		26: "IN_DROP_REASON_MC_DMAC_MISMATCH",
		27: "IN_DROP_REASON_SIP_EQUALS_DIP",
		28: "IN_DROP_REASON_SIP_BC",
		29: "IN_DROP_REASON_DIP_LOCAL",
		30: "IN_DROP_REASON_DIP_LINK_LOCAL",
		31: "IN_DROP_REASON_SIP_LINK_LOCAL",
		32: "IN_DROP_REASON_IPV6_MC_SCOPE0",
		33: "IN_DROP_REASON_IPV6_MC_SCOPE1",
		34: "IN_DROP_REASON_IRIF_DISABLED",
		35: "IN_DROP_REASON_ERIF_DISABLED",
		36: "IN_DROP_REASON_LPM4_MISS",
		37: "IN_DROP_REASON_LPM6_MISS",
		38: "IN_DROP_REASON_BLACKHOLE_ROUTE",
		39: "IN_DROP_REASON_BLACKHOLE_ARP",
		40: "IN_DROP_REASON_UNRESOLVED_NEXT_HOP",
		41: "IN_DROP_REASON_L3_EGRESS_LINK_DOWN",
		42: "IN_DROP_REASON_DECAP_ERROR",
		43: "IN_DROP_REASON_ACL_ANY",
		44: "IN_DROP_REASON_ACL_INGRESS_PORT",
		45: "IN_DROP_REASON_ACL_INGRESS_LAG",
		46: "IN_DROP_REASON_ACL_INGRESS_VLAN",
		47: "IN_DROP_REASON_ACL_INGRESS_RIF",
		48: "IN_DROP_REASON_ACL_INGRESS_SWITCH",
		49: "IN_DROP_REASON_ACL_EGRESS_PORT",
		50: "IN_DROP_REASON_ACL_EGRESS_LAG",
		51: "IN_DROP_REASON_ACL_EGRESS_VLAN",
		52: "IN_DROP_REASON_ACL_EGRESS_RIF",
		53: "IN_DROP_REASON_ACL_EGRESS_SWITCH",
		54: "IN_DROP_REASON_FDB_AND_BLACKHOLE_DISCARDS",
		55: "IN_DROP_REASON_MPLS_MISS",
		56: "IN_DROP_REASON_SRV6_LOCAL_SID_DROP",
		57: "IN_DROP_REASON_END",
		58: "IN_DROP_REASON_CUSTOM_RANGE_BASE",
		59: "IN_DROP_REASON_CUSTOM_RANGE_END",
	}
	InDropReason_value = map[string]int32{
		"IN_DROP_REASON_UNSPECIFIED":                0,
		"IN_DROP_REASON_START":                      1,
		"IN_DROP_REASON_L2_ANY":                     2,
		"IN_DROP_REASON_SMAC_MULTICAST":             3,
		"IN_DROP_REASON_SMAC_EQUALS_DMAC":           4,
		"IN_DROP_REASON_DMAC_RESERVED":              5,
		"IN_DROP_REASON_VLAN_TAG_NOT_ALLOWED":       6,
		"IN_DROP_REASON_INGRESS_VLAN_FILTER":        7,
		"IN_DROP_REASON_INGRESS_STP_FILTER":         8,
		"IN_DROP_REASON_FDB_UC_DISCARD":             9,
		"IN_DROP_REASON_FDB_MC_DISCARD":             10,
		"IN_DROP_REASON_L2_LOOPBACK_FILTER":         11,
		"IN_DROP_REASON_EXCEEDS_L2_MTU":             12,
		"IN_DROP_REASON_L3_ANY":                     13,
		"IN_DROP_REASON_EXCEEDS_L3_MTU":             14,
		"IN_DROP_REASON_TTL":                        15,
		"IN_DROP_REASON_L3_LOOPBACK_FILTER":         16,
		"IN_DROP_REASON_NON_ROUTABLE":               17,
		"IN_DROP_REASON_NO_L3_HEADER":               18,
		"IN_DROP_REASON_IP_HEADER_ERROR":            19,
		"IN_DROP_REASON_UC_DIP_MC_DMAC":             20,
		"IN_DROP_REASON_DIP_LOOPBACK":               21,
		"IN_DROP_REASON_SIP_LOOPBACK":               22,
		"IN_DROP_REASON_SIP_MC":                     23,
		"IN_DROP_REASON_SIP_CLASS_E":                24,
		"IN_DROP_REASON_SIP_UNSPECIFIED":            25,
		"IN_DROP_REASON_MC_DMAC_MISMATCH":           26,
		"IN_DROP_REASON_SIP_EQUALS_DIP":             27,
		"IN_DROP_REASON_SIP_BC":                     28,
		"IN_DROP_REASON_DIP_LOCAL":                  29,
		"IN_DROP_REASON_DIP_LINK_LOCAL":             30,
		"IN_DROP_REASON_SIP_LINK_LOCAL":             31,
		"IN_DROP_REASON_IPV6_MC_SCOPE0":             32,
		"IN_DROP_REASON_IPV6_MC_SCOPE1":             33,
		"IN_DROP_REASON_IRIF_DISABLED":              34,
		"IN_DROP_REASON_ERIF_DISABLED":              35,
		"IN_DROP_REASON_LPM4_MISS":                  36,
		"IN_DROP_REASON_LPM6_MISS":                  37,
		"IN_DROP_REASON_BLACKHOLE_ROUTE":            38,
		"IN_DROP_REASON_BLACKHOLE_ARP":              39,
		"IN_DROP_REASON_UNRESOLVED_NEXT_HOP":        40,
		"IN_DROP_REASON_L3_EGRESS_LINK_DOWN":        41,
		"IN_DROP_REASON_DECAP_ERROR":                42,
		"IN_DROP_REASON_ACL_ANY":                    43,
		"IN_DROP_REASON_ACL_INGRESS_PORT":           44,
		"IN_DROP_REASON_ACL_INGRESS_LAG":            45,
		"IN_DROP_REASON_ACL_INGRESS_VLAN":           46,
		"IN_DROP_REASON_ACL_INGRESS_RIF":            47,
		"IN_DROP_REASON_ACL_INGRESS_SWITCH":         48,
		"IN_DROP_REASON_ACL_EGRESS_PORT":            49,
		"IN_DROP_REASON_ACL_EGRESS_LAG":             50,
		"IN_DROP_REASON_ACL_EGRESS_VLAN":            51,
		"IN_DROP_REASON_ACL_EGRESS_RIF":             52,
		"IN_DROP_REASON_ACL_EGRESS_SWITCH":          53,
		"IN_DROP_REASON_FDB_AND_BLACKHOLE_DISCARDS": 54,
		"IN_DROP_REASON_MPLS_MISS":                  55,
		"IN_DROP_REASON_SRV6_LOCAL_SID_DROP":        56,
		"IN_DROP_REASON_END":                        57,
		"IN_DROP_REASON_CUSTOM_RANGE_BASE":          58,
		"IN_DROP_REASON_CUSTOM_RANGE_END":           59,
	}
)

func (x InDropReason) Enum() *InDropReason {
	p := new(InDropReason)
	*p = x
	return p
}

func (x InDropReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InDropReason) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[45].Descriptor()
}

func (InDropReason) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[45]
}

func (x InDropReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InDropReason.Descriptor instead.
func (InDropReason) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{45}
}

type IngressPriorityGroupStat int32

const (
	IngressPriorityGroupStat_INGRESS_PRIORITY_GROUP_STAT_UNSPECIFIED                    IngressPriorityGroupStat = 0
	IngressPriorityGroupStat_INGRESS_PRIORITY_GROUP_STAT_PACKETS                        IngressPriorityGroupStat = 1
	IngressPriorityGroupStat_INGRESS_PRIORITY_GROUP_STAT_BYTES                          IngressPriorityGroupStat = 2
	IngressPriorityGroupStat_INGRESS_PRIORITY_GROUP_STAT_CURR_OCCUPANCY_BYTES           IngressPriorityGroupStat = 3
	IngressPriorityGroupStat_INGRESS_PRIORITY_GROUP_STAT_WATERMARK_BYTES                IngressPriorityGroupStat = 4
	IngressPriorityGroupStat_INGRESS_PRIORITY_GROUP_STAT_SHARED_CURR_OCCUPANCY_BYTES    IngressPriorityGroupStat = 5
	IngressPriorityGroupStat_INGRESS_PRIORITY_GROUP_STAT_SHARED_WATERMARK_BYTES         IngressPriorityGroupStat = 6
	IngressPriorityGroupStat_INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_CURR_OCCUPANCY_BYTES IngressPriorityGroupStat = 7
	IngressPriorityGroupStat_INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_WATERMARK_BYTES      IngressPriorityGroupStat = 8
	IngressPriorityGroupStat_INGRESS_PRIORITY_GROUP_STAT_DROPPED_PACKETS                IngressPriorityGroupStat = 9
	IngressPriorityGroupStat_INGRESS_PRIORITY_GROUP_STAT_CUSTOM_RANGE_BASE              IngressPriorityGroupStat = 10
)

// Enum value maps for IngressPriorityGroupStat.
var (
	IngressPriorityGroupStat_name = map[int32]string{
		0:  "INGRESS_PRIORITY_GROUP_STAT_UNSPECIFIED",
		1:  "INGRESS_PRIORITY_GROUP_STAT_PACKETS",
		2:  "INGRESS_PRIORITY_GROUP_STAT_BYTES",
		3:  "INGRESS_PRIORITY_GROUP_STAT_CURR_OCCUPANCY_BYTES",
		4:  "INGRESS_PRIORITY_GROUP_STAT_WATERMARK_BYTES",
		5:  "INGRESS_PRIORITY_GROUP_STAT_SHARED_CURR_OCCUPANCY_BYTES",
		6:  "INGRESS_PRIORITY_GROUP_STAT_SHARED_WATERMARK_BYTES",
		7:  "INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_CURR_OCCUPANCY_BYTES",
		8:  "INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_WATERMARK_BYTES",
		9:  "INGRESS_PRIORITY_GROUP_STAT_DROPPED_PACKETS",
		10: "INGRESS_PRIORITY_GROUP_STAT_CUSTOM_RANGE_BASE",
	}
	IngressPriorityGroupStat_value = map[string]int32{
		"INGRESS_PRIORITY_GROUP_STAT_UNSPECIFIED":                    0,
		"INGRESS_PRIORITY_GROUP_STAT_PACKETS":                        1,
		"INGRESS_PRIORITY_GROUP_STAT_BYTES":                          2,
		"INGRESS_PRIORITY_GROUP_STAT_CURR_OCCUPANCY_BYTES":           3,
		"INGRESS_PRIORITY_GROUP_STAT_WATERMARK_BYTES":                4,
		"INGRESS_PRIORITY_GROUP_STAT_SHARED_CURR_OCCUPANCY_BYTES":    5,
		"INGRESS_PRIORITY_GROUP_STAT_SHARED_WATERMARK_BYTES":         6,
		"INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_CURR_OCCUPANCY_BYTES": 7,
		"INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_WATERMARK_BYTES":      8,
		"INGRESS_PRIORITY_GROUP_STAT_DROPPED_PACKETS":                9,
		"INGRESS_PRIORITY_GROUP_STAT_CUSTOM_RANGE_BASE":              10,
	}
)

func (x IngressPriorityGroupStat) Enum() *IngressPriorityGroupStat {
	p := new(IngressPriorityGroupStat)
	*p = x
	return p
}

func (x IngressPriorityGroupStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IngressPriorityGroupStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[46].Descriptor()
}

func (IngressPriorityGroupStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[46]
}

func (x IngressPriorityGroupStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IngressPriorityGroupStat.Descriptor instead.
func (IngressPriorityGroupStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{46}
}

type InsegEntryPopQosMode int32

const (
	InsegEntryPopQosMode_INSEG_ENTRY_POP_QOS_MODE_UNSPECIFIED InsegEntryPopQosMode = 0
	InsegEntryPopQosMode_INSEG_ENTRY_POP_QOS_MODE_UNIFORM     InsegEntryPopQosMode = 1
	InsegEntryPopQosMode_INSEG_ENTRY_POP_QOS_MODE_PIPE        InsegEntryPopQosMode = 2
)

// Enum value maps for InsegEntryPopQosMode.
var (
	InsegEntryPopQosMode_name = map[int32]string{
		0: "INSEG_ENTRY_POP_QOS_MODE_UNSPECIFIED",
		1: "INSEG_ENTRY_POP_QOS_MODE_UNIFORM",
		2: "INSEG_ENTRY_POP_QOS_MODE_PIPE",
	}
	InsegEntryPopQosMode_value = map[string]int32{
		"INSEG_ENTRY_POP_QOS_MODE_UNSPECIFIED": 0,
		"INSEG_ENTRY_POP_QOS_MODE_UNIFORM":     1,
		"INSEG_ENTRY_POP_QOS_MODE_PIPE":        2,
	}
)

func (x InsegEntryPopQosMode) Enum() *InsegEntryPopQosMode {
	p := new(InsegEntryPopQosMode)
	*p = x
	return p
}

func (x InsegEntryPopQosMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsegEntryPopQosMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[47].Descriptor()
}

func (InsegEntryPopQosMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[47]
}

func (x InsegEntryPopQosMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsegEntryPopQosMode.Descriptor instead.
func (InsegEntryPopQosMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{47}
}

type InsegEntryPopTtlMode int32

const (
	InsegEntryPopTtlMode_INSEG_ENTRY_POP_TTL_MODE_UNSPECIFIED InsegEntryPopTtlMode = 0
	InsegEntryPopTtlMode_INSEG_ENTRY_POP_TTL_MODE_UNIFORM     InsegEntryPopTtlMode = 1
	InsegEntryPopTtlMode_INSEG_ENTRY_POP_TTL_MODE_PIPE        InsegEntryPopTtlMode = 2
)

// Enum value maps for InsegEntryPopTtlMode.
var (
	InsegEntryPopTtlMode_name = map[int32]string{
		0: "INSEG_ENTRY_POP_TTL_MODE_UNSPECIFIED",
		1: "INSEG_ENTRY_POP_TTL_MODE_UNIFORM",
		2: "INSEG_ENTRY_POP_TTL_MODE_PIPE",
	}
	InsegEntryPopTtlMode_value = map[string]int32{
		"INSEG_ENTRY_POP_TTL_MODE_UNSPECIFIED": 0,
		"INSEG_ENTRY_POP_TTL_MODE_UNIFORM":     1,
		"INSEG_ENTRY_POP_TTL_MODE_PIPE":        2,
	}
)

func (x InsegEntryPopTtlMode) Enum() *InsegEntryPopTtlMode {
	p := new(InsegEntryPopTtlMode)
	*p = x
	return p
}

func (x InsegEntryPopTtlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsegEntryPopTtlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[48].Descriptor()
}

func (InsegEntryPopTtlMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[48]
}

func (x InsegEntryPopTtlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsegEntryPopTtlMode.Descriptor instead.
func (InsegEntryPopTtlMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{48}
}

type InsegEntryPscType int32

const (
	InsegEntryPscType_INSEG_ENTRY_PSC_TYPE_UNSPECIFIED InsegEntryPscType = 0
	InsegEntryPscType_INSEG_ENTRY_PSC_TYPE_ELSP        InsegEntryPscType = 1
	InsegEntryPscType_INSEG_ENTRY_PSC_TYPE_LLSP        InsegEntryPscType = 2
)

// Enum value maps for InsegEntryPscType.
var (
	InsegEntryPscType_name = map[int32]string{
		0: "INSEG_ENTRY_PSC_TYPE_UNSPECIFIED",
		1: "INSEG_ENTRY_PSC_TYPE_ELSP",
		2: "INSEG_ENTRY_PSC_TYPE_LLSP",
	}
	InsegEntryPscType_value = map[string]int32{
		"INSEG_ENTRY_PSC_TYPE_UNSPECIFIED": 0,
		"INSEG_ENTRY_PSC_TYPE_ELSP":        1,
		"INSEG_ENTRY_PSC_TYPE_LLSP":        2,
	}
)

func (x InsegEntryPscType) Enum() *InsegEntryPscType {
	p := new(InsegEntryPscType)
	*p = x
	return p
}

func (x InsegEntryPscType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsegEntryPscType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[49].Descriptor()
}

func (InsegEntryPscType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[49]
}

func (x InsegEntryPscType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsegEntryPscType.Descriptor instead.
func (InsegEntryPscType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{49}
}

type IpAddrFamily int32

const (
	IpAddrFamily_IP_ADDR_FAMILY_UNSPECIFIED IpAddrFamily = 0
	IpAddrFamily_IP_ADDR_FAMILY_IPV4        IpAddrFamily = 1
	IpAddrFamily_IP_ADDR_FAMILY_IPV6        IpAddrFamily = 2
)

// Enum value maps for IpAddrFamily.
var (
	IpAddrFamily_name = map[int32]string{
		0: "IP_ADDR_FAMILY_UNSPECIFIED",
		1: "IP_ADDR_FAMILY_IPV4",
		2: "IP_ADDR_FAMILY_IPV6",
	}
	IpAddrFamily_value = map[string]int32{
		"IP_ADDR_FAMILY_UNSPECIFIED": 0,
		"IP_ADDR_FAMILY_IPV4":        1,
		"IP_ADDR_FAMILY_IPV6":        2,
	}
)

func (x IpAddrFamily) Enum() *IpAddrFamily {
	p := new(IpAddrFamily)
	*p = x
	return p
}

func (x IpAddrFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpAddrFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[50].Descriptor()
}

func (IpAddrFamily) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[50]
}

func (x IpAddrFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpAddrFamily.Descriptor instead.
func (IpAddrFamily) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{50}
}

type IpmcEntryType int32

const (
	IpmcEntryType_IPMC_ENTRY_TYPE_UNSPECIFIED IpmcEntryType = 0
	IpmcEntryType_IPMC_ENTRY_TYPE_SG          IpmcEntryType = 1
	IpmcEntryType_IPMC_ENTRY_TYPE_XG          IpmcEntryType = 2
)

// Enum value maps for IpmcEntryType.
var (
	IpmcEntryType_name = map[int32]string{
		0: "IPMC_ENTRY_TYPE_UNSPECIFIED",
		1: "IPMC_ENTRY_TYPE_SG",
		2: "IPMC_ENTRY_TYPE_XG",
	}
	IpmcEntryType_value = map[string]int32{
		"IPMC_ENTRY_TYPE_UNSPECIFIED": 0,
		"IPMC_ENTRY_TYPE_SG":          1,
		"IPMC_ENTRY_TYPE_XG":          2,
	}
)

func (x IpmcEntryType) Enum() *IpmcEntryType {
	p := new(IpmcEntryType)
	*p = x
	return p
}

func (x IpmcEntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpmcEntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[51].Descriptor()
}

func (IpmcEntryType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[51]
}

func (x IpmcEntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpmcEntryType.Descriptor instead.
func (IpmcEntryType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{51}
}

type IpsecCipher int32

const (
	IpsecCipher_IPSEC_CIPHER_UNSPECIFIED  IpsecCipher = 0
	IpsecCipher_IPSEC_CIPHER_AES128_GCM16 IpsecCipher = 1
	IpsecCipher_IPSEC_CIPHER_AES256_GCM16 IpsecCipher = 2
	IpsecCipher_IPSEC_CIPHER_AES128_GMAC  IpsecCipher = 3
	IpsecCipher_IPSEC_CIPHER_AES256_GMAC  IpsecCipher = 4
)

// Enum value maps for IpsecCipher.
var (
	IpsecCipher_name = map[int32]string{
		0: "IPSEC_CIPHER_UNSPECIFIED",
		1: "IPSEC_CIPHER_AES128_GCM16",
		2: "IPSEC_CIPHER_AES256_GCM16",
		3: "IPSEC_CIPHER_AES128_GMAC",
		4: "IPSEC_CIPHER_AES256_GMAC",
	}
	IpsecCipher_value = map[string]int32{
		"IPSEC_CIPHER_UNSPECIFIED":  0,
		"IPSEC_CIPHER_AES128_GCM16": 1,
		"IPSEC_CIPHER_AES256_GCM16": 2,
		"IPSEC_CIPHER_AES128_GMAC":  3,
		"IPSEC_CIPHER_AES256_GMAC":  4,
	}
)

func (x IpsecCipher) Enum() *IpsecCipher {
	p := new(IpsecCipher)
	*p = x
	return p
}

func (x IpsecCipher) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpsecCipher) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[52].Descriptor()
}

func (IpsecCipher) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[52]
}

func (x IpsecCipher) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpsecCipher.Descriptor instead.
func (IpsecCipher) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{52}
}

type IpsecDirection int32

const (
	IpsecDirection_IPSEC_DIRECTION_UNSPECIFIED IpsecDirection = 0
	IpsecDirection_IPSEC_DIRECTION_EGRESS      IpsecDirection = 1
	IpsecDirection_IPSEC_DIRECTION_INGRESS     IpsecDirection = 2
)

// Enum value maps for IpsecDirection.
var (
	IpsecDirection_name = map[int32]string{
		0: "IPSEC_DIRECTION_UNSPECIFIED",
		1: "IPSEC_DIRECTION_EGRESS",
		2: "IPSEC_DIRECTION_INGRESS",
	}
	IpsecDirection_value = map[string]int32{
		"IPSEC_DIRECTION_UNSPECIFIED": 0,
		"IPSEC_DIRECTION_EGRESS":      1,
		"IPSEC_DIRECTION_INGRESS":     2,
	}
)

func (x IpsecDirection) Enum() *IpsecDirection {
	p := new(IpsecDirection)
	*p = x
	return p
}

func (x IpsecDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpsecDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[53].Descriptor()
}

func (IpsecDirection) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[53]
}

func (x IpsecDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpsecDirection.Descriptor instead.
func (IpsecDirection) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{53}
}

type IpsecPortStat int32

const (
	IpsecPortStat_IPSEC_PORT_STAT_UNSPECIFIED       IpsecPortStat = 0
	IpsecPortStat_IPSEC_PORT_STAT_TX_ERROR_PKTS     IpsecPortStat = 1
	IpsecPortStat_IPSEC_PORT_STAT_TX_IPSEC_PKTS     IpsecPortStat = 2
	IpsecPortStat_IPSEC_PORT_STAT_TX_NON_IPSEC_PKTS IpsecPortStat = 3
	IpsecPortStat_IPSEC_PORT_STAT_RX_ERROR_PKTS     IpsecPortStat = 4
	IpsecPortStat_IPSEC_PORT_STAT_RX_IPSEC_PKTS     IpsecPortStat = 5
	IpsecPortStat_IPSEC_PORT_STAT_RX_NON_IPSEC_PKTS IpsecPortStat = 6
)

// Enum value maps for IpsecPortStat.
var (
	IpsecPortStat_name = map[int32]string{
		0: "IPSEC_PORT_STAT_UNSPECIFIED",
		1: "IPSEC_PORT_STAT_TX_ERROR_PKTS",
		2: "IPSEC_PORT_STAT_TX_IPSEC_PKTS",
		3: "IPSEC_PORT_STAT_TX_NON_IPSEC_PKTS",
		4: "IPSEC_PORT_STAT_RX_ERROR_PKTS",
		5: "IPSEC_PORT_STAT_RX_IPSEC_PKTS",
		6: "IPSEC_PORT_STAT_RX_NON_IPSEC_PKTS",
	}
	IpsecPortStat_value = map[string]int32{
		"IPSEC_PORT_STAT_UNSPECIFIED":       0,
		"IPSEC_PORT_STAT_TX_ERROR_PKTS":     1,
		"IPSEC_PORT_STAT_TX_IPSEC_PKTS":     2,
		"IPSEC_PORT_STAT_TX_NON_IPSEC_PKTS": 3,
		"IPSEC_PORT_STAT_RX_ERROR_PKTS":     4,
		"IPSEC_PORT_STAT_RX_IPSEC_PKTS":     5,
		"IPSEC_PORT_STAT_RX_NON_IPSEC_PKTS": 6,
	}
)

func (x IpsecPortStat) Enum() *IpsecPortStat {
	p := new(IpsecPortStat)
	*p = x
	return p
}

func (x IpsecPortStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpsecPortStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[54].Descriptor()
}

func (IpsecPortStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[54]
}

func (x IpsecPortStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpsecPortStat.Descriptor instead.
func (IpsecPortStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{54}
}

type IpsecSaOctetCountStatus int32

const (
	IpsecSaOctetCountStatus_IPSEC_SA_OCTET_COUNT_STATUS_UNSPECIFIED          IpsecSaOctetCountStatus = 0
	IpsecSaOctetCountStatus_IPSEC_SA_OCTET_COUNT_STATUS_BELOW_LOW_WATERMARK  IpsecSaOctetCountStatus = 1
	IpsecSaOctetCountStatus_IPSEC_SA_OCTET_COUNT_STATUS_BELOW_HIGH_WATERMARK IpsecSaOctetCountStatus = 2
	IpsecSaOctetCountStatus_IPSEC_SA_OCTET_COUNT_STATUS_ABOVE_HIGH_WATERMARK IpsecSaOctetCountStatus = 3
)

// Enum value maps for IpsecSaOctetCountStatus.
var (
	IpsecSaOctetCountStatus_name = map[int32]string{
		0: "IPSEC_SA_OCTET_COUNT_STATUS_UNSPECIFIED",
		1: "IPSEC_SA_OCTET_COUNT_STATUS_BELOW_LOW_WATERMARK",
		2: "IPSEC_SA_OCTET_COUNT_STATUS_BELOW_HIGH_WATERMARK",
		3: "IPSEC_SA_OCTET_COUNT_STATUS_ABOVE_HIGH_WATERMARK",
	}
	IpsecSaOctetCountStatus_value = map[string]int32{
		"IPSEC_SA_OCTET_COUNT_STATUS_UNSPECIFIED":          0,
		"IPSEC_SA_OCTET_COUNT_STATUS_BELOW_LOW_WATERMARK":  1,
		"IPSEC_SA_OCTET_COUNT_STATUS_BELOW_HIGH_WATERMARK": 2,
		"IPSEC_SA_OCTET_COUNT_STATUS_ABOVE_HIGH_WATERMARK": 3,
	}
)

func (x IpsecSaOctetCountStatus) Enum() *IpsecSaOctetCountStatus {
	p := new(IpsecSaOctetCountStatus)
	*p = x
	return p
}

func (x IpsecSaOctetCountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpsecSaOctetCountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[55].Descriptor()
}

func (IpsecSaOctetCountStatus) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[55]
}

func (x IpsecSaOctetCountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpsecSaOctetCountStatus.Descriptor instead.
func (IpsecSaOctetCountStatus) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{55}
}

type IpsecSaStat int32

const (
	IpsecSaStat_IPSEC_SA_STAT_UNSPECIFIED           IpsecSaStat = 0
	IpsecSaStat_IPSEC_SA_STAT_PROTECTED_OCTETS      IpsecSaStat = 1
	IpsecSaStat_IPSEC_SA_STAT_PROTECTED_PKTS        IpsecSaStat = 2
	IpsecSaStat_IPSEC_SA_STAT_GOOD_PKTS             IpsecSaStat = 3
	IpsecSaStat_IPSEC_SA_STAT_BAD_HEADER_PKTS_IN    IpsecSaStat = 4
	IpsecSaStat_IPSEC_SA_STAT_REPLAYED_PKTS_IN      IpsecSaStat = 5
	IpsecSaStat_IPSEC_SA_STAT_LATE_PKTS_IN          IpsecSaStat = 6
	IpsecSaStat_IPSEC_SA_STAT_BAD_TRAILER_PKTS_IN   IpsecSaStat = 7
	IpsecSaStat_IPSEC_SA_STAT_AUTH_FAIL_PKTS_IN     IpsecSaStat = 8
	IpsecSaStat_IPSEC_SA_STAT_DUMMY_DROPPED_PKTS_IN IpsecSaStat = 9
	IpsecSaStat_IPSEC_SA_STAT_OTHER_DROPPED_PKTS    IpsecSaStat = 10
)

// Enum value maps for IpsecSaStat.
var (
	IpsecSaStat_name = map[int32]string{
		0:  "IPSEC_SA_STAT_UNSPECIFIED",
		1:  "IPSEC_SA_STAT_PROTECTED_OCTETS",
		2:  "IPSEC_SA_STAT_PROTECTED_PKTS",
		3:  "IPSEC_SA_STAT_GOOD_PKTS",
		4:  "IPSEC_SA_STAT_BAD_HEADER_PKTS_IN",
		5:  "IPSEC_SA_STAT_REPLAYED_PKTS_IN",
		6:  "IPSEC_SA_STAT_LATE_PKTS_IN",
		7:  "IPSEC_SA_STAT_BAD_TRAILER_PKTS_IN",
		8:  "IPSEC_SA_STAT_AUTH_FAIL_PKTS_IN",
		9:  "IPSEC_SA_STAT_DUMMY_DROPPED_PKTS_IN",
		10: "IPSEC_SA_STAT_OTHER_DROPPED_PKTS",
	}
	IpsecSaStat_value = map[string]int32{
		"IPSEC_SA_STAT_UNSPECIFIED":           0,
		"IPSEC_SA_STAT_PROTECTED_OCTETS":      1,
		"IPSEC_SA_STAT_PROTECTED_PKTS":        2,
		"IPSEC_SA_STAT_GOOD_PKTS":             3,
		"IPSEC_SA_STAT_BAD_HEADER_PKTS_IN":    4,
		"IPSEC_SA_STAT_REPLAYED_PKTS_IN":      5,
		"IPSEC_SA_STAT_LATE_PKTS_IN":          6,
		"IPSEC_SA_STAT_BAD_TRAILER_PKTS_IN":   7,
		"IPSEC_SA_STAT_AUTH_FAIL_PKTS_IN":     8,
		"IPSEC_SA_STAT_DUMMY_DROPPED_PKTS_IN": 9,
		"IPSEC_SA_STAT_OTHER_DROPPED_PKTS":    10,
	}
)

func (x IpsecSaStat) Enum() *IpsecSaStat {
	p := new(IpsecSaStat)
	*p = x
	return p
}

func (x IpsecSaStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpsecSaStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[56].Descriptor()
}

func (IpsecSaStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[56]
}

func (x IpsecSaStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpsecSaStat.Descriptor instead.
func (IpsecSaStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{56}
}

type IsolationGroupType int32

const (
	IsolationGroupType_ISOLATION_GROUP_TYPE_UNSPECIFIED IsolationGroupType = 0
	IsolationGroupType_ISOLATION_GROUP_TYPE_PORT        IsolationGroupType = 1
	IsolationGroupType_ISOLATION_GROUP_TYPE_BRIDGE_PORT IsolationGroupType = 2
)

// Enum value maps for IsolationGroupType.
var (
	IsolationGroupType_name = map[int32]string{
		0: "ISOLATION_GROUP_TYPE_UNSPECIFIED",
		1: "ISOLATION_GROUP_TYPE_PORT",
		2: "ISOLATION_GROUP_TYPE_BRIDGE_PORT",
	}
	IsolationGroupType_value = map[string]int32{
		"ISOLATION_GROUP_TYPE_UNSPECIFIED": 0,
		"ISOLATION_GROUP_TYPE_PORT":        1,
		"ISOLATION_GROUP_TYPE_BRIDGE_PORT": 2,
	}
)

func (x IsolationGroupType) Enum() *IsolationGroupType {
	p := new(IsolationGroupType)
	*p = x
	return p
}

func (x IsolationGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IsolationGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[57].Descriptor()
}

func (IsolationGroupType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[57]
}

func (x IsolationGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IsolationGroupType.Descriptor instead.
func (IsolationGroupType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{57}
}

type L2McEntryType int32

const (
	L2McEntryType_L2MC_ENTRY_TYPE_UNSPECIFIED L2McEntryType = 0
	L2McEntryType_L2MC_ENTRY_TYPE_SG          L2McEntryType = 1
	L2McEntryType_L2MC_ENTRY_TYPE_XG          L2McEntryType = 2
)

// Enum value maps for L2McEntryType.
var (
	L2McEntryType_name = map[int32]string{
		0: "L2MC_ENTRY_TYPE_UNSPECIFIED",
		1: "L2MC_ENTRY_TYPE_SG",
		2: "L2MC_ENTRY_TYPE_XG",
	}
	L2McEntryType_value = map[string]int32{
		"L2MC_ENTRY_TYPE_UNSPECIFIED": 0,
		"L2MC_ENTRY_TYPE_SG":          1,
		"L2MC_ENTRY_TYPE_XG":          2,
	}
)

func (x L2McEntryType) Enum() *L2McEntryType {
	p := new(L2McEntryType)
	*p = x
	return p
}

func (x L2McEntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (L2McEntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[58].Descriptor()
}

func (L2McEntryType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[58]
}

func (x L2McEntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use L2McEntryType.Descriptor instead.
func (L2McEntryType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{58}
}

type LogLevel int32

const (
	LogLevel_LOG_LEVEL_UNSPECIFIED LogLevel = 0
	LogLevel_LOG_LEVEL_DEBUG       LogLevel = 1
	LogLevel_LOG_LEVEL_INFO        LogLevel = 2
	LogLevel_LOG_LEVEL_NOTICE      LogLevel = 3
	LogLevel_LOG_LEVEL_WARN        LogLevel = 4
	LogLevel_LOG_LEVEL_ERROR       LogLevel = 5
	LogLevel_LOG_LEVEL_CRITICAL    LogLevel = 6
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_UNSPECIFIED",
		1: "LOG_LEVEL_DEBUG",
		2: "LOG_LEVEL_INFO",
		3: "LOG_LEVEL_NOTICE",
		4: "LOG_LEVEL_WARN",
		5: "LOG_LEVEL_ERROR",
		6: "LOG_LEVEL_CRITICAL",
	}
	LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNSPECIFIED": 0,
		"LOG_LEVEL_DEBUG":       1,
		"LOG_LEVEL_INFO":        2,
		"LOG_LEVEL_NOTICE":      3,
		"LOG_LEVEL_WARN":        4,
		"LOG_LEVEL_ERROR":       5,
		"LOG_LEVEL_CRITICAL":    6,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[59].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[59]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{59}
}

type MacsecCipherSuite int32

const (
	MacsecCipherSuite_MACSEC_CIPHER_SUITE_UNSPECIFIED     MacsecCipherSuite = 0
	MacsecCipherSuite_MACSEC_CIPHER_SUITE_GCM_AES_128     MacsecCipherSuite = 1
	MacsecCipherSuite_MACSEC_CIPHER_SUITE_GCM_AES_256     MacsecCipherSuite = 2
	MacsecCipherSuite_MACSEC_CIPHER_SUITE_GCM_AES_XPN_128 MacsecCipherSuite = 3
	MacsecCipherSuite_MACSEC_CIPHER_SUITE_GCM_AES_XPN_256 MacsecCipherSuite = 4
)

// Enum value maps for MacsecCipherSuite.
var (
	MacsecCipherSuite_name = map[int32]string{
		0: "MACSEC_CIPHER_SUITE_UNSPECIFIED",
		1: "MACSEC_CIPHER_SUITE_GCM_AES_128",
		2: "MACSEC_CIPHER_SUITE_GCM_AES_256",
		3: "MACSEC_CIPHER_SUITE_GCM_AES_XPN_128",
		4: "MACSEC_CIPHER_SUITE_GCM_AES_XPN_256",
	}
	MacsecCipherSuite_value = map[string]int32{
		"MACSEC_CIPHER_SUITE_UNSPECIFIED":     0,
		"MACSEC_CIPHER_SUITE_GCM_AES_128":     1,
		"MACSEC_CIPHER_SUITE_GCM_AES_256":     2,
		"MACSEC_CIPHER_SUITE_GCM_AES_XPN_128": 3,
		"MACSEC_CIPHER_SUITE_GCM_AES_XPN_256": 4,
	}
)

func (x MacsecCipherSuite) Enum() *MacsecCipherSuite {
	p := new(MacsecCipherSuite)
	*p = x
	return p
}

func (x MacsecCipherSuite) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecCipherSuite) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[60].Descriptor()
}

func (MacsecCipherSuite) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[60]
}

func (x MacsecCipherSuite) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecCipherSuite.Descriptor instead.
func (MacsecCipherSuite) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{60}
}

type MacsecDirection int32

const (
	MacsecDirection_MACSEC_DIRECTION_UNSPECIFIED MacsecDirection = 0
	MacsecDirection_MACSEC_DIRECTION_EGRESS      MacsecDirection = 1
	MacsecDirection_MACSEC_DIRECTION_INGRESS     MacsecDirection = 2
)

// Enum value maps for MacsecDirection.
var (
	MacsecDirection_name = map[int32]string{
		0: "MACSEC_DIRECTION_UNSPECIFIED",
		1: "MACSEC_DIRECTION_EGRESS",
		2: "MACSEC_DIRECTION_INGRESS",
	}
	MacsecDirection_value = map[string]int32{
		"MACSEC_DIRECTION_UNSPECIFIED": 0,
		"MACSEC_DIRECTION_EGRESS":      1,
		"MACSEC_DIRECTION_INGRESS":     2,
	}
)

func (x MacsecDirection) Enum() *MacsecDirection {
	p := new(MacsecDirection)
	*p = x
	return p
}

func (x MacsecDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[61].Descriptor()
}

func (MacsecDirection) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[61]
}

func (x MacsecDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecDirection.Descriptor instead.
func (MacsecDirection) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{61}
}

type MacsecFlowStat int32

const (
	MacsecFlowStat_MACSEC_FLOW_STAT_UNSPECIFIED                 MacsecFlowStat = 0
	MacsecFlowStat_MACSEC_FLOW_STAT_OTHER_ERR                   MacsecFlowStat = 1
	MacsecFlowStat_MACSEC_FLOW_STAT_OCTETS_UNCONTROLLED         MacsecFlowStat = 2
	MacsecFlowStat_MACSEC_FLOW_STAT_OCTETS_CONTROLLED           MacsecFlowStat = 3
	MacsecFlowStat_MACSEC_FLOW_STAT_OUT_OCTETS_COMMON           MacsecFlowStat = 4
	MacsecFlowStat_MACSEC_FLOW_STAT_UCAST_PKTS_UNCONTROLLED     MacsecFlowStat = 5
	MacsecFlowStat_MACSEC_FLOW_STAT_UCAST_PKTS_CONTROLLED       MacsecFlowStat = 6
	MacsecFlowStat_MACSEC_FLOW_STAT_MULTICAST_PKTS_UNCONTROLLED MacsecFlowStat = 7
	MacsecFlowStat_MACSEC_FLOW_STAT_MULTICAST_PKTS_CONTROLLED   MacsecFlowStat = 8
	MacsecFlowStat_MACSEC_FLOW_STAT_BROADCAST_PKTS_UNCONTROLLED MacsecFlowStat = 9
	MacsecFlowStat_MACSEC_FLOW_STAT_BROADCAST_PKTS_CONTROLLED   MacsecFlowStat = 10
	MacsecFlowStat_MACSEC_FLOW_STAT_CONTROL_PKTS                MacsecFlowStat = 11
	MacsecFlowStat_MACSEC_FLOW_STAT_PKTS_UNTAGGED               MacsecFlowStat = 12
	MacsecFlowStat_MACSEC_FLOW_STAT_IN_TAGGED_CONTROL_PKTS      MacsecFlowStat = 13
	MacsecFlowStat_MACSEC_FLOW_STAT_OUT_PKTS_TOO_LONG           MacsecFlowStat = 14
	MacsecFlowStat_MACSEC_FLOW_STAT_IN_PKTS_NO_TAG              MacsecFlowStat = 15
	MacsecFlowStat_MACSEC_FLOW_STAT_IN_PKTS_BAD_TAG             MacsecFlowStat = 16
	MacsecFlowStat_MACSEC_FLOW_STAT_IN_PKTS_NO_SCI              MacsecFlowStat = 17
	MacsecFlowStat_MACSEC_FLOW_STAT_IN_PKTS_UNKNOWN_SCI         MacsecFlowStat = 18
	MacsecFlowStat_MACSEC_FLOW_STAT_IN_PKTS_OVERRUN             MacsecFlowStat = 19
)

// Enum value maps for MacsecFlowStat.
var (
	MacsecFlowStat_name = map[int32]string{
		0:  "MACSEC_FLOW_STAT_UNSPECIFIED",
		1:  "MACSEC_FLOW_STAT_OTHER_ERR",
		2:  "MACSEC_FLOW_STAT_OCTETS_UNCONTROLLED",
		3:  "MACSEC_FLOW_STAT_OCTETS_CONTROLLED",
		4:  "MACSEC_FLOW_STAT_OUT_OCTETS_COMMON",
		5:  "MACSEC_FLOW_STAT_UCAST_PKTS_UNCONTROLLED",
		6:  "MACSEC_FLOW_STAT_UCAST_PKTS_CONTROLLED",
		7:  "MACSEC_FLOW_STAT_MULTICAST_PKTS_UNCONTROLLED",
		8:  "MACSEC_FLOW_STAT_MULTICAST_PKTS_CONTROLLED",
		9:  "MACSEC_FLOW_STAT_BROADCAST_PKTS_UNCONTROLLED",
		10: "MACSEC_FLOW_STAT_BROADCAST_PKTS_CONTROLLED",
		11: "MACSEC_FLOW_STAT_CONTROL_PKTS",
		12: "MACSEC_FLOW_STAT_PKTS_UNTAGGED",
		13: "MACSEC_FLOW_STAT_IN_TAGGED_CONTROL_PKTS",
		14: "MACSEC_FLOW_STAT_OUT_PKTS_TOO_LONG",
		15: "MACSEC_FLOW_STAT_IN_PKTS_NO_TAG",
		16: "MACSEC_FLOW_STAT_IN_PKTS_BAD_TAG",
		17: "MACSEC_FLOW_STAT_IN_PKTS_NO_SCI",
		18: "MACSEC_FLOW_STAT_IN_PKTS_UNKNOWN_SCI",
		19: "MACSEC_FLOW_STAT_IN_PKTS_OVERRUN",
	}
	MacsecFlowStat_value = map[string]int32{
		"MACSEC_FLOW_STAT_UNSPECIFIED":                 0,
		"MACSEC_FLOW_STAT_OTHER_ERR":                   1,
		"MACSEC_FLOW_STAT_OCTETS_UNCONTROLLED":         2,
		"MACSEC_FLOW_STAT_OCTETS_CONTROLLED":           3,
		"MACSEC_FLOW_STAT_OUT_OCTETS_COMMON":           4,
		"MACSEC_FLOW_STAT_UCAST_PKTS_UNCONTROLLED":     5,
		"MACSEC_FLOW_STAT_UCAST_PKTS_CONTROLLED":       6,
		"MACSEC_FLOW_STAT_MULTICAST_PKTS_UNCONTROLLED": 7,
		"MACSEC_FLOW_STAT_MULTICAST_PKTS_CONTROLLED":   8,
		"MACSEC_FLOW_STAT_BROADCAST_PKTS_UNCONTROLLED": 9,
		"MACSEC_FLOW_STAT_BROADCAST_PKTS_CONTROLLED":   10,
		"MACSEC_FLOW_STAT_CONTROL_PKTS":                11,
		"MACSEC_FLOW_STAT_PKTS_UNTAGGED":               12,
		"MACSEC_FLOW_STAT_IN_TAGGED_CONTROL_PKTS":      13,
		"MACSEC_FLOW_STAT_OUT_PKTS_TOO_LONG":           14,
		"MACSEC_FLOW_STAT_IN_PKTS_NO_TAG":              15,
		"MACSEC_FLOW_STAT_IN_PKTS_BAD_TAG":             16,
		"MACSEC_FLOW_STAT_IN_PKTS_NO_SCI":              17,
		"MACSEC_FLOW_STAT_IN_PKTS_UNKNOWN_SCI":         18,
		"MACSEC_FLOW_STAT_IN_PKTS_OVERRUN":             19,
	}
)

func (x MacsecFlowStat) Enum() *MacsecFlowStat {
	p := new(MacsecFlowStat)
	*p = x
	return p
}

func (x MacsecFlowStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecFlowStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[62].Descriptor()
}

func (MacsecFlowStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[62]
}

func (x MacsecFlowStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecFlowStat.Descriptor instead.
func (MacsecFlowStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{62}
}

type MacsecPortStat int32

const (
	MacsecPortStat_MACSEC_PORT_STAT_UNSPECIFIED          MacsecPortStat = 0
	MacsecPortStat_MACSEC_PORT_STAT_PRE_MACSEC_DROP_PKTS MacsecPortStat = 1
	MacsecPortStat_MACSEC_PORT_STAT_CONTROL_PKTS         MacsecPortStat = 2
	MacsecPortStat_MACSEC_PORT_STAT_DATA_PKTS            MacsecPortStat = 3
)

// Enum value maps for MacsecPortStat.
var (
	MacsecPortStat_name = map[int32]string{
		0: "MACSEC_PORT_STAT_UNSPECIFIED",
		1: "MACSEC_PORT_STAT_PRE_MACSEC_DROP_PKTS",
		2: "MACSEC_PORT_STAT_CONTROL_PKTS",
		3: "MACSEC_PORT_STAT_DATA_PKTS",
	}
	MacsecPortStat_value = map[string]int32{
		"MACSEC_PORT_STAT_UNSPECIFIED":          0,
		"MACSEC_PORT_STAT_PRE_MACSEC_DROP_PKTS": 1,
		"MACSEC_PORT_STAT_CONTROL_PKTS":         2,
		"MACSEC_PORT_STAT_DATA_PKTS":            3,
	}
)

func (x MacsecPortStat) Enum() *MacsecPortStat {
	p := new(MacsecPortStat)
	*p = x
	return p
}

func (x MacsecPortStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecPortStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[63].Descriptor()
}

func (MacsecPortStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[63]
}

func (x MacsecPortStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecPortStat.Descriptor instead.
func (MacsecPortStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{63}
}

type MacsecSaStat int32

const (
	MacsecSaStat_MACSEC_SA_STAT_UNSPECIFIED          MacsecSaStat = 0
	MacsecSaStat_MACSEC_SA_STAT_OCTETS_ENCRYPTED     MacsecSaStat = 1
	MacsecSaStat_MACSEC_SA_STAT_OCTETS_PROTECTED     MacsecSaStat = 2
	MacsecSaStat_MACSEC_SA_STAT_OUT_PKTS_ENCRYPTED   MacsecSaStat = 3
	MacsecSaStat_MACSEC_SA_STAT_OUT_PKTS_PROTECTED   MacsecSaStat = 4
	MacsecSaStat_MACSEC_SA_STAT_IN_PKTS_UNCHECKED    MacsecSaStat = 5
	MacsecSaStat_MACSEC_SA_STAT_IN_PKTS_DELAYED      MacsecSaStat = 6
	MacsecSaStat_MACSEC_SA_STAT_IN_PKTS_LATE         MacsecSaStat = 7
	MacsecSaStat_MACSEC_SA_STAT_IN_PKTS_INVALID      MacsecSaStat = 8
	MacsecSaStat_MACSEC_SA_STAT_IN_PKTS_NOT_VALID    MacsecSaStat = 9
	MacsecSaStat_MACSEC_SA_STAT_IN_PKTS_NOT_USING_SA MacsecSaStat = 10
	MacsecSaStat_MACSEC_SA_STAT_IN_PKTS_UNUSED_SA    MacsecSaStat = 11
	MacsecSaStat_MACSEC_SA_STAT_IN_PKTS_OK           MacsecSaStat = 12
)

// Enum value maps for MacsecSaStat.
var (
	MacsecSaStat_name = map[int32]string{
		0:  "MACSEC_SA_STAT_UNSPECIFIED",
		1:  "MACSEC_SA_STAT_OCTETS_ENCRYPTED",
		2:  "MACSEC_SA_STAT_OCTETS_PROTECTED",
		3:  "MACSEC_SA_STAT_OUT_PKTS_ENCRYPTED",
		4:  "MACSEC_SA_STAT_OUT_PKTS_PROTECTED",
		5:  "MACSEC_SA_STAT_IN_PKTS_UNCHECKED",
		6:  "MACSEC_SA_STAT_IN_PKTS_DELAYED",
		7:  "MACSEC_SA_STAT_IN_PKTS_LATE",
		8:  "MACSEC_SA_STAT_IN_PKTS_INVALID",
		9:  "MACSEC_SA_STAT_IN_PKTS_NOT_VALID",
		10: "MACSEC_SA_STAT_IN_PKTS_NOT_USING_SA",
		11: "MACSEC_SA_STAT_IN_PKTS_UNUSED_SA",
		12: "MACSEC_SA_STAT_IN_PKTS_OK",
	}
	MacsecSaStat_value = map[string]int32{
		"MACSEC_SA_STAT_UNSPECIFIED":          0,
		"MACSEC_SA_STAT_OCTETS_ENCRYPTED":     1,
		"MACSEC_SA_STAT_OCTETS_PROTECTED":     2,
		"MACSEC_SA_STAT_OUT_PKTS_ENCRYPTED":   3,
		"MACSEC_SA_STAT_OUT_PKTS_PROTECTED":   4,
		"MACSEC_SA_STAT_IN_PKTS_UNCHECKED":    5,
		"MACSEC_SA_STAT_IN_PKTS_DELAYED":      6,
		"MACSEC_SA_STAT_IN_PKTS_LATE":         7,
		"MACSEC_SA_STAT_IN_PKTS_INVALID":      8,
		"MACSEC_SA_STAT_IN_PKTS_NOT_VALID":    9,
		"MACSEC_SA_STAT_IN_PKTS_NOT_USING_SA": 10,
		"MACSEC_SA_STAT_IN_PKTS_UNUSED_SA":    11,
		"MACSEC_SA_STAT_IN_PKTS_OK":           12,
	}
)

func (x MacsecSaStat) Enum() *MacsecSaStat {
	p := new(MacsecSaStat)
	*p = x
	return p
}

func (x MacsecSaStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecSaStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[64].Descriptor()
}

func (MacsecSaStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[64]
}

func (x MacsecSaStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecSaStat.Descriptor instead.
func (MacsecSaStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{64}
}

type MacsecScStat int32

const (
	MacsecScStat_MACSEC_SC_STAT_UNSPECIFIED   MacsecScStat = 0
	MacsecScStat_MACSEC_SC_STAT_SA_NOT_IN_USE MacsecScStat = 1
)

// Enum value maps for MacsecScStat.
var (
	MacsecScStat_name = map[int32]string{
		0: "MACSEC_SC_STAT_UNSPECIFIED",
		1: "MACSEC_SC_STAT_SA_NOT_IN_USE",
	}
	MacsecScStat_value = map[string]int32{
		"MACSEC_SC_STAT_UNSPECIFIED":   0,
		"MACSEC_SC_STAT_SA_NOT_IN_USE": 1,
	}
)

func (x MacsecScStat) Enum() *MacsecScStat {
	p := new(MacsecScStat)
	*p = x
	return p
}

func (x MacsecScStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecScStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[65].Descriptor()
}

func (MacsecScStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[65]
}

func (x MacsecScStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecScStat.Descriptor instead.
func (MacsecScStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{65}
}

type MeterType int32

const (
	MeterType_METER_TYPE_UNSPECIFIED       MeterType = 0
	MeterType_METER_TYPE_PACKETS           MeterType = 1
	MeterType_METER_TYPE_BYTES             MeterType = 2
	MeterType_METER_TYPE_CUSTOM_RANGE_BASE MeterType = 3
)

// Enum value maps for MeterType.
var (
	MeterType_name = map[int32]string{
		0: "METER_TYPE_UNSPECIFIED",
		1: "METER_TYPE_PACKETS",
		2: "METER_TYPE_BYTES",
		3: "METER_TYPE_CUSTOM_RANGE_BASE",
	}
	MeterType_value = map[string]int32{
		"METER_TYPE_UNSPECIFIED":       0,
		"METER_TYPE_PACKETS":           1,
		"METER_TYPE_BYTES":             2,
		"METER_TYPE_CUSTOM_RANGE_BASE": 3,
	}
)

func (x MeterType) Enum() *MeterType {
	p := new(MeterType)
	*p = x
	return p
}

func (x MeterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeterType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[66].Descriptor()
}

func (MeterType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[66]
}

func (x MeterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeterType.Descriptor instead.
func (MeterType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{66}
}

type MirrorSessionCongestionMode int32

const (
	MirrorSessionCongestionMode_MIRROR_SESSION_CONGESTION_MODE_UNSPECIFIED MirrorSessionCongestionMode = 0
	MirrorSessionCongestionMode_MIRROR_SESSION_CONGESTION_MODE_INDEPENDENT MirrorSessionCongestionMode = 1
	MirrorSessionCongestionMode_MIRROR_SESSION_CONGESTION_MODE_CORRELATED  MirrorSessionCongestionMode = 2
)

// Enum value maps for MirrorSessionCongestionMode.
var (
	MirrorSessionCongestionMode_name = map[int32]string{
		0: "MIRROR_SESSION_CONGESTION_MODE_UNSPECIFIED",
		1: "MIRROR_SESSION_CONGESTION_MODE_INDEPENDENT",
		2: "MIRROR_SESSION_CONGESTION_MODE_CORRELATED",
	}
	MirrorSessionCongestionMode_value = map[string]int32{
		"MIRROR_SESSION_CONGESTION_MODE_UNSPECIFIED": 0,
		"MIRROR_SESSION_CONGESTION_MODE_INDEPENDENT": 1,
		"MIRROR_SESSION_CONGESTION_MODE_CORRELATED":  2,
	}
)

func (x MirrorSessionCongestionMode) Enum() *MirrorSessionCongestionMode {
	p := new(MirrorSessionCongestionMode)
	*p = x
	return p
}

func (x MirrorSessionCongestionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MirrorSessionCongestionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[67].Descriptor()
}

func (MirrorSessionCongestionMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[67]
}

func (x MirrorSessionCongestionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MirrorSessionCongestionMode.Descriptor instead.
func (MirrorSessionCongestionMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{67}
}

type MirrorSessionType int32

const (
	MirrorSessionType_MIRROR_SESSION_TYPE_UNSPECIFIED     MirrorSessionType = 0
	MirrorSessionType_MIRROR_SESSION_TYPE_LOCAL           MirrorSessionType = 1
	MirrorSessionType_MIRROR_SESSION_TYPE_REMOTE          MirrorSessionType = 2
	MirrorSessionType_MIRROR_SESSION_TYPE_ENHANCED_REMOTE MirrorSessionType = 3
	MirrorSessionType_MIRROR_SESSION_TYPE_SFLOW           MirrorSessionType = 4
)

// Enum value maps for MirrorSessionType.
var (
	MirrorSessionType_name = map[int32]string{
		0: "MIRROR_SESSION_TYPE_UNSPECIFIED",
		1: "MIRROR_SESSION_TYPE_LOCAL",
		2: "MIRROR_SESSION_TYPE_REMOTE",
		3: "MIRROR_SESSION_TYPE_ENHANCED_REMOTE",
		4: "MIRROR_SESSION_TYPE_SFLOW",
	}
	MirrorSessionType_value = map[string]int32{
		"MIRROR_SESSION_TYPE_UNSPECIFIED":     0,
		"MIRROR_SESSION_TYPE_LOCAL":           1,
		"MIRROR_SESSION_TYPE_REMOTE":          2,
		"MIRROR_SESSION_TYPE_ENHANCED_REMOTE": 3,
		"MIRROR_SESSION_TYPE_SFLOW":           4,
	}
)

func (x MirrorSessionType) Enum() *MirrorSessionType {
	p := new(MirrorSessionType)
	*p = x
	return p
}

func (x MirrorSessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MirrorSessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[68].Descriptor()
}

func (MirrorSessionType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[68]
}

func (x MirrorSessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MirrorSessionType.Descriptor instead.
func (MirrorSessionType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{68}
}

type MySidEntryEndpointBehaviorFlavor int32

const (
	MySidEntryEndpointBehaviorFlavor_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_UNSPECIFIED         MySidEntryEndpointBehaviorFlavor = 0
	MySidEntryEndpointBehaviorFlavor_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_NONE                MySidEntryEndpointBehaviorFlavor = 1
	MySidEntryEndpointBehaviorFlavor_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP                 MySidEntryEndpointBehaviorFlavor = 2
	MySidEntryEndpointBehaviorFlavor_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_USP                 MySidEntryEndpointBehaviorFlavor = 3
	MySidEntryEndpointBehaviorFlavor_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_USD                 MySidEntryEndpointBehaviorFlavor = 4
	MySidEntryEndpointBehaviorFlavor_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP_AND_USP         MySidEntryEndpointBehaviorFlavor = 5
	MySidEntryEndpointBehaviorFlavor_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_USD_AND_USP         MySidEntryEndpointBehaviorFlavor = 6
	MySidEntryEndpointBehaviorFlavor_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP_AND_USD         MySidEntryEndpointBehaviorFlavor = 7
	MySidEntryEndpointBehaviorFlavor_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP_AND_USP_AND_USD MySidEntryEndpointBehaviorFlavor = 8
)

// Enum value maps for MySidEntryEndpointBehaviorFlavor.
var (
	MySidEntryEndpointBehaviorFlavor_name = map[int32]string{
		0: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_UNSPECIFIED",
		1: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_NONE",
		2: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP",
		3: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_USP",
		4: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_USD",
		5: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP_AND_USP",
		6: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_USD_AND_USP",
		7: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP_AND_USD",
		8: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP_AND_USP_AND_USD",
	}
	MySidEntryEndpointBehaviorFlavor_value = map[string]int32{
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_UNSPECIFIED":         0,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_NONE":                1,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP":                 2,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_USP":                 3,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_USD":                 4,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP_AND_USP":         5,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_USD_AND_USP":         6,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP_AND_USD":         7,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP_AND_USP_AND_USD": 8,
	}
)

func (x MySidEntryEndpointBehaviorFlavor) Enum() *MySidEntryEndpointBehaviorFlavor {
	p := new(MySidEntryEndpointBehaviorFlavor)
	*p = x
	return p
}

func (x MySidEntryEndpointBehaviorFlavor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MySidEntryEndpointBehaviorFlavor) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[69].Descriptor()
}

func (MySidEntryEndpointBehaviorFlavor) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[69]
}

func (x MySidEntryEndpointBehaviorFlavor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MySidEntryEndpointBehaviorFlavor.Descriptor instead.
func (MySidEntryEndpointBehaviorFlavor) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{69}
}

type MySidEntryEndpointBehavior int32

const (
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UNSPECIFIED        MySidEntryEndpointBehavior = 0
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_E                  MySidEntryEndpointBehavior = 1
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_X                  MySidEntryEndpointBehavior = 2
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_T                  MySidEntryEndpointBehavior = 3
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DX6                MySidEntryEndpointBehavior = 4
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DX4                MySidEntryEndpointBehavior = 5
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DT6                MySidEntryEndpointBehavior = 6
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DT4                MySidEntryEndpointBehavior = 7
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DT46               MySidEntryEndpointBehavior = 8
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_ENCAPS          MySidEntryEndpointBehavior = 9
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_ENCAPS_RED      MySidEntryEndpointBehavior = 10
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_INSERT          MySidEntryEndpointBehavior = 11
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_INSERT_RED      MySidEntryEndpointBehavior = 12
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UN                 MySidEntryEndpointBehavior = 13
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UA                 MySidEntryEndpointBehavior = 14
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_CUSTOM_RANGE_START MySidEntryEndpointBehavior = 15
	MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_CUSTOM_RANGE_END   MySidEntryEndpointBehavior = 16
)

// Enum value maps for MySidEntryEndpointBehavior.
var (
	MySidEntryEndpointBehavior_name = map[int32]string{
		0:  "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UNSPECIFIED",
		1:  "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_E",
		2:  "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_X",
		3:  "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_T",
		4:  "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DX6",
		5:  "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DX4",
		6:  "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DT6",
		7:  "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DT4",
		8:  "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DT46",
		9:  "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_ENCAPS",
		10: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_ENCAPS_RED",
		11: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_INSERT",
		12: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_INSERT_RED",
		13: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UN",
		14: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UA",
		15: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_CUSTOM_RANGE_START",
		16: "MY_SID_ENTRY_ENDPOINT_BEHAVIOR_CUSTOM_RANGE_END",
	}
	MySidEntryEndpointBehavior_value = map[string]int32{
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UNSPECIFIED":        0,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_E":                  1,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_X":                  2,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_T":                  3,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DX6":                4,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DX4":                5,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DT6":                6,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DT4":                7,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DT46":               8,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_ENCAPS":          9,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_ENCAPS_RED":      10,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_INSERT":          11,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_INSERT_RED":      12,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UN":                 13,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UA":                 14,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_CUSTOM_RANGE_START": 15,
		"MY_SID_ENTRY_ENDPOINT_BEHAVIOR_CUSTOM_RANGE_END":   16,
	}
)

func (x MySidEntryEndpointBehavior) Enum() *MySidEntryEndpointBehavior {
	p := new(MySidEntryEndpointBehavior)
	*p = x
	return p
}

func (x MySidEntryEndpointBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MySidEntryEndpointBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[70].Descriptor()
}

func (MySidEntryEndpointBehavior) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[70]
}

func (x MySidEntryEndpointBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MySidEntryEndpointBehavior.Descriptor instead.
func (MySidEntryEndpointBehavior) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{70}
}

type NatType int32

const (
	NatType_NAT_TYPE_UNSPECIFIED          NatType = 0
	NatType_NAT_TYPE_NONE                 NatType = 1
	NatType_NAT_TYPE_SOURCE_NAT           NatType = 2
	NatType_NAT_TYPE_DESTINATION_NAT      NatType = 3
	NatType_NAT_TYPE_DOUBLE_NAT           NatType = 4
	NatType_NAT_TYPE_DESTINATION_NAT_POOL NatType = 5
)

// Enum value maps for NatType.
var (
	NatType_name = map[int32]string{
		0: "NAT_TYPE_UNSPECIFIED",
		1: "NAT_TYPE_NONE",
		2: "NAT_TYPE_SOURCE_NAT",
		3: "NAT_TYPE_DESTINATION_NAT",
		4: "NAT_TYPE_DOUBLE_NAT",
		5: "NAT_TYPE_DESTINATION_NAT_POOL",
	}
	NatType_value = map[string]int32{
		"NAT_TYPE_UNSPECIFIED":          0,
		"NAT_TYPE_NONE":                 1,
		"NAT_TYPE_SOURCE_NAT":           2,
		"NAT_TYPE_DESTINATION_NAT":      3,
		"NAT_TYPE_DOUBLE_NAT":           4,
		"NAT_TYPE_DESTINATION_NAT_POOL": 5,
	}
)

func (x NatType) Enum() *NatType {
	p := new(NatType)
	*p = x
	return p
}

func (x NatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NatType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[71].Descriptor()
}

func (NatType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[71]
}

func (x NatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NatType.Descriptor instead.
func (NatType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{71}
}

type NativeHashField int32

const (
	NativeHashField_NATIVE_HASH_FIELD_UNSPECIFIED       NativeHashField = 0
	NativeHashField_NATIVE_HASH_FIELD_SRC_IP            NativeHashField = 1
	NativeHashField_NATIVE_HASH_FIELD_DST_IP            NativeHashField = 2
	NativeHashField_NATIVE_HASH_FIELD_INNER_SRC_IP      NativeHashField = 3
	NativeHashField_NATIVE_HASH_FIELD_INNER_DST_IP      NativeHashField = 4
	NativeHashField_NATIVE_HASH_FIELD_SRC_IPV4          NativeHashField = 5
	NativeHashField_NATIVE_HASH_FIELD_DST_IPV4          NativeHashField = 6
	NativeHashField_NATIVE_HASH_FIELD_SRC_IPV6          NativeHashField = 7
	NativeHashField_NATIVE_HASH_FIELD_DST_IPV6          NativeHashField = 8
	NativeHashField_NATIVE_HASH_FIELD_INNER_SRC_IPV4    NativeHashField = 9
	NativeHashField_NATIVE_HASH_FIELD_INNER_DST_IPV4    NativeHashField = 10
	NativeHashField_NATIVE_HASH_FIELD_INNER_SRC_IPV6    NativeHashField = 11
	NativeHashField_NATIVE_HASH_FIELD_INNER_DST_IPV6    NativeHashField = 12
	NativeHashField_NATIVE_HASH_FIELD_VLAN_ID           NativeHashField = 13
	NativeHashField_NATIVE_HASH_FIELD_IP_PROTOCOL       NativeHashField = 14
	NativeHashField_NATIVE_HASH_FIELD_ETHERTYPE         NativeHashField = 15
	NativeHashField_NATIVE_HASH_FIELD_L4_SRC_PORT       NativeHashField = 16
	NativeHashField_NATIVE_HASH_FIELD_L4_DST_PORT       NativeHashField = 17
	NativeHashField_NATIVE_HASH_FIELD_SRC_MAC           NativeHashField = 18
	NativeHashField_NATIVE_HASH_FIELD_DST_MAC           NativeHashField = 19
	NativeHashField_NATIVE_HASH_FIELD_IN_PORT           NativeHashField = 20
	NativeHashField_NATIVE_HASH_FIELD_INNER_IP_PROTOCOL NativeHashField = 21
	NativeHashField_NATIVE_HASH_FIELD_INNER_ETHERTYPE   NativeHashField = 22
	NativeHashField_NATIVE_HASH_FIELD_INNER_L4_SRC_PORT NativeHashField = 23
	NativeHashField_NATIVE_HASH_FIELD_INNER_L4_DST_PORT NativeHashField = 24
	NativeHashField_NATIVE_HASH_FIELD_INNER_SRC_MAC     NativeHashField = 25
	NativeHashField_NATIVE_HASH_FIELD_INNER_DST_MAC     NativeHashField = 26
	NativeHashField_NATIVE_HASH_FIELD_MPLS_LABEL_ALL    NativeHashField = 27
	NativeHashField_NATIVE_HASH_FIELD_MPLS_LABEL_0      NativeHashField = 28
	NativeHashField_NATIVE_HASH_FIELD_MPLS_LABEL_1      NativeHashField = 29
	NativeHashField_NATIVE_HASH_FIELD_MPLS_LABEL_2      NativeHashField = 30
	NativeHashField_NATIVE_HASH_FIELD_MPLS_LABEL_3      NativeHashField = 31
	NativeHashField_NATIVE_HASH_FIELD_MPLS_LABEL_4      NativeHashField = 32
	NativeHashField_NATIVE_HASH_FIELD_IPV6_FLOW_LABEL   NativeHashField = 33
	NativeHashField_NATIVE_HASH_FIELD_NONE              NativeHashField = 34
)

// Enum value maps for NativeHashField.
var (
	NativeHashField_name = map[int32]string{
		0:  "NATIVE_HASH_FIELD_UNSPECIFIED",
		1:  "NATIVE_HASH_FIELD_SRC_IP",
		2:  "NATIVE_HASH_FIELD_DST_IP",
		3:  "NATIVE_HASH_FIELD_INNER_SRC_IP",
		4:  "NATIVE_HASH_FIELD_INNER_DST_IP",
		5:  "NATIVE_HASH_FIELD_SRC_IPV4",
		6:  "NATIVE_HASH_FIELD_DST_IPV4",
		7:  "NATIVE_HASH_FIELD_SRC_IPV6",
		8:  "NATIVE_HASH_FIELD_DST_IPV6",
		9:  "NATIVE_HASH_FIELD_INNER_SRC_IPV4",
		10: "NATIVE_HASH_FIELD_INNER_DST_IPV4",
		11: "NATIVE_HASH_FIELD_INNER_SRC_IPV6",
		12: "NATIVE_HASH_FIELD_INNER_DST_IPV6",
		13: "NATIVE_HASH_FIELD_VLAN_ID",
		14: "NATIVE_HASH_FIELD_IP_PROTOCOL",
		15: "NATIVE_HASH_FIELD_ETHERTYPE",
		16: "NATIVE_HASH_FIELD_L4_SRC_PORT",
		17: "NATIVE_HASH_FIELD_L4_DST_PORT",
		18: "NATIVE_HASH_FIELD_SRC_MAC",
		19: "NATIVE_HASH_FIELD_DST_MAC",
		20: "NATIVE_HASH_FIELD_IN_PORT",
		21: "NATIVE_HASH_FIELD_INNER_IP_PROTOCOL",
		22: "NATIVE_HASH_FIELD_INNER_ETHERTYPE",
		23: "NATIVE_HASH_FIELD_INNER_L4_SRC_PORT",
		24: "NATIVE_HASH_FIELD_INNER_L4_DST_PORT",
		25: "NATIVE_HASH_FIELD_INNER_SRC_MAC",
		26: "NATIVE_HASH_FIELD_INNER_DST_MAC",
		27: "NATIVE_HASH_FIELD_MPLS_LABEL_ALL",
		28: "NATIVE_HASH_FIELD_MPLS_LABEL_0",
		29: "NATIVE_HASH_FIELD_MPLS_LABEL_1",
		30: "NATIVE_HASH_FIELD_MPLS_LABEL_2",
		31: "NATIVE_HASH_FIELD_MPLS_LABEL_3",
		32: "NATIVE_HASH_FIELD_MPLS_LABEL_4",
		33: "NATIVE_HASH_FIELD_IPV6_FLOW_LABEL",
		34: "NATIVE_HASH_FIELD_NONE",
	}
	NativeHashField_value = map[string]int32{
		"NATIVE_HASH_FIELD_UNSPECIFIED":       0,
		"NATIVE_HASH_FIELD_SRC_IP":            1,
		"NATIVE_HASH_FIELD_DST_IP":            2,
		"NATIVE_HASH_FIELD_INNER_SRC_IP":      3,
		"NATIVE_HASH_FIELD_INNER_DST_IP":      4,
		"NATIVE_HASH_FIELD_SRC_IPV4":          5,
		"NATIVE_HASH_FIELD_DST_IPV4":          6,
		"NATIVE_HASH_FIELD_SRC_IPV6":          7,
		"NATIVE_HASH_FIELD_DST_IPV6":          8,
		"NATIVE_HASH_FIELD_INNER_SRC_IPV4":    9,
		"NATIVE_HASH_FIELD_INNER_DST_IPV4":    10,
		"NATIVE_HASH_FIELD_INNER_SRC_IPV6":    11,
		"NATIVE_HASH_FIELD_INNER_DST_IPV6":    12,
		"NATIVE_HASH_FIELD_VLAN_ID":           13,
		"NATIVE_HASH_FIELD_IP_PROTOCOL":       14,
		"NATIVE_HASH_FIELD_ETHERTYPE":         15,
		"NATIVE_HASH_FIELD_L4_SRC_PORT":       16,
		"NATIVE_HASH_FIELD_L4_DST_PORT":       17,
		"NATIVE_HASH_FIELD_SRC_MAC":           18,
		"NATIVE_HASH_FIELD_DST_MAC":           19,
		"NATIVE_HASH_FIELD_IN_PORT":           20,
		"NATIVE_HASH_FIELD_INNER_IP_PROTOCOL": 21,
		"NATIVE_HASH_FIELD_INNER_ETHERTYPE":   22,
		"NATIVE_HASH_FIELD_INNER_L4_SRC_PORT": 23,
		"NATIVE_HASH_FIELD_INNER_L4_DST_PORT": 24,
		"NATIVE_HASH_FIELD_INNER_SRC_MAC":     25,
		"NATIVE_HASH_FIELD_INNER_DST_MAC":     26,
		"NATIVE_HASH_FIELD_MPLS_LABEL_ALL":    27,
		"NATIVE_HASH_FIELD_MPLS_LABEL_0":      28,
		"NATIVE_HASH_FIELD_MPLS_LABEL_1":      29,
		"NATIVE_HASH_FIELD_MPLS_LABEL_2":      30,
		"NATIVE_HASH_FIELD_MPLS_LABEL_3":      31,
		"NATIVE_HASH_FIELD_MPLS_LABEL_4":      32,
		"NATIVE_HASH_FIELD_IPV6_FLOW_LABEL":   33,
		"NATIVE_HASH_FIELD_NONE":              34,
	}
)

func (x NativeHashField) Enum() *NativeHashField {
	p := new(NativeHashField)
	*p = x
	return p
}

func (x NativeHashField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NativeHashField) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[72].Descriptor()
}

func (NativeHashField) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[72]
}

func (x NativeHashField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NativeHashField.Descriptor instead.
func (NativeHashField) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{72}
}

type NextHopGroupMapType int32

const (
	NextHopGroupMapType_NEXT_HOP_GROUP_MAP_TYPE_UNSPECIFIED               NextHopGroupMapType = 0
	NextHopGroupMapType_NEXT_HOP_GROUP_MAP_TYPE_FORWARDING_CLASS_TO_INDEX NextHopGroupMapType = 1
)

// Enum value maps for NextHopGroupMapType.
var (
	NextHopGroupMapType_name = map[int32]string{
		0: "NEXT_HOP_GROUP_MAP_TYPE_UNSPECIFIED",
		1: "NEXT_HOP_GROUP_MAP_TYPE_FORWARDING_CLASS_TO_INDEX",
	}
	NextHopGroupMapType_value = map[string]int32{
		"NEXT_HOP_GROUP_MAP_TYPE_UNSPECIFIED":               0,
		"NEXT_HOP_GROUP_MAP_TYPE_FORWARDING_CLASS_TO_INDEX": 1,
	}
)

func (x NextHopGroupMapType) Enum() *NextHopGroupMapType {
	p := new(NextHopGroupMapType)
	*p = x
	return p
}

func (x NextHopGroupMapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHopGroupMapType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[73].Descriptor()
}

func (NextHopGroupMapType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[73]
}

func (x NextHopGroupMapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHopGroupMapType.Descriptor instead.
func (NextHopGroupMapType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{73}
}

type NextHopGroupMemberConfiguredRole int32

const (
	NextHopGroupMemberConfiguredRole_NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_UNSPECIFIED NextHopGroupMemberConfiguredRole = 0
	NextHopGroupMemberConfiguredRole_NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_PRIMARY     NextHopGroupMemberConfiguredRole = 1
	NextHopGroupMemberConfiguredRole_NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_STANDBY     NextHopGroupMemberConfiguredRole = 2
)

// Enum value maps for NextHopGroupMemberConfiguredRole.
var (
	NextHopGroupMemberConfiguredRole_name = map[int32]string{
		0: "NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_UNSPECIFIED",
		1: "NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_PRIMARY",
		2: "NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_STANDBY",
	}
	NextHopGroupMemberConfiguredRole_value = map[string]int32{
		"NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_UNSPECIFIED": 0,
		"NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_PRIMARY":     1,
		"NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_STANDBY":     2,
	}
)

func (x NextHopGroupMemberConfiguredRole) Enum() *NextHopGroupMemberConfiguredRole {
	p := new(NextHopGroupMemberConfiguredRole)
	*p = x
	return p
}

func (x NextHopGroupMemberConfiguredRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHopGroupMemberConfiguredRole) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[74].Descriptor()
}

func (NextHopGroupMemberConfiguredRole) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[74]
}

func (x NextHopGroupMemberConfiguredRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHopGroupMemberConfiguredRole.Descriptor instead.
func (NextHopGroupMemberConfiguredRole) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{74}
}

type NextHopGroupMemberObservedRole int32

const (
	NextHopGroupMemberObservedRole_NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_UNSPECIFIED NextHopGroupMemberObservedRole = 0
	NextHopGroupMemberObservedRole_NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_ACTIVE      NextHopGroupMemberObservedRole = 1
	NextHopGroupMemberObservedRole_NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_INACTIVE    NextHopGroupMemberObservedRole = 2
)

// Enum value maps for NextHopGroupMemberObservedRole.
var (
	NextHopGroupMemberObservedRole_name = map[int32]string{
		0: "NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_UNSPECIFIED",
		1: "NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_ACTIVE",
		2: "NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_INACTIVE",
	}
	NextHopGroupMemberObservedRole_value = map[string]int32{
		"NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_UNSPECIFIED": 0,
		"NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_ACTIVE":      1,
		"NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_INACTIVE":    2,
	}
)

func (x NextHopGroupMemberObservedRole) Enum() *NextHopGroupMemberObservedRole {
	p := new(NextHopGroupMemberObservedRole)
	*p = x
	return p
}

func (x NextHopGroupMemberObservedRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHopGroupMemberObservedRole) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[75].Descriptor()
}

func (NextHopGroupMemberObservedRole) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[75]
}

func (x NextHopGroupMemberObservedRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHopGroupMemberObservedRole.Descriptor instead.
func (NextHopGroupMemberObservedRole) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{75}
}

type NextHopGroupType int32

const (
	NextHopGroupType_NEXT_HOP_GROUP_TYPE_UNSPECIFIED            NextHopGroupType = 0
	NextHopGroupType_NEXT_HOP_GROUP_TYPE_DYNAMIC_UNORDERED_ECMP NextHopGroupType = 1
	NextHopGroupType_NEXT_HOP_GROUP_TYPE_ECMP                   NextHopGroupType = 2
	NextHopGroupType_NEXT_HOP_GROUP_TYPE_DYNAMIC_ORDERED_ECMP   NextHopGroupType = 3
	NextHopGroupType_NEXT_HOP_GROUP_TYPE_FINE_GRAIN_ECMP        NextHopGroupType = 4
	NextHopGroupType_NEXT_HOP_GROUP_TYPE_PROTECTION             NextHopGroupType = 5
	NextHopGroupType_NEXT_HOP_GROUP_TYPE_CLASS_BASED            NextHopGroupType = 6
)

// Enum value maps for NextHopGroupType.
var (
	NextHopGroupType_name = map[int32]string{
		0: "NEXT_HOP_GROUP_TYPE_UNSPECIFIED",
		1: "NEXT_HOP_GROUP_TYPE_DYNAMIC_UNORDERED_ECMP",
		2: "NEXT_HOP_GROUP_TYPE_ECMP",
		3: "NEXT_HOP_GROUP_TYPE_DYNAMIC_ORDERED_ECMP",
		4: "NEXT_HOP_GROUP_TYPE_FINE_GRAIN_ECMP",
		5: "NEXT_HOP_GROUP_TYPE_PROTECTION",
		6: "NEXT_HOP_GROUP_TYPE_CLASS_BASED",
	}
	NextHopGroupType_value = map[string]int32{
		"NEXT_HOP_GROUP_TYPE_UNSPECIFIED":            0,
		"NEXT_HOP_GROUP_TYPE_DYNAMIC_UNORDERED_ECMP": 1,
		"NEXT_HOP_GROUP_TYPE_ECMP":                   2,
		"NEXT_HOP_GROUP_TYPE_DYNAMIC_ORDERED_ECMP":   3,
		"NEXT_HOP_GROUP_TYPE_FINE_GRAIN_ECMP":        4,
		"NEXT_HOP_GROUP_TYPE_PROTECTION":             5,
		"NEXT_HOP_GROUP_TYPE_CLASS_BASED":            6,
	}
)

func (x NextHopGroupType) Enum() *NextHopGroupType {
	p := new(NextHopGroupType)
	*p = x
	return p
}

func (x NextHopGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHopGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[76].Descriptor()
}

func (NextHopGroupType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[76]
}

func (x NextHopGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHopGroupType.Descriptor instead.
func (NextHopGroupType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{76}
}

type NextHopType int32

const (
	NextHopType_NEXT_HOP_TYPE_UNSPECIFIED  NextHopType = 0
	NextHopType_NEXT_HOP_TYPE_IP           NextHopType = 1
	NextHopType_NEXT_HOP_TYPE_MPLS         NextHopType = 2
	NextHopType_NEXT_HOP_TYPE_TUNNEL_ENCAP NextHopType = 3
	NextHopType_NEXT_HOP_TYPE_SRV6_SIDLIST NextHopType = 4
)

// Enum value maps for NextHopType.
var (
	NextHopType_name = map[int32]string{
		0: "NEXT_HOP_TYPE_UNSPECIFIED",
		1: "NEXT_HOP_TYPE_IP",
		2: "NEXT_HOP_TYPE_MPLS",
		3: "NEXT_HOP_TYPE_TUNNEL_ENCAP",
		4: "NEXT_HOP_TYPE_SRV6_SIDLIST",
	}
	NextHopType_value = map[string]int32{
		"NEXT_HOP_TYPE_UNSPECIFIED":  0,
		"NEXT_HOP_TYPE_IP":           1,
		"NEXT_HOP_TYPE_MPLS":         2,
		"NEXT_HOP_TYPE_TUNNEL_ENCAP": 3,
		"NEXT_HOP_TYPE_SRV6_SIDLIST": 4,
	}
)

func (x NextHopType) Enum() *NextHopType {
	p := new(NextHopType)
	*p = x
	return p
}

func (x NextHopType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHopType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[77].Descriptor()
}

func (NextHopType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[77]
}

func (x NextHopType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHopType.Descriptor instead.
func (NextHopType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{77}
}

type ObjectType int32

const (
	ObjectType_OBJECT_TYPE_UNSPECIFIED              ObjectType = 0
	ObjectType_OBJECT_TYPE_NULL                     ObjectType = 1
	ObjectType_OBJECT_TYPE_PORT                     ObjectType = 2
	ObjectType_OBJECT_TYPE_LAG                      ObjectType = 3
	ObjectType_OBJECT_TYPE_VIRTUAL_ROUTER           ObjectType = 4
	ObjectType_OBJECT_TYPE_NEXT_HOP                 ObjectType = 5
	ObjectType_OBJECT_TYPE_NEXT_HOP_GROUP           ObjectType = 6
	ObjectType_OBJECT_TYPE_ROUTER_INTERFACE         ObjectType = 7
	ObjectType_OBJECT_TYPE_ACL_TABLE                ObjectType = 8
	ObjectType_OBJECT_TYPE_ACL_ENTRY                ObjectType = 9
	ObjectType_OBJECT_TYPE_ACL_COUNTER              ObjectType = 10
	ObjectType_OBJECT_TYPE_ACL_RANGE                ObjectType = 11
	ObjectType_OBJECT_TYPE_ACL_TABLE_GROUP          ObjectType = 12
	ObjectType_OBJECT_TYPE_ACL_TABLE_GROUP_MEMBER   ObjectType = 13
	ObjectType_OBJECT_TYPE_HOSTIF                   ObjectType = 14
	ObjectType_OBJECT_TYPE_MIRROR_SESSION           ObjectType = 15
	ObjectType_OBJECT_TYPE_SAMPLEPACKET             ObjectType = 16
	ObjectType_OBJECT_TYPE_STP                      ObjectType = 17
	ObjectType_OBJECT_TYPE_HOSTIF_TRAP_GROUP        ObjectType = 18
	ObjectType_OBJECT_TYPE_POLICER                  ObjectType = 19
	ObjectType_OBJECT_TYPE_WRED                     ObjectType = 20
	ObjectType_OBJECT_TYPE_QOS_MAP                  ObjectType = 21
	ObjectType_OBJECT_TYPE_QUEUE                    ObjectType = 22
	ObjectType_OBJECT_TYPE_SCHEDULER                ObjectType = 23
	ObjectType_OBJECT_TYPE_SCHEDULER_GROUP          ObjectType = 24
	ObjectType_OBJECT_TYPE_BUFFER_POOL              ObjectType = 25
	ObjectType_OBJECT_TYPE_BUFFER_PROFILE           ObjectType = 26
	ObjectType_OBJECT_TYPE_INGRESS_PRIORITY_GROUP   ObjectType = 27
	ObjectType_OBJECT_TYPE_LAG_MEMBER               ObjectType = 28
	ObjectType_OBJECT_TYPE_HASH                     ObjectType = 29
	ObjectType_OBJECT_TYPE_UDF                      ObjectType = 30
	ObjectType_OBJECT_TYPE_UDF_MATCH                ObjectType = 31
	ObjectType_OBJECT_TYPE_UDF_GROUP                ObjectType = 32
	ObjectType_OBJECT_TYPE_FDB_ENTRY                ObjectType = 33
	ObjectType_OBJECT_TYPE_SWITCH                   ObjectType = 34
	ObjectType_OBJECT_TYPE_HOSTIF_TRAP              ObjectType = 35
	ObjectType_OBJECT_TYPE_HOSTIF_TABLE_ENTRY       ObjectType = 36
	ObjectType_OBJECT_TYPE_NEIGHBOR_ENTRY           ObjectType = 37
	ObjectType_OBJECT_TYPE_ROUTE_ENTRY              ObjectType = 38
	ObjectType_OBJECT_TYPE_VLAN                     ObjectType = 39
	ObjectType_OBJECT_TYPE_VLAN_MEMBER              ObjectType = 40
	ObjectType_OBJECT_TYPE_HOSTIF_PACKET            ObjectType = 41
	ObjectType_OBJECT_TYPE_TUNNEL_MAP               ObjectType = 42
	ObjectType_OBJECT_TYPE_TUNNEL                   ObjectType = 43
	ObjectType_OBJECT_TYPE_TUNNEL_TERM_TABLE_ENTRY  ObjectType = 44
	ObjectType_OBJECT_TYPE_FDB_FLUSH                ObjectType = 45
	ObjectType_OBJECT_TYPE_NEXT_HOP_GROUP_MEMBER    ObjectType = 46
	ObjectType_OBJECT_TYPE_STP_PORT                 ObjectType = 47
	ObjectType_OBJECT_TYPE_RPF_GROUP                ObjectType = 48
	ObjectType_OBJECT_TYPE_RPF_GROUP_MEMBER         ObjectType = 49
	ObjectType_OBJECT_TYPE_L2MC_GROUP               ObjectType = 50
	ObjectType_OBJECT_TYPE_L2MC_GROUP_MEMBER        ObjectType = 51
	ObjectType_OBJECT_TYPE_IPMC_GROUP               ObjectType = 52
	ObjectType_OBJECT_TYPE_IPMC_GROUP_MEMBER        ObjectType = 53
	ObjectType_OBJECT_TYPE_L2MC_ENTRY               ObjectType = 54
	ObjectType_OBJECT_TYPE_IPMC_ENTRY               ObjectType = 55
	ObjectType_OBJECT_TYPE_MCAST_FDB_ENTRY          ObjectType = 56
	ObjectType_OBJECT_TYPE_HOSTIF_USER_DEFINED_TRAP ObjectType = 57
	ObjectType_OBJECT_TYPE_BRIDGE                   ObjectType = 58
	ObjectType_OBJECT_TYPE_BRIDGE_PORT              ObjectType = 59
	ObjectType_OBJECT_TYPE_TUNNEL_MAP_ENTRY         ObjectType = 60
	ObjectType_OBJECT_TYPE_TAM                      ObjectType = 61
	ObjectType_OBJECT_TYPE_SRV6_SIDLIST             ObjectType = 62
	ObjectType_OBJECT_TYPE_PORT_POOL                ObjectType = 63
	ObjectType_OBJECT_TYPE_INSEG_ENTRY              ObjectType = 64
	ObjectType_OBJECT_TYPE_DTEL                     ObjectType = 65
	ObjectType_OBJECT_TYPE_DTEL_QUEUE_REPORT        ObjectType = 66
	ObjectType_OBJECT_TYPE_DTEL_INT_SESSION         ObjectType = 67
	ObjectType_OBJECT_TYPE_DTEL_REPORT_SESSION      ObjectType = 68
	ObjectType_OBJECT_TYPE_DTEL_EVENT               ObjectType = 69
	ObjectType_OBJECT_TYPE_BFD_SESSION              ObjectType = 70
	ObjectType_OBJECT_TYPE_ISOLATION_GROUP          ObjectType = 71
	ObjectType_OBJECT_TYPE_ISOLATION_GROUP_MEMBER   ObjectType = 72
	ObjectType_OBJECT_TYPE_TAM_MATH_FUNC            ObjectType = 73
	ObjectType_OBJECT_TYPE_TAM_REPORT               ObjectType = 74
	ObjectType_OBJECT_TYPE_TAM_EVENT_THRESHOLD      ObjectType = 75
	ObjectType_OBJECT_TYPE_TAM_TEL_TYPE             ObjectType = 76
	ObjectType_OBJECT_TYPE_TAM_TRANSPORT            ObjectType = 77
	ObjectType_OBJECT_TYPE_TAM_TELEMETRY            ObjectType = 78
	ObjectType_OBJECT_TYPE_TAM_COLLECTOR            ObjectType = 79
	ObjectType_OBJECT_TYPE_TAM_EVENT_ACTION         ObjectType = 80
	ObjectType_OBJECT_TYPE_TAM_EVENT                ObjectType = 81
	ObjectType_OBJECT_TYPE_NAT_ZONE_COUNTER         ObjectType = 82
	ObjectType_OBJECT_TYPE_NAT_ENTRY                ObjectType = 83
	ObjectType_OBJECT_TYPE_TAM_INT                  ObjectType = 84
	ObjectType_OBJECT_TYPE_COUNTER                  ObjectType = 85
	ObjectType_OBJECT_TYPE_DEBUG_COUNTER            ObjectType = 86
	ObjectType_OBJECT_TYPE_PORT_CONNECTOR           ObjectType = 87
	ObjectType_OBJECT_TYPE_PORT_SERDES              ObjectType = 88
	ObjectType_OBJECT_TYPE_MACSEC                   ObjectType = 89
	ObjectType_OBJECT_TYPE_MACSEC_PORT              ObjectType = 90
	ObjectType_OBJECT_TYPE_MACSEC_FLOW              ObjectType = 91
	ObjectType_OBJECT_TYPE_MACSEC_SC                ObjectType = 92
	ObjectType_OBJECT_TYPE_MACSEC_SA                ObjectType = 93
	ObjectType_OBJECT_TYPE_SYSTEM_PORT              ObjectType = 94
	ObjectType_OBJECT_TYPE_FINE_GRAINED_HASH_FIELD  ObjectType = 95
	ObjectType_OBJECT_TYPE_SWITCH_TUNNEL            ObjectType = 96
	ObjectType_OBJECT_TYPE_MY_SID_ENTRY             ObjectType = 97
	ObjectType_OBJECT_TYPE_MY_MAC                   ObjectType = 98
	ObjectType_OBJECT_TYPE_NEXT_HOP_GROUP_MAP       ObjectType = 99
	ObjectType_OBJECT_TYPE_IPSEC                    ObjectType = 100
	ObjectType_OBJECT_TYPE_IPSEC_PORT               ObjectType = 101
	ObjectType_OBJECT_TYPE_IPSEC_SA                 ObjectType = 102
	ObjectType_OBJECT_TYPE_MAX                      ObjectType = 103
)

// Enum value maps for ObjectType.
var (
	ObjectType_name = map[int32]string{
		0:   "OBJECT_TYPE_UNSPECIFIED",
		1:   "OBJECT_TYPE_NULL",
		2:   "OBJECT_TYPE_PORT",
		3:   "OBJECT_TYPE_LAG",
		4:   "OBJECT_TYPE_VIRTUAL_ROUTER",
		5:   "OBJECT_TYPE_NEXT_HOP",
		6:   "OBJECT_TYPE_NEXT_HOP_GROUP",
		7:   "OBJECT_TYPE_ROUTER_INTERFACE",
		8:   "OBJECT_TYPE_ACL_TABLE",
		9:   "OBJECT_TYPE_ACL_ENTRY",
		10:  "OBJECT_TYPE_ACL_COUNTER",
		11:  "OBJECT_TYPE_ACL_RANGE",
		12:  "OBJECT_TYPE_ACL_TABLE_GROUP",
		13:  "OBJECT_TYPE_ACL_TABLE_GROUP_MEMBER",
		14:  "OBJECT_TYPE_HOSTIF",
		15:  "OBJECT_TYPE_MIRROR_SESSION",
		16:  "OBJECT_TYPE_SAMPLEPACKET",
		17:  "OBJECT_TYPE_STP",
		18:  "OBJECT_TYPE_HOSTIF_TRAP_GROUP",
		19:  "OBJECT_TYPE_POLICER",
		20:  "OBJECT_TYPE_WRED",
		21:  "OBJECT_TYPE_QOS_MAP",
		22:  "OBJECT_TYPE_QUEUE",
		23:  "OBJECT_TYPE_SCHEDULER",
		24:  "OBJECT_TYPE_SCHEDULER_GROUP",
		25:  "OBJECT_TYPE_BUFFER_POOL",
		26:  "OBJECT_TYPE_BUFFER_PROFILE",
		27:  "OBJECT_TYPE_INGRESS_PRIORITY_GROUP",
		28:  "OBJECT_TYPE_LAG_MEMBER",
		29:  "OBJECT_TYPE_HASH",
		30:  "OBJECT_TYPE_UDF",
		31:  "OBJECT_TYPE_UDF_MATCH",
		32:  "OBJECT_TYPE_UDF_GROUP",
		33:  "OBJECT_TYPE_FDB_ENTRY",
		34:  "OBJECT_TYPE_SWITCH",
		35:  "OBJECT_TYPE_HOSTIF_TRAP",
		36:  "OBJECT_TYPE_HOSTIF_TABLE_ENTRY",
		37:  "OBJECT_TYPE_NEIGHBOR_ENTRY",
		38:  "OBJECT_TYPE_ROUTE_ENTRY",
		39:  "OBJECT_TYPE_VLAN",
		40:  "OBJECT_TYPE_VLAN_MEMBER",
		41:  "OBJECT_TYPE_HOSTIF_PACKET",
		42:  "OBJECT_TYPE_TUNNEL_MAP",
		43:  "OBJECT_TYPE_TUNNEL",
		44:  "OBJECT_TYPE_TUNNEL_TERM_TABLE_ENTRY",
		45:  "OBJECT_TYPE_FDB_FLUSH",
		46:  "OBJECT_TYPE_NEXT_HOP_GROUP_MEMBER",
		47:  "OBJECT_TYPE_STP_PORT",
		48:  "OBJECT_TYPE_RPF_GROUP",
		49:  "OBJECT_TYPE_RPF_GROUP_MEMBER",
		50:  "OBJECT_TYPE_L2MC_GROUP",
		51:  "OBJECT_TYPE_L2MC_GROUP_MEMBER",
		52:  "OBJECT_TYPE_IPMC_GROUP",
		53:  "OBJECT_TYPE_IPMC_GROUP_MEMBER",
		54:  "OBJECT_TYPE_L2MC_ENTRY",
		55:  "OBJECT_TYPE_IPMC_ENTRY",
		56:  "OBJECT_TYPE_MCAST_FDB_ENTRY",
		57:  "OBJECT_TYPE_HOSTIF_USER_DEFINED_TRAP",
		58:  "OBJECT_TYPE_BRIDGE",
		59:  "OBJECT_TYPE_BRIDGE_PORT",
		60:  "OBJECT_TYPE_TUNNEL_MAP_ENTRY",
		61:  "OBJECT_TYPE_TAM",
		62:  "OBJECT_TYPE_SRV6_SIDLIST",
		63:  "OBJECT_TYPE_PORT_POOL",
		64:  "OBJECT_TYPE_INSEG_ENTRY",
		65:  "OBJECT_TYPE_DTEL",
		66:  "OBJECT_TYPE_DTEL_QUEUE_REPORT",
		67:  "OBJECT_TYPE_DTEL_INT_SESSION",
		68:  "OBJECT_TYPE_DTEL_REPORT_SESSION",
		69:  "OBJECT_TYPE_DTEL_EVENT",
		70:  "OBJECT_TYPE_BFD_SESSION",
		71:  "OBJECT_TYPE_ISOLATION_GROUP",
		72:  "OBJECT_TYPE_ISOLATION_GROUP_MEMBER",
		73:  "OBJECT_TYPE_TAM_MATH_FUNC",
		74:  "OBJECT_TYPE_TAM_REPORT",
		75:  "OBJECT_TYPE_TAM_EVENT_THRESHOLD",
		76:  "OBJECT_TYPE_TAM_TEL_TYPE",
		77:  "OBJECT_TYPE_TAM_TRANSPORT",
		78:  "OBJECT_TYPE_TAM_TELEMETRY",
		79:  "OBJECT_TYPE_TAM_COLLECTOR",
		80:  "OBJECT_TYPE_TAM_EVENT_ACTION",
		81:  "OBJECT_TYPE_TAM_EVENT",
		82:  "OBJECT_TYPE_NAT_ZONE_COUNTER",
		83:  "OBJECT_TYPE_NAT_ENTRY",
		84:  "OBJECT_TYPE_TAM_INT",
		85:  "OBJECT_TYPE_COUNTER",
		86:  "OBJECT_TYPE_DEBUG_COUNTER",
		87:  "OBJECT_TYPE_PORT_CONNECTOR",
		88:  "OBJECT_TYPE_PORT_SERDES",
		89:  "OBJECT_TYPE_MACSEC",
		90:  "OBJECT_TYPE_MACSEC_PORT",
		91:  "OBJECT_TYPE_MACSEC_FLOW",
		92:  "OBJECT_TYPE_MACSEC_SC",
		93:  "OBJECT_TYPE_MACSEC_SA",
		94:  "OBJECT_TYPE_SYSTEM_PORT",
		95:  "OBJECT_TYPE_FINE_GRAINED_HASH_FIELD",
		96:  "OBJECT_TYPE_SWITCH_TUNNEL",
		97:  "OBJECT_TYPE_MY_SID_ENTRY",
		98:  "OBJECT_TYPE_MY_MAC",
		99:  "OBJECT_TYPE_NEXT_HOP_GROUP_MAP",
		100: "OBJECT_TYPE_IPSEC",
		101: "OBJECT_TYPE_IPSEC_PORT",
		102: "OBJECT_TYPE_IPSEC_SA",
		103: "OBJECT_TYPE_MAX",
	}
	ObjectType_value = map[string]int32{
		"OBJECT_TYPE_UNSPECIFIED":              0,
		"OBJECT_TYPE_NULL":                     1,
		"OBJECT_TYPE_PORT":                     2,
		"OBJECT_TYPE_LAG":                      3,
		"OBJECT_TYPE_VIRTUAL_ROUTER":           4,
		"OBJECT_TYPE_NEXT_HOP":                 5,
		"OBJECT_TYPE_NEXT_HOP_GROUP":           6,
		"OBJECT_TYPE_ROUTER_INTERFACE":         7,
		"OBJECT_TYPE_ACL_TABLE":                8,
		"OBJECT_TYPE_ACL_ENTRY":                9,
		"OBJECT_TYPE_ACL_COUNTER":              10,
		"OBJECT_TYPE_ACL_RANGE":                11,
		"OBJECT_TYPE_ACL_TABLE_GROUP":          12,
		"OBJECT_TYPE_ACL_TABLE_GROUP_MEMBER":   13,
		"OBJECT_TYPE_HOSTIF":                   14,
		"OBJECT_TYPE_MIRROR_SESSION":           15,
		"OBJECT_TYPE_SAMPLEPACKET":             16,
		"OBJECT_TYPE_STP":                      17,
		"OBJECT_TYPE_HOSTIF_TRAP_GROUP":        18,
		"OBJECT_TYPE_POLICER":                  19,
		"OBJECT_TYPE_WRED":                     20,
		"OBJECT_TYPE_QOS_MAP":                  21,
		"OBJECT_TYPE_QUEUE":                    22,
		"OBJECT_TYPE_SCHEDULER":                23,
		"OBJECT_TYPE_SCHEDULER_GROUP":          24,
		"OBJECT_TYPE_BUFFER_POOL":              25,
		"OBJECT_TYPE_BUFFER_PROFILE":           26,
		"OBJECT_TYPE_INGRESS_PRIORITY_GROUP":   27,
		"OBJECT_TYPE_LAG_MEMBER":               28,
		"OBJECT_TYPE_HASH":                     29,
		"OBJECT_TYPE_UDF":                      30,
		"OBJECT_TYPE_UDF_MATCH":                31,
		"OBJECT_TYPE_UDF_GROUP":                32,
		"OBJECT_TYPE_FDB_ENTRY":                33,
		"OBJECT_TYPE_SWITCH":                   34,
		"OBJECT_TYPE_HOSTIF_TRAP":              35,
		"OBJECT_TYPE_HOSTIF_TABLE_ENTRY":       36,
		"OBJECT_TYPE_NEIGHBOR_ENTRY":           37,
		"OBJECT_TYPE_ROUTE_ENTRY":              38,
		"OBJECT_TYPE_VLAN":                     39,
		"OBJECT_TYPE_VLAN_MEMBER":              40,
		"OBJECT_TYPE_HOSTIF_PACKET":            41,
		"OBJECT_TYPE_TUNNEL_MAP":               42,
		"OBJECT_TYPE_TUNNEL":                   43,
		"OBJECT_TYPE_TUNNEL_TERM_TABLE_ENTRY":  44,
		"OBJECT_TYPE_FDB_FLUSH":                45,
		"OBJECT_TYPE_NEXT_HOP_GROUP_MEMBER":    46,
		"OBJECT_TYPE_STP_PORT":                 47,
		"OBJECT_TYPE_RPF_GROUP":                48,
		"OBJECT_TYPE_RPF_GROUP_MEMBER":         49,
		"OBJECT_TYPE_L2MC_GROUP":               50,
		"OBJECT_TYPE_L2MC_GROUP_MEMBER":        51,
		"OBJECT_TYPE_IPMC_GROUP":               52,
		"OBJECT_TYPE_IPMC_GROUP_MEMBER":        53,
		"OBJECT_TYPE_L2MC_ENTRY":               54,
		"OBJECT_TYPE_IPMC_ENTRY":               55,
		"OBJECT_TYPE_MCAST_FDB_ENTRY":          56,
		"OBJECT_TYPE_HOSTIF_USER_DEFINED_TRAP": 57,
		"OBJECT_TYPE_BRIDGE":                   58,
		"OBJECT_TYPE_BRIDGE_PORT":              59,
		"OBJECT_TYPE_TUNNEL_MAP_ENTRY":         60,
		"OBJECT_TYPE_TAM":                      61,
		"OBJECT_TYPE_SRV6_SIDLIST":             62,
		"OBJECT_TYPE_PORT_POOL":                63,
		"OBJECT_TYPE_INSEG_ENTRY":              64,
		"OBJECT_TYPE_DTEL":                     65,
		"OBJECT_TYPE_DTEL_QUEUE_REPORT":        66,
		"OBJECT_TYPE_DTEL_INT_SESSION":         67,
		"OBJECT_TYPE_DTEL_REPORT_SESSION":      68,
		"OBJECT_TYPE_DTEL_EVENT":               69,
		"OBJECT_TYPE_BFD_SESSION":              70,
		"OBJECT_TYPE_ISOLATION_GROUP":          71,
		"OBJECT_TYPE_ISOLATION_GROUP_MEMBER":   72,
		"OBJECT_TYPE_TAM_MATH_FUNC":            73,
		"OBJECT_TYPE_TAM_REPORT":               74,
		"OBJECT_TYPE_TAM_EVENT_THRESHOLD":      75,
		"OBJECT_TYPE_TAM_TEL_TYPE":             76,
		"OBJECT_TYPE_TAM_TRANSPORT":            77,
		"OBJECT_TYPE_TAM_TELEMETRY":            78,
		"OBJECT_TYPE_TAM_COLLECTOR":            79,
		"OBJECT_TYPE_TAM_EVENT_ACTION":         80,
		"OBJECT_TYPE_TAM_EVENT":                81,
		"OBJECT_TYPE_NAT_ZONE_COUNTER":         82,
		"OBJECT_TYPE_NAT_ENTRY":                83,
		"OBJECT_TYPE_TAM_INT":                  84,
		"OBJECT_TYPE_COUNTER":                  85,
		"OBJECT_TYPE_DEBUG_COUNTER":            86,
		"OBJECT_TYPE_PORT_CONNECTOR":           87,
		"OBJECT_TYPE_PORT_SERDES":              88,
		"OBJECT_TYPE_MACSEC":                   89,
		"OBJECT_TYPE_MACSEC_PORT":              90,
		"OBJECT_TYPE_MACSEC_FLOW":              91,
		"OBJECT_TYPE_MACSEC_SC":                92,
		"OBJECT_TYPE_MACSEC_SA":                93,
		"OBJECT_TYPE_SYSTEM_PORT":              94,
		"OBJECT_TYPE_FINE_GRAINED_HASH_FIELD":  95,
		"OBJECT_TYPE_SWITCH_TUNNEL":            96,
		"OBJECT_TYPE_MY_SID_ENTRY":             97,
		"OBJECT_TYPE_MY_MAC":                   98,
		"OBJECT_TYPE_NEXT_HOP_GROUP_MAP":       99,
		"OBJECT_TYPE_IPSEC":                    100,
		"OBJECT_TYPE_IPSEC_PORT":               101,
		"OBJECT_TYPE_IPSEC_SA":                 102,
		"OBJECT_TYPE_MAX":                      103,
	}
)

func (x ObjectType) Enum() *ObjectType {
	p := new(ObjectType)
	*p = x
	return p
}

func (x ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[78].Descriptor()
}

func (ObjectType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[78]
}

func (x ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectType.Descriptor instead.
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{78}
}

type OutDropReason int32

const (
	OutDropReason_OUT_DROP_REASON_UNSPECIFIED                 OutDropReason = 0
	OutDropReason_OUT_DROP_REASON_START                       OutDropReason = 1
	OutDropReason_OUT_DROP_REASON_L2_ANY                      OutDropReason = 2
	OutDropReason_OUT_DROP_REASON_EGRESS_VLAN_FILTER          OutDropReason = 3
	OutDropReason_OUT_DROP_REASON_L3_ANY                      OutDropReason = 4
	OutDropReason_OUT_DROP_REASON_L3_EGRESS_LINK_DOWN         OutDropReason = 5
	OutDropReason_OUT_DROP_REASON_TUNNEL_LOOPBACK_PACKET_DROP OutDropReason = 6
	OutDropReason_OUT_DROP_REASON_END                         OutDropReason = 7
	OutDropReason_OUT_DROP_REASON_CUSTOM_RANGE_BASE           OutDropReason = 8
	OutDropReason_OUT_DROP_REASON_CUSTOM_RANGE_END            OutDropReason = 9
)

// Enum value maps for OutDropReason.
var (
	OutDropReason_name = map[int32]string{
		0: "OUT_DROP_REASON_UNSPECIFIED",
		1: "OUT_DROP_REASON_START",
		2: "OUT_DROP_REASON_L2_ANY",
		3: "OUT_DROP_REASON_EGRESS_VLAN_FILTER",
		4: "OUT_DROP_REASON_L3_ANY",
		5: "OUT_DROP_REASON_L3_EGRESS_LINK_DOWN",
		6: "OUT_DROP_REASON_TUNNEL_LOOPBACK_PACKET_DROP",
		7: "OUT_DROP_REASON_END",
		8: "OUT_DROP_REASON_CUSTOM_RANGE_BASE",
		9: "OUT_DROP_REASON_CUSTOM_RANGE_END",
	}
	OutDropReason_value = map[string]int32{
		"OUT_DROP_REASON_UNSPECIFIED":                 0,
		"OUT_DROP_REASON_START":                       1,
		"OUT_DROP_REASON_L2_ANY":                      2,
		"OUT_DROP_REASON_EGRESS_VLAN_FILTER":          3,
		"OUT_DROP_REASON_L3_ANY":                      4,
		"OUT_DROP_REASON_L3_EGRESS_LINK_DOWN":         5,
		"OUT_DROP_REASON_TUNNEL_LOOPBACK_PACKET_DROP": 6,
		"OUT_DROP_REASON_END":                         7,
		"OUT_DROP_REASON_CUSTOM_RANGE_BASE":           8,
		"OUT_DROP_REASON_CUSTOM_RANGE_END":            9,
	}
)

func (x OutDropReason) Enum() *OutDropReason {
	p := new(OutDropReason)
	*p = x
	return p
}

func (x OutDropReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutDropReason) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[79].Descriptor()
}

func (OutDropReason) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[79]
}

func (x OutDropReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutDropReason.Descriptor instead.
func (OutDropReason) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{79}
}

type OutsegExpMode int32

const (
	OutsegExpMode_OUTSEG_EXP_MODE_UNSPECIFIED OutsegExpMode = 0
	OutsegExpMode_OUTSEG_EXP_MODE_UNIFORM     OutsegExpMode = 1
	OutsegExpMode_OUTSEG_EXP_MODE_PIPE        OutsegExpMode = 2
)

// Enum value maps for OutsegExpMode.
var (
	OutsegExpMode_name = map[int32]string{
		0: "OUTSEG_EXP_MODE_UNSPECIFIED",
		1: "OUTSEG_EXP_MODE_UNIFORM",
		2: "OUTSEG_EXP_MODE_PIPE",
	}
	OutsegExpMode_value = map[string]int32{
		"OUTSEG_EXP_MODE_UNSPECIFIED": 0,
		"OUTSEG_EXP_MODE_UNIFORM":     1,
		"OUTSEG_EXP_MODE_PIPE":        2,
	}
)

func (x OutsegExpMode) Enum() *OutsegExpMode {
	p := new(OutsegExpMode)
	*p = x
	return p
}

func (x OutsegExpMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutsegExpMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[80].Descriptor()
}

func (OutsegExpMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[80]
}

func (x OutsegExpMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutsegExpMode.Descriptor instead.
func (OutsegExpMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{80}
}

type OutsegTtlMode int32

const (
	OutsegTtlMode_OUTSEG_TTL_MODE_UNSPECIFIED OutsegTtlMode = 0
	OutsegTtlMode_OUTSEG_TTL_MODE_UNIFORM     OutsegTtlMode = 1
	OutsegTtlMode_OUTSEG_TTL_MODE_PIPE        OutsegTtlMode = 2
)

// Enum value maps for OutsegTtlMode.
var (
	OutsegTtlMode_name = map[int32]string{
		0: "OUTSEG_TTL_MODE_UNSPECIFIED",
		1: "OUTSEG_TTL_MODE_UNIFORM",
		2: "OUTSEG_TTL_MODE_PIPE",
	}
	OutsegTtlMode_value = map[string]int32{
		"OUTSEG_TTL_MODE_UNSPECIFIED": 0,
		"OUTSEG_TTL_MODE_UNIFORM":     1,
		"OUTSEG_TTL_MODE_PIPE":        2,
	}
)

func (x OutsegTtlMode) Enum() *OutsegTtlMode {
	p := new(OutsegTtlMode)
	*p = x
	return p
}

func (x OutsegTtlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutsegTtlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[81].Descriptor()
}

func (OutsegTtlMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[81]
}

func (x OutsegTtlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutsegTtlMode.Descriptor instead.
func (OutsegTtlMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{81}
}

type OutsegType int32

const (
	OutsegType_OUTSEG_TYPE_UNSPECIFIED OutsegType = 0
	OutsegType_OUTSEG_TYPE_PUSH        OutsegType = 1
	OutsegType_OUTSEG_TYPE_SWAP        OutsegType = 2
)

// Enum value maps for OutsegType.
var (
	OutsegType_name = map[int32]string{
		0: "OUTSEG_TYPE_UNSPECIFIED",
		1: "OUTSEG_TYPE_PUSH",
		2: "OUTSEG_TYPE_SWAP",
	}
	OutsegType_value = map[string]int32{
		"OUTSEG_TYPE_UNSPECIFIED": 0,
		"OUTSEG_TYPE_PUSH":        1,
		"OUTSEG_TYPE_SWAP":        2,
	}
)

func (x OutsegType) Enum() *OutsegType {
	p := new(OutsegType)
	*p = x
	return p
}

func (x OutsegType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutsegType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[82].Descriptor()
}

func (OutsegType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[82]
}

func (x OutsegType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutsegType.Descriptor instead.
func (OutsegType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{82}
}

type PacketAction int32

const (
	PacketAction_PACKET_ACTION_UNSPECIFIED PacketAction = 0
	PacketAction_PACKET_ACTION_DROP        PacketAction = 1
	PacketAction_PACKET_ACTION_FORWARD     PacketAction = 2
	PacketAction_PACKET_ACTION_COPY        PacketAction = 3
	PacketAction_PACKET_ACTION_COPY_CANCEL PacketAction = 4
	PacketAction_PACKET_ACTION_TRAP        PacketAction = 5
	PacketAction_PACKET_ACTION_LOG         PacketAction = 6
	PacketAction_PACKET_ACTION_DENY        PacketAction = 7
	PacketAction_PACKET_ACTION_TRANSIT     PacketAction = 8
)

// Enum value maps for PacketAction.
var (
	PacketAction_name = map[int32]string{
		0: "PACKET_ACTION_UNSPECIFIED",
		1: "PACKET_ACTION_DROP",
		2: "PACKET_ACTION_FORWARD",
		3: "PACKET_ACTION_COPY",
		4: "PACKET_ACTION_COPY_CANCEL",
		5: "PACKET_ACTION_TRAP",
		6: "PACKET_ACTION_LOG",
		7: "PACKET_ACTION_DENY",
		8: "PACKET_ACTION_TRANSIT",
	}
	PacketAction_value = map[string]int32{
		"PACKET_ACTION_UNSPECIFIED": 0,
		"PACKET_ACTION_DROP":        1,
		"PACKET_ACTION_FORWARD":     2,
		"PACKET_ACTION_COPY":        3,
		"PACKET_ACTION_COPY_CANCEL": 4,
		"PACKET_ACTION_TRAP":        5,
		"PACKET_ACTION_LOG":         6,
		"PACKET_ACTION_DENY":        7,
		"PACKET_ACTION_TRANSIT":     8,
	}
)

func (x PacketAction) Enum() *PacketAction {
	p := new(PacketAction)
	*p = x
	return p
}

func (x PacketAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketAction) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[83].Descriptor()
}

func (PacketAction) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[83]
}

func (x PacketAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketAction.Descriptor instead.
func (PacketAction) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{83}
}

type PacketColor int32

const (
	PacketColor_PACKET_COLOR_UNSPECIFIED PacketColor = 0
	PacketColor_PACKET_COLOR_GREEN       PacketColor = 1
	PacketColor_PACKET_COLOR_YELLOW      PacketColor = 2
	PacketColor_PACKET_COLOR_RED         PacketColor = 3
)

// Enum value maps for PacketColor.
var (
	PacketColor_name = map[int32]string{
		0: "PACKET_COLOR_UNSPECIFIED",
		1: "PACKET_COLOR_GREEN",
		2: "PACKET_COLOR_YELLOW",
		3: "PACKET_COLOR_RED",
	}
	PacketColor_value = map[string]int32{
		"PACKET_COLOR_UNSPECIFIED": 0,
		"PACKET_COLOR_GREEN":       1,
		"PACKET_COLOR_YELLOW":      2,
		"PACKET_COLOR_RED":         3,
	}
)

func (x PacketColor) Enum() *PacketColor {
	p := new(PacketColor)
	*p = x
	return p
}

func (x PacketColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketColor) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[84].Descriptor()
}

func (PacketColor) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[84]
}

func (x PacketColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketColor.Descriptor instead.
func (PacketColor) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{84}
}

type PacketVlan int32

const (
	PacketVlan_PACKET_VLAN_UNSPECIFIED      PacketVlan = 0
	PacketVlan_PACKET_VLAN_UNTAG            PacketVlan = 1
	PacketVlan_PACKET_VLAN_SINGLE_OUTER_TAG PacketVlan = 2
	PacketVlan_PACKET_VLAN_DOUBLE_TAG       PacketVlan = 3
)

// Enum value maps for PacketVlan.
var (
	PacketVlan_name = map[int32]string{
		0: "PACKET_VLAN_UNSPECIFIED",
		1: "PACKET_VLAN_UNTAG",
		2: "PACKET_VLAN_SINGLE_OUTER_TAG",
		3: "PACKET_VLAN_DOUBLE_TAG",
	}
	PacketVlan_value = map[string]int32{
		"PACKET_VLAN_UNSPECIFIED":      0,
		"PACKET_VLAN_UNTAG":            1,
		"PACKET_VLAN_SINGLE_OUTER_TAG": 2,
		"PACKET_VLAN_DOUBLE_TAG":       3,
	}
)

func (x PacketVlan) Enum() *PacketVlan {
	p := new(PacketVlan)
	*p = x
	return p
}

func (x PacketVlan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PacketVlan) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[85].Descriptor()
}

func (PacketVlan) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[85]
}

func (x PacketVlan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PacketVlan.Descriptor instead.
func (PacketVlan) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{85}
}

type PolicerColorSource int32

const (
	PolicerColorSource_POLICER_COLOR_SOURCE_UNSPECIFIED       PolicerColorSource = 0
	PolicerColorSource_POLICER_COLOR_SOURCE_BLIND             PolicerColorSource = 1
	PolicerColorSource_POLICER_COLOR_SOURCE_AWARE             PolicerColorSource = 2
	PolicerColorSource_POLICER_COLOR_SOURCE_CUSTOM_RANGE_BASE PolicerColorSource = 3
)

// Enum value maps for PolicerColorSource.
var (
	PolicerColorSource_name = map[int32]string{
		0: "POLICER_COLOR_SOURCE_UNSPECIFIED",
		1: "POLICER_COLOR_SOURCE_BLIND",
		2: "POLICER_COLOR_SOURCE_AWARE",
		3: "POLICER_COLOR_SOURCE_CUSTOM_RANGE_BASE",
	}
	PolicerColorSource_value = map[string]int32{
		"POLICER_COLOR_SOURCE_UNSPECIFIED":       0,
		"POLICER_COLOR_SOURCE_BLIND":             1,
		"POLICER_COLOR_SOURCE_AWARE":             2,
		"POLICER_COLOR_SOURCE_CUSTOM_RANGE_BASE": 3,
	}
)

func (x PolicerColorSource) Enum() *PolicerColorSource {
	p := new(PolicerColorSource)
	*p = x
	return p
}

func (x PolicerColorSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicerColorSource) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[86].Descriptor()
}

func (PolicerColorSource) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[86]
}

func (x PolicerColorSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicerColorSource.Descriptor instead.
func (PolicerColorSource) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{86}
}

type PolicerMode int32

const (
	PolicerMode_POLICER_MODE_UNSPECIFIED       PolicerMode = 0
	PolicerMode_POLICER_MODE_SR_TCM            PolicerMode = 1
	PolicerMode_POLICER_MODE_TR_TCM            PolicerMode = 2
	PolicerMode_POLICER_MODE_STORM_CONTROL     PolicerMode = 3
	PolicerMode_POLICER_MODE_CUSTOM_RANGE_BASE PolicerMode = 4
)

// Enum value maps for PolicerMode.
var (
	PolicerMode_name = map[int32]string{
		0: "POLICER_MODE_UNSPECIFIED",
		1: "POLICER_MODE_SR_TCM",
		2: "POLICER_MODE_TR_TCM",
		3: "POLICER_MODE_STORM_CONTROL",
		4: "POLICER_MODE_CUSTOM_RANGE_BASE",
	}
	PolicerMode_value = map[string]int32{
		"POLICER_MODE_UNSPECIFIED":       0,
		"POLICER_MODE_SR_TCM":            1,
		"POLICER_MODE_TR_TCM":            2,
		"POLICER_MODE_STORM_CONTROL":     3,
		"POLICER_MODE_CUSTOM_RANGE_BASE": 4,
	}
)

func (x PolicerMode) Enum() *PolicerMode {
	p := new(PolicerMode)
	*p = x
	return p
}

func (x PolicerMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicerMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[87].Descriptor()
}

func (PolicerMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[87]
}

func (x PolicerMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicerMode.Descriptor instead.
func (PolicerMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{87}
}

type PolicerStat int32

const (
	PolicerStat_POLICER_STAT_UNSPECIFIED       PolicerStat = 0
	PolicerStat_POLICER_STAT_PACKETS           PolicerStat = 1
	PolicerStat_POLICER_STAT_ATTR_BYTES        PolicerStat = 2
	PolicerStat_POLICER_STAT_GREEN_PACKETS     PolicerStat = 3
	PolicerStat_POLICER_STAT_GREEN_BYTES       PolicerStat = 4
	PolicerStat_POLICER_STAT_YELLOW_PACKETS    PolicerStat = 5
	PolicerStat_POLICER_STAT_YELLOW_BYTES      PolicerStat = 6
	PolicerStat_POLICER_STAT_RED_PACKETS       PolicerStat = 7
	PolicerStat_POLICER_STAT_RED_BYTES         PolicerStat = 8
	PolicerStat_POLICER_STAT_CUSTOM_RANGE_BASE PolicerStat = 9
)

// Enum value maps for PolicerStat.
var (
	PolicerStat_name = map[int32]string{
		0: "POLICER_STAT_UNSPECIFIED",
		1: "POLICER_STAT_PACKETS",
		2: "POLICER_STAT_ATTR_BYTES",
		3: "POLICER_STAT_GREEN_PACKETS",
		4: "POLICER_STAT_GREEN_BYTES",
		5: "POLICER_STAT_YELLOW_PACKETS",
		6: "POLICER_STAT_YELLOW_BYTES",
		7: "POLICER_STAT_RED_PACKETS",
		8: "POLICER_STAT_RED_BYTES",
		9: "POLICER_STAT_CUSTOM_RANGE_BASE",
	}
	PolicerStat_value = map[string]int32{
		"POLICER_STAT_UNSPECIFIED":       0,
		"POLICER_STAT_PACKETS":           1,
		"POLICER_STAT_ATTR_BYTES":        2,
		"POLICER_STAT_GREEN_PACKETS":     3,
		"POLICER_STAT_GREEN_BYTES":       4,
		"POLICER_STAT_YELLOW_PACKETS":    5,
		"POLICER_STAT_YELLOW_BYTES":      6,
		"POLICER_STAT_RED_PACKETS":       7,
		"POLICER_STAT_RED_BYTES":         8,
		"POLICER_STAT_CUSTOM_RANGE_BASE": 9,
	}
)

func (x PolicerStat) Enum() *PolicerStat {
	p := new(PolicerStat)
	*p = x
	return p
}

func (x PolicerStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicerStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[88].Descriptor()
}

func (PolicerStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[88]
}

func (x PolicerStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicerStat.Descriptor instead.
func (PolicerStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{88}
}

type PortAutoNegConfigMode int32

const (
	PortAutoNegConfigMode_PORT_AUTO_NEG_CONFIG_MODE_UNSPECIFIED PortAutoNegConfigMode = 0
	PortAutoNegConfigMode_PORT_AUTO_NEG_CONFIG_MODE_DISABLED    PortAutoNegConfigMode = 1
	PortAutoNegConfigMode_PORT_AUTO_NEG_CONFIG_MODE_AUTO        PortAutoNegConfigMode = 2
	PortAutoNegConfigMode_PORT_AUTO_NEG_CONFIG_MODE_SLAVE       PortAutoNegConfigMode = 3
	PortAutoNegConfigMode_PORT_AUTO_NEG_CONFIG_MODE_MASTER      PortAutoNegConfigMode = 4
)

// Enum value maps for PortAutoNegConfigMode.
var (
	PortAutoNegConfigMode_name = map[int32]string{
		0: "PORT_AUTO_NEG_CONFIG_MODE_UNSPECIFIED",
		1: "PORT_AUTO_NEG_CONFIG_MODE_DISABLED",
		2: "PORT_AUTO_NEG_CONFIG_MODE_AUTO",
		3: "PORT_AUTO_NEG_CONFIG_MODE_SLAVE",
		4: "PORT_AUTO_NEG_CONFIG_MODE_MASTER",
	}
	PortAutoNegConfigMode_value = map[string]int32{
		"PORT_AUTO_NEG_CONFIG_MODE_UNSPECIFIED": 0,
		"PORT_AUTO_NEG_CONFIG_MODE_DISABLED":    1,
		"PORT_AUTO_NEG_CONFIG_MODE_AUTO":        2,
		"PORT_AUTO_NEG_CONFIG_MODE_SLAVE":       3,
		"PORT_AUTO_NEG_CONFIG_MODE_MASTER":      4,
	}
)

func (x PortAutoNegConfigMode) Enum() *PortAutoNegConfigMode {
	p := new(PortAutoNegConfigMode)
	*p = x
	return p
}

func (x PortAutoNegConfigMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortAutoNegConfigMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[89].Descriptor()
}

func (PortAutoNegConfigMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[89]
}

func (x PortAutoNegConfigMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortAutoNegConfigMode.Descriptor instead.
func (PortAutoNegConfigMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{89}
}

type PortBreakoutModeType int32

const (
	PortBreakoutModeType_PORT_BREAKOUT_MODE_TYPE_UNSPECIFIED PortBreakoutModeType = 0
	PortBreakoutModeType_PORT_BREAKOUT_MODE_TYPE_1_LANE      PortBreakoutModeType = 1
	PortBreakoutModeType_PORT_BREAKOUT_MODE_TYPE_2_LANE      PortBreakoutModeType = 2
	PortBreakoutModeType_PORT_BREAKOUT_MODE_TYPE_4_LANE      PortBreakoutModeType = 3
	PortBreakoutModeType_PORT_BREAKOUT_MODE_TYPE_MAX         PortBreakoutModeType = 4
)

// Enum value maps for PortBreakoutModeType.
var (
	PortBreakoutModeType_name = map[int32]string{
		0: "PORT_BREAKOUT_MODE_TYPE_UNSPECIFIED",
		1: "PORT_BREAKOUT_MODE_TYPE_1_LANE",
		2: "PORT_BREAKOUT_MODE_TYPE_2_LANE",
		3: "PORT_BREAKOUT_MODE_TYPE_4_LANE",
		4: "PORT_BREAKOUT_MODE_TYPE_MAX",
	}
	PortBreakoutModeType_value = map[string]int32{
		"PORT_BREAKOUT_MODE_TYPE_UNSPECIFIED": 0,
		"PORT_BREAKOUT_MODE_TYPE_1_LANE":      1,
		"PORT_BREAKOUT_MODE_TYPE_2_LANE":      2,
		"PORT_BREAKOUT_MODE_TYPE_4_LANE":      3,
		"PORT_BREAKOUT_MODE_TYPE_MAX":         4,
	}
)

func (x PortBreakoutModeType) Enum() *PortBreakoutModeType {
	p := new(PortBreakoutModeType)
	*p = x
	return p
}

func (x PortBreakoutModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortBreakoutModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[90].Descriptor()
}

func (PortBreakoutModeType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[90]
}

func (x PortBreakoutModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortBreakoutModeType.Descriptor instead.
func (PortBreakoutModeType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{90}
}

type PortConnectorFailoverMode int32

const (
	PortConnectorFailoverMode_PORT_CONNECTOR_FAILOVER_MODE_UNSPECIFIED PortConnectorFailoverMode = 0
	PortConnectorFailoverMode_PORT_CONNECTOR_FAILOVER_MODE_DISABLE     PortConnectorFailoverMode = 1
	PortConnectorFailoverMode_PORT_CONNECTOR_FAILOVER_MODE_PRIMARY     PortConnectorFailoverMode = 2
	PortConnectorFailoverMode_PORT_CONNECTOR_FAILOVER_MODE_SECONDARY   PortConnectorFailoverMode = 3
)

// Enum value maps for PortConnectorFailoverMode.
var (
	PortConnectorFailoverMode_name = map[int32]string{
		0: "PORT_CONNECTOR_FAILOVER_MODE_UNSPECIFIED",
		1: "PORT_CONNECTOR_FAILOVER_MODE_DISABLE",
		2: "PORT_CONNECTOR_FAILOVER_MODE_PRIMARY",
		3: "PORT_CONNECTOR_FAILOVER_MODE_SECONDARY",
	}
	PortConnectorFailoverMode_value = map[string]int32{
		"PORT_CONNECTOR_FAILOVER_MODE_UNSPECIFIED": 0,
		"PORT_CONNECTOR_FAILOVER_MODE_DISABLE":     1,
		"PORT_CONNECTOR_FAILOVER_MODE_PRIMARY":     2,
		"PORT_CONNECTOR_FAILOVER_MODE_SECONDARY":   3,
	}
)

func (x PortConnectorFailoverMode) Enum() *PortConnectorFailoverMode {
	p := new(PortConnectorFailoverMode)
	*p = x
	return p
}

func (x PortConnectorFailoverMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortConnectorFailoverMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[91].Descriptor()
}

func (PortConnectorFailoverMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[91]
}

func (x PortConnectorFailoverMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortConnectorFailoverMode.Descriptor instead.
func (PortConnectorFailoverMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{91}
}

type PortDualMedia int32

const (
	PortDualMedia_PORT_DUAL_MEDIA_UNSPECIFIED      PortDualMedia = 0
	PortDualMedia_PORT_DUAL_MEDIA_NONE             PortDualMedia = 1
	PortDualMedia_PORT_DUAL_MEDIA_COPPER_ONLY      PortDualMedia = 2
	PortDualMedia_PORT_DUAL_MEDIA_FIBER_ONLY       PortDualMedia = 3
	PortDualMedia_PORT_DUAL_MEDIA_COPPER_PREFERRED PortDualMedia = 4
	PortDualMedia_PORT_DUAL_MEDIA_FIBER_PREFERRED  PortDualMedia = 5
)

// Enum value maps for PortDualMedia.
var (
	PortDualMedia_name = map[int32]string{
		0: "PORT_DUAL_MEDIA_UNSPECIFIED",
		1: "PORT_DUAL_MEDIA_NONE",
		2: "PORT_DUAL_MEDIA_COPPER_ONLY",
		3: "PORT_DUAL_MEDIA_FIBER_ONLY",
		4: "PORT_DUAL_MEDIA_COPPER_PREFERRED",
		5: "PORT_DUAL_MEDIA_FIBER_PREFERRED",
	}
	PortDualMedia_value = map[string]int32{
		"PORT_DUAL_MEDIA_UNSPECIFIED":      0,
		"PORT_DUAL_MEDIA_NONE":             1,
		"PORT_DUAL_MEDIA_COPPER_ONLY":      2,
		"PORT_DUAL_MEDIA_FIBER_ONLY":       3,
		"PORT_DUAL_MEDIA_COPPER_PREFERRED": 4,
		"PORT_DUAL_MEDIA_FIBER_PREFERRED":  5,
	}
)

func (x PortDualMedia) Enum() *PortDualMedia {
	p := new(PortDualMedia)
	*p = x
	return p
}

func (x PortDualMedia) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortDualMedia) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[92].Descriptor()
}

func (PortDualMedia) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[92]
}

func (x PortDualMedia) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortDualMedia.Descriptor instead.
func (PortDualMedia) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{92}
}

type PortErrStatus int32

const (
	PortErrStatus_PORT_ERR_STATUS_UNSPECIFIED                  PortErrStatus = 0
	PortErrStatus_PORT_ERR_STATUS_DATA_UNIT_CRC_ERROR          PortErrStatus = 1
	PortErrStatus_PORT_ERR_STATUS_DATA_UNIT_SIZE               PortErrStatus = 2
	PortErrStatus_PORT_ERR_STATUS_DATA_UNIT_MISALIGNMENT_ERROR PortErrStatus = 3
	PortErrStatus_PORT_ERR_STATUS_CODE_GROUP_ERROR             PortErrStatus = 4
	PortErrStatus_PORT_ERR_STATUS_SIGNAL_LOCAL_ERROR           PortErrStatus = 5
	PortErrStatus_PORT_ERR_STATUS_NO_RX_REACHABILITY           PortErrStatus = 6
	PortErrStatus_PORT_ERR_STATUS_CRC_RATE                     PortErrStatus = 7
	PortErrStatus_PORT_ERR_STATUS_REMOTE_FAULT_STATUS          PortErrStatus = 8
	PortErrStatus_PORT_ERR_STATUS_MAX                          PortErrStatus = 9
)

// Enum value maps for PortErrStatus.
var (
	PortErrStatus_name = map[int32]string{
		0: "PORT_ERR_STATUS_UNSPECIFIED",
		1: "PORT_ERR_STATUS_DATA_UNIT_CRC_ERROR",
		2: "PORT_ERR_STATUS_DATA_UNIT_SIZE",
		3: "PORT_ERR_STATUS_DATA_UNIT_MISALIGNMENT_ERROR",
		4: "PORT_ERR_STATUS_CODE_GROUP_ERROR",
		5: "PORT_ERR_STATUS_SIGNAL_LOCAL_ERROR",
		6: "PORT_ERR_STATUS_NO_RX_REACHABILITY",
		7: "PORT_ERR_STATUS_CRC_RATE",
		8: "PORT_ERR_STATUS_REMOTE_FAULT_STATUS",
		9: "PORT_ERR_STATUS_MAX",
	}
	PortErrStatus_value = map[string]int32{
		"PORT_ERR_STATUS_UNSPECIFIED":                  0,
		"PORT_ERR_STATUS_DATA_UNIT_CRC_ERROR":          1,
		"PORT_ERR_STATUS_DATA_UNIT_SIZE":               2,
		"PORT_ERR_STATUS_DATA_UNIT_MISALIGNMENT_ERROR": 3,
		"PORT_ERR_STATUS_CODE_GROUP_ERROR":             4,
		"PORT_ERR_STATUS_SIGNAL_LOCAL_ERROR":           5,
		"PORT_ERR_STATUS_NO_RX_REACHABILITY":           6,
		"PORT_ERR_STATUS_CRC_RATE":                     7,
		"PORT_ERR_STATUS_REMOTE_FAULT_STATUS":          8,
		"PORT_ERR_STATUS_MAX":                          9,
	}
)

func (x PortErrStatus) Enum() *PortErrStatus {
	p := new(PortErrStatus)
	*p = x
	return p
}

func (x PortErrStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortErrStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[93].Descriptor()
}

func (PortErrStatus) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[93]
}

func (x PortErrStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortErrStatus.Descriptor instead.
func (PortErrStatus) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{93}
}

type PortFecModeExtended int32

const (
	PortFecModeExtended_PORT_FEC_MODE_EXTENDED_UNSPECIFIED       PortFecModeExtended = 0
	PortFecModeExtended_PORT_FEC_MODE_EXTENDED_NONE              PortFecModeExtended = 1
	PortFecModeExtended_PORT_FEC_MODE_EXTENDED_RS528             PortFecModeExtended = 2
	PortFecModeExtended_PORT_FEC_MODE_EXTENDED_RS544             PortFecModeExtended = 3
	PortFecModeExtended_PORT_FEC_MODE_EXTENDED_RS544_INTERLEAVED PortFecModeExtended = 4
	PortFecModeExtended_PORT_FEC_MODE_EXTENDED_FC                PortFecModeExtended = 5
)

// Enum value maps for PortFecModeExtended.
var (
	PortFecModeExtended_name = map[int32]string{
		0: "PORT_FEC_MODE_EXTENDED_UNSPECIFIED",
		1: "PORT_FEC_MODE_EXTENDED_NONE",
		2: "PORT_FEC_MODE_EXTENDED_RS528",
		3: "PORT_FEC_MODE_EXTENDED_RS544",
		4: "PORT_FEC_MODE_EXTENDED_RS544_INTERLEAVED",
		5: "PORT_FEC_MODE_EXTENDED_FC",
	}
	PortFecModeExtended_value = map[string]int32{
		"PORT_FEC_MODE_EXTENDED_UNSPECIFIED":       0,
		"PORT_FEC_MODE_EXTENDED_NONE":              1,
		"PORT_FEC_MODE_EXTENDED_RS528":             2,
		"PORT_FEC_MODE_EXTENDED_RS544":             3,
		"PORT_FEC_MODE_EXTENDED_RS544_INTERLEAVED": 4,
		"PORT_FEC_MODE_EXTENDED_FC":                5,
	}
)

func (x PortFecModeExtended) Enum() *PortFecModeExtended {
	p := new(PortFecModeExtended)
	*p = x
	return p
}

func (x PortFecModeExtended) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortFecModeExtended) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[94].Descriptor()
}

func (PortFecModeExtended) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[94]
}

func (x PortFecModeExtended) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortFecModeExtended.Descriptor instead.
func (PortFecModeExtended) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{94}
}

type PortFecMode int32

const (
	PortFecMode_PORT_FEC_MODE_UNSPECIFIED PortFecMode = 0
	PortFecMode_PORT_FEC_MODE_NONE        PortFecMode = 1
	PortFecMode_PORT_FEC_MODE_RS          PortFecMode = 2
	PortFecMode_PORT_FEC_MODE_FC          PortFecMode = 3
)

// Enum value maps for PortFecMode.
var (
	PortFecMode_name = map[int32]string{
		0: "PORT_FEC_MODE_UNSPECIFIED",
		1: "PORT_FEC_MODE_NONE",
		2: "PORT_FEC_MODE_RS",
		3: "PORT_FEC_MODE_FC",
	}
	PortFecMode_value = map[string]int32{
		"PORT_FEC_MODE_UNSPECIFIED": 0,
		"PORT_FEC_MODE_NONE":        1,
		"PORT_FEC_MODE_RS":          2,
		"PORT_FEC_MODE_FC":          3,
	}
)

func (x PortFecMode) Enum() *PortFecMode {
	p := new(PortFecMode)
	*p = x
	return p
}

func (x PortFecMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortFecMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[95].Descriptor()
}

func (PortFecMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[95]
}

func (x PortFecMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortFecMode.Descriptor instead.
func (PortFecMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{95}
}

type PortFlowControlMode int32

const (
	PortFlowControlMode_PORT_FLOW_CONTROL_MODE_UNSPECIFIED PortFlowControlMode = 0
	PortFlowControlMode_PORT_FLOW_CONTROL_MODE_DISABLE     PortFlowControlMode = 1
	PortFlowControlMode_PORT_FLOW_CONTROL_MODE_TX_ONLY     PortFlowControlMode = 2
	PortFlowControlMode_PORT_FLOW_CONTROL_MODE_RX_ONLY     PortFlowControlMode = 3
	PortFlowControlMode_PORT_FLOW_CONTROL_MODE_BOTH_ENABLE PortFlowControlMode = 4
)

// Enum value maps for PortFlowControlMode.
var (
	PortFlowControlMode_name = map[int32]string{
		0: "PORT_FLOW_CONTROL_MODE_UNSPECIFIED",
		1: "PORT_FLOW_CONTROL_MODE_DISABLE",
		2: "PORT_FLOW_CONTROL_MODE_TX_ONLY",
		3: "PORT_FLOW_CONTROL_MODE_RX_ONLY",
		4: "PORT_FLOW_CONTROL_MODE_BOTH_ENABLE",
	}
	PortFlowControlMode_value = map[string]int32{
		"PORT_FLOW_CONTROL_MODE_UNSPECIFIED": 0,
		"PORT_FLOW_CONTROL_MODE_DISABLE":     1,
		"PORT_FLOW_CONTROL_MODE_TX_ONLY":     2,
		"PORT_FLOW_CONTROL_MODE_RX_ONLY":     3,
		"PORT_FLOW_CONTROL_MODE_BOTH_ENABLE": 4,
	}
)

func (x PortFlowControlMode) Enum() *PortFlowControlMode {
	p := new(PortFlowControlMode)
	*p = x
	return p
}

func (x PortFlowControlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortFlowControlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[96].Descriptor()
}

func (PortFlowControlMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[96]
}

func (x PortFlowControlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortFlowControlMode.Descriptor instead.
func (PortFlowControlMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{96}
}

type PortInterfaceType int32

const (
	PortInterfaceType_PORT_INTERFACE_TYPE_UNSPECIFIED PortInterfaceType = 0
	PortInterfaceType_PORT_INTERFACE_TYPE_NONE        PortInterfaceType = 1
	PortInterfaceType_PORT_INTERFACE_TYPE_CR          PortInterfaceType = 2
	PortInterfaceType_PORT_INTERFACE_TYPE_CR2         PortInterfaceType = 3
	PortInterfaceType_PORT_INTERFACE_TYPE_CR4         PortInterfaceType = 4
	PortInterfaceType_PORT_INTERFACE_TYPE_SR          PortInterfaceType = 5
	PortInterfaceType_PORT_INTERFACE_TYPE_SR2         PortInterfaceType = 6
	PortInterfaceType_PORT_INTERFACE_TYPE_SR4         PortInterfaceType = 7
	PortInterfaceType_PORT_INTERFACE_TYPE_LR          PortInterfaceType = 8
	PortInterfaceType_PORT_INTERFACE_TYPE_LR4         PortInterfaceType = 9
	PortInterfaceType_PORT_INTERFACE_TYPE_KR          PortInterfaceType = 10
	PortInterfaceType_PORT_INTERFACE_TYPE_KR4         PortInterfaceType = 11
	PortInterfaceType_PORT_INTERFACE_TYPE_CAUI        PortInterfaceType = 12
	PortInterfaceType_PORT_INTERFACE_TYPE_GMII        PortInterfaceType = 13
	PortInterfaceType_PORT_INTERFACE_TYPE_SFI         PortInterfaceType = 14
	PortInterfaceType_PORT_INTERFACE_TYPE_XLAUI       PortInterfaceType = 15
	PortInterfaceType_PORT_INTERFACE_TYPE_KR2         PortInterfaceType = 16
	PortInterfaceType_PORT_INTERFACE_TYPE_CAUI4       PortInterfaceType = 17
	PortInterfaceType_PORT_INTERFACE_TYPE_XAUI        PortInterfaceType = 18
	PortInterfaceType_PORT_INTERFACE_TYPE_XFI         PortInterfaceType = 19
	PortInterfaceType_PORT_INTERFACE_TYPE_XGMII       PortInterfaceType = 20
	PortInterfaceType_PORT_INTERFACE_TYPE_MAX         PortInterfaceType = 21
)

// Enum value maps for PortInterfaceType.
var (
	PortInterfaceType_name = map[int32]string{
		0:  "PORT_INTERFACE_TYPE_UNSPECIFIED",
		1:  "PORT_INTERFACE_TYPE_NONE",
		2:  "PORT_INTERFACE_TYPE_CR",
		3:  "PORT_INTERFACE_TYPE_CR2",
		4:  "PORT_INTERFACE_TYPE_CR4",
		5:  "PORT_INTERFACE_TYPE_SR",
		6:  "PORT_INTERFACE_TYPE_SR2",
		7:  "PORT_INTERFACE_TYPE_SR4",
		8:  "PORT_INTERFACE_TYPE_LR",
		9:  "PORT_INTERFACE_TYPE_LR4",
		10: "PORT_INTERFACE_TYPE_KR",
		11: "PORT_INTERFACE_TYPE_KR4",
		12: "PORT_INTERFACE_TYPE_CAUI",
		13: "PORT_INTERFACE_TYPE_GMII",
		14: "PORT_INTERFACE_TYPE_SFI",
		15: "PORT_INTERFACE_TYPE_XLAUI",
		16: "PORT_INTERFACE_TYPE_KR2",
		17: "PORT_INTERFACE_TYPE_CAUI4",
		18: "PORT_INTERFACE_TYPE_XAUI",
		19: "PORT_INTERFACE_TYPE_XFI",
		20: "PORT_INTERFACE_TYPE_XGMII",
		21: "PORT_INTERFACE_TYPE_MAX",
	}
	PortInterfaceType_value = map[string]int32{
		"PORT_INTERFACE_TYPE_UNSPECIFIED": 0,
		"PORT_INTERFACE_TYPE_NONE":        1,
		"PORT_INTERFACE_TYPE_CR":          2,
		"PORT_INTERFACE_TYPE_CR2":         3,
		"PORT_INTERFACE_TYPE_CR4":         4,
		"PORT_INTERFACE_TYPE_SR":          5,
		"PORT_INTERFACE_TYPE_SR2":         6,
		"PORT_INTERFACE_TYPE_SR4":         7,
		"PORT_INTERFACE_TYPE_LR":          8,
		"PORT_INTERFACE_TYPE_LR4":         9,
		"PORT_INTERFACE_TYPE_KR":          10,
		"PORT_INTERFACE_TYPE_KR4":         11,
		"PORT_INTERFACE_TYPE_CAUI":        12,
		"PORT_INTERFACE_TYPE_GMII":        13,
		"PORT_INTERFACE_TYPE_SFI":         14,
		"PORT_INTERFACE_TYPE_XLAUI":       15,
		"PORT_INTERFACE_TYPE_KR2":         16,
		"PORT_INTERFACE_TYPE_CAUI4":       17,
		"PORT_INTERFACE_TYPE_XAUI":        18,
		"PORT_INTERFACE_TYPE_XFI":         19,
		"PORT_INTERFACE_TYPE_XGMII":       20,
		"PORT_INTERFACE_TYPE_MAX":         21,
	}
)

func (x PortInterfaceType) Enum() *PortInterfaceType {
	p := new(PortInterfaceType)
	*p = x
	return p
}

func (x PortInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[97].Descriptor()
}

func (PortInterfaceType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[97]
}

func (x PortInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortInterfaceType.Descriptor instead.
func (PortInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{97}
}

type PortInternalLoopbackMode int32

const (
	PortInternalLoopbackMode_PORT_INTERNAL_LOOPBACK_MODE_UNSPECIFIED PortInternalLoopbackMode = 0
	PortInternalLoopbackMode_PORT_INTERNAL_LOOPBACK_MODE_NONE        PortInternalLoopbackMode = 1
	PortInternalLoopbackMode_PORT_INTERNAL_LOOPBACK_MODE_PHY         PortInternalLoopbackMode = 2
	PortInternalLoopbackMode_PORT_INTERNAL_LOOPBACK_MODE_MAC         PortInternalLoopbackMode = 3
)

// Enum value maps for PortInternalLoopbackMode.
var (
	PortInternalLoopbackMode_name = map[int32]string{
		0: "PORT_INTERNAL_LOOPBACK_MODE_UNSPECIFIED",
		1: "PORT_INTERNAL_LOOPBACK_MODE_NONE",
		2: "PORT_INTERNAL_LOOPBACK_MODE_PHY",
		3: "PORT_INTERNAL_LOOPBACK_MODE_MAC",
	}
	PortInternalLoopbackMode_value = map[string]int32{
		"PORT_INTERNAL_LOOPBACK_MODE_UNSPECIFIED": 0,
		"PORT_INTERNAL_LOOPBACK_MODE_NONE":        1,
		"PORT_INTERNAL_LOOPBACK_MODE_PHY":         2,
		"PORT_INTERNAL_LOOPBACK_MODE_MAC":         3,
	}
)

func (x PortInternalLoopbackMode) Enum() *PortInternalLoopbackMode {
	p := new(PortInternalLoopbackMode)
	*p = x
	return p
}

func (x PortInternalLoopbackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortInternalLoopbackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[98].Descriptor()
}

func (PortInternalLoopbackMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[98]
}

func (x PortInternalLoopbackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortInternalLoopbackMode.Descriptor instead.
func (PortInternalLoopbackMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{98}
}

type PortLinkTrainingFailureStatus int32

const (
	PortLinkTrainingFailureStatus_PORT_LINK_TRAINING_FAILURE_STATUS_UNSPECIFIED         PortLinkTrainingFailureStatus = 0
	PortLinkTrainingFailureStatus_PORT_LINK_TRAINING_FAILURE_STATUS_NO_ERROR            PortLinkTrainingFailureStatus = 1
	PortLinkTrainingFailureStatus_PORT_LINK_TRAINING_FAILURE_STATUS_FRAME_LOCK_ERROR    PortLinkTrainingFailureStatus = 2
	PortLinkTrainingFailureStatus_PORT_LINK_TRAINING_FAILURE_STATUS_SNR_LOWER_THRESHOLD PortLinkTrainingFailureStatus = 3
	PortLinkTrainingFailureStatus_PORT_LINK_TRAINING_FAILURE_STATUS_TIME_OUT            PortLinkTrainingFailureStatus = 4
)

// Enum value maps for PortLinkTrainingFailureStatus.
var (
	PortLinkTrainingFailureStatus_name = map[int32]string{
		0: "PORT_LINK_TRAINING_FAILURE_STATUS_UNSPECIFIED",
		1: "PORT_LINK_TRAINING_FAILURE_STATUS_NO_ERROR",
		2: "PORT_LINK_TRAINING_FAILURE_STATUS_FRAME_LOCK_ERROR",
		3: "PORT_LINK_TRAINING_FAILURE_STATUS_SNR_LOWER_THRESHOLD",
		4: "PORT_LINK_TRAINING_FAILURE_STATUS_TIME_OUT",
	}
	PortLinkTrainingFailureStatus_value = map[string]int32{
		"PORT_LINK_TRAINING_FAILURE_STATUS_UNSPECIFIED":         0,
		"PORT_LINK_TRAINING_FAILURE_STATUS_NO_ERROR":            1,
		"PORT_LINK_TRAINING_FAILURE_STATUS_FRAME_LOCK_ERROR":    2,
		"PORT_LINK_TRAINING_FAILURE_STATUS_SNR_LOWER_THRESHOLD": 3,
		"PORT_LINK_TRAINING_FAILURE_STATUS_TIME_OUT":            4,
	}
)

func (x PortLinkTrainingFailureStatus) Enum() *PortLinkTrainingFailureStatus {
	p := new(PortLinkTrainingFailureStatus)
	*p = x
	return p
}

func (x PortLinkTrainingFailureStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortLinkTrainingFailureStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[99].Descriptor()
}

func (PortLinkTrainingFailureStatus) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[99]
}

func (x PortLinkTrainingFailureStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortLinkTrainingFailureStatus.Descriptor instead.
func (PortLinkTrainingFailureStatus) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{99}
}

type PortLinkTrainingRxStatus int32

const (
	PortLinkTrainingRxStatus_PORT_LINK_TRAINING_RX_STATUS_UNSPECIFIED PortLinkTrainingRxStatus = 0
	PortLinkTrainingRxStatus_PORT_LINK_TRAINING_RX_STATUS_NOT_TRAINED PortLinkTrainingRxStatus = 1
	PortLinkTrainingRxStatus_PORT_LINK_TRAINING_RX_STATUS_TRAINED     PortLinkTrainingRxStatus = 2
)

// Enum value maps for PortLinkTrainingRxStatus.
var (
	PortLinkTrainingRxStatus_name = map[int32]string{
		0: "PORT_LINK_TRAINING_RX_STATUS_UNSPECIFIED",
		1: "PORT_LINK_TRAINING_RX_STATUS_NOT_TRAINED",
		2: "PORT_LINK_TRAINING_RX_STATUS_TRAINED",
	}
	PortLinkTrainingRxStatus_value = map[string]int32{
		"PORT_LINK_TRAINING_RX_STATUS_UNSPECIFIED": 0,
		"PORT_LINK_TRAINING_RX_STATUS_NOT_TRAINED": 1,
		"PORT_LINK_TRAINING_RX_STATUS_TRAINED":     2,
	}
)

func (x PortLinkTrainingRxStatus) Enum() *PortLinkTrainingRxStatus {
	p := new(PortLinkTrainingRxStatus)
	*p = x
	return p
}

func (x PortLinkTrainingRxStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortLinkTrainingRxStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[100].Descriptor()
}

func (PortLinkTrainingRxStatus) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[100]
}

func (x PortLinkTrainingRxStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortLinkTrainingRxStatus.Descriptor instead.
func (PortLinkTrainingRxStatus) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{100}
}

type PortLoopbackMode int32

const (
	PortLoopbackMode_PORT_LOOPBACK_MODE_UNSPECIFIED PortLoopbackMode = 0
	PortLoopbackMode_PORT_LOOPBACK_MODE_NONE        PortLoopbackMode = 1
	PortLoopbackMode_PORT_LOOPBACK_MODE_PHY         PortLoopbackMode = 2
	PortLoopbackMode_PORT_LOOPBACK_MODE_MAC         PortLoopbackMode = 3
	PortLoopbackMode_PORT_LOOPBACK_MODE_PHY_REMOTE  PortLoopbackMode = 4
)

// Enum value maps for PortLoopbackMode.
var (
	PortLoopbackMode_name = map[int32]string{
		0: "PORT_LOOPBACK_MODE_UNSPECIFIED",
		1: "PORT_LOOPBACK_MODE_NONE",
		2: "PORT_LOOPBACK_MODE_PHY",
		3: "PORT_LOOPBACK_MODE_MAC",
		4: "PORT_LOOPBACK_MODE_PHY_REMOTE",
	}
	PortLoopbackMode_value = map[string]int32{
		"PORT_LOOPBACK_MODE_UNSPECIFIED": 0,
		"PORT_LOOPBACK_MODE_NONE":        1,
		"PORT_LOOPBACK_MODE_PHY":         2,
		"PORT_LOOPBACK_MODE_MAC":         3,
		"PORT_LOOPBACK_MODE_PHY_REMOTE":  4,
	}
)

func (x PortLoopbackMode) Enum() *PortLoopbackMode {
	p := new(PortLoopbackMode)
	*p = x
	return p
}

func (x PortLoopbackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortLoopbackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[101].Descriptor()
}

func (PortLoopbackMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[101]
}

func (x PortLoopbackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortLoopbackMode.Descriptor instead.
func (PortLoopbackMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{101}
}

type PortMdixModeConfig int32

const (
	PortMdixModeConfig_PORT_MDIX_MODE_CONFIG_UNSPECIFIED PortMdixModeConfig = 0
	PortMdixModeConfig_PORT_MDIX_MODE_CONFIG_AUTO        PortMdixModeConfig = 1
	PortMdixModeConfig_PORT_MDIX_MODE_CONFIG_STRAIGHT    PortMdixModeConfig = 2
	PortMdixModeConfig_PORT_MDIX_MODE_CONFIG_CROSSOVER   PortMdixModeConfig = 3
)

// Enum value maps for PortMdixModeConfig.
var (
	PortMdixModeConfig_name = map[int32]string{
		0: "PORT_MDIX_MODE_CONFIG_UNSPECIFIED",
		1: "PORT_MDIX_MODE_CONFIG_AUTO",
		2: "PORT_MDIX_MODE_CONFIG_STRAIGHT",
		3: "PORT_MDIX_MODE_CONFIG_CROSSOVER",
	}
	PortMdixModeConfig_value = map[string]int32{
		"PORT_MDIX_MODE_CONFIG_UNSPECIFIED": 0,
		"PORT_MDIX_MODE_CONFIG_AUTO":        1,
		"PORT_MDIX_MODE_CONFIG_STRAIGHT":    2,
		"PORT_MDIX_MODE_CONFIG_CROSSOVER":   3,
	}
)

func (x PortMdixModeConfig) Enum() *PortMdixModeConfig {
	p := new(PortMdixModeConfig)
	*p = x
	return p
}

func (x PortMdixModeConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortMdixModeConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[102].Descriptor()
}

func (PortMdixModeConfig) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[102]
}

func (x PortMdixModeConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortMdixModeConfig.Descriptor instead.
func (PortMdixModeConfig) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{102}
}

type PortMdixModeStatus int32

const (
	PortMdixModeStatus_PORT_MDIX_MODE_STATUS_UNSPECIFIED PortMdixModeStatus = 0
	PortMdixModeStatus_PORT_MDIX_MODE_STATUS_STRAIGHT    PortMdixModeStatus = 1
	PortMdixModeStatus_PORT_MDIX_MODE_STATUS_CROSSOVER   PortMdixModeStatus = 2
)

// Enum value maps for PortMdixModeStatus.
var (
	PortMdixModeStatus_name = map[int32]string{
		0: "PORT_MDIX_MODE_STATUS_UNSPECIFIED",
		1: "PORT_MDIX_MODE_STATUS_STRAIGHT",
		2: "PORT_MDIX_MODE_STATUS_CROSSOVER",
	}
	PortMdixModeStatus_value = map[string]int32{
		"PORT_MDIX_MODE_STATUS_UNSPECIFIED": 0,
		"PORT_MDIX_MODE_STATUS_STRAIGHT":    1,
		"PORT_MDIX_MODE_STATUS_CROSSOVER":   2,
	}
)

func (x PortMdixModeStatus) Enum() *PortMdixModeStatus {
	p := new(PortMdixModeStatus)
	*p = x
	return p
}

func (x PortMdixModeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortMdixModeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[103].Descriptor()
}

func (PortMdixModeStatus) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[103]
}

func (x PortMdixModeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortMdixModeStatus.Descriptor instead.
func (PortMdixModeStatus) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{103}
}

type PortMediaType int32

const (
	PortMediaType_PORT_MEDIA_TYPE_UNSPECIFIED PortMediaType = 0
	PortMediaType_PORT_MEDIA_TYPE_NOT_PRESENT PortMediaType = 1
	PortMediaType_PORT_MEDIA_TYPE_UNKNOWN     PortMediaType = 2
	PortMediaType_PORT_MEDIA_TYPE_FIBER       PortMediaType = 3
	PortMediaType_PORT_MEDIA_TYPE_COPPER      PortMediaType = 4
	PortMediaType_PORT_MEDIA_TYPE_BACKPLANE   PortMediaType = 5
)

// Enum value maps for PortMediaType.
var (
	PortMediaType_name = map[int32]string{
		0: "PORT_MEDIA_TYPE_UNSPECIFIED",
		1: "PORT_MEDIA_TYPE_NOT_PRESENT",
		2: "PORT_MEDIA_TYPE_UNKNOWN",
		3: "PORT_MEDIA_TYPE_FIBER",
		4: "PORT_MEDIA_TYPE_COPPER",
		5: "PORT_MEDIA_TYPE_BACKPLANE",
	}
	PortMediaType_value = map[string]int32{
		"PORT_MEDIA_TYPE_UNSPECIFIED": 0,
		"PORT_MEDIA_TYPE_NOT_PRESENT": 1,
		"PORT_MEDIA_TYPE_UNKNOWN":     2,
		"PORT_MEDIA_TYPE_FIBER":       3,
		"PORT_MEDIA_TYPE_COPPER":      4,
		"PORT_MEDIA_TYPE_BACKPLANE":   5,
	}
)

func (x PortMediaType) Enum() *PortMediaType {
	p := new(PortMediaType)
	*p = x
	return p
}

func (x PortMediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortMediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[104].Descriptor()
}

func (PortMediaType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[104]
}

func (x PortMediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortMediaType.Descriptor instead.
func (PortMediaType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{104}
}

type PortModuleType int32

const (
	PortModuleType_PORT_MODULE_TYPE_UNSPECIFIED PortModuleType = 0
	PortModuleType_PORT_MODULE_TYPE_1000BASE_X  PortModuleType = 1
	PortModuleType_PORT_MODULE_TYPE_100FX       PortModuleType = 2
	PortModuleType_PORT_MODULE_TYPE_SGMII_SLAVE PortModuleType = 3
)

// Enum value maps for PortModuleType.
var (
	PortModuleType_name = map[int32]string{
		0: "PORT_MODULE_TYPE_UNSPECIFIED",
		1: "PORT_MODULE_TYPE_1000BASE_X",
		2: "PORT_MODULE_TYPE_100FX",
		3: "PORT_MODULE_TYPE_SGMII_SLAVE",
	}
	PortModuleType_value = map[string]int32{
		"PORT_MODULE_TYPE_UNSPECIFIED": 0,
		"PORT_MODULE_TYPE_1000BASE_X":  1,
		"PORT_MODULE_TYPE_100FX":       2,
		"PORT_MODULE_TYPE_SGMII_SLAVE": 3,
	}
)

func (x PortModuleType) Enum() *PortModuleType {
	p := new(PortModuleType)
	*p = x
	return p
}

func (x PortModuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortModuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[105].Descriptor()
}

func (PortModuleType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[105]
}

func (x PortModuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortModuleType.Descriptor instead.
func (PortModuleType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{105}
}

type PortOperStatus int32

const (
	PortOperStatus_PORT_OPER_STATUS_UNSPECIFIED PortOperStatus = 0
	PortOperStatus_PORT_OPER_STATUS_UNKNOWN     PortOperStatus = 1
	PortOperStatus_PORT_OPER_STATUS_UP          PortOperStatus = 2
	PortOperStatus_PORT_OPER_STATUS_DOWN        PortOperStatus = 3
	PortOperStatus_PORT_OPER_STATUS_TESTING     PortOperStatus = 4
	PortOperStatus_PORT_OPER_STATUS_NOT_PRESENT PortOperStatus = 5
)

// Enum value maps for PortOperStatus.
var (
	PortOperStatus_name = map[int32]string{
		0: "PORT_OPER_STATUS_UNSPECIFIED",
		1: "PORT_OPER_STATUS_UNKNOWN",
		2: "PORT_OPER_STATUS_UP",
		3: "PORT_OPER_STATUS_DOWN",
		4: "PORT_OPER_STATUS_TESTING",
		5: "PORT_OPER_STATUS_NOT_PRESENT",
	}
	PortOperStatus_value = map[string]int32{
		"PORT_OPER_STATUS_UNSPECIFIED": 0,
		"PORT_OPER_STATUS_UNKNOWN":     1,
		"PORT_OPER_STATUS_UP":          2,
		"PORT_OPER_STATUS_DOWN":        3,
		"PORT_OPER_STATUS_TESTING":     4,
		"PORT_OPER_STATUS_NOT_PRESENT": 5,
	}
)

func (x PortOperStatus) Enum() *PortOperStatus {
	p := new(PortOperStatus)
	*p = x
	return p
}

func (x PortOperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortOperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[106].Descriptor()
}

func (PortOperStatus) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[106]
}

func (x PortOperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortOperStatus.Descriptor instead.
func (PortOperStatus) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{106}
}

type PortPoolStat int32

const (
	PortPoolStat_PORT_POOL_STAT_UNSPECIFIED                    PortPoolStat = 0
	PortPoolStat_PORT_POOL_STAT_IF_OCTETS                      PortPoolStat = 1
	PortPoolStat_PORT_POOL_STAT_GREEN_WRED_DROPPED_PACKETS     PortPoolStat = 2
	PortPoolStat_PORT_POOL_STAT_GREEN_WRED_DROPPED_BYTES       PortPoolStat = 3
	PortPoolStat_PORT_POOL_STAT_YELLOW_WRED_DROPPED_PACKETS    PortPoolStat = 4
	PortPoolStat_PORT_POOL_STAT_YELLOW_WRED_DROPPED_BYTES      PortPoolStat = 5
	PortPoolStat_PORT_POOL_STAT_RED_WRED_DROPPED_PACKETS       PortPoolStat = 6
	PortPoolStat_PORT_POOL_STAT_RED_WRED_DROPPED_BYTES         PortPoolStat = 7
	PortPoolStat_PORT_POOL_STAT_WRED_DROPPED_PACKETS           PortPoolStat = 8
	PortPoolStat_PORT_POOL_STAT_WRED_DROPPED_BYTES             PortPoolStat = 9
	PortPoolStat_PORT_POOL_STAT_GREEN_WRED_ECN_MARKED_PACKETS  PortPoolStat = 10
	PortPoolStat_PORT_POOL_STAT_GREEN_WRED_ECN_MARKED_BYTES    PortPoolStat = 11
	PortPoolStat_PORT_POOL_STAT_YELLOW_WRED_ECN_MARKED_PACKETS PortPoolStat = 12
	PortPoolStat_PORT_POOL_STAT_YELLOW_WRED_ECN_MARKED_BYTES   PortPoolStat = 13
	PortPoolStat_PORT_POOL_STAT_RED_WRED_ECN_MARKED_PACKETS    PortPoolStat = 14
	PortPoolStat_PORT_POOL_STAT_RED_WRED_ECN_MARKED_BYTES      PortPoolStat = 15
	PortPoolStat_PORT_POOL_STAT_WRED_ECN_MARKED_PACKETS        PortPoolStat = 16
	PortPoolStat_PORT_POOL_STAT_WRED_ECN_MARKED_BYTES          PortPoolStat = 17
	PortPoolStat_PORT_POOL_STAT_CURR_OCCUPANCY_BYTES           PortPoolStat = 18
	PortPoolStat_PORT_POOL_STAT_WATERMARK_BYTES                PortPoolStat = 19
	PortPoolStat_PORT_POOL_STAT_SHARED_CURR_OCCUPANCY_BYTES    PortPoolStat = 20
	PortPoolStat_PORT_POOL_STAT_SHARED_WATERMARK_BYTES         PortPoolStat = 21
	PortPoolStat_PORT_POOL_STAT_DROPPED_PKTS                   PortPoolStat = 22
)

// Enum value maps for PortPoolStat.
var (
	PortPoolStat_name = map[int32]string{
		0:  "PORT_POOL_STAT_UNSPECIFIED",
		1:  "PORT_POOL_STAT_IF_OCTETS",
		2:  "PORT_POOL_STAT_GREEN_WRED_DROPPED_PACKETS",
		3:  "PORT_POOL_STAT_GREEN_WRED_DROPPED_BYTES",
		4:  "PORT_POOL_STAT_YELLOW_WRED_DROPPED_PACKETS",
		5:  "PORT_POOL_STAT_YELLOW_WRED_DROPPED_BYTES",
		6:  "PORT_POOL_STAT_RED_WRED_DROPPED_PACKETS",
		7:  "PORT_POOL_STAT_RED_WRED_DROPPED_BYTES",
		8:  "PORT_POOL_STAT_WRED_DROPPED_PACKETS",
		9:  "PORT_POOL_STAT_WRED_DROPPED_BYTES",
		10: "PORT_POOL_STAT_GREEN_WRED_ECN_MARKED_PACKETS",
		11: "PORT_POOL_STAT_GREEN_WRED_ECN_MARKED_BYTES",
		12: "PORT_POOL_STAT_YELLOW_WRED_ECN_MARKED_PACKETS",
		13: "PORT_POOL_STAT_YELLOW_WRED_ECN_MARKED_BYTES",
		14: "PORT_POOL_STAT_RED_WRED_ECN_MARKED_PACKETS",
		15: "PORT_POOL_STAT_RED_WRED_ECN_MARKED_BYTES",
		16: "PORT_POOL_STAT_WRED_ECN_MARKED_PACKETS",
		17: "PORT_POOL_STAT_WRED_ECN_MARKED_BYTES",
		18: "PORT_POOL_STAT_CURR_OCCUPANCY_BYTES",
		19: "PORT_POOL_STAT_WATERMARK_BYTES",
		20: "PORT_POOL_STAT_SHARED_CURR_OCCUPANCY_BYTES",
		21: "PORT_POOL_STAT_SHARED_WATERMARK_BYTES",
		22: "PORT_POOL_STAT_DROPPED_PKTS",
	}
	PortPoolStat_value = map[string]int32{
		"PORT_POOL_STAT_UNSPECIFIED":                    0,
		"PORT_POOL_STAT_IF_OCTETS":                      1,
		"PORT_POOL_STAT_GREEN_WRED_DROPPED_PACKETS":     2,
		"PORT_POOL_STAT_GREEN_WRED_DROPPED_BYTES":       3,
		"PORT_POOL_STAT_YELLOW_WRED_DROPPED_PACKETS":    4,
		"PORT_POOL_STAT_YELLOW_WRED_DROPPED_BYTES":      5,
		"PORT_POOL_STAT_RED_WRED_DROPPED_PACKETS":       6,
		"PORT_POOL_STAT_RED_WRED_DROPPED_BYTES":         7,
		"PORT_POOL_STAT_WRED_DROPPED_PACKETS":           8,
		"PORT_POOL_STAT_WRED_DROPPED_BYTES":             9,
		"PORT_POOL_STAT_GREEN_WRED_ECN_MARKED_PACKETS":  10,
		"PORT_POOL_STAT_GREEN_WRED_ECN_MARKED_BYTES":    11,
		"PORT_POOL_STAT_YELLOW_WRED_ECN_MARKED_PACKETS": 12,
		"PORT_POOL_STAT_YELLOW_WRED_ECN_MARKED_BYTES":   13,
		"PORT_POOL_STAT_RED_WRED_ECN_MARKED_PACKETS":    14,
		"PORT_POOL_STAT_RED_WRED_ECN_MARKED_BYTES":      15,
		"PORT_POOL_STAT_WRED_ECN_MARKED_PACKETS":        16,
		"PORT_POOL_STAT_WRED_ECN_MARKED_BYTES":          17,
		"PORT_POOL_STAT_CURR_OCCUPANCY_BYTES":           18,
		"PORT_POOL_STAT_WATERMARK_BYTES":                19,
		"PORT_POOL_STAT_SHARED_CURR_OCCUPANCY_BYTES":    20,
		"PORT_POOL_STAT_SHARED_WATERMARK_BYTES":         21,
		"PORT_POOL_STAT_DROPPED_PKTS":                   22,
	}
)

func (x PortPoolStat) Enum() *PortPoolStat {
	p := new(PortPoolStat)
	*p = x
	return p
}

func (x PortPoolStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortPoolStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[107].Descriptor()
}

func (PortPoolStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[107]
}

func (x PortPoolStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortPoolStat.Descriptor instead.
func (PortPoolStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{107}
}

type PortPrbsConfig int32

const (
	PortPrbsConfig_PORT_PRBS_CONFIG_UNSPECIFIED  PortPrbsConfig = 0
	PortPrbsConfig_PORT_PRBS_CONFIG_DISABLE      PortPrbsConfig = 1
	PortPrbsConfig_PORT_PRBS_CONFIG_ENABLE_TX_RX PortPrbsConfig = 2
	PortPrbsConfig_PORT_PRBS_CONFIG_ENABLE_RX    PortPrbsConfig = 3
	PortPrbsConfig_PORT_PRBS_CONFIG_ENABLE_TX    PortPrbsConfig = 4
)

// Enum value maps for PortPrbsConfig.
var (
	PortPrbsConfig_name = map[int32]string{
		0: "PORT_PRBS_CONFIG_UNSPECIFIED",
		1: "PORT_PRBS_CONFIG_DISABLE",
		2: "PORT_PRBS_CONFIG_ENABLE_TX_RX",
		3: "PORT_PRBS_CONFIG_ENABLE_RX",
		4: "PORT_PRBS_CONFIG_ENABLE_TX",
	}
	PortPrbsConfig_value = map[string]int32{
		"PORT_PRBS_CONFIG_UNSPECIFIED":  0,
		"PORT_PRBS_CONFIG_DISABLE":      1,
		"PORT_PRBS_CONFIG_ENABLE_TX_RX": 2,
		"PORT_PRBS_CONFIG_ENABLE_RX":    3,
		"PORT_PRBS_CONFIG_ENABLE_TX":    4,
	}
)

func (x PortPrbsConfig) Enum() *PortPrbsConfig {
	p := new(PortPrbsConfig)
	*p = x
	return p
}

func (x PortPrbsConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortPrbsConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[108].Descriptor()
}

func (PortPrbsConfig) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[108]
}

func (x PortPrbsConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortPrbsConfig.Descriptor instead.
func (PortPrbsConfig) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{108}
}

type PortPrbsRxStatus int32

const (
	PortPrbsRxStatus_PORT_PRBS_RX_STATUS_UNSPECIFIED      PortPrbsRxStatus = 0
	PortPrbsRxStatus_PORT_PRBS_RX_STATUS_OK               PortPrbsRxStatus = 1
	PortPrbsRxStatus_PORT_PRBS_RX_STATUS_LOCK_WITH_ERRORS PortPrbsRxStatus = 2
	PortPrbsRxStatus_PORT_PRBS_RX_STATUS_NOT_LOCKED       PortPrbsRxStatus = 3
	PortPrbsRxStatus_PORT_PRBS_RX_STATUS_LOST_LOCK        PortPrbsRxStatus = 4
)

// Enum value maps for PortPrbsRxStatus.
var (
	PortPrbsRxStatus_name = map[int32]string{
		0: "PORT_PRBS_RX_STATUS_UNSPECIFIED",
		1: "PORT_PRBS_RX_STATUS_OK",
		2: "PORT_PRBS_RX_STATUS_LOCK_WITH_ERRORS",
		3: "PORT_PRBS_RX_STATUS_NOT_LOCKED",
		4: "PORT_PRBS_RX_STATUS_LOST_LOCK",
	}
	PortPrbsRxStatus_value = map[string]int32{
		"PORT_PRBS_RX_STATUS_UNSPECIFIED":      0,
		"PORT_PRBS_RX_STATUS_OK":               1,
		"PORT_PRBS_RX_STATUS_LOCK_WITH_ERRORS": 2,
		"PORT_PRBS_RX_STATUS_NOT_LOCKED":       3,
		"PORT_PRBS_RX_STATUS_LOST_LOCK":        4,
	}
)

func (x PortPrbsRxStatus) Enum() *PortPrbsRxStatus {
	p := new(PortPrbsRxStatus)
	*p = x
	return p
}

func (x PortPrbsRxStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortPrbsRxStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[109].Descriptor()
}

func (PortPrbsRxStatus) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[109]
}

func (x PortPrbsRxStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortPrbsRxStatus.Descriptor instead.
func (PortPrbsRxStatus) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{109}
}

type PortPriorityFlowControlMode int32

const (
	PortPriorityFlowControlMode_PORT_PRIORITY_FLOW_CONTROL_MODE_UNSPECIFIED PortPriorityFlowControlMode = 0
	PortPriorityFlowControlMode_PORT_PRIORITY_FLOW_CONTROL_MODE_COMBINED    PortPriorityFlowControlMode = 1
	PortPriorityFlowControlMode_PORT_PRIORITY_FLOW_CONTROL_MODE_SEPARATE    PortPriorityFlowControlMode = 2
)

// Enum value maps for PortPriorityFlowControlMode.
var (
	PortPriorityFlowControlMode_name = map[int32]string{
		0: "PORT_PRIORITY_FLOW_CONTROL_MODE_UNSPECIFIED",
		1: "PORT_PRIORITY_FLOW_CONTROL_MODE_COMBINED",
		2: "PORT_PRIORITY_FLOW_CONTROL_MODE_SEPARATE",
	}
	PortPriorityFlowControlMode_value = map[string]int32{
		"PORT_PRIORITY_FLOW_CONTROL_MODE_UNSPECIFIED": 0,
		"PORT_PRIORITY_FLOW_CONTROL_MODE_COMBINED":    1,
		"PORT_PRIORITY_FLOW_CONTROL_MODE_SEPARATE":    2,
	}
)

func (x PortPriorityFlowControlMode) Enum() *PortPriorityFlowControlMode {
	p := new(PortPriorityFlowControlMode)
	*p = x
	return p
}

func (x PortPriorityFlowControlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortPriorityFlowControlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[110].Descriptor()
}

func (PortPriorityFlowControlMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[110]
}

func (x PortPriorityFlowControlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortPriorityFlowControlMode.Descriptor instead.
func (PortPriorityFlowControlMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{110}
}

type PortPtpMode int32

const (
	PortPtpMode_PORT_PTP_MODE_UNSPECIFIED           PortPtpMode = 0
	PortPtpMode_PORT_PTP_MODE_NONE                  PortPtpMode = 1
	PortPtpMode_PORT_PTP_MODE_SINGLE_STEP_TIMESTAMP PortPtpMode = 2
	PortPtpMode_PORT_PTP_MODE_TWO_STEP_TIMESTAMP    PortPtpMode = 3
)

// Enum value maps for PortPtpMode.
var (
	PortPtpMode_name = map[int32]string{
		0: "PORT_PTP_MODE_UNSPECIFIED",
		1: "PORT_PTP_MODE_NONE",
		2: "PORT_PTP_MODE_SINGLE_STEP_TIMESTAMP",
		3: "PORT_PTP_MODE_TWO_STEP_TIMESTAMP",
	}
	PortPtpMode_value = map[string]int32{
		"PORT_PTP_MODE_UNSPECIFIED":           0,
		"PORT_PTP_MODE_NONE":                  1,
		"PORT_PTP_MODE_SINGLE_STEP_TIMESTAMP": 2,
		"PORT_PTP_MODE_TWO_STEP_TIMESTAMP":    3,
	}
)

func (x PortPtpMode) Enum() *PortPtpMode {
	p := new(PortPtpMode)
	*p = x
	return p
}

func (x PortPtpMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortPtpMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[111].Descriptor()
}

func (PortPtpMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[111]
}

func (x PortPtpMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortPtpMode.Descriptor instead.
func (PortPtpMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{111}
}

type PortStat int32

const (
	PortStat_PORT_STAT_UNSPECIFIED                                PortStat = 0
	PortStat_PORT_STAT_IF_IN_OCTETS                               PortStat = 1
	PortStat_PORT_STAT_IF_IN_UCAST_PKTS                           PortStat = 2
	PortStat_PORT_STAT_IF_IN_NON_UCAST_PKTS                       PortStat = 3
	PortStat_PORT_STAT_IF_IN_DISCARDS                             PortStat = 4
	PortStat_PORT_STAT_IF_IN_ERRORS                               PortStat = 5
	PortStat_PORT_STAT_IF_IN_UNKNOWN_PROTOS                       PortStat = 6
	PortStat_PORT_STAT_IF_IN_BROADCAST_PKTS                       PortStat = 7
	PortStat_PORT_STAT_IF_IN_MULTICAST_PKTS                       PortStat = 8
	PortStat_PORT_STAT_IF_IN_VLAN_DISCARDS                        PortStat = 9
	PortStat_PORT_STAT_IF_OUT_OCTETS                              PortStat = 10
	PortStat_PORT_STAT_IF_OUT_UCAST_PKTS                          PortStat = 11
	PortStat_PORT_STAT_IF_OUT_NON_UCAST_PKTS                      PortStat = 12
	PortStat_PORT_STAT_IF_OUT_DISCARDS                            PortStat = 13
	PortStat_PORT_STAT_IF_OUT_ERRORS                              PortStat = 14
	PortStat_PORT_STAT_IF_OUT_QLEN                                PortStat = 15
	PortStat_PORT_STAT_IF_OUT_BROADCAST_PKTS                      PortStat = 16
	PortStat_PORT_STAT_IF_OUT_MULTICAST_PKTS                      PortStat = 17
	PortStat_PORT_STAT_ETHER_STATS_DROP_EVENTS                    PortStat = 18
	PortStat_PORT_STAT_ETHER_STATS_MULTICAST_PKTS                 PortStat = 19
	PortStat_PORT_STAT_ETHER_STATS_BROADCAST_PKTS                 PortStat = 20
	PortStat_PORT_STAT_ETHER_STATS_UNDERSIZE_PKTS                 PortStat = 21
	PortStat_PORT_STAT_ETHER_STATS_FRAGMENTS                      PortStat = 22
	PortStat_PORT_STAT_ETHER_STATS_PKTS_64_OCTETS                 PortStat = 23
	PortStat_PORT_STAT_ETHER_STATS_PKTS_65_TO_127_OCTETS          PortStat = 24
	PortStat_PORT_STAT_ETHER_STATS_PKTS_128_TO_255_OCTETS         PortStat = 25
	PortStat_PORT_STAT_ETHER_STATS_PKTS_256_TO_511_OCTETS         PortStat = 26
	PortStat_PORT_STAT_ETHER_STATS_PKTS_512_TO_1023_OCTETS        PortStat = 27
	PortStat_PORT_STAT_ETHER_STATS_PKTS_1024_TO_1518_OCTETS       PortStat = 28
	PortStat_PORT_STAT_ETHER_STATS_PKTS_1519_TO_2047_OCTETS       PortStat = 29
	PortStat_PORT_STAT_ETHER_STATS_PKTS_2048_TO_4095_OCTETS       PortStat = 30
	PortStat_PORT_STAT_ETHER_STATS_PKTS_4096_TO_9216_OCTETS       PortStat = 31
	PortStat_PORT_STAT_ETHER_STATS_PKTS_9217_TO_16383_OCTETS      PortStat = 32
	PortStat_PORT_STAT_ETHER_STATS_OVERSIZE_PKTS                  PortStat = 33
	PortStat_PORT_STAT_ETHER_RX_OVERSIZE_PKTS                     PortStat = 34
	PortStat_PORT_STAT_ETHER_TX_OVERSIZE_PKTS                     PortStat = 35
	PortStat_PORT_STAT_ETHER_STATS_JABBERS                        PortStat = 36
	PortStat_PORT_STAT_ETHER_STATS_OCTETS                         PortStat = 37
	PortStat_PORT_STAT_ETHER_STATS_PKTS                           PortStat = 38
	PortStat_PORT_STAT_ETHER_STATS_COLLISIONS                     PortStat = 39
	PortStat_PORT_STAT_ETHER_STATS_CRC_ALIGN_ERRORS               PortStat = 40
	PortStat_PORT_STAT_ETHER_STATS_TX_NO_ERRORS                   PortStat = 41
	PortStat_PORT_STAT_ETHER_STATS_RX_NO_ERRORS                   PortStat = 42
	PortStat_PORT_STAT_IP_IN_RECEIVES                             PortStat = 43
	PortStat_PORT_STAT_IP_IN_OCTETS                               PortStat = 44
	PortStat_PORT_STAT_IP_IN_UCAST_PKTS                           PortStat = 45
	PortStat_PORT_STAT_IP_IN_NON_UCAST_PKTS                       PortStat = 46
	PortStat_PORT_STAT_IP_IN_DISCARDS                             PortStat = 47
	PortStat_PORT_STAT_IP_OUT_OCTETS                              PortStat = 48
	PortStat_PORT_STAT_IP_OUT_UCAST_PKTS                          PortStat = 49
	PortStat_PORT_STAT_IP_OUT_NON_UCAST_PKTS                      PortStat = 50
	PortStat_PORT_STAT_IP_OUT_DISCARDS                            PortStat = 51
	PortStat_PORT_STAT_IPV6_IN_RECEIVES                           PortStat = 52
	PortStat_PORT_STAT_IPV6_IN_OCTETS                             PortStat = 53
	PortStat_PORT_STAT_IPV6_IN_UCAST_PKTS                         PortStat = 54
	PortStat_PORT_STAT_IPV6_IN_NON_UCAST_PKTS                     PortStat = 55
	PortStat_PORT_STAT_IPV6_IN_MCAST_PKTS                         PortStat = 56
	PortStat_PORT_STAT_IPV6_IN_DISCARDS                           PortStat = 57
	PortStat_PORT_STAT_IPV6_OUT_OCTETS                            PortStat = 58
	PortStat_PORT_STAT_IPV6_OUT_UCAST_PKTS                        PortStat = 59
	PortStat_PORT_STAT_IPV6_OUT_NON_UCAST_PKTS                    PortStat = 60
	PortStat_PORT_STAT_IPV6_OUT_MCAST_PKTS                        PortStat = 61
	PortStat_PORT_STAT_IPV6_OUT_DISCARDS                          PortStat = 62
	PortStat_PORT_STAT_GREEN_WRED_DROPPED_PACKETS                 PortStat = 63
	PortStat_PORT_STAT_GREEN_WRED_DROPPED_BYTES                   PortStat = 64
	PortStat_PORT_STAT_YELLOW_WRED_DROPPED_PACKETS                PortStat = 65
	PortStat_PORT_STAT_YELLOW_WRED_DROPPED_BYTES                  PortStat = 66
	PortStat_PORT_STAT_RED_WRED_DROPPED_PACKETS                   PortStat = 67
	PortStat_PORT_STAT_RED_WRED_DROPPED_BYTES                     PortStat = 68
	PortStat_PORT_STAT_WRED_DROPPED_PACKETS                       PortStat = 69
	PortStat_PORT_STAT_WRED_DROPPED_BYTES                         PortStat = 70
	PortStat_PORT_STAT_ECN_MARKED_PACKETS                         PortStat = 71
	PortStat_PORT_STAT_ETHER_IN_PKTS_64_OCTETS                    PortStat = 72
	PortStat_PORT_STAT_ETHER_IN_PKTS_65_TO_127_OCTETS             PortStat = 73
	PortStat_PORT_STAT_ETHER_IN_PKTS_128_TO_255_OCTETS            PortStat = 74
	PortStat_PORT_STAT_ETHER_IN_PKTS_256_TO_511_OCTETS            PortStat = 75
	PortStat_PORT_STAT_ETHER_IN_PKTS_512_TO_1023_OCTETS           PortStat = 76
	PortStat_PORT_STAT_ETHER_IN_PKTS_1024_TO_1518_OCTETS          PortStat = 77
	PortStat_PORT_STAT_ETHER_IN_PKTS_1519_TO_2047_OCTETS          PortStat = 78
	PortStat_PORT_STAT_ETHER_IN_PKTS_2048_TO_4095_OCTETS          PortStat = 79
	PortStat_PORT_STAT_ETHER_IN_PKTS_4096_TO_9216_OCTETS          PortStat = 80
	PortStat_PORT_STAT_ETHER_IN_PKTS_9217_TO_16383_OCTETS         PortStat = 81
	PortStat_PORT_STAT_ETHER_OUT_PKTS_64_OCTETS                   PortStat = 82
	PortStat_PORT_STAT_ETHER_OUT_PKTS_65_TO_127_OCTETS            PortStat = 83
	PortStat_PORT_STAT_ETHER_OUT_PKTS_128_TO_255_OCTETS           PortStat = 84
	PortStat_PORT_STAT_ETHER_OUT_PKTS_256_TO_511_OCTETS           PortStat = 85
	PortStat_PORT_STAT_ETHER_OUT_PKTS_512_TO_1023_OCTETS          PortStat = 86
	PortStat_PORT_STAT_ETHER_OUT_PKTS_1024_TO_1518_OCTETS         PortStat = 87
	PortStat_PORT_STAT_ETHER_OUT_PKTS_1519_TO_2047_OCTETS         PortStat = 88
	PortStat_PORT_STAT_ETHER_OUT_PKTS_2048_TO_4095_OCTETS         PortStat = 89
	PortStat_PORT_STAT_ETHER_OUT_PKTS_4096_TO_9216_OCTETS         PortStat = 90
	PortStat_PORT_STAT_ETHER_OUT_PKTS_9217_TO_16383_OCTETS        PortStat = 91
	PortStat_PORT_STAT_IN_CURR_OCCUPANCY_BYTES                    PortStat = 92
	PortStat_PORT_STAT_IN_WATERMARK_BYTES                         PortStat = 93
	PortStat_PORT_STAT_IN_SHARED_CURR_OCCUPANCY_BYTES             PortStat = 94
	PortStat_PORT_STAT_IN_SHARED_WATERMARK_BYTES                  PortStat = 95
	PortStat_PORT_STAT_OUT_CURR_OCCUPANCY_BYTES                   PortStat = 96
	PortStat_PORT_STAT_OUT_WATERMARK_BYTES                        PortStat = 97
	PortStat_PORT_STAT_OUT_SHARED_CURR_OCCUPANCY_BYTES            PortStat = 98
	PortStat_PORT_STAT_OUT_SHARED_WATERMARK_BYTES                 PortStat = 99
	PortStat_PORT_STAT_IN_DROPPED_PKTS                            PortStat = 100
	PortStat_PORT_STAT_OUT_DROPPED_PKTS                           PortStat = 101
	PortStat_PORT_STAT_PAUSE_RX_PKTS                              PortStat = 102
	PortStat_PORT_STAT_PAUSE_TX_PKTS                              PortStat = 103
	PortStat_PORT_STAT_PFC_0_RX_PKTS                              PortStat = 104
	PortStat_PORT_STAT_PFC_0_TX_PKTS                              PortStat = 105
	PortStat_PORT_STAT_PFC_1_RX_PKTS                              PortStat = 106
	PortStat_PORT_STAT_PFC_1_TX_PKTS                              PortStat = 107
	PortStat_PORT_STAT_PFC_2_RX_PKTS                              PortStat = 108
	PortStat_PORT_STAT_PFC_2_TX_PKTS                              PortStat = 109
	PortStat_PORT_STAT_PFC_3_RX_PKTS                              PortStat = 110
	PortStat_PORT_STAT_PFC_3_TX_PKTS                              PortStat = 111
	PortStat_PORT_STAT_PFC_4_RX_PKTS                              PortStat = 112
	PortStat_PORT_STAT_PFC_4_TX_PKTS                              PortStat = 113
	PortStat_PORT_STAT_PFC_5_RX_PKTS                              PortStat = 114
	PortStat_PORT_STAT_PFC_5_TX_PKTS                              PortStat = 115
	PortStat_PORT_STAT_PFC_6_RX_PKTS                              PortStat = 116
	PortStat_PORT_STAT_PFC_6_TX_PKTS                              PortStat = 117
	PortStat_PORT_STAT_PFC_7_RX_PKTS                              PortStat = 118
	PortStat_PORT_STAT_PFC_7_TX_PKTS                              PortStat = 119
	PortStat_PORT_STAT_PFC_0_RX_PAUSE_DURATION                    PortStat = 120
	PortStat_PORT_STAT_PFC_0_TX_PAUSE_DURATION                    PortStat = 121
	PortStat_PORT_STAT_PFC_1_RX_PAUSE_DURATION                    PortStat = 122
	PortStat_PORT_STAT_PFC_1_TX_PAUSE_DURATION                    PortStat = 123
	PortStat_PORT_STAT_PFC_2_RX_PAUSE_DURATION                    PortStat = 124
	PortStat_PORT_STAT_PFC_2_TX_PAUSE_DURATION                    PortStat = 125
	PortStat_PORT_STAT_PFC_3_RX_PAUSE_DURATION                    PortStat = 126
	PortStat_PORT_STAT_PFC_3_TX_PAUSE_DURATION                    PortStat = 127
	PortStat_PORT_STAT_PFC_4_RX_PAUSE_DURATION                    PortStat = 128
	PortStat_PORT_STAT_PFC_4_TX_PAUSE_DURATION                    PortStat = 129
	PortStat_PORT_STAT_PFC_5_RX_PAUSE_DURATION                    PortStat = 130
	PortStat_PORT_STAT_PFC_5_TX_PAUSE_DURATION                    PortStat = 131
	PortStat_PORT_STAT_PFC_6_RX_PAUSE_DURATION                    PortStat = 132
	PortStat_PORT_STAT_PFC_6_TX_PAUSE_DURATION                    PortStat = 133
	PortStat_PORT_STAT_PFC_7_RX_PAUSE_DURATION                    PortStat = 134
	PortStat_PORT_STAT_PFC_7_TX_PAUSE_DURATION                    PortStat = 135
	PortStat_PORT_STAT_PFC_0_RX_PAUSE_DURATION_US                 PortStat = 136
	PortStat_PORT_STAT_PFC_0_TX_PAUSE_DURATION_US                 PortStat = 137
	PortStat_PORT_STAT_PFC_1_RX_PAUSE_DURATION_US                 PortStat = 138
	PortStat_PORT_STAT_PFC_1_TX_PAUSE_DURATION_US                 PortStat = 139
	PortStat_PORT_STAT_PFC_2_RX_PAUSE_DURATION_US                 PortStat = 140
	PortStat_PORT_STAT_PFC_2_TX_PAUSE_DURATION_US                 PortStat = 141
	PortStat_PORT_STAT_PFC_3_RX_PAUSE_DURATION_US                 PortStat = 142
	PortStat_PORT_STAT_PFC_3_TX_PAUSE_DURATION_US                 PortStat = 143
	PortStat_PORT_STAT_PFC_4_RX_PAUSE_DURATION_US                 PortStat = 144
	PortStat_PORT_STAT_PFC_4_TX_PAUSE_DURATION_US                 PortStat = 145
	PortStat_PORT_STAT_PFC_5_RX_PAUSE_DURATION_US                 PortStat = 146
	PortStat_PORT_STAT_PFC_5_TX_PAUSE_DURATION_US                 PortStat = 147
	PortStat_PORT_STAT_PFC_6_RX_PAUSE_DURATION_US                 PortStat = 148
	PortStat_PORT_STAT_PFC_6_TX_PAUSE_DURATION_US                 PortStat = 149
	PortStat_PORT_STAT_PFC_7_RX_PAUSE_DURATION_US                 PortStat = 150
	PortStat_PORT_STAT_PFC_7_TX_PAUSE_DURATION_US                 PortStat = 151
	PortStat_PORT_STAT_PFC_0_ON2OFF_RX_PKTS                       PortStat = 152
	PortStat_PORT_STAT_PFC_1_ON2OFF_RX_PKTS                       PortStat = 153
	PortStat_PORT_STAT_PFC_2_ON2OFF_RX_PKTS                       PortStat = 154
	PortStat_PORT_STAT_PFC_3_ON2OFF_RX_PKTS                       PortStat = 155
	PortStat_PORT_STAT_PFC_4_ON2OFF_RX_PKTS                       PortStat = 156
	PortStat_PORT_STAT_PFC_5_ON2OFF_RX_PKTS                       PortStat = 157
	PortStat_PORT_STAT_PFC_6_ON2OFF_RX_PKTS                       PortStat = 158
	PortStat_PORT_STAT_PFC_7_ON2OFF_RX_PKTS                       PortStat = 159
	PortStat_PORT_STAT_DOT3_STATS_ALIGNMENT_ERRORS                PortStat = 160
	PortStat_PORT_STAT_DOT3_STATS_FCS_ERRORS                      PortStat = 161
	PortStat_PORT_STAT_DOT3_STATS_SINGLE_COLLISION_FRAMES         PortStat = 162
	PortStat_PORT_STAT_DOT3_STATS_MULTIPLE_COLLISION_FRAMES       PortStat = 163
	PortStat_PORT_STAT_DOT3_STATS_SQE_TEST_ERRORS                 PortStat = 164
	PortStat_PORT_STAT_DOT3_STATS_DEFERRED_TRANSMISSIONS          PortStat = 165
	PortStat_PORT_STAT_DOT3_STATS_LATE_COLLISIONS                 PortStat = 166
	PortStat_PORT_STAT_DOT3_STATS_EXCESSIVE_COLLISIONS            PortStat = 167
	PortStat_PORT_STAT_DOT3_STATS_INTERNAL_MAC_TRANSMIT_ERRORS    PortStat = 168
	PortStat_PORT_STAT_DOT3_STATS_CARRIER_SENSE_ERRORS            PortStat = 169
	PortStat_PORT_STAT_DOT3_STATS_FRAME_TOO_LONGS                 PortStat = 170
	PortStat_PORT_STAT_DOT3_STATS_INTERNAL_MAC_RECEIVE_ERRORS     PortStat = 171
	PortStat_PORT_STAT_DOT3_STATS_SYMBOL_ERRORS                   PortStat = 172
	PortStat_PORT_STAT_DOT3_CONTROL_IN_UNKNOWN_OPCODES            PortStat = 173
	PortStat_PORT_STAT_EEE_TX_EVENT_COUNT                         PortStat = 174
	PortStat_PORT_STAT_EEE_RX_EVENT_COUNT                         PortStat = 175
	PortStat_PORT_STAT_EEE_TX_DURATION                            PortStat = 176
	PortStat_PORT_STAT_EEE_RX_DURATION                            PortStat = 177
	PortStat_PORT_STAT_PRBS_ERROR_COUNT                           PortStat = 178
	PortStat_PORT_STAT_IF_IN_FEC_CORRECTABLE_FRAMES               PortStat = 179
	PortStat_PORT_STAT_IF_IN_FEC_NOT_CORRECTABLE_FRAMES           PortStat = 180
	PortStat_PORT_STAT_IF_IN_FEC_SYMBOL_ERRORS                    PortStat = 181
	PortStat_PORT_STAT_IF_IN_FABRIC_DATA_UNITS                    PortStat = 182
	PortStat_PORT_STAT_IF_OUT_FABRIC_DATA_UNITS                   PortStat = 183
	PortStat_PORT_STAT_IN_DROP_REASON_RANGE_BASE                  PortStat = 184
	PortStat_PORT_STAT_IN_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS  PortStat = 185
	PortStat_PORT_STAT_IN_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS  PortStat = 186
	PortStat_PORT_STAT_IN_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS  PortStat = 187
	PortStat_PORT_STAT_IN_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS  PortStat = 188
	PortStat_PORT_STAT_IN_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS  PortStat = 189
	PortStat_PORT_STAT_IN_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS  PortStat = 190
	PortStat_PORT_STAT_IN_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS  PortStat = 191
	PortStat_PORT_STAT_IN_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS  PortStat = 192
	PortStat_PORT_STAT_IN_DROP_REASON_RANGE_END                   PortStat = 193
	PortStat_PORT_STAT_OUT_DROP_REASON_RANGE_BASE                 PortStat = 194
	PortStat_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS PortStat = 195
	PortStat_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS PortStat = 196
	PortStat_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS PortStat = 197
	PortStat_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS PortStat = 198
	PortStat_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS PortStat = 199
	PortStat_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS PortStat = 200
	PortStat_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS PortStat = 201
	PortStat_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS PortStat = 202
	PortStat_PORT_STAT_OUT_DROP_REASON_RANGE_END                  PortStat = 203
)

// Enum value maps for PortStat.
var (
	PortStat_name = map[int32]string{
		0:   "PORT_STAT_UNSPECIFIED",
		1:   "PORT_STAT_IF_IN_OCTETS",
		2:   "PORT_STAT_IF_IN_UCAST_PKTS",
		3:   "PORT_STAT_IF_IN_NON_UCAST_PKTS",
		4:   "PORT_STAT_IF_IN_DISCARDS",
		5:   "PORT_STAT_IF_IN_ERRORS",
		6:   "PORT_STAT_IF_IN_UNKNOWN_PROTOS",
		7:   "PORT_STAT_IF_IN_BROADCAST_PKTS",
		8:   "PORT_STAT_IF_IN_MULTICAST_PKTS",
		9:   "PORT_STAT_IF_IN_VLAN_DISCARDS",
		10:  "PORT_STAT_IF_OUT_OCTETS",
		11:  "PORT_STAT_IF_OUT_UCAST_PKTS",
		12:  "PORT_STAT_IF_OUT_NON_UCAST_PKTS",
		13:  "PORT_STAT_IF_OUT_DISCARDS",
		14:  "PORT_STAT_IF_OUT_ERRORS",
		15:  "PORT_STAT_IF_OUT_QLEN",
		16:  "PORT_STAT_IF_OUT_BROADCAST_PKTS",
		17:  "PORT_STAT_IF_OUT_MULTICAST_PKTS",
		18:  "PORT_STAT_ETHER_STATS_DROP_EVENTS",
		19:  "PORT_STAT_ETHER_STATS_MULTICAST_PKTS",
		20:  "PORT_STAT_ETHER_STATS_BROADCAST_PKTS",
		21:  "PORT_STAT_ETHER_STATS_UNDERSIZE_PKTS",
		22:  "PORT_STAT_ETHER_STATS_FRAGMENTS",
		23:  "PORT_STAT_ETHER_STATS_PKTS_64_OCTETS",
		24:  "PORT_STAT_ETHER_STATS_PKTS_65_TO_127_OCTETS",
		25:  "PORT_STAT_ETHER_STATS_PKTS_128_TO_255_OCTETS",
		26:  "PORT_STAT_ETHER_STATS_PKTS_256_TO_511_OCTETS",
		27:  "PORT_STAT_ETHER_STATS_PKTS_512_TO_1023_OCTETS",
		28:  "PORT_STAT_ETHER_STATS_PKTS_1024_TO_1518_OCTETS",
		29:  "PORT_STAT_ETHER_STATS_PKTS_1519_TO_2047_OCTETS",
		30:  "PORT_STAT_ETHER_STATS_PKTS_2048_TO_4095_OCTETS",
		31:  "PORT_STAT_ETHER_STATS_PKTS_4096_TO_9216_OCTETS",
		32:  "PORT_STAT_ETHER_STATS_PKTS_9217_TO_16383_OCTETS",
		33:  "PORT_STAT_ETHER_STATS_OVERSIZE_PKTS",
		34:  "PORT_STAT_ETHER_RX_OVERSIZE_PKTS",
		35:  "PORT_STAT_ETHER_TX_OVERSIZE_PKTS",
		36:  "PORT_STAT_ETHER_STATS_JABBERS",
		37:  "PORT_STAT_ETHER_STATS_OCTETS",
		38:  "PORT_STAT_ETHER_STATS_PKTS",
		39:  "PORT_STAT_ETHER_STATS_COLLISIONS",
		40:  "PORT_STAT_ETHER_STATS_CRC_ALIGN_ERRORS",
		41:  "PORT_STAT_ETHER_STATS_TX_NO_ERRORS",
		42:  "PORT_STAT_ETHER_STATS_RX_NO_ERRORS",
		43:  "PORT_STAT_IP_IN_RECEIVES",
		44:  "PORT_STAT_IP_IN_OCTETS",
		45:  "PORT_STAT_IP_IN_UCAST_PKTS",
		46:  "PORT_STAT_IP_IN_NON_UCAST_PKTS",
		47:  "PORT_STAT_IP_IN_DISCARDS",
		48:  "PORT_STAT_IP_OUT_OCTETS",
		49:  "PORT_STAT_IP_OUT_UCAST_PKTS",
		50:  "PORT_STAT_IP_OUT_NON_UCAST_PKTS",
		51:  "PORT_STAT_IP_OUT_DISCARDS",
		52:  "PORT_STAT_IPV6_IN_RECEIVES",
		53:  "PORT_STAT_IPV6_IN_OCTETS",
		54:  "PORT_STAT_IPV6_IN_UCAST_PKTS",
		55:  "PORT_STAT_IPV6_IN_NON_UCAST_PKTS",
		56:  "PORT_STAT_IPV6_IN_MCAST_PKTS",
		57:  "PORT_STAT_IPV6_IN_DISCARDS",
		58:  "PORT_STAT_IPV6_OUT_OCTETS",
		59:  "PORT_STAT_IPV6_OUT_UCAST_PKTS",
		60:  "PORT_STAT_IPV6_OUT_NON_UCAST_PKTS",
		61:  "PORT_STAT_IPV6_OUT_MCAST_PKTS",
		62:  "PORT_STAT_IPV6_OUT_DISCARDS",
		63:  "PORT_STAT_GREEN_WRED_DROPPED_PACKETS",
		64:  "PORT_STAT_GREEN_WRED_DROPPED_BYTES",
		65:  "PORT_STAT_YELLOW_WRED_DROPPED_PACKETS",
		66:  "PORT_STAT_YELLOW_WRED_DROPPED_BYTES",
		67:  "PORT_STAT_RED_WRED_DROPPED_PACKETS",
		68:  "PORT_STAT_RED_WRED_DROPPED_BYTES",
		69:  "PORT_STAT_WRED_DROPPED_PACKETS",
		70:  "PORT_STAT_WRED_DROPPED_BYTES",
		71:  "PORT_STAT_ECN_MARKED_PACKETS",
		72:  "PORT_STAT_ETHER_IN_PKTS_64_OCTETS",
		73:  "PORT_STAT_ETHER_IN_PKTS_65_TO_127_OCTETS",
		74:  "PORT_STAT_ETHER_IN_PKTS_128_TO_255_OCTETS",
		75:  "PORT_STAT_ETHER_IN_PKTS_256_TO_511_OCTETS",
		76:  "PORT_STAT_ETHER_IN_PKTS_512_TO_1023_OCTETS",
		77:  "PORT_STAT_ETHER_IN_PKTS_1024_TO_1518_OCTETS",
		78:  "PORT_STAT_ETHER_IN_PKTS_1519_TO_2047_OCTETS",
		79:  "PORT_STAT_ETHER_IN_PKTS_2048_TO_4095_OCTETS",
		80:  "PORT_STAT_ETHER_IN_PKTS_4096_TO_9216_OCTETS",
		81:  "PORT_STAT_ETHER_IN_PKTS_9217_TO_16383_OCTETS",
		82:  "PORT_STAT_ETHER_OUT_PKTS_64_OCTETS",
		83:  "PORT_STAT_ETHER_OUT_PKTS_65_TO_127_OCTETS",
		84:  "PORT_STAT_ETHER_OUT_PKTS_128_TO_255_OCTETS",
		85:  "PORT_STAT_ETHER_OUT_PKTS_256_TO_511_OCTETS",
		86:  "PORT_STAT_ETHER_OUT_PKTS_512_TO_1023_OCTETS",
		87:  "PORT_STAT_ETHER_OUT_PKTS_1024_TO_1518_OCTETS",
		88:  "PORT_STAT_ETHER_OUT_PKTS_1519_TO_2047_OCTETS",
		89:  "PORT_STAT_ETHER_OUT_PKTS_2048_TO_4095_OCTETS",
		90:  "PORT_STAT_ETHER_OUT_PKTS_4096_TO_9216_OCTETS",
		91:  "PORT_STAT_ETHER_OUT_PKTS_9217_TO_16383_OCTETS",
		92:  "PORT_STAT_IN_CURR_OCCUPANCY_BYTES",
		93:  "PORT_STAT_IN_WATERMARK_BYTES",
		94:  "PORT_STAT_IN_SHARED_CURR_OCCUPANCY_BYTES",
		95:  "PORT_STAT_IN_SHARED_WATERMARK_BYTES",
		96:  "PORT_STAT_OUT_CURR_OCCUPANCY_BYTES",
		97:  "PORT_STAT_OUT_WATERMARK_BYTES",
		98:  "PORT_STAT_OUT_SHARED_CURR_OCCUPANCY_BYTES",
		99:  "PORT_STAT_OUT_SHARED_WATERMARK_BYTES",
		100: "PORT_STAT_IN_DROPPED_PKTS",
		101: "PORT_STAT_OUT_DROPPED_PKTS",
		102: "PORT_STAT_PAUSE_RX_PKTS",
		103: "PORT_STAT_PAUSE_TX_PKTS",
		104: "PORT_STAT_PFC_0_RX_PKTS",
		105: "PORT_STAT_PFC_0_TX_PKTS",
		106: "PORT_STAT_PFC_1_RX_PKTS",
		107: "PORT_STAT_PFC_1_TX_PKTS",
		108: "PORT_STAT_PFC_2_RX_PKTS",
		109: "PORT_STAT_PFC_2_TX_PKTS",
		110: "PORT_STAT_PFC_3_RX_PKTS",
		111: "PORT_STAT_PFC_3_TX_PKTS",
		112: "PORT_STAT_PFC_4_RX_PKTS",
		113: "PORT_STAT_PFC_4_TX_PKTS",
		114: "PORT_STAT_PFC_5_RX_PKTS",
		115: "PORT_STAT_PFC_5_TX_PKTS",
		116: "PORT_STAT_PFC_6_RX_PKTS",
		117: "PORT_STAT_PFC_6_TX_PKTS",
		118: "PORT_STAT_PFC_7_RX_PKTS",
		119: "PORT_STAT_PFC_7_TX_PKTS",
		120: "PORT_STAT_PFC_0_RX_PAUSE_DURATION",
		121: "PORT_STAT_PFC_0_TX_PAUSE_DURATION",
		122: "PORT_STAT_PFC_1_RX_PAUSE_DURATION",
		123: "PORT_STAT_PFC_1_TX_PAUSE_DURATION",
		124: "PORT_STAT_PFC_2_RX_PAUSE_DURATION",
		125: "PORT_STAT_PFC_2_TX_PAUSE_DURATION",
		126: "PORT_STAT_PFC_3_RX_PAUSE_DURATION",
		127: "PORT_STAT_PFC_3_TX_PAUSE_DURATION",
		128: "PORT_STAT_PFC_4_RX_PAUSE_DURATION",
		129: "PORT_STAT_PFC_4_TX_PAUSE_DURATION",
		130: "PORT_STAT_PFC_5_RX_PAUSE_DURATION",
		131: "PORT_STAT_PFC_5_TX_PAUSE_DURATION",
		132: "PORT_STAT_PFC_6_RX_PAUSE_DURATION",
		133: "PORT_STAT_PFC_6_TX_PAUSE_DURATION",
		134: "PORT_STAT_PFC_7_RX_PAUSE_DURATION",
		135: "PORT_STAT_PFC_7_TX_PAUSE_DURATION",
		136: "PORT_STAT_PFC_0_RX_PAUSE_DURATION_US",
		137: "PORT_STAT_PFC_0_TX_PAUSE_DURATION_US",
		138: "PORT_STAT_PFC_1_RX_PAUSE_DURATION_US",
		139: "PORT_STAT_PFC_1_TX_PAUSE_DURATION_US",
		140: "PORT_STAT_PFC_2_RX_PAUSE_DURATION_US",
		141: "PORT_STAT_PFC_2_TX_PAUSE_DURATION_US",
		142: "PORT_STAT_PFC_3_RX_PAUSE_DURATION_US",
		143: "PORT_STAT_PFC_3_TX_PAUSE_DURATION_US",
		144: "PORT_STAT_PFC_4_RX_PAUSE_DURATION_US",
		145: "PORT_STAT_PFC_4_TX_PAUSE_DURATION_US",
		146: "PORT_STAT_PFC_5_RX_PAUSE_DURATION_US",
		147: "PORT_STAT_PFC_5_TX_PAUSE_DURATION_US",
		148: "PORT_STAT_PFC_6_RX_PAUSE_DURATION_US",
		149: "PORT_STAT_PFC_6_TX_PAUSE_DURATION_US",
		150: "PORT_STAT_PFC_7_RX_PAUSE_DURATION_US",
		151: "PORT_STAT_PFC_7_TX_PAUSE_DURATION_US",
		152: "PORT_STAT_PFC_0_ON2OFF_RX_PKTS",
		153: "PORT_STAT_PFC_1_ON2OFF_RX_PKTS",
		154: "PORT_STAT_PFC_2_ON2OFF_RX_PKTS",
		155: "PORT_STAT_PFC_3_ON2OFF_RX_PKTS",
		156: "PORT_STAT_PFC_4_ON2OFF_RX_PKTS",
		157: "PORT_STAT_PFC_5_ON2OFF_RX_PKTS",
		158: "PORT_STAT_PFC_6_ON2OFF_RX_PKTS",
		159: "PORT_STAT_PFC_7_ON2OFF_RX_PKTS",
		160: "PORT_STAT_DOT3_STATS_ALIGNMENT_ERRORS",
		161: "PORT_STAT_DOT3_STATS_FCS_ERRORS",
		162: "PORT_STAT_DOT3_STATS_SINGLE_COLLISION_FRAMES",
		163: "PORT_STAT_DOT3_STATS_MULTIPLE_COLLISION_FRAMES",
		164: "PORT_STAT_DOT3_STATS_SQE_TEST_ERRORS",
		165: "PORT_STAT_DOT3_STATS_DEFERRED_TRANSMISSIONS",
		166: "PORT_STAT_DOT3_STATS_LATE_COLLISIONS",
		167: "PORT_STAT_DOT3_STATS_EXCESSIVE_COLLISIONS",
		168: "PORT_STAT_DOT3_STATS_INTERNAL_MAC_TRANSMIT_ERRORS",
		169: "PORT_STAT_DOT3_STATS_CARRIER_SENSE_ERRORS",
		170: "PORT_STAT_DOT3_STATS_FRAME_TOO_LONGS",
		171: "PORT_STAT_DOT3_STATS_INTERNAL_MAC_RECEIVE_ERRORS",
		172: "PORT_STAT_DOT3_STATS_SYMBOL_ERRORS",
		173: "PORT_STAT_DOT3_CONTROL_IN_UNKNOWN_OPCODES",
		174: "PORT_STAT_EEE_TX_EVENT_COUNT",
		175: "PORT_STAT_EEE_RX_EVENT_COUNT",
		176: "PORT_STAT_EEE_TX_DURATION",
		177: "PORT_STAT_EEE_RX_DURATION",
		178: "PORT_STAT_PRBS_ERROR_COUNT",
		179: "PORT_STAT_IF_IN_FEC_CORRECTABLE_FRAMES",
		180: "PORT_STAT_IF_IN_FEC_NOT_CORRECTABLE_FRAMES",
		181: "PORT_STAT_IF_IN_FEC_SYMBOL_ERRORS",
		182: "PORT_STAT_IF_IN_FABRIC_DATA_UNITS",
		183: "PORT_STAT_IF_OUT_FABRIC_DATA_UNITS",
		184: "PORT_STAT_IN_DROP_REASON_RANGE_BASE",
		185: "PORT_STAT_IN_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS",
		186: "PORT_STAT_IN_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS",
		187: "PORT_STAT_IN_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS",
		188: "PORT_STAT_IN_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS",
		189: "PORT_STAT_IN_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS",
		190: "PORT_STAT_IN_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS",
		191: "PORT_STAT_IN_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS",
		192: "PORT_STAT_IN_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS",
		193: "PORT_STAT_IN_DROP_REASON_RANGE_END",
		194: "PORT_STAT_OUT_DROP_REASON_RANGE_BASE",
		195: "PORT_STAT_OUT_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS",
		196: "PORT_STAT_OUT_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS",
		197: "PORT_STAT_OUT_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS",
		198: "PORT_STAT_OUT_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS",
		199: "PORT_STAT_OUT_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS",
		200: "PORT_STAT_OUT_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS",
		201: "PORT_STAT_OUT_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS",
		202: "PORT_STAT_OUT_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS",
		203: "PORT_STAT_OUT_DROP_REASON_RANGE_END",
	}
	PortStat_value = map[string]int32{
		"PORT_STAT_UNSPECIFIED":                                0,
		"PORT_STAT_IF_IN_OCTETS":                               1,
		"PORT_STAT_IF_IN_UCAST_PKTS":                           2,
		"PORT_STAT_IF_IN_NON_UCAST_PKTS":                       3,
		"PORT_STAT_IF_IN_DISCARDS":                             4,
		"PORT_STAT_IF_IN_ERRORS":                               5,
		"PORT_STAT_IF_IN_UNKNOWN_PROTOS":                       6,
		"PORT_STAT_IF_IN_BROADCAST_PKTS":                       7,
		"PORT_STAT_IF_IN_MULTICAST_PKTS":                       8,
		"PORT_STAT_IF_IN_VLAN_DISCARDS":                        9,
		"PORT_STAT_IF_OUT_OCTETS":                              10,
		"PORT_STAT_IF_OUT_UCAST_PKTS":                          11,
		"PORT_STAT_IF_OUT_NON_UCAST_PKTS":                      12,
		"PORT_STAT_IF_OUT_DISCARDS":                            13,
		"PORT_STAT_IF_OUT_ERRORS":                              14,
		"PORT_STAT_IF_OUT_QLEN":                                15,
		"PORT_STAT_IF_OUT_BROADCAST_PKTS":                      16,
		"PORT_STAT_IF_OUT_MULTICAST_PKTS":                      17,
		"PORT_STAT_ETHER_STATS_DROP_EVENTS":                    18,
		"PORT_STAT_ETHER_STATS_MULTICAST_PKTS":                 19,
		"PORT_STAT_ETHER_STATS_BROADCAST_PKTS":                 20,
		"PORT_STAT_ETHER_STATS_UNDERSIZE_PKTS":                 21,
		"PORT_STAT_ETHER_STATS_FRAGMENTS":                      22,
		"PORT_STAT_ETHER_STATS_PKTS_64_OCTETS":                 23,
		"PORT_STAT_ETHER_STATS_PKTS_65_TO_127_OCTETS":          24,
		"PORT_STAT_ETHER_STATS_PKTS_128_TO_255_OCTETS":         25,
		"PORT_STAT_ETHER_STATS_PKTS_256_TO_511_OCTETS":         26,
		"PORT_STAT_ETHER_STATS_PKTS_512_TO_1023_OCTETS":        27,
		"PORT_STAT_ETHER_STATS_PKTS_1024_TO_1518_OCTETS":       28,
		"PORT_STAT_ETHER_STATS_PKTS_1519_TO_2047_OCTETS":       29,
		"PORT_STAT_ETHER_STATS_PKTS_2048_TO_4095_OCTETS":       30,
		"PORT_STAT_ETHER_STATS_PKTS_4096_TO_9216_OCTETS":       31,
		"PORT_STAT_ETHER_STATS_PKTS_9217_TO_16383_OCTETS":      32,
		"PORT_STAT_ETHER_STATS_OVERSIZE_PKTS":                  33,
		"PORT_STAT_ETHER_RX_OVERSIZE_PKTS":                     34,
		"PORT_STAT_ETHER_TX_OVERSIZE_PKTS":                     35,
		"PORT_STAT_ETHER_STATS_JABBERS":                        36,
		"PORT_STAT_ETHER_STATS_OCTETS":                         37,
		"PORT_STAT_ETHER_STATS_PKTS":                           38,
		"PORT_STAT_ETHER_STATS_COLLISIONS":                     39,
		"PORT_STAT_ETHER_STATS_CRC_ALIGN_ERRORS":               40,
		"PORT_STAT_ETHER_STATS_TX_NO_ERRORS":                   41,
		"PORT_STAT_ETHER_STATS_RX_NO_ERRORS":                   42,
		"PORT_STAT_IP_IN_RECEIVES":                             43,
		"PORT_STAT_IP_IN_OCTETS":                               44,
		"PORT_STAT_IP_IN_UCAST_PKTS":                           45,
		"PORT_STAT_IP_IN_NON_UCAST_PKTS":                       46,
		"PORT_STAT_IP_IN_DISCARDS":                             47,
		"PORT_STAT_IP_OUT_OCTETS":                              48,
		"PORT_STAT_IP_OUT_UCAST_PKTS":                          49,
		"PORT_STAT_IP_OUT_NON_UCAST_PKTS":                      50,
		"PORT_STAT_IP_OUT_DISCARDS":                            51,
		"PORT_STAT_IPV6_IN_RECEIVES":                           52,
		"PORT_STAT_IPV6_IN_OCTETS":                             53,
		"PORT_STAT_IPV6_IN_UCAST_PKTS":                         54,
		"PORT_STAT_IPV6_IN_NON_UCAST_PKTS":                     55,
		"PORT_STAT_IPV6_IN_MCAST_PKTS":                         56,
		"PORT_STAT_IPV6_IN_DISCARDS":                           57,
		"PORT_STAT_IPV6_OUT_OCTETS":                            58,
		"PORT_STAT_IPV6_OUT_UCAST_PKTS":                        59,
		"PORT_STAT_IPV6_OUT_NON_UCAST_PKTS":                    60,
		"PORT_STAT_IPV6_OUT_MCAST_PKTS":                        61,
		"PORT_STAT_IPV6_OUT_DISCARDS":                          62,
		"PORT_STAT_GREEN_WRED_DROPPED_PACKETS":                 63,
		"PORT_STAT_GREEN_WRED_DROPPED_BYTES":                   64,
		"PORT_STAT_YELLOW_WRED_DROPPED_PACKETS":                65,
		"PORT_STAT_YELLOW_WRED_DROPPED_BYTES":                  66,
		"PORT_STAT_RED_WRED_DROPPED_PACKETS":                   67,
		"PORT_STAT_RED_WRED_DROPPED_BYTES":                     68,
		"PORT_STAT_WRED_DROPPED_PACKETS":                       69,
		"PORT_STAT_WRED_DROPPED_BYTES":                         70,
		"PORT_STAT_ECN_MARKED_PACKETS":                         71,
		"PORT_STAT_ETHER_IN_PKTS_64_OCTETS":                    72,
		"PORT_STAT_ETHER_IN_PKTS_65_TO_127_OCTETS":             73,
		"PORT_STAT_ETHER_IN_PKTS_128_TO_255_OCTETS":            74,
		"PORT_STAT_ETHER_IN_PKTS_256_TO_511_OCTETS":            75,
		"PORT_STAT_ETHER_IN_PKTS_512_TO_1023_OCTETS":           76,
		"PORT_STAT_ETHER_IN_PKTS_1024_TO_1518_OCTETS":          77,
		"PORT_STAT_ETHER_IN_PKTS_1519_TO_2047_OCTETS":          78,
		"PORT_STAT_ETHER_IN_PKTS_2048_TO_4095_OCTETS":          79,
		"PORT_STAT_ETHER_IN_PKTS_4096_TO_9216_OCTETS":          80,
		"PORT_STAT_ETHER_IN_PKTS_9217_TO_16383_OCTETS":         81,
		"PORT_STAT_ETHER_OUT_PKTS_64_OCTETS":                   82,
		"PORT_STAT_ETHER_OUT_PKTS_65_TO_127_OCTETS":            83,
		"PORT_STAT_ETHER_OUT_PKTS_128_TO_255_OCTETS":           84,
		"PORT_STAT_ETHER_OUT_PKTS_256_TO_511_OCTETS":           85,
		"PORT_STAT_ETHER_OUT_PKTS_512_TO_1023_OCTETS":          86,
		"PORT_STAT_ETHER_OUT_PKTS_1024_TO_1518_OCTETS":         87,
		"PORT_STAT_ETHER_OUT_PKTS_1519_TO_2047_OCTETS":         88,
		"PORT_STAT_ETHER_OUT_PKTS_2048_TO_4095_OCTETS":         89,
		"PORT_STAT_ETHER_OUT_PKTS_4096_TO_9216_OCTETS":         90,
		"PORT_STAT_ETHER_OUT_PKTS_9217_TO_16383_OCTETS":        91,
		"PORT_STAT_IN_CURR_OCCUPANCY_BYTES":                    92,
		"PORT_STAT_IN_WATERMARK_BYTES":                         93,
		"PORT_STAT_IN_SHARED_CURR_OCCUPANCY_BYTES":             94,
		"PORT_STAT_IN_SHARED_WATERMARK_BYTES":                  95,
		"PORT_STAT_OUT_CURR_OCCUPANCY_BYTES":                   96,
		"PORT_STAT_OUT_WATERMARK_BYTES":                        97,
		"PORT_STAT_OUT_SHARED_CURR_OCCUPANCY_BYTES":            98,
		"PORT_STAT_OUT_SHARED_WATERMARK_BYTES":                 99,
		"PORT_STAT_IN_DROPPED_PKTS":                            100,
		"PORT_STAT_OUT_DROPPED_PKTS":                           101,
		"PORT_STAT_PAUSE_RX_PKTS":                              102,
		"PORT_STAT_PAUSE_TX_PKTS":                              103,
		"PORT_STAT_PFC_0_RX_PKTS":                              104,
		"PORT_STAT_PFC_0_TX_PKTS":                              105,
		"PORT_STAT_PFC_1_RX_PKTS":                              106,
		"PORT_STAT_PFC_1_TX_PKTS":                              107,
		"PORT_STAT_PFC_2_RX_PKTS":                              108,
		"PORT_STAT_PFC_2_TX_PKTS":                              109,
		"PORT_STAT_PFC_3_RX_PKTS":                              110,
		"PORT_STAT_PFC_3_TX_PKTS":                              111,
		"PORT_STAT_PFC_4_RX_PKTS":                              112,
		"PORT_STAT_PFC_4_TX_PKTS":                              113,
		"PORT_STAT_PFC_5_RX_PKTS":                              114,
		"PORT_STAT_PFC_5_TX_PKTS":                              115,
		"PORT_STAT_PFC_6_RX_PKTS":                              116,
		"PORT_STAT_PFC_6_TX_PKTS":                              117,
		"PORT_STAT_PFC_7_RX_PKTS":                              118,
		"PORT_STAT_PFC_7_TX_PKTS":                              119,
		"PORT_STAT_PFC_0_RX_PAUSE_DURATION":                    120,
		"PORT_STAT_PFC_0_TX_PAUSE_DURATION":                    121,
		"PORT_STAT_PFC_1_RX_PAUSE_DURATION":                    122,
		"PORT_STAT_PFC_1_TX_PAUSE_DURATION":                    123,
		"PORT_STAT_PFC_2_RX_PAUSE_DURATION":                    124,
		"PORT_STAT_PFC_2_TX_PAUSE_DURATION":                    125,
		"PORT_STAT_PFC_3_RX_PAUSE_DURATION":                    126,
		"PORT_STAT_PFC_3_TX_PAUSE_DURATION":                    127,
		"PORT_STAT_PFC_4_RX_PAUSE_DURATION":                    128,
		"PORT_STAT_PFC_4_TX_PAUSE_DURATION":                    129,
		"PORT_STAT_PFC_5_RX_PAUSE_DURATION":                    130,
		"PORT_STAT_PFC_5_TX_PAUSE_DURATION":                    131,
		"PORT_STAT_PFC_6_RX_PAUSE_DURATION":                    132,
		"PORT_STAT_PFC_6_TX_PAUSE_DURATION":                    133,
		"PORT_STAT_PFC_7_RX_PAUSE_DURATION":                    134,
		"PORT_STAT_PFC_7_TX_PAUSE_DURATION":                    135,
		"PORT_STAT_PFC_0_RX_PAUSE_DURATION_US":                 136,
		"PORT_STAT_PFC_0_TX_PAUSE_DURATION_US":                 137,
		"PORT_STAT_PFC_1_RX_PAUSE_DURATION_US":                 138,
		"PORT_STAT_PFC_1_TX_PAUSE_DURATION_US":                 139,
		"PORT_STAT_PFC_2_RX_PAUSE_DURATION_US":                 140,
		"PORT_STAT_PFC_2_TX_PAUSE_DURATION_US":                 141,
		"PORT_STAT_PFC_3_RX_PAUSE_DURATION_US":                 142,
		"PORT_STAT_PFC_3_TX_PAUSE_DURATION_US":                 143,
		"PORT_STAT_PFC_4_RX_PAUSE_DURATION_US":                 144,
		"PORT_STAT_PFC_4_TX_PAUSE_DURATION_US":                 145,
		"PORT_STAT_PFC_5_RX_PAUSE_DURATION_US":                 146,
		"PORT_STAT_PFC_5_TX_PAUSE_DURATION_US":                 147,
		"PORT_STAT_PFC_6_RX_PAUSE_DURATION_US":                 148,
		"PORT_STAT_PFC_6_TX_PAUSE_DURATION_US":                 149,
		"PORT_STAT_PFC_7_RX_PAUSE_DURATION_US":                 150,
		"PORT_STAT_PFC_7_TX_PAUSE_DURATION_US":                 151,
		"PORT_STAT_PFC_0_ON2OFF_RX_PKTS":                       152,
		"PORT_STAT_PFC_1_ON2OFF_RX_PKTS":                       153,
		"PORT_STAT_PFC_2_ON2OFF_RX_PKTS":                       154,
		"PORT_STAT_PFC_3_ON2OFF_RX_PKTS":                       155,
		"PORT_STAT_PFC_4_ON2OFF_RX_PKTS":                       156,
		"PORT_STAT_PFC_5_ON2OFF_RX_PKTS":                       157,
		"PORT_STAT_PFC_6_ON2OFF_RX_PKTS":                       158,
		"PORT_STAT_PFC_7_ON2OFF_RX_PKTS":                       159,
		"PORT_STAT_DOT3_STATS_ALIGNMENT_ERRORS":                160,
		"PORT_STAT_DOT3_STATS_FCS_ERRORS":                      161,
		"PORT_STAT_DOT3_STATS_SINGLE_COLLISION_FRAMES":         162,
		"PORT_STAT_DOT3_STATS_MULTIPLE_COLLISION_FRAMES":       163,
		"PORT_STAT_DOT3_STATS_SQE_TEST_ERRORS":                 164,
		"PORT_STAT_DOT3_STATS_DEFERRED_TRANSMISSIONS":          165,
		"PORT_STAT_DOT3_STATS_LATE_COLLISIONS":                 166,
		"PORT_STAT_DOT3_STATS_EXCESSIVE_COLLISIONS":            167,
		"PORT_STAT_DOT3_STATS_INTERNAL_MAC_TRANSMIT_ERRORS":    168,
		"PORT_STAT_DOT3_STATS_CARRIER_SENSE_ERRORS":            169,
		"PORT_STAT_DOT3_STATS_FRAME_TOO_LONGS":                 170,
		"PORT_STAT_DOT3_STATS_INTERNAL_MAC_RECEIVE_ERRORS":     171,
		"PORT_STAT_DOT3_STATS_SYMBOL_ERRORS":                   172,
		"PORT_STAT_DOT3_CONTROL_IN_UNKNOWN_OPCODES":            173,
		"PORT_STAT_EEE_TX_EVENT_COUNT":                         174,
		"PORT_STAT_EEE_RX_EVENT_COUNT":                         175,
		"PORT_STAT_EEE_TX_DURATION":                            176,
		"PORT_STAT_EEE_RX_DURATION":                            177,
		"PORT_STAT_PRBS_ERROR_COUNT":                           178,
		"PORT_STAT_IF_IN_FEC_CORRECTABLE_FRAMES":               179,
		"PORT_STAT_IF_IN_FEC_NOT_CORRECTABLE_FRAMES":           180,
		"PORT_STAT_IF_IN_FEC_SYMBOL_ERRORS":                    181,
		"PORT_STAT_IF_IN_FABRIC_DATA_UNITS":                    182,
		"PORT_STAT_IF_OUT_FABRIC_DATA_UNITS":                   183,
		"PORT_STAT_IN_DROP_REASON_RANGE_BASE":                  184,
		"PORT_STAT_IN_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS":  185,
		"PORT_STAT_IN_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS":  186,
		"PORT_STAT_IN_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS":  187,
		"PORT_STAT_IN_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS":  188,
		"PORT_STAT_IN_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS":  189,
		"PORT_STAT_IN_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS":  190,
		"PORT_STAT_IN_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS":  191,
		"PORT_STAT_IN_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS":  192,
		"PORT_STAT_IN_DROP_REASON_RANGE_END":                   193,
		"PORT_STAT_OUT_DROP_REASON_RANGE_BASE":                 194,
		"PORT_STAT_OUT_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS": 195,
		"PORT_STAT_OUT_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS": 196,
		"PORT_STAT_OUT_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS": 197,
		"PORT_STAT_OUT_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS": 198,
		"PORT_STAT_OUT_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS": 199,
		"PORT_STAT_OUT_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS": 200,
		"PORT_STAT_OUT_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS": 201,
		"PORT_STAT_OUT_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS": 202,
		"PORT_STAT_OUT_DROP_REASON_RANGE_END":                  203,
	}
)

func (x PortStat) Enum() *PortStat {
	p := new(PortStat)
	*p = x
	return p
}

func (x PortStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[112].Descriptor()
}

func (PortStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[112]
}

func (x PortStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortStat.Descriptor instead.
func (PortStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{112}
}

type PortType int32

const (
	PortType_PORT_TYPE_UNSPECIFIED PortType = 0
	PortType_PORT_TYPE_LOGICAL     PortType = 1
	PortType_PORT_TYPE_CPU         PortType = 2
	PortType_PORT_TYPE_FABRIC      PortType = 3
	PortType_PORT_TYPE_RECYCLE     PortType = 4
)

// Enum value maps for PortType.
var (
	PortType_name = map[int32]string{
		0: "PORT_TYPE_UNSPECIFIED",
		1: "PORT_TYPE_LOGICAL",
		2: "PORT_TYPE_CPU",
		3: "PORT_TYPE_FABRIC",
		4: "PORT_TYPE_RECYCLE",
	}
	PortType_value = map[string]int32{
		"PORT_TYPE_UNSPECIFIED": 0,
		"PORT_TYPE_LOGICAL":     1,
		"PORT_TYPE_CPU":         2,
		"PORT_TYPE_FABRIC":      3,
		"PORT_TYPE_RECYCLE":     4,
	}
)

func (x PortType) Enum() *PortType {
	p := new(PortType)
	*p = x
	return p
}

func (x PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[113].Descriptor()
}

func (PortType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[113]
}

func (x PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortType.Descriptor instead.
func (PortType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{113}
}

type QosMapType int32

const (
	QosMapType_QOS_MAP_TYPE_UNSPECIFIED                    QosMapType = 0
	QosMapType_QOS_MAP_TYPE_DOT1P_TO_TC                    QosMapType = 1
	QosMapType_QOS_MAP_TYPE_DOT1P_TO_COLOR                 QosMapType = 2
	QosMapType_QOS_MAP_TYPE_DSCP_TO_TC                     QosMapType = 3
	QosMapType_QOS_MAP_TYPE_DSCP_TO_COLOR                  QosMapType = 4
	QosMapType_QOS_MAP_TYPE_TC_TO_QUEUE                    QosMapType = 5
	QosMapType_QOS_MAP_TYPE_TC_AND_COLOR_TO_DSCP           QosMapType = 6
	QosMapType_QOS_MAP_TYPE_TC_AND_COLOR_TO_DOT1P          QosMapType = 7
	QosMapType_QOS_MAP_TYPE_TC_TO_PRIORITY_GROUP           QosMapType = 8
	QosMapType_QOS_MAP_TYPE_PFC_PRIORITY_TO_PRIORITY_GROUP QosMapType = 9
	QosMapType_QOS_MAP_TYPE_PFC_PRIORITY_TO_QUEUE          QosMapType = 10
	QosMapType_QOS_MAP_TYPE_MPLS_EXP_TO_TC                 QosMapType = 11
	QosMapType_QOS_MAP_TYPE_MPLS_EXP_TO_COLOR              QosMapType = 12
	QosMapType_QOS_MAP_TYPE_TC_AND_COLOR_TO_MPLS_EXP       QosMapType = 13
	QosMapType_QOS_MAP_TYPE_DSCP_TO_FORWARDING_CLASS       QosMapType = 14
	QosMapType_QOS_MAP_TYPE_MPLS_EXP_TO_FORWARDING_CLASS   QosMapType = 15
	QosMapType_QOS_MAP_TYPE_CUSTOM_RANGE_BASE              QosMapType = 16
)

// Enum value maps for QosMapType.
var (
	QosMapType_name = map[int32]string{
		0:  "QOS_MAP_TYPE_UNSPECIFIED",
		1:  "QOS_MAP_TYPE_DOT1P_TO_TC",
		2:  "QOS_MAP_TYPE_DOT1P_TO_COLOR",
		3:  "QOS_MAP_TYPE_DSCP_TO_TC",
		4:  "QOS_MAP_TYPE_DSCP_TO_COLOR",
		5:  "QOS_MAP_TYPE_TC_TO_QUEUE",
		6:  "QOS_MAP_TYPE_TC_AND_COLOR_TO_DSCP",
		7:  "QOS_MAP_TYPE_TC_AND_COLOR_TO_DOT1P",
		8:  "QOS_MAP_TYPE_TC_TO_PRIORITY_GROUP",
		9:  "QOS_MAP_TYPE_PFC_PRIORITY_TO_PRIORITY_GROUP",
		10: "QOS_MAP_TYPE_PFC_PRIORITY_TO_QUEUE",
		11: "QOS_MAP_TYPE_MPLS_EXP_TO_TC",
		12: "QOS_MAP_TYPE_MPLS_EXP_TO_COLOR",
		13: "QOS_MAP_TYPE_TC_AND_COLOR_TO_MPLS_EXP",
		14: "QOS_MAP_TYPE_DSCP_TO_FORWARDING_CLASS",
		15: "QOS_MAP_TYPE_MPLS_EXP_TO_FORWARDING_CLASS",
		16: "QOS_MAP_TYPE_CUSTOM_RANGE_BASE",
	}
	QosMapType_value = map[string]int32{
		"QOS_MAP_TYPE_UNSPECIFIED":                    0,
		"QOS_MAP_TYPE_DOT1P_TO_TC":                    1,
		"QOS_MAP_TYPE_DOT1P_TO_COLOR":                 2,
		"QOS_MAP_TYPE_DSCP_TO_TC":                     3,
		"QOS_MAP_TYPE_DSCP_TO_COLOR":                  4,
		"QOS_MAP_TYPE_TC_TO_QUEUE":                    5,
		"QOS_MAP_TYPE_TC_AND_COLOR_TO_DSCP":           6,
		"QOS_MAP_TYPE_TC_AND_COLOR_TO_DOT1P":          7,
		"QOS_MAP_TYPE_TC_TO_PRIORITY_GROUP":           8,
		"QOS_MAP_TYPE_PFC_PRIORITY_TO_PRIORITY_GROUP": 9,
		"QOS_MAP_TYPE_PFC_PRIORITY_TO_QUEUE":          10,
		"QOS_MAP_TYPE_MPLS_EXP_TO_TC":                 11,
		"QOS_MAP_TYPE_MPLS_EXP_TO_COLOR":              12,
		"QOS_MAP_TYPE_TC_AND_COLOR_TO_MPLS_EXP":       13,
		"QOS_MAP_TYPE_DSCP_TO_FORWARDING_CLASS":       14,
		"QOS_MAP_TYPE_MPLS_EXP_TO_FORWARDING_CLASS":   15,
		"QOS_MAP_TYPE_CUSTOM_RANGE_BASE":              16,
	}
)

func (x QosMapType) Enum() *QosMapType {
	p := new(QosMapType)
	*p = x
	return p
}

func (x QosMapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QosMapType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[114].Descriptor()
}

func (QosMapType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[114]
}

func (x QosMapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QosMapType.Descriptor instead.
func (QosMapType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{114}
}

type QueuePfcDeadlockEventType int32

const (
	QueuePfcDeadlockEventType_QUEUE_PFC_DEADLOCK_EVENT_TYPE_UNSPECIFIED QueuePfcDeadlockEventType = 0
	QueuePfcDeadlockEventType_QUEUE_PFC_DEADLOCK_EVENT_TYPE_DETECTED    QueuePfcDeadlockEventType = 1
	QueuePfcDeadlockEventType_QUEUE_PFC_DEADLOCK_EVENT_TYPE_RECOVERED   QueuePfcDeadlockEventType = 2
)

// Enum value maps for QueuePfcDeadlockEventType.
var (
	QueuePfcDeadlockEventType_name = map[int32]string{
		0: "QUEUE_PFC_DEADLOCK_EVENT_TYPE_UNSPECIFIED",
		1: "QUEUE_PFC_DEADLOCK_EVENT_TYPE_DETECTED",
		2: "QUEUE_PFC_DEADLOCK_EVENT_TYPE_RECOVERED",
	}
	QueuePfcDeadlockEventType_value = map[string]int32{
		"QUEUE_PFC_DEADLOCK_EVENT_TYPE_UNSPECIFIED": 0,
		"QUEUE_PFC_DEADLOCK_EVENT_TYPE_DETECTED":    1,
		"QUEUE_PFC_DEADLOCK_EVENT_TYPE_RECOVERED":   2,
	}
)

func (x QueuePfcDeadlockEventType) Enum() *QueuePfcDeadlockEventType {
	p := new(QueuePfcDeadlockEventType)
	*p = x
	return p
}

func (x QueuePfcDeadlockEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueuePfcDeadlockEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[115].Descriptor()
}

func (QueuePfcDeadlockEventType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[115]
}

func (x QueuePfcDeadlockEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueuePfcDeadlockEventType.Descriptor instead.
func (QueuePfcDeadlockEventType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{115}
}

type QueueStat int32

const (
	QueueStat_QUEUE_STAT_UNSPECIFIED                    QueueStat = 0
	QueueStat_QUEUE_STAT_PACKETS                        QueueStat = 1
	QueueStat_QUEUE_STAT_BYTES                          QueueStat = 2
	QueueStat_QUEUE_STAT_DROPPED_PACKETS                QueueStat = 3
	QueueStat_QUEUE_STAT_DROPPED_BYTES                  QueueStat = 4
	QueueStat_QUEUE_STAT_GREEN_PACKETS                  QueueStat = 5
	QueueStat_QUEUE_STAT_GREEN_BYTES                    QueueStat = 6
	QueueStat_QUEUE_STAT_GREEN_DROPPED_PACKETS          QueueStat = 7
	QueueStat_QUEUE_STAT_GREEN_DROPPED_BYTES            QueueStat = 8
	QueueStat_QUEUE_STAT_YELLOW_PACKETS                 QueueStat = 9
	QueueStat_QUEUE_STAT_YELLOW_BYTES                   QueueStat = 10
	QueueStat_QUEUE_STAT_YELLOW_DROPPED_PACKETS         QueueStat = 11
	QueueStat_QUEUE_STAT_YELLOW_DROPPED_BYTES           QueueStat = 12
	QueueStat_QUEUE_STAT_RED_PACKETS                    QueueStat = 13
	QueueStat_QUEUE_STAT_RED_BYTES                      QueueStat = 14
	QueueStat_QUEUE_STAT_RED_DROPPED_PACKETS            QueueStat = 15
	QueueStat_QUEUE_STAT_RED_DROPPED_BYTES              QueueStat = 16
	QueueStat_QUEUE_STAT_GREEN_WRED_DROPPED_PACKETS     QueueStat = 17
	QueueStat_QUEUE_STAT_GREEN_WRED_DROPPED_BYTES       QueueStat = 18
	QueueStat_QUEUE_STAT_YELLOW_WRED_DROPPED_PACKETS    QueueStat = 19
	QueueStat_QUEUE_STAT_YELLOW_WRED_DROPPED_BYTES      QueueStat = 20
	QueueStat_QUEUE_STAT_RED_WRED_DROPPED_PACKETS       QueueStat = 21
	QueueStat_QUEUE_STAT_RED_WRED_DROPPED_BYTES         QueueStat = 22
	QueueStat_QUEUE_STAT_WRED_DROPPED_PACKETS           QueueStat = 23
	QueueStat_QUEUE_STAT_WRED_DROPPED_BYTES             QueueStat = 24
	QueueStat_QUEUE_STAT_CURR_OCCUPANCY_BYTES           QueueStat = 25
	QueueStat_QUEUE_STAT_WATERMARK_BYTES                QueueStat = 26
	QueueStat_QUEUE_STAT_SHARED_CURR_OCCUPANCY_BYTES    QueueStat = 27
	QueueStat_QUEUE_STAT_SHARED_WATERMARK_BYTES         QueueStat = 28
	QueueStat_QUEUE_STAT_GREEN_WRED_ECN_MARKED_PACKETS  QueueStat = 29
	QueueStat_QUEUE_STAT_GREEN_WRED_ECN_MARKED_BYTES    QueueStat = 30
	QueueStat_QUEUE_STAT_YELLOW_WRED_ECN_MARKED_PACKETS QueueStat = 31
	QueueStat_QUEUE_STAT_YELLOW_WRED_ECN_MARKED_BYTES   QueueStat = 32
	QueueStat_QUEUE_STAT_RED_WRED_ECN_MARKED_PACKETS    QueueStat = 33
	QueueStat_QUEUE_STAT_RED_WRED_ECN_MARKED_BYTES      QueueStat = 34
	QueueStat_QUEUE_STAT_WRED_ECN_MARKED_PACKETS        QueueStat = 35
	QueueStat_QUEUE_STAT_WRED_ECN_MARKED_BYTES          QueueStat = 36
	QueueStat_QUEUE_STAT_CURR_OCCUPANCY_LEVEL           QueueStat = 37
	QueueStat_QUEUE_STAT_WATERMARK_LEVEL                QueueStat = 38
	QueueStat_QUEUE_STAT_CUSTOM_RANGE_BASE              QueueStat = 39
)

// Enum value maps for QueueStat.
var (
	QueueStat_name = map[int32]string{
		0:  "QUEUE_STAT_UNSPECIFIED",
		1:  "QUEUE_STAT_PACKETS",
		2:  "QUEUE_STAT_BYTES",
		3:  "QUEUE_STAT_DROPPED_PACKETS",
		4:  "QUEUE_STAT_DROPPED_BYTES",
		5:  "QUEUE_STAT_GREEN_PACKETS",
		6:  "QUEUE_STAT_GREEN_BYTES",
		7:  "QUEUE_STAT_GREEN_DROPPED_PACKETS",
		8:  "QUEUE_STAT_GREEN_DROPPED_BYTES",
		9:  "QUEUE_STAT_YELLOW_PACKETS",
		10: "QUEUE_STAT_YELLOW_BYTES",
		11: "QUEUE_STAT_YELLOW_DROPPED_PACKETS",
		12: "QUEUE_STAT_YELLOW_DROPPED_BYTES",
		13: "QUEUE_STAT_RED_PACKETS",
		14: "QUEUE_STAT_RED_BYTES",
		15: "QUEUE_STAT_RED_DROPPED_PACKETS",
		16: "QUEUE_STAT_RED_DROPPED_BYTES",
		17: "QUEUE_STAT_GREEN_WRED_DROPPED_PACKETS",
		18: "QUEUE_STAT_GREEN_WRED_DROPPED_BYTES",
		19: "QUEUE_STAT_YELLOW_WRED_DROPPED_PACKETS",
		20: "QUEUE_STAT_YELLOW_WRED_DROPPED_BYTES",
		21: "QUEUE_STAT_RED_WRED_DROPPED_PACKETS",
		22: "QUEUE_STAT_RED_WRED_DROPPED_BYTES",
		23: "QUEUE_STAT_WRED_DROPPED_PACKETS",
		24: "QUEUE_STAT_WRED_DROPPED_BYTES",
		25: "QUEUE_STAT_CURR_OCCUPANCY_BYTES",
		26: "QUEUE_STAT_WATERMARK_BYTES",
		27: "QUEUE_STAT_SHARED_CURR_OCCUPANCY_BYTES",
		28: "QUEUE_STAT_SHARED_WATERMARK_BYTES",
		29: "QUEUE_STAT_GREEN_WRED_ECN_MARKED_PACKETS",
		30: "QUEUE_STAT_GREEN_WRED_ECN_MARKED_BYTES",
		31: "QUEUE_STAT_YELLOW_WRED_ECN_MARKED_PACKETS",
		32: "QUEUE_STAT_YELLOW_WRED_ECN_MARKED_BYTES",
		33: "QUEUE_STAT_RED_WRED_ECN_MARKED_PACKETS",
		34: "QUEUE_STAT_RED_WRED_ECN_MARKED_BYTES",
		35: "QUEUE_STAT_WRED_ECN_MARKED_PACKETS",
		36: "QUEUE_STAT_WRED_ECN_MARKED_BYTES",
		37: "QUEUE_STAT_CURR_OCCUPANCY_LEVEL",
		38: "QUEUE_STAT_WATERMARK_LEVEL",
		39: "QUEUE_STAT_CUSTOM_RANGE_BASE",
	}
	QueueStat_value = map[string]int32{
		"QUEUE_STAT_UNSPECIFIED":                    0,
		"QUEUE_STAT_PACKETS":                        1,
		"QUEUE_STAT_BYTES":                          2,
		"QUEUE_STAT_DROPPED_PACKETS":                3,
		"QUEUE_STAT_DROPPED_BYTES":                  4,
		"QUEUE_STAT_GREEN_PACKETS":                  5,
		"QUEUE_STAT_GREEN_BYTES":                    6,
		"QUEUE_STAT_GREEN_DROPPED_PACKETS":          7,
		"QUEUE_STAT_GREEN_DROPPED_BYTES":            8,
		"QUEUE_STAT_YELLOW_PACKETS":                 9,
		"QUEUE_STAT_YELLOW_BYTES":                   10,
		"QUEUE_STAT_YELLOW_DROPPED_PACKETS":         11,
		"QUEUE_STAT_YELLOW_DROPPED_BYTES":           12,
		"QUEUE_STAT_RED_PACKETS":                    13,
		"QUEUE_STAT_RED_BYTES":                      14,
		"QUEUE_STAT_RED_DROPPED_PACKETS":            15,
		"QUEUE_STAT_RED_DROPPED_BYTES":              16,
		"QUEUE_STAT_GREEN_WRED_DROPPED_PACKETS":     17,
		"QUEUE_STAT_GREEN_WRED_DROPPED_BYTES":       18,
		"QUEUE_STAT_YELLOW_WRED_DROPPED_PACKETS":    19,
		"QUEUE_STAT_YELLOW_WRED_DROPPED_BYTES":      20,
		"QUEUE_STAT_RED_WRED_DROPPED_PACKETS":       21,
		"QUEUE_STAT_RED_WRED_DROPPED_BYTES":         22,
		"QUEUE_STAT_WRED_DROPPED_PACKETS":           23,
		"QUEUE_STAT_WRED_DROPPED_BYTES":             24,
		"QUEUE_STAT_CURR_OCCUPANCY_BYTES":           25,
		"QUEUE_STAT_WATERMARK_BYTES":                26,
		"QUEUE_STAT_SHARED_CURR_OCCUPANCY_BYTES":    27,
		"QUEUE_STAT_SHARED_WATERMARK_BYTES":         28,
		"QUEUE_STAT_GREEN_WRED_ECN_MARKED_PACKETS":  29,
		"QUEUE_STAT_GREEN_WRED_ECN_MARKED_BYTES":    30,
		"QUEUE_STAT_YELLOW_WRED_ECN_MARKED_PACKETS": 31,
		"QUEUE_STAT_YELLOW_WRED_ECN_MARKED_BYTES":   32,
		"QUEUE_STAT_RED_WRED_ECN_MARKED_PACKETS":    33,
		"QUEUE_STAT_RED_WRED_ECN_MARKED_BYTES":      34,
		"QUEUE_STAT_WRED_ECN_MARKED_PACKETS":        35,
		"QUEUE_STAT_WRED_ECN_MARKED_BYTES":          36,
		"QUEUE_STAT_CURR_OCCUPANCY_LEVEL":           37,
		"QUEUE_STAT_WATERMARK_LEVEL":                38,
		"QUEUE_STAT_CUSTOM_RANGE_BASE":              39,
	}
)

func (x QueueStat) Enum() *QueueStat {
	p := new(QueueStat)
	*p = x
	return p
}

func (x QueueStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueueStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[116].Descriptor()
}

func (QueueStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[116]
}

func (x QueueStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueueStat.Descriptor instead.
func (QueueStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{116}
}

type QueueType int32

const (
	QueueType_QUEUE_TYPE_UNSPECIFIED       QueueType = 0
	QueueType_QUEUE_TYPE_ALL               QueueType = 1
	QueueType_QUEUE_TYPE_UNICAST           QueueType = 2
	QueueType_QUEUE_TYPE_MULTICAST         QueueType = 3
	QueueType_QUEUE_TYPE_UNICAST_VOQ       QueueType = 4
	QueueType_QUEUE_TYPE_MULTICAST_VOQ     QueueType = 5
	QueueType_QUEUE_TYPE_FABRIC_TX         QueueType = 6
	QueueType_QUEUE_TYPE_CUSTOM_RANGE_BASE QueueType = 7
)

// Enum value maps for QueueType.
var (
	QueueType_name = map[int32]string{
		0: "QUEUE_TYPE_UNSPECIFIED",
		1: "QUEUE_TYPE_ALL",
		2: "QUEUE_TYPE_UNICAST",
		3: "QUEUE_TYPE_MULTICAST",
		4: "QUEUE_TYPE_UNICAST_VOQ",
		5: "QUEUE_TYPE_MULTICAST_VOQ",
		6: "QUEUE_TYPE_FABRIC_TX",
		7: "QUEUE_TYPE_CUSTOM_RANGE_BASE",
	}
	QueueType_value = map[string]int32{
		"QUEUE_TYPE_UNSPECIFIED":       0,
		"QUEUE_TYPE_ALL":               1,
		"QUEUE_TYPE_UNICAST":           2,
		"QUEUE_TYPE_MULTICAST":         3,
		"QUEUE_TYPE_UNICAST_VOQ":       4,
		"QUEUE_TYPE_MULTICAST_VOQ":     5,
		"QUEUE_TYPE_FABRIC_TX":         6,
		"QUEUE_TYPE_CUSTOM_RANGE_BASE": 7,
	}
)

func (x QueueType) Enum() *QueueType {
	p := new(QueueType)
	*p = x
	return p
}

func (x QueueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueueType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[117].Descriptor()
}

func (QueueType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[117]
}

func (x QueueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueueType.Descriptor instead.
func (QueueType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{117}
}

type RouterInterfaceStat int32

const (
	RouterInterfaceStat_ROUTER_INTERFACE_STAT_UNSPECIFIED       RouterInterfaceStat = 0
	RouterInterfaceStat_ROUTER_INTERFACE_STAT_IN_OCTETS         RouterInterfaceStat = 1
	RouterInterfaceStat_ROUTER_INTERFACE_STAT_IN_PACKETS        RouterInterfaceStat = 2
	RouterInterfaceStat_ROUTER_INTERFACE_STAT_OUT_OCTETS        RouterInterfaceStat = 3
	RouterInterfaceStat_ROUTER_INTERFACE_STAT_OUT_PACKETS       RouterInterfaceStat = 4
	RouterInterfaceStat_ROUTER_INTERFACE_STAT_IN_ERROR_OCTETS   RouterInterfaceStat = 5
	RouterInterfaceStat_ROUTER_INTERFACE_STAT_IN_ERROR_PACKETS  RouterInterfaceStat = 6
	RouterInterfaceStat_ROUTER_INTERFACE_STAT_OUT_ERROR_OCTETS  RouterInterfaceStat = 7
	RouterInterfaceStat_ROUTER_INTERFACE_STAT_OUT_ERROR_PACKETS RouterInterfaceStat = 8
)

// Enum value maps for RouterInterfaceStat.
var (
	RouterInterfaceStat_name = map[int32]string{
		0: "ROUTER_INTERFACE_STAT_UNSPECIFIED",
		1: "ROUTER_INTERFACE_STAT_IN_OCTETS",
		2: "ROUTER_INTERFACE_STAT_IN_PACKETS",
		3: "ROUTER_INTERFACE_STAT_OUT_OCTETS",
		4: "ROUTER_INTERFACE_STAT_OUT_PACKETS",
		5: "ROUTER_INTERFACE_STAT_IN_ERROR_OCTETS",
		6: "ROUTER_INTERFACE_STAT_IN_ERROR_PACKETS",
		7: "ROUTER_INTERFACE_STAT_OUT_ERROR_OCTETS",
		8: "ROUTER_INTERFACE_STAT_OUT_ERROR_PACKETS",
	}
	RouterInterfaceStat_value = map[string]int32{
		"ROUTER_INTERFACE_STAT_UNSPECIFIED":       0,
		"ROUTER_INTERFACE_STAT_IN_OCTETS":         1,
		"ROUTER_INTERFACE_STAT_IN_PACKETS":        2,
		"ROUTER_INTERFACE_STAT_OUT_OCTETS":        3,
		"ROUTER_INTERFACE_STAT_OUT_PACKETS":       4,
		"ROUTER_INTERFACE_STAT_IN_ERROR_OCTETS":   5,
		"ROUTER_INTERFACE_STAT_IN_ERROR_PACKETS":  6,
		"ROUTER_INTERFACE_STAT_OUT_ERROR_OCTETS":  7,
		"ROUTER_INTERFACE_STAT_OUT_ERROR_PACKETS": 8,
	}
)

func (x RouterInterfaceStat) Enum() *RouterInterfaceStat {
	p := new(RouterInterfaceStat)
	*p = x
	return p
}

func (x RouterInterfaceStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouterInterfaceStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[118].Descriptor()
}

func (RouterInterfaceStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[118]
}

func (x RouterInterfaceStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouterInterfaceStat.Descriptor instead.
func (RouterInterfaceStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{118}
}

type RouterInterfaceType int32

const (
	RouterInterfaceType_ROUTER_INTERFACE_TYPE_UNSPECIFIED RouterInterfaceType = 0
	RouterInterfaceType_ROUTER_INTERFACE_TYPE_PORT        RouterInterfaceType = 1
	RouterInterfaceType_ROUTER_INTERFACE_TYPE_VLAN        RouterInterfaceType = 2
	RouterInterfaceType_ROUTER_INTERFACE_TYPE_LOOPBACK    RouterInterfaceType = 3
	RouterInterfaceType_ROUTER_INTERFACE_TYPE_MPLS_ROUTER RouterInterfaceType = 4
	RouterInterfaceType_ROUTER_INTERFACE_TYPE_SUB_PORT    RouterInterfaceType = 5
	RouterInterfaceType_ROUTER_INTERFACE_TYPE_BRIDGE      RouterInterfaceType = 6
	RouterInterfaceType_ROUTER_INTERFACE_TYPE_QINQ_PORT   RouterInterfaceType = 7
)

// Enum value maps for RouterInterfaceType.
var (
	RouterInterfaceType_name = map[int32]string{
		0: "ROUTER_INTERFACE_TYPE_UNSPECIFIED",
		1: "ROUTER_INTERFACE_TYPE_PORT",
		2: "ROUTER_INTERFACE_TYPE_VLAN",
		3: "ROUTER_INTERFACE_TYPE_LOOPBACK",
		4: "ROUTER_INTERFACE_TYPE_MPLS_ROUTER",
		5: "ROUTER_INTERFACE_TYPE_SUB_PORT",
		6: "ROUTER_INTERFACE_TYPE_BRIDGE",
		7: "ROUTER_INTERFACE_TYPE_QINQ_PORT",
	}
	RouterInterfaceType_value = map[string]int32{
		"ROUTER_INTERFACE_TYPE_UNSPECIFIED": 0,
		"ROUTER_INTERFACE_TYPE_PORT":        1,
		"ROUTER_INTERFACE_TYPE_VLAN":        2,
		"ROUTER_INTERFACE_TYPE_LOOPBACK":    3,
		"ROUTER_INTERFACE_TYPE_MPLS_ROUTER": 4,
		"ROUTER_INTERFACE_TYPE_SUB_PORT":    5,
		"ROUTER_INTERFACE_TYPE_BRIDGE":      6,
		"ROUTER_INTERFACE_TYPE_QINQ_PORT":   7,
	}
)

func (x RouterInterfaceType) Enum() *RouterInterfaceType {
	p := new(RouterInterfaceType)
	*p = x
	return p
}

func (x RouterInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouterInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[119].Descriptor()
}

func (RouterInterfaceType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[119]
}

func (x RouterInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouterInterfaceType.Descriptor instead.
func (RouterInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{119}
}

type SamplepacketMode int32

const (
	SamplepacketMode_SAMPLEPACKET_MODE_UNSPECIFIED SamplepacketMode = 0
	SamplepacketMode_SAMPLEPACKET_MODE_EXCLUSIVE   SamplepacketMode = 1
	SamplepacketMode_SAMPLEPACKET_MODE_SHARED      SamplepacketMode = 2
)

// Enum value maps for SamplepacketMode.
var (
	SamplepacketMode_name = map[int32]string{
		0: "SAMPLEPACKET_MODE_UNSPECIFIED",
		1: "SAMPLEPACKET_MODE_EXCLUSIVE",
		2: "SAMPLEPACKET_MODE_SHARED",
	}
	SamplepacketMode_value = map[string]int32{
		"SAMPLEPACKET_MODE_UNSPECIFIED": 0,
		"SAMPLEPACKET_MODE_EXCLUSIVE":   1,
		"SAMPLEPACKET_MODE_SHARED":      2,
	}
)

func (x SamplepacketMode) Enum() *SamplepacketMode {
	p := new(SamplepacketMode)
	*p = x
	return p
}

func (x SamplepacketMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SamplepacketMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[120].Descriptor()
}

func (SamplepacketMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[120]
}

func (x SamplepacketMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SamplepacketMode.Descriptor instead.
func (SamplepacketMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{120}
}

type SamplepacketType int32

const (
	SamplepacketType_SAMPLEPACKET_TYPE_UNSPECIFIED    SamplepacketType = 0
	SamplepacketType_SAMPLEPACKET_TYPE_SLOW_PATH      SamplepacketType = 1
	SamplepacketType_SAMPLEPACKET_TYPE_MIRROR_SESSION SamplepacketType = 2
)

// Enum value maps for SamplepacketType.
var (
	SamplepacketType_name = map[int32]string{
		0: "SAMPLEPACKET_TYPE_UNSPECIFIED",
		1: "SAMPLEPACKET_TYPE_SLOW_PATH",
		2: "SAMPLEPACKET_TYPE_MIRROR_SESSION",
	}
	SamplepacketType_value = map[string]int32{
		"SAMPLEPACKET_TYPE_UNSPECIFIED":    0,
		"SAMPLEPACKET_TYPE_SLOW_PATH":      1,
		"SAMPLEPACKET_TYPE_MIRROR_SESSION": 2,
	}
)

func (x SamplepacketType) Enum() *SamplepacketType {
	p := new(SamplepacketType)
	*p = x
	return p
}

func (x SamplepacketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SamplepacketType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[121].Descriptor()
}

func (SamplepacketType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[121]
}

func (x SamplepacketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SamplepacketType.Descriptor instead.
func (SamplepacketType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{121}
}

type SchedulingType int32

const (
	SchedulingType_SCHEDULING_TYPE_UNSPECIFIED SchedulingType = 0
	SchedulingType_SCHEDULING_TYPE_STRICT      SchedulingType = 1
	SchedulingType_SCHEDULING_TYPE_WRR         SchedulingType = 2
	SchedulingType_SCHEDULING_TYPE_DWRR        SchedulingType = 3
)

// Enum value maps for SchedulingType.
var (
	SchedulingType_name = map[int32]string{
		0: "SCHEDULING_TYPE_UNSPECIFIED",
		1: "SCHEDULING_TYPE_STRICT",
		2: "SCHEDULING_TYPE_WRR",
		3: "SCHEDULING_TYPE_DWRR",
	}
	SchedulingType_value = map[string]int32{
		"SCHEDULING_TYPE_UNSPECIFIED": 0,
		"SCHEDULING_TYPE_STRICT":      1,
		"SCHEDULING_TYPE_WRR":         2,
		"SCHEDULING_TYPE_DWRR":        3,
	}
)

func (x SchedulingType) Enum() *SchedulingType {
	p := new(SchedulingType)
	*p = x
	return p
}

func (x SchedulingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulingType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[122].Descriptor()
}

func (SchedulingType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[122]
}

func (x SchedulingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulingType.Descriptor instead.
func (SchedulingType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{122}
}

type Srv6SidlistType int32

const (
	Srv6SidlistType_SRV6_SIDLIST_TYPE_UNSPECIFIED       Srv6SidlistType = 0
	Srv6SidlistType_SRV6_SIDLIST_TYPE_INSERT            Srv6SidlistType = 1
	Srv6SidlistType_SRV6_SIDLIST_TYPE_INSERT_RED        Srv6SidlistType = 2
	Srv6SidlistType_SRV6_SIDLIST_TYPE_ENCAPS            Srv6SidlistType = 3
	Srv6SidlistType_SRV6_SIDLIST_TYPE_ENCAPS_RED        Srv6SidlistType = 4
	Srv6SidlistType_SRV6_SIDLIST_TYPE_CUSTOM_RANGE_BASE Srv6SidlistType = 5
)

// Enum value maps for Srv6SidlistType.
var (
	Srv6SidlistType_name = map[int32]string{
		0: "SRV6_SIDLIST_TYPE_UNSPECIFIED",
		1: "SRV6_SIDLIST_TYPE_INSERT",
		2: "SRV6_SIDLIST_TYPE_INSERT_RED",
		3: "SRV6_SIDLIST_TYPE_ENCAPS",
		4: "SRV6_SIDLIST_TYPE_ENCAPS_RED",
		5: "SRV6_SIDLIST_TYPE_CUSTOM_RANGE_BASE",
	}
	Srv6SidlistType_value = map[string]int32{
		"SRV6_SIDLIST_TYPE_UNSPECIFIED":       0,
		"SRV6_SIDLIST_TYPE_INSERT":            1,
		"SRV6_SIDLIST_TYPE_INSERT_RED":        2,
		"SRV6_SIDLIST_TYPE_ENCAPS":            3,
		"SRV6_SIDLIST_TYPE_ENCAPS_RED":        4,
		"SRV6_SIDLIST_TYPE_CUSTOM_RANGE_BASE": 5,
	}
)

func (x Srv6SidlistType) Enum() *Srv6SidlistType {
	p := new(Srv6SidlistType)
	*p = x
	return p
}

func (x Srv6SidlistType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Srv6SidlistType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[123].Descriptor()
}

func (Srv6SidlistType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[123]
}

func (x Srv6SidlistType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Srv6SidlistType.Descriptor instead.
func (Srv6SidlistType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{123}
}

type StatsMode int32

const (
	StatsMode_STATS_MODE_UNSPECIFIED    StatsMode = 0
	StatsMode_STATS_MODE_READ           StatsMode = 1
	StatsMode_STATS_MODE_READ_AND_CLEAR StatsMode = 2
)

// Enum value maps for StatsMode.
var (
	StatsMode_name = map[int32]string{
		0: "STATS_MODE_UNSPECIFIED",
		1: "STATS_MODE_READ",
		2: "STATS_MODE_READ_AND_CLEAR",
	}
	StatsMode_value = map[string]int32{
		"STATS_MODE_UNSPECIFIED":    0,
		"STATS_MODE_READ":           1,
		"STATS_MODE_READ_AND_CLEAR": 2,
	}
)

func (x StatsMode) Enum() *StatsMode {
	p := new(StatsMode)
	*p = x
	return p
}

func (x StatsMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatsMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[124].Descriptor()
}

func (StatsMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[124]
}

func (x StatsMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatsMode.Descriptor instead.
func (StatsMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{124}
}

type StpPortState int32

const (
	StpPortState_STP_PORT_STATE_UNSPECIFIED StpPortState = 0
	StpPortState_STP_PORT_STATE_LEARNING    StpPortState = 1
	StpPortState_STP_PORT_STATE_FORWARDING  StpPortState = 2
	StpPortState_STP_PORT_STATE_BLOCKING    StpPortState = 3
)

// Enum value maps for StpPortState.
var (
	StpPortState_name = map[int32]string{
		0: "STP_PORT_STATE_UNSPECIFIED",
		1: "STP_PORT_STATE_LEARNING",
		2: "STP_PORT_STATE_FORWARDING",
		3: "STP_PORT_STATE_BLOCKING",
	}
	StpPortState_value = map[string]int32{
		"STP_PORT_STATE_UNSPECIFIED": 0,
		"STP_PORT_STATE_LEARNING":    1,
		"STP_PORT_STATE_FORWARDING":  2,
		"STP_PORT_STATE_BLOCKING":    3,
	}
)

func (x StpPortState) Enum() *StpPortState {
	p := new(StpPortState)
	*p = x
	return p
}

func (x StpPortState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StpPortState) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[125].Descriptor()
}

func (StpPortState) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[125]
}

func (x StpPortState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StpPortState.Descriptor instead.
func (StpPortState) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{125}
}

type SwitchFailoverConfigMode int32

const (
	SwitchFailoverConfigMode_SWITCH_FAILOVER_CONFIG_MODE_UNSPECIFIED SwitchFailoverConfigMode = 0
	SwitchFailoverConfigMode_SWITCH_FAILOVER_CONFIG_MODE_NO_HITLESS  SwitchFailoverConfigMode = 1
	SwitchFailoverConfigMode_SWITCH_FAILOVER_CONFIG_MODE_HITLESS     SwitchFailoverConfigMode = 2
)

// Enum value maps for SwitchFailoverConfigMode.
var (
	SwitchFailoverConfigMode_name = map[int32]string{
		0: "SWITCH_FAILOVER_CONFIG_MODE_UNSPECIFIED",
		1: "SWITCH_FAILOVER_CONFIG_MODE_NO_HITLESS",
		2: "SWITCH_FAILOVER_CONFIG_MODE_HITLESS",
	}
	SwitchFailoverConfigMode_value = map[string]int32{
		"SWITCH_FAILOVER_CONFIG_MODE_UNSPECIFIED": 0,
		"SWITCH_FAILOVER_CONFIG_MODE_NO_HITLESS":  1,
		"SWITCH_FAILOVER_CONFIG_MODE_HITLESS":     2,
	}
)

func (x SwitchFailoverConfigMode) Enum() *SwitchFailoverConfigMode {
	p := new(SwitchFailoverConfigMode)
	*p = x
	return p
}

func (x SwitchFailoverConfigMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchFailoverConfigMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[126].Descriptor()
}

func (SwitchFailoverConfigMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[126]
}

func (x SwitchFailoverConfigMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchFailoverConfigMode.Descriptor instead.
func (SwitchFailoverConfigMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{126}
}

type SwitchFirmwareLoadMethod int32

const (
	SwitchFirmwareLoadMethod_SWITCH_FIRMWARE_LOAD_METHOD_UNSPECIFIED SwitchFirmwareLoadMethod = 0
	SwitchFirmwareLoadMethod_SWITCH_FIRMWARE_LOAD_METHOD_NONE        SwitchFirmwareLoadMethod = 1
	SwitchFirmwareLoadMethod_SWITCH_FIRMWARE_LOAD_METHOD_INTERNAL    SwitchFirmwareLoadMethod = 2
	SwitchFirmwareLoadMethod_SWITCH_FIRMWARE_LOAD_METHOD_EEPROM      SwitchFirmwareLoadMethod = 3
)

// Enum value maps for SwitchFirmwareLoadMethod.
var (
	SwitchFirmwareLoadMethod_name = map[int32]string{
		0: "SWITCH_FIRMWARE_LOAD_METHOD_UNSPECIFIED",
		1: "SWITCH_FIRMWARE_LOAD_METHOD_NONE",
		2: "SWITCH_FIRMWARE_LOAD_METHOD_INTERNAL",
		3: "SWITCH_FIRMWARE_LOAD_METHOD_EEPROM",
	}
	SwitchFirmwareLoadMethod_value = map[string]int32{
		"SWITCH_FIRMWARE_LOAD_METHOD_UNSPECIFIED": 0,
		"SWITCH_FIRMWARE_LOAD_METHOD_NONE":        1,
		"SWITCH_FIRMWARE_LOAD_METHOD_INTERNAL":    2,
		"SWITCH_FIRMWARE_LOAD_METHOD_EEPROM":      3,
	}
)

func (x SwitchFirmwareLoadMethod) Enum() *SwitchFirmwareLoadMethod {
	p := new(SwitchFirmwareLoadMethod)
	*p = x
	return p
}

func (x SwitchFirmwareLoadMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchFirmwareLoadMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[127].Descriptor()
}

func (SwitchFirmwareLoadMethod) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[127]
}

func (x SwitchFirmwareLoadMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchFirmwareLoadMethod.Descriptor instead.
func (SwitchFirmwareLoadMethod) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{127}
}

type SwitchFirmwareLoadType int32

const (
	SwitchFirmwareLoadType_SWITCH_FIRMWARE_LOAD_TYPE_UNSPECIFIED SwitchFirmwareLoadType = 0
	SwitchFirmwareLoadType_SWITCH_FIRMWARE_LOAD_TYPE_SKIP        SwitchFirmwareLoadType = 1
	SwitchFirmwareLoadType_SWITCH_FIRMWARE_LOAD_TYPE_FORCE       SwitchFirmwareLoadType = 2
	SwitchFirmwareLoadType_SWITCH_FIRMWARE_LOAD_TYPE_AUTO        SwitchFirmwareLoadType = 3
)

// Enum value maps for SwitchFirmwareLoadType.
var (
	SwitchFirmwareLoadType_name = map[int32]string{
		0: "SWITCH_FIRMWARE_LOAD_TYPE_UNSPECIFIED",
		1: "SWITCH_FIRMWARE_LOAD_TYPE_SKIP",
		2: "SWITCH_FIRMWARE_LOAD_TYPE_FORCE",
		3: "SWITCH_FIRMWARE_LOAD_TYPE_AUTO",
	}
	SwitchFirmwareLoadType_value = map[string]int32{
		"SWITCH_FIRMWARE_LOAD_TYPE_UNSPECIFIED": 0,
		"SWITCH_FIRMWARE_LOAD_TYPE_SKIP":        1,
		"SWITCH_FIRMWARE_LOAD_TYPE_FORCE":       2,
		"SWITCH_FIRMWARE_LOAD_TYPE_AUTO":        3,
	}
)

func (x SwitchFirmwareLoadType) Enum() *SwitchFirmwareLoadType {
	p := new(SwitchFirmwareLoadType)
	*p = x
	return p
}

func (x SwitchFirmwareLoadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchFirmwareLoadType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[128].Descriptor()
}

func (SwitchFirmwareLoadType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[128]
}

func (x SwitchFirmwareLoadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchFirmwareLoadType.Descriptor instead.
func (SwitchFirmwareLoadType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{128}
}

type SwitchHardwareAccessBus int32

const (
	SwitchHardwareAccessBus_SWITCH_HARDWARE_ACCESS_BUS_UNSPECIFIED SwitchHardwareAccessBus = 0
	SwitchHardwareAccessBus_SWITCH_HARDWARE_ACCESS_BUS_MDIO        SwitchHardwareAccessBus = 1
	SwitchHardwareAccessBus_SWITCH_HARDWARE_ACCESS_BUS_I2C         SwitchHardwareAccessBus = 2
	SwitchHardwareAccessBus_SWITCH_HARDWARE_ACCESS_BUS_CPLD        SwitchHardwareAccessBus = 3
)

// Enum value maps for SwitchHardwareAccessBus.
var (
	SwitchHardwareAccessBus_name = map[int32]string{
		0: "SWITCH_HARDWARE_ACCESS_BUS_UNSPECIFIED",
		1: "SWITCH_HARDWARE_ACCESS_BUS_MDIO",
		2: "SWITCH_HARDWARE_ACCESS_BUS_I2C",
		3: "SWITCH_HARDWARE_ACCESS_BUS_CPLD",
	}
	SwitchHardwareAccessBus_value = map[string]int32{
		"SWITCH_HARDWARE_ACCESS_BUS_UNSPECIFIED": 0,
		"SWITCH_HARDWARE_ACCESS_BUS_MDIO":        1,
		"SWITCH_HARDWARE_ACCESS_BUS_I2C":         2,
		"SWITCH_HARDWARE_ACCESS_BUS_CPLD":        3,
	}
)

func (x SwitchHardwareAccessBus) Enum() *SwitchHardwareAccessBus {
	p := new(SwitchHardwareAccessBus)
	*p = x
	return p
}

func (x SwitchHardwareAccessBus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchHardwareAccessBus) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[129].Descriptor()
}

func (SwitchHardwareAccessBus) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[129]
}

func (x SwitchHardwareAccessBus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchHardwareAccessBus.Descriptor instead.
func (SwitchHardwareAccessBus) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{129}
}

type SwitchMcastSnoopingCapability int32

const (
	SwitchMcastSnoopingCapability_SWITCH_MCAST_SNOOPING_CAPABILITY_UNSPECIFIED SwitchMcastSnoopingCapability = 0
	SwitchMcastSnoopingCapability_SWITCH_MCAST_SNOOPING_CAPABILITY_NONE        SwitchMcastSnoopingCapability = 1
	SwitchMcastSnoopingCapability_SWITCH_MCAST_SNOOPING_CAPABILITY_XG          SwitchMcastSnoopingCapability = 2
	SwitchMcastSnoopingCapability_SWITCH_MCAST_SNOOPING_CAPABILITY_SG          SwitchMcastSnoopingCapability = 3
	SwitchMcastSnoopingCapability_SWITCH_MCAST_SNOOPING_CAPABILITY_XG_AND_SG   SwitchMcastSnoopingCapability = 4
)

// Enum value maps for SwitchMcastSnoopingCapability.
var (
	SwitchMcastSnoopingCapability_name = map[int32]string{
		0: "SWITCH_MCAST_SNOOPING_CAPABILITY_UNSPECIFIED",
		1: "SWITCH_MCAST_SNOOPING_CAPABILITY_NONE",
		2: "SWITCH_MCAST_SNOOPING_CAPABILITY_XG",
		3: "SWITCH_MCAST_SNOOPING_CAPABILITY_SG",
		4: "SWITCH_MCAST_SNOOPING_CAPABILITY_XG_AND_SG",
	}
	SwitchMcastSnoopingCapability_value = map[string]int32{
		"SWITCH_MCAST_SNOOPING_CAPABILITY_UNSPECIFIED": 0,
		"SWITCH_MCAST_SNOOPING_CAPABILITY_NONE":        1,
		"SWITCH_MCAST_SNOOPING_CAPABILITY_XG":          2,
		"SWITCH_MCAST_SNOOPING_CAPABILITY_SG":          3,
		"SWITCH_MCAST_SNOOPING_CAPABILITY_XG_AND_SG":   4,
	}
)

func (x SwitchMcastSnoopingCapability) Enum() *SwitchMcastSnoopingCapability {
	p := new(SwitchMcastSnoopingCapability)
	*p = x
	return p
}

func (x SwitchMcastSnoopingCapability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchMcastSnoopingCapability) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[130].Descriptor()
}

func (SwitchMcastSnoopingCapability) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[130]
}

func (x SwitchMcastSnoopingCapability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchMcastSnoopingCapability.Descriptor instead.
func (SwitchMcastSnoopingCapability) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{130}
}

type SwitchOperStatus int32

const (
	SwitchOperStatus_SWITCH_OPER_STATUS_UNSPECIFIED SwitchOperStatus = 0
	SwitchOperStatus_SWITCH_OPER_STATUS_UNKNOWN     SwitchOperStatus = 1
	SwitchOperStatus_SWITCH_OPER_STATUS_UP          SwitchOperStatus = 2
	SwitchOperStatus_SWITCH_OPER_STATUS_DOWN        SwitchOperStatus = 3
	SwitchOperStatus_SWITCH_OPER_STATUS_FAILED      SwitchOperStatus = 4
)

// Enum value maps for SwitchOperStatus.
var (
	SwitchOperStatus_name = map[int32]string{
		0: "SWITCH_OPER_STATUS_UNSPECIFIED",
		1: "SWITCH_OPER_STATUS_UNKNOWN",
		2: "SWITCH_OPER_STATUS_UP",
		3: "SWITCH_OPER_STATUS_DOWN",
		4: "SWITCH_OPER_STATUS_FAILED",
	}
	SwitchOperStatus_value = map[string]int32{
		"SWITCH_OPER_STATUS_UNSPECIFIED": 0,
		"SWITCH_OPER_STATUS_UNKNOWN":     1,
		"SWITCH_OPER_STATUS_UP":          2,
		"SWITCH_OPER_STATUS_DOWN":        3,
		"SWITCH_OPER_STATUS_FAILED":      4,
	}
)

func (x SwitchOperStatus) Enum() *SwitchOperStatus {
	p := new(SwitchOperStatus)
	*p = x
	return p
}

func (x SwitchOperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchOperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[131].Descriptor()
}

func (SwitchOperStatus) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[131]
}

func (x SwitchOperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchOperStatus.Descriptor instead.
func (SwitchOperStatus) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{131}
}

type SwitchRestartType int32

const (
	SwitchRestartType_SWITCH_RESTART_TYPE_UNSPECIFIED SwitchRestartType = 0
	SwitchRestartType_SWITCH_RESTART_TYPE_NONE        SwitchRestartType = 1
	SwitchRestartType_SWITCH_RESTART_TYPE_PLANNED     SwitchRestartType = 2
	SwitchRestartType_SWITCH_RESTART_TYPE_ANY         SwitchRestartType = 3
)

// Enum value maps for SwitchRestartType.
var (
	SwitchRestartType_name = map[int32]string{
		0: "SWITCH_RESTART_TYPE_UNSPECIFIED",
		1: "SWITCH_RESTART_TYPE_NONE",
		2: "SWITCH_RESTART_TYPE_PLANNED",
		3: "SWITCH_RESTART_TYPE_ANY",
	}
	SwitchRestartType_value = map[string]int32{
		"SWITCH_RESTART_TYPE_UNSPECIFIED": 0,
		"SWITCH_RESTART_TYPE_NONE":        1,
		"SWITCH_RESTART_TYPE_PLANNED":     2,
		"SWITCH_RESTART_TYPE_ANY":         3,
	}
)

func (x SwitchRestartType) Enum() *SwitchRestartType {
	p := new(SwitchRestartType)
	*p = x
	return p
}

func (x SwitchRestartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchRestartType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[132].Descriptor()
}

func (SwitchRestartType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[132]
}

func (x SwitchRestartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchRestartType.Descriptor instead.
func (SwitchRestartType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{132}
}

type SwitchStat int32

const (
	SwitchStat_SWITCH_STAT_UNSPECIFIED                                SwitchStat = 0
	SwitchStat_SWITCH_STAT_IN_DROP_REASON_RANGE_BASE                  SwitchStat = 1
	SwitchStat_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS  SwitchStat = 2
	SwitchStat_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS  SwitchStat = 3
	SwitchStat_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS  SwitchStat = 4
	SwitchStat_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS  SwitchStat = 5
	SwitchStat_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS  SwitchStat = 6
	SwitchStat_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS  SwitchStat = 7
	SwitchStat_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS  SwitchStat = 8
	SwitchStat_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS  SwitchStat = 9
	SwitchStat_SWITCH_STAT_IN_DROP_REASON_RANGE_END                   SwitchStat = 10
	SwitchStat_SWITCH_STAT_OUT_DROP_REASON_RANGE_BASE                 SwitchStat = 11
	SwitchStat_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS SwitchStat = 12
	SwitchStat_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS SwitchStat = 13
	SwitchStat_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS SwitchStat = 14
	SwitchStat_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS SwitchStat = 15
	SwitchStat_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS SwitchStat = 16
	SwitchStat_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS SwitchStat = 17
	SwitchStat_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS SwitchStat = 18
	SwitchStat_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS SwitchStat = 19
	SwitchStat_SWITCH_STAT_OUT_DROP_REASON_RANGE_END                  SwitchStat = 20
	SwitchStat_SWITCH_STAT_FABRIC_DROP_REASON_RANGE_BASE              SwitchStat = 21
	SwitchStat_SWITCH_STAT_ECC_DROP                                   SwitchStat = 22
	SwitchStat_SWITCH_STAT_REACHABILITY_DROP                          SwitchStat = 23
	SwitchStat_SWITCH_STAT_HIGHEST_QUEUE_CONGESTION_LEVEL             SwitchStat = 24
	SwitchStat_SWITCH_STAT_GLOBAL_DROP                                SwitchStat = 25
	SwitchStat_SWITCH_STAT_FABRIC_DROP_REASON_RANGE_END               SwitchStat = 26
)

// Enum value maps for SwitchStat.
var (
	SwitchStat_name = map[int32]string{
		0:  "SWITCH_STAT_UNSPECIFIED",
		1:  "SWITCH_STAT_IN_DROP_REASON_RANGE_BASE",
		2:  "SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS",
		3:  "SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS",
		4:  "SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS",
		5:  "SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS",
		6:  "SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS",
		7:  "SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS",
		8:  "SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS",
		9:  "SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS",
		10: "SWITCH_STAT_IN_DROP_REASON_RANGE_END",
		11: "SWITCH_STAT_OUT_DROP_REASON_RANGE_BASE",
		12: "SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS",
		13: "SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS",
		14: "SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS",
		15: "SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS",
		16: "SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS",
		17: "SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS",
		18: "SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS",
		19: "SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS",
		20: "SWITCH_STAT_OUT_DROP_REASON_RANGE_END",
		21: "SWITCH_STAT_FABRIC_DROP_REASON_RANGE_BASE",
		22: "SWITCH_STAT_ECC_DROP",
		23: "SWITCH_STAT_REACHABILITY_DROP",
		24: "SWITCH_STAT_HIGHEST_QUEUE_CONGESTION_LEVEL",
		25: "SWITCH_STAT_GLOBAL_DROP",
		26: "SWITCH_STAT_FABRIC_DROP_REASON_RANGE_END",
	}
	SwitchStat_value = map[string]int32{
		"SWITCH_STAT_UNSPECIFIED":                                0,
		"SWITCH_STAT_IN_DROP_REASON_RANGE_BASE":                  1,
		"SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS":  2,
		"SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS":  3,
		"SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS":  4,
		"SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS":  5,
		"SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS":  6,
		"SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS":  7,
		"SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS":  8,
		"SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS":  9,
		"SWITCH_STAT_IN_DROP_REASON_RANGE_END":                   10,
		"SWITCH_STAT_OUT_DROP_REASON_RANGE_BASE":                 11,
		"SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS": 12,
		"SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS": 13,
		"SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS": 14,
		"SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS": 15,
		"SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS": 16,
		"SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS": 17,
		"SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS": 18,
		"SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS": 19,
		"SWITCH_STAT_OUT_DROP_REASON_RANGE_END":                  20,
		"SWITCH_STAT_FABRIC_DROP_REASON_RANGE_BASE":              21,
		"SWITCH_STAT_ECC_DROP":                                   22,
		"SWITCH_STAT_REACHABILITY_DROP":                          23,
		"SWITCH_STAT_HIGHEST_QUEUE_CONGESTION_LEVEL":             24,
		"SWITCH_STAT_GLOBAL_DROP":                                25,
		"SWITCH_STAT_FABRIC_DROP_REASON_RANGE_END":               26,
	}
)

func (x SwitchStat) Enum() *SwitchStat {
	p := new(SwitchStat)
	*p = x
	return p
}

func (x SwitchStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[133].Descriptor()
}

func (SwitchStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[133]
}

func (x SwitchStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchStat.Descriptor instead.
func (SwitchStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{133}
}

type SwitchSwitchingMode int32

const (
	SwitchSwitchingMode_SWITCH_SWITCHING_MODE_UNSPECIFIED       SwitchSwitchingMode = 0
	SwitchSwitchingMode_SWITCH_SWITCHING_MODE_CUT_THROUGH       SwitchSwitchingMode = 1
	SwitchSwitchingMode_SWITCH_SWITCHING_MODE_STORE_AND_FORWARD SwitchSwitchingMode = 2
)

// Enum value maps for SwitchSwitchingMode.
var (
	SwitchSwitchingMode_name = map[int32]string{
		0: "SWITCH_SWITCHING_MODE_UNSPECIFIED",
		1: "SWITCH_SWITCHING_MODE_CUT_THROUGH",
		2: "SWITCH_SWITCHING_MODE_STORE_AND_FORWARD",
	}
	SwitchSwitchingMode_value = map[string]int32{
		"SWITCH_SWITCHING_MODE_UNSPECIFIED":       0,
		"SWITCH_SWITCHING_MODE_CUT_THROUGH":       1,
		"SWITCH_SWITCHING_MODE_STORE_AND_FORWARD": 2,
	}
)

func (x SwitchSwitchingMode) Enum() *SwitchSwitchingMode {
	p := new(SwitchSwitchingMode)
	*p = x
	return p
}

func (x SwitchSwitchingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchSwitchingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[134].Descriptor()
}

func (SwitchSwitchingMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[134]
}

func (x SwitchSwitchingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchSwitchingMode.Descriptor instead.
func (SwitchSwitchingMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{134}
}

type SwitchType int32

const (
	SwitchType_SWITCH_TYPE_UNSPECIFIED SwitchType = 0
	SwitchType_SWITCH_TYPE_NPU         SwitchType = 1
	SwitchType_SWITCH_TYPE_PHY         SwitchType = 2
	SwitchType_SWITCH_TYPE_VOQ         SwitchType = 3
	SwitchType_SWITCH_TYPE_FABRIC      SwitchType = 4
)

// Enum value maps for SwitchType.
var (
	SwitchType_name = map[int32]string{
		0: "SWITCH_TYPE_UNSPECIFIED",
		1: "SWITCH_TYPE_NPU",
		2: "SWITCH_TYPE_PHY",
		3: "SWITCH_TYPE_VOQ",
		4: "SWITCH_TYPE_FABRIC",
	}
	SwitchType_value = map[string]int32{
		"SWITCH_TYPE_UNSPECIFIED": 0,
		"SWITCH_TYPE_NPU":         1,
		"SWITCH_TYPE_PHY":         2,
		"SWITCH_TYPE_VOQ":         3,
		"SWITCH_TYPE_FABRIC":      4,
	}
)

func (x SwitchType) Enum() *SwitchType {
	p := new(SwitchType)
	*p = x
	return p
}

func (x SwitchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[135].Descriptor()
}

func (SwitchType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[135]
}

func (x SwitchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchType.Descriptor instead.
func (SwitchType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{135}
}

type SystemPortType int32

const (
	SystemPortType_SYSTEM_PORT_TYPE_UNSPECIFIED SystemPortType = 0
	SystemPortType_SYSTEM_PORT_TYPE_LOCAL       SystemPortType = 1
	SystemPortType_SYSTEM_PORT_TYPE_REMOTE      SystemPortType = 2
)

// Enum value maps for SystemPortType.
var (
	SystemPortType_name = map[int32]string{
		0: "SYSTEM_PORT_TYPE_UNSPECIFIED",
		1: "SYSTEM_PORT_TYPE_LOCAL",
		2: "SYSTEM_PORT_TYPE_REMOTE",
	}
	SystemPortType_value = map[string]int32{
		"SYSTEM_PORT_TYPE_UNSPECIFIED": 0,
		"SYSTEM_PORT_TYPE_LOCAL":       1,
		"SYSTEM_PORT_TYPE_REMOTE":      2,
	}
)

func (x SystemPortType) Enum() *SystemPortType {
	p := new(SystemPortType)
	*p = x
	return p
}

func (x SystemPortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemPortType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[136].Descriptor()
}

func (SystemPortType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[136]
}

func (x SystemPortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemPortType.Descriptor instead.
func (SystemPortType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{136}
}

type TamBindPointType int32

const (
	TamBindPointType_TAM_BIND_POINT_TYPE_UNSPECIFIED TamBindPointType = 0
	TamBindPointType_TAM_BIND_POINT_TYPE_QUEUE       TamBindPointType = 1
	TamBindPointType_TAM_BIND_POINT_TYPE_PORT        TamBindPointType = 2
	TamBindPointType_TAM_BIND_POINT_TYPE_LAG         TamBindPointType = 3
	TamBindPointType_TAM_BIND_POINT_TYPE_VLAN        TamBindPointType = 4
	TamBindPointType_TAM_BIND_POINT_TYPE_SWITCH      TamBindPointType = 5
	TamBindPointType_TAM_BIND_POINT_TYPE_IPG         TamBindPointType = 6
	TamBindPointType_TAM_BIND_POINT_TYPE_BSP         TamBindPointType = 7
)

// Enum value maps for TamBindPointType.
var (
	TamBindPointType_name = map[int32]string{
		0: "TAM_BIND_POINT_TYPE_UNSPECIFIED",
		1: "TAM_BIND_POINT_TYPE_QUEUE",
		2: "TAM_BIND_POINT_TYPE_PORT",
		3: "TAM_BIND_POINT_TYPE_LAG",
		4: "TAM_BIND_POINT_TYPE_VLAN",
		5: "TAM_BIND_POINT_TYPE_SWITCH",
		6: "TAM_BIND_POINT_TYPE_IPG",
		7: "TAM_BIND_POINT_TYPE_BSP",
	}
	TamBindPointType_value = map[string]int32{
		"TAM_BIND_POINT_TYPE_UNSPECIFIED": 0,
		"TAM_BIND_POINT_TYPE_QUEUE":       1,
		"TAM_BIND_POINT_TYPE_PORT":        2,
		"TAM_BIND_POINT_TYPE_LAG":         3,
		"TAM_BIND_POINT_TYPE_VLAN":        4,
		"TAM_BIND_POINT_TYPE_SWITCH":      5,
		"TAM_BIND_POINT_TYPE_IPG":         6,
		"TAM_BIND_POINT_TYPE_BSP":         7,
	}
)

func (x TamBindPointType) Enum() *TamBindPointType {
	p := new(TamBindPointType)
	*p = x
	return p
}

func (x TamBindPointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamBindPointType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[137].Descriptor()
}

func (TamBindPointType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[137]
}

func (x TamBindPointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamBindPointType.Descriptor instead.
func (TamBindPointType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{137}
}

type TamEventThresholdUnit int32

const (
	TamEventThresholdUnit_TAM_EVENT_THRESHOLD_UNIT_UNSPECIFIED TamEventThresholdUnit = 0
	TamEventThresholdUnit_TAM_EVENT_THRESHOLD_UNIT_NANOSEC     TamEventThresholdUnit = 1
	TamEventThresholdUnit_TAM_EVENT_THRESHOLD_UNIT_USEC        TamEventThresholdUnit = 2
	TamEventThresholdUnit_TAM_EVENT_THRESHOLD_UNIT_MSEC        TamEventThresholdUnit = 3
	TamEventThresholdUnit_TAM_EVENT_THRESHOLD_UNIT_PERCENT     TamEventThresholdUnit = 4
	TamEventThresholdUnit_TAM_EVENT_THRESHOLD_UNIT_BYTES       TamEventThresholdUnit = 5
	TamEventThresholdUnit_TAM_EVENT_THRESHOLD_UNIT_PACKETS     TamEventThresholdUnit = 6
	TamEventThresholdUnit_TAM_EVENT_THRESHOLD_UNIT_CELLS       TamEventThresholdUnit = 7
)

// Enum value maps for TamEventThresholdUnit.
var (
	TamEventThresholdUnit_name = map[int32]string{
		0: "TAM_EVENT_THRESHOLD_UNIT_UNSPECIFIED",
		1: "TAM_EVENT_THRESHOLD_UNIT_NANOSEC",
		2: "TAM_EVENT_THRESHOLD_UNIT_USEC",
		3: "TAM_EVENT_THRESHOLD_UNIT_MSEC",
		4: "TAM_EVENT_THRESHOLD_UNIT_PERCENT",
		5: "TAM_EVENT_THRESHOLD_UNIT_BYTES",
		6: "TAM_EVENT_THRESHOLD_UNIT_PACKETS",
		7: "TAM_EVENT_THRESHOLD_UNIT_CELLS",
	}
	TamEventThresholdUnit_value = map[string]int32{
		"TAM_EVENT_THRESHOLD_UNIT_UNSPECIFIED": 0,
		"TAM_EVENT_THRESHOLD_UNIT_NANOSEC":     1,
		"TAM_EVENT_THRESHOLD_UNIT_USEC":        2,
		"TAM_EVENT_THRESHOLD_UNIT_MSEC":        3,
		"TAM_EVENT_THRESHOLD_UNIT_PERCENT":     4,
		"TAM_EVENT_THRESHOLD_UNIT_BYTES":       5,
		"TAM_EVENT_THRESHOLD_UNIT_PACKETS":     6,
		"TAM_EVENT_THRESHOLD_UNIT_CELLS":       7,
	}
)

func (x TamEventThresholdUnit) Enum() *TamEventThresholdUnit {
	p := new(TamEventThresholdUnit)
	*p = x
	return p
}

func (x TamEventThresholdUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamEventThresholdUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[138].Descriptor()
}

func (TamEventThresholdUnit) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[138]
}

func (x TamEventThresholdUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamEventThresholdUnit.Descriptor instead.
func (TamEventThresholdUnit) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{138}
}

type TamEventType int32

const (
	TamEventType_TAM_EVENT_TYPE_UNSPECIFIED          TamEventType = 0
	TamEventType_TAM_EVENT_TYPE_FLOW_STATE           TamEventType = 1
	TamEventType_TAM_EVENT_TYPE_FLOW_WATCHLIST       TamEventType = 2
	TamEventType_TAM_EVENT_TYPE_FLOW_TCPFLAG         TamEventType = 3
	TamEventType_TAM_EVENT_TYPE_QUEUE_THRESHOLD      TamEventType = 4
	TamEventType_TAM_EVENT_TYPE_QUEUE_TAIL_DROP      TamEventType = 5
	TamEventType_TAM_EVENT_TYPE_PACKET_DROP          TamEventType = 6
	TamEventType_TAM_EVENT_TYPE_RESOURCE_UTILIZATION TamEventType = 7
	TamEventType_TAM_EVENT_TYPE_IPG_SHARED           TamEventType = 8
	TamEventType_TAM_EVENT_TYPE_IPG_XOFF_ROOM        TamEventType = 9
	TamEventType_TAM_EVENT_TYPE_BSP                  TamEventType = 10
)

// Enum value maps for TamEventType.
var (
	TamEventType_name = map[int32]string{
		0:  "TAM_EVENT_TYPE_UNSPECIFIED",
		1:  "TAM_EVENT_TYPE_FLOW_STATE",
		2:  "TAM_EVENT_TYPE_FLOW_WATCHLIST",
		3:  "TAM_EVENT_TYPE_FLOW_TCPFLAG",
		4:  "TAM_EVENT_TYPE_QUEUE_THRESHOLD",
		5:  "TAM_EVENT_TYPE_QUEUE_TAIL_DROP",
		6:  "TAM_EVENT_TYPE_PACKET_DROP",
		7:  "TAM_EVENT_TYPE_RESOURCE_UTILIZATION",
		8:  "TAM_EVENT_TYPE_IPG_SHARED",
		9:  "TAM_EVENT_TYPE_IPG_XOFF_ROOM",
		10: "TAM_EVENT_TYPE_BSP",
	}
	TamEventType_value = map[string]int32{
		"TAM_EVENT_TYPE_UNSPECIFIED":          0,
		"TAM_EVENT_TYPE_FLOW_STATE":           1,
		"TAM_EVENT_TYPE_FLOW_WATCHLIST":       2,
		"TAM_EVENT_TYPE_FLOW_TCPFLAG":         3,
		"TAM_EVENT_TYPE_QUEUE_THRESHOLD":      4,
		"TAM_EVENT_TYPE_QUEUE_TAIL_DROP":      5,
		"TAM_EVENT_TYPE_PACKET_DROP":          6,
		"TAM_EVENT_TYPE_RESOURCE_UTILIZATION": 7,
		"TAM_EVENT_TYPE_IPG_SHARED":           8,
		"TAM_EVENT_TYPE_IPG_XOFF_ROOM":        9,
		"TAM_EVENT_TYPE_BSP":                  10,
	}
)

func (x TamEventType) Enum() *TamEventType {
	p := new(TamEventType)
	*p = x
	return p
}

func (x TamEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[139].Descriptor()
}

func (TamEventType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[139]
}

func (x TamEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamEventType.Descriptor instead.
func (TamEventType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{139}
}

type TamIntPresenceType int32

const (
	TamIntPresenceType_TAM_INT_PRESENCE_TYPE_UNSPECIFIED TamIntPresenceType = 0
	TamIntPresenceType_TAM_INT_PRESENCE_TYPE_UNDEFINED   TamIntPresenceType = 1
	TamIntPresenceType_TAM_INT_PRESENCE_TYPE_PB          TamIntPresenceType = 2
	TamIntPresenceType_TAM_INT_PRESENCE_TYPE_L3_PROTOCOL TamIntPresenceType = 3
	TamIntPresenceType_TAM_INT_PRESENCE_TYPE_DSCP        TamIntPresenceType = 4
)

// Enum value maps for TamIntPresenceType.
var (
	TamIntPresenceType_name = map[int32]string{
		0: "TAM_INT_PRESENCE_TYPE_UNSPECIFIED",
		1: "TAM_INT_PRESENCE_TYPE_UNDEFINED",
		2: "TAM_INT_PRESENCE_TYPE_PB",
		3: "TAM_INT_PRESENCE_TYPE_L3_PROTOCOL",
		4: "TAM_INT_PRESENCE_TYPE_DSCP",
	}
	TamIntPresenceType_value = map[string]int32{
		"TAM_INT_PRESENCE_TYPE_UNSPECIFIED": 0,
		"TAM_INT_PRESENCE_TYPE_UNDEFINED":   1,
		"TAM_INT_PRESENCE_TYPE_PB":          2,
		"TAM_INT_PRESENCE_TYPE_L3_PROTOCOL": 3,
		"TAM_INT_PRESENCE_TYPE_DSCP":        4,
	}
)

func (x TamIntPresenceType) Enum() *TamIntPresenceType {
	p := new(TamIntPresenceType)
	*p = x
	return p
}

func (x TamIntPresenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamIntPresenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[140].Descriptor()
}

func (TamIntPresenceType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[140]
}

func (x TamIntPresenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamIntPresenceType.Descriptor instead.
func (TamIntPresenceType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{140}
}

type TamIntType int32

const (
	TamIntType_TAM_INT_TYPE_UNSPECIFIED    TamIntType = 0
	TamIntType_TAM_INT_TYPE_IOAM           TamIntType = 1
	TamIntType_TAM_INT_TYPE_IFA1           TamIntType = 2
	TamIntType_TAM_INT_TYPE_IFA2           TamIntType = 3
	TamIntType_TAM_INT_TYPE_P4_INT_1       TamIntType = 4
	TamIntType_TAM_INT_TYPE_P4_INT_2       TamIntType = 5
	TamIntType_TAM_INT_TYPE_DIRECT_EXPORT  TamIntType = 6
	TamIntType_TAM_INT_TYPE_IFA1_TAILSTAMP TamIntType = 7
)

// Enum value maps for TamIntType.
var (
	TamIntType_name = map[int32]string{
		0: "TAM_INT_TYPE_UNSPECIFIED",
		1: "TAM_INT_TYPE_IOAM",
		2: "TAM_INT_TYPE_IFA1",
		3: "TAM_INT_TYPE_IFA2",
		4: "TAM_INT_TYPE_P4_INT_1",
		5: "TAM_INT_TYPE_P4_INT_2",
		6: "TAM_INT_TYPE_DIRECT_EXPORT",
		7: "TAM_INT_TYPE_IFA1_TAILSTAMP",
	}
	TamIntType_value = map[string]int32{
		"TAM_INT_TYPE_UNSPECIFIED":    0,
		"TAM_INT_TYPE_IOAM":           1,
		"TAM_INT_TYPE_IFA1":           2,
		"TAM_INT_TYPE_IFA2":           3,
		"TAM_INT_TYPE_P4_INT_1":       4,
		"TAM_INT_TYPE_P4_INT_2":       5,
		"TAM_INT_TYPE_DIRECT_EXPORT":  6,
		"TAM_INT_TYPE_IFA1_TAILSTAMP": 7,
	}
)

func (x TamIntType) Enum() *TamIntType {
	p := new(TamIntType)
	*p = x
	return p
}

func (x TamIntType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamIntType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[141].Descriptor()
}

func (TamIntType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[141]
}

func (x TamIntType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamIntType.Descriptor instead.
func (TamIntType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{141}
}

type TamReportMode int32

const (
	TamReportMode_TAM_REPORT_MODE_UNSPECIFIED TamReportMode = 0
	TamReportMode_TAM_REPORT_MODE_ALL         TamReportMode = 1
	TamReportMode_TAM_REPORT_MODE_BULK        TamReportMode = 2
)

// Enum value maps for TamReportMode.
var (
	TamReportMode_name = map[int32]string{
		0: "TAM_REPORT_MODE_UNSPECIFIED",
		1: "TAM_REPORT_MODE_ALL",
		2: "TAM_REPORT_MODE_BULK",
	}
	TamReportMode_value = map[string]int32{
		"TAM_REPORT_MODE_UNSPECIFIED": 0,
		"TAM_REPORT_MODE_ALL":         1,
		"TAM_REPORT_MODE_BULK":        2,
	}
)

func (x TamReportMode) Enum() *TamReportMode {
	p := new(TamReportMode)
	*p = x
	return p
}

func (x TamReportMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamReportMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[142].Descriptor()
}

func (TamReportMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[142]
}

func (x TamReportMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamReportMode.Descriptor instead.
func (TamReportMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{142}
}

type TamReportType int32

const (
	TamReportType_TAM_REPORT_TYPE_UNSPECIFIED TamReportType = 0
	TamReportType_TAM_REPORT_TYPE_SFLOW       TamReportType = 1
	TamReportType_TAM_REPORT_TYPE_IPFIX       TamReportType = 2
	TamReportType_TAM_REPORT_TYPE_PROTO       TamReportType = 3
	TamReportType_TAM_REPORT_TYPE_THRIFT      TamReportType = 4
	TamReportType_TAM_REPORT_TYPE_JSON        TamReportType = 5
	TamReportType_TAM_REPORT_TYPE_P4_EXTN     TamReportType = 6
	TamReportType_TAM_REPORT_TYPE_HISTOGRAM   TamReportType = 7
	TamReportType_TAM_REPORT_TYPE_VENDOR_EXTN TamReportType = 8
)

// Enum value maps for TamReportType.
var (
	TamReportType_name = map[int32]string{
		0: "TAM_REPORT_TYPE_UNSPECIFIED",
		1: "TAM_REPORT_TYPE_SFLOW",
		2: "TAM_REPORT_TYPE_IPFIX",
		3: "TAM_REPORT_TYPE_PROTO",
		4: "TAM_REPORT_TYPE_THRIFT",
		5: "TAM_REPORT_TYPE_JSON",
		6: "TAM_REPORT_TYPE_P4_EXTN",
		7: "TAM_REPORT_TYPE_HISTOGRAM",
		8: "TAM_REPORT_TYPE_VENDOR_EXTN",
	}
	TamReportType_value = map[string]int32{
		"TAM_REPORT_TYPE_UNSPECIFIED": 0,
		"TAM_REPORT_TYPE_SFLOW":       1,
		"TAM_REPORT_TYPE_IPFIX":       2,
		"TAM_REPORT_TYPE_PROTO":       3,
		"TAM_REPORT_TYPE_THRIFT":      4,
		"TAM_REPORT_TYPE_JSON":        5,
		"TAM_REPORT_TYPE_P4_EXTN":     6,
		"TAM_REPORT_TYPE_HISTOGRAM":   7,
		"TAM_REPORT_TYPE_VENDOR_EXTN": 8,
	}
)

func (x TamReportType) Enum() *TamReportType {
	p := new(TamReportType)
	*p = x
	return p
}

func (x TamReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[143].Descriptor()
}

func (TamReportType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[143]
}

func (x TamReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamReportType.Descriptor instead.
func (TamReportType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{143}
}

type TamReportingUnit int32

const (
	TamReportingUnit_TAM_REPORTING_UNIT_UNSPECIFIED TamReportingUnit = 0
	TamReportingUnit_TAM_REPORTING_UNIT_SEC         TamReportingUnit = 1
	TamReportingUnit_TAM_REPORTING_UNIT_MINUTE      TamReportingUnit = 2
	TamReportingUnit_TAM_REPORTING_UNIT_HOUR        TamReportingUnit = 3
	TamReportingUnit_TAM_REPORTING_UNIT_DAY         TamReportingUnit = 4
)

// Enum value maps for TamReportingUnit.
var (
	TamReportingUnit_name = map[int32]string{
		0: "TAM_REPORTING_UNIT_UNSPECIFIED",
		1: "TAM_REPORTING_UNIT_SEC",
		2: "TAM_REPORTING_UNIT_MINUTE",
		3: "TAM_REPORTING_UNIT_HOUR",
		4: "TAM_REPORTING_UNIT_DAY",
	}
	TamReportingUnit_value = map[string]int32{
		"TAM_REPORTING_UNIT_UNSPECIFIED": 0,
		"TAM_REPORTING_UNIT_SEC":         1,
		"TAM_REPORTING_UNIT_MINUTE":      2,
		"TAM_REPORTING_UNIT_HOUR":        3,
		"TAM_REPORTING_UNIT_DAY":         4,
	}
)

func (x TamReportingUnit) Enum() *TamReportingUnit {
	p := new(TamReportingUnit)
	*p = x
	return p
}

func (x TamReportingUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamReportingUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[144].Descriptor()
}

func (TamReportingUnit) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[144]
}

func (x TamReportingUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamReportingUnit.Descriptor instead.
func (TamReportingUnit) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{144}
}

type TamTelMathFuncType int32

const (
	TamTelMathFuncType_TAM_TEL_MATH_FUNC_TYPE_UNSPECIFIED    TamTelMathFuncType = 0
	TamTelMathFuncType_TAM_TEL_MATH_FUNC_TYPE_NONE           TamTelMathFuncType = 1
	TamTelMathFuncType_TAM_TEL_MATH_FUNC_TYPE_GEO_MEAN       TamTelMathFuncType = 2
	TamTelMathFuncType_TAM_TEL_MATH_FUNC_TYPE_ALGEBRAIC_MEAN TamTelMathFuncType = 3
	TamTelMathFuncType_TAM_TEL_MATH_FUNC_TYPE_AVERAGE        TamTelMathFuncType = 4
	TamTelMathFuncType_TAM_TEL_MATH_FUNC_TYPE_MODE           TamTelMathFuncType = 5
	TamTelMathFuncType_TAM_TEL_MATH_FUNC_TYPE_RATE           TamTelMathFuncType = 6
)

// Enum value maps for TamTelMathFuncType.
var (
	TamTelMathFuncType_name = map[int32]string{
		0: "TAM_TEL_MATH_FUNC_TYPE_UNSPECIFIED",
		1: "TAM_TEL_MATH_FUNC_TYPE_NONE",
		2: "TAM_TEL_MATH_FUNC_TYPE_GEO_MEAN",
		3: "TAM_TEL_MATH_FUNC_TYPE_ALGEBRAIC_MEAN",
		4: "TAM_TEL_MATH_FUNC_TYPE_AVERAGE",
		5: "TAM_TEL_MATH_FUNC_TYPE_MODE",
		6: "TAM_TEL_MATH_FUNC_TYPE_RATE",
	}
	TamTelMathFuncType_value = map[string]int32{
		"TAM_TEL_MATH_FUNC_TYPE_UNSPECIFIED":    0,
		"TAM_TEL_MATH_FUNC_TYPE_NONE":           1,
		"TAM_TEL_MATH_FUNC_TYPE_GEO_MEAN":       2,
		"TAM_TEL_MATH_FUNC_TYPE_ALGEBRAIC_MEAN": 3,
		"TAM_TEL_MATH_FUNC_TYPE_AVERAGE":        4,
		"TAM_TEL_MATH_FUNC_TYPE_MODE":           5,
		"TAM_TEL_MATH_FUNC_TYPE_RATE":           6,
	}
)

func (x TamTelMathFuncType) Enum() *TamTelMathFuncType {
	p := new(TamTelMathFuncType)
	*p = x
	return p
}

func (x TamTelMathFuncType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamTelMathFuncType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[145].Descriptor()
}

func (TamTelMathFuncType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[145]
}

func (x TamTelMathFuncType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamTelMathFuncType.Descriptor instead.
func (TamTelMathFuncType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{145}
}

type TamTelemetryType int32

const (
	TamTelemetryType_TAM_TELEMETRY_TYPE_UNSPECIFIED TamTelemetryType = 0
	TamTelemetryType_TAM_TELEMETRY_TYPE_NE          TamTelemetryType = 1
	TamTelemetryType_TAM_TELEMETRY_TYPE_SWITCH      TamTelemetryType = 2
	TamTelemetryType_TAM_TELEMETRY_TYPE_FABRIC      TamTelemetryType = 3
	TamTelemetryType_TAM_TELEMETRY_TYPE_FLOW        TamTelemetryType = 4
	TamTelemetryType_TAM_TELEMETRY_TYPE_INT         TamTelemetryType = 5
)

// Enum value maps for TamTelemetryType.
var (
	TamTelemetryType_name = map[int32]string{
		0: "TAM_TELEMETRY_TYPE_UNSPECIFIED",
		1: "TAM_TELEMETRY_TYPE_NE",
		2: "TAM_TELEMETRY_TYPE_SWITCH",
		3: "TAM_TELEMETRY_TYPE_FABRIC",
		4: "TAM_TELEMETRY_TYPE_FLOW",
		5: "TAM_TELEMETRY_TYPE_INT",
	}
	TamTelemetryType_value = map[string]int32{
		"TAM_TELEMETRY_TYPE_UNSPECIFIED": 0,
		"TAM_TELEMETRY_TYPE_NE":          1,
		"TAM_TELEMETRY_TYPE_SWITCH":      2,
		"TAM_TELEMETRY_TYPE_FABRIC":      3,
		"TAM_TELEMETRY_TYPE_FLOW":        4,
		"TAM_TELEMETRY_TYPE_INT":         5,
	}
)

func (x TamTelemetryType) Enum() *TamTelemetryType {
	p := new(TamTelemetryType)
	*p = x
	return p
}

func (x TamTelemetryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamTelemetryType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[146].Descriptor()
}

func (TamTelemetryType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[146]
}

func (x TamTelemetryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamTelemetryType.Descriptor instead.
func (TamTelemetryType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{146}
}

type TamTransportAuthType int32

const (
	TamTransportAuthType_TAM_TRANSPORT_AUTH_TYPE_UNSPECIFIED TamTransportAuthType = 0
	TamTransportAuthType_TAM_TRANSPORT_AUTH_TYPE_NONE        TamTransportAuthType = 1
	TamTransportAuthType_TAM_TRANSPORT_AUTH_TYPE_SSL         TamTransportAuthType = 2
	TamTransportAuthType_TAM_TRANSPORT_AUTH_TYPE_TLS         TamTransportAuthType = 3
)

// Enum value maps for TamTransportAuthType.
var (
	TamTransportAuthType_name = map[int32]string{
		0: "TAM_TRANSPORT_AUTH_TYPE_UNSPECIFIED",
		1: "TAM_TRANSPORT_AUTH_TYPE_NONE",
		2: "TAM_TRANSPORT_AUTH_TYPE_SSL",
		3: "TAM_TRANSPORT_AUTH_TYPE_TLS",
	}
	TamTransportAuthType_value = map[string]int32{
		"TAM_TRANSPORT_AUTH_TYPE_UNSPECIFIED": 0,
		"TAM_TRANSPORT_AUTH_TYPE_NONE":        1,
		"TAM_TRANSPORT_AUTH_TYPE_SSL":         2,
		"TAM_TRANSPORT_AUTH_TYPE_TLS":         3,
	}
)

func (x TamTransportAuthType) Enum() *TamTransportAuthType {
	p := new(TamTransportAuthType)
	*p = x
	return p
}

func (x TamTransportAuthType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamTransportAuthType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[147].Descriptor()
}

func (TamTransportAuthType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[147]
}

func (x TamTransportAuthType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamTransportAuthType.Descriptor instead.
func (TamTransportAuthType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{147}
}

type TamTransportType int32

const (
	TamTransportType_TAM_TRANSPORT_TYPE_UNSPECIFIED TamTransportType = 0
	TamTransportType_TAM_TRANSPORT_TYPE_NONE        TamTransportType = 1
	TamTransportType_TAM_TRANSPORT_TYPE_TCP         TamTransportType = 2
	TamTransportType_TAM_TRANSPORT_TYPE_UDP         TamTransportType = 3
	TamTransportType_TAM_TRANSPORT_TYPE_GRPC        TamTransportType = 4
	TamTransportType_TAM_TRANSPORT_TYPE_MIRROR      TamTransportType = 5
)

// Enum value maps for TamTransportType.
var (
	TamTransportType_name = map[int32]string{
		0: "TAM_TRANSPORT_TYPE_UNSPECIFIED",
		1: "TAM_TRANSPORT_TYPE_NONE",
		2: "TAM_TRANSPORT_TYPE_TCP",
		3: "TAM_TRANSPORT_TYPE_UDP",
		4: "TAM_TRANSPORT_TYPE_GRPC",
		5: "TAM_TRANSPORT_TYPE_MIRROR",
	}
	TamTransportType_value = map[string]int32{
		"TAM_TRANSPORT_TYPE_UNSPECIFIED": 0,
		"TAM_TRANSPORT_TYPE_NONE":        1,
		"TAM_TRANSPORT_TYPE_TCP":         2,
		"TAM_TRANSPORT_TYPE_UDP":         3,
		"TAM_TRANSPORT_TYPE_GRPC":        4,
		"TAM_TRANSPORT_TYPE_MIRROR":      5,
	}
)

func (x TamTransportType) Enum() *TamTransportType {
	p := new(TamTransportType)
	*p = x
	return p
}

func (x TamTransportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TamTransportType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[148].Descriptor()
}

func (TamTransportType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[148]
}

func (x TamTransportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TamTransportType.Descriptor instead.
func (TamTransportType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{148}
}

type TlvType int32

const (
	TlvType_TLV_TYPE_UNSPECIFIED TlvType = 0
	TlvType_TLV_TYPE_INGRESS     TlvType = 1
	TlvType_TLV_TYPE_EGRESS      TlvType = 2
	TlvType_TLV_TYPE_OPAQUE      TlvType = 3
	TlvType_TLV_TYPE_HMAC        TlvType = 4
)

// Enum value maps for TlvType.
var (
	TlvType_name = map[int32]string{
		0: "TLV_TYPE_UNSPECIFIED",
		1: "TLV_TYPE_INGRESS",
		2: "TLV_TYPE_EGRESS",
		3: "TLV_TYPE_OPAQUE",
		4: "TLV_TYPE_HMAC",
	}
	TlvType_value = map[string]int32{
		"TLV_TYPE_UNSPECIFIED": 0,
		"TLV_TYPE_INGRESS":     1,
		"TLV_TYPE_EGRESS":      2,
		"TLV_TYPE_OPAQUE":      3,
		"TLV_TYPE_HMAC":        4,
	}
)

func (x TlvType) Enum() *TlvType {
	p := new(TlvType)
	*p = x
	return p
}

func (x TlvType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TlvType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[149].Descriptor()
}

func (TlvType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[149]
}

func (x TlvType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TlvType.Descriptor instead.
func (TlvType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{149}
}

type TunnelDecapEcnMode int32

const (
	TunnelDecapEcnMode_TUNNEL_DECAP_ECN_MODE_UNSPECIFIED     TunnelDecapEcnMode = 0
	TunnelDecapEcnMode_TUNNEL_DECAP_ECN_MODE_STANDARD        TunnelDecapEcnMode = 1
	TunnelDecapEcnMode_TUNNEL_DECAP_ECN_MODE_COPY_FROM_OUTER TunnelDecapEcnMode = 2
	TunnelDecapEcnMode_TUNNEL_DECAP_ECN_MODE_USER_DEFINED    TunnelDecapEcnMode = 3
)

// Enum value maps for TunnelDecapEcnMode.
var (
	TunnelDecapEcnMode_name = map[int32]string{
		0: "TUNNEL_DECAP_ECN_MODE_UNSPECIFIED",
		1: "TUNNEL_DECAP_ECN_MODE_STANDARD",
		2: "TUNNEL_DECAP_ECN_MODE_COPY_FROM_OUTER",
		3: "TUNNEL_DECAP_ECN_MODE_USER_DEFINED",
	}
	TunnelDecapEcnMode_value = map[string]int32{
		"TUNNEL_DECAP_ECN_MODE_UNSPECIFIED":     0,
		"TUNNEL_DECAP_ECN_MODE_STANDARD":        1,
		"TUNNEL_DECAP_ECN_MODE_COPY_FROM_OUTER": 2,
		"TUNNEL_DECAP_ECN_MODE_USER_DEFINED":    3,
	}
)

func (x TunnelDecapEcnMode) Enum() *TunnelDecapEcnMode {
	p := new(TunnelDecapEcnMode)
	*p = x
	return p
}

func (x TunnelDecapEcnMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelDecapEcnMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[150].Descriptor()
}

func (TunnelDecapEcnMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[150]
}

func (x TunnelDecapEcnMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelDecapEcnMode.Descriptor instead.
func (TunnelDecapEcnMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{150}
}

type TunnelDscpMode int32

const (
	TunnelDscpMode_TUNNEL_DSCP_MODE_UNSPECIFIED   TunnelDscpMode = 0
	TunnelDscpMode_TUNNEL_DSCP_MODE_UNIFORM_MODEL TunnelDscpMode = 1
	TunnelDscpMode_TUNNEL_DSCP_MODE_PIPE_MODEL    TunnelDscpMode = 2
)

// Enum value maps for TunnelDscpMode.
var (
	TunnelDscpMode_name = map[int32]string{
		0: "TUNNEL_DSCP_MODE_UNSPECIFIED",
		1: "TUNNEL_DSCP_MODE_UNIFORM_MODEL",
		2: "TUNNEL_DSCP_MODE_PIPE_MODEL",
	}
	TunnelDscpMode_value = map[string]int32{
		"TUNNEL_DSCP_MODE_UNSPECIFIED":   0,
		"TUNNEL_DSCP_MODE_UNIFORM_MODEL": 1,
		"TUNNEL_DSCP_MODE_PIPE_MODEL":    2,
	}
)

func (x TunnelDscpMode) Enum() *TunnelDscpMode {
	p := new(TunnelDscpMode)
	*p = x
	return p
}

func (x TunnelDscpMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelDscpMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[151].Descriptor()
}

func (TunnelDscpMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[151]
}

func (x TunnelDscpMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelDscpMode.Descriptor instead.
func (TunnelDscpMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{151}
}

type TunnelEncapEcnMode int32

const (
	TunnelEncapEcnMode_TUNNEL_ENCAP_ECN_MODE_UNSPECIFIED  TunnelEncapEcnMode = 0
	TunnelEncapEcnMode_TUNNEL_ENCAP_ECN_MODE_STANDARD     TunnelEncapEcnMode = 1
	TunnelEncapEcnMode_TUNNEL_ENCAP_ECN_MODE_USER_DEFINED TunnelEncapEcnMode = 2
)

// Enum value maps for TunnelEncapEcnMode.
var (
	TunnelEncapEcnMode_name = map[int32]string{
		0: "TUNNEL_ENCAP_ECN_MODE_UNSPECIFIED",
		1: "TUNNEL_ENCAP_ECN_MODE_STANDARD",
		2: "TUNNEL_ENCAP_ECN_MODE_USER_DEFINED",
	}
	TunnelEncapEcnMode_value = map[string]int32{
		"TUNNEL_ENCAP_ECN_MODE_UNSPECIFIED":  0,
		"TUNNEL_ENCAP_ECN_MODE_STANDARD":     1,
		"TUNNEL_ENCAP_ECN_MODE_USER_DEFINED": 2,
	}
)

func (x TunnelEncapEcnMode) Enum() *TunnelEncapEcnMode {
	p := new(TunnelEncapEcnMode)
	*p = x
	return p
}

func (x TunnelEncapEcnMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelEncapEcnMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[152].Descriptor()
}

func (TunnelEncapEcnMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[152]
}

func (x TunnelEncapEcnMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelEncapEcnMode.Descriptor instead.
func (TunnelEncapEcnMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{152}
}

type TunnelMapType int32

const (
	TunnelMapType_TUNNEL_MAP_TYPE_UNSPECIFIED              TunnelMapType = 0
	TunnelMapType_TUNNEL_MAP_TYPE_OECN_TO_UECN             TunnelMapType = 1
	TunnelMapType_TUNNEL_MAP_TYPE_UECN_OECN_TO_OECN        TunnelMapType = 2
	TunnelMapType_TUNNEL_MAP_TYPE_VNI_TO_VLAN_ID           TunnelMapType = 3
	TunnelMapType_TUNNEL_MAP_TYPE_VLAN_ID_TO_VNI           TunnelMapType = 4
	TunnelMapType_TUNNEL_MAP_TYPE_VNI_TO_BRIDGE_IF         TunnelMapType = 5
	TunnelMapType_TUNNEL_MAP_TYPE_BRIDGE_IF_TO_VNI         TunnelMapType = 6
	TunnelMapType_TUNNEL_MAP_TYPE_VNI_TO_VIRTUAL_ROUTER_ID TunnelMapType = 7
	TunnelMapType_TUNNEL_MAP_TYPE_VIRTUAL_ROUTER_ID_TO_VNI TunnelMapType = 8
	TunnelMapType_TUNNEL_MAP_TYPE_VSID_TO_VLAN_ID          TunnelMapType = 9
	TunnelMapType_TUNNEL_MAP_TYPE_VLAN_ID_TO_VSID          TunnelMapType = 10
	TunnelMapType_TUNNEL_MAP_TYPE_VSID_TO_BRIDGE_IF        TunnelMapType = 11
	TunnelMapType_TUNNEL_MAP_TYPE_BRIDGE_IF_TO_VSID        TunnelMapType = 12
	TunnelMapType_TUNNEL_MAP_TYPE_CUSTOM_RANGE_BASE        TunnelMapType = 13
)

// Enum value maps for TunnelMapType.
var (
	TunnelMapType_name = map[int32]string{
		0:  "TUNNEL_MAP_TYPE_UNSPECIFIED",
		1:  "TUNNEL_MAP_TYPE_OECN_TO_UECN",
		2:  "TUNNEL_MAP_TYPE_UECN_OECN_TO_OECN",
		3:  "TUNNEL_MAP_TYPE_VNI_TO_VLAN_ID",
		4:  "TUNNEL_MAP_TYPE_VLAN_ID_TO_VNI",
		5:  "TUNNEL_MAP_TYPE_VNI_TO_BRIDGE_IF",
		6:  "TUNNEL_MAP_TYPE_BRIDGE_IF_TO_VNI",
		7:  "TUNNEL_MAP_TYPE_VNI_TO_VIRTUAL_ROUTER_ID",
		8:  "TUNNEL_MAP_TYPE_VIRTUAL_ROUTER_ID_TO_VNI",
		9:  "TUNNEL_MAP_TYPE_VSID_TO_VLAN_ID",
		10: "TUNNEL_MAP_TYPE_VLAN_ID_TO_VSID",
		11: "TUNNEL_MAP_TYPE_VSID_TO_BRIDGE_IF",
		12: "TUNNEL_MAP_TYPE_BRIDGE_IF_TO_VSID",
		13: "TUNNEL_MAP_TYPE_CUSTOM_RANGE_BASE",
	}
	TunnelMapType_value = map[string]int32{
		"TUNNEL_MAP_TYPE_UNSPECIFIED":              0,
		"TUNNEL_MAP_TYPE_OECN_TO_UECN":             1,
		"TUNNEL_MAP_TYPE_UECN_OECN_TO_OECN":        2,
		"TUNNEL_MAP_TYPE_VNI_TO_VLAN_ID":           3,
		"TUNNEL_MAP_TYPE_VLAN_ID_TO_VNI":           4,
		"TUNNEL_MAP_TYPE_VNI_TO_BRIDGE_IF":         5,
		"TUNNEL_MAP_TYPE_BRIDGE_IF_TO_VNI":         6,
		"TUNNEL_MAP_TYPE_VNI_TO_VIRTUAL_ROUTER_ID": 7,
		"TUNNEL_MAP_TYPE_VIRTUAL_ROUTER_ID_TO_VNI": 8,
		"TUNNEL_MAP_TYPE_VSID_TO_VLAN_ID":          9,
		"TUNNEL_MAP_TYPE_VLAN_ID_TO_VSID":          10,
		"TUNNEL_MAP_TYPE_VSID_TO_BRIDGE_IF":        11,
		"TUNNEL_MAP_TYPE_BRIDGE_IF_TO_VSID":        12,
		"TUNNEL_MAP_TYPE_CUSTOM_RANGE_BASE":        13,
	}
)

func (x TunnelMapType) Enum() *TunnelMapType {
	p := new(TunnelMapType)
	*p = x
	return p
}

func (x TunnelMapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelMapType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[153].Descriptor()
}

func (TunnelMapType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[153]
}

func (x TunnelMapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelMapType.Descriptor instead.
func (TunnelMapType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{153}
}

type TunnelPeerMode int32

const (
	TunnelPeerMode_TUNNEL_PEER_MODE_UNSPECIFIED TunnelPeerMode = 0
	TunnelPeerMode_TUNNEL_PEER_MODE_P2P         TunnelPeerMode = 1
	TunnelPeerMode_TUNNEL_PEER_MODE_P2MP        TunnelPeerMode = 2
)

// Enum value maps for TunnelPeerMode.
var (
	TunnelPeerMode_name = map[int32]string{
		0: "TUNNEL_PEER_MODE_UNSPECIFIED",
		1: "TUNNEL_PEER_MODE_P2P",
		2: "TUNNEL_PEER_MODE_P2MP",
	}
	TunnelPeerMode_value = map[string]int32{
		"TUNNEL_PEER_MODE_UNSPECIFIED": 0,
		"TUNNEL_PEER_MODE_P2P":         1,
		"TUNNEL_PEER_MODE_P2MP":        2,
	}
)

func (x TunnelPeerMode) Enum() *TunnelPeerMode {
	p := new(TunnelPeerMode)
	*p = x
	return p
}

func (x TunnelPeerMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelPeerMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[154].Descriptor()
}

func (TunnelPeerMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[154]
}

func (x TunnelPeerMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelPeerMode.Descriptor instead.
func (TunnelPeerMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{154}
}

type TunnelStat int32

const (
	TunnelStat_TUNNEL_STAT_UNSPECIFIED TunnelStat = 0
	TunnelStat_TUNNEL_STAT_IN_OCTETS   TunnelStat = 1
	TunnelStat_TUNNEL_STAT_IN_PACKETS  TunnelStat = 2
	TunnelStat_TUNNEL_STAT_OUT_OCTETS  TunnelStat = 3
	TunnelStat_TUNNEL_STAT_OUT_PACKETS TunnelStat = 4
)

// Enum value maps for TunnelStat.
var (
	TunnelStat_name = map[int32]string{
		0: "TUNNEL_STAT_UNSPECIFIED",
		1: "TUNNEL_STAT_IN_OCTETS",
		2: "TUNNEL_STAT_IN_PACKETS",
		3: "TUNNEL_STAT_OUT_OCTETS",
		4: "TUNNEL_STAT_OUT_PACKETS",
	}
	TunnelStat_value = map[string]int32{
		"TUNNEL_STAT_UNSPECIFIED": 0,
		"TUNNEL_STAT_IN_OCTETS":   1,
		"TUNNEL_STAT_IN_PACKETS":  2,
		"TUNNEL_STAT_OUT_OCTETS":  3,
		"TUNNEL_STAT_OUT_PACKETS": 4,
	}
)

func (x TunnelStat) Enum() *TunnelStat {
	p := new(TunnelStat)
	*p = x
	return p
}

func (x TunnelStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[155].Descriptor()
}

func (TunnelStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[155]
}

func (x TunnelStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelStat.Descriptor instead.
func (TunnelStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{155}
}

type TunnelTermTableEntryType int32

const (
	TunnelTermTableEntryType_TUNNEL_TERM_TABLE_ENTRY_TYPE_UNSPECIFIED TunnelTermTableEntryType = 0
	TunnelTermTableEntryType_TUNNEL_TERM_TABLE_ENTRY_TYPE_P2P         TunnelTermTableEntryType = 1
	TunnelTermTableEntryType_TUNNEL_TERM_TABLE_ENTRY_TYPE_P2MP        TunnelTermTableEntryType = 2
	TunnelTermTableEntryType_TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2P        TunnelTermTableEntryType = 3
	TunnelTermTableEntryType_TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2MP       TunnelTermTableEntryType = 4
)

// Enum value maps for TunnelTermTableEntryType.
var (
	TunnelTermTableEntryType_name = map[int32]string{
		0: "TUNNEL_TERM_TABLE_ENTRY_TYPE_UNSPECIFIED",
		1: "TUNNEL_TERM_TABLE_ENTRY_TYPE_P2P",
		2: "TUNNEL_TERM_TABLE_ENTRY_TYPE_P2MP",
		3: "TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2P",
		4: "TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2MP",
	}
	TunnelTermTableEntryType_value = map[string]int32{
		"TUNNEL_TERM_TABLE_ENTRY_TYPE_UNSPECIFIED": 0,
		"TUNNEL_TERM_TABLE_ENTRY_TYPE_P2P":         1,
		"TUNNEL_TERM_TABLE_ENTRY_TYPE_P2MP":        2,
		"TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2P":        3,
		"TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2MP":       4,
	}
)

func (x TunnelTermTableEntryType) Enum() *TunnelTermTableEntryType {
	p := new(TunnelTermTableEntryType)
	*p = x
	return p
}

func (x TunnelTermTableEntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelTermTableEntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[156].Descriptor()
}

func (TunnelTermTableEntryType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[156]
}

func (x TunnelTermTableEntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelTermTableEntryType.Descriptor instead.
func (TunnelTermTableEntryType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{156}
}

type TunnelTtlMode int32

const (
	TunnelTtlMode_TUNNEL_TTL_MODE_UNSPECIFIED   TunnelTtlMode = 0
	TunnelTtlMode_TUNNEL_TTL_MODE_UNIFORM_MODEL TunnelTtlMode = 1
	TunnelTtlMode_TUNNEL_TTL_MODE_PIPE_MODEL    TunnelTtlMode = 2
)

// Enum value maps for TunnelTtlMode.
var (
	TunnelTtlMode_name = map[int32]string{
		0: "TUNNEL_TTL_MODE_UNSPECIFIED",
		1: "TUNNEL_TTL_MODE_UNIFORM_MODEL",
		2: "TUNNEL_TTL_MODE_PIPE_MODEL",
	}
	TunnelTtlMode_value = map[string]int32{
		"TUNNEL_TTL_MODE_UNSPECIFIED":   0,
		"TUNNEL_TTL_MODE_UNIFORM_MODEL": 1,
		"TUNNEL_TTL_MODE_PIPE_MODEL":    2,
	}
)

func (x TunnelTtlMode) Enum() *TunnelTtlMode {
	p := new(TunnelTtlMode)
	*p = x
	return p
}

func (x TunnelTtlMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelTtlMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[157].Descriptor()
}

func (TunnelTtlMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[157]
}

func (x TunnelTtlMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelTtlMode.Descriptor instead.
func (TunnelTtlMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{157}
}

type TunnelType int32

const (
	TunnelType_TUNNEL_TYPE_UNSPECIFIED    TunnelType = 0
	TunnelType_TUNNEL_TYPE_IPINIP         TunnelType = 1
	TunnelType_TUNNEL_TYPE_IPINIP_GRE     TunnelType = 2
	TunnelType_TUNNEL_TYPE_VXLAN          TunnelType = 3
	TunnelType_TUNNEL_TYPE_MPLS           TunnelType = 4
	TunnelType_TUNNEL_TYPE_SRV6           TunnelType = 5
	TunnelType_TUNNEL_TYPE_NVGRE          TunnelType = 6
	TunnelType_TUNNEL_TYPE_IPINIP_ESP     TunnelType = 7
	TunnelType_TUNNEL_TYPE_IPINIP_UDP_ESP TunnelType = 8
	TunnelType_TUNNEL_TYPE_VXLAN_UDP_ESP  TunnelType = 9
)

// Enum value maps for TunnelType.
var (
	TunnelType_name = map[int32]string{
		0: "TUNNEL_TYPE_UNSPECIFIED",
		1: "TUNNEL_TYPE_IPINIP",
		2: "TUNNEL_TYPE_IPINIP_GRE",
		3: "TUNNEL_TYPE_VXLAN",
		4: "TUNNEL_TYPE_MPLS",
		5: "TUNNEL_TYPE_SRV6",
		6: "TUNNEL_TYPE_NVGRE",
		7: "TUNNEL_TYPE_IPINIP_ESP",
		8: "TUNNEL_TYPE_IPINIP_UDP_ESP",
		9: "TUNNEL_TYPE_VXLAN_UDP_ESP",
	}
	TunnelType_value = map[string]int32{
		"TUNNEL_TYPE_UNSPECIFIED":    0,
		"TUNNEL_TYPE_IPINIP":         1,
		"TUNNEL_TYPE_IPINIP_GRE":     2,
		"TUNNEL_TYPE_VXLAN":          3,
		"TUNNEL_TYPE_MPLS":           4,
		"TUNNEL_TYPE_SRV6":           5,
		"TUNNEL_TYPE_NVGRE":          6,
		"TUNNEL_TYPE_IPINIP_ESP":     7,
		"TUNNEL_TYPE_IPINIP_UDP_ESP": 8,
		"TUNNEL_TYPE_VXLAN_UDP_ESP":  9,
	}
)

func (x TunnelType) Enum() *TunnelType {
	p := new(TunnelType)
	*p = x
	return p
}

func (x TunnelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[158].Descriptor()
}

func (TunnelType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[158]
}

func (x TunnelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelType.Descriptor instead.
func (TunnelType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{158}
}

type TunnelVxlanUdpSportMode int32

const (
	TunnelVxlanUdpSportMode_TUNNEL_VXLAN_UDP_SPORT_MODE_UNSPECIFIED  TunnelVxlanUdpSportMode = 0
	TunnelVxlanUdpSportMode_TUNNEL_VXLAN_UDP_SPORT_MODE_USER_DEFINED TunnelVxlanUdpSportMode = 1
	TunnelVxlanUdpSportMode_TUNNEL_VXLAN_UDP_SPORT_MODE_EPHEMERAL    TunnelVxlanUdpSportMode = 2
)

// Enum value maps for TunnelVxlanUdpSportMode.
var (
	TunnelVxlanUdpSportMode_name = map[int32]string{
		0: "TUNNEL_VXLAN_UDP_SPORT_MODE_UNSPECIFIED",
		1: "TUNNEL_VXLAN_UDP_SPORT_MODE_USER_DEFINED",
		2: "TUNNEL_VXLAN_UDP_SPORT_MODE_EPHEMERAL",
	}
	TunnelVxlanUdpSportMode_value = map[string]int32{
		"TUNNEL_VXLAN_UDP_SPORT_MODE_UNSPECIFIED":  0,
		"TUNNEL_VXLAN_UDP_SPORT_MODE_USER_DEFINED": 1,
		"TUNNEL_VXLAN_UDP_SPORT_MODE_EPHEMERAL":    2,
	}
)

func (x TunnelVxlanUdpSportMode) Enum() *TunnelVxlanUdpSportMode {
	p := new(TunnelVxlanUdpSportMode)
	*p = x
	return p
}

func (x TunnelVxlanUdpSportMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelVxlanUdpSportMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[159].Descriptor()
}

func (TunnelVxlanUdpSportMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[159]
}

func (x TunnelVxlanUdpSportMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelVxlanUdpSportMode.Descriptor instead.
func (TunnelVxlanUdpSportMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{159}
}

type UdfBase int32

const (
	UdfBase_UDF_BASE_UNSPECIFIED UdfBase = 0
	UdfBase_UDF_BASE_L2          UdfBase = 1
	UdfBase_UDF_BASE_L3          UdfBase = 2
	UdfBase_UDF_BASE_L4          UdfBase = 3
)

// Enum value maps for UdfBase.
var (
	UdfBase_name = map[int32]string{
		0: "UDF_BASE_UNSPECIFIED",
		1: "UDF_BASE_L2",
		2: "UDF_BASE_L3",
		3: "UDF_BASE_L4",
	}
	UdfBase_value = map[string]int32{
		"UDF_BASE_UNSPECIFIED": 0,
		"UDF_BASE_L2":          1,
		"UDF_BASE_L3":          2,
		"UDF_BASE_L4":          3,
	}
)

func (x UdfBase) Enum() *UdfBase {
	p := new(UdfBase)
	*p = x
	return p
}

func (x UdfBase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UdfBase) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[160].Descriptor()
}

func (UdfBase) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[160]
}

func (x UdfBase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UdfBase.Descriptor instead.
func (UdfBase) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{160}
}

type UdfGroupType int32

const (
	UdfGroupType_UDF_GROUP_TYPE_UNSPECIFIED UdfGroupType = 0
	UdfGroupType_UDF_GROUP_TYPE_START       UdfGroupType = 1
	UdfGroupType_UDF_GROUP_TYPE_GENERIC     UdfGroupType = 2
	UdfGroupType_UDF_GROUP_TYPE_HASH        UdfGroupType = 3
	UdfGroupType_UDF_GROUP_TYPE_END         UdfGroupType = 4
)

// Enum value maps for UdfGroupType.
var (
	UdfGroupType_name = map[int32]string{
		0: "UDF_GROUP_TYPE_UNSPECIFIED",
		1: "UDF_GROUP_TYPE_START",
		2: "UDF_GROUP_TYPE_GENERIC",
		3: "UDF_GROUP_TYPE_HASH",
		4: "UDF_GROUP_TYPE_END",
	}
	UdfGroupType_value = map[string]int32{
		"UDF_GROUP_TYPE_UNSPECIFIED": 0,
		"UDF_GROUP_TYPE_START":       1,
		"UDF_GROUP_TYPE_GENERIC":     2,
		"UDF_GROUP_TYPE_HASH":        3,
		"UDF_GROUP_TYPE_END":         4,
	}
)

func (x UdfGroupType) Enum() *UdfGroupType {
	p := new(UdfGroupType)
	*p = x
	return p
}

func (x UdfGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UdfGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[161].Descriptor()
}

func (UdfGroupType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[161]
}

func (x UdfGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UdfGroupType.Descriptor instead.
func (UdfGroupType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{161}
}

type VlanFloodControlType int32

const (
	VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED VlanFloodControlType = 0
	VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_ALL         VlanFloodControlType = 1
	VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_NONE        VlanFloodControlType = 2
	VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_L2MC_GROUP  VlanFloodControlType = 3
	VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_COMBINED    VlanFloodControlType = 4
)

// Enum value maps for VlanFloodControlType.
var (
	VlanFloodControlType_name = map[int32]string{
		0: "VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED",
		1: "VLAN_FLOOD_CONTROL_TYPE_ALL",
		2: "VLAN_FLOOD_CONTROL_TYPE_NONE",
		3: "VLAN_FLOOD_CONTROL_TYPE_L2MC_GROUP",
		4: "VLAN_FLOOD_CONTROL_TYPE_COMBINED",
	}
	VlanFloodControlType_value = map[string]int32{
		"VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED": 0,
		"VLAN_FLOOD_CONTROL_TYPE_ALL":         1,
		"VLAN_FLOOD_CONTROL_TYPE_NONE":        2,
		"VLAN_FLOOD_CONTROL_TYPE_L2MC_GROUP":  3,
		"VLAN_FLOOD_CONTROL_TYPE_COMBINED":    4,
	}
)

func (x VlanFloodControlType) Enum() *VlanFloodControlType {
	p := new(VlanFloodControlType)
	*p = x
	return p
}

func (x VlanFloodControlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VlanFloodControlType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[162].Descriptor()
}

func (VlanFloodControlType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[162]
}

func (x VlanFloodControlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VlanFloodControlType.Descriptor instead.
func (VlanFloodControlType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{162}
}

type VlanMcastLookupKeyType int32

const (
	VlanMcastLookupKeyType_VLAN_MCAST_LOOKUP_KEY_TYPE_UNSPECIFIED VlanMcastLookupKeyType = 0
	VlanMcastLookupKeyType_VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA      VlanMcastLookupKeyType = 1
	VlanMcastLookupKeyType_VLAN_MCAST_LOOKUP_KEY_TYPE_XG          VlanMcastLookupKeyType = 2
	VlanMcastLookupKeyType_VLAN_MCAST_LOOKUP_KEY_TYPE_SG          VlanMcastLookupKeyType = 3
	VlanMcastLookupKeyType_VLAN_MCAST_LOOKUP_KEY_TYPE_XG_AND_SG   VlanMcastLookupKeyType = 4
)

// Enum value maps for VlanMcastLookupKeyType.
var (
	VlanMcastLookupKeyType_name = map[int32]string{
		0: "VLAN_MCAST_LOOKUP_KEY_TYPE_UNSPECIFIED",
		1: "VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA",
		2: "VLAN_MCAST_LOOKUP_KEY_TYPE_XG",
		3: "VLAN_MCAST_LOOKUP_KEY_TYPE_SG",
		4: "VLAN_MCAST_LOOKUP_KEY_TYPE_XG_AND_SG",
	}
	VlanMcastLookupKeyType_value = map[string]int32{
		"VLAN_MCAST_LOOKUP_KEY_TYPE_UNSPECIFIED": 0,
		"VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA":      1,
		"VLAN_MCAST_LOOKUP_KEY_TYPE_XG":          2,
		"VLAN_MCAST_LOOKUP_KEY_TYPE_SG":          3,
		"VLAN_MCAST_LOOKUP_KEY_TYPE_XG_AND_SG":   4,
	}
)

func (x VlanMcastLookupKeyType) Enum() *VlanMcastLookupKeyType {
	p := new(VlanMcastLookupKeyType)
	*p = x
	return p
}

func (x VlanMcastLookupKeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VlanMcastLookupKeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[163].Descriptor()
}

func (VlanMcastLookupKeyType) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[163]
}

func (x VlanMcastLookupKeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VlanMcastLookupKeyType.Descriptor instead.
func (VlanMcastLookupKeyType) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{163}
}

type VlanStat int32

const (
	VlanStat_VLAN_STAT_UNSPECIFIED        VlanStat = 0
	VlanStat_VLAN_STAT_IN_OCTETS          VlanStat = 1
	VlanStat_VLAN_STAT_IN_PACKETS         VlanStat = 2
	VlanStat_VLAN_STAT_IN_UCAST_PKTS      VlanStat = 3
	VlanStat_VLAN_STAT_IN_NON_UCAST_PKTS  VlanStat = 4
	VlanStat_VLAN_STAT_IN_DISCARDS        VlanStat = 5
	VlanStat_VLAN_STAT_IN_ERRORS          VlanStat = 6
	VlanStat_VLAN_STAT_IN_UNKNOWN_PROTOS  VlanStat = 7
	VlanStat_VLAN_STAT_OUT_OCTETS         VlanStat = 8
	VlanStat_VLAN_STAT_OUT_PACKETS        VlanStat = 9
	VlanStat_VLAN_STAT_OUT_UCAST_PKTS     VlanStat = 10
	VlanStat_VLAN_STAT_OUT_NON_UCAST_PKTS VlanStat = 11
	VlanStat_VLAN_STAT_OUT_DISCARDS       VlanStat = 12
	VlanStat_VLAN_STAT_OUT_ERRORS         VlanStat = 13
	VlanStat_VLAN_STAT_OUT_QLEN           VlanStat = 14
)

// Enum value maps for VlanStat.
var (
	VlanStat_name = map[int32]string{
		0:  "VLAN_STAT_UNSPECIFIED",
		1:  "VLAN_STAT_IN_OCTETS",
		2:  "VLAN_STAT_IN_PACKETS",
		3:  "VLAN_STAT_IN_UCAST_PKTS",
		4:  "VLAN_STAT_IN_NON_UCAST_PKTS",
		5:  "VLAN_STAT_IN_DISCARDS",
		6:  "VLAN_STAT_IN_ERRORS",
		7:  "VLAN_STAT_IN_UNKNOWN_PROTOS",
		8:  "VLAN_STAT_OUT_OCTETS",
		9:  "VLAN_STAT_OUT_PACKETS",
		10: "VLAN_STAT_OUT_UCAST_PKTS",
		11: "VLAN_STAT_OUT_NON_UCAST_PKTS",
		12: "VLAN_STAT_OUT_DISCARDS",
		13: "VLAN_STAT_OUT_ERRORS",
		14: "VLAN_STAT_OUT_QLEN",
	}
	VlanStat_value = map[string]int32{
		"VLAN_STAT_UNSPECIFIED":        0,
		"VLAN_STAT_IN_OCTETS":          1,
		"VLAN_STAT_IN_PACKETS":         2,
		"VLAN_STAT_IN_UCAST_PKTS":      3,
		"VLAN_STAT_IN_NON_UCAST_PKTS":  4,
		"VLAN_STAT_IN_DISCARDS":        5,
		"VLAN_STAT_IN_ERRORS":          6,
		"VLAN_STAT_IN_UNKNOWN_PROTOS":  7,
		"VLAN_STAT_OUT_OCTETS":         8,
		"VLAN_STAT_OUT_PACKETS":        9,
		"VLAN_STAT_OUT_UCAST_PKTS":     10,
		"VLAN_STAT_OUT_NON_UCAST_PKTS": 11,
		"VLAN_STAT_OUT_DISCARDS":       12,
		"VLAN_STAT_OUT_ERRORS":         13,
		"VLAN_STAT_OUT_QLEN":           14,
	}
)

func (x VlanStat) Enum() *VlanStat {
	p := new(VlanStat)
	*p = x
	return p
}

func (x VlanStat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VlanStat) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[164].Descriptor()
}

func (VlanStat) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[164]
}

func (x VlanStat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VlanStat.Descriptor instead.
func (VlanStat) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{164}
}

type VlanTaggingMode int32

const (
	VlanTaggingMode_VLAN_TAGGING_MODE_UNSPECIFIED     VlanTaggingMode = 0
	VlanTaggingMode_VLAN_TAGGING_MODE_UNTAGGED        VlanTaggingMode = 1
	VlanTaggingMode_VLAN_TAGGING_MODE_TAGGED          VlanTaggingMode = 2
	VlanTaggingMode_VLAN_TAGGING_MODE_PRIORITY_TAGGED VlanTaggingMode = 3
)

// Enum value maps for VlanTaggingMode.
var (
	VlanTaggingMode_name = map[int32]string{
		0: "VLAN_TAGGING_MODE_UNSPECIFIED",
		1: "VLAN_TAGGING_MODE_UNTAGGED",
		2: "VLAN_TAGGING_MODE_TAGGED",
		3: "VLAN_TAGGING_MODE_PRIORITY_TAGGED",
	}
	VlanTaggingMode_value = map[string]int32{
		"VLAN_TAGGING_MODE_UNSPECIFIED":     0,
		"VLAN_TAGGING_MODE_UNTAGGED":        1,
		"VLAN_TAGGING_MODE_TAGGED":          2,
		"VLAN_TAGGING_MODE_PRIORITY_TAGGED": 3,
	}
)

func (x VlanTaggingMode) Enum() *VlanTaggingMode {
	p := new(VlanTaggingMode)
	*p = x
	return p
}

func (x VlanTaggingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VlanTaggingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_common_proto_enumTypes[165].Descriptor()
}

func (VlanTaggingMode) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_common_proto_enumTypes[165]
}

func (x VlanTaggingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VlanTaggingMode.Descriptor instead.
func (VlanTaggingMode) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{165}
}

type AclActionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Types that are assignable to Parameter:
	//
	//	*AclActionData_Uint
	//	*AclActionData_Int
	//	*AclActionData_Mac
	//	*AclActionData_Ip
	//	*AclActionData_Oid
	//	*AclActionData_Objlist
	//	*AclActionData_Ipaddr
	Parameter isAclActionData_Parameter `protobuf_oneof:"parameter"`
}

func (x *AclActionData) Reset() {
	*x = AclActionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclActionData) ProtoMessage() {}

func (x *AclActionData) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclActionData.ProtoReflect.Descriptor instead.
func (*AclActionData) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{0}
}

func (x *AclActionData) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (m *AclActionData) GetParameter() isAclActionData_Parameter {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (x *AclActionData) GetUint() uint64 {
	if x, ok := x.GetParameter().(*AclActionData_Uint); ok {
		return x.Uint
	}
	return 0
}

func (x *AclActionData) GetInt() uint64 {
	if x, ok := x.GetParameter().(*AclActionData_Int); ok {
		return x.Int
	}
	return 0
}

func (x *AclActionData) GetMac() []byte {
	if x, ok := x.GetParameter().(*AclActionData_Mac); ok {
		return x.Mac
	}
	return nil
}

func (x *AclActionData) GetIp() []byte {
	if x, ok := x.GetParameter().(*AclActionData_Ip); ok {
		return x.Ip
	}
	return nil
}

func (x *AclActionData) GetOid() uint64 {
	if x, ok := x.GetParameter().(*AclActionData_Oid); ok {
		return x.Oid
	}
	return 0
}

func (x *AclActionData) GetObjlist() *Uint64List {
	if x, ok := x.GetParameter().(*AclActionData_Objlist); ok {
		return x.Objlist
	}
	return nil
}

func (x *AclActionData) GetIpaddr() []byte {
	if x, ok := x.GetParameter().(*AclActionData_Ipaddr); ok {
		return x.Ipaddr
	}
	return nil
}

type isAclActionData_Parameter interface {
	isAclActionData_Parameter()
}

type AclActionData_Uint struct {
	Uint uint64 `protobuf:"varint,2,opt,name=uint,proto3,oneof"`
}

type AclActionData_Int struct {
	Int uint64 `protobuf:"varint,3,opt,name=int,proto3,oneof"`
}

type AclActionData_Mac struct {
	Mac []byte `protobuf:"bytes,4,opt,name=mac,proto3,oneof"`
}

type AclActionData_Ip struct {
	Ip []byte `protobuf:"bytes,5,opt,name=ip,proto3,oneof"`
}

type AclActionData_Oid struct {
	Oid uint64 `protobuf:"varint,6,opt,name=oid,proto3,oneof"`
}

type AclActionData_Objlist struct {
	Objlist *Uint64List `protobuf:"bytes,7,opt,name=objlist,proto3,oneof"`
}

type AclActionData_Ipaddr struct {
	Ipaddr []byte `protobuf:"bytes,8,opt,name=ipaddr,proto3,oneof"`
}

func (*AclActionData_Uint) isAclActionData_Parameter() {}

func (*AclActionData_Int) isAclActionData_Parameter() {}

func (*AclActionData_Mac) isAclActionData_Parameter() {}

func (*AclActionData_Ip) isAclActionData_Parameter() {}

func (*AclActionData_Oid) isAclActionData_Parameter() {}

func (*AclActionData_Objlist) isAclActionData_Parameter() {}

func (*AclActionData_Ipaddr) isAclActionData_Parameter() {}

type ACLCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActionListMandatory bool    `protobuf:"varint,1,opt,name=is_action_list_mandatory,json=isActionListMandatory,proto3" json:"is_action_list_mandatory,omitempty"`
	ActionList            []int32 `protobuf:"varint,2,rep,packed,name=action_list,json=actionList,proto3" json:"action_list,omitempty"`
}

func (x *ACLCapability) Reset() {
	*x = ACLCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACLCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACLCapability) ProtoMessage() {}

func (x *ACLCapability) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACLCapability.ProtoReflect.Descriptor instead.
func (*ACLCapability) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{1}
}

func (x *ACLCapability) GetIsActionListMandatory() bool {
	if x != nil {
		return x.IsActionListMandatory
	}
	return false
}

func (x *ACLCapability) GetActionList() []int32 {
	if x != nil {
		return x.ActionList
	}
	return nil
}

type AclFieldData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// Types that are assignable to Mask:
	//
	//	*AclFieldData_MaskUint
	//	*AclFieldData_MaskInt
	//	*AclFieldData_MaskMac
	//	*AclFieldData_MaskIp
	//	*AclFieldData_MaskList
	Mask isAclFieldData_Mask `protobuf_oneof:"mask"`
	// Types that are assignable to Data:
	//
	//	*AclFieldData_DataBool
	//	*AclFieldData_DataUint
	//	*AclFieldData_DataInt
	//	*AclFieldData_DataMac
	//	*AclFieldData_DataIp
	//	*AclFieldData_DataList
	Data isAclFieldData_Data `protobuf_oneof:"data"`
}

func (x *AclFieldData) Reset() {
	*x = AclFieldData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclFieldData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclFieldData) ProtoMessage() {}

func (x *AclFieldData) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclFieldData.ProtoReflect.Descriptor instead.
func (*AclFieldData) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{2}
}

func (x *AclFieldData) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (m *AclFieldData) GetMask() isAclFieldData_Mask {
	if m != nil {
		return m.Mask
	}
	return nil
}

func (x *AclFieldData) GetMaskUint() uint64 {
	if x, ok := x.GetMask().(*AclFieldData_MaskUint); ok {
		return x.MaskUint
	}
	return 0
}

func (x *AclFieldData) GetMaskInt() uint64 {
	if x, ok := x.GetMask().(*AclFieldData_MaskInt); ok {
		return x.MaskInt
	}
	return 0
}

func (x *AclFieldData) GetMaskMac() []byte {
	if x, ok := x.GetMask().(*AclFieldData_MaskMac); ok {
		return x.MaskMac
	}
	return nil
}

func (x *AclFieldData) GetMaskIp() []byte {
	if x, ok := x.GetMask().(*AclFieldData_MaskIp); ok {
		return x.MaskIp
	}
	return nil
}

func (x *AclFieldData) GetMaskList() *Uint64List {
	if x, ok := x.GetMask().(*AclFieldData_MaskList); ok {
		return x.MaskList
	}
	return nil
}

func (m *AclFieldData) GetData() isAclFieldData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *AclFieldData) GetDataBool() bool {
	if x, ok := x.GetData().(*AclFieldData_DataBool); ok {
		return x.DataBool
	}
	return false
}

func (x *AclFieldData) GetDataUint() uint64 {
	if x, ok := x.GetData().(*AclFieldData_DataUint); ok {
		return x.DataUint
	}
	return 0
}

func (x *AclFieldData) GetDataInt() int64 {
	if x, ok := x.GetData().(*AclFieldData_DataInt); ok {
		return x.DataInt
	}
	return 0
}

func (x *AclFieldData) GetDataMac() []byte {
	if x, ok := x.GetData().(*AclFieldData_DataMac); ok {
		return x.DataMac
	}
	return nil
}

func (x *AclFieldData) GetDataIp() []byte {
	if x, ok := x.GetData().(*AclFieldData_DataIp); ok {
		return x.DataIp
	}
	return nil
}

func (x *AclFieldData) GetDataList() *Uint64List {
	if x, ok := x.GetData().(*AclFieldData_DataList); ok {
		return x.DataList
	}
	return nil
}

type isAclFieldData_Mask interface {
	isAclFieldData_Mask()
}

type AclFieldData_MaskUint struct {
	MaskUint uint64 `protobuf:"varint,2,opt,name=mask_uint,json=maskUint,proto3,oneof"`
}

type AclFieldData_MaskInt struct {
	MaskInt uint64 `protobuf:"varint,3,opt,name=mask_int,json=maskInt,proto3,oneof"`
}

type AclFieldData_MaskMac struct {
	MaskMac []byte `protobuf:"bytes,4,opt,name=mask_mac,json=maskMac,proto3,oneof"`
}

type AclFieldData_MaskIp struct {
	MaskIp []byte `protobuf:"bytes,5,opt,name=mask_ip,json=maskIp,proto3,oneof"`
}

type AclFieldData_MaskList struct {
	MaskList *Uint64List `protobuf:"bytes,6,opt,name=mask_list,json=maskList,proto3,oneof"`
}

func (*AclFieldData_MaskUint) isAclFieldData_Mask() {}

func (*AclFieldData_MaskInt) isAclFieldData_Mask() {}

func (*AclFieldData_MaskMac) isAclFieldData_Mask() {}

func (*AclFieldData_MaskIp) isAclFieldData_Mask() {}

func (*AclFieldData_MaskList) isAclFieldData_Mask() {}

type isAclFieldData_Data interface {
	isAclFieldData_Data()
}

type AclFieldData_DataBool struct {
	DataBool bool `protobuf:"varint,7,opt,name=data_bool,json=dataBool,proto3,oneof"`
}

type AclFieldData_DataUint struct {
	DataUint uint64 `protobuf:"varint,8,opt,name=data_uint,json=dataUint,proto3,oneof"`
}

type AclFieldData_DataInt struct {
	DataInt int64 `protobuf:"varint,9,opt,name=data_int,json=dataInt,proto3,oneof"`
}

type AclFieldData_DataMac struct {
	DataMac []byte `protobuf:"bytes,10,opt,name=data_mac,json=dataMac,proto3,oneof"`
}

type AclFieldData_DataIp struct {
	DataIp []byte `protobuf:"bytes,11,opt,name=data_ip,json=dataIp,proto3,oneof"`
}

type AclFieldData_DataList struct {
	DataList *Uint64List `protobuf:"bytes,12,opt,name=data_list,json=dataList,proto3,oneof"`
}

func (*AclFieldData_DataBool) isAclFieldData_Data() {}

func (*AclFieldData_DataUint) isAclFieldData_Data() {}

func (*AclFieldData_DataInt) isAclFieldData_Data() {}

func (*AclFieldData_DataMac) isAclFieldData_Data() {}

func (*AclFieldData_DataIp) isAclFieldData_Data() {}

func (*AclFieldData_DataList) isAclFieldData_Data() {}

type ACLResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage     AclStage         `protobuf:"varint,1,opt,name=stage,proto3,enum=lemming.dataplane.sai.AclStage" json:"stage,omitempty"`
	BindPoint AclBindPointType `protobuf:"varint,2,opt,name=bind_point,json=bindPoint,proto3,enum=lemming.dataplane.sai.AclBindPointType" json:"bind_point,omitempty"`
	AvailNum  uint32           `protobuf:"varint,3,opt,name=avail_num,json=availNum,proto3" json:"avail_num,omitempty"`
}

func (x *ACLResource) Reset() {
	*x = ACLResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACLResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACLResource) ProtoMessage() {}

func (x *ACLResource) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACLResource.ProtoReflect.Descriptor instead.
func (*ACLResource) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{3}
}

func (x *ACLResource) GetStage() AclStage {
	if x != nil {
		return x.Stage
	}
	return AclStage_ACL_STAGE_UNSPECIFIED
}

func (x *ACLResource) GetBindPoint() AclBindPointType {
	if x != nil {
		return x.BindPoint
	}
	return AclBindPointType_ACL_BIND_POINT_TYPE_UNSPECIFIED
}

func (x *ACLResource) GetAvailNum() uint32 {
	if x != nil {
		return x.AvailNum
	}
	return 0
}

type BfdSessionStateChangeNotificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BfdSessionId uint64          `protobuf:"varint,1,opt,name=bfd_session_id,json=bfdSessionId,proto3" json:"bfd_session_id,omitempty"`
	SessionState BfdSessionState `protobuf:"varint,2,opt,name=session_state,json=sessionState,proto3,enum=lemming.dataplane.sai.BfdSessionState" json:"session_state,omitempty"`
}

func (x *BfdSessionStateChangeNotificationData) Reset() {
	*x = BfdSessionStateChangeNotificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BfdSessionStateChangeNotificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfdSessionStateChangeNotificationData) ProtoMessage() {}

func (x *BfdSessionStateChangeNotificationData) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfdSessionStateChangeNotificationData.ProtoReflect.Descriptor instead.
func (*BfdSessionStateChangeNotificationData) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{4}
}

func (x *BfdSessionStateChangeNotificationData) GetBfdSessionId() uint64 {
	if x != nil {
		return x.BfdSessionId
	}
	return 0
}

func (x *BfdSessionStateChangeNotificationData) GetSessionState() BfdSessionState {
	if x != nil {
		return x.SessionState
	}
	return BfdSessionState_BFD_SESSION_STATE_UNSPECIFIED
}

type FabricPortReachability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId  uint32 `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	Reachable bool   `protobuf:"varint,2,opt,name=reachable,proto3" json:"reachable,omitempty"`
}

func (x *FabricPortReachability) Reset() {
	*x = FabricPortReachability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FabricPortReachability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FabricPortReachability) ProtoMessage() {}

func (x *FabricPortReachability) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FabricPortReachability.ProtoReflect.Descriptor instead.
func (*FabricPortReachability) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{5}
}

func (x *FabricPortReachability) GetSwitchId() uint32 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *FabricPortReachability) GetReachable() bool {
	if x != nil {
		return x.Reachable
	}
	return false
}

type FdbEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId   uint64 `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	MacAddress []byte `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	BvId       uint64 `protobuf:"varint,3,opt,name=bv_id,json=bvId,proto3" json:"bv_id,omitempty"`
}

func (x *FdbEntry) Reset() {
	*x = FdbEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FdbEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FdbEntry) ProtoMessage() {}

func (x *FdbEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FdbEntry.ProtoReflect.Descriptor instead.
func (*FdbEntry) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{6}
}

func (x *FdbEntry) GetSwitchId() uint64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *FdbEntry) GetMacAddress() []byte {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *FdbEntry) GetBvId() uint64 {
	if x != nil {
		return x.BvId
	}
	return 0
}

type FdbEventNotificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType FdbEvent             `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=lemming.dataplane.sai.FdbEvent" json:"event_type,omitempty"`
	FdbEntry  *FdbEntry            `protobuf:"bytes,2,opt,name=fdb_entry,json=fdbEntry,proto3" json:"fdb_entry,omitempty"`
	Attrs     []*FdbEntryAttribute `protobuf:"bytes,3,rep,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *FdbEventNotificationData) Reset() {
	*x = FdbEventNotificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FdbEventNotificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FdbEventNotificationData) ProtoMessage() {}

func (x *FdbEventNotificationData) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FdbEventNotificationData.ProtoReflect.Descriptor instead.
func (*FdbEventNotificationData) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{7}
}

func (x *FdbEventNotificationData) GetEventType() FdbEvent {
	if x != nil {
		return x.EventType
	}
	return FdbEvent_FDB_EVENT_UNSPECIFIED
}

func (x *FdbEventNotificationData) GetFdbEntry() *FdbEntry {
	if x != nil {
		return x.FdbEntry
	}
	return nil
}

func (x *FdbEventNotificationData) GetAttrs() []*FdbEntryAttribute {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type InsegEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId uint64 `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	Label    uint32 `protobuf:"varint,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *InsegEntry) Reset() {
	*x = InsegEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsegEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsegEntry) ProtoMessage() {}

func (x *InsegEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsegEntry.ProtoReflect.Descriptor instead.
func (*InsegEntry) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{8}
}

func (x *InsegEntry) GetSwitchId() uint64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *InsegEntry) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

type IpPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Mask []byte `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *IpPrefix) Reset() {
	*x = IpPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpPrefix) ProtoMessage() {}

func (x *IpPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpPrefix.ProtoReflect.Descriptor instead.
func (*IpPrefix) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{9}
}

func (x *IpPrefix) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *IpPrefix) GetMask() []byte {
	if x != nil {
		return x.Mask
	}
	return nil
}

type IpmcEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId    uint64        `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	VrId        uint64        `protobuf:"varint,2,opt,name=vr_id,json=vrId,proto3" json:"vr_id,omitempty"`
	Type        IpmcEntryType `protobuf:"varint,3,opt,name=type,proto3,enum=lemming.dataplane.sai.IpmcEntryType" json:"type,omitempty"`
	Destination []byte        `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	Source      []byte        `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *IpmcEntry) Reset() {
	*x = IpmcEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpmcEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpmcEntry) ProtoMessage() {}

func (x *IpmcEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpmcEntry.ProtoReflect.Descriptor instead.
func (*IpmcEntry) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{10}
}

func (x *IpmcEntry) GetSwitchId() uint64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *IpmcEntry) GetVrId() uint64 {
	if x != nil {
		return x.VrId
	}
	return 0
}

func (x *IpmcEntry) GetType() IpmcEntryType {
	if x != nil {
		return x.Type
	}
	return IpmcEntryType_IPMC_ENTRY_TYPE_UNSPECIFIED
}

func (x *IpmcEntry) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *IpmcEntry) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

type IpsecSaStatusNotificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpsecSaId               uint64                  `protobuf:"varint,1,opt,name=ipsec_sa_id,json=ipsecSaId,proto3" json:"ipsec_sa_id,omitempty"`
	IpsecSaOctetCountStatus IpsecSaOctetCountStatus `protobuf:"varint,2,opt,name=ipsec_sa_octet_count_status,json=ipsecSaOctetCountStatus,proto3,enum=lemming.dataplane.sai.IpsecSaOctetCountStatus" json:"ipsec_sa_octet_count_status,omitempty"`
	IpsecEgressSnAtMaxLimit bool                    `protobuf:"varint,3,opt,name=ipsec_egress_sn_at_max_limit,json=ipsecEgressSnAtMaxLimit,proto3" json:"ipsec_egress_sn_at_max_limit,omitempty"`
}

func (x *IpsecSaStatusNotificationData) Reset() {
	*x = IpsecSaStatusNotificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecSaStatusNotificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecSaStatusNotificationData) ProtoMessage() {}

func (x *IpsecSaStatusNotificationData) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecSaStatusNotificationData.ProtoReflect.Descriptor instead.
func (*IpsecSaStatusNotificationData) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{11}
}

func (x *IpsecSaStatusNotificationData) GetIpsecSaId() uint64 {
	if x != nil {
		return x.IpsecSaId
	}
	return 0
}

func (x *IpsecSaStatusNotificationData) GetIpsecSaOctetCountStatus() IpsecSaOctetCountStatus {
	if x != nil {
		return x.IpsecSaOctetCountStatus
	}
	return IpsecSaOctetCountStatus_IPSEC_SA_OCTET_COUNT_STATUS_UNSPECIFIED
}

func (x *IpsecSaStatusNotificationData) GetIpsecEgressSnAtMaxLimit() bool {
	if x != nil {
		return x.IpsecEgressSnAtMaxLimit
	}
	return false
}

type L2McEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId    uint64        `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	BvId        uint64        `protobuf:"varint,2,opt,name=bv_id,json=bvId,proto3" json:"bv_id,omitempty"`
	Type        L2McEntryType `protobuf:"varint,3,opt,name=type,proto3,enum=lemming.dataplane.sai.L2McEntryType" json:"type,omitempty"`
	Destination []byte        `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	Source      []byte        `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *L2McEntry) Reset() {
	*x = L2McEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2McEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2McEntry) ProtoMessage() {}

func (x *L2McEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2McEntry.ProtoReflect.Descriptor instead.
func (*L2McEntry) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{12}
}

func (x *L2McEntry) GetSwitchId() uint64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *L2McEntry) GetBvId() uint64 {
	if x != nil {
		return x.BvId
	}
	return 0
}

func (x *L2McEntry) GetType() L2McEntryType {
	if x != nil {
		return x.Type
	}
	return L2McEntryType_L2MC_ENTRY_TYPE_UNSPECIFIED
}

func (x *L2McEntry) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *L2McEntry) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

type UintMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uintmap map[uint32]uint32 `protobuf:"bytes,1,rep,name=uintmap,proto3" json:"uintmap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UintMap) Reset() {
	*x = UintMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UintMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UintMap) ProtoMessage() {}

func (x *UintMap) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UintMap.ProtoReflect.Descriptor instead.
func (*UintMap) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{13}
}

func (x *UintMap) GetUintmap() map[uint32]uint32 {
	if x != nil {
		return x.Uintmap
	}
	return nil
}

type McastFdbEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId   uint64 `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	MacAddress []byte `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	BvId       uint64 `protobuf:"varint,3,opt,name=bv_id,json=bvId,proto3" json:"bv_id,omitempty"`
}

func (x *McastFdbEntry) Reset() {
	*x = McastFdbEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McastFdbEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McastFdbEntry) ProtoMessage() {}

func (x *McastFdbEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McastFdbEntry.ProtoReflect.Descriptor instead.
func (*McastFdbEntry) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{14}
}

func (x *McastFdbEntry) GetSwitchId() uint64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *McastFdbEntry) GetMacAddress() []byte {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *McastFdbEntry) GetBvId() uint64 {
	if x != nil {
		return x.BvId
	}
	return 0
}

type MySidEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId        uint64 `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	VrId            uint64 `protobuf:"varint,2,opt,name=vr_id,json=vrId,proto3" json:"vr_id,omitempty"`
	LocatorBlockLen uint32 `protobuf:"varint,3,opt,name=locator_block_len,json=locatorBlockLen,proto3" json:"locator_block_len,omitempty"`
	LocatorNodeLen  uint32 `protobuf:"varint,4,opt,name=locator_node_len,json=locatorNodeLen,proto3" json:"locator_node_len,omitempty"`
	FunctionLen     uint32 `protobuf:"varint,5,opt,name=function_len,json=functionLen,proto3" json:"function_len,omitempty"`
	ArgsLen         uint32 `protobuf:"varint,6,opt,name=args_len,json=argsLen,proto3" json:"args_len,omitempty"`
	Sid             []byte `protobuf:"bytes,7,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *MySidEntry) Reset() {
	*x = MySidEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySidEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySidEntry) ProtoMessage() {}

func (x *MySidEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySidEntry.ProtoReflect.Descriptor instead.
func (*MySidEntry) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{15}
}

func (x *MySidEntry) GetSwitchId() uint64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *MySidEntry) GetVrId() uint64 {
	if x != nil {
		return x.VrId
	}
	return 0
}

func (x *MySidEntry) GetLocatorBlockLen() uint32 {
	if x != nil {
		return x.LocatorBlockLen
	}
	return 0
}

func (x *MySidEntry) GetLocatorNodeLen() uint32 {
	if x != nil {
		return x.LocatorNodeLen
	}
	return 0
}

func (x *MySidEntry) GetFunctionLen() uint32 {
	if x != nil {
		return x.FunctionLen
	}
	return 0
}

func (x *MySidEntry) GetArgsLen() uint32 {
	if x != nil {
		return x.ArgsLen
	}
	return 0
}

func (x *MySidEntry) GetSid() []byte {
	if x != nil {
		return x.Sid
	}
	return nil
}

type NatEntryData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//
	//	*NatEntryData_KeySrcIp
	//	*NatEntryData_KeyDstIp
	//	*NatEntryData_KeyProto
	//	*NatEntryData_KeyL4SrcPort
	//	*NatEntryData_KeyL4DstPort
	Key isNatEntryData_Key `protobuf_oneof:"key"`
	// Types that are assignable to Mask:
	//
	//	*NatEntryData_MaskSrcIp
	//	*NatEntryData_MaskDstIp
	//	*NatEntryData_MaskProto
	//	*NatEntryData_MaskL4SrcPort
	//	*NatEntryData_MaskL4DstPort
	Mask isNatEntryData_Mask `protobuf_oneof:"mask"`
}

func (x *NatEntryData) Reset() {
	*x = NatEntryData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NatEntryData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NatEntryData) ProtoMessage() {}

func (x *NatEntryData) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NatEntryData.ProtoReflect.Descriptor instead.
func (*NatEntryData) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{16}
}

func (m *NatEntryData) GetKey() isNatEntryData_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *NatEntryData) GetKeySrcIp() []byte {
	if x, ok := x.GetKey().(*NatEntryData_KeySrcIp); ok {
		return x.KeySrcIp
	}
	return nil
}

func (x *NatEntryData) GetKeyDstIp() []byte {
	if x, ok := x.GetKey().(*NatEntryData_KeyDstIp); ok {
		return x.KeyDstIp
	}
	return nil
}

func (x *NatEntryData) GetKeyProto() uint32 {
	if x, ok := x.GetKey().(*NatEntryData_KeyProto); ok {
		return x.KeyProto
	}
	return 0
}

func (x *NatEntryData) GetKeyL4SrcPort() uint32 {
	if x, ok := x.GetKey().(*NatEntryData_KeyL4SrcPort); ok {
		return x.KeyL4SrcPort
	}
	return 0
}

func (x *NatEntryData) GetKeyL4DstPort() uint32 {
	if x, ok := x.GetKey().(*NatEntryData_KeyL4DstPort); ok {
		return x.KeyL4DstPort
	}
	return 0
}

func (m *NatEntryData) GetMask() isNatEntryData_Mask {
	if m != nil {
		return m.Mask
	}
	return nil
}

func (x *NatEntryData) GetMaskSrcIp() []byte {
	if x, ok := x.GetMask().(*NatEntryData_MaskSrcIp); ok {
		return x.MaskSrcIp
	}
	return nil
}

func (x *NatEntryData) GetMaskDstIp() []byte {
	if x, ok := x.GetMask().(*NatEntryData_MaskDstIp); ok {
		return x.MaskDstIp
	}
	return nil
}

func (x *NatEntryData) GetMaskProto() uint32 {
	if x, ok := x.GetMask().(*NatEntryData_MaskProto); ok {
		return x.MaskProto
	}
	return 0
}

func (x *NatEntryData) GetMaskL4SrcPort() uint32 {
	if x, ok := x.GetMask().(*NatEntryData_MaskL4SrcPort); ok {
		return x.MaskL4SrcPort
	}
	return 0
}

func (x *NatEntryData) GetMaskL4DstPort() uint32 {
	if x, ok := x.GetMask().(*NatEntryData_MaskL4DstPort); ok {
		return x.MaskL4DstPort
	}
	return 0
}

type isNatEntryData_Key interface {
	isNatEntryData_Key()
}

type NatEntryData_KeySrcIp struct {
	KeySrcIp []byte `protobuf:"bytes,2,opt,name=key_src_ip,json=keySrcIp,proto3,oneof"`
}

type NatEntryData_KeyDstIp struct {
	KeyDstIp []byte `protobuf:"bytes,3,opt,name=key_dst_ip,json=keyDstIp,proto3,oneof"`
}

type NatEntryData_KeyProto struct {
	KeyProto uint32 `protobuf:"varint,4,opt,name=key_proto,json=keyProto,proto3,oneof"`
}

type NatEntryData_KeyL4SrcPort struct {
	KeyL4SrcPort uint32 `protobuf:"varint,5,opt,name=key_l4_src_port,json=keyL4SrcPort,proto3,oneof"`
}

type NatEntryData_KeyL4DstPort struct {
	KeyL4DstPort uint32 `protobuf:"varint,6,opt,name=key_l4_dst_port,json=keyL4DstPort,proto3,oneof"`
}

func (*NatEntryData_KeySrcIp) isNatEntryData_Key() {}

func (*NatEntryData_KeyDstIp) isNatEntryData_Key() {}

func (*NatEntryData_KeyProto) isNatEntryData_Key() {}

func (*NatEntryData_KeyL4SrcPort) isNatEntryData_Key() {}

func (*NatEntryData_KeyL4DstPort) isNatEntryData_Key() {}

type isNatEntryData_Mask interface {
	isNatEntryData_Mask()
}

type NatEntryData_MaskSrcIp struct {
	MaskSrcIp []byte `protobuf:"bytes,7,opt,name=mask_src_ip,json=maskSrcIp,proto3,oneof"`
}

type NatEntryData_MaskDstIp struct {
	MaskDstIp []byte `protobuf:"bytes,8,opt,name=mask_dst_ip,json=maskDstIp,proto3,oneof"`
}

type NatEntryData_MaskProto struct {
	MaskProto uint32 `protobuf:"varint,9,opt,name=mask_proto,json=maskProto,proto3,oneof"`
}

type NatEntryData_MaskL4SrcPort struct {
	MaskL4SrcPort uint32 `protobuf:"varint,10,opt,name=mask_l4_src_port,json=maskL4SrcPort,proto3,oneof"`
}

type NatEntryData_MaskL4DstPort struct {
	MaskL4DstPort uint32 `protobuf:"varint,11,opt,name=mask_l4_dst_port,json=maskL4DstPort,proto3,oneof"`
}

func (*NatEntryData_MaskSrcIp) isNatEntryData_Mask() {}

func (*NatEntryData_MaskDstIp) isNatEntryData_Mask() {}

func (*NatEntryData_MaskProto) isNatEntryData_Mask() {}

func (*NatEntryData_MaskL4SrcPort) isNatEntryData_Mask() {}

func (*NatEntryData_MaskL4DstPort) isNatEntryData_Mask() {}

type NatEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId uint64        `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	VrId     uint64        `protobuf:"varint,2,opt,name=vr_id,json=vrId,proto3" json:"vr_id,omitempty"`
	NatType  NatType       `protobuf:"varint,3,opt,name=nat_type,json=natType,proto3,enum=lemming.dataplane.sai.NatType" json:"nat_type,omitempty"`
	Data     *NatEntryData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *NatEntry) Reset() {
	*x = NatEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NatEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NatEntry) ProtoMessage() {}

func (x *NatEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NatEntry.ProtoReflect.Descriptor instead.
func (*NatEntry) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{17}
}

func (x *NatEntry) GetSwitchId() uint64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *NatEntry) GetVrId() uint64 {
	if x != nil {
		return x.VrId
	}
	return 0
}

func (x *NatEntry) GetNatType() NatType {
	if x != nil {
		return x.NatType
	}
	return NatType_NAT_TYPE_UNSPECIFIED
}

func (x *NatEntry) GetData() *NatEntryData {
	if x != nil {
		return x.Data
	}
	return nil
}

type NeighborEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId  uint64 `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	RifId     uint64 `protobuf:"varint,2,opt,name=rif_id,json=rifId,proto3" json:"rif_id,omitempty"`
	IpAddress []byte `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *NeighborEntry) Reset() {
	*x = NeighborEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighborEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighborEntry) ProtoMessage() {}

func (x *NeighborEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighborEntry.ProtoReflect.Descriptor instead.
func (*NeighborEntry) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{18}
}

func (x *NeighborEntry) GetSwitchId() uint64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *NeighborEntry) GetRifId() uint64 {
	if x != nil {
		return x.RifId
	}
	return 0
}

func (x *NeighborEntry) GetIpAddress() []byte {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

type PortEyeValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lane  uint32 `protobuf:"varint,1,opt,name=lane,proto3" json:"lane,omitempty"`
	Left  int32  `protobuf:"varint,2,opt,name=left,proto3" json:"left,omitempty"`
	Right int32  `protobuf:"varint,3,opt,name=right,proto3" json:"right,omitempty"`
	Up    int32  `protobuf:"varint,4,opt,name=up,proto3" json:"up,omitempty"`
	Down  int32  `protobuf:"varint,5,opt,name=down,proto3" json:"down,omitempty"`
}

func (x *PortEyeValues) Reset() {
	*x = PortEyeValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortEyeValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortEyeValues) ProtoMessage() {}

func (x *PortEyeValues) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortEyeValues.ProtoReflect.Descriptor instead.
func (*PortEyeValues) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{19}
}

func (x *PortEyeValues) GetLane() uint32 {
	if x != nil {
		return x.Lane
	}
	return 0
}

func (x *PortEyeValues) GetLeft() int32 {
	if x != nil {
		return x.Left
	}
	return 0
}

func (x *PortEyeValues) GetRight() int32 {
	if x != nil {
		return x.Right
	}
	return 0
}

func (x *PortEyeValues) GetUp() int32 {
	if x != nil {
		return x.Up
	}
	return 0
}

func (x *PortEyeValues) GetDown() int32 {
	if x != nil {
		return x.Down
	}
	return 0
}

type PortOperStatusNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId    uint64         `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	PortState PortOperStatus `protobuf:"varint,2,opt,name=port_state,json=portState,proto3,enum=lemming.dataplane.sai.PortOperStatus" json:"port_state,omitempty"`
}

func (x *PortOperStatusNotification) Reset() {
	*x = PortOperStatusNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortOperStatusNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortOperStatusNotification) ProtoMessage() {}

func (x *PortOperStatusNotification) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortOperStatusNotification.ProtoReflect.Descriptor instead.
func (*PortOperStatusNotification) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{20}
}

func (x *PortOperStatusNotification) GetPortId() uint64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *PortOperStatusNotification) GetPortState() PortOperStatus {
	if x != nil {
		return x.PortState
	}
	return PortOperStatus_PORT_OPER_STATUS_UNSPECIFIED
}

type PRBS_RXState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxStatus   PortPrbsRxStatus `protobuf:"varint,1,opt,name=rx_status,json=rxStatus,proto3,enum=lemming.dataplane.sai.PortPrbsRxStatus" json:"rx_status,omitempty"`
	ErrorCount uint32           `protobuf:"varint,2,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
}

func (x *PRBS_RXState) Reset() {
	*x = PRBS_RXState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PRBS_RXState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PRBS_RXState) ProtoMessage() {}

func (x *PRBS_RXState) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PRBS_RXState.ProtoReflect.Descriptor instead.
func (*PRBS_RXState) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{21}
}

func (x *PRBS_RXState) GetRxStatus() PortPrbsRxStatus {
	if x != nil {
		return x.RxStatus
	}
	return PortPrbsRxStatus_PORT_PRBS_RX_STATUS_UNSPECIFIED
}

func (x *PRBS_RXState) GetErrorCount() uint32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

type QOSMapParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tc         uint32      `protobuf:"varint,1,opt,name=tc,proto3" json:"tc,omitempty"`
	Dscp       uint32      `protobuf:"varint,2,opt,name=dscp,proto3" json:"dscp,omitempty"`
	Dot1P      uint32      `protobuf:"varint,3,opt,name=dot1p,proto3" json:"dot1p,omitempty"`
	Prio       uint32      `protobuf:"varint,4,opt,name=prio,proto3" json:"prio,omitempty"`
	Pg         uint32      `protobuf:"varint,5,opt,name=pg,proto3" json:"pg,omitempty"`
	QueueIndex uint32      `protobuf:"varint,6,opt,name=queue_index,json=queueIndex,proto3" json:"queue_index,omitempty"`
	Color      PacketColor `protobuf:"varint,7,opt,name=color,proto3,enum=lemming.dataplane.sai.PacketColor" json:"color,omitempty"`
	MplsExp    uint32      `protobuf:"varint,8,opt,name=mpls_exp,json=mplsExp,proto3" json:"mpls_exp,omitempty"`
	Fc         uint32      `protobuf:"varint,9,opt,name=fc,proto3" json:"fc,omitempty"`
}

func (x *QOSMapParams) Reset() {
	*x = QOSMapParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QOSMapParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QOSMapParams) ProtoMessage() {}

func (x *QOSMapParams) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QOSMapParams.ProtoReflect.Descriptor instead.
func (*QOSMapParams) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{22}
}

func (x *QOSMapParams) GetTc() uint32 {
	if x != nil {
		return x.Tc
	}
	return 0
}

func (x *QOSMapParams) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

func (x *QOSMapParams) GetDot1P() uint32 {
	if x != nil {
		return x.Dot1P
	}
	return 0
}

func (x *QOSMapParams) GetPrio() uint32 {
	if x != nil {
		return x.Prio
	}
	return 0
}

func (x *QOSMapParams) GetPg() uint32 {
	if x != nil {
		return x.Pg
	}
	return 0
}

func (x *QOSMapParams) GetQueueIndex() uint32 {
	if x != nil {
		return x.QueueIndex
	}
	return 0
}

func (x *QOSMapParams) GetColor() PacketColor {
	if x != nil {
		return x.Color
	}
	return PacketColor_PACKET_COLOR_UNSPECIFIED
}

func (x *QOSMapParams) GetMplsExp() uint32 {
	if x != nil {
		return x.MplsExp
	}
	return 0
}

func (x *QOSMapParams) GetFc() uint32 {
	if x != nil {
		return x.Fc
	}
	return 0
}

type QOSMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *QOSMapParams `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *QOSMapParams `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *QOSMap) Reset() {
	*x = QOSMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QOSMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QOSMap) ProtoMessage() {}

func (x *QOSMap) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QOSMap.ProtoReflect.Descriptor instead.
func (*QOSMap) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{23}
}

func (x *QOSMap) GetKey() *QOSMapParams {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *QOSMap) GetValue() *QOSMapParams {
	if x != nil {
		return x.Value
	}
	return nil
}

type QueueDeadlockNotificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId            uint64                    `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Event              QueuePfcDeadlockEventType `protobuf:"varint,2,opt,name=event,proto3,enum=lemming.dataplane.sai.QueuePfcDeadlockEventType" json:"event,omitempty"`
	AppManagedRecovery bool                      `protobuf:"varint,3,opt,name=app_managed_recovery,json=appManagedRecovery,proto3" json:"app_managed_recovery,omitempty"`
}

func (x *QueueDeadlockNotificationData) Reset() {
	*x = QueueDeadlockNotificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueDeadlockNotificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueDeadlockNotificationData) ProtoMessage() {}

func (x *QueueDeadlockNotificationData) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueDeadlockNotificationData.ProtoReflect.Descriptor instead.
func (*QueueDeadlockNotificationData) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{24}
}

func (x *QueueDeadlockNotificationData) GetQueueId() uint64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *QueueDeadlockNotificationData) GetEvent() QueuePfcDeadlockEventType {
	if x != nil {
		return x.Event
	}
	return QueuePfcDeadlockEventType_QUEUE_PFC_DEADLOCK_EVENT_TYPE_UNSPECIFIED
}

func (x *QueueDeadlockNotificationData) GetAppManagedRecovery() bool {
	if x != nil {
		return x.AppManagedRecovery
	}
	return false
}

type RouteEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId    uint64    `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	VrId        uint64    `protobuf:"varint,2,opt,name=vr_id,json=vrId,proto3" json:"vr_id,omitempty"`
	Destination *IpPrefix `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *RouteEntry) Reset() {
	*x = RouteEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteEntry) ProtoMessage() {}

func (x *RouteEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteEntry.ProtoReflect.Descriptor instead.
func (*RouteEntry) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{25}
}

func (x *RouteEntry) GetSwitchId() uint64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *RouteEntry) GetVrId() uint64 {
	if x != nil {
		return x.VrId
	}
	return 0
}

func (x *RouteEntry) GetDestination() *IpPrefix {
	if x != nil {
		return x.Destination
	}
	return nil
}

type SystemPortConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId                uint32 `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	AttachedSwitchId      uint32 `protobuf:"varint,2,opt,name=attached_switch_id,json=attachedSwitchId,proto3" json:"attached_switch_id,omitempty"`
	AttachedCoreIndex     uint32 `protobuf:"varint,3,opt,name=attached_core_index,json=attachedCoreIndex,proto3" json:"attached_core_index,omitempty"`
	AttachedCorePortIndex uint32 `protobuf:"varint,4,opt,name=attached_core_port_index,json=attachedCorePortIndex,proto3" json:"attached_core_port_index,omitempty"`
	Speed                 uint32 `protobuf:"varint,5,opt,name=speed,proto3" json:"speed,omitempty"`
	NumVoq                uint32 `protobuf:"varint,6,opt,name=num_voq,json=numVoq,proto3" json:"num_voq,omitempty"`
}

func (x *SystemPortConfig) Reset() {
	*x = SystemPortConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemPortConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemPortConfig) ProtoMessage() {}

func (x *SystemPortConfig) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemPortConfig.ProtoReflect.Descriptor instead.
func (*SystemPortConfig) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{26}
}

func (x *SystemPortConfig) GetPortId() uint32 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *SystemPortConfig) GetAttachedSwitchId() uint32 {
	if x != nil {
		return x.AttachedSwitchId
	}
	return 0
}

func (x *SystemPortConfig) GetAttachedCoreIndex() uint32 {
	if x != nil {
		return x.AttachedCoreIndex
	}
	return 0
}

func (x *SystemPortConfig) GetAttachedCorePortIndex() uint32 {
	if x != nil {
		return x.AttachedCorePortIndex
	}
	return 0
}

func (x *SystemPortConfig) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *SystemPortConfig) GetNumVoq() uint32 {
	if x != nil {
		return x.NumVoq
	}
	return 0
}

type HMAC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId uint32   `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Hmac  []uint32 `protobuf:"varint,2,rep,packed,name=hmac,proto3" json:"hmac,omitempty"`
}

func (x *HMAC) Reset() {
	*x = HMAC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMAC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMAC) ProtoMessage() {}

func (x *HMAC) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMAC.ProtoReflect.Descriptor instead.
func (*HMAC) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{27}
}

func (x *HMAC) GetKeyId() uint32 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *HMAC) GetHmac() []uint32 {
	if x != nil {
		return x.Hmac
	}
	return nil
}

type TLVEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//
	//	*TLVEntry_IngressNode
	//	*TLVEntry_EgressNode
	//	*TLVEntry_OpaqueContainer
	//	*TLVEntry_Hmac
	Entry isTLVEntry_Entry `protobuf_oneof:"entry"`
}

func (x *TLVEntry) Reset() {
	*x = TLVEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLVEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLVEntry) ProtoMessage() {}

func (x *TLVEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLVEntry.ProtoReflect.Descriptor instead.
func (*TLVEntry) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{28}
}

func (m *TLVEntry) GetEntry() isTLVEntry_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *TLVEntry) GetIngressNode() []byte {
	if x, ok := x.GetEntry().(*TLVEntry_IngressNode); ok {
		return x.IngressNode
	}
	return nil
}

func (x *TLVEntry) GetEgressNode() []byte {
	if x, ok := x.GetEntry().(*TLVEntry_EgressNode); ok {
		return x.EgressNode
	}
	return nil
}

func (x *TLVEntry) GetOpaqueContainer() []byte {
	if x, ok := x.GetEntry().(*TLVEntry_OpaqueContainer); ok {
		return x.OpaqueContainer
	}
	return nil
}

func (x *TLVEntry) GetHmac() *HMAC {
	if x, ok := x.GetEntry().(*TLVEntry_Hmac); ok {
		return x.Hmac
	}
	return nil
}

type isTLVEntry_Entry interface {
	isTLVEntry_Entry()
}

type TLVEntry_IngressNode struct {
	IngressNode []byte `protobuf:"bytes,1,opt,name=ingress_node,json=ingressNode,proto3,oneof"`
}

type TLVEntry_EgressNode struct {
	EgressNode []byte `protobuf:"bytes,2,opt,name=egress_node,json=egressNode,proto3,oneof"`
}

type TLVEntry_OpaqueContainer struct {
	OpaqueContainer []byte `protobuf:"bytes,3,opt,name=opaque_container,json=opaqueContainer,proto3,oneof"`
}

type TLVEntry_Hmac struct {
	Hmac *HMAC `protobuf:"bytes,4,opt,name=hmac,proto3,oneof"`
}

func (*TLVEntry_IngressNode) isTLVEntry_Entry() {}

func (*TLVEntry_EgressNode) isTLVEntry_Entry() {}

func (*TLVEntry_OpaqueContainer) isTLVEntry_Entry() {}

func (*TLVEntry_Hmac) isTLVEntry_Entry() {}

type Uint32Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min uint64 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max uint64 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Uint32Range) Reset() {
	*x = Uint32Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32Range) ProtoMessage() {}

func (x *Uint32Range) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32Range.ProtoReflect.Descriptor instead.
func (*Uint32Range) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{29}
}

func (x *Uint32Range) GetMin() uint64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Uint32Range) GetMax() uint64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type AclCounterAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId           uint64 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	EnablePacketCount bool   `protobuf:"varint,2,opt,name=enable_packet_count,json=enablePacketCount,proto3" json:"enable_packet_count,omitempty"`
	EnableByteCount   bool   `protobuf:"varint,3,opt,name=enable_byte_count,json=enableByteCount,proto3" json:"enable_byte_count,omitempty"`
	Packets           uint64 `protobuf:"varint,4,opt,name=packets,proto3" json:"packets,omitempty"`
	Bytes             uint64 `protobuf:"varint,5,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *AclCounterAttribute) Reset() {
	*x = AclCounterAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclCounterAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclCounterAttribute) ProtoMessage() {}

func (x *AclCounterAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclCounterAttribute.ProtoReflect.Descriptor instead.
func (*AclCounterAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{30}
}

func (x *AclCounterAttribute) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *AclCounterAttribute) GetEnablePacketCount() bool {
	if x != nil {
		return x.EnablePacketCount
	}
	return false
}

func (x *AclCounterAttribute) GetEnableByteCount() bool {
	if x != nil {
		return x.EnableByteCount
	}
	return false
}

func (x *AclCounterAttribute) GetPackets() uint64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *AclCounterAttribute) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type AclEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId                         uint64         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	Priority                        uint32         `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	AdminState                      bool           `protobuf:"varint,3,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty"`
	FieldSrcIpv6                    *AclFieldData  `protobuf:"bytes,4,opt,name=field_src_ipv6,json=fieldSrcIpv6,proto3" json:"field_src_ipv6,omitempty"`
	FieldSrcIpv6Word3               *AclFieldData  `protobuf:"bytes,5,opt,name=field_src_ipv6_word3,json=fieldSrcIpv6Word3,proto3" json:"field_src_ipv6_word3,omitempty"`
	FieldSrcIpv6Word2               *AclFieldData  `protobuf:"bytes,6,opt,name=field_src_ipv6_word2,json=fieldSrcIpv6Word2,proto3" json:"field_src_ipv6_word2,omitempty"`
	FieldSrcIpv6Word1               *AclFieldData  `protobuf:"bytes,7,opt,name=field_src_ipv6_word1,json=fieldSrcIpv6Word1,proto3" json:"field_src_ipv6_word1,omitempty"`
	FieldSrcIpv6Word0               *AclFieldData  `protobuf:"bytes,8,opt,name=field_src_ipv6_word0,json=fieldSrcIpv6Word0,proto3" json:"field_src_ipv6_word0,omitempty"`
	FieldDstIpv6                    *AclFieldData  `protobuf:"bytes,9,opt,name=field_dst_ipv6,json=fieldDstIpv6,proto3" json:"field_dst_ipv6,omitempty"`
	FieldDstIpv6Word3               *AclFieldData  `protobuf:"bytes,10,opt,name=field_dst_ipv6_word3,json=fieldDstIpv6Word3,proto3" json:"field_dst_ipv6_word3,omitempty"`
	FieldDstIpv6Word2               *AclFieldData  `protobuf:"bytes,11,opt,name=field_dst_ipv6_word2,json=fieldDstIpv6Word2,proto3" json:"field_dst_ipv6_word2,omitempty"`
	FieldDstIpv6Word1               *AclFieldData  `protobuf:"bytes,12,opt,name=field_dst_ipv6_word1,json=fieldDstIpv6Word1,proto3" json:"field_dst_ipv6_word1,omitempty"`
	FieldDstIpv6Word0               *AclFieldData  `protobuf:"bytes,13,opt,name=field_dst_ipv6_word0,json=fieldDstIpv6Word0,proto3" json:"field_dst_ipv6_word0,omitempty"`
	FieldInnerSrcIpv6               *AclFieldData  `protobuf:"bytes,14,opt,name=field_inner_src_ipv6,json=fieldInnerSrcIpv6,proto3" json:"field_inner_src_ipv6,omitempty"`
	FieldInnerDstIpv6               *AclFieldData  `protobuf:"bytes,15,opt,name=field_inner_dst_ipv6,json=fieldInnerDstIpv6,proto3" json:"field_inner_dst_ipv6,omitempty"`
	FieldSrcMac                     *AclFieldData  `protobuf:"bytes,16,opt,name=field_src_mac,json=fieldSrcMac,proto3" json:"field_src_mac,omitempty"`
	FieldDstMac                     *AclFieldData  `protobuf:"bytes,17,opt,name=field_dst_mac,json=fieldDstMac,proto3" json:"field_dst_mac,omitempty"`
	FieldSrcIp                      *AclFieldData  `protobuf:"bytes,18,opt,name=field_src_ip,json=fieldSrcIp,proto3" json:"field_src_ip,omitempty"`
	FieldDstIp                      *AclFieldData  `protobuf:"bytes,19,opt,name=field_dst_ip,json=fieldDstIp,proto3" json:"field_dst_ip,omitempty"`
	FieldInnerSrcIp                 *AclFieldData  `protobuf:"bytes,20,opt,name=field_inner_src_ip,json=fieldInnerSrcIp,proto3" json:"field_inner_src_ip,omitempty"`
	FieldInnerDstIp                 *AclFieldData  `protobuf:"bytes,21,opt,name=field_inner_dst_ip,json=fieldInnerDstIp,proto3" json:"field_inner_dst_ip,omitempty"`
	FieldInPorts                    *AclFieldData  `protobuf:"bytes,22,opt,name=field_in_ports,json=fieldInPorts,proto3" json:"field_in_ports,omitempty"`
	FieldOutPorts                   *AclFieldData  `protobuf:"bytes,23,opt,name=field_out_ports,json=fieldOutPorts,proto3" json:"field_out_ports,omitempty"`
	FieldInPort                     *AclFieldData  `protobuf:"bytes,24,opt,name=field_in_port,json=fieldInPort,proto3" json:"field_in_port,omitempty"`
	FieldOutPort                    *AclFieldData  `protobuf:"bytes,25,opt,name=field_out_port,json=fieldOutPort,proto3" json:"field_out_port,omitempty"`
	FieldSrcPort                    *AclFieldData  `protobuf:"bytes,26,opt,name=field_src_port,json=fieldSrcPort,proto3" json:"field_src_port,omitempty"`
	FieldOuterVlanId                *AclFieldData  `protobuf:"bytes,27,opt,name=field_outer_vlan_id,json=fieldOuterVlanId,proto3" json:"field_outer_vlan_id,omitempty"`
	FieldOuterVlanPri               *AclFieldData  `protobuf:"bytes,28,opt,name=field_outer_vlan_pri,json=fieldOuterVlanPri,proto3" json:"field_outer_vlan_pri,omitempty"`
	FieldOuterVlanCfi               *AclFieldData  `protobuf:"bytes,29,opt,name=field_outer_vlan_cfi,json=fieldOuterVlanCfi,proto3" json:"field_outer_vlan_cfi,omitempty"`
	FieldInnerVlanId                *AclFieldData  `protobuf:"bytes,30,opt,name=field_inner_vlan_id,json=fieldInnerVlanId,proto3" json:"field_inner_vlan_id,omitempty"`
	FieldInnerVlanPri               *AclFieldData  `protobuf:"bytes,31,opt,name=field_inner_vlan_pri,json=fieldInnerVlanPri,proto3" json:"field_inner_vlan_pri,omitempty"`
	FieldInnerVlanCfi               *AclFieldData  `protobuf:"bytes,32,opt,name=field_inner_vlan_cfi,json=fieldInnerVlanCfi,proto3" json:"field_inner_vlan_cfi,omitempty"`
	FieldL4SrcPort                  *AclFieldData  `protobuf:"bytes,33,opt,name=field_l4_src_port,json=fieldL4SrcPort,proto3" json:"field_l4_src_port,omitempty"`
	FieldL4DstPort                  *AclFieldData  `protobuf:"bytes,34,opt,name=field_l4_dst_port,json=fieldL4DstPort,proto3" json:"field_l4_dst_port,omitempty"`
	FieldInnerL4SrcPort             *AclFieldData  `protobuf:"bytes,35,opt,name=field_inner_l4_src_port,json=fieldInnerL4SrcPort,proto3" json:"field_inner_l4_src_port,omitempty"`
	FieldInnerL4DstPort             *AclFieldData  `protobuf:"bytes,36,opt,name=field_inner_l4_dst_port,json=fieldInnerL4DstPort,proto3" json:"field_inner_l4_dst_port,omitempty"`
	FieldEtherType                  *AclFieldData  `protobuf:"bytes,37,opt,name=field_ether_type,json=fieldEtherType,proto3" json:"field_ether_type,omitempty"`
	FieldInnerEtherType             *AclFieldData  `protobuf:"bytes,38,opt,name=field_inner_ether_type,json=fieldInnerEtherType,proto3" json:"field_inner_ether_type,omitempty"`
	FieldIpProtocol                 *AclFieldData  `protobuf:"bytes,39,opt,name=field_ip_protocol,json=fieldIpProtocol,proto3" json:"field_ip_protocol,omitempty"`
	FieldInnerIpProtocol            *AclFieldData  `protobuf:"bytes,40,opt,name=field_inner_ip_protocol,json=fieldInnerIpProtocol,proto3" json:"field_inner_ip_protocol,omitempty"`
	FieldIpIdentification           *AclFieldData  `protobuf:"bytes,41,opt,name=field_ip_identification,json=fieldIpIdentification,proto3" json:"field_ip_identification,omitempty"`
	FieldDscp                       *AclFieldData  `protobuf:"bytes,42,opt,name=field_dscp,json=fieldDscp,proto3" json:"field_dscp,omitempty"`
	FieldEcn                        *AclFieldData  `protobuf:"bytes,43,opt,name=field_ecn,json=fieldEcn,proto3" json:"field_ecn,omitempty"`
	FieldTtl                        *AclFieldData  `protobuf:"bytes,44,opt,name=field_ttl,json=fieldTtl,proto3" json:"field_ttl,omitempty"`
	FieldTos                        *AclFieldData  `protobuf:"bytes,45,opt,name=field_tos,json=fieldTos,proto3" json:"field_tos,omitempty"`
	FieldIpFlags                    *AclFieldData  `protobuf:"bytes,46,opt,name=field_ip_flags,json=fieldIpFlags,proto3" json:"field_ip_flags,omitempty"`
	FieldTcpFlags                   *AclFieldData  `protobuf:"bytes,47,opt,name=field_tcp_flags,json=fieldTcpFlags,proto3" json:"field_tcp_flags,omitempty"`
	FieldAclIpType                  *AclFieldData  `protobuf:"bytes,48,opt,name=field_acl_ip_type,json=fieldAclIpType,proto3" json:"field_acl_ip_type,omitempty"`
	FieldAclIpFrag                  *AclFieldData  `protobuf:"bytes,49,opt,name=field_acl_ip_frag,json=fieldAclIpFrag,proto3" json:"field_acl_ip_frag,omitempty"`
	FieldIpv6FlowLabel              *AclFieldData  `protobuf:"bytes,50,opt,name=field_ipv6_flow_label,json=fieldIpv6FlowLabel,proto3" json:"field_ipv6_flow_label,omitempty"`
	FieldTc                         *AclFieldData  `protobuf:"bytes,51,opt,name=field_tc,json=fieldTc,proto3" json:"field_tc,omitempty"`
	FieldIcmpType                   *AclFieldData  `protobuf:"bytes,52,opt,name=field_icmp_type,json=fieldIcmpType,proto3" json:"field_icmp_type,omitempty"`
	FieldIcmpCode                   *AclFieldData  `protobuf:"bytes,53,opt,name=field_icmp_code,json=fieldIcmpCode,proto3" json:"field_icmp_code,omitempty"`
	FieldIcmpv6Type                 *AclFieldData  `protobuf:"bytes,54,opt,name=field_icmpv6_type,json=fieldIcmpv6Type,proto3" json:"field_icmpv6_type,omitempty"`
	FieldIcmpv6Code                 *AclFieldData  `protobuf:"bytes,55,opt,name=field_icmpv6_code,json=fieldIcmpv6Code,proto3" json:"field_icmpv6_code,omitempty"`
	FieldPacketVlan                 *AclFieldData  `protobuf:"bytes,56,opt,name=field_packet_vlan,json=fieldPacketVlan,proto3" json:"field_packet_vlan,omitempty"`
	FieldTunnelVni                  *AclFieldData  `protobuf:"bytes,57,opt,name=field_tunnel_vni,json=fieldTunnelVni,proto3" json:"field_tunnel_vni,omitempty"`
	FieldHasVlanTag                 *AclFieldData  `protobuf:"bytes,58,opt,name=field_has_vlan_tag,json=fieldHasVlanTag,proto3" json:"field_has_vlan_tag,omitempty"`
	FieldMacsecSci                  *AclFieldData  `protobuf:"bytes,59,opt,name=field_macsec_sci,json=fieldMacsecSci,proto3" json:"field_macsec_sci,omitempty"`
	FieldMplsLabel0Label            *AclFieldData  `protobuf:"bytes,60,opt,name=field_mpls_label0_label,json=fieldMplsLabel0Label,proto3" json:"field_mpls_label0_label,omitempty"`
	FieldMplsLabel0Ttl              *AclFieldData  `protobuf:"bytes,61,opt,name=field_mpls_label0_ttl,json=fieldMplsLabel0Ttl,proto3" json:"field_mpls_label0_ttl,omitempty"`
	FieldMplsLabel0Exp              *AclFieldData  `protobuf:"bytes,62,opt,name=field_mpls_label0_exp,json=fieldMplsLabel0Exp,proto3" json:"field_mpls_label0_exp,omitempty"`
	FieldMplsLabel0Bos              *AclFieldData  `protobuf:"bytes,63,opt,name=field_mpls_label0_bos,json=fieldMplsLabel0Bos,proto3" json:"field_mpls_label0_bos,omitempty"`
	FieldMplsLabel1Label            *AclFieldData  `protobuf:"bytes,64,opt,name=field_mpls_label1_label,json=fieldMplsLabel1Label,proto3" json:"field_mpls_label1_label,omitempty"`
	FieldMplsLabel1Ttl              *AclFieldData  `protobuf:"bytes,65,opt,name=field_mpls_label1_ttl,json=fieldMplsLabel1Ttl,proto3" json:"field_mpls_label1_ttl,omitempty"`
	FieldMplsLabel1Exp              *AclFieldData  `protobuf:"bytes,66,opt,name=field_mpls_label1_exp,json=fieldMplsLabel1Exp,proto3" json:"field_mpls_label1_exp,omitempty"`
	FieldMplsLabel1Bos              *AclFieldData  `protobuf:"bytes,67,opt,name=field_mpls_label1_bos,json=fieldMplsLabel1Bos,proto3" json:"field_mpls_label1_bos,omitempty"`
	FieldMplsLabel2Label            *AclFieldData  `protobuf:"bytes,68,opt,name=field_mpls_label2_label,json=fieldMplsLabel2Label,proto3" json:"field_mpls_label2_label,omitempty"`
	FieldMplsLabel2Ttl              *AclFieldData  `protobuf:"bytes,69,opt,name=field_mpls_label2_ttl,json=fieldMplsLabel2Ttl,proto3" json:"field_mpls_label2_ttl,omitempty"`
	FieldMplsLabel2Exp              *AclFieldData  `protobuf:"bytes,70,opt,name=field_mpls_label2_exp,json=fieldMplsLabel2Exp,proto3" json:"field_mpls_label2_exp,omitempty"`
	FieldMplsLabel2Bos              *AclFieldData  `protobuf:"bytes,71,opt,name=field_mpls_label2_bos,json=fieldMplsLabel2Bos,proto3" json:"field_mpls_label2_bos,omitempty"`
	FieldMplsLabel3Label            *AclFieldData  `protobuf:"bytes,72,opt,name=field_mpls_label3_label,json=fieldMplsLabel3Label,proto3" json:"field_mpls_label3_label,omitempty"`
	FieldMplsLabel3Ttl              *AclFieldData  `protobuf:"bytes,73,opt,name=field_mpls_label3_ttl,json=fieldMplsLabel3Ttl,proto3" json:"field_mpls_label3_ttl,omitempty"`
	FieldMplsLabel3Exp              *AclFieldData  `protobuf:"bytes,74,opt,name=field_mpls_label3_exp,json=fieldMplsLabel3Exp,proto3" json:"field_mpls_label3_exp,omitempty"`
	FieldMplsLabel3Bos              *AclFieldData  `protobuf:"bytes,75,opt,name=field_mpls_label3_bos,json=fieldMplsLabel3Bos,proto3" json:"field_mpls_label3_bos,omitempty"`
	FieldMplsLabel4Label            *AclFieldData  `protobuf:"bytes,76,opt,name=field_mpls_label4_label,json=fieldMplsLabel4Label,proto3" json:"field_mpls_label4_label,omitempty"`
	FieldMplsLabel4Ttl              *AclFieldData  `protobuf:"bytes,77,opt,name=field_mpls_label4_ttl,json=fieldMplsLabel4Ttl,proto3" json:"field_mpls_label4_ttl,omitempty"`
	FieldMplsLabel4Exp              *AclFieldData  `protobuf:"bytes,78,opt,name=field_mpls_label4_exp,json=fieldMplsLabel4Exp,proto3" json:"field_mpls_label4_exp,omitempty"`
	FieldMplsLabel4Bos              *AclFieldData  `protobuf:"bytes,79,opt,name=field_mpls_label4_bos,json=fieldMplsLabel4Bos,proto3" json:"field_mpls_label4_bos,omitempty"`
	FieldFdbDstUserMeta             *AclFieldData  `protobuf:"bytes,80,opt,name=field_fdb_dst_user_meta,json=fieldFdbDstUserMeta,proto3" json:"field_fdb_dst_user_meta,omitempty"`
	FieldRouteDstUserMeta           *AclFieldData  `protobuf:"bytes,81,opt,name=field_route_dst_user_meta,json=fieldRouteDstUserMeta,proto3" json:"field_route_dst_user_meta,omitempty"`
	FieldNeighborDstUserMeta        *AclFieldData  `protobuf:"bytes,82,opt,name=field_neighbor_dst_user_meta,json=fieldNeighborDstUserMeta,proto3" json:"field_neighbor_dst_user_meta,omitempty"`
	FieldPortUserMeta               *AclFieldData  `protobuf:"bytes,83,opt,name=field_port_user_meta,json=fieldPortUserMeta,proto3" json:"field_port_user_meta,omitempty"`
	FieldVlanUserMeta               *AclFieldData  `protobuf:"bytes,84,opt,name=field_vlan_user_meta,json=fieldVlanUserMeta,proto3" json:"field_vlan_user_meta,omitempty"`
	FieldAclUserMeta                *AclFieldData  `protobuf:"bytes,85,opt,name=field_acl_user_meta,json=fieldAclUserMeta,proto3" json:"field_acl_user_meta,omitempty"`
	FieldFdbNpuMetaDstHit           *AclFieldData  `protobuf:"bytes,86,opt,name=field_fdb_npu_meta_dst_hit,json=fieldFdbNpuMetaDstHit,proto3" json:"field_fdb_npu_meta_dst_hit,omitempty"`
	FieldNeighborNpuMetaDstHit      *AclFieldData  `protobuf:"bytes,87,opt,name=field_neighbor_npu_meta_dst_hit,json=fieldNeighborNpuMetaDstHit,proto3" json:"field_neighbor_npu_meta_dst_hit,omitempty"`
	FieldRouteNpuMetaDstHit         *AclFieldData  `protobuf:"bytes,88,opt,name=field_route_npu_meta_dst_hit,json=fieldRouteNpuMetaDstHit,proto3" json:"field_route_npu_meta_dst_hit,omitempty"`
	FieldBthOpcode                  *AclFieldData  `protobuf:"bytes,89,opt,name=field_bth_opcode,json=fieldBthOpcode,proto3" json:"field_bth_opcode,omitempty"`
	FieldAethSyndrome               *AclFieldData  `protobuf:"bytes,90,opt,name=field_aeth_syndrome,json=fieldAethSyndrome,proto3" json:"field_aeth_syndrome,omitempty"`
	UserDefinedFieldGroupMin        *AclFieldData  `protobuf:"bytes,91,opt,name=user_defined_field_group_min,json=userDefinedFieldGroupMin,proto3" json:"user_defined_field_group_min,omitempty"`
	UserDefinedFieldGroupMax        *AclFieldData  `protobuf:"bytes,92,opt,name=user_defined_field_group_max,json=userDefinedFieldGroupMax,proto3" json:"user_defined_field_group_max,omitempty"`
	FieldAclRangeType               *AclFieldData  `protobuf:"bytes,93,opt,name=field_acl_range_type,json=fieldAclRangeType,proto3" json:"field_acl_range_type,omitempty"`
	FieldIpv6NextHeader             *AclFieldData  `protobuf:"bytes,94,opt,name=field_ipv6_next_header,json=fieldIpv6NextHeader,proto3" json:"field_ipv6_next_header,omitempty"`
	FieldGreKey                     *AclFieldData  `protobuf:"bytes,95,opt,name=field_gre_key,json=fieldGreKey,proto3" json:"field_gre_key,omitempty"`
	FieldTamIntType                 *AclFieldData  `protobuf:"bytes,96,opt,name=field_tam_int_type,json=fieldTamIntType,proto3" json:"field_tam_int_type,omitempty"`
	ActionRedirect                  *AclActionData `protobuf:"bytes,97,opt,name=action_redirect,json=actionRedirect,proto3" json:"action_redirect,omitempty"`
	ActionEndpointIp                *AclActionData `protobuf:"bytes,98,opt,name=action_endpoint_ip,json=actionEndpointIp,proto3" json:"action_endpoint_ip,omitempty"`
	ActionRedirectList              *AclActionData `protobuf:"bytes,99,opt,name=action_redirect_list,json=actionRedirectList,proto3" json:"action_redirect_list,omitempty"`
	ActionPacketAction              *AclActionData `protobuf:"bytes,100,opt,name=action_packet_action,json=actionPacketAction,proto3" json:"action_packet_action,omitempty"`
	ActionFlood                     *AclActionData `protobuf:"bytes,101,opt,name=action_flood,json=actionFlood,proto3" json:"action_flood,omitempty"`
	ActionCounter                   *AclActionData `protobuf:"bytes,102,opt,name=action_counter,json=actionCounter,proto3" json:"action_counter,omitempty"`
	ActionMirrorIngress             *AclActionData `protobuf:"bytes,103,opt,name=action_mirror_ingress,json=actionMirrorIngress,proto3" json:"action_mirror_ingress,omitempty"`
	ActionMirrorEgress              *AclActionData `protobuf:"bytes,104,opt,name=action_mirror_egress,json=actionMirrorEgress,proto3" json:"action_mirror_egress,omitempty"`
	ActionSetPolicer                *AclActionData `protobuf:"bytes,105,opt,name=action_set_policer,json=actionSetPolicer,proto3" json:"action_set_policer,omitempty"`
	ActionDecrementTtl              *AclActionData `protobuf:"bytes,106,opt,name=action_decrement_ttl,json=actionDecrementTtl,proto3" json:"action_decrement_ttl,omitempty"`
	ActionSetTc                     *AclActionData `protobuf:"bytes,107,opt,name=action_set_tc,json=actionSetTc,proto3" json:"action_set_tc,omitempty"`
	ActionSetPacketColor            *AclActionData `protobuf:"bytes,108,opt,name=action_set_packet_color,json=actionSetPacketColor,proto3" json:"action_set_packet_color,omitempty"`
	ActionSetInnerVlanId            *AclActionData `protobuf:"bytes,109,opt,name=action_set_inner_vlan_id,json=actionSetInnerVlanId,proto3" json:"action_set_inner_vlan_id,omitempty"`
	ActionSetInnerVlanPri           *AclActionData `protobuf:"bytes,110,opt,name=action_set_inner_vlan_pri,json=actionSetInnerVlanPri,proto3" json:"action_set_inner_vlan_pri,omitempty"`
	ActionSetOuterVlanId            *AclActionData `protobuf:"bytes,111,opt,name=action_set_outer_vlan_id,json=actionSetOuterVlanId,proto3" json:"action_set_outer_vlan_id,omitempty"`
	ActionSetOuterVlanPri           *AclActionData `protobuf:"bytes,112,opt,name=action_set_outer_vlan_pri,json=actionSetOuterVlanPri,proto3" json:"action_set_outer_vlan_pri,omitempty"`
	ActionAddVlanId                 *AclActionData `protobuf:"bytes,113,opt,name=action_add_vlan_id,json=actionAddVlanId,proto3" json:"action_add_vlan_id,omitempty"`
	ActionAddVlanPri                *AclActionData `protobuf:"bytes,114,opt,name=action_add_vlan_pri,json=actionAddVlanPri,proto3" json:"action_add_vlan_pri,omitempty"`
	ActionSetSrcMac                 *AclActionData `protobuf:"bytes,115,opt,name=action_set_src_mac,json=actionSetSrcMac,proto3" json:"action_set_src_mac,omitempty"`
	ActionSetDstMac                 *AclActionData `protobuf:"bytes,116,opt,name=action_set_dst_mac,json=actionSetDstMac,proto3" json:"action_set_dst_mac,omitempty"`
	ActionSetSrcIp                  *AclActionData `protobuf:"bytes,117,opt,name=action_set_src_ip,json=actionSetSrcIp,proto3" json:"action_set_src_ip,omitempty"`
	ActionSetDstIp                  *AclActionData `protobuf:"bytes,118,opt,name=action_set_dst_ip,json=actionSetDstIp,proto3" json:"action_set_dst_ip,omitempty"`
	ActionSetSrcIpv6                *AclActionData `protobuf:"bytes,119,opt,name=action_set_src_ipv6,json=actionSetSrcIpv6,proto3" json:"action_set_src_ipv6,omitempty"`
	ActionSetDstIpv6                *AclActionData `protobuf:"bytes,120,opt,name=action_set_dst_ipv6,json=actionSetDstIpv6,proto3" json:"action_set_dst_ipv6,omitempty"`
	ActionSetDscp                   *AclActionData `protobuf:"bytes,121,opt,name=action_set_dscp,json=actionSetDscp,proto3" json:"action_set_dscp,omitempty"`
	ActionSetEcn                    *AclActionData `protobuf:"bytes,122,opt,name=action_set_ecn,json=actionSetEcn,proto3" json:"action_set_ecn,omitempty"`
	ActionSetL4SrcPort              *AclActionData `protobuf:"bytes,123,opt,name=action_set_l4_src_port,json=actionSetL4SrcPort,proto3" json:"action_set_l4_src_port,omitempty"`
	ActionSetL4DstPort              *AclActionData `protobuf:"bytes,124,opt,name=action_set_l4_dst_port,json=actionSetL4DstPort,proto3" json:"action_set_l4_dst_port,omitempty"`
	ActionIngressSamplepacketEnable *AclActionData `protobuf:"bytes,125,opt,name=action_ingress_samplepacket_enable,json=actionIngressSamplepacketEnable,proto3" json:"action_ingress_samplepacket_enable,omitempty"`
	ActionEgressSamplepacketEnable  *AclActionData `protobuf:"bytes,126,opt,name=action_egress_samplepacket_enable,json=actionEgressSamplepacketEnable,proto3" json:"action_egress_samplepacket_enable,omitempty"`
	ActionSetAclMetaData            *AclActionData `protobuf:"bytes,127,opt,name=action_set_acl_meta_data,json=actionSetAclMetaData,proto3" json:"action_set_acl_meta_data,omitempty"`
	ActionEgressBlockPortList       *AclActionData `protobuf:"bytes,128,opt,name=action_egress_block_port_list,json=actionEgressBlockPortList,proto3" json:"action_egress_block_port_list,omitempty"`
	ActionSetUserTrapId             *AclActionData `protobuf:"bytes,129,opt,name=action_set_user_trap_id,json=actionSetUserTrapId,proto3" json:"action_set_user_trap_id,omitempty"`
	ActionSetDoNotLearn             *AclActionData `protobuf:"bytes,130,opt,name=action_set_do_not_learn,json=actionSetDoNotLearn,proto3" json:"action_set_do_not_learn,omitempty"`
	ActionAclDtelFlowOp             *AclActionData `protobuf:"bytes,131,opt,name=action_acl_dtel_flow_op,json=actionAclDtelFlowOp,proto3" json:"action_acl_dtel_flow_op,omitempty"`
	ActionDtelIntSession            *AclActionData `protobuf:"bytes,132,opt,name=action_dtel_int_session,json=actionDtelIntSession,proto3" json:"action_dtel_int_session,omitempty"`
	ActionDtelDropReportEnable      *AclActionData `protobuf:"bytes,133,opt,name=action_dtel_drop_report_enable,json=actionDtelDropReportEnable,proto3" json:"action_dtel_drop_report_enable,omitempty"`
	ActionDtelTailDropReportEnable  *AclActionData `protobuf:"bytes,134,opt,name=action_dtel_tail_drop_report_enable,json=actionDtelTailDropReportEnable,proto3" json:"action_dtel_tail_drop_report_enable,omitempty"`
	ActionDtelFlowSamplePercent     *AclActionData `protobuf:"bytes,135,opt,name=action_dtel_flow_sample_percent,json=actionDtelFlowSamplePercent,proto3" json:"action_dtel_flow_sample_percent,omitempty"`
	ActionDtelReportAllPackets      *AclActionData `protobuf:"bytes,136,opt,name=action_dtel_report_all_packets,json=actionDtelReportAllPackets,proto3" json:"action_dtel_report_all_packets,omitempty"`
	ActionNoNat                     *AclActionData `protobuf:"bytes,137,opt,name=action_no_nat,json=actionNoNat,proto3" json:"action_no_nat,omitempty"`
	ActionIntInsert                 *AclActionData `protobuf:"bytes,138,opt,name=action_int_insert,json=actionIntInsert,proto3" json:"action_int_insert,omitempty"`
	ActionIntDelete                 *AclActionData `protobuf:"bytes,139,opt,name=action_int_delete,json=actionIntDelete,proto3" json:"action_int_delete,omitempty"`
	ActionIntReportFlow             *AclActionData `protobuf:"bytes,140,opt,name=action_int_report_flow,json=actionIntReportFlow,proto3" json:"action_int_report_flow,omitempty"`
	ActionIntReportDrops            *AclActionData `protobuf:"bytes,141,opt,name=action_int_report_drops,json=actionIntReportDrops,proto3" json:"action_int_report_drops,omitempty"`
	ActionIntReportTailDrops        *AclActionData `protobuf:"bytes,142,opt,name=action_int_report_tail_drops,json=actionIntReportTailDrops,proto3" json:"action_int_report_tail_drops,omitempty"`
	ActionTamIntObject              *AclActionData `protobuf:"bytes,143,opt,name=action_tam_int_object,json=actionTamIntObject,proto3" json:"action_tam_int_object,omitempty"`
	ActionSetIsolationGroup         *AclActionData `protobuf:"bytes,144,opt,name=action_set_isolation_group,json=actionSetIsolationGroup,proto3" json:"action_set_isolation_group,omitempty"`
	ActionMacsecFlow                *AclActionData `protobuf:"bytes,145,opt,name=action_macsec_flow,json=actionMacsecFlow,proto3" json:"action_macsec_flow,omitempty"`
	ActionSetLagHashId              *AclActionData `protobuf:"bytes,146,opt,name=action_set_lag_hash_id,json=actionSetLagHashId,proto3" json:"action_set_lag_hash_id,omitempty"`
	ActionSetEcmpHashId             *AclActionData `protobuf:"bytes,147,opt,name=action_set_ecmp_hash_id,json=actionSetEcmpHashId,proto3" json:"action_set_ecmp_hash_id,omitempty"`
	ActionSetVrf                    *AclActionData `protobuf:"bytes,148,opt,name=action_set_vrf,json=actionSetVrf,proto3" json:"action_set_vrf,omitempty"`
	ActionSetForwardingClass        *AclActionData `protobuf:"bytes,149,opt,name=action_set_forwarding_class,json=actionSetForwardingClass,proto3" json:"action_set_forwarding_class,omitempty"`
}

func (x *AclEntryAttribute) Reset() {
	*x = AclEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclEntryAttribute) ProtoMessage() {}

func (x *AclEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclEntryAttribute.ProtoReflect.Descriptor instead.
func (*AclEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{31}
}

func (x *AclEntryAttribute) GetTableId() uint64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *AclEntryAttribute) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *AclEntryAttribute) GetAdminState() bool {
	if x != nil {
		return x.AdminState
	}
	return false
}

func (x *AclEntryAttribute) GetFieldSrcIpv6() *AclFieldData {
	if x != nil {
		return x.FieldSrcIpv6
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldSrcIpv6Word3() *AclFieldData {
	if x != nil {
		return x.FieldSrcIpv6Word3
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldSrcIpv6Word2() *AclFieldData {
	if x != nil {
		return x.FieldSrcIpv6Word2
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldSrcIpv6Word1() *AclFieldData {
	if x != nil {
		return x.FieldSrcIpv6Word1
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldSrcIpv6Word0() *AclFieldData {
	if x != nil {
		return x.FieldSrcIpv6Word0
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldDstIpv6() *AclFieldData {
	if x != nil {
		return x.FieldDstIpv6
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldDstIpv6Word3() *AclFieldData {
	if x != nil {
		return x.FieldDstIpv6Word3
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldDstIpv6Word2() *AclFieldData {
	if x != nil {
		return x.FieldDstIpv6Word2
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldDstIpv6Word1() *AclFieldData {
	if x != nil {
		return x.FieldDstIpv6Word1
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldDstIpv6Word0() *AclFieldData {
	if x != nil {
		return x.FieldDstIpv6Word0
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInnerSrcIpv6() *AclFieldData {
	if x != nil {
		return x.FieldInnerSrcIpv6
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInnerDstIpv6() *AclFieldData {
	if x != nil {
		return x.FieldInnerDstIpv6
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldSrcMac() *AclFieldData {
	if x != nil {
		return x.FieldSrcMac
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldDstMac() *AclFieldData {
	if x != nil {
		return x.FieldDstMac
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldSrcIp() *AclFieldData {
	if x != nil {
		return x.FieldSrcIp
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldDstIp() *AclFieldData {
	if x != nil {
		return x.FieldDstIp
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInnerSrcIp() *AclFieldData {
	if x != nil {
		return x.FieldInnerSrcIp
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInnerDstIp() *AclFieldData {
	if x != nil {
		return x.FieldInnerDstIp
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInPorts() *AclFieldData {
	if x != nil {
		return x.FieldInPorts
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldOutPorts() *AclFieldData {
	if x != nil {
		return x.FieldOutPorts
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInPort() *AclFieldData {
	if x != nil {
		return x.FieldInPort
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldOutPort() *AclFieldData {
	if x != nil {
		return x.FieldOutPort
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldSrcPort() *AclFieldData {
	if x != nil {
		return x.FieldSrcPort
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldOuterVlanId() *AclFieldData {
	if x != nil {
		return x.FieldOuterVlanId
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldOuterVlanPri() *AclFieldData {
	if x != nil {
		return x.FieldOuterVlanPri
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldOuterVlanCfi() *AclFieldData {
	if x != nil {
		return x.FieldOuterVlanCfi
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInnerVlanId() *AclFieldData {
	if x != nil {
		return x.FieldInnerVlanId
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInnerVlanPri() *AclFieldData {
	if x != nil {
		return x.FieldInnerVlanPri
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInnerVlanCfi() *AclFieldData {
	if x != nil {
		return x.FieldInnerVlanCfi
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldL4SrcPort() *AclFieldData {
	if x != nil {
		return x.FieldL4SrcPort
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldL4DstPort() *AclFieldData {
	if x != nil {
		return x.FieldL4DstPort
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInnerL4SrcPort() *AclFieldData {
	if x != nil {
		return x.FieldInnerL4SrcPort
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInnerL4DstPort() *AclFieldData {
	if x != nil {
		return x.FieldInnerL4DstPort
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldEtherType() *AclFieldData {
	if x != nil {
		return x.FieldEtherType
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInnerEtherType() *AclFieldData {
	if x != nil {
		return x.FieldInnerEtherType
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldIpProtocol() *AclFieldData {
	if x != nil {
		return x.FieldIpProtocol
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldInnerIpProtocol() *AclFieldData {
	if x != nil {
		return x.FieldInnerIpProtocol
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldIpIdentification() *AclFieldData {
	if x != nil {
		return x.FieldIpIdentification
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldDscp() *AclFieldData {
	if x != nil {
		return x.FieldDscp
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldEcn() *AclFieldData {
	if x != nil {
		return x.FieldEcn
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldTtl() *AclFieldData {
	if x != nil {
		return x.FieldTtl
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldTos() *AclFieldData {
	if x != nil {
		return x.FieldTos
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldIpFlags() *AclFieldData {
	if x != nil {
		return x.FieldIpFlags
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldTcpFlags() *AclFieldData {
	if x != nil {
		return x.FieldTcpFlags
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldAclIpType() *AclFieldData {
	if x != nil {
		return x.FieldAclIpType
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldAclIpFrag() *AclFieldData {
	if x != nil {
		return x.FieldAclIpFrag
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldIpv6FlowLabel() *AclFieldData {
	if x != nil {
		return x.FieldIpv6FlowLabel
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldTc() *AclFieldData {
	if x != nil {
		return x.FieldTc
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldIcmpType() *AclFieldData {
	if x != nil {
		return x.FieldIcmpType
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldIcmpCode() *AclFieldData {
	if x != nil {
		return x.FieldIcmpCode
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldIcmpv6Type() *AclFieldData {
	if x != nil {
		return x.FieldIcmpv6Type
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldIcmpv6Code() *AclFieldData {
	if x != nil {
		return x.FieldIcmpv6Code
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldPacketVlan() *AclFieldData {
	if x != nil {
		return x.FieldPacketVlan
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldTunnelVni() *AclFieldData {
	if x != nil {
		return x.FieldTunnelVni
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldHasVlanTag() *AclFieldData {
	if x != nil {
		return x.FieldHasVlanTag
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMacsecSci() *AclFieldData {
	if x != nil {
		return x.FieldMacsecSci
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel0Label() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel0Label
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel0Ttl() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel0Ttl
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel0Exp() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel0Exp
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel0Bos() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel0Bos
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel1Label() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel1Label
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel1Ttl() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel1Ttl
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel1Exp() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel1Exp
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel1Bos() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel1Bos
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel2Label() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel2Label
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel2Ttl() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel2Ttl
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel2Exp() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel2Exp
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel2Bos() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel2Bos
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel3Label() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel3Label
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel3Ttl() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel3Ttl
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel3Exp() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel3Exp
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel3Bos() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel3Bos
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel4Label() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel4Label
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel4Ttl() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel4Ttl
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel4Exp() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel4Exp
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldMplsLabel4Bos() *AclFieldData {
	if x != nil {
		return x.FieldMplsLabel4Bos
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldFdbDstUserMeta() *AclFieldData {
	if x != nil {
		return x.FieldFdbDstUserMeta
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldRouteDstUserMeta() *AclFieldData {
	if x != nil {
		return x.FieldRouteDstUserMeta
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldNeighborDstUserMeta() *AclFieldData {
	if x != nil {
		return x.FieldNeighborDstUserMeta
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldPortUserMeta() *AclFieldData {
	if x != nil {
		return x.FieldPortUserMeta
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldVlanUserMeta() *AclFieldData {
	if x != nil {
		return x.FieldVlanUserMeta
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldAclUserMeta() *AclFieldData {
	if x != nil {
		return x.FieldAclUserMeta
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldFdbNpuMetaDstHit() *AclFieldData {
	if x != nil {
		return x.FieldFdbNpuMetaDstHit
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldNeighborNpuMetaDstHit() *AclFieldData {
	if x != nil {
		return x.FieldNeighborNpuMetaDstHit
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldRouteNpuMetaDstHit() *AclFieldData {
	if x != nil {
		return x.FieldRouteNpuMetaDstHit
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldBthOpcode() *AclFieldData {
	if x != nil {
		return x.FieldBthOpcode
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldAethSyndrome() *AclFieldData {
	if x != nil {
		return x.FieldAethSyndrome
	}
	return nil
}

func (x *AclEntryAttribute) GetUserDefinedFieldGroupMin() *AclFieldData {
	if x != nil {
		return x.UserDefinedFieldGroupMin
	}
	return nil
}

func (x *AclEntryAttribute) GetUserDefinedFieldGroupMax() *AclFieldData {
	if x != nil {
		return x.UserDefinedFieldGroupMax
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldAclRangeType() *AclFieldData {
	if x != nil {
		return x.FieldAclRangeType
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldIpv6NextHeader() *AclFieldData {
	if x != nil {
		return x.FieldIpv6NextHeader
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldGreKey() *AclFieldData {
	if x != nil {
		return x.FieldGreKey
	}
	return nil
}

func (x *AclEntryAttribute) GetFieldTamIntType() *AclFieldData {
	if x != nil {
		return x.FieldTamIntType
	}
	return nil
}

func (x *AclEntryAttribute) GetActionRedirect() *AclActionData {
	if x != nil {
		return x.ActionRedirect
	}
	return nil
}

func (x *AclEntryAttribute) GetActionEndpointIp() *AclActionData {
	if x != nil {
		return x.ActionEndpointIp
	}
	return nil
}

func (x *AclEntryAttribute) GetActionRedirectList() *AclActionData {
	if x != nil {
		return x.ActionRedirectList
	}
	return nil
}

func (x *AclEntryAttribute) GetActionPacketAction() *AclActionData {
	if x != nil {
		return x.ActionPacketAction
	}
	return nil
}

func (x *AclEntryAttribute) GetActionFlood() *AclActionData {
	if x != nil {
		return x.ActionFlood
	}
	return nil
}

func (x *AclEntryAttribute) GetActionCounter() *AclActionData {
	if x != nil {
		return x.ActionCounter
	}
	return nil
}

func (x *AclEntryAttribute) GetActionMirrorIngress() *AclActionData {
	if x != nil {
		return x.ActionMirrorIngress
	}
	return nil
}

func (x *AclEntryAttribute) GetActionMirrorEgress() *AclActionData {
	if x != nil {
		return x.ActionMirrorEgress
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetPolicer() *AclActionData {
	if x != nil {
		return x.ActionSetPolicer
	}
	return nil
}

func (x *AclEntryAttribute) GetActionDecrementTtl() *AclActionData {
	if x != nil {
		return x.ActionDecrementTtl
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetTc() *AclActionData {
	if x != nil {
		return x.ActionSetTc
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetPacketColor() *AclActionData {
	if x != nil {
		return x.ActionSetPacketColor
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetInnerVlanId() *AclActionData {
	if x != nil {
		return x.ActionSetInnerVlanId
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetInnerVlanPri() *AclActionData {
	if x != nil {
		return x.ActionSetInnerVlanPri
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetOuterVlanId() *AclActionData {
	if x != nil {
		return x.ActionSetOuterVlanId
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetOuterVlanPri() *AclActionData {
	if x != nil {
		return x.ActionSetOuterVlanPri
	}
	return nil
}

func (x *AclEntryAttribute) GetActionAddVlanId() *AclActionData {
	if x != nil {
		return x.ActionAddVlanId
	}
	return nil
}

func (x *AclEntryAttribute) GetActionAddVlanPri() *AclActionData {
	if x != nil {
		return x.ActionAddVlanPri
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetSrcMac() *AclActionData {
	if x != nil {
		return x.ActionSetSrcMac
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetDstMac() *AclActionData {
	if x != nil {
		return x.ActionSetDstMac
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetSrcIp() *AclActionData {
	if x != nil {
		return x.ActionSetSrcIp
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetDstIp() *AclActionData {
	if x != nil {
		return x.ActionSetDstIp
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetSrcIpv6() *AclActionData {
	if x != nil {
		return x.ActionSetSrcIpv6
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetDstIpv6() *AclActionData {
	if x != nil {
		return x.ActionSetDstIpv6
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetDscp() *AclActionData {
	if x != nil {
		return x.ActionSetDscp
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetEcn() *AclActionData {
	if x != nil {
		return x.ActionSetEcn
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetL4SrcPort() *AclActionData {
	if x != nil {
		return x.ActionSetL4SrcPort
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetL4DstPort() *AclActionData {
	if x != nil {
		return x.ActionSetL4DstPort
	}
	return nil
}

func (x *AclEntryAttribute) GetActionIngressSamplepacketEnable() *AclActionData {
	if x != nil {
		return x.ActionIngressSamplepacketEnable
	}
	return nil
}

func (x *AclEntryAttribute) GetActionEgressSamplepacketEnable() *AclActionData {
	if x != nil {
		return x.ActionEgressSamplepacketEnable
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetAclMetaData() *AclActionData {
	if x != nil {
		return x.ActionSetAclMetaData
	}
	return nil
}

func (x *AclEntryAttribute) GetActionEgressBlockPortList() *AclActionData {
	if x != nil {
		return x.ActionEgressBlockPortList
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetUserTrapId() *AclActionData {
	if x != nil {
		return x.ActionSetUserTrapId
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetDoNotLearn() *AclActionData {
	if x != nil {
		return x.ActionSetDoNotLearn
	}
	return nil
}

func (x *AclEntryAttribute) GetActionAclDtelFlowOp() *AclActionData {
	if x != nil {
		return x.ActionAclDtelFlowOp
	}
	return nil
}

func (x *AclEntryAttribute) GetActionDtelIntSession() *AclActionData {
	if x != nil {
		return x.ActionDtelIntSession
	}
	return nil
}

func (x *AclEntryAttribute) GetActionDtelDropReportEnable() *AclActionData {
	if x != nil {
		return x.ActionDtelDropReportEnable
	}
	return nil
}

func (x *AclEntryAttribute) GetActionDtelTailDropReportEnable() *AclActionData {
	if x != nil {
		return x.ActionDtelTailDropReportEnable
	}
	return nil
}

func (x *AclEntryAttribute) GetActionDtelFlowSamplePercent() *AclActionData {
	if x != nil {
		return x.ActionDtelFlowSamplePercent
	}
	return nil
}

func (x *AclEntryAttribute) GetActionDtelReportAllPackets() *AclActionData {
	if x != nil {
		return x.ActionDtelReportAllPackets
	}
	return nil
}

func (x *AclEntryAttribute) GetActionNoNat() *AclActionData {
	if x != nil {
		return x.ActionNoNat
	}
	return nil
}

func (x *AclEntryAttribute) GetActionIntInsert() *AclActionData {
	if x != nil {
		return x.ActionIntInsert
	}
	return nil
}

func (x *AclEntryAttribute) GetActionIntDelete() *AclActionData {
	if x != nil {
		return x.ActionIntDelete
	}
	return nil
}

func (x *AclEntryAttribute) GetActionIntReportFlow() *AclActionData {
	if x != nil {
		return x.ActionIntReportFlow
	}
	return nil
}

func (x *AclEntryAttribute) GetActionIntReportDrops() *AclActionData {
	if x != nil {
		return x.ActionIntReportDrops
	}
	return nil
}

func (x *AclEntryAttribute) GetActionIntReportTailDrops() *AclActionData {
	if x != nil {
		return x.ActionIntReportTailDrops
	}
	return nil
}

func (x *AclEntryAttribute) GetActionTamIntObject() *AclActionData {
	if x != nil {
		return x.ActionTamIntObject
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetIsolationGroup() *AclActionData {
	if x != nil {
		return x.ActionSetIsolationGroup
	}
	return nil
}

func (x *AclEntryAttribute) GetActionMacsecFlow() *AclActionData {
	if x != nil {
		return x.ActionMacsecFlow
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetLagHashId() *AclActionData {
	if x != nil {
		return x.ActionSetLagHashId
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetEcmpHashId() *AclActionData {
	if x != nil {
		return x.ActionSetEcmpHashId
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetVrf() *AclActionData {
	if x != nil {
		return x.ActionSetVrf
	}
	return nil
}

func (x *AclEntryAttribute) GetActionSetForwardingClass() *AclActionData {
	if x != nil {
		return x.ActionSetForwardingClass
	}
	return nil
}

type AclRangeAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  AclRangeType `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.AclRangeType" json:"type,omitempty"`
	Limit *Uint32Range `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *AclRangeAttribute) Reset() {
	*x = AclRangeAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRangeAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRangeAttribute) ProtoMessage() {}

func (x *AclRangeAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRangeAttribute.ProtoReflect.Descriptor instead.
func (*AclRangeAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{32}
}

func (x *AclRangeAttribute) GetType() AclRangeType {
	if x != nil {
		return x.Type
	}
	return AclRangeType_ACL_RANGE_TYPE_UNSPECIFIED
}

func (x *AclRangeAttribute) GetLimit() *Uint32Range {
	if x != nil {
		return x.Limit
	}
	return nil
}

type AclBindPointTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []AclBindPointType `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.AclBindPointType" json:"list,omitempty"`
}

func (x *AclBindPointTypeList) Reset() {
	*x = AclBindPointTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclBindPointTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclBindPointTypeList) ProtoMessage() {}

func (x *AclBindPointTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclBindPointTypeList.ProtoReflect.Descriptor instead.
func (*AclBindPointTypeList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{33}
}

func (x *AclBindPointTypeList) GetList() []AclBindPointType {
	if x != nil {
		return x.List
	}
	return nil
}

type AclActionTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []AclActionType `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.AclActionType" json:"list,omitempty"`
}

func (x *AclActionTypeList) Reset() {
	*x = AclActionTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclActionTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclActionTypeList) ProtoMessage() {}

func (x *AclActionTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclActionTypeList.ProtoReflect.Descriptor instead.
func (*AclActionTypeList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{34}
}

func (x *AclActionTypeList) GetList() []AclActionType {
	if x != nil {
		return x.List
	}
	return nil
}

type AclRangeTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []AclRangeType `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.AclRangeType" json:"list,omitempty"`
}

func (x *AclRangeTypeList) Reset() {
	*x = AclRangeTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRangeTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRangeTypeList) ProtoMessage() {}

func (x *AclRangeTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRangeTypeList.ProtoReflect.Descriptor instead.
func (*AclRangeTypeList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{35}
}

func (x *AclRangeTypeList) GetList() []AclRangeType {
	if x != nil {
		return x.List
	}
	return nil
}

type Uint64List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []uint64 `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
}

func (x *Uint64List) Reset() {
	*x = Uint64List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint64List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64List) ProtoMessage() {}

func (x *Uint64List) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64List.ProtoReflect.Descriptor instead.
func (*Uint64List) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{36}
}

func (x *Uint64List) GetList() []uint64 {
	if x != nil {
		return x.List
	}
	return nil
}

type AclTableAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclStage                   AclStage              `protobuf:"varint,1,opt,name=acl_stage,json=aclStage,proto3,enum=lemming.dataplane.sai.AclStage" json:"acl_stage,omitempty"`
	AclBindPointTypeList       *AclBindPointTypeList `protobuf:"bytes,2,opt,name=acl_bind_point_type_list,json=aclBindPointTypeList,proto3" json:"acl_bind_point_type_list,omitempty"`
	Size                       uint32                `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	AclActionTypeList          *AclActionTypeList    `protobuf:"bytes,4,opt,name=acl_action_type_list,json=aclActionTypeList,proto3" json:"acl_action_type_list,omitempty"`
	FieldSrcIpv6               bool                  `protobuf:"varint,5,opt,name=field_src_ipv6,json=fieldSrcIpv6,proto3" json:"field_src_ipv6,omitempty"`
	FieldSrcIpv6Word3          bool                  `protobuf:"varint,6,opt,name=field_src_ipv6_word3,json=fieldSrcIpv6Word3,proto3" json:"field_src_ipv6_word3,omitempty"`
	FieldSrcIpv6Word2          bool                  `protobuf:"varint,7,opt,name=field_src_ipv6_word2,json=fieldSrcIpv6Word2,proto3" json:"field_src_ipv6_word2,omitempty"`
	FieldSrcIpv6Word1          bool                  `protobuf:"varint,8,opt,name=field_src_ipv6_word1,json=fieldSrcIpv6Word1,proto3" json:"field_src_ipv6_word1,omitempty"`
	FieldSrcIpv6Word0          bool                  `protobuf:"varint,9,opt,name=field_src_ipv6_word0,json=fieldSrcIpv6Word0,proto3" json:"field_src_ipv6_word0,omitempty"`
	FieldDstIpv6               bool                  `protobuf:"varint,10,opt,name=field_dst_ipv6,json=fieldDstIpv6,proto3" json:"field_dst_ipv6,omitempty"`
	FieldDstIpv6Word3          bool                  `protobuf:"varint,11,opt,name=field_dst_ipv6_word3,json=fieldDstIpv6Word3,proto3" json:"field_dst_ipv6_word3,omitempty"`
	FieldDstIpv6Word2          bool                  `protobuf:"varint,12,opt,name=field_dst_ipv6_word2,json=fieldDstIpv6Word2,proto3" json:"field_dst_ipv6_word2,omitempty"`
	FieldDstIpv6Word1          bool                  `protobuf:"varint,13,opt,name=field_dst_ipv6_word1,json=fieldDstIpv6Word1,proto3" json:"field_dst_ipv6_word1,omitempty"`
	FieldDstIpv6Word0          bool                  `protobuf:"varint,14,opt,name=field_dst_ipv6_word0,json=fieldDstIpv6Word0,proto3" json:"field_dst_ipv6_word0,omitempty"`
	FieldInnerSrcIpv6          bool                  `protobuf:"varint,15,opt,name=field_inner_src_ipv6,json=fieldInnerSrcIpv6,proto3" json:"field_inner_src_ipv6,omitempty"`
	FieldInnerDstIpv6          bool                  `protobuf:"varint,16,opt,name=field_inner_dst_ipv6,json=fieldInnerDstIpv6,proto3" json:"field_inner_dst_ipv6,omitempty"`
	FieldSrcMac                bool                  `protobuf:"varint,17,opt,name=field_src_mac,json=fieldSrcMac,proto3" json:"field_src_mac,omitempty"`
	FieldDstMac                bool                  `protobuf:"varint,18,opt,name=field_dst_mac,json=fieldDstMac,proto3" json:"field_dst_mac,omitempty"`
	FieldSrcIp                 bool                  `protobuf:"varint,19,opt,name=field_src_ip,json=fieldSrcIp,proto3" json:"field_src_ip,omitempty"`
	FieldDstIp                 bool                  `protobuf:"varint,20,opt,name=field_dst_ip,json=fieldDstIp,proto3" json:"field_dst_ip,omitempty"`
	FieldInnerSrcIp            bool                  `protobuf:"varint,21,opt,name=field_inner_src_ip,json=fieldInnerSrcIp,proto3" json:"field_inner_src_ip,omitempty"`
	FieldInnerDstIp            bool                  `protobuf:"varint,22,opt,name=field_inner_dst_ip,json=fieldInnerDstIp,proto3" json:"field_inner_dst_ip,omitempty"`
	FieldInPorts               bool                  `protobuf:"varint,23,opt,name=field_in_ports,json=fieldInPorts,proto3" json:"field_in_ports,omitempty"`
	FieldOutPorts              bool                  `protobuf:"varint,24,opt,name=field_out_ports,json=fieldOutPorts,proto3" json:"field_out_ports,omitempty"`
	FieldInPort                bool                  `protobuf:"varint,25,opt,name=field_in_port,json=fieldInPort,proto3" json:"field_in_port,omitempty"`
	FieldOutPort               bool                  `protobuf:"varint,26,opt,name=field_out_port,json=fieldOutPort,proto3" json:"field_out_port,omitempty"`
	FieldSrcPort               bool                  `protobuf:"varint,27,opt,name=field_src_port,json=fieldSrcPort,proto3" json:"field_src_port,omitempty"`
	FieldOuterVlanId           bool                  `protobuf:"varint,28,opt,name=field_outer_vlan_id,json=fieldOuterVlanId,proto3" json:"field_outer_vlan_id,omitempty"`
	FieldOuterVlanPri          bool                  `protobuf:"varint,29,opt,name=field_outer_vlan_pri,json=fieldOuterVlanPri,proto3" json:"field_outer_vlan_pri,omitempty"`
	FieldOuterVlanCfi          bool                  `protobuf:"varint,30,opt,name=field_outer_vlan_cfi,json=fieldOuterVlanCfi,proto3" json:"field_outer_vlan_cfi,omitempty"`
	FieldInnerVlanId           bool                  `protobuf:"varint,31,opt,name=field_inner_vlan_id,json=fieldInnerVlanId,proto3" json:"field_inner_vlan_id,omitempty"`
	FieldInnerVlanPri          bool                  `protobuf:"varint,32,opt,name=field_inner_vlan_pri,json=fieldInnerVlanPri,proto3" json:"field_inner_vlan_pri,omitempty"`
	FieldInnerVlanCfi          bool                  `protobuf:"varint,33,opt,name=field_inner_vlan_cfi,json=fieldInnerVlanCfi,proto3" json:"field_inner_vlan_cfi,omitempty"`
	FieldL4SrcPort             bool                  `protobuf:"varint,34,opt,name=field_l4_src_port,json=fieldL4SrcPort,proto3" json:"field_l4_src_port,omitempty"`
	FieldL4DstPort             bool                  `protobuf:"varint,35,opt,name=field_l4_dst_port,json=fieldL4DstPort,proto3" json:"field_l4_dst_port,omitempty"`
	FieldInnerL4SrcPort        bool                  `protobuf:"varint,36,opt,name=field_inner_l4_src_port,json=fieldInnerL4SrcPort,proto3" json:"field_inner_l4_src_port,omitempty"`
	FieldInnerL4DstPort        bool                  `protobuf:"varint,37,opt,name=field_inner_l4_dst_port,json=fieldInnerL4DstPort,proto3" json:"field_inner_l4_dst_port,omitempty"`
	FieldEtherType             bool                  `protobuf:"varint,38,opt,name=field_ether_type,json=fieldEtherType,proto3" json:"field_ether_type,omitempty"`
	FieldInnerEtherType        bool                  `protobuf:"varint,39,opt,name=field_inner_ether_type,json=fieldInnerEtherType,proto3" json:"field_inner_ether_type,omitempty"`
	FieldIpProtocol            bool                  `protobuf:"varint,40,opt,name=field_ip_protocol,json=fieldIpProtocol,proto3" json:"field_ip_protocol,omitempty"`
	FieldInnerIpProtocol       bool                  `protobuf:"varint,41,opt,name=field_inner_ip_protocol,json=fieldInnerIpProtocol,proto3" json:"field_inner_ip_protocol,omitempty"`
	FieldIpIdentification      bool                  `protobuf:"varint,42,opt,name=field_ip_identification,json=fieldIpIdentification,proto3" json:"field_ip_identification,omitempty"`
	FieldDscp                  bool                  `protobuf:"varint,43,opt,name=field_dscp,json=fieldDscp,proto3" json:"field_dscp,omitempty"`
	FieldEcn                   bool                  `protobuf:"varint,44,opt,name=field_ecn,json=fieldEcn,proto3" json:"field_ecn,omitempty"`
	FieldTtl                   bool                  `protobuf:"varint,45,opt,name=field_ttl,json=fieldTtl,proto3" json:"field_ttl,omitempty"`
	FieldTos                   bool                  `protobuf:"varint,46,opt,name=field_tos,json=fieldTos,proto3" json:"field_tos,omitempty"`
	FieldIpFlags               bool                  `protobuf:"varint,47,opt,name=field_ip_flags,json=fieldIpFlags,proto3" json:"field_ip_flags,omitempty"`
	FieldTcpFlags              bool                  `protobuf:"varint,48,opt,name=field_tcp_flags,json=fieldTcpFlags,proto3" json:"field_tcp_flags,omitempty"`
	FieldAclIpType             bool                  `protobuf:"varint,49,opt,name=field_acl_ip_type,json=fieldAclIpType,proto3" json:"field_acl_ip_type,omitempty"`
	FieldAclIpFrag             bool                  `protobuf:"varint,50,opt,name=field_acl_ip_frag,json=fieldAclIpFrag,proto3" json:"field_acl_ip_frag,omitempty"`
	FieldIpv6FlowLabel         bool                  `protobuf:"varint,51,opt,name=field_ipv6_flow_label,json=fieldIpv6FlowLabel,proto3" json:"field_ipv6_flow_label,omitempty"`
	FieldTc                    bool                  `protobuf:"varint,52,opt,name=field_tc,json=fieldTc,proto3" json:"field_tc,omitempty"`
	FieldIcmpType              bool                  `protobuf:"varint,53,opt,name=field_icmp_type,json=fieldIcmpType,proto3" json:"field_icmp_type,omitempty"`
	FieldIcmpCode              bool                  `protobuf:"varint,54,opt,name=field_icmp_code,json=fieldIcmpCode,proto3" json:"field_icmp_code,omitempty"`
	FieldIcmpv6Type            bool                  `protobuf:"varint,55,opt,name=field_icmpv6_type,json=fieldIcmpv6Type,proto3" json:"field_icmpv6_type,omitempty"`
	FieldIcmpv6Code            bool                  `protobuf:"varint,56,opt,name=field_icmpv6_code,json=fieldIcmpv6Code,proto3" json:"field_icmpv6_code,omitempty"`
	FieldPacketVlan            bool                  `protobuf:"varint,57,opt,name=field_packet_vlan,json=fieldPacketVlan,proto3" json:"field_packet_vlan,omitempty"`
	FieldTunnelVni             bool                  `protobuf:"varint,58,opt,name=field_tunnel_vni,json=fieldTunnelVni,proto3" json:"field_tunnel_vni,omitempty"`
	FieldHasVlanTag            bool                  `protobuf:"varint,59,opt,name=field_has_vlan_tag,json=fieldHasVlanTag,proto3" json:"field_has_vlan_tag,omitempty"`
	FieldMacsecSci             bool                  `protobuf:"varint,60,opt,name=field_macsec_sci,json=fieldMacsecSci,proto3" json:"field_macsec_sci,omitempty"`
	FieldMplsLabel0Label       bool                  `protobuf:"varint,61,opt,name=field_mpls_label0_label,json=fieldMplsLabel0Label,proto3" json:"field_mpls_label0_label,omitempty"`
	FieldMplsLabel0Ttl         bool                  `protobuf:"varint,62,opt,name=field_mpls_label0_ttl,json=fieldMplsLabel0Ttl,proto3" json:"field_mpls_label0_ttl,omitempty"`
	FieldMplsLabel0Exp         bool                  `protobuf:"varint,63,opt,name=field_mpls_label0_exp,json=fieldMplsLabel0Exp,proto3" json:"field_mpls_label0_exp,omitempty"`
	FieldMplsLabel0Bos         bool                  `protobuf:"varint,64,opt,name=field_mpls_label0_bos,json=fieldMplsLabel0Bos,proto3" json:"field_mpls_label0_bos,omitempty"`
	FieldMplsLabel1Label       bool                  `protobuf:"varint,65,opt,name=field_mpls_label1_label,json=fieldMplsLabel1Label,proto3" json:"field_mpls_label1_label,omitempty"`
	FieldMplsLabel1Ttl         bool                  `protobuf:"varint,66,opt,name=field_mpls_label1_ttl,json=fieldMplsLabel1Ttl,proto3" json:"field_mpls_label1_ttl,omitempty"`
	FieldMplsLabel1Exp         bool                  `protobuf:"varint,67,opt,name=field_mpls_label1_exp,json=fieldMplsLabel1Exp,proto3" json:"field_mpls_label1_exp,omitempty"`
	FieldMplsLabel1Bos         bool                  `protobuf:"varint,68,opt,name=field_mpls_label1_bos,json=fieldMplsLabel1Bos,proto3" json:"field_mpls_label1_bos,omitempty"`
	FieldMplsLabel2Label       bool                  `protobuf:"varint,69,opt,name=field_mpls_label2_label,json=fieldMplsLabel2Label,proto3" json:"field_mpls_label2_label,omitempty"`
	FieldMplsLabel2Ttl         bool                  `protobuf:"varint,70,opt,name=field_mpls_label2_ttl,json=fieldMplsLabel2Ttl,proto3" json:"field_mpls_label2_ttl,omitempty"`
	FieldMplsLabel2Exp         bool                  `protobuf:"varint,71,opt,name=field_mpls_label2_exp,json=fieldMplsLabel2Exp,proto3" json:"field_mpls_label2_exp,omitempty"`
	FieldMplsLabel2Bos         bool                  `protobuf:"varint,72,opt,name=field_mpls_label2_bos,json=fieldMplsLabel2Bos,proto3" json:"field_mpls_label2_bos,omitempty"`
	FieldMplsLabel3Label       bool                  `protobuf:"varint,73,opt,name=field_mpls_label3_label,json=fieldMplsLabel3Label,proto3" json:"field_mpls_label3_label,omitempty"`
	FieldMplsLabel3Ttl         bool                  `protobuf:"varint,74,opt,name=field_mpls_label3_ttl,json=fieldMplsLabel3Ttl,proto3" json:"field_mpls_label3_ttl,omitempty"`
	FieldMplsLabel3Exp         bool                  `protobuf:"varint,75,opt,name=field_mpls_label3_exp,json=fieldMplsLabel3Exp,proto3" json:"field_mpls_label3_exp,omitempty"`
	FieldMplsLabel3Bos         bool                  `protobuf:"varint,76,opt,name=field_mpls_label3_bos,json=fieldMplsLabel3Bos,proto3" json:"field_mpls_label3_bos,omitempty"`
	FieldMplsLabel4Label       bool                  `protobuf:"varint,77,opt,name=field_mpls_label4_label,json=fieldMplsLabel4Label,proto3" json:"field_mpls_label4_label,omitempty"`
	FieldMplsLabel4Ttl         bool                  `protobuf:"varint,78,opt,name=field_mpls_label4_ttl,json=fieldMplsLabel4Ttl,proto3" json:"field_mpls_label4_ttl,omitempty"`
	FieldMplsLabel4Exp         bool                  `protobuf:"varint,79,opt,name=field_mpls_label4_exp,json=fieldMplsLabel4Exp,proto3" json:"field_mpls_label4_exp,omitempty"`
	FieldMplsLabel4Bos         bool                  `protobuf:"varint,80,opt,name=field_mpls_label4_bos,json=fieldMplsLabel4Bos,proto3" json:"field_mpls_label4_bos,omitempty"`
	FieldFdbDstUserMeta        bool                  `protobuf:"varint,81,opt,name=field_fdb_dst_user_meta,json=fieldFdbDstUserMeta,proto3" json:"field_fdb_dst_user_meta,omitempty"`
	FieldRouteDstUserMeta      bool                  `protobuf:"varint,82,opt,name=field_route_dst_user_meta,json=fieldRouteDstUserMeta,proto3" json:"field_route_dst_user_meta,omitempty"`
	FieldNeighborDstUserMeta   bool                  `protobuf:"varint,83,opt,name=field_neighbor_dst_user_meta,json=fieldNeighborDstUserMeta,proto3" json:"field_neighbor_dst_user_meta,omitempty"`
	FieldPortUserMeta          bool                  `protobuf:"varint,84,opt,name=field_port_user_meta,json=fieldPortUserMeta,proto3" json:"field_port_user_meta,omitempty"`
	FieldVlanUserMeta          bool                  `protobuf:"varint,85,opt,name=field_vlan_user_meta,json=fieldVlanUserMeta,proto3" json:"field_vlan_user_meta,omitempty"`
	FieldAclUserMeta           bool                  `protobuf:"varint,86,opt,name=field_acl_user_meta,json=fieldAclUserMeta,proto3" json:"field_acl_user_meta,omitempty"`
	FieldFdbNpuMetaDstHit      bool                  `protobuf:"varint,87,opt,name=field_fdb_npu_meta_dst_hit,json=fieldFdbNpuMetaDstHit,proto3" json:"field_fdb_npu_meta_dst_hit,omitempty"`
	FieldNeighborNpuMetaDstHit bool                  `protobuf:"varint,88,opt,name=field_neighbor_npu_meta_dst_hit,json=fieldNeighborNpuMetaDstHit,proto3" json:"field_neighbor_npu_meta_dst_hit,omitempty"`
	FieldRouteNpuMetaDstHit    bool                  `protobuf:"varint,89,opt,name=field_route_npu_meta_dst_hit,json=fieldRouteNpuMetaDstHit,proto3" json:"field_route_npu_meta_dst_hit,omitempty"`
	FieldBthOpcode             bool                  `protobuf:"varint,90,opt,name=field_bth_opcode,json=fieldBthOpcode,proto3" json:"field_bth_opcode,omitempty"`
	FieldAethSyndrome          bool                  `protobuf:"varint,91,opt,name=field_aeth_syndrome,json=fieldAethSyndrome,proto3" json:"field_aeth_syndrome,omitempty"`
	UserDefinedFieldGroupMin   uint64                `protobuf:"varint,92,opt,name=user_defined_field_group_min,json=userDefinedFieldGroupMin,proto3" json:"user_defined_field_group_min,omitempty"`
	UserDefinedFieldGroupMax   uint64                `protobuf:"varint,93,opt,name=user_defined_field_group_max,json=userDefinedFieldGroupMax,proto3" json:"user_defined_field_group_max,omitempty"`
	FieldAclRangeType          *AclRangeTypeList     `protobuf:"bytes,94,opt,name=field_acl_range_type,json=fieldAclRangeType,proto3" json:"field_acl_range_type,omitempty"`
	FieldIpv6NextHeader        bool                  `protobuf:"varint,95,opt,name=field_ipv6_next_header,json=fieldIpv6NextHeader,proto3" json:"field_ipv6_next_header,omitempty"`
	FieldGreKey                bool                  `protobuf:"varint,96,opt,name=field_gre_key,json=fieldGreKey,proto3" json:"field_gre_key,omitempty"`
	FieldTamIntType            bool                  `protobuf:"varint,97,opt,name=field_tam_int_type,json=fieldTamIntType,proto3" json:"field_tam_int_type,omitempty"`
	EntryList                  *Uint64List           `protobuf:"bytes,98,opt,name=entry_list,json=entryList,proto3" json:"entry_list,omitempty"`
	AvailableAclEntry          uint32                `protobuf:"varint,99,opt,name=available_acl_entry,json=availableAclEntry,proto3" json:"available_acl_entry,omitempty"`
	AvailableAclCounter        uint32                `protobuf:"varint,100,opt,name=available_acl_counter,json=availableAclCounter,proto3" json:"available_acl_counter,omitempty"`
}

func (x *AclTableAttribute) Reset() {
	*x = AclTableAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclTableAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclTableAttribute) ProtoMessage() {}

func (x *AclTableAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclTableAttribute.ProtoReflect.Descriptor instead.
func (*AclTableAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{37}
}

func (x *AclTableAttribute) GetAclStage() AclStage {
	if x != nil {
		return x.AclStage
	}
	return AclStage_ACL_STAGE_UNSPECIFIED
}

func (x *AclTableAttribute) GetAclBindPointTypeList() *AclBindPointTypeList {
	if x != nil {
		return x.AclBindPointTypeList
	}
	return nil
}

func (x *AclTableAttribute) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AclTableAttribute) GetAclActionTypeList() *AclActionTypeList {
	if x != nil {
		return x.AclActionTypeList
	}
	return nil
}

func (x *AclTableAttribute) GetFieldSrcIpv6() bool {
	if x != nil {
		return x.FieldSrcIpv6
	}
	return false
}

func (x *AclTableAttribute) GetFieldSrcIpv6Word3() bool {
	if x != nil {
		return x.FieldSrcIpv6Word3
	}
	return false
}

func (x *AclTableAttribute) GetFieldSrcIpv6Word2() bool {
	if x != nil {
		return x.FieldSrcIpv6Word2
	}
	return false
}

func (x *AclTableAttribute) GetFieldSrcIpv6Word1() bool {
	if x != nil {
		return x.FieldSrcIpv6Word1
	}
	return false
}

func (x *AclTableAttribute) GetFieldSrcIpv6Word0() bool {
	if x != nil {
		return x.FieldSrcIpv6Word0
	}
	return false
}

func (x *AclTableAttribute) GetFieldDstIpv6() bool {
	if x != nil {
		return x.FieldDstIpv6
	}
	return false
}

func (x *AclTableAttribute) GetFieldDstIpv6Word3() bool {
	if x != nil {
		return x.FieldDstIpv6Word3
	}
	return false
}

func (x *AclTableAttribute) GetFieldDstIpv6Word2() bool {
	if x != nil {
		return x.FieldDstIpv6Word2
	}
	return false
}

func (x *AclTableAttribute) GetFieldDstIpv6Word1() bool {
	if x != nil {
		return x.FieldDstIpv6Word1
	}
	return false
}

func (x *AclTableAttribute) GetFieldDstIpv6Word0() bool {
	if x != nil {
		return x.FieldDstIpv6Word0
	}
	return false
}

func (x *AclTableAttribute) GetFieldInnerSrcIpv6() bool {
	if x != nil {
		return x.FieldInnerSrcIpv6
	}
	return false
}

func (x *AclTableAttribute) GetFieldInnerDstIpv6() bool {
	if x != nil {
		return x.FieldInnerDstIpv6
	}
	return false
}

func (x *AclTableAttribute) GetFieldSrcMac() bool {
	if x != nil {
		return x.FieldSrcMac
	}
	return false
}

func (x *AclTableAttribute) GetFieldDstMac() bool {
	if x != nil {
		return x.FieldDstMac
	}
	return false
}

func (x *AclTableAttribute) GetFieldSrcIp() bool {
	if x != nil {
		return x.FieldSrcIp
	}
	return false
}

func (x *AclTableAttribute) GetFieldDstIp() bool {
	if x != nil {
		return x.FieldDstIp
	}
	return false
}

func (x *AclTableAttribute) GetFieldInnerSrcIp() bool {
	if x != nil {
		return x.FieldInnerSrcIp
	}
	return false
}

func (x *AclTableAttribute) GetFieldInnerDstIp() bool {
	if x != nil {
		return x.FieldInnerDstIp
	}
	return false
}

func (x *AclTableAttribute) GetFieldInPorts() bool {
	if x != nil {
		return x.FieldInPorts
	}
	return false
}

func (x *AclTableAttribute) GetFieldOutPorts() bool {
	if x != nil {
		return x.FieldOutPorts
	}
	return false
}

func (x *AclTableAttribute) GetFieldInPort() bool {
	if x != nil {
		return x.FieldInPort
	}
	return false
}

func (x *AclTableAttribute) GetFieldOutPort() bool {
	if x != nil {
		return x.FieldOutPort
	}
	return false
}

func (x *AclTableAttribute) GetFieldSrcPort() bool {
	if x != nil {
		return x.FieldSrcPort
	}
	return false
}

func (x *AclTableAttribute) GetFieldOuterVlanId() bool {
	if x != nil {
		return x.FieldOuterVlanId
	}
	return false
}

func (x *AclTableAttribute) GetFieldOuterVlanPri() bool {
	if x != nil {
		return x.FieldOuterVlanPri
	}
	return false
}

func (x *AclTableAttribute) GetFieldOuterVlanCfi() bool {
	if x != nil {
		return x.FieldOuterVlanCfi
	}
	return false
}

func (x *AclTableAttribute) GetFieldInnerVlanId() bool {
	if x != nil {
		return x.FieldInnerVlanId
	}
	return false
}

func (x *AclTableAttribute) GetFieldInnerVlanPri() bool {
	if x != nil {
		return x.FieldInnerVlanPri
	}
	return false
}

func (x *AclTableAttribute) GetFieldInnerVlanCfi() bool {
	if x != nil {
		return x.FieldInnerVlanCfi
	}
	return false
}

func (x *AclTableAttribute) GetFieldL4SrcPort() bool {
	if x != nil {
		return x.FieldL4SrcPort
	}
	return false
}

func (x *AclTableAttribute) GetFieldL4DstPort() bool {
	if x != nil {
		return x.FieldL4DstPort
	}
	return false
}

func (x *AclTableAttribute) GetFieldInnerL4SrcPort() bool {
	if x != nil {
		return x.FieldInnerL4SrcPort
	}
	return false
}

func (x *AclTableAttribute) GetFieldInnerL4DstPort() bool {
	if x != nil {
		return x.FieldInnerL4DstPort
	}
	return false
}

func (x *AclTableAttribute) GetFieldEtherType() bool {
	if x != nil {
		return x.FieldEtherType
	}
	return false
}

func (x *AclTableAttribute) GetFieldInnerEtherType() bool {
	if x != nil {
		return x.FieldInnerEtherType
	}
	return false
}

func (x *AclTableAttribute) GetFieldIpProtocol() bool {
	if x != nil {
		return x.FieldIpProtocol
	}
	return false
}

func (x *AclTableAttribute) GetFieldInnerIpProtocol() bool {
	if x != nil {
		return x.FieldInnerIpProtocol
	}
	return false
}

func (x *AclTableAttribute) GetFieldIpIdentification() bool {
	if x != nil {
		return x.FieldIpIdentification
	}
	return false
}

func (x *AclTableAttribute) GetFieldDscp() bool {
	if x != nil {
		return x.FieldDscp
	}
	return false
}

func (x *AclTableAttribute) GetFieldEcn() bool {
	if x != nil {
		return x.FieldEcn
	}
	return false
}

func (x *AclTableAttribute) GetFieldTtl() bool {
	if x != nil {
		return x.FieldTtl
	}
	return false
}

func (x *AclTableAttribute) GetFieldTos() bool {
	if x != nil {
		return x.FieldTos
	}
	return false
}

func (x *AclTableAttribute) GetFieldIpFlags() bool {
	if x != nil {
		return x.FieldIpFlags
	}
	return false
}

func (x *AclTableAttribute) GetFieldTcpFlags() bool {
	if x != nil {
		return x.FieldTcpFlags
	}
	return false
}

func (x *AclTableAttribute) GetFieldAclIpType() bool {
	if x != nil {
		return x.FieldAclIpType
	}
	return false
}

func (x *AclTableAttribute) GetFieldAclIpFrag() bool {
	if x != nil {
		return x.FieldAclIpFrag
	}
	return false
}

func (x *AclTableAttribute) GetFieldIpv6FlowLabel() bool {
	if x != nil {
		return x.FieldIpv6FlowLabel
	}
	return false
}

func (x *AclTableAttribute) GetFieldTc() bool {
	if x != nil {
		return x.FieldTc
	}
	return false
}

func (x *AclTableAttribute) GetFieldIcmpType() bool {
	if x != nil {
		return x.FieldIcmpType
	}
	return false
}

func (x *AclTableAttribute) GetFieldIcmpCode() bool {
	if x != nil {
		return x.FieldIcmpCode
	}
	return false
}

func (x *AclTableAttribute) GetFieldIcmpv6Type() bool {
	if x != nil {
		return x.FieldIcmpv6Type
	}
	return false
}

func (x *AclTableAttribute) GetFieldIcmpv6Code() bool {
	if x != nil {
		return x.FieldIcmpv6Code
	}
	return false
}

func (x *AclTableAttribute) GetFieldPacketVlan() bool {
	if x != nil {
		return x.FieldPacketVlan
	}
	return false
}

func (x *AclTableAttribute) GetFieldTunnelVni() bool {
	if x != nil {
		return x.FieldTunnelVni
	}
	return false
}

func (x *AclTableAttribute) GetFieldHasVlanTag() bool {
	if x != nil {
		return x.FieldHasVlanTag
	}
	return false
}

func (x *AclTableAttribute) GetFieldMacsecSci() bool {
	if x != nil {
		return x.FieldMacsecSci
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel0Label() bool {
	if x != nil {
		return x.FieldMplsLabel0Label
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel0Ttl() bool {
	if x != nil {
		return x.FieldMplsLabel0Ttl
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel0Exp() bool {
	if x != nil {
		return x.FieldMplsLabel0Exp
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel0Bos() bool {
	if x != nil {
		return x.FieldMplsLabel0Bos
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel1Label() bool {
	if x != nil {
		return x.FieldMplsLabel1Label
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel1Ttl() bool {
	if x != nil {
		return x.FieldMplsLabel1Ttl
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel1Exp() bool {
	if x != nil {
		return x.FieldMplsLabel1Exp
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel1Bos() bool {
	if x != nil {
		return x.FieldMplsLabel1Bos
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel2Label() bool {
	if x != nil {
		return x.FieldMplsLabel2Label
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel2Ttl() bool {
	if x != nil {
		return x.FieldMplsLabel2Ttl
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel2Exp() bool {
	if x != nil {
		return x.FieldMplsLabel2Exp
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel2Bos() bool {
	if x != nil {
		return x.FieldMplsLabel2Bos
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel3Label() bool {
	if x != nil {
		return x.FieldMplsLabel3Label
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel3Ttl() bool {
	if x != nil {
		return x.FieldMplsLabel3Ttl
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel3Exp() bool {
	if x != nil {
		return x.FieldMplsLabel3Exp
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel3Bos() bool {
	if x != nil {
		return x.FieldMplsLabel3Bos
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel4Label() bool {
	if x != nil {
		return x.FieldMplsLabel4Label
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel4Ttl() bool {
	if x != nil {
		return x.FieldMplsLabel4Ttl
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel4Exp() bool {
	if x != nil {
		return x.FieldMplsLabel4Exp
	}
	return false
}

func (x *AclTableAttribute) GetFieldMplsLabel4Bos() bool {
	if x != nil {
		return x.FieldMplsLabel4Bos
	}
	return false
}

func (x *AclTableAttribute) GetFieldFdbDstUserMeta() bool {
	if x != nil {
		return x.FieldFdbDstUserMeta
	}
	return false
}

func (x *AclTableAttribute) GetFieldRouteDstUserMeta() bool {
	if x != nil {
		return x.FieldRouteDstUserMeta
	}
	return false
}

func (x *AclTableAttribute) GetFieldNeighborDstUserMeta() bool {
	if x != nil {
		return x.FieldNeighborDstUserMeta
	}
	return false
}

func (x *AclTableAttribute) GetFieldPortUserMeta() bool {
	if x != nil {
		return x.FieldPortUserMeta
	}
	return false
}

func (x *AclTableAttribute) GetFieldVlanUserMeta() bool {
	if x != nil {
		return x.FieldVlanUserMeta
	}
	return false
}

func (x *AclTableAttribute) GetFieldAclUserMeta() bool {
	if x != nil {
		return x.FieldAclUserMeta
	}
	return false
}

func (x *AclTableAttribute) GetFieldFdbNpuMetaDstHit() bool {
	if x != nil {
		return x.FieldFdbNpuMetaDstHit
	}
	return false
}

func (x *AclTableAttribute) GetFieldNeighborNpuMetaDstHit() bool {
	if x != nil {
		return x.FieldNeighborNpuMetaDstHit
	}
	return false
}

func (x *AclTableAttribute) GetFieldRouteNpuMetaDstHit() bool {
	if x != nil {
		return x.FieldRouteNpuMetaDstHit
	}
	return false
}

func (x *AclTableAttribute) GetFieldBthOpcode() bool {
	if x != nil {
		return x.FieldBthOpcode
	}
	return false
}

func (x *AclTableAttribute) GetFieldAethSyndrome() bool {
	if x != nil {
		return x.FieldAethSyndrome
	}
	return false
}

func (x *AclTableAttribute) GetUserDefinedFieldGroupMin() uint64 {
	if x != nil {
		return x.UserDefinedFieldGroupMin
	}
	return 0
}

func (x *AclTableAttribute) GetUserDefinedFieldGroupMax() uint64 {
	if x != nil {
		return x.UserDefinedFieldGroupMax
	}
	return 0
}

func (x *AclTableAttribute) GetFieldAclRangeType() *AclRangeTypeList {
	if x != nil {
		return x.FieldAclRangeType
	}
	return nil
}

func (x *AclTableAttribute) GetFieldIpv6NextHeader() bool {
	if x != nil {
		return x.FieldIpv6NextHeader
	}
	return false
}

func (x *AclTableAttribute) GetFieldGreKey() bool {
	if x != nil {
		return x.FieldGreKey
	}
	return false
}

func (x *AclTableAttribute) GetFieldTamIntType() bool {
	if x != nil {
		return x.FieldTamIntType
	}
	return false
}

func (x *AclTableAttribute) GetEntryList() *Uint64List {
	if x != nil {
		return x.EntryList
	}
	return nil
}

func (x *AclTableAttribute) GetAvailableAclEntry() uint32 {
	if x != nil {
		return x.AvailableAclEntry
	}
	return 0
}

func (x *AclTableAttribute) GetAvailableAclCounter() uint32 {
	if x != nil {
		return x.AvailableAclCounter
	}
	return 0
}

type AclTableGroupAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclStage             AclStage              `protobuf:"varint,1,opt,name=acl_stage,json=aclStage,proto3,enum=lemming.dataplane.sai.AclStage" json:"acl_stage,omitempty"`
	AclBindPointTypeList *AclBindPointTypeList `protobuf:"bytes,2,opt,name=acl_bind_point_type_list,json=aclBindPointTypeList,proto3" json:"acl_bind_point_type_list,omitempty"`
	Type                 AclTableGroupType     `protobuf:"varint,3,opt,name=type,proto3,enum=lemming.dataplane.sai.AclTableGroupType" json:"type,omitempty"`
	MemberList           *Uint64List           `protobuf:"bytes,4,opt,name=member_list,json=memberList,proto3" json:"member_list,omitempty"`
}

func (x *AclTableGroupAttribute) Reset() {
	*x = AclTableGroupAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclTableGroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclTableGroupAttribute) ProtoMessage() {}

func (x *AclTableGroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclTableGroupAttribute.ProtoReflect.Descriptor instead.
func (*AclTableGroupAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{38}
}

func (x *AclTableGroupAttribute) GetAclStage() AclStage {
	if x != nil {
		return x.AclStage
	}
	return AclStage_ACL_STAGE_UNSPECIFIED
}

func (x *AclTableGroupAttribute) GetAclBindPointTypeList() *AclBindPointTypeList {
	if x != nil {
		return x.AclBindPointTypeList
	}
	return nil
}

func (x *AclTableGroupAttribute) GetType() AclTableGroupType {
	if x != nil {
		return x.Type
	}
	return AclTableGroupType_ACL_TABLE_GROUP_TYPE_UNSPECIFIED
}

func (x *AclTableGroupAttribute) GetMemberList() *Uint64List {
	if x != nil {
		return x.MemberList
	}
	return nil
}

type AclTableGroupMemberAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclTableGroupId uint64 `protobuf:"varint,1,opt,name=acl_table_group_id,json=aclTableGroupId,proto3" json:"acl_table_group_id,omitempty"`
	AclTableId      uint64 `protobuf:"varint,2,opt,name=acl_table_id,json=aclTableId,proto3" json:"acl_table_id,omitempty"`
	Priority        uint32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *AclTableGroupMemberAttribute) Reset() {
	*x = AclTableGroupMemberAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclTableGroupMemberAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclTableGroupMemberAttribute) ProtoMessage() {}

func (x *AclTableGroupMemberAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclTableGroupMemberAttribute.ProtoReflect.Descriptor instead.
func (*AclTableGroupMemberAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{39}
}

func (x *AclTableGroupMemberAttribute) GetAclTableGroupId() uint64 {
	if x != nil {
		return x.AclTableGroupId
	}
	return 0
}

func (x *AclTableGroupMemberAttribute) GetAclTableId() uint64 {
	if x != nil {
		return x.AclTableId
	}
	return 0
}

func (x *AclTableGroupMemberAttribute) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type BfdSessionAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 BfdSessionType        `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.BfdSessionType" json:"type,omitempty"`
	HwLookupValid        bool                  `protobuf:"varint,2,opt,name=hw_lookup_valid,json=hwLookupValid,proto3" json:"hw_lookup_valid,omitempty"`
	VirtualRouter        uint64                `protobuf:"varint,3,opt,name=virtual_router,json=virtualRouter,proto3" json:"virtual_router,omitempty"`
	Port                 uint64                `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	LocalDiscriminator   uint32                `protobuf:"varint,5,opt,name=local_discriminator,json=localDiscriminator,proto3" json:"local_discriminator,omitempty"`
	RemoteDiscriminator  uint32                `protobuf:"varint,6,opt,name=remote_discriminator,json=remoteDiscriminator,proto3" json:"remote_discriminator,omitempty"`
	UdpSrcPort           uint32                `protobuf:"varint,7,opt,name=udp_src_port,json=udpSrcPort,proto3" json:"udp_src_port,omitempty"`
	Tc                   uint32                `protobuf:"varint,8,opt,name=tc,proto3" json:"tc,omitempty"`
	VlanTpid             uint32                `protobuf:"varint,9,opt,name=vlan_tpid,json=vlanTpid,proto3" json:"vlan_tpid,omitempty"`
	VlanId               uint32                `protobuf:"varint,10,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	VlanPri              uint32                `protobuf:"varint,11,opt,name=vlan_pri,json=vlanPri,proto3" json:"vlan_pri,omitempty"`
	VlanCfi              uint32                `protobuf:"varint,12,opt,name=vlan_cfi,json=vlanCfi,proto3" json:"vlan_cfi,omitempty"`
	VlanHeaderValid      bool                  `protobuf:"varint,13,opt,name=vlan_header_valid,json=vlanHeaderValid,proto3" json:"vlan_header_valid,omitempty"`
	BfdEncapsulationType BfdEncapsulationType  `protobuf:"varint,14,opt,name=bfd_encapsulation_type,json=bfdEncapsulationType,proto3,enum=lemming.dataplane.sai.BfdEncapsulationType" json:"bfd_encapsulation_type,omitempty"`
	IphdrVersion         uint32                `protobuf:"varint,15,opt,name=iphdr_version,json=iphdrVersion,proto3" json:"iphdr_version,omitempty"`
	Tos                  uint32                `protobuf:"varint,16,opt,name=tos,proto3" json:"tos,omitempty"`
	Ttl                  uint32                `protobuf:"varint,17,opt,name=ttl,proto3" json:"ttl,omitempty"`
	SrcIpAddress         []byte                `protobuf:"bytes,18,opt,name=src_ip_address,json=srcIpAddress,proto3" json:"src_ip_address,omitempty"`
	DstIpAddress         []byte                `protobuf:"bytes,19,opt,name=dst_ip_address,json=dstIpAddress,proto3" json:"dst_ip_address,omitempty"`
	TunnelTos            uint32                `protobuf:"varint,20,opt,name=tunnel_tos,json=tunnelTos,proto3" json:"tunnel_tos,omitempty"`
	TunnelTtl            uint32                `protobuf:"varint,21,opt,name=tunnel_ttl,json=tunnelTtl,proto3" json:"tunnel_ttl,omitempty"`
	TunnelSrcIpAddress   []byte                `protobuf:"bytes,22,opt,name=tunnel_src_ip_address,json=tunnelSrcIpAddress,proto3" json:"tunnel_src_ip_address,omitempty"`
	TunnelDstIpAddress   []byte                `protobuf:"bytes,23,opt,name=tunnel_dst_ip_address,json=tunnelDstIpAddress,proto3" json:"tunnel_dst_ip_address,omitempty"`
	SrcMacAddress        []byte                `protobuf:"bytes,24,opt,name=src_mac_address,json=srcMacAddress,proto3" json:"src_mac_address,omitempty"`
	DstMacAddress        []byte                `protobuf:"bytes,25,opt,name=dst_mac_address,json=dstMacAddress,proto3" json:"dst_mac_address,omitempty"`
	EchoEnable           bool                  `protobuf:"varint,26,opt,name=echo_enable,json=echoEnable,proto3" json:"echo_enable,omitempty"`
	Multihop             bool                  `protobuf:"varint,27,opt,name=multihop,proto3" json:"multihop,omitempty"`
	Cbit                 bool                  `protobuf:"varint,28,opt,name=cbit,proto3" json:"cbit,omitempty"`
	MinTx                uint32                `protobuf:"varint,29,opt,name=min_tx,json=minTx,proto3" json:"min_tx,omitempty"`
	MinRx                uint32                `protobuf:"varint,30,opt,name=min_rx,json=minRx,proto3" json:"min_rx,omitempty"`
	Multiplier           uint32                `protobuf:"varint,31,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	RemoteMinTx          uint32                `protobuf:"varint,32,opt,name=remote_min_tx,json=remoteMinTx,proto3" json:"remote_min_tx,omitempty"`
	RemoteMinRx          uint32                `protobuf:"varint,33,opt,name=remote_min_rx,json=remoteMinRx,proto3" json:"remote_min_rx,omitempty"`
	State                BfdSessionState       `protobuf:"varint,34,opt,name=state,proto3,enum=lemming.dataplane.sai.BfdSessionState" json:"state,omitempty"`
	OffloadType          BfdSessionOffloadType `protobuf:"varint,35,opt,name=offload_type,json=offloadType,proto3,enum=lemming.dataplane.sai.BfdSessionOffloadType" json:"offload_type,omitempty"`
	NegotiatedTx         uint32                `protobuf:"varint,36,opt,name=negotiated_tx,json=negotiatedTx,proto3" json:"negotiated_tx,omitempty"`
	NegotiatedRx         uint32                `protobuf:"varint,37,opt,name=negotiated_rx,json=negotiatedRx,proto3" json:"negotiated_rx,omitempty"`
	LocalDiag            uint32                `protobuf:"varint,38,opt,name=local_diag,json=localDiag,proto3" json:"local_diag,omitempty"`
	RemoteDiag           uint32                `protobuf:"varint,39,opt,name=remote_diag,json=remoteDiag,proto3" json:"remote_diag,omitempty"`
	RemoteMultiplier     uint32                `protobuf:"varint,40,opt,name=remote_multiplier,json=remoteMultiplier,proto3" json:"remote_multiplier,omitempty"`
}

func (x *BfdSessionAttribute) Reset() {
	*x = BfdSessionAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BfdSessionAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfdSessionAttribute) ProtoMessage() {}

func (x *BfdSessionAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfdSessionAttribute.ProtoReflect.Descriptor instead.
func (*BfdSessionAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{40}
}

func (x *BfdSessionAttribute) GetType() BfdSessionType {
	if x != nil {
		return x.Type
	}
	return BfdSessionType_BFD_SESSION_TYPE_UNSPECIFIED
}

func (x *BfdSessionAttribute) GetHwLookupValid() bool {
	if x != nil {
		return x.HwLookupValid
	}
	return false
}

func (x *BfdSessionAttribute) GetVirtualRouter() uint64 {
	if x != nil {
		return x.VirtualRouter
	}
	return 0
}

func (x *BfdSessionAttribute) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *BfdSessionAttribute) GetLocalDiscriminator() uint32 {
	if x != nil {
		return x.LocalDiscriminator
	}
	return 0
}

func (x *BfdSessionAttribute) GetRemoteDiscriminator() uint32 {
	if x != nil {
		return x.RemoteDiscriminator
	}
	return 0
}

func (x *BfdSessionAttribute) GetUdpSrcPort() uint32 {
	if x != nil {
		return x.UdpSrcPort
	}
	return 0
}

func (x *BfdSessionAttribute) GetTc() uint32 {
	if x != nil {
		return x.Tc
	}
	return 0
}

func (x *BfdSessionAttribute) GetVlanTpid() uint32 {
	if x != nil {
		return x.VlanTpid
	}
	return 0
}

func (x *BfdSessionAttribute) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *BfdSessionAttribute) GetVlanPri() uint32 {
	if x != nil {
		return x.VlanPri
	}
	return 0
}

func (x *BfdSessionAttribute) GetVlanCfi() uint32 {
	if x != nil {
		return x.VlanCfi
	}
	return 0
}

func (x *BfdSessionAttribute) GetVlanHeaderValid() bool {
	if x != nil {
		return x.VlanHeaderValid
	}
	return false
}

func (x *BfdSessionAttribute) GetBfdEncapsulationType() BfdEncapsulationType {
	if x != nil {
		return x.BfdEncapsulationType
	}
	return BfdEncapsulationType_BFD_ENCAPSULATION_TYPE_UNSPECIFIED
}

func (x *BfdSessionAttribute) GetIphdrVersion() uint32 {
	if x != nil {
		return x.IphdrVersion
	}
	return 0
}

func (x *BfdSessionAttribute) GetTos() uint32 {
	if x != nil {
		return x.Tos
	}
	return 0
}

func (x *BfdSessionAttribute) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *BfdSessionAttribute) GetSrcIpAddress() []byte {
	if x != nil {
		return x.SrcIpAddress
	}
	return nil
}

func (x *BfdSessionAttribute) GetDstIpAddress() []byte {
	if x != nil {
		return x.DstIpAddress
	}
	return nil
}

func (x *BfdSessionAttribute) GetTunnelTos() uint32 {
	if x != nil {
		return x.TunnelTos
	}
	return 0
}

func (x *BfdSessionAttribute) GetTunnelTtl() uint32 {
	if x != nil {
		return x.TunnelTtl
	}
	return 0
}

func (x *BfdSessionAttribute) GetTunnelSrcIpAddress() []byte {
	if x != nil {
		return x.TunnelSrcIpAddress
	}
	return nil
}

func (x *BfdSessionAttribute) GetTunnelDstIpAddress() []byte {
	if x != nil {
		return x.TunnelDstIpAddress
	}
	return nil
}

func (x *BfdSessionAttribute) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *BfdSessionAttribute) GetDstMacAddress() []byte {
	if x != nil {
		return x.DstMacAddress
	}
	return nil
}

func (x *BfdSessionAttribute) GetEchoEnable() bool {
	if x != nil {
		return x.EchoEnable
	}
	return false
}

func (x *BfdSessionAttribute) GetMultihop() bool {
	if x != nil {
		return x.Multihop
	}
	return false
}

func (x *BfdSessionAttribute) GetCbit() bool {
	if x != nil {
		return x.Cbit
	}
	return false
}

func (x *BfdSessionAttribute) GetMinTx() uint32 {
	if x != nil {
		return x.MinTx
	}
	return 0
}

func (x *BfdSessionAttribute) GetMinRx() uint32 {
	if x != nil {
		return x.MinRx
	}
	return 0
}

func (x *BfdSessionAttribute) GetMultiplier() uint32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *BfdSessionAttribute) GetRemoteMinTx() uint32 {
	if x != nil {
		return x.RemoteMinTx
	}
	return 0
}

func (x *BfdSessionAttribute) GetRemoteMinRx() uint32 {
	if x != nil {
		return x.RemoteMinRx
	}
	return 0
}

func (x *BfdSessionAttribute) GetState() BfdSessionState {
	if x != nil {
		return x.State
	}
	return BfdSessionState_BFD_SESSION_STATE_UNSPECIFIED
}

func (x *BfdSessionAttribute) GetOffloadType() BfdSessionOffloadType {
	if x != nil {
		return x.OffloadType
	}
	return BfdSessionOffloadType_BFD_SESSION_OFFLOAD_TYPE_UNSPECIFIED
}

func (x *BfdSessionAttribute) GetNegotiatedTx() uint32 {
	if x != nil {
		return x.NegotiatedTx
	}
	return 0
}

func (x *BfdSessionAttribute) GetNegotiatedRx() uint32 {
	if x != nil {
		return x.NegotiatedRx
	}
	return 0
}

func (x *BfdSessionAttribute) GetLocalDiag() uint32 {
	if x != nil {
		return x.LocalDiag
	}
	return 0
}

func (x *BfdSessionAttribute) GetRemoteDiag() uint32 {
	if x != nil {
		return x.RemoteDiag
	}
	return 0
}

func (x *BfdSessionAttribute) GetRemoteMultiplier() uint32 {
	if x != nil {
		return x.RemoteMultiplier
	}
	return 0
}

type BridgeAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                             BridgeType             `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.BridgeType" json:"type,omitempty"`
	PortList                         *Uint64List            `protobuf:"bytes,2,opt,name=port_list,json=portList,proto3" json:"port_list,omitempty"`
	MaxLearnedAddresses              uint32                 `protobuf:"varint,3,opt,name=max_learned_addresses,json=maxLearnedAddresses,proto3" json:"max_learned_addresses,omitempty"`
	LearnDisable                     bool                   `protobuf:"varint,4,opt,name=learn_disable,json=learnDisable,proto3" json:"learn_disable,omitempty"`
	UnknownUnicastFloodControlType   BridgeFloodControlType `protobuf:"varint,5,opt,name=unknown_unicast_flood_control_type,json=unknownUnicastFloodControlType,proto3,enum=lemming.dataplane.sai.BridgeFloodControlType" json:"unknown_unicast_flood_control_type,omitempty"`
	UnknownUnicastFloodGroup         uint64                 `protobuf:"varint,6,opt,name=unknown_unicast_flood_group,json=unknownUnicastFloodGroup,proto3" json:"unknown_unicast_flood_group,omitempty"`
	UnknownMulticastFloodControlType BridgeFloodControlType `protobuf:"varint,7,opt,name=unknown_multicast_flood_control_type,json=unknownMulticastFloodControlType,proto3,enum=lemming.dataplane.sai.BridgeFloodControlType" json:"unknown_multicast_flood_control_type,omitempty"`
	UnknownMulticastFloodGroup       uint64                 `protobuf:"varint,8,opt,name=unknown_multicast_flood_group,json=unknownMulticastFloodGroup,proto3" json:"unknown_multicast_flood_group,omitempty"`
	BroadcastFloodControlType        BridgeFloodControlType `protobuf:"varint,9,opt,name=broadcast_flood_control_type,json=broadcastFloodControlType,proto3,enum=lemming.dataplane.sai.BridgeFloodControlType" json:"broadcast_flood_control_type,omitempty"`
	BroadcastFloodGroup              uint64                 `protobuf:"varint,10,opt,name=broadcast_flood_group,json=broadcastFloodGroup,proto3" json:"broadcast_flood_group,omitempty"`
}

func (x *BridgeAttribute) Reset() {
	*x = BridgeAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeAttribute) ProtoMessage() {}

func (x *BridgeAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeAttribute.ProtoReflect.Descriptor instead.
func (*BridgeAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{41}
}

func (x *BridgeAttribute) GetType() BridgeType {
	if x != nil {
		return x.Type
	}
	return BridgeType_BRIDGE_TYPE_UNSPECIFIED
}

func (x *BridgeAttribute) GetPortList() *Uint64List {
	if x != nil {
		return x.PortList
	}
	return nil
}

func (x *BridgeAttribute) GetMaxLearnedAddresses() uint32 {
	if x != nil {
		return x.MaxLearnedAddresses
	}
	return 0
}

func (x *BridgeAttribute) GetLearnDisable() bool {
	if x != nil {
		return x.LearnDisable
	}
	return false
}

func (x *BridgeAttribute) GetUnknownUnicastFloodControlType() BridgeFloodControlType {
	if x != nil {
		return x.UnknownUnicastFloodControlType
	}
	return BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *BridgeAttribute) GetUnknownUnicastFloodGroup() uint64 {
	if x != nil {
		return x.UnknownUnicastFloodGroup
	}
	return 0
}

func (x *BridgeAttribute) GetUnknownMulticastFloodControlType() BridgeFloodControlType {
	if x != nil {
		return x.UnknownMulticastFloodControlType
	}
	return BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *BridgeAttribute) GetUnknownMulticastFloodGroup() uint64 {
	if x != nil {
		return x.UnknownMulticastFloodGroup
	}
	return 0
}

func (x *BridgeAttribute) GetBroadcastFloodControlType() BridgeFloodControlType {
	if x != nil {
		return x.BroadcastFloodControlType
	}
	return BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *BridgeAttribute) GetBroadcastFloodGroup() uint64 {
	if x != nil {
		return x.BroadcastFloodGroup
	}
	return 0
}

type BridgePortAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                                  BridgePortType            `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.BridgePortType" json:"type,omitempty"`
	PortId                                uint64                    `protobuf:"varint,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	TaggingMode                           BridgePortTaggingMode     `protobuf:"varint,3,opt,name=tagging_mode,json=taggingMode,proto3,enum=lemming.dataplane.sai.BridgePortTaggingMode" json:"tagging_mode,omitempty"`
	VlanId                                uint32                    `protobuf:"varint,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	RifId                                 uint64                    `protobuf:"varint,5,opt,name=rif_id,json=rifId,proto3" json:"rif_id,omitempty"`
	TunnelId                              uint64                    `protobuf:"varint,6,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	BridgeId                              uint64                    `protobuf:"varint,7,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	FdbLearningMode                       BridgePortFdbLearningMode `protobuf:"varint,8,opt,name=fdb_learning_mode,json=fdbLearningMode,proto3,enum=lemming.dataplane.sai.BridgePortFdbLearningMode" json:"fdb_learning_mode,omitempty"`
	MaxLearnedAddresses                   uint32                    `protobuf:"varint,9,opt,name=max_learned_addresses,json=maxLearnedAddresses,proto3" json:"max_learned_addresses,omitempty"`
	FdbLearningLimitViolationPacketAction PacketAction              `protobuf:"varint,10,opt,name=fdb_learning_limit_violation_packet_action,json=fdbLearningLimitViolationPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"fdb_learning_limit_violation_packet_action,omitempty"`
	AdminState                            bool                      `protobuf:"varint,11,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty"`
	IngressFiltering                      bool                      `protobuf:"varint,12,opt,name=ingress_filtering,json=ingressFiltering,proto3" json:"ingress_filtering,omitempty"`
	EgressFiltering                       bool                      `protobuf:"varint,13,opt,name=egress_filtering,json=egressFiltering,proto3" json:"egress_filtering,omitempty"`
	IsolationGroup                        uint64                    `protobuf:"varint,14,opt,name=isolation_group,json=isolationGroup,proto3" json:"isolation_group,omitempty"`
}

func (x *BridgePortAttribute) Reset() {
	*x = BridgePortAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgePortAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgePortAttribute) ProtoMessage() {}

func (x *BridgePortAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgePortAttribute.ProtoReflect.Descriptor instead.
func (*BridgePortAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{42}
}

func (x *BridgePortAttribute) GetType() BridgePortType {
	if x != nil {
		return x.Type
	}
	return BridgePortType_BRIDGE_PORT_TYPE_UNSPECIFIED
}

func (x *BridgePortAttribute) GetPortId() uint64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *BridgePortAttribute) GetTaggingMode() BridgePortTaggingMode {
	if x != nil {
		return x.TaggingMode
	}
	return BridgePortTaggingMode_BRIDGE_PORT_TAGGING_MODE_UNSPECIFIED
}

func (x *BridgePortAttribute) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *BridgePortAttribute) GetRifId() uint64 {
	if x != nil {
		return x.RifId
	}
	return 0
}

func (x *BridgePortAttribute) GetTunnelId() uint64 {
	if x != nil {
		return x.TunnelId
	}
	return 0
}

func (x *BridgePortAttribute) GetBridgeId() uint64 {
	if x != nil {
		return x.BridgeId
	}
	return 0
}

func (x *BridgePortAttribute) GetFdbLearningMode() BridgePortFdbLearningMode {
	if x != nil {
		return x.FdbLearningMode
	}
	return BridgePortFdbLearningMode_BRIDGE_PORT_FDB_LEARNING_MODE_UNSPECIFIED
}

func (x *BridgePortAttribute) GetMaxLearnedAddresses() uint32 {
	if x != nil {
		return x.MaxLearnedAddresses
	}
	return 0
}

func (x *BridgePortAttribute) GetFdbLearningLimitViolationPacketAction() PacketAction {
	if x != nil {
		return x.FdbLearningLimitViolationPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *BridgePortAttribute) GetAdminState() bool {
	if x != nil {
		return x.AdminState
	}
	return false
}

func (x *BridgePortAttribute) GetIngressFiltering() bool {
	if x != nil {
		return x.IngressFiltering
	}
	return false
}

func (x *BridgePortAttribute) GetEgressFiltering() bool {
	if x != nil {
		return x.EgressFiltering
	}
	return false
}

func (x *BridgePortAttribute) GetIsolationGroup() uint64 {
	if x != nil {
		return x.IsolationGroup
	}
	return 0
}

type BufferPoolAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SharedSize    uint64                  `protobuf:"varint,1,opt,name=shared_size,json=sharedSize,proto3" json:"shared_size,omitempty"`
	Type          BufferPoolType          `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.BufferPoolType" json:"type,omitempty"`
	Size          uint64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	ThresholdMode BufferPoolThresholdMode `protobuf:"varint,4,opt,name=threshold_mode,json=thresholdMode,proto3,enum=lemming.dataplane.sai.BufferPoolThresholdMode" json:"threshold_mode,omitempty"`
	Tam           *Uint64List             `protobuf:"bytes,5,opt,name=tam,proto3" json:"tam,omitempty"`
	XoffSize      uint64                  `protobuf:"varint,6,opt,name=xoff_size,json=xoffSize,proto3" json:"xoff_size,omitempty"`
	WredProfileId uint64                  `protobuf:"varint,7,opt,name=wred_profile_id,json=wredProfileId,proto3" json:"wred_profile_id,omitempty"`
}

func (x *BufferPoolAttribute) Reset() {
	*x = BufferPoolAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferPoolAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferPoolAttribute) ProtoMessage() {}

func (x *BufferPoolAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferPoolAttribute.ProtoReflect.Descriptor instead.
func (*BufferPoolAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{43}
}

func (x *BufferPoolAttribute) GetSharedSize() uint64 {
	if x != nil {
		return x.SharedSize
	}
	return 0
}

func (x *BufferPoolAttribute) GetType() BufferPoolType {
	if x != nil {
		return x.Type
	}
	return BufferPoolType_BUFFER_POOL_TYPE_UNSPECIFIED
}

func (x *BufferPoolAttribute) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BufferPoolAttribute) GetThresholdMode() BufferPoolThresholdMode {
	if x != nil {
		return x.ThresholdMode
	}
	return BufferPoolThresholdMode_BUFFER_POOL_THRESHOLD_MODE_UNSPECIFIED
}

func (x *BufferPoolAttribute) GetTam() *Uint64List {
	if x != nil {
		return x.Tam
	}
	return nil
}

func (x *BufferPoolAttribute) GetXoffSize() uint64 {
	if x != nil {
		return x.XoffSize
	}
	return 0
}

func (x *BufferPoolAttribute) GetWredProfileId() uint64 {
	if x != nil {
		return x.WredProfileId
	}
	return 0
}

type BufferProfileAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId             uint64                     `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	ReservedBufferSize uint64                     `protobuf:"varint,2,opt,name=reserved_buffer_size,json=reservedBufferSize,proto3" json:"reserved_buffer_size,omitempty"`
	ThresholdMode      BufferProfileThresholdMode `protobuf:"varint,3,opt,name=threshold_mode,json=thresholdMode,proto3,enum=lemming.dataplane.sai.BufferProfileThresholdMode" json:"threshold_mode,omitempty"`
	SharedDynamicTh    int32                      `protobuf:"varint,4,opt,name=shared_dynamic_th,json=sharedDynamicTh,proto3" json:"shared_dynamic_th,omitempty"`
	SharedStaticTh     uint64                     `protobuf:"varint,5,opt,name=shared_static_th,json=sharedStaticTh,proto3" json:"shared_static_th,omitempty"`
	XoffTh             uint64                     `protobuf:"varint,6,opt,name=xoff_th,json=xoffTh,proto3" json:"xoff_th,omitempty"`
	XonTh              uint64                     `protobuf:"varint,7,opt,name=xon_th,json=xonTh,proto3" json:"xon_th,omitempty"`
	XonOffsetTh        uint64                     `protobuf:"varint,8,opt,name=xon_offset_th,json=xonOffsetTh,proto3" json:"xon_offset_th,omitempty"`
}

func (x *BufferProfileAttribute) Reset() {
	*x = BufferProfileAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferProfileAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferProfileAttribute) ProtoMessage() {}

func (x *BufferProfileAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferProfileAttribute.ProtoReflect.Descriptor instead.
func (*BufferProfileAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{44}
}

func (x *BufferProfileAttribute) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *BufferProfileAttribute) GetReservedBufferSize() uint64 {
	if x != nil {
		return x.ReservedBufferSize
	}
	return 0
}

func (x *BufferProfileAttribute) GetThresholdMode() BufferProfileThresholdMode {
	if x != nil {
		return x.ThresholdMode
	}
	return BufferProfileThresholdMode_BUFFER_PROFILE_THRESHOLD_MODE_UNSPECIFIED
}

func (x *BufferProfileAttribute) GetSharedDynamicTh() int32 {
	if x != nil {
		return x.SharedDynamicTh
	}
	return 0
}

func (x *BufferProfileAttribute) GetSharedStaticTh() uint64 {
	if x != nil {
		return x.SharedStaticTh
	}
	return 0
}

func (x *BufferProfileAttribute) GetXoffTh() uint64 {
	if x != nil {
		return x.XoffTh
	}
	return 0
}

func (x *BufferProfileAttribute) GetXonTh() uint64 {
	if x != nil {
		return x.XonTh
	}
	return 0
}

func (x *BufferProfileAttribute) GetXonOffsetTh() uint64 {
	if x != nil {
		return x.XonOffsetTh
	}
	return 0
}

type CounterAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type CounterType `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.CounterType" json:"type,omitempty"`
}

func (x *CounterAttribute) Reset() {
	*x = CounterAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterAttribute) ProtoMessage() {}

func (x *CounterAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterAttribute.ProtoReflect.Descriptor instead.
func (*CounterAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{45}
}

func (x *CounterAttribute) GetType() CounterType {
	if x != nil {
		return x.Type
	}
	return CounterType_COUNTER_TYPE_UNSPECIFIED
}

type InDropReasonList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []InDropReason `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.InDropReason" json:"list,omitempty"`
}

func (x *InDropReasonList) Reset() {
	*x = InDropReasonList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InDropReasonList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InDropReasonList) ProtoMessage() {}

func (x *InDropReasonList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InDropReasonList.ProtoReflect.Descriptor instead.
func (*InDropReasonList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{46}
}

func (x *InDropReasonList) GetList() []InDropReason {
	if x != nil {
		return x.List
	}
	return nil
}

type OutDropReasonList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []OutDropReason `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.OutDropReason" json:"list,omitempty"`
}

func (x *OutDropReasonList) Reset() {
	*x = OutDropReasonList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutDropReasonList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutDropReasonList) ProtoMessage() {}

func (x *OutDropReasonList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutDropReasonList.ProtoReflect.Descriptor instead.
func (*OutDropReasonList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{47}
}

func (x *OutDropReasonList) GetList() []OutDropReason {
	if x != nil {
		return x.List
	}
	return nil
}

type DebugCounterAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index             uint32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Type              DebugCounterType       `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.DebugCounterType" json:"type,omitempty"`
	BindMethod        DebugCounterBindMethod `protobuf:"varint,3,opt,name=bind_method,json=bindMethod,proto3,enum=lemming.dataplane.sai.DebugCounterBindMethod" json:"bind_method,omitempty"`
	InDropReasonList  *InDropReasonList      `protobuf:"bytes,4,opt,name=in_drop_reason_list,json=inDropReasonList,proto3" json:"in_drop_reason_list,omitempty"`
	OutDropReasonList *OutDropReasonList     `protobuf:"bytes,5,opt,name=out_drop_reason_list,json=outDropReasonList,proto3" json:"out_drop_reason_list,omitempty"`
}

func (x *DebugCounterAttribute) Reset() {
	*x = DebugCounterAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugCounterAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugCounterAttribute) ProtoMessage() {}

func (x *DebugCounterAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugCounterAttribute.ProtoReflect.Descriptor instead.
func (*DebugCounterAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{48}
}

func (x *DebugCounterAttribute) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DebugCounterAttribute) GetType() DebugCounterType {
	if x != nil {
		return x.Type
	}
	return DebugCounterType_DEBUG_COUNTER_TYPE_UNSPECIFIED
}

func (x *DebugCounterAttribute) GetBindMethod() DebugCounterBindMethod {
	if x != nil {
		return x.BindMethod
	}
	return DebugCounterBindMethod_DEBUG_COUNTER_BIND_METHOD_UNSPECIFIED
}

func (x *DebugCounterAttribute) GetInDropReasonList() *InDropReasonList {
	if x != nil {
		return x.InDropReasonList
	}
	return nil
}

func (x *DebugCounterAttribute) GetOutDropReasonList() *OutDropReasonList {
	if x != nil {
		return x.OutDropReasonList
	}
	return nil
}

type DtelAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntEndpointEnable   bool          `protobuf:"varint,1,opt,name=int_endpoint_enable,json=intEndpointEnable,proto3" json:"int_endpoint_enable,omitempty"`
	IntTransitEnable    bool          `protobuf:"varint,2,opt,name=int_transit_enable,json=intTransitEnable,proto3" json:"int_transit_enable,omitempty"`
	PostcardEnable      bool          `protobuf:"varint,3,opt,name=postcard_enable,json=postcardEnable,proto3" json:"postcard_enable,omitempty"`
	DropReportEnable    bool          `protobuf:"varint,4,opt,name=drop_report_enable,json=dropReportEnable,proto3" json:"drop_report_enable,omitempty"`
	QueueReportEnable   bool          `protobuf:"varint,5,opt,name=queue_report_enable,json=queueReportEnable,proto3" json:"queue_report_enable,omitempty"`
	SwitchId            uint32        `protobuf:"varint,6,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	FlowStateClearCycle uint32        `protobuf:"varint,7,opt,name=flow_state_clear_cycle,json=flowStateClearCycle,proto3" json:"flow_state_clear_cycle,omitempty"`
	LatencySensitivity  uint32        `protobuf:"varint,8,opt,name=latency_sensitivity,json=latencySensitivity,proto3" json:"latency_sensitivity,omitempty"`
	SinkPortList        *Uint64List   `protobuf:"bytes,9,opt,name=sink_port_list,json=sinkPortList,proto3" json:"sink_port_list,omitempty"`
	IntL4Dscp           *AclFieldData `protobuf:"bytes,10,opt,name=int_l4_dscp,json=intL4Dscp,proto3" json:"int_l4_dscp,omitempty"`
}

func (x *DtelAttribute) Reset() {
	*x = DtelAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DtelAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DtelAttribute) ProtoMessage() {}

func (x *DtelAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DtelAttribute.ProtoReflect.Descriptor instead.
func (*DtelAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{49}
}

func (x *DtelAttribute) GetIntEndpointEnable() bool {
	if x != nil {
		return x.IntEndpointEnable
	}
	return false
}

func (x *DtelAttribute) GetIntTransitEnable() bool {
	if x != nil {
		return x.IntTransitEnable
	}
	return false
}

func (x *DtelAttribute) GetPostcardEnable() bool {
	if x != nil {
		return x.PostcardEnable
	}
	return false
}

func (x *DtelAttribute) GetDropReportEnable() bool {
	if x != nil {
		return x.DropReportEnable
	}
	return false
}

func (x *DtelAttribute) GetQueueReportEnable() bool {
	if x != nil {
		return x.QueueReportEnable
	}
	return false
}

func (x *DtelAttribute) GetSwitchId() uint32 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *DtelAttribute) GetFlowStateClearCycle() uint32 {
	if x != nil {
		return x.FlowStateClearCycle
	}
	return 0
}

func (x *DtelAttribute) GetLatencySensitivity() uint32 {
	if x != nil {
		return x.LatencySensitivity
	}
	return 0
}

func (x *DtelAttribute) GetSinkPortList() *Uint64List {
	if x != nil {
		return x.SinkPortList
	}
	return nil
}

func (x *DtelAttribute) GetIntL4Dscp() *AclFieldData {
	if x != nil {
		return x.IntL4Dscp
	}
	return nil
}

type DtelEventAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          DtelEventType `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.DtelEventType" json:"type,omitempty"`
	ReportSession uint64        `protobuf:"varint,2,opt,name=report_session,json=reportSession,proto3" json:"report_session,omitempty"`
	DscpValue     uint32        `protobuf:"varint,3,opt,name=dscp_value,json=dscpValue,proto3" json:"dscp_value,omitempty"`
}

func (x *DtelEventAttribute) Reset() {
	*x = DtelEventAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DtelEventAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DtelEventAttribute) ProtoMessage() {}

func (x *DtelEventAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DtelEventAttribute.ProtoReflect.Descriptor instead.
func (*DtelEventAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{50}
}

func (x *DtelEventAttribute) GetType() DtelEventType {
	if x != nil {
		return x.Type
	}
	return DtelEventType_DTEL_EVENT_TYPE_UNSPECIFIED
}

func (x *DtelEventAttribute) GetReportSession() uint64 {
	if x != nil {
		return x.ReportSession
	}
	return 0
}

func (x *DtelEventAttribute) GetDscpValue() uint32 {
	if x != nil {
		return x.DscpValue
	}
	return 0
}

type DtelIntSessionAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxHopCount             uint32 `protobuf:"varint,1,opt,name=max_hop_count,json=maxHopCount,proto3" json:"max_hop_count,omitempty"`
	CollectSwitchId         bool   `protobuf:"varint,2,opt,name=collect_switch_id,json=collectSwitchId,proto3" json:"collect_switch_id,omitempty"`
	CollectSwitchPorts      bool   `protobuf:"varint,3,opt,name=collect_switch_ports,json=collectSwitchPorts,proto3" json:"collect_switch_ports,omitempty"`
	CollectIngressTimestamp bool   `protobuf:"varint,4,opt,name=collect_ingress_timestamp,json=collectIngressTimestamp,proto3" json:"collect_ingress_timestamp,omitempty"`
	CollectEgressTimestamp  bool   `protobuf:"varint,5,opt,name=collect_egress_timestamp,json=collectEgressTimestamp,proto3" json:"collect_egress_timestamp,omitempty"`
	CollectQueueInfo        bool   `protobuf:"varint,6,opt,name=collect_queue_info,json=collectQueueInfo,proto3" json:"collect_queue_info,omitempty"`
}

func (x *DtelIntSessionAttribute) Reset() {
	*x = DtelIntSessionAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DtelIntSessionAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DtelIntSessionAttribute) ProtoMessage() {}

func (x *DtelIntSessionAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DtelIntSessionAttribute.ProtoReflect.Descriptor instead.
func (*DtelIntSessionAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{51}
}

func (x *DtelIntSessionAttribute) GetMaxHopCount() uint32 {
	if x != nil {
		return x.MaxHopCount
	}
	return 0
}

func (x *DtelIntSessionAttribute) GetCollectSwitchId() bool {
	if x != nil {
		return x.CollectSwitchId
	}
	return false
}

func (x *DtelIntSessionAttribute) GetCollectSwitchPorts() bool {
	if x != nil {
		return x.CollectSwitchPorts
	}
	return false
}

func (x *DtelIntSessionAttribute) GetCollectIngressTimestamp() bool {
	if x != nil {
		return x.CollectIngressTimestamp
	}
	return false
}

func (x *DtelIntSessionAttribute) GetCollectEgressTimestamp() bool {
	if x != nil {
		return x.CollectEgressTimestamp
	}
	return false
}

func (x *DtelIntSessionAttribute) GetCollectQueueInfo() bool {
	if x != nil {
		return x.CollectQueueInfo
	}
	return false
}

type DtelQueueReportAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueueId          uint64 `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	DepthThreshold   uint32 `protobuf:"varint,2,opt,name=depth_threshold,json=depthThreshold,proto3" json:"depth_threshold,omitempty"`
	LatencyThreshold uint32 `protobuf:"varint,3,opt,name=latency_threshold,json=latencyThreshold,proto3" json:"latency_threshold,omitempty"`
	BreachQuota      uint32 `protobuf:"varint,4,opt,name=breach_quota,json=breachQuota,proto3" json:"breach_quota,omitempty"`
	TailDrop         bool   `protobuf:"varint,5,opt,name=tail_drop,json=tailDrop,proto3" json:"tail_drop,omitempty"`
}

func (x *DtelQueueReportAttribute) Reset() {
	*x = DtelQueueReportAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DtelQueueReportAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DtelQueueReportAttribute) ProtoMessage() {}

func (x *DtelQueueReportAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DtelQueueReportAttribute.ProtoReflect.Descriptor instead.
func (*DtelQueueReportAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{52}
}

func (x *DtelQueueReportAttribute) GetQueueId() uint64 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *DtelQueueReportAttribute) GetDepthThreshold() uint32 {
	if x != nil {
		return x.DepthThreshold
	}
	return 0
}

func (x *DtelQueueReportAttribute) GetLatencyThreshold() uint32 {
	if x != nil {
		return x.LatencyThreshold
	}
	return 0
}

func (x *DtelQueueReportAttribute) GetBreachQuota() uint32 {
	if x != nil {
		return x.BreachQuota
	}
	return 0
}

func (x *DtelQueueReportAttribute) GetTailDrop() bool {
	if x != nil {
		return x.TailDrop
	}
	return false
}

type BytesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List [][]byte `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *BytesList) Reset() {
	*x = BytesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesList) ProtoMessage() {}

func (x *BytesList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesList.ProtoReflect.Descriptor instead.
func (*BytesList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{53}
}

func (x *BytesList) GetList() [][]byte {
	if x != nil {
		return x.List
	}
	return nil
}

type DtelReportSessionAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIp           []byte     `protobuf:"bytes,1,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DstIpList       *BytesList `protobuf:"bytes,2,opt,name=dst_ip_list,json=dstIpList,proto3" json:"dst_ip_list,omitempty"`
	VirtualRouterId uint64     `protobuf:"varint,3,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
	TruncateSize    uint32     `protobuf:"varint,4,opt,name=truncate_size,json=truncateSize,proto3" json:"truncate_size,omitempty"`
	UdpDstPort      uint32     `protobuf:"varint,5,opt,name=udp_dst_port,json=udpDstPort,proto3" json:"udp_dst_port,omitempty"`
}

func (x *DtelReportSessionAttribute) Reset() {
	*x = DtelReportSessionAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DtelReportSessionAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DtelReportSessionAttribute) ProtoMessage() {}

func (x *DtelReportSessionAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DtelReportSessionAttribute.ProtoReflect.Descriptor instead.
func (*DtelReportSessionAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{54}
}

func (x *DtelReportSessionAttribute) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *DtelReportSessionAttribute) GetDstIpList() *BytesList {
	if x != nil {
		return x.DstIpList
	}
	return nil
}

func (x *DtelReportSessionAttribute) GetVirtualRouterId() uint64 {
	if x != nil {
		return x.VirtualRouterId
	}
	return 0
}

func (x *DtelReportSessionAttribute) GetTruncateSize() uint32 {
	if x != nil {
		return x.TruncateSize
	}
	return 0
}

func (x *DtelReportSessionAttribute) GetUdpDstPort() uint32 {
	if x != nil {
		return x.UdpDstPort
	}
	return 0
}

type FdbEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         FdbEntryType `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.FdbEntryType" json:"type,omitempty"`
	PacketAction PacketAction `protobuf:"varint,2,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"packet_action,omitempty"`
	UserTrapId   uint64       `protobuf:"varint,3,opt,name=user_trap_id,json=userTrapId,proto3" json:"user_trap_id,omitempty"`
	BridgePortId uint64       `protobuf:"varint,4,opt,name=bridge_port_id,json=bridgePortId,proto3" json:"bridge_port_id,omitempty"`
	MetaData     uint32       `protobuf:"varint,5,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	EndpointIp   []byte       `protobuf:"bytes,6,opt,name=endpoint_ip,json=endpointIp,proto3" json:"endpoint_ip,omitempty"`
	CounterId    uint64       `protobuf:"varint,7,opt,name=counter_id,json=counterId,proto3" json:"counter_id,omitempty"`
	AllowMacMove bool         `protobuf:"varint,8,opt,name=allow_mac_move,json=allowMacMove,proto3" json:"allow_mac_move,omitempty"`
}

func (x *FdbEntryAttribute) Reset() {
	*x = FdbEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FdbEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FdbEntryAttribute) ProtoMessage() {}

func (x *FdbEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FdbEntryAttribute.ProtoReflect.Descriptor instead.
func (*FdbEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{55}
}

func (x *FdbEntryAttribute) GetType() FdbEntryType {
	if x != nil {
		return x.Type
	}
	return FdbEntryType_FDB_ENTRY_TYPE_UNSPECIFIED
}

func (x *FdbEntryAttribute) GetPacketAction() PacketAction {
	if x != nil {
		return x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *FdbEntryAttribute) GetUserTrapId() uint64 {
	if x != nil {
		return x.UserTrapId
	}
	return 0
}

func (x *FdbEntryAttribute) GetBridgePortId() uint64 {
	if x != nil {
		return x.BridgePortId
	}
	return 0
}

func (x *FdbEntryAttribute) GetMetaData() uint32 {
	if x != nil {
		return x.MetaData
	}
	return 0
}

func (x *FdbEntryAttribute) GetEndpointIp() []byte {
	if x != nil {
		return x.EndpointIp
	}
	return nil
}

func (x *FdbEntryAttribute) GetCounterId() uint64 {
	if x != nil {
		return x.CounterId
	}
	return 0
}

func (x *FdbEntryAttribute) GetAllowMacMove() bool {
	if x != nil {
		return x.AllowMacMove
	}
	return false
}

type FdbFlushAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgePortId uint64            `protobuf:"varint,1,opt,name=bridge_port_id,json=bridgePortId,proto3" json:"bridge_port_id,omitempty"`
	BvId         uint64            `protobuf:"varint,2,opt,name=bv_id,json=bvId,proto3" json:"bv_id,omitempty"`
	EntryType    FdbFlushEntryType `protobuf:"varint,3,opt,name=entry_type,json=entryType,proto3,enum=lemming.dataplane.sai.FdbFlushEntryType" json:"entry_type,omitempty"`
}

func (x *FdbFlushAttribute) Reset() {
	*x = FdbFlushAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FdbFlushAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FdbFlushAttribute) ProtoMessage() {}

func (x *FdbFlushAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FdbFlushAttribute.ProtoReflect.Descriptor instead.
func (*FdbFlushAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{56}
}

func (x *FdbFlushAttribute) GetBridgePortId() uint64 {
	if x != nil {
		return x.BridgePortId
	}
	return 0
}

func (x *FdbFlushAttribute) GetBvId() uint64 {
	if x != nil {
		return x.BvId
	}
	return 0
}

func (x *FdbFlushAttribute) GetEntryType() FdbFlushEntryType {
	if x != nil {
		return x.EntryType
	}
	return FdbFlushEntryType_FDB_FLUSH_ENTRY_TYPE_UNSPECIFIED
}

type FineGrainedHashFieldAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NativeHashField NativeHashField `protobuf:"varint,1,opt,name=native_hash_field,json=nativeHashField,proto3,enum=lemming.dataplane.sai.NativeHashField" json:"native_hash_field,omitempty"`
	Ipv4Mask        []byte          `protobuf:"bytes,2,opt,name=ipv4_mask,json=ipv4Mask,proto3" json:"ipv4_mask,omitempty"`
	Ipv6Mask        []byte          `protobuf:"bytes,3,opt,name=ipv6_mask,json=ipv6Mask,proto3" json:"ipv6_mask,omitempty"`
	SequenceId      uint32          `protobuf:"varint,4,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
}

func (x *FineGrainedHashFieldAttribute) Reset() {
	*x = FineGrainedHashFieldAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FineGrainedHashFieldAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FineGrainedHashFieldAttribute) ProtoMessage() {}

func (x *FineGrainedHashFieldAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FineGrainedHashFieldAttribute.ProtoReflect.Descriptor instead.
func (*FineGrainedHashFieldAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{57}
}

func (x *FineGrainedHashFieldAttribute) GetNativeHashField() NativeHashField {
	if x != nil {
		return x.NativeHashField
	}
	return NativeHashField_NATIVE_HASH_FIELD_UNSPECIFIED
}

func (x *FineGrainedHashFieldAttribute) GetIpv4Mask() []byte {
	if x != nil {
		return x.Ipv4Mask
	}
	return nil
}

func (x *FineGrainedHashFieldAttribute) GetIpv6Mask() []byte {
	if x != nil {
		return x.Ipv6Mask
	}
	return nil
}

func (x *FineGrainedHashFieldAttribute) GetSequenceId() uint32 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

type NativeHashFieldList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []NativeHashField `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.NativeHashField" json:"list,omitempty"`
}

func (x *NativeHashFieldList) Reset() {
	*x = NativeHashFieldList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeHashFieldList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeHashFieldList) ProtoMessage() {}

func (x *NativeHashFieldList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeHashFieldList.ProtoReflect.Descriptor instead.
func (*NativeHashFieldList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{58}
}

func (x *NativeHashFieldList) GetList() []NativeHashField {
	if x != nil {
		return x.List
	}
	return nil
}

type HashAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NativeHashFieldList      *NativeHashFieldList `protobuf:"bytes,1,opt,name=native_hash_field_list,json=nativeHashFieldList,proto3" json:"native_hash_field_list,omitempty"`
	UdfGroupList             *Uint64List          `protobuf:"bytes,2,opt,name=udf_group_list,json=udfGroupList,proto3" json:"udf_group_list,omitempty"`
	FineGrainedHashFieldList *Uint64List          `protobuf:"bytes,3,opt,name=fine_grained_hash_field_list,json=fineGrainedHashFieldList,proto3" json:"fine_grained_hash_field_list,omitempty"`
}

func (x *HashAttribute) Reset() {
	*x = HashAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashAttribute) ProtoMessage() {}

func (x *HashAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashAttribute.ProtoReflect.Descriptor instead.
func (*HashAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{59}
}

func (x *HashAttribute) GetNativeHashFieldList() *NativeHashFieldList {
	if x != nil {
		return x.NativeHashFieldList
	}
	return nil
}

func (x *HashAttribute) GetUdfGroupList() *Uint64List {
	if x != nil {
		return x.UdfGroupList
	}
	return nil
}

func (x *HashAttribute) GetFineGrainedHashFieldList() *Uint64List {
	if x != nil {
		return x.FineGrainedHashFieldList
	}
	return nil
}

type HostifAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               HostifType    `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.HostifType" json:"type,omitempty"`
	ObjId              uint64        `protobuf:"varint,2,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	Name               []byte        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	OperStatus         bool          `protobuf:"varint,4,opt,name=oper_status,json=operStatus,proto3" json:"oper_status,omitempty"`
	Queue              uint32        `protobuf:"varint,5,opt,name=queue,proto3" json:"queue,omitempty"`
	VlanTag            HostifVlanTag `protobuf:"varint,6,opt,name=vlan_tag,json=vlanTag,proto3,enum=lemming.dataplane.sai.HostifVlanTag" json:"vlan_tag,omitempty"`
	GenetlinkMcgrpName []byte        `protobuf:"bytes,7,opt,name=genetlink_mcgrp_name,json=genetlinkMcgrpName,proto3" json:"genetlink_mcgrp_name,omitempty"`
}

func (x *HostifAttribute) Reset() {
	*x = HostifAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostifAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostifAttribute) ProtoMessage() {}

func (x *HostifAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostifAttribute.ProtoReflect.Descriptor instead.
func (*HostifAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{60}
}

func (x *HostifAttribute) GetType() HostifType {
	if x != nil {
		return x.Type
	}
	return HostifType_HOSTIF_TYPE_UNSPECIFIED
}

func (x *HostifAttribute) GetObjId() uint64 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *HostifAttribute) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *HostifAttribute) GetOperStatus() bool {
	if x != nil {
		return x.OperStatus
	}
	return false
}

func (x *HostifAttribute) GetQueue() uint32 {
	if x != nil {
		return x.Queue
	}
	return 0
}

func (x *HostifAttribute) GetVlanTag() HostifVlanTag {
	if x != nil {
		return x.VlanTag
	}
	return HostifVlanTag_HOSTIF_VLAN_TAG_UNSPECIFIED
}

func (x *HostifAttribute) GetGenetlinkMcgrpName() []byte {
	if x != nil {
		return x.GenetlinkMcgrpName
	}
	return nil
}

type HostifPacketAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostifTrapId     uint64                 `protobuf:"varint,1,opt,name=hostif_trap_id,json=hostifTrapId,proto3" json:"hostif_trap_id,omitempty"`
	IngressPort      uint64                 `protobuf:"varint,2,opt,name=ingress_port,json=ingressPort,proto3" json:"ingress_port,omitempty"`
	IngressLag       uint64                 `protobuf:"varint,3,opt,name=ingress_lag,json=ingressLag,proto3" json:"ingress_lag,omitempty"`
	HostifTxType     HostifTxType           `protobuf:"varint,4,opt,name=hostif_tx_type,json=hostifTxType,proto3,enum=lemming.dataplane.sai.HostifTxType" json:"hostif_tx_type,omitempty"`
	EgressPortOrLag  uint64                 `protobuf:"varint,5,opt,name=egress_port_or_lag,json=egressPortOrLag,proto3" json:"egress_port_or_lag,omitempty"`
	BridgeId         uint64                 `protobuf:"varint,6,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EgressQueueIndex uint32                 `protobuf:"varint,8,opt,name=egress_queue_index,json=egressQueueIndex,proto3" json:"egress_queue_index,omitempty"`
	ZeroCopyTx       bool                   `protobuf:"varint,9,opt,name=zero_copy_tx,json=zeroCopyTx,proto3" json:"zero_copy_tx,omitempty"`
}

func (x *HostifPacketAttribute) Reset() {
	*x = HostifPacketAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostifPacketAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostifPacketAttribute) ProtoMessage() {}

func (x *HostifPacketAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostifPacketAttribute.ProtoReflect.Descriptor instead.
func (*HostifPacketAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{61}
}

func (x *HostifPacketAttribute) GetHostifTrapId() uint64 {
	if x != nil {
		return x.HostifTrapId
	}
	return 0
}

func (x *HostifPacketAttribute) GetIngressPort() uint64 {
	if x != nil {
		return x.IngressPort
	}
	return 0
}

func (x *HostifPacketAttribute) GetIngressLag() uint64 {
	if x != nil {
		return x.IngressLag
	}
	return 0
}

func (x *HostifPacketAttribute) GetHostifTxType() HostifTxType {
	if x != nil {
		return x.HostifTxType
	}
	return HostifTxType_HOSTIF_TX_TYPE_UNSPECIFIED
}

func (x *HostifPacketAttribute) GetEgressPortOrLag() uint64 {
	if x != nil {
		return x.EgressPortOrLag
	}
	return 0
}

func (x *HostifPacketAttribute) GetBridgeId() uint64 {
	if x != nil {
		return x.BridgeId
	}
	return 0
}

func (x *HostifPacketAttribute) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *HostifPacketAttribute) GetEgressQueueIndex() uint32 {
	if x != nil {
		return x.EgressQueueIndex
	}
	return 0
}

func (x *HostifPacketAttribute) GetZeroCopyTx() bool {
	if x != nil {
		return x.ZeroCopyTx
	}
	return false
}

type HostifTableEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        HostifTableEntryType        `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.HostifTableEntryType" json:"type,omitempty"`
	ObjId       uint64                      `protobuf:"varint,2,opt,name=obj_id,json=objId,proto3" json:"obj_id,omitempty"`
	TrapId      uint64                      `protobuf:"varint,3,opt,name=trap_id,json=trapId,proto3" json:"trap_id,omitempty"`
	ChannelType HostifTableEntryChannelType `protobuf:"varint,4,opt,name=channel_type,json=channelType,proto3,enum=lemming.dataplane.sai.HostifTableEntryChannelType" json:"channel_type,omitempty"`
	HostIf      uint64                      `protobuf:"varint,5,opt,name=host_if,json=hostIf,proto3" json:"host_if,omitempty"`
}

func (x *HostifTableEntryAttribute) Reset() {
	*x = HostifTableEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostifTableEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostifTableEntryAttribute) ProtoMessage() {}

func (x *HostifTableEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostifTableEntryAttribute.ProtoReflect.Descriptor instead.
func (*HostifTableEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{62}
}

func (x *HostifTableEntryAttribute) GetType() HostifTableEntryType {
	if x != nil {
		return x.Type
	}
	return HostifTableEntryType_HOSTIF_TABLE_ENTRY_TYPE_UNSPECIFIED
}

func (x *HostifTableEntryAttribute) GetObjId() uint64 {
	if x != nil {
		return x.ObjId
	}
	return 0
}

func (x *HostifTableEntryAttribute) GetTrapId() uint64 {
	if x != nil {
		return x.TrapId
	}
	return 0
}

func (x *HostifTableEntryAttribute) GetChannelType() HostifTableEntryChannelType {
	if x != nil {
		return x.ChannelType
	}
	return HostifTableEntryChannelType_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_UNSPECIFIED
}

func (x *HostifTableEntryAttribute) GetHostIf() uint64 {
	if x != nil {
		return x.HostIf
	}
	return 0
}

type HostifTrapAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrapType        HostifTrapType `protobuf:"varint,1,opt,name=trap_type,json=trapType,proto3,enum=lemming.dataplane.sai.HostifTrapType" json:"trap_type,omitempty"`
	PacketAction    PacketAction   `protobuf:"varint,2,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"packet_action,omitempty"`
	TrapPriority    uint32         `protobuf:"varint,3,opt,name=trap_priority,json=trapPriority,proto3" json:"trap_priority,omitempty"`
	ExcludePortList *Uint64List    `protobuf:"bytes,4,opt,name=exclude_port_list,json=excludePortList,proto3" json:"exclude_port_list,omitempty"`
	TrapGroup       uint64         `protobuf:"varint,5,opt,name=trap_group,json=trapGroup,proto3" json:"trap_group,omitempty"`
	MirrorSession   *Uint64List    `protobuf:"bytes,6,opt,name=mirror_session,json=mirrorSession,proto3" json:"mirror_session,omitempty"`
	CounterId       uint64         `protobuf:"varint,7,opt,name=counter_id,json=counterId,proto3" json:"counter_id,omitempty"`
}

func (x *HostifTrapAttribute) Reset() {
	*x = HostifTrapAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostifTrapAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostifTrapAttribute) ProtoMessage() {}

func (x *HostifTrapAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostifTrapAttribute.ProtoReflect.Descriptor instead.
func (*HostifTrapAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{63}
}

func (x *HostifTrapAttribute) GetTrapType() HostifTrapType {
	if x != nil {
		return x.TrapType
	}
	return HostifTrapType_HOSTIF_TRAP_TYPE_UNSPECIFIED
}

func (x *HostifTrapAttribute) GetPacketAction() PacketAction {
	if x != nil {
		return x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *HostifTrapAttribute) GetTrapPriority() uint32 {
	if x != nil {
		return x.TrapPriority
	}
	return 0
}

func (x *HostifTrapAttribute) GetExcludePortList() *Uint64List {
	if x != nil {
		return x.ExcludePortList
	}
	return nil
}

func (x *HostifTrapAttribute) GetTrapGroup() uint64 {
	if x != nil {
		return x.TrapGroup
	}
	return 0
}

func (x *HostifTrapAttribute) GetMirrorSession() *Uint64List {
	if x != nil {
		return x.MirrorSession
	}
	return nil
}

func (x *HostifTrapAttribute) GetCounterId() uint64 {
	if x != nil {
		return x.CounterId
	}
	return 0
}

type HostifTrapGroupAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminState bool   `protobuf:"varint,1,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty"`
	Queue      uint32 `protobuf:"varint,2,opt,name=queue,proto3" json:"queue,omitempty"`
	Policer    uint64 `protobuf:"varint,3,opt,name=policer,proto3" json:"policer,omitempty"`
}

func (x *HostifTrapGroupAttribute) Reset() {
	*x = HostifTrapGroupAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostifTrapGroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostifTrapGroupAttribute) ProtoMessage() {}

func (x *HostifTrapGroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostifTrapGroupAttribute.ProtoReflect.Descriptor instead.
func (*HostifTrapGroupAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{64}
}

func (x *HostifTrapGroupAttribute) GetAdminState() bool {
	if x != nil {
		return x.AdminState
	}
	return false
}

func (x *HostifTrapGroupAttribute) GetQueue() uint32 {
	if x != nil {
		return x.Queue
	}
	return 0
}

func (x *HostifTrapGroupAttribute) GetPolicer() uint64 {
	if x != nil {
		return x.Policer
	}
	return 0
}

type HostifUserDefinedTrapAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         HostifUserDefinedTrapType `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.HostifUserDefinedTrapType" json:"type,omitempty"`
	TrapPriority uint32                    `protobuf:"varint,2,opt,name=trap_priority,json=trapPriority,proto3" json:"trap_priority,omitempty"`
	TrapGroup    uint64                    `protobuf:"varint,3,opt,name=trap_group,json=trapGroup,proto3" json:"trap_group,omitempty"`
}

func (x *HostifUserDefinedTrapAttribute) Reset() {
	*x = HostifUserDefinedTrapAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostifUserDefinedTrapAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostifUserDefinedTrapAttribute) ProtoMessage() {}

func (x *HostifUserDefinedTrapAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostifUserDefinedTrapAttribute.ProtoReflect.Descriptor instead.
func (*HostifUserDefinedTrapAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{65}
}

func (x *HostifUserDefinedTrapAttribute) GetType() HostifUserDefinedTrapType {
	if x != nil {
		return x.Type
	}
	return HostifUserDefinedTrapType_HOSTIF_USER_DEFINED_TRAP_TYPE_UNSPECIFIED
}

func (x *HostifUserDefinedTrapAttribute) GetTrapPriority() uint32 {
	if x != nil {
		return x.TrapPriority
	}
	return 0
}

func (x *HostifUserDefinedTrapAttribute) GetTrapGroup() uint64 {
	if x != nil {
		return x.TrapGroup
	}
	return 0
}

type IngressPriorityGroupAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BufferProfile uint64      `protobuf:"varint,1,opt,name=buffer_profile,json=bufferProfile,proto3" json:"buffer_profile,omitempty"`
	Port          uint64      `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Tam           *Uint64List `protobuf:"bytes,3,opt,name=tam,proto3" json:"tam,omitempty"`
	Index         uint32      `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *IngressPriorityGroupAttribute) Reset() {
	*x = IngressPriorityGroupAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressPriorityGroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressPriorityGroupAttribute) ProtoMessage() {}

func (x *IngressPriorityGroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressPriorityGroupAttribute.ProtoReflect.Descriptor instead.
func (*IngressPriorityGroupAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{66}
}

func (x *IngressPriorityGroupAttribute) GetBufferProfile() uint64 {
	if x != nil {
		return x.BufferProfile
	}
	return 0
}

func (x *IngressPriorityGroupAttribute) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *IngressPriorityGroupAttribute) GetTam() *Uint64List {
	if x != nil {
		return x.Tam
	}
	return nil
}

func (x *IngressPriorityGroupAttribute) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type InsegEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOfPop          uint32               `protobuf:"varint,1,opt,name=num_of_pop,json=numOfPop,proto3" json:"num_of_pop,omitempty"`
	PacketAction      PacketAction         `protobuf:"varint,2,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"packet_action,omitempty"`
	TrapPriority      uint32               `protobuf:"varint,3,opt,name=trap_priority,json=trapPriority,proto3" json:"trap_priority,omitempty"`
	NextHopId         uint64               `protobuf:"varint,4,opt,name=next_hop_id,json=nextHopId,proto3" json:"next_hop_id,omitempty"`
	PscType           InsegEntryPscType    `protobuf:"varint,5,opt,name=psc_type,json=pscType,proto3,enum=lemming.dataplane.sai.InsegEntryPscType" json:"psc_type,omitempty"`
	QosTc             uint32               `protobuf:"varint,6,opt,name=qos_tc,json=qosTc,proto3" json:"qos_tc,omitempty"`
	MplsExpToTcMap    uint64               `protobuf:"varint,7,opt,name=mpls_exp_to_tc_map,json=mplsExpToTcMap,proto3" json:"mpls_exp_to_tc_map,omitempty"`
	MplsExpToColorMap uint64               `protobuf:"varint,8,opt,name=mpls_exp_to_color_map,json=mplsExpToColorMap,proto3" json:"mpls_exp_to_color_map,omitempty"`
	PopTtlMode        InsegEntryPopTtlMode `protobuf:"varint,9,opt,name=pop_ttl_mode,json=popTtlMode,proto3,enum=lemming.dataplane.sai.InsegEntryPopTtlMode" json:"pop_ttl_mode,omitempty"`
	PopQosMode        InsegEntryPopQosMode `protobuf:"varint,10,opt,name=pop_qos_mode,json=popQosMode,proto3,enum=lemming.dataplane.sai.InsegEntryPopQosMode" json:"pop_qos_mode,omitempty"`
	CounterId         uint64               `protobuf:"varint,11,opt,name=counter_id,json=counterId,proto3" json:"counter_id,omitempty"`
}

func (x *InsegEntryAttribute) Reset() {
	*x = InsegEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsegEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsegEntryAttribute) ProtoMessage() {}

func (x *InsegEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsegEntryAttribute.ProtoReflect.Descriptor instead.
func (*InsegEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{67}
}

func (x *InsegEntryAttribute) GetNumOfPop() uint32 {
	if x != nil {
		return x.NumOfPop
	}
	return 0
}

func (x *InsegEntryAttribute) GetPacketAction() PacketAction {
	if x != nil {
		return x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *InsegEntryAttribute) GetTrapPriority() uint32 {
	if x != nil {
		return x.TrapPriority
	}
	return 0
}

func (x *InsegEntryAttribute) GetNextHopId() uint64 {
	if x != nil {
		return x.NextHopId
	}
	return 0
}

func (x *InsegEntryAttribute) GetPscType() InsegEntryPscType {
	if x != nil {
		return x.PscType
	}
	return InsegEntryPscType_INSEG_ENTRY_PSC_TYPE_UNSPECIFIED
}

func (x *InsegEntryAttribute) GetQosTc() uint32 {
	if x != nil {
		return x.QosTc
	}
	return 0
}

func (x *InsegEntryAttribute) GetMplsExpToTcMap() uint64 {
	if x != nil {
		return x.MplsExpToTcMap
	}
	return 0
}

func (x *InsegEntryAttribute) GetMplsExpToColorMap() uint64 {
	if x != nil {
		return x.MplsExpToColorMap
	}
	return 0
}

func (x *InsegEntryAttribute) GetPopTtlMode() InsegEntryPopTtlMode {
	if x != nil {
		return x.PopTtlMode
	}
	return InsegEntryPopTtlMode_INSEG_ENTRY_POP_TTL_MODE_UNSPECIFIED
}

func (x *InsegEntryAttribute) GetPopQosMode() InsegEntryPopQosMode {
	if x != nil {
		return x.PopQosMode
	}
	return InsegEntryPopQosMode_INSEG_ENTRY_POP_QOS_MODE_UNSPECIFIED
}

func (x *InsegEntryAttribute) GetCounterId() uint64 {
	if x != nil {
		return x.CounterId
	}
	return 0
}

type IpmcEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketAction  PacketAction `protobuf:"varint,1,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"packet_action,omitempty"`
	OutputGroupId uint64       `protobuf:"varint,2,opt,name=output_group_id,json=outputGroupId,proto3" json:"output_group_id,omitempty"`
	RpfGroupId    uint64       `protobuf:"varint,3,opt,name=rpf_group_id,json=rpfGroupId,proto3" json:"rpf_group_id,omitempty"`
}

func (x *IpmcEntryAttribute) Reset() {
	*x = IpmcEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpmcEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpmcEntryAttribute) ProtoMessage() {}

func (x *IpmcEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpmcEntryAttribute.ProtoReflect.Descriptor instead.
func (*IpmcEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{68}
}

func (x *IpmcEntryAttribute) GetPacketAction() PacketAction {
	if x != nil {
		return x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *IpmcEntryAttribute) GetOutputGroupId() uint64 {
	if x != nil {
		return x.OutputGroupId
	}
	return 0
}

func (x *IpmcEntryAttribute) GetRpfGroupId() uint64 {
	if x != nil {
		return x.RpfGroupId
	}
	return 0
}

type IpmcGroupAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpmcOutputCount uint32      `protobuf:"varint,1,opt,name=ipmc_output_count,json=ipmcOutputCount,proto3" json:"ipmc_output_count,omitempty"`
	IpmcMemberList  *Uint64List `protobuf:"bytes,2,opt,name=ipmc_member_list,json=ipmcMemberList,proto3" json:"ipmc_member_list,omitempty"`
}

func (x *IpmcGroupAttribute) Reset() {
	*x = IpmcGroupAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpmcGroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpmcGroupAttribute) ProtoMessage() {}

func (x *IpmcGroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpmcGroupAttribute.ProtoReflect.Descriptor instead.
func (*IpmcGroupAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{69}
}

func (x *IpmcGroupAttribute) GetIpmcOutputCount() uint32 {
	if x != nil {
		return x.IpmcOutputCount
	}
	return 0
}

func (x *IpmcGroupAttribute) GetIpmcMemberList() *Uint64List {
	if x != nil {
		return x.IpmcMemberList
	}
	return nil
}

type IpmcGroupMemberAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpmcGroupId  uint64 `protobuf:"varint,1,opt,name=ipmc_group_id,json=ipmcGroupId,proto3" json:"ipmc_group_id,omitempty"`
	IpmcOutputId uint64 `protobuf:"varint,2,opt,name=ipmc_output_id,json=ipmcOutputId,proto3" json:"ipmc_output_id,omitempty"`
}

func (x *IpmcGroupMemberAttribute) Reset() {
	*x = IpmcGroupMemberAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpmcGroupMemberAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpmcGroupMemberAttribute) ProtoMessage() {}

func (x *IpmcGroupMemberAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpmcGroupMemberAttribute.ProtoReflect.Descriptor instead.
func (*IpmcGroupMemberAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{70}
}

func (x *IpmcGroupMemberAttribute) GetIpmcGroupId() uint64 {
	if x != nil {
		return x.IpmcGroupId
	}
	return 0
}

func (x *IpmcGroupMemberAttribute) GetIpmcOutputId() uint64 {
	if x != nil {
		return x.IpmcOutputId
	}
	return 0
}

type IpsecCipherList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []IpsecCipher `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.IpsecCipher" json:"list,omitempty"`
}

func (x *IpsecCipherList) Reset() {
	*x = IpsecCipherList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecCipherList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecCipherList) ProtoMessage() {}

func (x *IpsecCipherList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecCipherList.ProtoReflect.Descriptor instead.
func (*IpsecCipherList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{71}
}

func (x *IpsecCipherList) GetList() []IpsecCipher {
	if x != nil {
		return x.List
	}
	return nil
}

type IpsecAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TermRemoteIpMatchSupported            bool             `protobuf:"varint,1,opt,name=term_remote_ip_match_supported,json=termRemoteIpMatchSupported,proto3" json:"term_remote_ip_match_supported,omitempty"`
	SwitchingModeCutThroughSupported      bool             `protobuf:"varint,2,opt,name=switching_mode_cut_through_supported,json=switchingModeCutThroughSupported,proto3" json:"switching_mode_cut_through_supported,omitempty"`
	SwitchingModeStoreAndForwardSupported bool             `protobuf:"varint,3,opt,name=switching_mode_store_and_forward_supported,json=switchingModeStoreAndForwardSupported,proto3" json:"switching_mode_store_and_forward_supported,omitempty"`
	StatsModeReadSupported                bool             `protobuf:"varint,4,opt,name=stats_mode_read_supported,json=statsModeReadSupported,proto3" json:"stats_mode_read_supported,omitempty"`
	StatsModeReadClearSupported           bool             `protobuf:"varint,5,opt,name=stats_mode_read_clear_supported,json=statsModeReadClearSupported,proto3" json:"stats_mode_read_clear_supported,omitempty"`
	Sn_32BitSupported                     bool             `protobuf:"varint,6,opt,name=sn_32bit_supported,json=sn32bitSupported,proto3" json:"sn_32bit_supported,omitempty"`
	Esn_64BitSupported                    bool             `protobuf:"varint,7,opt,name=esn_64bit_supported,json=esn64bitSupported,proto3" json:"esn_64bit_supported,omitempty"`
	SupportedCipherList                   *IpsecCipherList `protobuf:"bytes,8,opt,name=supported_cipher_list,json=supportedCipherList,proto3" json:"supported_cipher_list,omitempty"`
	SystemSideMtu                         uint32           `protobuf:"varint,9,opt,name=system_side_mtu,json=systemSideMtu,proto3" json:"system_side_mtu,omitempty"`
	WarmBootSupported                     bool             `protobuf:"varint,10,opt,name=warm_boot_supported,json=warmBootSupported,proto3" json:"warm_boot_supported,omitempty"`
	WarmBootEnable                        bool             `protobuf:"varint,11,opt,name=warm_boot_enable,json=warmBootEnable,proto3" json:"warm_boot_enable,omitempty"`
	ExternalSaIndexEnable                 bool             `protobuf:"varint,12,opt,name=external_sa_index_enable,json=externalSaIndexEnable,proto3" json:"external_sa_index_enable,omitempty"`
	CtagTpid                              uint32           `protobuf:"varint,13,opt,name=ctag_tpid,json=ctagTpid,proto3" json:"ctag_tpid,omitempty"`
	StagTpid                              uint32           `protobuf:"varint,14,opt,name=stag_tpid,json=stagTpid,proto3" json:"stag_tpid,omitempty"`
	MaxVlanTagsParsed                     uint32           `protobuf:"varint,15,opt,name=max_vlan_tags_parsed,json=maxVlanTagsParsed,proto3" json:"max_vlan_tags_parsed,omitempty"`
	OctetCountHighWatermark               uint64           `protobuf:"varint,16,opt,name=octet_count_high_watermark,json=octetCountHighWatermark,proto3" json:"octet_count_high_watermark,omitempty"`
	OctetCountLowWatermark                uint64           `protobuf:"varint,17,opt,name=octet_count_low_watermark,json=octetCountLowWatermark,proto3" json:"octet_count_low_watermark,omitempty"`
	StatsMode                             StatsMode        `protobuf:"varint,18,opt,name=stats_mode,json=statsMode,proto3,enum=lemming.dataplane.sai.StatsMode" json:"stats_mode,omitempty"`
	AvailableIpsecSa                      uint32           `protobuf:"varint,19,opt,name=available_ipsec_sa,json=availableIpsecSa,proto3" json:"available_ipsec_sa,omitempty"`
	SaList                                *Uint64List      `protobuf:"bytes,20,opt,name=sa_list,json=saList,proto3" json:"sa_list,omitempty"`
}

func (x *IpsecAttribute) Reset() {
	*x = IpsecAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecAttribute) ProtoMessage() {}

func (x *IpsecAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecAttribute.ProtoReflect.Descriptor instead.
func (*IpsecAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{72}
}

func (x *IpsecAttribute) GetTermRemoteIpMatchSupported() bool {
	if x != nil {
		return x.TermRemoteIpMatchSupported
	}
	return false
}

func (x *IpsecAttribute) GetSwitchingModeCutThroughSupported() bool {
	if x != nil {
		return x.SwitchingModeCutThroughSupported
	}
	return false
}

func (x *IpsecAttribute) GetSwitchingModeStoreAndForwardSupported() bool {
	if x != nil {
		return x.SwitchingModeStoreAndForwardSupported
	}
	return false
}

func (x *IpsecAttribute) GetStatsModeReadSupported() bool {
	if x != nil {
		return x.StatsModeReadSupported
	}
	return false
}

func (x *IpsecAttribute) GetStatsModeReadClearSupported() bool {
	if x != nil {
		return x.StatsModeReadClearSupported
	}
	return false
}

func (x *IpsecAttribute) GetSn_32BitSupported() bool {
	if x != nil {
		return x.Sn_32BitSupported
	}
	return false
}

func (x *IpsecAttribute) GetEsn_64BitSupported() bool {
	if x != nil {
		return x.Esn_64BitSupported
	}
	return false
}

func (x *IpsecAttribute) GetSupportedCipherList() *IpsecCipherList {
	if x != nil {
		return x.SupportedCipherList
	}
	return nil
}

func (x *IpsecAttribute) GetSystemSideMtu() uint32 {
	if x != nil {
		return x.SystemSideMtu
	}
	return 0
}

func (x *IpsecAttribute) GetWarmBootSupported() bool {
	if x != nil {
		return x.WarmBootSupported
	}
	return false
}

func (x *IpsecAttribute) GetWarmBootEnable() bool {
	if x != nil {
		return x.WarmBootEnable
	}
	return false
}

func (x *IpsecAttribute) GetExternalSaIndexEnable() bool {
	if x != nil {
		return x.ExternalSaIndexEnable
	}
	return false
}

func (x *IpsecAttribute) GetCtagTpid() uint32 {
	if x != nil {
		return x.CtagTpid
	}
	return 0
}

func (x *IpsecAttribute) GetStagTpid() uint32 {
	if x != nil {
		return x.StagTpid
	}
	return 0
}

func (x *IpsecAttribute) GetMaxVlanTagsParsed() uint32 {
	if x != nil {
		return x.MaxVlanTagsParsed
	}
	return 0
}

func (x *IpsecAttribute) GetOctetCountHighWatermark() uint64 {
	if x != nil {
		return x.OctetCountHighWatermark
	}
	return 0
}

func (x *IpsecAttribute) GetOctetCountLowWatermark() uint64 {
	if x != nil {
		return x.OctetCountLowWatermark
	}
	return 0
}

func (x *IpsecAttribute) GetStatsMode() StatsMode {
	if x != nil {
		return x.StatsMode
	}
	return StatsMode_STATS_MODE_UNSPECIFIED
}

func (x *IpsecAttribute) GetAvailableIpsecSa() uint32 {
	if x != nil {
		return x.AvailableIpsecSa
	}
	return 0
}

func (x *IpsecAttribute) GetSaList() *Uint64List {
	if x != nil {
		return x.SaList
	}
	return nil
}

type IpsecPortAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId                  uint64              `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	CtagEnable              bool                `protobuf:"varint,2,opt,name=ctag_enable,json=ctagEnable,proto3" json:"ctag_enable,omitempty"`
	StagEnable              bool                `protobuf:"varint,3,opt,name=stag_enable,json=stagEnable,proto3" json:"stag_enable,omitempty"`
	NativeVlanId            uint32              `protobuf:"varint,4,opt,name=native_vlan_id,json=nativeVlanId,proto3" json:"native_vlan_id,omitempty"`
	VrfFromPacketVlanEnable bool                `protobuf:"varint,5,opt,name=vrf_from_packet_vlan_enable,json=vrfFromPacketVlanEnable,proto3" json:"vrf_from_packet_vlan_enable,omitempty"`
	SwitchSwitchingMode     SwitchSwitchingMode `protobuf:"varint,6,opt,name=switch_switching_mode,json=switchSwitchingMode,proto3,enum=lemming.dataplane.sai.SwitchSwitchingMode" json:"switch_switching_mode,omitempty"`
}

func (x *IpsecPortAttribute) Reset() {
	*x = IpsecPortAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecPortAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecPortAttribute) ProtoMessage() {}

func (x *IpsecPortAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecPortAttribute.ProtoReflect.Descriptor instead.
func (*IpsecPortAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{73}
}

func (x *IpsecPortAttribute) GetPortId() uint64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *IpsecPortAttribute) GetCtagEnable() bool {
	if x != nil {
		return x.CtagEnable
	}
	return false
}

func (x *IpsecPortAttribute) GetStagEnable() bool {
	if x != nil {
		return x.StagEnable
	}
	return false
}

func (x *IpsecPortAttribute) GetNativeVlanId() uint32 {
	if x != nil {
		return x.NativeVlanId
	}
	return 0
}

func (x *IpsecPortAttribute) GetVrfFromPacketVlanEnable() bool {
	if x != nil {
		return x.VrfFromPacketVlanEnable
	}
	return false
}

func (x *IpsecPortAttribute) GetSwitchSwitchingMode() SwitchSwitchingMode {
	if x != nil {
		return x.SwitchSwitchingMode
	}
	return SwitchSwitchingMode_SWITCH_SWITCHING_MODE_UNSPECIFIED
}

type IpsecSaAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpsecDirection              IpsecDirection          `protobuf:"varint,1,opt,name=ipsec_direction,json=ipsecDirection,proto3,enum=lemming.dataplane.sai.IpsecDirection" json:"ipsec_direction,omitempty"`
	IpsecId                     uint64                  `protobuf:"varint,2,opt,name=ipsec_id,json=ipsecId,proto3" json:"ipsec_id,omitempty"`
	OctetCountStatus            IpsecSaOctetCountStatus `protobuf:"varint,3,opt,name=octet_count_status,json=octetCountStatus,proto3,enum=lemming.dataplane.sai.IpsecSaOctetCountStatus" json:"octet_count_status,omitempty"`
	ExternalSaIndex             uint32                  `protobuf:"varint,4,opt,name=external_sa_index,json=externalSaIndex,proto3" json:"external_sa_index,omitempty"`
	SaIndex                     uint32                  `protobuf:"varint,5,opt,name=sa_index,json=saIndex,proto3" json:"sa_index,omitempty"`
	IpsecPortList               *Uint64List             `protobuf:"bytes,6,opt,name=ipsec_port_list,json=ipsecPortList,proto3" json:"ipsec_port_list,omitempty"`
	IpsecSpi                    uint32                  `protobuf:"varint,7,opt,name=ipsec_spi,json=ipsecSpi,proto3" json:"ipsec_spi,omitempty"`
	IpsecEsnEnable              bool                    `protobuf:"varint,8,opt,name=ipsec_esn_enable,json=ipsecEsnEnable,proto3" json:"ipsec_esn_enable,omitempty"`
	IpsecCipher                 IpsecCipher             `protobuf:"varint,9,opt,name=ipsec_cipher,json=ipsecCipher,proto3,enum=lemming.dataplane.sai.IpsecCipher" json:"ipsec_cipher,omitempty"`
	EncryptKey                  []byte                  `protobuf:"bytes,10,opt,name=encrypt_key,json=encryptKey,proto3" json:"encrypt_key,omitempty"`
	Salt                        uint32                  `protobuf:"varint,11,opt,name=salt,proto3" json:"salt,omitempty"`
	AuthKey                     []byte                  `protobuf:"bytes,12,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	IpsecReplayProtectionEnable bool                    `protobuf:"varint,13,opt,name=ipsec_replay_protection_enable,json=ipsecReplayProtectionEnable,proto3" json:"ipsec_replay_protection_enable,omitempty"`
	IpsecReplayProtectionWindow uint32                  `protobuf:"varint,14,opt,name=ipsec_replay_protection_window,json=ipsecReplayProtectionWindow,proto3" json:"ipsec_replay_protection_window,omitempty"`
	TermDstIp                   []byte                  `protobuf:"bytes,15,opt,name=term_dst_ip,json=termDstIp,proto3" json:"term_dst_ip,omitempty"`
	TermVlanIdEnable            bool                    `protobuf:"varint,16,opt,name=term_vlan_id_enable,json=termVlanIdEnable,proto3" json:"term_vlan_id_enable,omitempty"`
	TermVlanId                  uint32                  `protobuf:"varint,17,opt,name=term_vlan_id,json=termVlanId,proto3" json:"term_vlan_id,omitempty"`
	TermSrcIpEnable             bool                    `protobuf:"varint,18,opt,name=term_src_ip_enable,json=termSrcIpEnable,proto3" json:"term_src_ip_enable,omitempty"`
	TermSrcIp                   []byte                  `protobuf:"bytes,19,opt,name=term_src_ip,json=termSrcIp,proto3" json:"term_src_ip,omitempty"`
	EgressEsn                   uint64                  `protobuf:"varint,20,opt,name=egress_esn,json=egressEsn,proto3" json:"egress_esn,omitempty"`
	MinimumIngressEsn           uint64                  `protobuf:"varint,21,opt,name=minimum_ingress_esn,json=minimumIngressEsn,proto3" json:"minimum_ingress_esn,omitempty"`
}

func (x *IpsecSaAttribute) Reset() {
	*x = IpsecSaAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecSaAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecSaAttribute) ProtoMessage() {}

func (x *IpsecSaAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecSaAttribute.ProtoReflect.Descriptor instead.
func (*IpsecSaAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{74}
}

func (x *IpsecSaAttribute) GetIpsecDirection() IpsecDirection {
	if x != nil {
		return x.IpsecDirection
	}
	return IpsecDirection_IPSEC_DIRECTION_UNSPECIFIED
}

func (x *IpsecSaAttribute) GetIpsecId() uint64 {
	if x != nil {
		return x.IpsecId
	}
	return 0
}

func (x *IpsecSaAttribute) GetOctetCountStatus() IpsecSaOctetCountStatus {
	if x != nil {
		return x.OctetCountStatus
	}
	return IpsecSaOctetCountStatus_IPSEC_SA_OCTET_COUNT_STATUS_UNSPECIFIED
}

func (x *IpsecSaAttribute) GetExternalSaIndex() uint32 {
	if x != nil {
		return x.ExternalSaIndex
	}
	return 0
}

func (x *IpsecSaAttribute) GetSaIndex() uint32 {
	if x != nil {
		return x.SaIndex
	}
	return 0
}

func (x *IpsecSaAttribute) GetIpsecPortList() *Uint64List {
	if x != nil {
		return x.IpsecPortList
	}
	return nil
}

func (x *IpsecSaAttribute) GetIpsecSpi() uint32 {
	if x != nil {
		return x.IpsecSpi
	}
	return 0
}

func (x *IpsecSaAttribute) GetIpsecEsnEnable() bool {
	if x != nil {
		return x.IpsecEsnEnable
	}
	return false
}

func (x *IpsecSaAttribute) GetIpsecCipher() IpsecCipher {
	if x != nil {
		return x.IpsecCipher
	}
	return IpsecCipher_IPSEC_CIPHER_UNSPECIFIED
}

func (x *IpsecSaAttribute) GetEncryptKey() []byte {
	if x != nil {
		return x.EncryptKey
	}
	return nil
}

func (x *IpsecSaAttribute) GetSalt() uint32 {
	if x != nil {
		return x.Salt
	}
	return 0
}

func (x *IpsecSaAttribute) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *IpsecSaAttribute) GetIpsecReplayProtectionEnable() bool {
	if x != nil {
		return x.IpsecReplayProtectionEnable
	}
	return false
}

func (x *IpsecSaAttribute) GetIpsecReplayProtectionWindow() uint32 {
	if x != nil {
		return x.IpsecReplayProtectionWindow
	}
	return 0
}

func (x *IpsecSaAttribute) GetTermDstIp() []byte {
	if x != nil {
		return x.TermDstIp
	}
	return nil
}

func (x *IpsecSaAttribute) GetTermVlanIdEnable() bool {
	if x != nil {
		return x.TermVlanIdEnable
	}
	return false
}

func (x *IpsecSaAttribute) GetTermVlanId() uint32 {
	if x != nil {
		return x.TermVlanId
	}
	return 0
}

func (x *IpsecSaAttribute) GetTermSrcIpEnable() bool {
	if x != nil {
		return x.TermSrcIpEnable
	}
	return false
}

func (x *IpsecSaAttribute) GetTermSrcIp() []byte {
	if x != nil {
		return x.TermSrcIp
	}
	return nil
}

func (x *IpsecSaAttribute) GetEgressEsn() uint64 {
	if x != nil {
		return x.EgressEsn
	}
	return 0
}

func (x *IpsecSaAttribute) GetMinimumIngressEsn() uint64 {
	if x != nil {
		return x.MinimumIngressEsn
	}
	return 0
}

type IsolationGroupAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                IsolationGroupType `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.IsolationGroupType" json:"type,omitempty"`
	IsolationMemberList *Uint64List        `protobuf:"bytes,2,opt,name=isolation_member_list,json=isolationMemberList,proto3" json:"isolation_member_list,omitempty"`
}

func (x *IsolationGroupAttribute) Reset() {
	*x = IsolationGroupAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsolationGroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsolationGroupAttribute) ProtoMessage() {}

func (x *IsolationGroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsolationGroupAttribute.ProtoReflect.Descriptor instead.
func (*IsolationGroupAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{75}
}

func (x *IsolationGroupAttribute) GetType() IsolationGroupType {
	if x != nil {
		return x.Type
	}
	return IsolationGroupType_ISOLATION_GROUP_TYPE_UNSPECIFIED
}

func (x *IsolationGroupAttribute) GetIsolationMemberList() *Uint64List {
	if x != nil {
		return x.IsolationMemberList
	}
	return nil
}

type IsolationGroupMemberAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsolationGroupId uint64 `protobuf:"varint,1,opt,name=isolation_group_id,json=isolationGroupId,proto3" json:"isolation_group_id,omitempty"`
	IsolationObject  uint64 `protobuf:"varint,2,opt,name=isolation_object,json=isolationObject,proto3" json:"isolation_object,omitempty"`
}

func (x *IsolationGroupMemberAttribute) Reset() {
	*x = IsolationGroupMemberAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsolationGroupMemberAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsolationGroupMemberAttribute) ProtoMessage() {}

func (x *IsolationGroupMemberAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsolationGroupMemberAttribute.ProtoReflect.Descriptor instead.
func (*IsolationGroupMemberAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{76}
}

func (x *IsolationGroupMemberAttribute) GetIsolationGroupId() uint64 {
	if x != nil {
		return x.IsolationGroupId
	}
	return 0
}

func (x *IsolationGroupMemberAttribute) GetIsolationObject() uint64 {
	if x != nil {
		return x.IsolationObject
	}
	return 0
}

type L2McEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketAction  PacketAction `protobuf:"varint,1,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"packet_action,omitempty"`
	OutputGroupId uint64       `protobuf:"varint,2,opt,name=output_group_id,json=outputGroupId,proto3" json:"output_group_id,omitempty"`
}

func (x *L2McEntryAttribute) Reset() {
	*x = L2McEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2McEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2McEntryAttribute) ProtoMessage() {}

func (x *L2McEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2McEntryAttribute.ProtoReflect.Descriptor instead.
func (*L2McEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{77}
}

func (x *L2McEntryAttribute) GetPacketAction() PacketAction {
	if x != nil {
		return x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *L2McEntryAttribute) GetOutputGroupId() uint64 {
	if x != nil {
		return x.OutputGroupId
	}
	return 0
}

type L2McGroupAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2McOutputCount uint32      `protobuf:"varint,1,opt,name=l2mc_output_count,json=l2mcOutputCount,proto3" json:"l2mc_output_count,omitempty"`
	L2McMemberList  *Uint64List `protobuf:"bytes,2,opt,name=l2mc_member_list,json=l2mcMemberList,proto3" json:"l2mc_member_list,omitempty"`
}

func (x *L2McGroupAttribute) Reset() {
	*x = L2McGroupAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2McGroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2McGroupAttribute) ProtoMessage() {}

func (x *L2McGroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2McGroupAttribute.ProtoReflect.Descriptor instead.
func (*L2McGroupAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{78}
}

func (x *L2McGroupAttribute) GetL2McOutputCount() uint32 {
	if x != nil {
		return x.L2McOutputCount
	}
	return 0
}

func (x *L2McGroupAttribute) GetL2McMemberList() *Uint64List {
	if x != nil {
		return x.L2McMemberList
	}
	return nil
}

type L2McGroupMemberAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2McGroupId    uint64 `protobuf:"varint,1,opt,name=l2mc_group_id,json=l2mcGroupId,proto3" json:"l2mc_group_id,omitempty"`
	L2McOutputId   uint64 `protobuf:"varint,2,opt,name=l2mc_output_id,json=l2mcOutputId,proto3" json:"l2mc_output_id,omitempty"`
	L2McEndpointIp []byte `protobuf:"bytes,3,opt,name=l2mc_endpoint_ip,json=l2mcEndpointIp,proto3" json:"l2mc_endpoint_ip,omitempty"`
}

func (x *L2McGroupMemberAttribute) Reset() {
	*x = L2McGroupMemberAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2McGroupMemberAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2McGroupMemberAttribute) ProtoMessage() {}

func (x *L2McGroupMemberAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2McGroupMemberAttribute.ProtoReflect.Descriptor instead.
func (*L2McGroupMemberAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{79}
}

func (x *L2McGroupMemberAttribute) GetL2McGroupId() uint64 {
	if x != nil {
		return x.L2McGroupId
	}
	return 0
}

func (x *L2McGroupMemberAttribute) GetL2McOutputId() uint64 {
	if x != nil {
		return x.L2McOutputId
	}
	return 0
}

func (x *L2McGroupMemberAttribute) GetL2McEndpointIp() []byte {
	if x != nil {
		return x.L2McEndpointIp
	}
	return nil
}

type LagAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortList              *Uint64List `protobuf:"bytes,1,opt,name=port_list,json=portList,proto3" json:"port_list,omitempty"`
	IngressAcl            uint64      `protobuf:"varint,2,opt,name=ingress_acl,json=ingressAcl,proto3" json:"ingress_acl,omitempty"`
	EgressAcl             uint64      `protobuf:"varint,3,opt,name=egress_acl,json=egressAcl,proto3" json:"egress_acl,omitempty"`
	PortVlanId            uint32      `protobuf:"varint,4,opt,name=port_vlan_id,json=portVlanId,proto3" json:"port_vlan_id,omitempty"`
	DefaultVlanPriority   uint32      `protobuf:"varint,5,opt,name=default_vlan_priority,json=defaultVlanPriority,proto3" json:"default_vlan_priority,omitempty"`
	DropUntagged          bool        `protobuf:"varint,6,opt,name=drop_untagged,json=dropUntagged,proto3" json:"drop_untagged,omitempty"`
	DropTagged            bool        `protobuf:"varint,7,opt,name=drop_tagged,json=dropTagged,proto3" json:"drop_tagged,omitempty"`
	Tpid                  uint32      `protobuf:"varint,8,opt,name=tpid,proto3" json:"tpid,omitempty"`
	SystemPortAggregateId uint32      `protobuf:"varint,9,opt,name=system_port_aggregate_id,json=systemPortAggregateId,proto3" json:"system_port_aggregate_id,omitempty"`
	Label                 []byte      `protobuf:"bytes,10,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LagAttribute) Reset() {
	*x = LagAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagAttribute) ProtoMessage() {}

func (x *LagAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagAttribute.ProtoReflect.Descriptor instead.
func (*LagAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{80}
}

func (x *LagAttribute) GetPortList() *Uint64List {
	if x != nil {
		return x.PortList
	}
	return nil
}

func (x *LagAttribute) GetIngressAcl() uint64 {
	if x != nil {
		return x.IngressAcl
	}
	return 0
}

func (x *LagAttribute) GetEgressAcl() uint64 {
	if x != nil {
		return x.EgressAcl
	}
	return 0
}

func (x *LagAttribute) GetPortVlanId() uint32 {
	if x != nil {
		return x.PortVlanId
	}
	return 0
}

func (x *LagAttribute) GetDefaultVlanPriority() uint32 {
	if x != nil {
		return x.DefaultVlanPriority
	}
	return 0
}

func (x *LagAttribute) GetDropUntagged() bool {
	if x != nil {
		return x.DropUntagged
	}
	return false
}

func (x *LagAttribute) GetDropTagged() bool {
	if x != nil {
		return x.DropTagged
	}
	return false
}

func (x *LagAttribute) GetTpid() uint32 {
	if x != nil {
		return x.Tpid
	}
	return 0
}

func (x *LagAttribute) GetSystemPortAggregateId() uint32 {
	if x != nil {
		return x.SystemPortAggregateId
	}
	return 0
}

func (x *LagAttribute) GetLabel() []byte {
	if x != nil {
		return x.Label
	}
	return nil
}

type LagMemberAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LagId          uint64 `protobuf:"varint,1,opt,name=lag_id,json=lagId,proto3" json:"lag_id,omitempty"`
	PortId         uint64 `protobuf:"varint,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	EgressDisable  bool   `protobuf:"varint,3,opt,name=egress_disable,json=egressDisable,proto3" json:"egress_disable,omitempty"`
	IngressDisable bool   `protobuf:"varint,4,opt,name=ingress_disable,json=ingressDisable,proto3" json:"ingress_disable,omitempty"`
}

func (x *LagMemberAttribute) Reset() {
	*x = LagMemberAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LagMemberAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LagMemberAttribute) ProtoMessage() {}

func (x *LagMemberAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LagMemberAttribute.ProtoReflect.Descriptor instead.
func (*LagMemberAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{81}
}

func (x *LagMemberAttribute) GetLagId() uint64 {
	if x != nil {
		return x.LagId
	}
	return 0
}

func (x *LagMemberAttribute) GetPortId() uint64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *LagMemberAttribute) GetEgressDisable() bool {
	if x != nil {
		return x.EgressDisable
	}
	return false
}

func (x *LagMemberAttribute) GetIngressDisable() bool {
	if x != nil {
		return x.IngressDisable
	}
	return false
}

type MacsecCipherSuiteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []MacsecCipherSuite `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.MacsecCipherSuite" json:"list,omitempty"`
}

func (x *MacsecCipherSuiteList) Reset() {
	*x = MacsecCipherSuiteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecCipherSuiteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecCipherSuiteList) ProtoMessage() {}

func (x *MacsecCipherSuiteList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecCipherSuiteList.ProtoReflect.Descriptor instead.
func (*MacsecCipherSuiteList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{82}
}

func (x *MacsecCipherSuiteList) GetList() []MacsecCipherSuite {
	if x != nil {
		return x.List
	}
	return nil
}

type Uint32List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []uint32 `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
}

func (x *Uint32List) Reset() {
	*x = Uint32List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32List) ProtoMessage() {}

func (x *Uint32List) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32List.ProtoReflect.Descriptor instead.
func (*Uint32List) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{83}
}

func (x *Uint32List) GetList() []uint32 {
	if x != nil {
		return x.List
	}
	return nil
}

type MacsecAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction                             MacsecDirection        `protobuf:"varint,1,opt,name=direction,proto3,enum=lemming.dataplane.sai.MacsecDirection" json:"direction,omitempty"`
	SwitchingModeCutThroughSupported      bool                   `protobuf:"varint,2,opt,name=switching_mode_cut_through_supported,json=switchingModeCutThroughSupported,proto3" json:"switching_mode_cut_through_supported,omitempty"`
	SwitchingModeStoreAndForwardSupported bool                   `protobuf:"varint,3,opt,name=switching_mode_store_and_forward_supported,json=switchingModeStoreAndForwardSupported,proto3" json:"switching_mode_store_and_forward_supported,omitempty"`
	StatsModeReadSupported                bool                   `protobuf:"varint,4,opt,name=stats_mode_read_supported,json=statsModeReadSupported,proto3" json:"stats_mode_read_supported,omitempty"`
	StatsModeReadClearSupported           bool                   `protobuf:"varint,5,opt,name=stats_mode_read_clear_supported,json=statsModeReadClearSupported,proto3" json:"stats_mode_read_clear_supported,omitempty"`
	SciInIngressMacsecAcl                 bool                   `protobuf:"varint,6,opt,name=sci_in_ingress_macsec_acl,json=sciInIngressMacsecAcl,proto3" json:"sci_in_ingress_macsec_acl,omitempty"`
	SupportedCipherSuiteList              *MacsecCipherSuiteList `protobuf:"bytes,7,opt,name=supported_cipher_suite_list,json=supportedCipherSuiteList,proto3" json:"supported_cipher_suite_list,omitempty"`
	Pn_32BitSupported                     bool                   `protobuf:"varint,8,opt,name=pn_32bit_supported,json=pn32bitSupported,proto3" json:"pn_32bit_supported,omitempty"`
	Xpn_64BitSupported                    bool                   `protobuf:"varint,9,opt,name=xpn_64bit_supported,json=xpn64bitSupported,proto3" json:"xpn_64bit_supported,omitempty"`
	GcmAes128Supported                    bool                   `protobuf:"varint,10,opt,name=gcm_aes128_supported,json=gcmAes128Supported,proto3" json:"gcm_aes128_supported,omitempty"`
	GcmAes256Supported                    bool                   `protobuf:"varint,11,opt,name=gcm_aes256_supported,json=gcmAes256Supported,proto3" json:"gcm_aes256_supported,omitempty"`
	SectagOffsetsSupported                *Uint32List            `protobuf:"bytes,12,opt,name=sectag_offsets_supported,json=sectagOffsetsSupported,proto3" json:"sectag_offsets_supported,omitempty"`
	SystemSideMtu                         uint32                 `protobuf:"varint,13,opt,name=system_side_mtu,json=systemSideMtu,proto3" json:"system_side_mtu,omitempty"`
	WarmBootSupported                     bool                   `protobuf:"varint,14,opt,name=warm_boot_supported,json=warmBootSupported,proto3" json:"warm_boot_supported,omitempty"`
	WarmBootEnable                        bool                   `protobuf:"varint,15,opt,name=warm_boot_enable,json=warmBootEnable,proto3" json:"warm_boot_enable,omitempty"`
	CtagTpid                              uint32                 `protobuf:"varint,16,opt,name=ctag_tpid,json=ctagTpid,proto3" json:"ctag_tpid,omitempty"`
	StagTpid                              uint32                 `protobuf:"varint,17,opt,name=stag_tpid,json=stagTpid,proto3" json:"stag_tpid,omitempty"`
	MaxVlanTagsParsed                     uint32                 `protobuf:"varint,18,opt,name=max_vlan_tags_parsed,json=maxVlanTagsParsed,proto3" json:"max_vlan_tags_parsed,omitempty"`
	StatsMode                             StatsMode              `protobuf:"varint,19,opt,name=stats_mode,json=statsMode,proto3,enum=lemming.dataplane.sai.StatsMode" json:"stats_mode,omitempty"`
	PhysicalBypassEnable                  bool                   `protobuf:"varint,20,opt,name=physical_bypass_enable,json=physicalBypassEnable,proto3" json:"physical_bypass_enable,omitempty"`
	SupportedPortList                     *Uint64List            `protobuf:"bytes,21,opt,name=supported_port_list,json=supportedPortList,proto3" json:"supported_port_list,omitempty"`
	AvailableMacsecFlow                   uint32                 `protobuf:"varint,22,opt,name=available_macsec_flow,json=availableMacsecFlow,proto3" json:"available_macsec_flow,omitempty"`
	FlowList                              *Uint64List            `protobuf:"bytes,23,opt,name=flow_list,json=flowList,proto3" json:"flow_list,omitempty"`
	AvailableMacsecSc                     uint32                 `protobuf:"varint,24,opt,name=available_macsec_sc,json=availableMacsecSc,proto3" json:"available_macsec_sc,omitempty"`
	AvailableMacsecSa                     uint32                 `protobuf:"varint,25,opt,name=available_macsec_sa,json=availableMacsecSa,proto3" json:"available_macsec_sa,omitempty"`
}

func (x *MacsecAttribute) Reset() {
	*x = MacsecAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecAttribute) ProtoMessage() {}

func (x *MacsecAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecAttribute.ProtoReflect.Descriptor instead.
func (*MacsecAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{84}
}

func (x *MacsecAttribute) GetDirection() MacsecDirection {
	if x != nil {
		return x.Direction
	}
	return MacsecDirection_MACSEC_DIRECTION_UNSPECIFIED
}

func (x *MacsecAttribute) GetSwitchingModeCutThroughSupported() bool {
	if x != nil {
		return x.SwitchingModeCutThroughSupported
	}
	return false
}

func (x *MacsecAttribute) GetSwitchingModeStoreAndForwardSupported() bool {
	if x != nil {
		return x.SwitchingModeStoreAndForwardSupported
	}
	return false
}

func (x *MacsecAttribute) GetStatsModeReadSupported() bool {
	if x != nil {
		return x.StatsModeReadSupported
	}
	return false
}

func (x *MacsecAttribute) GetStatsModeReadClearSupported() bool {
	if x != nil {
		return x.StatsModeReadClearSupported
	}
	return false
}

func (x *MacsecAttribute) GetSciInIngressMacsecAcl() bool {
	if x != nil {
		return x.SciInIngressMacsecAcl
	}
	return false
}

func (x *MacsecAttribute) GetSupportedCipherSuiteList() *MacsecCipherSuiteList {
	if x != nil {
		return x.SupportedCipherSuiteList
	}
	return nil
}

func (x *MacsecAttribute) GetPn_32BitSupported() bool {
	if x != nil {
		return x.Pn_32BitSupported
	}
	return false
}

func (x *MacsecAttribute) GetXpn_64BitSupported() bool {
	if x != nil {
		return x.Xpn_64BitSupported
	}
	return false
}

func (x *MacsecAttribute) GetGcmAes128Supported() bool {
	if x != nil {
		return x.GcmAes128Supported
	}
	return false
}

func (x *MacsecAttribute) GetGcmAes256Supported() bool {
	if x != nil {
		return x.GcmAes256Supported
	}
	return false
}

func (x *MacsecAttribute) GetSectagOffsetsSupported() *Uint32List {
	if x != nil {
		return x.SectagOffsetsSupported
	}
	return nil
}

func (x *MacsecAttribute) GetSystemSideMtu() uint32 {
	if x != nil {
		return x.SystemSideMtu
	}
	return 0
}

func (x *MacsecAttribute) GetWarmBootSupported() bool {
	if x != nil {
		return x.WarmBootSupported
	}
	return false
}

func (x *MacsecAttribute) GetWarmBootEnable() bool {
	if x != nil {
		return x.WarmBootEnable
	}
	return false
}

func (x *MacsecAttribute) GetCtagTpid() uint32 {
	if x != nil {
		return x.CtagTpid
	}
	return 0
}

func (x *MacsecAttribute) GetStagTpid() uint32 {
	if x != nil {
		return x.StagTpid
	}
	return 0
}

func (x *MacsecAttribute) GetMaxVlanTagsParsed() uint32 {
	if x != nil {
		return x.MaxVlanTagsParsed
	}
	return 0
}

func (x *MacsecAttribute) GetStatsMode() StatsMode {
	if x != nil {
		return x.StatsMode
	}
	return StatsMode_STATS_MODE_UNSPECIFIED
}

func (x *MacsecAttribute) GetPhysicalBypassEnable() bool {
	if x != nil {
		return x.PhysicalBypassEnable
	}
	return false
}

func (x *MacsecAttribute) GetSupportedPortList() *Uint64List {
	if x != nil {
		return x.SupportedPortList
	}
	return nil
}

func (x *MacsecAttribute) GetAvailableMacsecFlow() uint32 {
	if x != nil {
		return x.AvailableMacsecFlow
	}
	return 0
}

func (x *MacsecAttribute) GetFlowList() *Uint64List {
	if x != nil {
		return x.FlowList
	}
	return nil
}

func (x *MacsecAttribute) GetAvailableMacsecSc() uint32 {
	if x != nil {
		return x.AvailableMacsecSc
	}
	return 0
}

func (x *MacsecAttribute) GetAvailableMacsecSa() uint32 {
	if x != nil {
		return x.AvailableMacsecSa
	}
	return 0
}

type MacsecFlowAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacsecDirection MacsecDirection `protobuf:"varint,1,opt,name=macsec_direction,json=macsecDirection,proto3,enum=lemming.dataplane.sai.MacsecDirection" json:"macsec_direction,omitempty"`
	AclEntryList    *Uint64List     `protobuf:"bytes,2,opt,name=acl_entry_list,json=aclEntryList,proto3" json:"acl_entry_list,omitempty"`
	ScList          *Uint64List     `protobuf:"bytes,3,opt,name=sc_list,json=scList,proto3" json:"sc_list,omitempty"`
}

func (x *MacsecFlowAttribute) Reset() {
	*x = MacsecFlowAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecFlowAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecFlowAttribute) ProtoMessage() {}

func (x *MacsecFlowAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecFlowAttribute.ProtoReflect.Descriptor instead.
func (*MacsecFlowAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{85}
}

func (x *MacsecFlowAttribute) GetMacsecDirection() MacsecDirection {
	if x != nil {
		return x.MacsecDirection
	}
	return MacsecDirection_MACSEC_DIRECTION_UNSPECIFIED
}

func (x *MacsecFlowAttribute) GetAclEntryList() *Uint64List {
	if x != nil {
		return x.AclEntryList
	}
	return nil
}

func (x *MacsecFlowAttribute) GetScList() *Uint64List {
	if x != nil {
		return x.ScList
	}
	return nil
}

type MacsecPortAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacsecDirection     MacsecDirection     `protobuf:"varint,1,opt,name=macsec_direction,json=macsecDirection,proto3,enum=lemming.dataplane.sai.MacsecDirection" json:"macsec_direction,omitempty"`
	PortId              uint64              `protobuf:"varint,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	CtagEnable          bool                `protobuf:"varint,3,opt,name=ctag_enable,json=ctagEnable,proto3" json:"ctag_enable,omitempty"`
	StagEnable          bool                `protobuf:"varint,4,opt,name=stag_enable,json=stagEnable,proto3" json:"stag_enable,omitempty"`
	SwitchSwitchingMode SwitchSwitchingMode `protobuf:"varint,5,opt,name=switch_switching_mode,json=switchSwitchingMode,proto3,enum=lemming.dataplane.sai.SwitchSwitchingMode" json:"switch_switching_mode,omitempty"`
}

func (x *MacsecPortAttribute) Reset() {
	*x = MacsecPortAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecPortAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecPortAttribute) ProtoMessage() {}

func (x *MacsecPortAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecPortAttribute.ProtoReflect.Descriptor instead.
func (*MacsecPortAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{86}
}

func (x *MacsecPortAttribute) GetMacsecDirection() MacsecDirection {
	if x != nil {
		return x.MacsecDirection
	}
	return MacsecDirection_MACSEC_DIRECTION_UNSPECIFIED
}

func (x *MacsecPortAttribute) GetPortId() uint64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *MacsecPortAttribute) GetCtagEnable() bool {
	if x != nil {
		return x.CtagEnable
	}
	return false
}

func (x *MacsecPortAttribute) GetStagEnable() bool {
	if x != nil {
		return x.StagEnable
	}
	return false
}

func (x *MacsecPortAttribute) GetSwitchSwitchingMode() SwitchSwitchingMode {
	if x != nil {
		return x.SwitchSwitchingMode
	}
	return SwitchSwitchingMode_SWITCH_SWITCHING_MODE_UNSPECIFIED
}

type MacsecSaAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacsecDirection     MacsecDirection `protobuf:"varint,1,opt,name=macsec_direction,json=macsecDirection,proto3,enum=lemming.dataplane.sai.MacsecDirection" json:"macsec_direction,omitempty"`
	ScId                uint64          `protobuf:"varint,2,opt,name=sc_id,json=scId,proto3" json:"sc_id,omitempty"`
	An                  uint32          `protobuf:"varint,3,opt,name=an,proto3" json:"an,omitempty"`
	Sak                 []byte          `protobuf:"bytes,4,opt,name=sak,proto3" json:"sak,omitempty"`
	Salt                []byte          `protobuf:"bytes,5,opt,name=salt,proto3" json:"salt,omitempty"`
	AuthKey             []byte          `protobuf:"bytes,6,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	ConfiguredEgressXpn uint64          `protobuf:"varint,7,opt,name=configured_egress_xpn,json=configuredEgressXpn,proto3" json:"configured_egress_xpn,omitempty"`
	CurrentXpn          uint64          `protobuf:"varint,8,opt,name=current_xpn,json=currentXpn,proto3" json:"current_xpn,omitempty"`
	MinimumIngressXpn   uint64          `protobuf:"varint,9,opt,name=minimum_ingress_xpn,json=minimumIngressXpn,proto3" json:"minimum_ingress_xpn,omitempty"`
	MacsecSsci          uint32          `protobuf:"varint,10,opt,name=macsec_ssci,json=macsecSsci,proto3" json:"macsec_ssci,omitempty"`
}

func (x *MacsecSaAttribute) Reset() {
	*x = MacsecSaAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecSaAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecSaAttribute) ProtoMessage() {}

func (x *MacsecSaAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecSaAttribute.ProtoReflect.Descriptor instead.
func (*MacsecSaAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{87}
}

func (x *MacsecSaAttribute) GetMacsecDirection() MacsecDirection {
	if x != nil {
		return x.MacsecDirection
	}
	return MacsecDirection_MACSEC_DIRECTION_UNSPECIFIED
}

func (x *MacsecSaAttribute) GetScId() uint64 {
	if x != nil {
		return x.ScId
	}
	return 0
}

func (x *MacsecSaAttribute) GetAn() uint32 {
	if x != nil {
		return x.An
	}
	return 0
}

func (x *MacsecSaAttribute) GetSak() []byte {
	if x != nil {
		return x.Sak
	}
	return nil
}

func (x *MacsecSaAttribute) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *MacsecSaAttribute) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *MacsecSaAttribute) GetConfiguredEgressXpn() uint64 {
	if x != nil {
		return x.ConfiguredEgressXpn
	}
	return 0
}

func (x *MacsecSaAttribute) GetCurrentXpn() uint64 {
	if x != nil {
		return x.CurrentXpn
	}
	return 0
}

func (x *MacsecSaAttribute) GetMinimumIngressXpn() uint64 {
	if x != nil {
		return x.MinimumIngressXpn
	}
	return 0
}

func (x *MacsecSaAttribute) GetMacsecSsci() uint32 {
	if x != nil {
		return x.MacsecSsci
	}
	return 0
}

type MacsecScAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacsecDirection              MacsecDirection   `protobuf:"varint,1,opt,name=macsec_direction,json=macsecDirection,proto3,enum=lemming.dataplane.sai.MacsecDirection" json:"macsec_direction,omitempty"`
	FlowId                       uint64            `protobuf:"varint,2,opt,name=flow_id,json=flowId,proto3" json:"flow_id,omitempty"`
	MacsecSci                    uint64            `protobuf:"varint,3,opt,name=macsec_sci,json=macsecSci,proto3" json:"macsec_sci,omitempty"`
	MacsecExplicitSciEnable      bool              `protobuf:"varint,4,opt,name=macsec_explicit_sci_enable,json=macsecExplicitSciEnable,proto3" json:"macsec_explicit_sci_enable,omitempty"`
	MacsecSectagOffset           uint32            `protobuf:"varint,5,opt,name=macsec_sectag_offset,json=macsecSectagOffset,proto3" json:"macsec_sectag_offset,omitempty"`
	ActiveEgressSaId             uint64            `protobuf:"varint,6,opt,name=active_egress_sa_id,json=activeEgressSaId,proto3" json:"active_egress_sa_id,omitempty"`
	MacsecReplayProtectionEnable bool              `protobuf:"varint,7,opt,name=macsec_replay_protection_enable,json=macsecReplayProtectionEnable,proto3" json:"macsec_replay_protection_enable,omitempty"`
	MacsecReplayProtectionWindow uint32            `protobuf:"varint,8,opt,name=macsec_replay_protection_window,json=macsecReplayProtectionWindow,proto3" json:"macsec_replay_protection_window,omitempty"`
	SaList                       *Uint64List       `protobuf:"bytes,9,opt,name=sa_list,json=saList,proto3" json:"sa_list,omitempty"`
	MacsecCipherSuite            MacsecCipherSuite `protobuf:"varint,10,opt,name=macsec_cipher_suite,json=macsecCipherSuite,proto3,enum=lemming.dataplane.sai.MacsecCipherSuite" json:"macsec_cipher_suite,omitempty"`
	EncryptionEnable             bool              `protobuf:"varint,11,opt,name=encryption_enable,json=encryptionEnable,proto3" json:"encryption_enable,omitempty"`
}

func (x *MacsecScAttribute) Reset() {
	*x = MacsecScAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecScAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecScAttribute) ProtoMessage() {}

func (x *MacsecScAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecScAttribute.ProtoReflect.Descriptor instead.
func (*MacsecScAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{88}
}

func (x *MacsecScAttribute) GetMacsecDirection() MacsecDirection {
	if x != nil {
		return x.MacsecDirection
	}
	return MacsecDirection_MACSEC_DIRECTION_UNSPECIFIED
}

func (x *MacsecScAttribute) GetFlowId() uint64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *MacsecScAttribute) GetMacsecSci() uint64 {
	if x != nil {
		return x.MacsecSci
	}
	return 0
}

func (x *MacsecScAttribute) GetMacsecExplicitSciEnable() bool {
	if x != nil {
		return x.MacsecExplicitSciEnable
	}
	return false
}

func (x *MacsecScAttribute) GetMacsecSectagOffset() uint32 {
	if x != nil {
		return x.MacsecSectagOffset
	}
	return 0
}

func (x *MacsecScAttribute) GetActiveEgressSaId() uint64 {
	if x != nil {
		return x.ActiveEgressSaId
	}
	return 0
}

func (x *MacsecScAttribute) GetMacsecReplayProtectionEnable() bool {
	if x != nil {
		return x.MacsecReplayProtectionEnable
	}
	return false
}

func (x *MacsecScAttribute) GetMacsecReplayProtectionWindow() uint32 {
	if x != nil {
		return x.MacsecReplayProtectionWindow
	}
	return 0
}

func (x *MacsecScAttribute) GetSaList() *Uint64List {
	if x != nil {
		return x.SaList
	}
	return nil
}

func (x *MacsecScAttribute) GetMacsecCipherSuite() MacsecCipherSuite {
	if x != nil {
		return x.MacsecCipherSuite
	}
	return MacsecCipherSuite_MACSEC_CIPHER_SUITE_UNSPECIFIED
}

func (x *MacsecScAttribute) GetEncryptionEnable() bool {
	if x != nil {
		return x.EncryptionEnable
	}
	return false
}

type McastFdbEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId      uint64       `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	PacketAction PacketAction `protobuf:"varint,2,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"packet_action,omitempty"`
	MetaData     uint32       `protobuf:"varint,3,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
}

func (x *McastFdbEntryAttribute) Reset() {
	*x = McastFdbEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *McastFdbEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McastFdbEntryAttribute) ProtoMessage() {}

func (x *McastFdbEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McastFdbEntryAttribute.ProtoReflect.Descriptor instead.
func (*McastFdbEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{89}
}

func (x *McastFdbEntryAttribute) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *McastFdbEntryAttribute) GetPacketAction() PacketAction {
	if x != nil {
		return x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *McastFdbEntryAttribute) GetMetaData() uint32 {
	if x != nil {
		return x.MetaData
	}
	return 0
}

type MirrorSessionAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                    MirrorSessionType           `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.MirrorSessionType" json:"type,omitempty"`
	MonitorPort             uint64                      `protobuf:"varint,2,opt,name=monitor_port,json=monitorPort,proto3" json:"monitor_port,omitempty"`
	TruncateSize            uint32                      `protobuf:"varint,3,opt,name=truncate_size,json=truncateSize,proto3" json:"truncate_size,omitempty"`
	SampleRate              uint32                      `protobuf:"varint,4,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	CongestionMode          MirrorSessionCongestionMode `protobuf:"varint,5,opt,name=congestion_mode,json=congestionMode,proto3,enum=lemming.dataplane.sai.MirrorSessionCongestionMode" json:"congestion_mode,omitempty"`
	Tc                      uint32                      `protobuf:"varint,6,opt,name=tc,proto3" json:"tc,omitempty"`
	VlanTpid                uint32                      `protobuf:"varint,7,opt,name=vlan_tpid,json=vlanTpid,proto3" json:"vlan_tpid,omitempty"`
	VlanId                  uint32                      `protobuf:"varint,8,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	VlanPri                 uint32                      `protobuf:"varint,9,opt,name=vlan_pri,json=vlanPri,proto3" json:"vlan_pri,omitempty"`
	VlanCfi                 uint32                      `protobuf:"varint,10,opt,name=vlan_cfi,json=vlanCfi,proto3" json:"vlan_cfi,omitempty"`
	VlanHeaderValid         bool                        `protobuf:"varint,11,opt,name=vlan_header_valid,json=vlanHeaderValid,proto3" json:"vlan_header_valid,omitempty"`
	ErspanEncapsulationType ErspanEncapsulationType     `protobuf:"varint,12,opt,name=erspan_encapsulation_type,json=erspanEncapsulationType,proto3,enum=lemming.dataplane.sai.ErspanEncapsulationType" json:"erspan_encapsulation_type,omitempty"`
	IphdrVersion            uint32                      `protobuf:"varint,13,opt,name=iphdr_version,json=iphdrVersion,proto3" json:"iphdr_version,omitempty"`
	Tos                     uint32                      `protobuf:"varint,14,opt,name=tos,proto3" json:"tos,omitempty"`
	Ttl                     uint32                      `protobuf:"varint,15,opt,name=ttl,proto3" json:"ttl,omitempty"`
	SrcIpAddress            []byte                      `protobuf:"bytes,16,opt,name=src_ip_address,json=srcIpAddress,proto3" json:"src_ip_address,omitempty"`
	DstIpAddress            []byte                      `protobuf:"bytes,17,opt,name=dst_ip_address,json=dstIpAddress,proto3" json:"dst_ip_address,omitempty"`
	SrcMacAddress           []byte                      `protobuf:"bytes,18,opt,name=src_mac_address,json=srcMacAddress,proto3" json:"src_mac_address,omitempty"`
	DstMacAddress           []byte                      `protobuf:"bytes,19,opt,name=dst_mac_address,json=dstMacAddress,proto3" json:"dst_mac_address,omitempty"`
	GreProtocolType         uint32                      `protobuf:"varint,20,opt,name=gre_protocol_type,json=greProtocolType,proto3" json:"gre_protocol_type,omitempty"`
	MonitorPortlistValid    bool                        `protobuf:"varint,21,opt,name=monitor_portlist_valid,json=monitorPortlistValid,proto3" json:"monitor_portlist_valid,omitempty"`
	MonitorPortlist         *Uint64List                 `protobuf:"bytes,22,opt,name=monitor_portlist,json=monitorPortlist,proto3" json:"monitor_portlist,omitempty"`
	Policer                 uint64                      `protobuf:"varint,23,opt,name=policer,proto3" json:"policer,omitempty"`
	UdpSrcPort              uint32                      `protobuf:"varint,24,opt,name=udp_src_port,json=udpSrcPort,proto3" json:"udp_src_port,omitempty"`
	UdpDstPort              uint32                      `protobuf:"varint,25,opt,name=udp_dst_port,json=udpDstPort,proto3" json:"udp_dst_port,omitempty"`
}

func (x *MirrorSessionAttribute) Reset() {
	*x = MirrorSessionAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirrorSessionAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorSessionAttribute) ProtoMessage() {}

func (x *MirrorSessionAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorSessionAttribute.ProtoReflect.Descriptor instead.
func (*MirrorSessionAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{90}
}

func (x *MirrorSessionAttribute) GetType() MirrorSessionType {
	if x != nil {
		return x.Type
	}
	return MirrorSessionType_MIRROR_SESSION_TYPE_UNSPECIFIED
}

func (x *MirrorSessionAttribute) GetMonitorPort() uint64 {
	if x != nil {
		return x.MonitorPort
	}
	return 0
}

func (x *MirrorSessionAttribute) GetTruncateSize() uint32 {
	if x != nil {
		return x.TruncateSize
	}
	return 0
}

func (x *MirrorSessionAttribute) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *MirrorSessionAttribute) GetCongestionMode() MirrorSessionCongestionMode {
	if x != nil {
		return x.CongestionMode
	}
	return MirrorSessionCongestionMode_MIRROR_SESSION_CONGESTION_MODE_UNSPECIFIED
}

func (x *MirrorSessionAttribute) GetTc() uint32 {
	if x != nil {
		return x.Tc
	}
	return 0
}

func (x *MirrorSessionAttribute) GetVlanTpid() uint32 {
	if x != nil {
		return x.VlanTpid
	}
	return 0
}

func (x *MirrorSessionAttribute) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *MirrorSessionAttribute) GetVlanPri() uint32 {
	if x != nil {
		return x.VlanPri
	}
	return 0
}

func (x *MirrorSessionAttribute) GetVlanCfi() uint32 {
	if x != nil {
		return x.VlanCfi
	}
	return 0
}

func (x *MirrorSessionAttribute) GetVlanHeaderValid() bool {
	if x != nil {
		return x.VlanHeaderValid
	}
	return false
}

func (x *MirrorSessionAttribute) GetErspanEncapsulationType() ErspanEncapsulationType {
	if x != nil {
		return x.ErspanEncapsulationType
	}
	return ErspanEncapsulationType_ERSPAN_ENCAPSULATION_TYPE_UNSPECIFIED
}

func (x *MirrorSessionAttribute) GetIphdrVersion() uint32 {
	if x != nil {
		return x.IphdrVersion
	}
	return 0
}

func (x *MirrorSessionAttribute) GetTos() uint32 {
	if x != nil {
		return x.Tos
	}
	return 0
}

func (x *MirrorSessionAttribute) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *MirrorSessionAttribute) GetSrcIpAddress() []byte {
	if x != nil {
		return x.SrcIpAddress
	}
	return nil
}

func (x *MirrorSessionAttribute) GetDstIpAddress() []byte {
	if x != nil {
		return x.DstIpAddress
	}
	return nil
}

func (x *MirrorSessionAttribute) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *MirrorSessionAttribute) GetDstMacAddress() []byte {
	if x != nil {
		return x.DstMacAddress
	}
	return nil
}

func (x *MirrorSessionAttribute) GetGreProtocolType() uint32 {
	if x != nil {
		return x.GreProtocolType
	}
	return 0
}

func (x *MirrorSessionAttribute) GetMonitorPortlistValid() bool {
	if x != nil {
		return x.MonitorPortlistValid
	}
	return false
}

func (x *MirrorSessionAttribute) GetMonitorPortlist() *Uint64List {
	if x != nil {
		return x.MonitorPortlist
	}
	return nil
}

func (x *MirrorSessionAttribute) GetPolicer() uint64 {
	if x != nil {
		return x.Policer
	}
	return 0
}

func (x *MirrorSessionAttribute) GetUdpSrcPort() uint32 {
	if x != nil {
		return x.UdpSrcPort
	}
	return 0
}

func (x *MirrorSessionAttribute) GetUdpDstPort() uint32 {
	if x != nil {
		return x.UdpDstPort
	}
	return 0
}

type MyMacAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority       uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	PortId         uint64 `protobuf:"varint,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	VlanId         uint32 `protobuf:"varint,3,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	MacAddress     []byte `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	MacAddressMask []byte `protobuf:"bytes,5,opt,name=mac_address_mask,json=macAddressMask,proto3" json:"mac_address_mask,omitempty"`
}

func (x *MyMacAttribute) Reset() {
	*x = MyMacAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyMacAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyMacAttribute) ProtoMessage() {}

func (x *MyMacAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyMacAttribute.ProtoReflect.Descriptor instead.
func (*MyMacAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{91}
}

func (x *MyMacAttribute) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *MyMacAttribute) GetPortId() uint64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *MyMacAttribute) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *MyMacAttribute) GetMacAddress() []byte {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *MyMacAttribute) GetMacAddressMask() []byte {
	if x != nil {
		return x.MacAddressMask
	}
	return nil
}

type MySidEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointBehavior       MySidEntryEndpointBehavior       `protobuf:"varint,1,opt,name=endpoint_behavior,json=endpointBehavior,proto3,enum=lemming.dataplane.sai.MySidEntryEndpointBehavior" json:"endpoint_behavior,omitempty"`
	EndpointBehaviorFlavor MySidEntryEndpointBehaviorFlavor `protobuf:"varint,2,opt,name=endpoint_behavior_flavor,json=endpointBehaviorFlavor,proto3,enum=lemming.dataplane.sai.MySidEntryEndpointBehaviorFlavor" json:"endpoint_behavior_flavor,omitempty"`
	PacketAction           PacketAction                     `protobuf:"varint,3,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"packet_action,omitempty"`
	TrapPriority           uint32                           `protobuf:"varint,4,opt,name=trap_priority,json=trapPriority,proto3" json:"trap_priority,omitempty"`
	NextHopId              uint64                           `protobuf:"varint,5,opt,name=next_hop_id,json=nextHopId,proto3" json:"next_hop_id,omitempty"`
	TunnelId               uint64                           `protobuf:"varint,6,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	Vrf                    uint64                           `protobuf:"varint,7,opt,name=vrf,proto3" json:"vrf,omitempty"`
	CounterId              uint64                           `protobuf:"varint,8,opt,name=counter_id,json=counterId,proto3" json:"counter_id,omitempty"`
}

func (x *MySidEntryAttribute) Reset() {
	*x = MySidEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySidEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySidEntryAttribute) ProtoMessage() {}

func (x *MySidEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySidEntryAttribute.ProtoReflect.Descriptor instead.
func (*MySidEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{92}
}

func (x *MySidEntryAttribute) GetEndpointBehavior() MySidEntryEndpointBehavior {
	if x != nil {
		return x.EndpointBehavior
	}
	return MySidEntryEndpointBehavior_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UNSPECIFIED
}

func (x *MySidEntryAttribute) GetEndpointBehaviorFlavor() MySidEntryEndpointBehaviorFlavor {
	if x != nil {
		return x.EndpointBehaviorFlavor
	}
	return MySidEntryEndpointBehaviorFlavor_MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_UNSPECIFIED
}

func (x *MySidEntryAttribute) GetPacketAction() PacketAction {
	if x != nil {
		return x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *MySidEntryAttribute) GetTrapPriority() uint32 {
	if x != nil {
		return x.TrapPriority
	}
	return 0
}

func (x *MySidEntryAttribute) GetNextHopId() uint64 {
	if x != nil {
		return x.NextHopId
	}
	return 0
}

func (x *MySidEntryAttribute) GetTunnelId() uint64 {
	if x != nil {
		return x.TunnelId
	}
	return 0
}

func (x *MySidEntryAttribute) GetVrf() uint64 {
	if x != nil {
		return x.Vrf
	}
	return 0
}

func (x *MySidEntryAttribute) GetCounterId() uint64 {
	if x != nil {
		return x.CounterId
	}
	return 0
}

type NatEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatType           NatType `protobuf:"varint,1,opt,name=nat_type,json=natType,proto3,enum=lemming.dataplane.sai.NatType" json:"nat_type,omitempty"`
	SrcIp             []byte  `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	SrcIpMask         []byte  `protobuf:"bytes,3,opt,name=src_ip_mask,json=srcIpMask,proto3" json:"src_ip_mask,omitempty"`
	VrId              uint64  `protobuf:"varint,4,opt,name=vr_id,json=vrId,proto3" json:"vr_id,omitempty"`
	DstIp             []byte  `protobuf:"bytes,5,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstIpMask         []byte  `protobuf:"bytes,6,opt,name=dst_ip_mask,json=dstIpMask,proto3" json:"dst_ip_mask,omitempty"`
	L4SrcPort         uint32  `protobuf:"varint,7,opt,name=l4_src_port,json=l4SrcPort,proto3" json:"l4_src_port,omitempty"`
	L4DstPort         uint32  `protobuf:"varint,8,opt,name=l4_dst_port,json=l4DstPort,proto3" json:"l4_dst_port,omitempty"`
	EnablePacketCount bool    `protobuf:"varint,9,opt,name=enable_packet_count,json=enablePacketCount,proto3" json:"enable_packet_count,omitempty"`
	PacketCount       uint64  `protobuf:"varint,10,opt,name=packet_count,json=packetCount,proto3" json:"packet_count,omitempty"`
	EnableByteCount   bool    `protobuf:"varint,11,opt,name=enable_byte_count,json=enableByteCount,proto3" json:"enable_byte_count,omitempty"`
	ByteCount         uint64  `protobuf:"varint,12,opt,name=byte_count,json=byteCount,proto3" json:"byte_count,omitempty"`
	HitBitCor         bool    `protobuf:"varint,13,opt,name=hit_bit_cor,json=hitBitCor,proto3" json:"hit_bit_cor,omitempty"`
	HitBit            bool    `protobuf:"varint,14,opt,name=hit_bit,json=hitBit,proto3" json:"hit_bit,omitempty"`
}

func (x *NatEntryAttribute) Reset() {
	*x = NatEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NatEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NatEntryAttribute) ProtoMessage() {}

func (x *NatEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NatEntryAttribute.ProtoReflect.Descriptor instead.
func (*NatEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{93}
}

func (x *NatEntryAttribute) GetNatType() NatType {
	if x != nil {
		return x.NatType
	}
	return NatType_NAT_TYPE_UNSPECIFIED
}

func (x *NatEntryAttribute) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *NatEntryAttribute) GetSrcIpMask() []byte {
	if x != nil {
		return x.SrcIpMask
	}
	return nil
}

func (x *NatEntryAttribute) GetVrId() uint64 {
	if x != nil {
		return x.VrId
	}
	return 0
}

func (x *NatEntryAttribute) GetDstIp() []byte {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *NatEntryAttribute) GetDstIpMask() []byte {
	if x != nil {
		return x.DstIpMask
	}
	return nil
}

func (x *NatEntryAttribute) GetL4SrcPort() uint32 {
	if x != nil {
		return x.L4SrcPort
	}
	return 0
}

func (x *NatEntryAttribute) GetL4DstPort() uint32 {
	if x != nil {
		return x.L4DstPort
	}
	return 0
}

func (x *NatEntryAttribute) GetEnablePacketCount() bool {
	if x != nil {
		return x.EnablePacketCount
	}
	return false
}

func (x *NatEntryAttribute) GetPacketCount() uint64 {
	if x != nil {
		return x.PacketCount
	}
	return 0
}

func (x *NatEntryAttribute) GetEnableByteCount() bool {
	if x != nil {
		return x.EnableByteCount
	}
	return false
}

func (x *NatEntryAttribute) GetByteCount() uint64 {
	if x != nil {
		return x.ByteCount
	}
	return 0
}

func (x *NatEntryAttribute) GetHitBitCor() bool {
	if x != nil {
		return x.HitBitCor
	}
	return false
}

func (x *NatEntryAttribute) GetHitBit() bool {
	if x != nil {
		return x.HitBit
	}
	return false
}

type NatZoneCounterAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NatType                      NatType `protobuf:"varint,1,opt,name=nat_type,json=natType,proto3,enum=lemming.dataplane.sai.NatType" json:"nat_type,omitempty"`
	ZoneId                       uint32  `protobuf:"varint,2,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	EnableDiscard                bool    `protobuf:"varint,3,opt,name=enable_discard,json=enableDiscard,proto3" json:"enable_discard,omitempty"`
	DiscardPacketCount           uint64  `protobuf:"varint,4,opt,name=discard_packet_count,json=discardPacketCount,proto3" json:"discard_packet_count,omitempty"`
	EnableTranslationNeeded      bool    `protobuf:"varint,5,opt,name=enable_translation_needed,json=enableTranslationNeeded,proto3" json:"enable_translation_needed,omitempty"`
	TranslationNeededPacketCount uint64  `protobuf:"varint,6,opt,name=translation_needed_packet_count,json=translationNeededPacketCount,proto3" json:"translation_needed_packet_count,omitempty"`
	EnableTranslations           bool    `protobuf:"varint,7,opt,name=enable_translations,json=enableTranslations,proto3" json:"enable_translations,omitempty"`
	TranslationsPacketCount      uint64  `protobuf:"varint,8,opt,name=translations_packet_count,json=translationsPacketCount,proto3" json:"translations_packet_count,omitempty"`
}

func (x *NatZoneCounterAttribute) Reset() {
	*x = NatZoneCounterAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NatZoneCounterAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NatZoneCounterAttribute) ProtoMessage() {}

func (x *NatZoneCounterAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NatZoneCounterAttribute.ProtoReflect.Descriptor instead.
func (*NatZoneCounterAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{94}
}

func (x *NatZoneCounterAttribute) GetNatType() NatType {
	if x != nil {
		return x.NatType
	}
	return NatType_NAT_TYPE_UNSPECIFIED
}

func (x *NatZoneCounterAttribute) GetZoneId() uint32 {
	if x != nil {
		return x.ZoneId
	}
	return 0
}

func (x *NatZoneCounterAttribute) GetEnableDiscard() bool {
	if x != nil {
		return x.EnableDiscard
	}
	return false
}

func (x *NatZoneCounterAttribute) GetDiscardPacketCount() uint64 {
	if x != nil {
		return x.DiscardPacketCount
	}
	return 0
}

func (x *NatZoneCounterAttribute) GetEnableTranslationNeeded() bool {
	if x != nil {
		return x.EnableTranslationNeeded
	}
	return false
}

func (x *NatZoneCounterAttribute) GetTranslationNeededPacketCount() uint64 {
	if x != nil {
		return x.TranslationNeededPacketCount
	}
	return 0
}

func (x *NatZoneCounterAttribute) GetEnableTranslations() bool {
	if x != nil {
		return x.EnableTranslations
	}
	return false
}

func (x *NatZoneCounterAttribute) GetTranslationsPacketCount() uint64 {
	if x != nil {
		return x.TranslationsPacketCount
	}
	return 0
}

type NeighborEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DstMacAddress    []byte       `protobuf:"bytes,1,opt,name=dst_mac_address,json=dstMacAddress,proto3" json:"dst_mac_address,omitempty"`
	PacketAction     PacketAction `protobuf:"varint,2,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"packet_action,omitempty"`
	UserTrapId       uint64       `protobuf:"varint,3,opt,name=user_trap_id,json=userTrapId,proto3" json:"user_trap_id,omitempty"`
	NoHostRoute      bool         `protobuf:"varint,4,opt,name=no_host_route,json=noHostRoute,proto3" json:"no_host_route,omitempty"`
	MetaData         uint32       `protobuf:"varint,5,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	CounterId        uint64       `protobuf:"varint,6,opt,name=counter_id,json=counterId,proto3" json:"counter_id,omitempty"`
	EncapIndex       uint32       `protobuf:"varint,7,opt,name=encap_index,json=encapIndex,proto3" json:"encap_index,omitempty"`
	EncapImposeIndex bool         `protobuf:"varint,8,opt,name=encap_impose_index,json=encapImposeIndex,proto3" json:"encap_impose_index,omitempty"`
	IsLocal          bool         `protobuf:"varint,9,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	IpAddrFamily     IpAddrFamily `protobuf:"varint,10,opt,name=ip_addr_family,json=ipAddrFamily,proto3,enum=lemming.dataplane.sai.IpAddrFamily" json:"ip_addr_family,omitempty"`
}

func (x *NeighborEntryAttribute) Reset() {
	*x = NeighborEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeighborEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeighborEntryAttribute) ProtoMessage() {}

func (x *NeighborEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeighborEntryAttribute.ProtoReflect.Descriptor instead.
func (*NeighborEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{95}
}

func (x *NeighborEntryAttribute) GetDstMacAddress() []byte {
	if x != nil {
		return x.DstMacAddress
	}
	return nil
}

func (x *NeighborEntryAttribute) GetPacketAction() PacketAction {
	if x != nil {
		return x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *NeighborEntryAttribute) GetUserTrapId() uint64 {
	if x != nil {
		return x.UserTrapId
	}
	return 0
}

func (x *NeighborEntryAttribute) GetNoHostRoute() bool {
	if x != nil {
		return x.NoHostRoute
	}
	return false
}

func (x *NeighborEntryAttribute) GetMetaData() uint32 {
	if x != nil {
		return x.MetaData
	}
	return 0
}

func (x *NeighborEntryAttribute) GetCounterId() uint64 {
	if x != nil {
		return x.CounterId
	}
	return 0
}

func (x *NeighborEntryAttribute) GetEncapIndex() uint32 {
	if x != nil {
		return x.EncapIndex
	}
	return 0
}

func (x *NeighborEntryAttribute) GetEncapImposeIndex() bool {
	if x != nil {
		return x.EncapImposeIndex
	}
	return false
}

func (x *NeighborEntryAttribute) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *NeighborEntryAttribute) GetIpAddrFamily() IpAddrFamily {
	if x != nil {
		return x.IpAddrFamily
	}
	return IpAddrFamily_IP_ADDR_FAMILY_UNSPECIFIED
}

type NextHopAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                      NextHopType   `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.NextHopType" json:"type,omitempty"`
	Ip                        []byte        `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	RouterInterfaceId         uint64        `protobuf:"varint,3,opt,name=router_interface_id,json=routerInterfaceId,proto3" json:"router_interface_id,omitempty"`
	TunnelId                  uint64        `protobuf:"varint,4,opt,name=tunnel_id,json=tunnelId,proto3" json:"tunnel_id,omitempty"`
	TunnelVni                 uint32        `protobuf:"varint,5,opt,name=tunnel_vni,json=tunnelVni,proto3" json:"tunnel_vni,omitempty"`
	TunnelMac                 []byte        `protobuf:"bytes,6,opt,name=tunnel_mac,json=tunnelMac,proto3" json:"tunnel_mac,omitempty"`
	Srv6SidlistId             uint64        `protobuf:"varint,7,opt,name=srv6_sidlist_id,json=srv6SidlistId,proto3" json:"srv6_sidlist_id,omitempty"`
	Labelstack                *Uint32List   `protobuf:"bytes,8,opt,name=labelstack,proto3" json:"labelstack,omitempty"`
	CounterId                 uint64        `protobuf:"varint,9,opt,name=counter_id,json=counterId,proto3" json:"counter_id,omitempty"`
	DisableDecrementTtl       bool          `protobuf:"varint,10,opt,name=disable_decrement_ttl,json=disableDecrementTtl,proto3" json:"disable_decrement_ttl,omitempty"`
	OutsegType                OutsegType    `protobuf:"varint,11,opt,name=outseg_type,json=outsegType,proto3,enum=lemming.dataplane.sai.OutsegType" json:"outseg_type,omitempty"`
	OutsegTtlMode             OutsegTtlMode `protobuf:"varint,12,opt,name=outseg_ttl_mode,json=outsegTtlMode,proto3,enum=lemming.dataplane.sai.OutsegTtlMode" json:"outseg_ttl_mode,omitempty"`
	OutsegTtlValue            uint32        `protobuf:"varint,13,opt,name=outseg_ttl_value,json=outsegTtlValue,proto3" json:"outseg_ttl_value,omitempty"`
	OutsegExpMode             OutsegExpMode `protobuf:"varint,14,opt,name=outseg_exp_mode,json=outsegExpMode,proto3,enum=lemming.dataplane.sai.OutsegExpMode" json:"outseg_exp_mode,omitempty"`
	OutsegExpValue            uint32        `protobuf:"varint,15,opt,name=outseg_exp_value,json=outsegExpValue,proto3" json:"outseg_exp_value,omitempty"`
	QosTcAndColorToMplsExpMap uint64        `protobuf:"varint,16,opt,name=qos_tc_and_color_to_mpls_exp_map,json=qosTcAndColorToMplsExpMap,proto3" json:"qos_tc_and_color_to_mpls_exp_map,omitempty"`
}

func (x *NextHopAttribute) Reset() {
	*x = NextHopAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopAttribute) ProtoMessage() {}

func (x *NextHopAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopAttribute.ProtoReflect.Descriptor instead.
func (*NextHopAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{96}
}

func (x *NextHopAttribute) GetType() NextHopType {
	if x != nil {
		return x.Type
	}
	return NextHopType_NEXT_HOP_TYPE_UNSPECIFIED
}

func (x *NextHopAttribute) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *NextHopAttribute) GetRouterInterfaceId() uint64 {
	if x != nil {
		return x.RouterInterfaceId
	}
	return 0
}

func (x *NextHopAttribute) GetTunnelId() uint64 {
	if x != nil {
		return x.TunnelId
	}
	return 0
}

func (x *NextHopAttribute) GetTunnelVni() uint32 {
	if x != nil {
		return x.TunnelVni
	}
	return 0
}

func (x *NextHopAttribute) GetTunnelMac() []byte {
	if x != nil {
		return x.TunnelMac
	}
	return nil
}

func (x *NextHopAttribute) GetSrv6SidlistId() uint64 {
	if x != nil {
		return x.Srv6SidlistId
	}
	return 0
}

func (x *NextHopAttribute) GetLabelstack() *Uint32List {
	if x != nil {
		return x.Labelstack
	}
	return nil
}

func (x *NextHopAttribute) GetCounterId() uint64 {
	if x != nil {
		return x.CounterId
	}
	return 0
}

func (x *NextHopAttribute) GetDisableDecrementTtl() bool {
	if x != nil {
		return x.DisableDecrementTtl
	}
	return false
}

func (x *NextHopAttribute) GetOutsegType() OutsegType {
	if x != nil {
		return x.OutsegType
	}
	return OutsegType_OUTSEG_TYPE_UNSPECIFIED
}

func (x *NextHopAttribute) GetOutsegTtlMode() OutsegTtlMode {
	if x != nil {
		return x.OutsegTtlMode
	}
	return OutsegTtlMode_OUTSEG_TTL_MODE_UNSPECIFIED
}

func (x *NextHopAttribute) GetOutsegTtlValue() uint32 {
	if x != nil {
		return x.OutsegTtlValue
	}
	return 0
}

func (x *NextHopAttribute) GetOutsegExpMode() OutsegExpMode {
	if x != nil {
		return x.OutsegExpMode
	}
	return OutsegExpMode_OUTSEG_EXP_MODE_UNSPECIFIED
}

func (x *NextHopAttribute) GetOutsegExpValue() uint32 {
	if x != nil {
		return x.OutsegExpValue
	}
	return 0
}

func (x *NextHopAttribute) GetQosTcAndColorToMplsExpMap() uint64 {
	if x != nil {
		return x.QosTcAndColorToMplsExpMap
	}
	return 0
}

type NextHopGroupAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextHopCount      uint32           `protobuf:"varint,1,opt,name=next_hop_count,json=nextHopCount,proto3" json:"next_hop_count,omitempty"`
	NextHopMemberList *Uint64List      `protobuf:"bytes,2,opt,name=next_hop_member_list,json=nextHopMemberList,proto3" json:"next_hop_member_list,omitempty"`
	Type              NextHopGroupType `protobuf:"varint,3,opt,name=type,proto3,enum=lemming.dataplane.sai.NextHopGroupType" json:"type,omitempty"`
	SetSwitchover     bool             `protobuf:"varint,4,opt,name=set_switchover,json=setSwitchover,proto3" json:"set_switchover,omitempty"`
	CounterId         uint64           `protobuf:"varint,5,opt,name=counter_id,json=counterId,proto3" json:"counter_id,omitempty"`
	ConfiguredSize    uint32           `protobuf:"varint,6,opt,name=configured_size,json=configuredSize,proto3" json:"configured_size,omitempty"`
	RealSize          uint32           `protobuf:"varint,7,opt,name=real_size,json=realSize,proto3" json:"real_size,omitempty"`
	SelectionMap      uint64           `protobuf:"varint,8,opt,name=selection_map,json=selectionMap,proto3" json:"selection_map,omitempty"`
}

func (x *NextHopGroupAttribute) Reset() {
	*x = NextHopGroupAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroupAttribute) ProtoMessage() {}

func (x *NextHopGroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroupAttribute.ProtoReflect.Descriptor instead.
func (*NextHopGroupAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{97}
}

func (x *NextHopGroupAttribute) GetNextHopCount() uint32 {
	if x != nil {
		return x.NextHopCount
	}
	return 0
}

func (x *NextHopGroupAttribute) GetNextHopMemberList() *Uint64List {
	if x != nil {
		return x.NextHopMemberList
	}
	return nil
}

func (x *NextHopGroupAttribute) GetType() NextHopGroupType {
	if x != nil {
		return x.Type
	}
	return NextHopGroupType_NEXT_HOP_GROUP_TYPE_UNSPECIFIED
}

func (x *NextHopGroupAttribute) GetSetSwitchover() bool {
	if x != nil {
		return x.SetSwitchover
	}
	return false
}

func (x *NextHopGroupAttribute) GetCounterId() uint64 {
	if x != nil {
		return x.CounterId
	}
	return 0
}

func (x *NextHopGroupAttribute) GetConfiguredSize() uint32 {
	if x != nil {
		return x.ConfiguredSize
	}
	return 0
}

func (x *NextHopGroupAttribute) GetRealSize() uint32 {
	if x != nil {
		return x.RealSize
	}
	return 0
}

func (x *NextHopGroupAttribute) GetSelectionMap() uint64 {
	if x != nil {
		return x.SelectionMap
	}
	return 0
}

type UintMapList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*UintMap `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *UintMapList) Reset() {
	*x = UintMapList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UintMapList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UintMapList) ProtoMessage() {}

func (x *UintMapList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UintMapList.ProtoReflect.Descriptor instead.
func (*UintMapList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{98}
}

func (x *UintMapList) GetList() []*UintMap {
	if x != nil {
		return x.List
	}
	return nil
}

type NextHopGroupMapAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           NextHopGroupMapType `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.NextHopGroupMapType" json:"type,omitempty"`
	MapToValueList *UintMapList        `protobuf:"bytes,2,opt,name=map_to_value_list,json=mapToValueList,proto3" json:"map_to_value_list,omitempty"`
}

func (x *NextHopGroupMapAttribute) Reset() {
	*x = NextHopGroupMapAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroupMapAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroupMapAttribute) ProtoMessage() {}

func (x *NextHopGroupMapAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroupMapAttribute.ProtoReflect.Descriptor instead.
func (*NextHopGroupMapAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{99}
}

func (x *NextHopGroupMapAttribute) GetType() NextHopGroupMapType {
	if x != nil {
		return x.Type
	}
	return NextHopGroupMapType_NEXT_HOP_GROUP_MAP_TYPE_UNSPECIFIED
}

func (x *NextHopGroupMapAttribute) GetMapToValueList() *UintMapList {
	if x != nil {
		return x.MapToValueList
	}
	return nil
}

type NextHopGroupMemberAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextHopGroupId  uint64                           `protobuf:"varint,1,opt,name=next_hop_group_id,json=nextHopGroupId,proto3" json:"next_hop_group_id,omitempty"`
	NextHopId       uint64                           `protobuf:"varint,2,opt,name=next_hop_id,json=nextHopId,proto3" json:"next_hop_id,omitempty"`
	Weight          uint32                           `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	ConfiguredRole  NextHopGroupMemberConfiguredRole `protobuf:"varint,4,opt,name=configured_role,json=configuredRole,proto3,enum=lemming.dataplane.sai.NextHopGroupMemberConfiguredRole" json:"configured_role,omitempty"`
	ObservedRole    NextHopGroupMemberObservedRole   `protobuf:"varint,5,opt,name=observed_role,json=observedRole,proto3,enum=lemming.dataplane.sai.NextHopGroupMemberObservedRole" json:"observed_role,omitempty"`
	MonitoredObject uint64                           `protobuf:"varint,6,opt,name=monitored_object,json=monitoredObject,proto3" json:"monitored_object,omitempty"`
	Index           uint32                           `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
	SequenceId      uint32                           `protobuf:"varint,8,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	CounterId       uint64                           `protobuf:"varint,9,opt,name=counter_id,json=counterId,proto3" json:"counter_id,omitempty"`
}

func (x *NextHopGroupMemberAttribute) Reset() {
	*x = NextHopGroupMemberAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroupMemberAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroupMemberAttribute) ProtoMessage() {}

func (x *NextHopGroupMemberAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroupMemberAttribute.ProtoReflect.Descriptor instead.
func (*NextHopGroupMemberAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{100}
}

func (x *NextHopGroupMemberAttribute) GetNextHopGroupId() uint64 {
	if x != nil {
		return x.NextHopGroupId
	}
	return 0
}

func (x *NextHopGroupMemberAttribute) GetNextHopId() uint64 {
	if x != nil {
		return x.NextHopId
	}
	return 0
}

func (x *NextHopGroupMemberAttribute) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *NextHopGroupMemberAttribute) GetConfiguredRole() NextHopGroupMemberConfiguredRole {
	if x != nil {
		return x.ConfiguredRole
	}
	return NextHopGroupMemberConfiguredRole_NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_UNSPECIFIED
}

func (x *NextHopGroupMemberAttribute) GetObservedRole() NextHopGroupMemberObservedRole {
	if x != nil {
		return x.ObservedRole
	}
	return NextHopGroupMemberObservedRole_NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_UNSPECIFIED
}

func (x *NextHopGroupMemberAttribute) GetMonitoredObject() uint64 {
	if x != nil {
		return x.MonitoredObject
	}
	return 0
}

func (x *NextHopGroupMemberAttribute) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *NextHopGroupMemberAttribute) GetSequenceId() uint32 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *NextHopGroupMemberAttribute) GetCounterId() uint64 {
	if x != nil {
		return x.CounterId
	}
	return 0
}

type PacketActionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []PacketAction `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.PacketAction" json:"list,omitempty"`
}

func (x *PacketActionList) Reset() {
	*x = PacketActionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketActionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketActionList) ProtoMessage() {}

func (x *PacketActionList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketActionList.ProtoReflect.Descriptor instead.
func (*PacketActionList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{101}
}

func (x *PacketActionList) GetList() []PacketAction {
	if x != nil {
		return x.List
	}
	return nil
}

type PolicerAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeterType                     MeterType          `protobuf:"varint,1,opt,name=meter_type,json=meterType,proto3,enum=lemming.dataplane.sai.MeterType" json:"meter_type,omitempty"`
	Mode                          PolicerMode        `protobuf:"varint,2,opt,name=mode,proto3,enum=lemming.dataplane.sai.PolicerMode" json:"mode,omitempty"`
	ColorSource                   PolicerColorSource `protobuf:"varint,3,opt,name=color_source,json=colorSource,proto3,enum=lemming.dataplane.sai.PolicerColorSource" json:"color_source,omitempty"`
	Cbs                           uint64             `protobuf:"varint,4,opt,name=cbs,proto3" json:"cbs,omitempty"`
	Cir                           uint64             `protobuf:"varint,5,opt,name=cir,proto3" json:"cir,omitempty"`
	Pbs                           uint64             `protobuf:"varint,6,opt,name=pbs,proto3" json:"pbs,omitempty"`
	Pir                           uint64             `protobuf:"varint,7,opt,name=pir,proto3" json:"pir,omitempty"`
	GreenPacketAction             PacketAction       `protobuf:"varint,8,opt,name=green_packet_action,json=greenPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"green_packet_action,omitempty"`
	YellowPacketAction            PacketAction       `protobuf:"varint,9,opt,name=yellow_packet_action,json=yellowPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"yellow_packet_action,omitempty"`
	RedPacketAction               PacketAction       `protobuf:"varint,10,opt,name=red_packet_action,json=redPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"red_packet_action,omitempty"`
	EnableCounterPacketActionList *PacketActionList  `protobuf:"bytes,11,opt,name=enable_counter_packet_action_list,json=enableCounterPacketActionList,proto3" json:"enable_counter_packet_action_list,omitempty"`
}

func (x *PolicerAttribute) Reset() {
	*x = PolicerAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicerAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicerAttribute) ProtoMessage() {}

func (x *PolicerAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicerAttribute.ProtoReflect.Descriptor instead.
func (*PolicerAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{102}
}

func (x *PolicerAttribute) GetMeterType() MeterType {
	if x != nil {
		return x.MeterType
	}
	return MeterType_METER_TYPE_UNSPECIFIED
}

func (x *PolicerAttribute) GetMode() PolicerMode {
	if x != nil {
		return x.Mode
	}
	return PolicerMode_POLICER_MODE_UNSPECIFIED
}

func (x *PolicerAttribute) GetColorSource() PolicerColorSource {
	if x != nil {
		return x.ColorSource
	}
	return PolicerColorSource_POLICER_COLOR_SOURCE_UNSPECIFIED
}

func (x *PolicerAttribute) GetCbs() uint64 {
	if x != nil {
		return x.Cbs
	}
	return 0
}

func (x *PolicerAttribute) GetCir() uint64 {
	if x != nil {
		return x.Cir
	}
	return 0
}

func (x *PolicerAttribute) GetPbs() uint64 {
	if x != nil {
		return x.Pbs
	}
	return 0
}

func (x *PolicerAttribute) GetPir() uint64 {
	if x != nil {
		return x.Pir
	}
	return 0
}

func (x *PolicerAttribute) GetGreenPacketAction() PacketAction {
	if x != nil {
		return x.GreenPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *PolicerAttribute) GetYellowPacketAction() PacketAction {
	if x != nil {
		return x.YellowPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *PolicerAttribute) GetRedPacketAction() PacketAction {
	if x != nil {
		return x.RedPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *PolicerAttribute) GetEnableCounterPacketActionList() *PacketActionList {
	if x != nil {
		return x.EnableCounterPacketActionList
	}
	return nil
}

type PortBreakoutModeTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []PortBreakoutModeType `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.PortBreakoutModeType" json:"list,omitempty"`
}

func (x *PortBreakoutModeTypeList) Reset() {
	*x = PortBreakoutModeTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortBreakoutModeTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortBreakoutModeTypeList) ProtoMessage() {}

func (x *PortBreakoutModeTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortBreakoutModeTypeList.ProtoReflect.Descriptor instead.
func (*PortBreakoutModeTypeList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{103}
}

func (x *PortBreakoutModeTypeList) GetList() []PortBreakoutModeType {
	if x != nil {
		return x.List
	}
	return nil
}

type PortFecModeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []PortFecMode `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.PortFecMode" json:"list,omitempty"`
}

func (x *PortFecModeList) Reset() {
	*x = PortFecModeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortFecModeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortFecModeList) ProtoMessage() {}

func (x *PortFecModeList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortFecModeList.ProtoReflect.Descriptor instead.
func (*PortFecModeList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{104}
}

func (x *PortFecModeList) GetList() []PortFecMode {
	if x != nil {
		return x.List
	}
	return nil
}

type PortFecModeExtendedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []PortFecModeExtended `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.PortFecModeExtended" json:"list,omitempty"`
}

func (x *PortFecModeExtendedList) Reset() {
	*x = PortFecModeExtendedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortFecModeExtendedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortFecModeExtendedList) ProtoMessage() {}

func (x *PortFecModeExtendedList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortFecModeExtendedList.ProtoReflect.Descriptor instead.
func (*PortFecModeExtendedList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{105}
}

func (x *PortFecModeExtendedList) GetList() []PortFecModeExtended {
	if x != nil {
		return x.List
	}
	return nil
}

type PortEyeValuesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PortEyeValues `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PortEyeValuesList) Reset() {
	*x = PortEyeValuesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortEyeValuesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortEyeValuesList) ProtoMessage() {}

func (x *PortEyeValuesList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortEyeValuesList.ProtoReflect.Descriptor instead.
func (*PortEyeValuesList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{106}
}

func (x *PortEyeValuesList) GetList() []*PortEyeValues {
	if x != nil {
		return x.List
	}
	return nil
}

type PortInterfaceTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []PortInterfaceType `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.PortInterfaceType" json:"list,omitempty"`
}

func (x *PortInterfaceTypeList) Reset() {
	*x = PortInterfaceTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortInterfaceTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortInterfaceTypeList) ProtoMessage() {}

func (x *PortInterfaceTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortInterfaceTypeList.ProtoReflect.Descriptor instead.
func (*PortInterfaceTypeList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{107}
}

func (x *PortInterfaceTypeList) GetList() []PortInterfaceType {
	if x != nil {
		return x.List
	}
	return nil
}

type PortErrStatusList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []PortErrStatus `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.PortErrStatus" json:"list,omitempty"`
}

func (x *PortErrStatusList) Reset() {
	*x = PortErrStatusList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortErrStatusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortErrStatusList) ProtoMessage() {}

func (x *PortErrStatusList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortErrStatusList.ProtoReflect.Descriptor instead.
func (*PortErrStatusList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{108}
}

func (x *PortErrStatusList) GetList() []PortErrStatus {
	if x != nil {
		return x.List
	}
	return nil
}

type PortAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                                PortType                      `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.PortType" json:"type,omitempty"`
	OperStatus                          PortOperStatus                `protobuf:"varint,2,opt,name=oper_status,json=operStatus,proto3,enum=lemming.dataplane.sai.PortOperStatus" json:"oper_status,omitempty"`
	SupportedBreakoutModeType           *PortBreakoutModeTypeList     `protobuf:"bytes,3,opt,name=supported_breakout_mode_type,json=supportedBreakoutModeType,proto3" json:"supported_breakout_mode_type,omitempty"`
	CurrentBreakoutModeType             PortBreakoutModeType          `protobuf:"varint,4,opt,name=current_breakout_mode_type,json=currentBreakoutModeType,proto3,enum=lemming.dataplane.sai.PortBreakoutModeType" json:"current_breakout_mode_type,omitempty"`
	QosNumberOfQueues                   uint32                        `protobuf:"varint,5,opt,name=qos_number_of_queues,json=qosNumberOfQueues,proto3" json:"qos_number_of_queues,omitempty"`
	QosQueueList                        *Uint64List                   `protobuf:"bytes,6,opt,name=qos_queue_list,json=qosQueueList,proto3" json:"qos_queue_list,omitempty"`
	QosNumberOfSchedulerGroups          uint32                        `protobuf:"varint,7,opt,name=qos_number_of_scheduler_groups,json=qosNumberOfSchedulerGroups,proto3" json:"qos_number_of_scheduler_groups,omitempty"`
	QosSchedulerGroupList               *Uint64List                   `protobuf:"bytes,8,opt,name=qos_scheduler_group_list,json=qosSchedulerGroupList,proto3" json:"qos_scheduler_group_list,omitempty"`
	QosMaximumHeadroomSize              uint32                        `protobuf:"varint,9,opt,name=qos_maximum_headroom_size,json=qosMaximumHeadroomSize,proto3" json:"qos_maximum_headroom_size,omitempty"`
	SupportedSpeed                      *Uint32List                   `protobuf:"bytes,10,opt,name=supported_speed,json=supportedSpeed,proto3" json:"supported_speed,omitempty"`
	SupportedFecMode                    *PortFecModeList              `protobuf:"bytes,11,opt,name=supported_fec_mode,json=supportedFecMode,proto3" json:"supported_fec_mode,omitempty"`
	SupportedFecModeExtended            *PortFecModeExtendedList      `protobuf:"bytes,12,opt,name=supported_fec_mode_extended,json=supportedFecModeExtended,proto3" json:"supported_fec_mode_extended,omitempty"`
	SupportedHalfDuplexSpeed            *Uint32List                   `protobuf:"bytes,13,opt,name=supported_half_duplex_speed,json=supportedHalfDuplexSpeed,proto3" json:"supported_half_duplex_speed,omitempty"`
	SupportedAutoNegMode                bool                          `protobuf:"varint,14,opt,name=supported_auto_neg_mode,json=supportedAutoNegMode,proto3" json:"supported_auto_neg_mode,omitempty"`
	SupportedFlowControlMode            PortFlowControlMode           `protobuf:"varint,15,opt,name=supported_flow_control_mode,json=supportedFlowControlMode,proto3,enum=lemming.dataplane.sai.PortFlowControlMode" json:"supported_flow_control_mode,omitempty"`
	SupportedAsymmetricPauseMode        bool                          `protobuf:"varint,16,opt,name=supported_asymmetric_pause_mode,json=supportedAsymmetricPauseMode,proto3" json:"supported_asymmetric_pause_mode,omitempty"`
	SupportedMediaType                  PortMediaType                 `protobuf:"varint,17,opt,name=supported_media_type,json=supportedMediaType,proto3,enum=lemming.dataplane.sai.PortMediaType" json:"supported_media_type,omitempty"`
	RemoteAdvertisedSpeed               *Uint32List                   `protobuf:"bytes,18,opt,name=remote_advertised_speed,json=remoteAdvertisedSpeed,proto3" json:"remote_advertised_speed,omitempty"`
	RemoteAdvertisedFecMode             *PortFecModeList              `protobuf:"bytes,19,opt,name=remote_advertised_fec_mode,json=remoteAdvertisedFecMode,proto3" json:"remote_advertised_fec_mode,omitempty"`
	RemoteAdvertisedFecModeExtended     *PortFecModeExtendedList      `protobuf:"bytes,20,opt,name=remote_advertised_fec_mode_extended,json=remoteAdvertisedFecModeExtended,proto3" json:"remote_advertised_fec_mode_extended,omitempty"`
	RemoteAdvertisedHalfDuplexSpeed     *Uint32List                   `protobuf:"bytes,21,opt,name=remote_advertised_half_duplex_speed,json=remoteAdvertisedHalfDuplexSpeed,proto3" json:"remote_advertised_half_duplex_speed,omitempty"`
	RemoteAdvertisedAutoNegMode         bool                          `protobuf:"varint,22,opt,name=remote_advertised_auto_neg_mode,json=remoteAdvertisedAutoNegMode,proto3" json:"remote_advertised_auto_neg_mode,omitempty"`
	RemoteAdvertisedFlowControlMode     PortFlowControlMode           `protobuf:"varint,23,opt,name=remote_advertised_flow_control_mode,json=remoteAdvertisedFlowControlMode,proto3,enum=lemming.dataplane.sai.PortFlowControlMode" json:"remote_advertised_flow_control_mode,omitempty"`
	RemoteAdvertisedAsymmetricPauseMode bool                          `protobuf:"varint,24,opt,name=remote_advertised_asymmetric_pause_mode,json=remoteAdvertisedAsymmetricPauseMode,proto3" json:"remote_advertised_asymmetric_pause_mode,omitempty"`
	RemoteAdvertisedMediaType           PortMediaType                 `protobuf:"varint,25,opt,name=remote_advertised_media_type,json=remoteAdvertisedMediaType,proto3,enum=lemming.dataplane.sai.PortMediaType" json:"remote_advertised_media_type,omitempty"`
	RemoteAdvertisedOuiCode             uint32                        `protobuf:"varint,26,opt,name=remote_advertised_oui_code,json=remoteAdvertisedOuiCode,proto3" json:"remote_advertised_oui_code,omitempty"`
	NumberOfIngressPriorityGroups       uint32                        `protobuf:"varint,27,opt,name=number_of_ingress_priority_groups,json=numberOfIngressPriorityGroups,proto3" json:"number_of_ingress_priority_groups,omitempty"`
	IngressPriorityGroupList            *Uint64List                   `protobuf:"bytes,28,opt,name=ingress_priority_group_list,json=ingressPriorityGroupList,proto3" json:"ingress_priority_group_list,omitempty"`
	EyeValues                           *PortEyeValuesList            `protobuf:"bytes,29,opt,name=eye_values,json=eyeValues,proto3" json:"eye_values,omitempty"`
	OperSpeed                           uint32                        `protobuf:"varint,30,opt,name=oper_speed,json=operSpeed,proto3" json:"oper_speed,omitempty"`
	HwLaneList                          *Uint32List                   `protobuf:"bytes,31,opt,name=hw_lane_list,json=hwLaneList,proto3" json:"hw_lane_list,omitempty"`
	Speed                               uint32                        `protobuf:"varint,32,opt,name=speed,proto3" json:"speed,omitempty"`
	FullDuplexMode                      bool                          `protobuf:"varint,33,opt,name=full_duplex_mode,json=fullDuplexMode,proto3" json:"full_duplex_mode,omitempty"`
	AutoNegMode                         bool                          `protobuf:"varint,34,opt,name=auto_neg_mode,json=autoNegMode,proto3" json:"auto_neg_mode,omitempty"`
	AdminState                          bool                          `protobuf:"varint,35,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty"`
	MediaType                           PortMediaType                 `protobuf:"varint,36,opt,name=media_type,json=mediaType,proto3,enum=lemming.dataplane.sai.PortMediaType" json:"media_type,omitempty"`
	AdvertisedSpeed                     *Uint32List                   `protobuf:"bytes,37,opt,name=advertised_speed,json=advertisedSpeed,proto3" json:"advertised_speed,omitempty"`
	AdvertisedFecMode                   *PortFecModeList              `protobuf:"bytes,38,opt,name=advertised_fec_mode,json=advertisedFecMode,proto3" json:"advertised_fec_mode,omitempty"`
	AdvertisedFecModeExtended           *PortFecModeExtendedList      `protobuf:"bytes,39,opt,name=advertised_fec_mode_extended,json=advertisedFecModeExtended,proto3" json:"advertised_fec_mode_extended,omitempty"`
	AdvertisedHalfDuplexSpeed           *Uint32List                   `protobuf:"bytes,40,opt,name=advertised_half_duplex_speed,json=advertisedHalfDuplexSpeed,proto3" json:"advertised_half_duplex_speed,omitempty"`
	AdvertisedAutoNegMode               bool                          `protobuf:"varint,41,opt,name=advertised_auto_neg_mode,json=advertisedAutoNegMode,proto3" json:"advertised_auto_neg_mode,omitempty"`
	AdvertisedFlowControlMode           PortFlowControlMode           `protobuf:"varint,42,opt,name=advertised_flow_control_mode,json=advertisedFlowControlMode,proto3,enum=lemming.dataplane.sai.PortFlowControlMode" json:"advertised_flow_control_mode,omitempty"`
	AdvertisedAsymmetricPauseMode       bool                          `protobuf:"varint,43,opt,name=advertised_asymmetric_pause_mode,json=advertisedAsymmetricPauseMode,proto3" json:"advertised_asymmetric_pause_mode,omitempty"`
	AdvertisedMediaType                 PortMediaType                 `protobuf:"varint,44,opt,name=advertised_media_type,json=advertisedMediaType,proto3,enum=lemming.dataplane.sai.PortMediaType" json:"advertised_media_type,omitempty"`
	AdvertisedOuiCode                   uint32                        `protobuf:"varint,45,opt,name=advertised_oui_code,json=advertisedOuiCode,proto3" json:"advertised_oui_code,omitempty"`
	PortVlanId                          uint32                        `protobuf:"varint,46,opt,name=port_vlan_id,json=portVlanId,proto3" json:"port_vlan_id,omitempty"`
	DefaultVlanPriority                 uint32                        `protobuf:"varint,47,opt,name=default_vlan_priority,json=defaultVlanPriority,proto3" json:"default_vlan_priority,omitempty"`
	DropUntagged                        bool                          `protobuf:"varint,48,opt,name=drop_untagged,json=dropUntagged,proto3" json:"drop_untagged,omitempty"`
	DropTagged                          bool                          `protobuf:"varint,49,opt,name=drop_tagged,json=dropTagged,proto3" json:"drop_tagged,omitempty"`
	InternalLoopbackMode                PortInternalLoopbackMode      `protobuf:"varint,50,opt,name=internal_loopback_mode,json=internalLoopbackMode,proto3,enum=lemming.dataplane.sai.PortInternalLoopbackMode" json:"internal_loopback_mode,omitempty"`
	UseExtendedFec                      bool                          `protobuf:"varint,51,opt,name=use_extended_fec,json=useExtendedFec,proto3" json:"use_extended_fec,omitempty"`
	FecMode                             PortFecMode                   `protobuf:"varint,52,opt,name=fec_mode,json=fecMode,proto3,enum=lemming.dataplane.sai.PortFecMode" json:"fec_mode,omitempty"`
	FecModeExtended                     PortFecModeExtended           `protobuf:"varint,53,opt,name=fec_mode_extended,json=fecModeExtended,proto3,enum=lemming.dataplane.sai.PortFecModeExtended" json:"fec_mode_extended,omitempty"`
	UpdateDscp                          bool                          `protobuf:"varint,54,opt,name=update_dscp,json=updateDscp,proto3" json:"update_dscp,omitempty"`
	Mtu                                 uint32                        `protobuf:"varint,55,opt,name=mtu,proto3" json:"mtu,omitempty"`
	FloodStormControlPolicerId          uint64                        `protobuf:"varint,56,opt,name=flood_storm_control_policer_id,json=floodStormControlPolicerId,proto3" json:"flood_storm_control_policer_id,omitempty"`
	BroadcastStormControlPolicerId      uint64                        `protobuf:"varint,57,opt,name=broadcast_storm_control_policer_id,json=broadcastStormControlPolicerId,proto3" json:"broadcast_storm_control_policer_id,omitempty"`
	MulticastStormControlPolicerId      uint64                        `protobuf:"varint,58,opt,name=multicast_storm_control_policer_id,json=multicastStormControlPolicerId,proto3" json:"multicast_storm_control_policer_id,omitempty"`
	GlobalFlowControlMode               PortFlowControlMode           `protobuf:"varint,59,opt,name=global_flow_control_mode,json=globalFlowControlMode,proto3,enum=lemming.dataplane.sai.PortFlowControlMode" json:"global_flow_control_mode,omitempty"`
	IngressAcl                          uint64                        `protobuf:"varint,60,opt,name=ingress_acl,json=ingressAcl,proto3" json:"ingress_acl,omitempty"`
	EgressAcl                           uint64                        `protobuf:"varint,61,opt,name=egress_acl,json=egressAcl,proto3" json:"egress_acl,omitempty"`
	IngressMacsecAcl                    uint64                        `protobuf:"varint,62,opt,name=ingress_macsec_acl,json=ingressMacsecAcl,proto3" json:"ingress_macsec_acl,omitempty"`
	EgressMacsecAcl                     uint64                        `protobuf:"varint,63,opt,name=egress_macsec_acl,json=egressMacsecAcl,proto3" json:"egress_macsec_acl,omitempty"`
	MacsecPortList                      *Uint64List                   `protobuf:"bytes,64,opt,name=macsec_port_list,json=macsecPortList,proto3" json:"macsec_port_list,omitempty"`
	IngressMirrorSession                *Uint64List                   `protobuf:"bytes,65,opt,name=ingress_mirror_session,json=ingressMirrorSession,proto3" json:"ingress_mirror_session,omitempty"`
	EgressMirrorSession                 *Uint64List                   `protobuf:"bytes,66,opt,name=egress_mirror_session,json=egressMirrorSession,proto3" json:"egress_mirror_session,omitempty"`
	IngressSamplepacketEnable           uint64                        `protobuf:"varint,67,opt,name=ingress_samplepacket_enable,json=ingressSamplepacketEnable,proto3" json:"ingress_samplepacket_enable,omitempty"`
	EgressSamplepacketEnable            uint64                        `protobuf:"varint,68,opt,name=egress_samplepacket_enable,json=egressSamplepacketEnable,proto3" json:"egress_samplepacket_enable,omitempty"`
	IngressSampleMirrorSession          *Uint64List                   `protobuf:"bytes,69,opt,name=ingress_sample_mirror_session,json=ingressSampleMirrorSession,proto3" json:"ingress_sample_mirror_session,omitempty"`
	EgressSampleMirrorSession           *Uint64List                   `protobuf:"bytes,70,opt,name=egress_sample_mirror_session,json=egressSampleMirrorSession,proto3" json:"egress_sample_mirror_session,omitempty"`
	PolicerId                           uint64                        `protobuf:"varint,71,opt,name=policer_id,json=policerId,proto3" json:"policer_id,omitempty"`
	QosDefaultTc                        uint32                        `protobuf:"varint,72,opt,name=qos_default_tc,json=qosDefaultTc,proto3" json:"qos_default_tc,omitempty"`
	QosDot1PToTcMap                     uint64                        `protobuf:"varint,73,opt,name=qos_dot1p_to_tc_map,json=qosDot1pToTcMap,proto3" json:"qos_dot1p_to_tc_map,omitempty"`
	QosDot1PToColorMap                  uint64                        `protobuf:"varint,74,opt,name=qos_dot1p_to_color_map,json=qosDot1pToColorMap,proto3" json:"qos_dot1p_to_color_map,omitempty"`
	QosDscpToTcMap                      uint64                        `protobuf:"varint,75,opt,name=qos_dscp_to_tc_map,json=qosDscpToTcMap,proto3" json:"qos_dscp_to_tc_map,omitempty"`
	QosDscpToColorMap                   uint64                        `protobuf:"varint,76,opt,name=qos_dscp_to_color_map,json=qosDscpToColorMap,proto3" json:"qos_dscp_to_color_map,omitempty"`
	QosTcToQueueMap                     uint64                        `protobuf:"varint,77,opt,name=qos_tc_to_queue_map,json=qosTcToQueueMap,proto3" json:"qos_tc_to_queue_map,omitempty"`
	QosTcAndColorToDot1PMap             uint64                        `protobuf:"varint,78,opt,name=qos_tc_and_color_to_dot1p_map,json=qosTcAndColorToDot1pMap,proto3" json:"qos_tc_and_color_to_dot1p_map,omitempty"`
	QosTcAndColorToDscpMap              uint64                        `protobuf:"varint,79,opt,name=qos_tc_and_color_to_dscp_map,json=qosTcAndColorToDscpMap,proto3" json:"qos_tc_and_color_to_dscp_map,omitempty"`
	QosTcToPriorityGroupMap             uint64                        `protobuf:"varint,80,opt,name=qos_tc_to_priority_group_map,json=qosTcToPriorityGroupMap,proto3" json:"qos_tc_to_priority_group_map,omitempty"`
	QosPfcPriorityToPriorityGroupMap    uint64                        `protobuf:"varint,81,opt,name=qos_pfc_priority_to_priority_group_map,json=qosPfcPriorityToPriorityGroupMap,proto3" json:"qos_pfc_priority_to_priority_group_map,omitempty"`
	QosPfcPriorityToQueueMap            uint64                        `protobuf:"varint,82,opt,name=qos_pfc_priority_to_queue_map,json=qosPfcPriorityToQueueMap,proto3" json:"qos_pfc_priority_to_queue_map,omitempty"`
	QosSchedulerProfileId               uint64                        `protobuf:"varint,83,opt,name=qos_scheduler_profile_id,json=qosSchedulerProfileId,proto3" json:"qos_scheduler_profile_id,omitempty"`
	QosIngressBufferProfileList         *Uint64List                   `protobuf:"bytes,84,opt,name=qos_ingress_buffer_profile_list,json=qosIngressBufferProfileList,proto3" json:"qos_ingress_buffer_profile_list,omitempty"`
	QosEgressBufferProfileList          *Uint64List                   `protobuf:"bytes,85,opt,name=qos_egress_buffer_profile_list,json=qosEgressBufferProfileList,proto3" json:"qos_egress_buffer_profile_list,omitempty"`
	PriorityFlowControlMode             PortPriorityFlowControlMode   `protobuf:"varint,86,opt,name=priority_flow_control_mode,json=priorityFlowControlMode,proto3,enum=lemming.dataplane.sai.PortPriorityFlowControlMode" json:"priority_flow_control_mode,omitempty"`
	PriorityFlowControl                 uint32                        `protobuf:"varint,87,opt,name=priority_flow_control,json=priorityFlowControl,proto3" json:"priority_flow_control,omitempty"`
	PriorityFlowControlRx               uint32                        `protobuf:"varint,88,opt,name=priority_flow_control_rx,json=priorityFlowControlRx,proto3" json:"priority_flow_control_rx,omitempty"`
	PriorityFlowControlTx               uint32                        `protobuf:"varint,89,opt,name=priority_flow_control_tx,json=priorityFlowControlTx,proto3" json:"priority_flow_control_tx,omitempty"`
	MetaData                            uint32                        `protobuf:"varint,90,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	EgressBlockPortList                 *Uint64List                   `protobuf:"bytes,91,opt,name=egress_block_port_list,json=egressBlockPortList,proto3" json:"egress_block_port_list,omitempty"`
	HwProfileId                         uint64                        `protobuf:"varint,92,opt,name=hw_profile_id,json=hwProfileId,proto3" json:"hw_profile_id,omitempty"`
	EeeEnable                           bool                          `protobuf:"varint,93,opt,name=eee_enable,json=eeeEnable,proto3" json:"eee_enable,omitempty"`
	EeeIdleTime                         uint32                        `protobuf:"varint,94,opt,name=eee_idle_time,json=eeeIdleTime,proto3" json:"eee_idle_time,omitempty"`
	EeeWakeTime                         uint32                        `protobuf:"varint,95,opt,name=eee_wake_time,json=eeeWakeTime,proto3" json:"eee_wake_time,omitempty"`
	PortPoolList                        *Uint64List                   `protobuf:"bytes,96,opt,name=port_pool_list,json=portPoolList,proto3" json:"port_pool_list,omitempty"`
	IsolationGroup                      uint64                        `protobuf:"varint,97,opt,name=isolation_group,json=isolationGroup,proto3" json:"isolation_group,omitempty"`
	PktTxEnable                         bool                          `protobuf:"varint,98,opt,name=pkt_tx_enable,json=pktTxEnable,proto3" json:"pkt_tx_enable,omitempty"`
	TamObject                           *Uint64List                   `protobuf:"bytes,99,opt,name=tam_object,json=tamObject,proto3" json:"tam_object,omitempty"`
	SerdesPreemphasis                   *Uint32List                   `protobuf:"bytes,100,opt,name=serdes_preemphasis,json=serdesPreemphasis,proto3" json:"serdes_preemphasis,omitempty"`
	SerdesIdriver                       *Uint32List                   `protobuf:"bytes,101,opt,name=serdes_idriver,json=serdesIdriver,proto3" json:"serdes_idriver,omitempty"`
	SerdesIpredriver                    *Uint32List                   `protobuf:"bytes,102,opt,name=serdes_ipredriver,json=serdesIpredriver,proto3" json:"serdes_ipredriver,omitempty"`
	LinkTrainingEnable                  bool                          `protobuf:"varint,103,opt,name=link_training_enable,json=linkTrainingEnable,proto3" json:"link_training_enable,omitempty"`
	PtpMode                             PortPtpMode                   `protobuf:"varint,104,opt,name=ptp_mode,json=ptpMode,proto3,enum=lemming.dataplane.sai.PortPtpMode" json:"ptp_mode,omitempty"`
	InterfaceType                       PortInterfaceType             `protobuf:"varint,105,opt,name=interface_type,json=interfaceType,proto3,enum=lemming.dataplane.sai.PortInterfaceType" json:"interface_type,omitempty"`
	AdvertisedInterfaceType             *PortInterfaceTypeList        `protobuf:"bytes,106,opt,name=advertised_interface_type,json=advertisedInterfaceType,proto3" json:"advertised_interface_type,omitempty"`
	ReferenceClock                      uint64                        `protobuf:"varint,107,opt,name=reference_clock,json=referenceClock,proto3" json:"reference_clock,omitempty"`
	PrbsPolynomial                      uint32                        `protobuf:"varint,108,opt,name=prbs_polynomial,json=prbsPolynomial,proto3" json:"prbs_polynomial,omitempty"`
	PortSerdesId                        uint64                        `protobuf:"varint,109,opt,name=port_serdes_id,json=portSerdesId,proto3" json:"port_serdes_id,omitempty"`
	LinkTrainingFailureStatus           PortLinkTrainingFailureStatus `protobuf:"varint,110,opt,name=link_training_failure_status,json=linkTrainingFailureStatus,proto3,enum=lemming.dataplane.sai.PortLinkTrainingFailureStatus" json:"link_training_failure_status,omitempty"`
	LinkTrainingRxStatus                PortLinkTrainingRxStatus      `protobuf:"varint,111,opt,name=link_training_rx_status,json=linkTrainingRxStatus,proto3,enum=lemming.dataplane.sai.PortLinkTrainingRxStatus" json:"link_training_rx_status,omitempty"`
	PrbsConfig                          PortPrbsConfig                `protobuf:"varint,112,opt,name=prbs_config,json=prbsConfig,proto3,enum=lemming.dataplane.sai.PortPrbsConfig" json:"prbs_config,omitempty"`
	PrbsLockStatus                      bool                          `protobuf:"varint,113,opt,name=prbs_lock_status,json=prbsLockStatus,proto3" json:"prbs_lock_status,omitempty"`
	PrbsLockLossStatus                  bool                          `protobuf:"varint,114,opt,name=prbs_lock_loss_status,json=prbsLockLossStatus,proto3" json:"prbs_lock_loss_status,omitempty"`
	PrbsRxStatus                        PortPrbsRxStatus              `protobuf:"varint,115,opt,name=prbs_rx_status,json=prbsRxStatus,proto3,enum=lemming.dataplane.sai.PortPrbsRxStatus" json:"prbs_rx_status,omitempty"`
	PrbsRxState                         *PRBS_RXState                 `protobuf:"bytes,116,opt,name=prbs_rx_state,json=prbsRxState,proto3" json:"prbs_rx_state,omitempty"`
	AutoNegStatus                       bool                          `protobuf:"varint,117,opt,name=auto_neg_status,json=autoNegStatus,proto3" json:"auto_neg_status,omitempty"`
	DisableDecrementTtl                 bool                          `protobuf:"varint,118,opt,name=disable_decrement_ttl,json=disableDecrementTtl,proto3" json:"disable_decrement_ttl,omitempty"`
	QosMplsExpToTcMap                   uint64                        `protobuf:"varint,119,opt,name=qos_mpls_exp_to_tc_map,json=qosMplsExpToTcMap,proto3" json:"qos_mpls_exp_to_tc_map,omitempty"`
	QosMplsExpToColorMap                uint64                        `protobuf:"varint,120,opt,name=qos_mpls_exp_to_color_map,json=qosMplsExpToColorMap,proto3" json:"qos_mpls_exp_to_color_map,omitempty"`
	QosTcAndColorToMplsExpMap           uint64                        `protobuf:"varint,121,opt,name=qos_tc_and_color_to_mpls_exp_map,json=qosTcAndColorToMplsExpMap,proto3" json:"qos_tc_and_color_to_mpls_exp_map,omitempty"`
	Tpid                                uint32                        `protobuf:"varint,122,opt,name=tpid,proto3" json:"tpid,omitempty"`
	ErrStatusList                       *PortErrStatusList            `protobuf:"bytes,123,opt,name=err_status_list,json=errStatusList,proto3" json:"err_status_list,omitempty"`
	FabricAttached                      bool                          `protobuf:"varint,124,opt,name=fabric_attached,json=fabricAttached,proto3" json:"fabric_attached,omitempty"`
	FabricAttachedSwitchType            SwitchType                    `protobuf:"varint,125,opt,name=fabric_attached_switch_type,json=fabricAttachedSwitchType,proto3,enum=lemming.dataplane.sai.SwitchType" json:"fabric_attached_switch_type,omitempty"`
	FabricAttachedSwitchId              uint32                        `protobuf:"varint,126,opt,name=fabric_attached_switch_id,json=fabricAttachedSwitchId,proto3" json:"fabric_attached_switch_id,omitempty"`
	FabricAttachedPortIndex             uint32                        `protobuf:"varint,127,opt,name=fabric_attached_port_index,json=fabricAttachedPortIndex,proto3" json:"fabric_attached_port_index,omitempty"`
	FabricReachability                  *FabricPortReachability       `protobuf:"bytes,128,opt,name=fabric_reachability,json=fabricReachability,proto3" json:"fabric_reachability,omitempty"`
	SystemPort                          uint64                        `protobuf:"varint,129,opt,name=system_port,json=systemPort,proto3" json:"system_port,omitempty"`
	AutoNegFecModeOverride              bool                          `protobuf:"varint,130,opt,name=auto_neg_fec_mode_override,json=autoNegFecModeOverride,proto3" json:"auto_neg_fec_mode_override,omitempty"`
	LoopbackMode                        PortLoopbackMode              `protobuf:"varint,131,opt,name=loopback_mode,json=loopbackMode,proto3,enum=lemming.dataplane.sai.PortLoopbackMode" json:"loopback_mode,omitempty"`
	MdixModeStatus                      PortMdixModeStatus            `protobuf:"varint,132,opt,name=mdix_mode_status,json=mdixModeStatus,proto3,enum=lemming.dataplane.sai.PortMdixModeStatus" json:"mdix_mode_status,omitempty"`
	MdixModeConfig                      PortMdixModeConfig            `protobuf:"varint,133,opt,name=mdix_mode_config,json=mdixModeConfig,proto3,enum=lemming.dataplane.sai.PortMdixModeConfig" json:"mdix_mode_config,omitempty"`
	AutoNegConfigMode                   PortAutoNegConfigMode         `protobuf:"varint,134,opt,name=auto_neg_config_mode,json=autoNegConfigMode,proto3,enum=lemming.dataplane.sai.PortAutoNegConfigMode" json:"auto_neg_config_mode,omitempty"`
	X1000XSgmiiSlaveAutodetect          bool                          `protobuf:"varint,135,opt,name=_1000x_sgmii_slave_autodetect,json=1000xSgmiiSlaveAutodetect,proto3" json:"_1000x_sgmii_slave_autodetect,omitempty"`
	ModuleType                          PortModuleType                `protobuf:"varint,136,opt,name=module_type,json=moduleType,proto3,enum=lemming.dataplane.sai.PortModuleType" json:"module_type,omitempty"`
	DualMedia                           PortDualMedia                 `protobuf:"varint,137,opt,name=dual_media,json=dualMedia,proto3,enum=lemming.dataplane.sai.PortDualMedia" json:"dual_media,omitempty"`
	AutoNegFecModeExtended              PortFecModeExtended           `protobuf:"varint,138,opt,name=auto_neg_fec_mode_extended,json=autoNegFecModeExtended,proto3,enum=lemming.dataplane.sai.PortFecModeExtended" json:"auto_neg_fec_mode_extended,omitempty"`
	Ipg                                 uint32                        `protobuf:"varint,139,opt,name=ipg,proto3" json:"ipg,omitempty"`
	GlobalFlowControlForward            bool                          `protobuf:"varint,140,opt,name=global_flow_control_forward,json=globalFlowControlForward,proto3" json:"global_flow_control_forward,omitempty"`
	PriorityFlowControlForward          bool                          `protobuf:"varint,141,opt,name=priority_flow_control_forward,json=priorityFlowControlForward,proto3" json:"priority_flow_control_forward,omitempty"`
	QosDscpToForwardingClassMap         uint64                        `protobuf:"varint,142,opt,name=qos_dscp_to_forwarding_class_map,json=qosDscpToForwardingClassMap,proto3" json:"qos_dscp_to_forwarding_class_map,omitempty"`
	QosMplsExpToForwardingClassMap      uint64                        `protobuf:"varint,143,opt,name=qos_mpls_exp_to_forwarding_class_map,json=qosMplsExpToForwardingClassMap,proto3" json:"qos_mpls_exp_to_forwarding_class_map,omitempty"`
	IpsecPort                           uint64                        `protobuf:"varint,144,opt,name=ipsec_port,json=ipsecPort,proto3" json:"ipsec_port,omitempty"`
}

func (x *PortAttribute) Reset() {
	*x = PortAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortAttribute) ProtoMessage() {}

func (x *PortAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortAttribute.ProtoReflect.Descriptor instead.
func (*PortAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{109}
}

func (x *PortAttribute) GetType() PortType {
	if x != nil {
		return x.Type
	}
	return PortType_PORT_TYPE_UNSPECIFIED
}

func (x *PortAttribute) GetOperStatus() PortOperStatus {
	if x != nil {
		return x.OperStatus
	}
	return PortOperStatus_PORT_OPER_STATUS_UNSPECIFIED
}

func (x *PortAttribute) GetSupportedBreakoutModeType() *PortBreakoutModeTypeList {
	if x != nil {
		return x.SupportedBreakoutModeType
	}
	return nil
}

func (x *PortAttribute) GetCurrentBreakoutModeType() PortBreakoutModeType {
	if x != nil {
		return x.CurrentBreakoutModeType
	}
	return PortBreakoutModeType_PORT_BREAKOUT_MODE_TYPE_UNSPECIFIED
}

func (x *PortAttribute) GetQosNumberOfQueues() uint32 {
	if x != nil {
		return x.QosNumberOfQueues
	}
	return 0
}

func (x *PortAttribute) GetQosQueueList() *Uint64List {
	if x != nil {
		return x.QosQueueList
	}
	return nil
}

func (x *PortAttribute) GetQosNumberOfSchedulerGroups() uint32 {
	if x != nil {
		return x.QosNumberOfSchedulerGroups
	}
	return 0
}

func (x *PortAttribute) GetQosSchedulerGroupList() *Uint64List {
	if x != nil {
		return x.QosSchedulerGroupList
	}
	return nil
}

func (x *PortAttribute) GetQosMaximumHeadroomSize() uint32 {
	if x != nil {
		return x.QosMaximumHeadroomSize
	}
	return 0
}

func (x *PortAttribute) GetSupportedSpeed() *Uint32List {
	if x != nil {
		return x.SupportedSpeed
	}
	return nil
}

func (x *PortAttribute) GetSupportedFecMode() *PortFecModeList {
	if x != nil {
		return x.SupportedFecMode
	}
	return nil
}

func (x *PortAttribute) GetSupportedFecModeExtended() *PortFecModeExtendedList {
	if x != nil {
		return x.SupportedFecModeExtended
	}
	return nil
}

func (x *PortAttribute) GetSupportedHalfDuplexSpeed() *Uint32List {
	if x != nil {
		return x.SupportedHalfDuplexSpeed
	}
	return nil
}

func (x *PortAttribute) GetSupportedAutoNegMode() bool {
	if x != nil {
		return x.SupportedAutoNegMode
	}
	return false
}

func (x *PortAttribute) GetSupportedFlowControlMode() PortFlowControlMode {
	if x != nil {
		return x.SupportedFlowControlMode
	}
	return PortFlowControlMode_PORT_FLOW_CONTROL_MODE_UNSPECIFIED
}

func (x *PortAttribute) GetSupportedAsymmetricPauseMode() bool {
	if x != nil {
		return x.SupportedAsymmetricPauseMode
	}
	return false
}

func (x *PortAttribute) GetSupportedMediaType() PortMediaType {
	if x != nil {
		return x.SupportedMediaType
	}
	return PortMediaType_PORT_MEDIA_TYPE_UNSPECIFIED
}

func (x *PortAttribute) GetRemoteAdvertisedSpeed() *Uint32List {
	if x != nil {
		return x.RemoteAdvertisedSpeed
	}
	return nil
}

func (x *PortAttribute) GetRemoteAdvertisedFecMode() *PortFecModeList {
	if x != nil {
		return x.RemoteAdvertisedFecMode
	}
	return nil
}

func (x *PortAttribute) GetRemoteAdvertisedFecModeExtended() *PortFecModeExtendedList {
	if x != nil {
		return x.RemoteAdvertisedFecModeExtended
	}
	return nil
}

func (x *PortAttribute) GetRemoteAdvertisedHalfDuplexSpeed() *Uint32List {
	if x != nil {
		return x.RemoteAdvertisedHalfDuplexSpeed
	}
	return nil
}

func (x *PortAttribute) GetRemoteAdvertisedAutoNegMode() bool {
	if x != nil {
		return x.RemoteAdvertisedAutoNegMode
	}
	return false
}

func (x *PortAttribute) GetRemoteAdvertisedFlowControlMode() PortFlowControlMode {
	if x != nil {
		return x.RemoteAdvertisedFlowControlMode
	}
	return PortFlowControlMode_PORT_FLOW_CONTROL_MODE_UNSPECIFIED
}

func (x *PortAttribute) GetRemoteAdvertisedAsymmetricPauseMode() bool {
	if x != nil {
		return x.RemoteAdvertisedAsymmetricPauseMode
	}
	return false
}

func (x *PortAttribute) GetRemoteAdvertisedMediaType() PortMediaType {
	if x != nil {
		return x.RemoteAdvertisedMediaType
	}
	return PortMediaType_PORT_MEDIA_TYPE_UNSPECIFIED
}

func (x *PortAttribute) GetRemoteAdvertisedOuiCode() uint32 {
	if x != nil {
		return x.RemoteAdvertisedOuiCode
	}
	return 0
}

func (x *PortAttribute) GetNumberOfIngressPriorityGroups() uint32 {
	if x != nil {
		return x.NumberOfIngressPriorityGroups
	}
	return 0
}

func (x *PortAttribute) GetIngressPriorityGroupList() *Uint64List {
	if x != nil {
		return x.IngressPriorityGroupList
	}
	return nil
}

func (x *PortAttribute) GetEyeValues() *PortEyeValuesList {
	if x != nil {
		return x.EyeValues
	}
	return nil
}

func (x *PortAttribute) GetOperSpeed() uint32 {
	if x != nil {
		return x.OperSpeed
	}
	return 0
}

func (x *PortAttribute) GetHwLaneList() *Uint32List {
	if x != nil {
		return x.HwLaneList
	}
	return nil
}

func (x *PortAttribute) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *PortAttribute) GetFullDuplexMode() bool {
	if x != nil {
		return x.FullDuplexMode
	}
	return false
}

func (x *PortAttribute) GetAutoNegMode() bool {
	if x != nil {
		return x.AutoNegMode
	}
	return false
}

func (x *PortAttribute) GetAdminState() bool {
	if x != nil {
		return x.AdminState
	}
	return false
}

func (x *PortAttribute) GetMediaType() PortMediaType {
	if x != nil {
		return x.MediaType
	}
	return PortMediaType_PORT_MEDIA_TYPE_UNSPECIFIED
}

func (x *PortAttribute) GetAdvertisedSpeed() *Uint32List {
	if x != nil {
		return x.AdvertisedSpeed
	}
	return nil
}

func (x *PortAttribute) GetAdvertisedFecMode() *PortFecModeList {
	if x != nil {
		return x.AdvertisedFecMode
	}
	return nil
}

func (x *PortAttribute) GetAdvertisedFecModeExtended() *PortFecModeExtendedList {
	if x != nil {
		return x.AdvertisedFecModeExtended
	}
	return nil
}

func (x *PortAttribute) GetAdvertisedHalfDuplexSpeed() *Uint32List {
	if x != nil {
		return x.AdvertisedHalfDuplexSpeed
	}
	return nil
}

func (x *PortAttribute) GetAdvertisedAutoNegMode() bool {
	if x != nil {
		return x.AdvertisedAutoNegMode
	}
	return false
}

func (x *PortAttribute) GetAdvertisedFlowControlMode() PortFlowControlMode {
	if x != nil {
		return x.AdvertisedFlowControlMode
	}
	return PortFlowControlMode_PORT_FLOW_CONTROL_MODE_UNSPECIFIED
}

func (x *PortAttribute) GetAdvertisedAsymmetricPauseMode() bool {
	if x != nil {
		return x.AdvertisedAsymmetricPauseMode
	}
	return false
}

func (x *PortAttribute) GetAdvertisedMediaType() PortMediaType {
	if x != nil {
		return x.AdvertisedMediaType
	}
	return PortMediaType_PORT_MEDIA_TYPE_UNSPECIFIED
}

func (x *PortAttribute) GetAdvertisedOuiCode() uint32 {
	if x != nil {
		return x.AdvertisedOuiCode
	}
	return 0
}

func (x *PortAttribute) GetPortVlanId() uint32 {
	if x != nil {
		return x.PortVlanId
	}
	return 0
}

func (x *PortAttribute) GetDefaultVlanPriority() uint32 {
	if x != nil {
		return x.DefaultVlanPriority
	}
	return 0
}

func (x *PortAttribute) GetDropUntagged() bool {
	if x != nil {
		return x.DropUntagged
	}
	return false
}

func (x *PortAttribute) GetDropTagged() bool {
	if x != nil {
		return x.DropTagged
	}
	return false
}

func (x *PortAttribute) GetInternalLoopbackMode() PortInternalLoopbackMode {
	if x != nil {
		return x.InternalLoopbackMode
	}
	return PortInternalLoopbackMode_PORT_INTERNAL_LOOPBACK_MODE_UNSPECIFIED
}

func (x *PortAttribute) GetUseExtendedFec() bool {
	if x != nil {
		return x.UseExtendedFec
	}
	return false
}

func (x *PortAttribute) GetFecMode() PortFecMode {
	if x != nil {
		return x.FecMode
	}
	return PortFecMode_PORT_FEC_MODE_UNSPECIFIED
}

func (x *PortAttribute) GetFecModeExtended() PortFecModeExtended {
	if x != nil {
		return x.FecModeExtended
	}
	return PortFecModeExtended_PORT_FEC_MODE_EXTENDED_UNSPECIFIED
}

func (x *PortAttribute) GetUpdateDscp() bool {
	if x != nil {
		return x.UpdateDscp
	}
	return false
}

func (x *PortAttribute) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *PortAttribute) GetFloodStormControlPolicerId() uint64 {
	if x != nil {
		return x.FloodStormControlPolicerId
	}
	return 0
}

func (x *PortAttribute) GetBroadcastStormControlPolicerId() uint64 {
	if x != nil {
		return x.BroadcastStormControlPolicerId
	}
	return 0
}

func (x *PortAttribute) GetMulticastStormControlPolicerId() uint64 {
	if x != nil {
		return x.MulticastStormControlPolicerId
	}
	return 0
}

func (x *PortAttribute) GetGlobalFlowControlMode() PortFlowControlMode {
	if x != nil {
		return x.GlobalFlowControlMode
	}
	return PortFlowControlMode_PORT_FLOW_CONTROL_MODE_UNSPECIFIED
}

func (x *PortAttribute) GetIngressAcl() uint64 {
	if x != nil {
		return x.IngressAcl
	}
	return 0
}

func (x *PortAttribute) GetEgressAcl() uint64 {
	if x != nil {
		return x.EgressAcl
	}
	return 0
}

func (x *PortAttribute) GetIngressMacsecAcl() uint64 {
	if x != nil {
		return x.IngressMacsecAcl
	}
	return 0
}

func (x *PortAttribute) GetEgressMacsecAcl() uint64 {
	if x != nil {
		return x.EgressMacsecAcl
	}
	return 0
}

func (x *PortAttribute) GetMacsecPortList() *Uint64List {
	if x != nil {
		return x.MacsecPortList
	}
	return nil
}

func (x *PortAttribute) GetIngressMirrorSession() *Uint64List {
	if x != nil {
		return x.IngressMirrorSession
	}
	return nil
}

func (x *PortAttribute) GetEgressMirrorSession() *Uint64List {
	if x != nil {
		return x.EgressMirrorSession
	}
	return nil
}

func (x *PortAttribute) GetIngressSamplepacketEnable() uint64 {
	if x != nil {
		return x.IngressSamplepacketEnable
	}
	return 0
}

func (x *PortAttribute) GetEgressSamplepacketEnable() uint64 {
	if x != nil {
		return x.EgressSamplepacketEnable
	}
	return 0
}

func (x *PortAttribute) GetIngressSampleMirrorSession() *Uint64List {
	if x != nil {
		return x.IngressSampleMirrorSession
	}
	return nil
}

func (x *PortAttribute) GetEgressSampleMirrorSession() *Uint64List {
	if x != nil {
		return x.EgressSampleMirrorSession
	}
	return nil
}

func (x *PortAttribute) GetPolicerId() uint64 {
	if x != nil {
		return x.PolicerId
	}
	return 0
}

func (x *PortAttribute) GetQosDefaultTc() uint32 {
	if x != nil {
		return x.QosDefaultTc
	}
	return 0
}

func (x *PortAttribute) GetQosDot1PToTcMap() uint64 {
	if x != nil {
		return x.QosDot1PToTcMap
	}
	return 0
}

func (x *PortAttribute) GetQosDot1PToColorMap() uint64 {
	if x != nil {
		return x.QosDot1PToColorMap
	}
	return 0
}

func (x *PortAttribute) GetQosDscpToTcMap() uint64 {
	if x != nil {
		return x.QosDscpToTcMap
	}
	return 0
}

func (x *PortAttribute) GetQosDscpToColorMap() uint64 {
	if x != nil {
		return x.QosDscpToColorMap
	}
	return 0
}

func (x *PortAttribute) GetQosTcToQueueMap() uint64 {
	if x != nil {
		return x.QosTcToQueueMap
	}
	return 0
}

func (x *PortAttribute) GetQosTcAndColorToDot1PMap() uint64 {
	if x != nil {
		return x.QosTcAndColorToDot1PMap
	}
	return 0
}

func (x *PortAttribute) GetQosTcAndColorToDscpMap() uint64 {
	if x != nil {
		return x.QosTcAndColorToDscpMap
	}
	return 0
}

func (x *PortAttribute) GetQosTcToPriorityGroupMap() uint64 {
	if x != nil {
		return x.QosTcToPriorityGroupMap
	}
	return 0
}

func (x *PortAttribute) GetQosPfcPriorityToPriorityGroupMap() uint64 {
	if x != nil {
		return x.QosPfcPriorityToPriorityGroupMap
	}
	return 0
}

func (x *PortAttribute) GetQosPfcPriorityToQueueMap() uint64 {
	if x != nil {
		return x.QosPfcPriorityToQueueMap
	}
	return 0
}

func (x *PortAttribute) GetQosSchedulerProfileId() uint64 {
	if x != nil {
		return x.QosSchedulerProfileId
	}
	return 0
}

func (x *PortAttribute) GetQosIngressBufferProfileList() *Uint64List {
	if x != nil {
		return x.QosIngressBufferProfileList
	}
	return nil
}

func (x *PortAttribute) GetQosEgressBufferProfileList() *Uint64List {
	if x != nil {
		return x.QosEgressBufferProfileList
	}
	return nil
}

func (x *PortAttribute) GetPriorityFlowControlMode() PortPriorityFlowControlMode {
	if x != nil {
		return x.PriorityFlowControlMode
	}
	return PortPriorityFlowControlMode_PORT_PRIORITY_FLOW_CONTROL_MODE_UNSPECIFIED
}

func (x *PortAttribute) GetPriorityFlowControl() uint32 {
	if x != nil {
		return x.PriorityFlowControl
	}
	return 0
}

func (x *PortAttribute) GetPriorityFlowControlRx() uint32 {
	if x != nil {
		return x.PriorityFlowControlRx
	}
	return 0
}

func (x *PortAttribute) GetPriorityFlowControlTx() uint32 {
	if x != nil {
		return x.PriorityFlowControlTx
	}
	return 0
}

func (x *PortAttribute) GetMetaData() uint32 {
	if x != nil {
		return x.MetaData
	}
	return 0
}

func (x *PortAttribute) GetEgressBlockPortList() *Uint64List {
	if x != nil {
		return x.EgressBlockPortList
	}
	return nil
}

func (x *PortAttribute) GetHwProfileId() uint64 {
	if x != nil {
		return x.HwProfileId
	}
	return 0
}

func (x *PortAttribute) GetEeeEnable() bool {
	if x != nil {
		return x.EeeEnable
	}
	return false
}

func (x *PortAttribute) GetEeeIdleTime() uint32 {
	if x != nil {
		return x.EeeIdleTime
	}
	return 0
}

func (x *PortAttribute) GetEeeWakeTime() uint32 {
	if x != nil {
		return x.EeeWakeTime
	}
	return 0
}

func (x *PortAttribute) GetPortPoolList() *Uint64List {
	if x != nil {
		return x.PortPoolList
	}
	return nil
}

func (x *PortAttribute) GetIsolationGroup() uint64 {
	if x != nil {
		return x.IsolationGroup
	}
	return 0
}

func (x *PortAttribute) GetPktTxEnable() bool {
	if x != nil {
		return x.PktTxEnable
	}
	return false
}

func (x *PortAttribute) GetTamObject() *Uint64List {
	if x != nil {
		return x.TamObject
	}
	return nil
}

func (x *PortAttribute) GetSerdesPreemphasis() *Uint32List {
	if x != nil {
		return x.SerdesPreemphasis
	}
	return nil
}

func (x *PortAttribute) GetSerdesIdriver() *Uint32List {
	if x != nil {
		return x.SerdesIdriver
	}
	return nil
}

func (x *PortAttribute) GetSerdesIpredriver() *Uint32List {
	if x != nil {
		return x.SerdesIpredriver
	}
	return nil
}

func (x *PortAttribute) GetLinkTrainingEnable() bool {
	if x != nil {
		return x.LinkTrainingEnable
	}
	return false
}

func (x *PortAttribute) GetPtpMode() PortPtpMode {
	if x != nil {
		return x.PtpMode
	}
	return PortPtpMode_PORT_PTP_MODE_UNSPECIFIED
}

func (x *PortAttribute) GetInterfaceType() PortInterfaceType {
	if x != nil {
		return x.InterfaceType
	}
	return PortInterfaceType_PORT_INTERFACE_TYPE_UNSPECIFIED
}

func (x *PortAttribute) GetAdvertisedInterfaceType() *PortInterfaceTypeList {
	if x != nil {
		return x.AdvertisedInterfaceType
	}
	return nil
}

func (x *PortAttribute) GetReferenceClock() uint64 {
	if x != nil {
		return x.ReferenceClock
	}
	return 0
}

func (x *PortAttribute) GetPrbsPolynomial() uint32 {
	if x != nil {
		return x.PrbsPolynomial
	}
	return 0
}

func (x *PortAttribute) GetPortSerdesId() uint64 {
	if x != nil {
		return x.PortSerdesId
	}
	return 0
}

func (x *PortAttribute) GetLinkTrainingFailureStatus() PortLinkTrainingFailureStatus {
	if x != nil {
		return x.LinkTrainingFailureStatus
	}
	return PortLinkTrainingFailureStatus_PORT_LINK_TRAINING_FAILURE_STATUS_UNSPECIFIED
}

func (x *PortAttribute) GetLinkTrainingRxStatus() PortLinkTrainingRxStatus {
	if x != nil {
		return x.LinkTrainingRxStatus
	}
	return PortLinkTrainingRxStatus_PORT_LINK_TRAINING_RX_STATUS_UNSPECIFIED
}

func (x *PortAttribute) GetPrbsConfig() PortPrbsConfig {
	if x != nil {
		return x.PrbsConfig
	}
	return PortPrbsConfig_PORT_PRBS_CONFIG_UNSPECIFIED
}

func (x *PortAttribute) GetPrbsLockStatus() bool {
	if x != nil {
		return x.PrbsLockStatus
	}
	return false
}

func (x *PortAttribute) GetPrbsLockLossStatus() bool {
	if x != nil {
		return x.PrbsLockLossStatus
	}
	return false
}

func (x *PortAttribute) GetPrbsRxStatus() PortPrbsRxStatus {
	if x != nil {
		return x.PrbsRxStatus
	}
	return PortPrbsRxStatus_PORT_PRBS_RX_STATUS_UNSPECIFIED
}

func (x *PortAttribute) GetPrbsRxState() *PRBS_RXState {
	if x != nil {
		return x.PrbsRxState
	}
	return nil
}

func (x *PortAttribute) GetAutoNegStatus() bool {
	if x != nil {
		return x.AutoNegStatus
	}
	return false
}

func (x *PortAttribute) GetDisableDecrementTtl() bool {
	if x != nil {
		return x.DisableDecrementTtl
	}
	return false
}

func (x *PortAttribute) GetQosMplsExpToTcMap() uint64 {
	if x != nil {
		return x.QosMplsExpToTcMap
	}
	return 0
}

func (x *PortAttribute) GetQosMplsExpToColorMap() uint64 {
	if x != nil {
		return x.QosMplsExpToColorMap
	}
	return 0
}

func (x *PortAttribute) GetQosTcAndColorToMplsExpMap() uint64 {
	if x != nil {
		return x.QosTcAndColorToMplsExpMap
	}
	return 0
}

func (x *PortAttribute) GetTpid() uint32 {
	if x != nil {
		return x.Tpid
	}
	return 0
}

func (x *PortAttribute) GetErrStatusList() *PortErrStatusList {
	if x != nil {
		return x.ErrStatusList
	}
	return nil
}

func (x *PortAttribute) GetFabricAttached() bool {
	if x != nil {
		return x.FabricAttached
	}
	return false
}

func (x *PortAttribute) GetFabricAttachedSwitchType() SwitchType {
	if x != nil {
		return x.FabricAttachedSwitchType
	}
	return SwitchType_SWITCH_TYPE_UNSPECIFIED
}

func (x *PortAttribute) GetFabricAttachedSwitchId() uint32 {
	if x != nil {
		return x.FabricAttachedSwitchId
	}
	return 0
}

func (x *PortAttribute) GetFabricAttachedPortIndex() uint32 {
	if x != nil {
		return x.FabricAttachedPortIndex
	}
	return 0
}

func (x *PortAttribute) GetFabricReachability() *FabricPortReachability {
	if x != nil {
		return x.FabricReachability
	}
	return nil
}

func (x *PortAttribute) GetSystemPort() uint64 {
	if x != nil {
		return x.SystemPort
	}
	return 0
}

func (x *PortAttribute) GetAutoNegFecModeOverride() bool {
	if x != nil {
		return x.AutoNegFecModeOverride
	}
	return false
}

func (x *PortAttribute) GetLoopbackMode() PortLoopbackMode {
	if x != nil {
		return x.LoopbackMode
	}
	return PortLoopbackMode_PORT_LOOPBACK_MODE_UNSPECIFIED
}

func (x *PortAttribute) GetMdixModeStatus() PortMdixModeStatus {
	if x != nil {
		return x.MdixModeStatus
	}
	return PortMdixModeStatus_PORT_MDIX_MODE_STATUS_UNSPECIFIED
}

func (x *PortAttribute) GetMdixModeConfig() PortMdixModeConfig {
	if x != nil {
		return x.MdixModeConfig
	}
	return PortMdixModeConfig_PORT_MDIX_MODE_CONFIG_UNSPECIFIED
}

func (x *PortAttribute) GetAutoNegConfigMode() PortAutoNegConfigMode {
	if x != nil {
		return x.AutoNegConfigMode
	}
	return PortAutoNegConfigMode_PORT_AUTO_NEG_CONFIG_MODE_UNSPECIFIED
}

func (x *PortAttribute) GetX1000XSgmiiSlaveAutodetect() bool {
	if x != nil {
		return x.X1000XSgmiiSlaveAutodetect
	}
	return false
}

func (x *PortAttribute) GetModuleType() PortModuleType {
	if x != nil {
		return x.ModuleType
	}
	return PortModuleType_PORT_MODULE_TYPE_UNSPECIFIED
}

func (x *PortAttribute) GetDualMedia() PortDualMedia {
	if x != nil {
		return x.DualMedia
	}
	return PortDualMedia_PORT_DUAL_MEDIA_UNSPECIFIED
}

func (x *PortAttribute) GetAutoNegFecModeExtended() PortFecModeExtended {
	if x != nil {
		return x.AutoNegFecModeExtended
	}
	return PortFecModeExtended_PORT_FEC_MODE_EXTENDED_UNSPECIFIED
}

func (x *PortAttribute) GetIpg() uint32 {
	if x != nil {
		return x.Ipg
	}
	return 0
}

func (x *PortAttribute) GetGlobalFlowControlForward() bool {
	if x != nil {
		return x.GlobalFlowControlForward
	}
	return false
}

func (x *PortAttribute) GetPriorityFlowControlForward() bool {
	if x != nil {
		return x.PriorityFlowControlForward
	}
	return false
}

func (x *PortAttribute) GetQosDscpToForwardingClassMap() uint64 {
	if x != nil {
		return x.QosDscpToForwardingClassMap
	}
	return 0
}

func (x *PortAttribute) GetQosMplsExpToForwardingClassMap() uint64 {
	if x != nil {
		return x.QosMplsExpToForwardingClassMap
	}
	return 0
}

func (x *PortAttribute) GetIpsecPort() uint64 {
	if x != nil {
		return x.IpsecPort
	}
	return 0
}

type PortConnectorAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemSidePortId         uint64                    `protobuf:"varint,1,opt,name=system_side_port_id,json=systemSidePortId,proto3" json:"system_side_port_id,omitempty"`
	LineSidePortId           uint64                    `protobuf:"varint,2,opt,name=line_side_port_id,json=lineSidePortId,proto3" json:"line_side_port_id,omitempty"`
	SystemSideFailoverPortId uint64                    `protobuf:"varint,3,opt,name=system_side_failover_port_id,json=systemSideFailoverPortId,proto3" json:"system_side_failover_port_id,omitempty"`
	LineSideFailoverPortId   uint64                    `protobuf:"varint,4,opt,name=line_side_failover_port_id,json=lineSideFailoverPortId,proto3" json:"line_side_failover_port_id,omitempty"`
	FailoverMode             PortConnectorFailoverMode `protobuf:"varint,5,opt,name=failover_mode,json=failoverMode,proto3,enum=lemming.dataplane.sai.PortConnectorFailoverMode" json:"failover_mode,omitempty"`
}

func (x *PortConnectorAttribute) Reset() {
	*x = PortConnectorAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortConnectorAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortConnectorAttribute) ProtoMessage() {}

func (x *PortConnectorAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortConnectorAttribute.ProtoReflect.Descriptor instead.
func (*PortConnectorAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{110}
}

func (x *PortConnectorAttribute) GetSystemSidePortId() uint64 {
	if x != nil {
		return x.SystemSidePortId
	}
	return 0
}

func (x *PortConnectorAttribute) GetLineSidePortId() uint64 {
	if x != nil {
		return x.LineSidePortId
	}
	return 0
}

func (x *PortConnectorAttribute) GetSystemSideFailoverPortId() uint64 {
	if x != nil {
		return x.SystemSideFailoverPortId
	}
	return 0
}

func (x *PortConnectorAttribute) GetLineSideFailoverPortId() uint64 {
	if x != nil {
		return x.LineSideFailoverPortId
	}
	return 0
}

func (x *PortConnectorAttribute) GetFailoverMode() PortConnectorFailoverMode {
	if x != nil {
		return x.FailoverMode
	}
	return PortConnectorFailoverMode_PORT_CONNECTOR_FAILOVER_MODE_UNSPECIFIED
}

type PortPoolAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId           uint64 `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	BufferPoolId     uint64 `protobuf:"varint,2,opt,name=buffer_pool_id,json=bufferPoolId,proto3" json:"buffer_pool_id,omitempty"`
	QosWredProfileId uint64 `protobuf:"varint,3,opt,name=qos_wred_profile_id,json=qosWredProfileId,proto3" json:"qos_wred_profile_id,omitempty"`
}

func (x *PortPoolAttribute) Reset() {
	*x = PortPoolAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortPoolAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortPoolAttribute) ProtoMessage() {}

func (x *PortPoolAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortPoolAttribute.ProtoReflect.Descriptor instead.
func (*PortPoolAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{111}
}

func (x *PortPoolAttribute) GetPortId() uint64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *PortPoolAttribute) GetBufferPoolId() uint64 {
	if x != nil {
		return x.BufferPoolId
	}
	return 0
}

func (x *PortPoolAttribute) GetQosWredProfileId() uint64 {
	if x != nil {
		return x.QosWredProfileId
	}
	return 0
}

type Int32List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []int32 `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
}

func (x *Int32List) Reset() {
	*x = Int32List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32List) ProtoMessage() {}

func (x *Int32List) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32List.ProtoReflect.Descriptor instead.
func (*Int32List) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{112}
}

func (x *Int32List) GetList() []int32 {
	if x != nil {
		return x.List
	}
	return nil
}

type PortSerdesAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortId      uint64     `protobuf:"varint,1,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Preemphasis *Int32List `protobuf:"bytes,2,opt,name=preemphasis,proto3" json:"preemphasis,omitempty"`
	Idriver     *Int32List `protobuf:"bytes,3,opt,name=idriver,proto3" json:"idriver,omitempty"`
	Ipredriver  *Int32List `protobuf:"bytes,4,opt,name=ipredriver,proto3" json:"ipredriver,omitempty"`
	TxFirPre1   *Int32List `protobuf:"bytes,5,opt,name=tx_fir_pre1,json=txFirPre1,proto3" json:"tx_fir_pre1,omitempty"`
	TxFirPre2   *Int32List `protobuf:"bytes,6,opt,name=tx_fir_pre2,json=txFirPre2,proto3" json:"tx_fir_pre2,omitempty"`
	TxFirPre3   *Int32List `protobuf:"bytes,7,opt,name=tx_fir_pre3,json=txFirPre3,proto3" json:"tx_fir_pre3,omitempty"`
	TxFirMain   *Int32List `protobuf:"bytes,8,opt,name=tx_fir_main,json=txFirMain,proto3" json:"tx_fir_main,omitempty"`
	TxFirPost1  *Int32List `protobuf:"bytes,9,opt,name=tx_fir_post1,json=txFirPost1,proto3" json:"tx_fir_post1,omitempty"`
	TxFirPost2  *Int32List `protobuf:"bytes,10,opt,name=tx_fir_post2,json=txFirPost2,proto3" json:"tx_fir_post2,omitempty"`
	TxFirPost3  *Int32List `protobuf:"bytes,11,opt,name=tx_fir_post3,json=txFirPost3,proto3" json:"tx_fir_post3,omitempty"`
	TxFirAttn   *Int32List `protobuf:"bytes,12,opt,name=tx_fir_attn,json=txFirAttn,proto3" json:"tx_fir_attn,omitempty"`
}

func (x *PortSerdesAttribute) Reset() {
	*x = PortSerdesAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortSerdesAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortSerdesAttribute) ProtoMessage() {}

func (x *PortSerdesAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortSerdesAttribute.ProtoReflect.Descriptor instead.
func (*PortSerdesAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{113}
}

func (x *PortSerdesAttribute) GetPortId() uint64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *PortSerdesAttribute) GetPreemphasis() *Int32List {
	if x != nil {
		return x.Preemphasis
	}
	return nil
}

func (x *PortSerdesAttribute) GetIdriver() *Int32List {
	if x != nil {
		return x.Idriver
	}
	return nil
}

func (x *PortSerdesAttribute) GetIpredriver() *Int32List {
	if x != nil {
		return x.Ipredriver
	}
	return nil
}

func (x *PortSerdesAttribute) GetTxFirPre1() *Int32List {
	if x != nil {
		return x.TxFirPre1
	}
	return nil
}

func (x *PortSerdesAttribute) GetTxFirPre2() *Int32List {
	if x != nil {
		return x.TxFirPre2
	}
	return nil
}

func (x *PortSerdesAttribute) GetTxFirPre3() *Int32List {
	if x != nil {
		return x.TxFirPre3
	}
	return nil
}

func (x *PortSerdesAttribute) GetTxFirMain() *Int32List {
	if x != nil {
		return x.TxFirMain
	}
	return nil
}

func (x *PortSerdesAttribute) GetTxFirPost1() *Int32List {
	if x != nil {
		return x.TxFirPost1
	}
	return nil
}

func (x *PortSerdesAttribute) GetTxFirPost2() *Int32List {
	if x != nil {
		return x.TxFirPost2
	}
	return nil
}

func (x *PortSerdesAttribute) GetTxFirPost3() *Int32List {
	if x != nil {
		return x.TxFirPost3
	}
	return nil
}

func (x *PortSerdesAttribute) GetTxFirAttn() *Int32List {
	if x != nil {
		return x.TxFirAttn
	}
	return nil
}

type QosMapList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*QOSMap `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *QosMapList) Reset() {
	*x = QosMapList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosMapList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosMapList) ProtoMessage() {}

func (x *QosMapList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosMapList.ProtoReflect.Descriptor instead.
func (*QosMapList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{114}
}

func (x *QosMapList) GetList() []*QOSMap {
	if x != nil {
		return x.List
	}
	return nil
}

type QosMapAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           QosMapType  `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.QosMapType" json:"type,omitempty"`
	MapToValueList *QosMapList `protobuf:"bytes,2,opt,name=map_to_value_list,json=mapToValueList,proto3" json:"map_to_value_list,omitempty"`
}

func (x *QosMapAttribute) Reset() {
	*x = QosMapAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QosMapAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosMapAttribute) ProtoMessage() {}

func (x *QosMapAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosMapAttribute.ProtoReflect.Descriptor instead.
func (*QosMapAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{115}
}

func (x *QosMapAttribute) GetType() QosMapType {
	if x != nil {
		return x.Type
	}
	return QosMapType_QOS_MAP_TYPE_UNSPECIFIED
}

func (x *QosMapAttribute) GetMapToValueList() *QosMapList {
	if x != nil {
		return x.MapToValueList
	}
	return nil
}

type QueueAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                QueueType   `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.QueueType" json:"type,omitempty"`
	Port                uint64      `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Index               uint32      `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	ParentSchedulerNode uint64      `protobuf:"varint,4,opt,name=parent_scheduler_node,json=parentSchedulerNode,proto3" json:"parent_scheduler_node,omitempty"`
	WredProfileId       uint64      `protobuf:"varint,5,opt,name=wred_profile_id,json=wredProfileId,proto3" json:"wred_profile_id,omitempty"`
	BufferProfileId     uint64      `protobuf:"varint,6,opt,name=buffer_profile_id,json=bufferProfileId,proto3" json:"buffer_profile_id,omitempty"`
	SchedulerProfileId  uint64      `protobuf:"varint,7,opt,name=scheduler_profile_id,json=schedulerProfileId,proto3" json:"scheduler_profile_id,omitempty"`
	PauseStatus         bool        `protobuf:"varint,8,opt,name=pause_status,json=pauseStatus,proto3" json:"pause_status,omitempty"`
	EnablePfcDldr       bool        `protobuf:"varint,9,opt,name=enable_pfc_dldr,json=enablePfcDldr,proto3" json:"enable_pfc_dldr,omitempty"`
	PfcDlrInit          bool        `protobuf:"varint,10,opt,name=pfc_dlr_init,json=pfcDlrInit,proto3" json:"pfc_dlr_init,omitempty"`
	TamObject           *Uint64List `protobuf:"bytes,11,opt,name=tam_object,json=tamObject,proto3" json:"tam_object,omitempty"`
}

func (x *QueueAttribute) Reset() {
	*x = QueueAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueAttribute) ProtoMessage() {}

func (x *QueueAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueAttribute.ProtoReflect.Descriptor instead.
func (*QueueAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{116}
}

func (x *QueueAttribute) GetType() QueueType {
	if x != nil {
		return x.Type
	}
	return QueueType_QUEUE_TYPE_UNSPECIFIED
}

func (x *QueueAttribute) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *QueueAttribute) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *QueueAttribute) GetParentSchedulerNode() uint64 {
	if x != nil {
		return x.ParentSchedulerNode
	}
	return 0
}

func (x *QueueAttribute) GetWredProfileId() uint64 {
	if x != nil {
		return x.WredProfileId
	}
	return 0
}

func (x *QueueAttribute) GetBufferProfileId() uint64 {
	if x != nil {
		return x.BufferProfileId
	}
	return 0
}

func (x *QueueAttribute) GetSchedulerProfileId() uint64 {
	if x != nil {
		return x.SchedulerProfileId
	}
	return 0
}

func (x *QueueAttribute) GetPauseStatus() bool {
	if x != nil {
		return x.PauseStatus
	}
	return false
}

func (x *QueueAttribute) GetEnablePfcDldr() bool {
	if x != nil {
		return x.EnablePfcDldr
	}
	return false
}

func (x *QueueAttribute) GetPfcDlrInit() bool {
	if x != nil {
		return x.PfcDlrInit
	}
	return false
}

func (x *QueueAttribute) GetTamObject() *Uint64List {
	if x != nil {
		return x.TamObject
	}
	return nil
}

type RouterInterfaceAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualRouterId          uint64              `protobuf:"varint,1,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
	Type                     RouterInterfaceType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.RouterInterfaceType" json:"type,omitempty"`
	PortId                   uint64              `protobuf:"varint,3,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	VlanId                   uint64              `protobuf:"varint,4,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	OuterVlanId              uint32              `protobuf:"varint,5,opt,name=outer_vlan_id,json=outerVlanId,proto3" json:"outer_vlan_id,omitempty"`
	InnerVlanId              uint32              `protobuf:"varint,6,opt,name=inner_vlan_id,json=innerVlanId,proto3" json:"inner_vlan_id,omitempty"`
	BridgeId                 uint64              `protobuf:"varint,7,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	SrcMacAddress            []byte              `protobuf:"bytes,8,opt,name=src_mac_address,json=srcMacAddress,proto3" json:"src_mac_address,omitempty"`
	AdminV4State             bool                `protobuf:"varint,9,opt,name=admin_v4_state,json=adminV4State,proto3" json:"admin_v4_state,omitempty"`
	AdminV6State             bool                `protobuf:"varint,10,opt,name=admin_v6_state,json=adminV6State,proto3" json:"admin_v6_state,omitempty"`
	Mtu                      uint32              `protobuf:"varint,11,opt,name=mtu,proto3" json:"mtu,omitempty"`
	IngressAcl               uint64              `protobuf:"varint,12,opt,name=ingress_acl,json=ingressAcl,proto3" json:"ingress_acl,omitempty"`
	EgressAcl                uint64              `protobuf:"varint,13,opt,name=egress_acl,json=egressAcl,proto3" json:"egress_acl,omitempty"`
	NeighborMissPacketAction PacketAction        `protobuf:"varint,14,opt,name=neighbor_miss_packet_action,json=neighborMissPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"neighbor_miss_packet_action,omitempty"`
	V4McastEnable            bool                `protobuf:"varint,15,opt,name=v4_mcast_enable,json=v4McastEnable,proto3" json:"v4_mcast_enable,omitempty"`
	V6McastEnable            bool                `protobuf:"varint,16,opt,name=v6_mcast_enable,json=v6McastEnable,proto3" json:"v6_mcast_enable,omitempty"`
	LoopbackPacketAction     PacketAction        `protobuf:"varint,17,opt,name=loopback_packet_action,json=loopbackPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"loopback_packet_action,omitempty"`
	IsVirtual                bool                `protobuf:"varint,18,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual,omitempty"`
	NatZoneId                uint32              `protobuf:"varint,19,opt,name=nat_zone_id,json=natZoneId,proto3" json:"nat_zone_id,omitempty"`
	DisableDecrementTtl      bool                `protobuf:"varint,20,opt,name=disable_decrement_ttl,json=disableDecrementTtl,proto3" json:"disable_decrement_ttl,omitempty"`
	AdminMplsState           bool                `protobuf:"varint,21,opt,name=admin_mpls_state,json=adminMplsState,proto3" json:"admin_mpls_state,omitempty"`
}

func (x *RouterInterfaceAttribute) Reset() {
	*x = RouterInterfaceAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterInterfaceAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterInterfaceAttribute) ProtoMessage() {}

func (x *RouterInterfaceAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterInterfaceAttribute.ProtoReflect.Descriptor instead.
func (*RouterInterfaceAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{117}
}

func (x *RouterInterfaceAttribute) GetVirtualRouterId() uint64 {
	if x != nil {
		return x.VirtualRouterId
	}
	return 0
}

func (x *RouterInterfaceAttribute) GetType() RouterInterfaceType {
	if x != nil {
		return x.Type
	}
	return RouterInterfaceType_ROUTER_INTERFACE_TYPE_UNSPECIFIED
}

func (x *RouterInterfaceAttribute) GetPortId() uint64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *RouterInterfaceAttribute) GetVlanId() uint64 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *RouterInterfaceAttribute) GetOuterVlanId() uint32 {
	if x != nil {
		return x.OuterVlanId
	}
	return 0
}

func (x *RouterInterfaceAttribute) GetInnerVlanId() uint32 {
	if x != nil {
		return x.InnerVlanId
	}
	return 0
}

func (x *RouterInterfaceAttribute) GetBridgeId() uint64 {
	if x != nil {
		return x.BridgeId
	}
	return 0
}

func (x *RouterInterfaceAttribute) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *RouterInterfaceAttribute) GetAdminV4State() bool {
	if x != nil {
		return x.AdminV4State
	}
	return false
}

func (x *RouterInterfaceAttribute) GetAdminV6State() bool {
	if x != nil {
		return x.AdminV6State
	}
	return false
}

func (x *RouterInterfaceAttribute) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *RouterInterfaceAttribute) GetIngressAcl() uint64 {
	if x != nil {
		return x.IngressAcl
	}
	return 0
}

func (x *RouterInterfaceAttribute) GetEgressAcl() uint64 {
	if x != nil {
		return x.EgressAcl
	}
	return 0
}

func (x *RouterInterfaceAttribute) GetNeighborMissPacketAction() PacketAction {
	if x != nil {
		return x.NeighborMissPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *RouterInterfaceAttribute) GetV4McastEnable() bool {
	if x != nil {
		return x.V4McastEnable
	}
	return false
}

func (x *RouterInterfaceAttribute) GetV6McastEnable() bool {
	if x != nil {
		return x.V6McastEnable
	}
	return false
}

func (x *RouterInterfaceAttribute) GetLoopbackPacketAction() PacketAction {
	if x != nil {
		return x.LoopbackPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *RouterInterfaceAttribute) GetIsVirtual() bool {
	if x != nil {
		return x.IsVirtual
	}
	return false
}

func (x *RouterInterfaceAttribute) GetNatZoneId() uint32 {
	if x != nil {
		return x.NatZoneId
	}
	return 0
}

func (x *RouterInterfaceAttribute) GetDisableDecrementTtl() bool {
	if x != nil {
		return x.DisableDecrementTtl
	}
	return false
}

func (x *RouterInterfaceAttribute) GetAdminMplsState() bool {
	if x != nil {
		return x.AdminMplsState
	}
	return false
}

type RouteEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PacketAction PacketAction `protobuf:"varint,1,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"packet_action,omitempty"`
	UserTrapId   uint64       `protobuf:"varint,2,opt,name=user_trap_id,json=userTrapId,proto3" json:"user_trap_id,omitempty"`
	NextHopId    uint64       `protobuf:"varint,3,opt,name=next_hop_id,json=nextHopId,proto3" json:"next_hop_id,omitempty"`
	MetaData     uint32       `protobuf:"varint,4,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	IpAddrFamily IpAddrFamily `protobuf:"varint,5,opt,name=ip_addr_family,json=ipAddrFamily,proto3,enum=lemming.dataplane.sai.IpAddrFamily" json:"ip_addr_family,omitempty"`
	CounterId    uint64       `protobuf:"varint,6,opt,name=counter_id,json=counterId,proto3" json:"counter_id,omitempty"`
}

func (x *RouteEntryAttribute) Reset() {
	*x = RouteEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteEntryAttribute) ProtoMessage() {}

func (x *RouteEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteEntryAttribute.ProtoReflect.Descriptor instead.
func (*RouteEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{118}
}

func (x *RouteEntryAttribute) GetPacketAction() PacketAction {
	if x != nil {
		return x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *RouteEntryAttribute) GetUserTrapId() uint64 {
	if x != nil {
		return x.UserTrapId
	}
	return 0
}

func (x *RouteEntryAttribute) GetNextHopId() uint64 {
	if x != nil {
		return x.NextHopId
	}
	return 0
}

func (x *RouteEntryAttribute) GetMetaData() uint32 {
	if x != nil {
		return x.MetaData
	}
	return 0
}

func (x *RouteEntryAttribute) GetIpAddrFamily() IpAddrFamily {
	if x != nil {
		return x.IpAddrFamily
	}
	return IpAddrFamily_IP_ADDR_FAMILY_UNSPECIFIED
}

func (x *RouteEntryAttribute) GetCounterId() uint64 {
	if x != nil {
		return x.CounterId
	}
	return 0
}

type RpfGroupAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpfInterfaceCount uint32      `protobuf:"varint,1,opt,name=rpf_interface_count,json=rpfInterfaceCount,proto3" json:"rpf_interface_count,omitempty"`
	RpfMemberList     *Uint64List `protobuf:"bytes,2,opt,name=rpf_member_list,json=rpfMemberList,proto3" json:"rpf_member_list,omitempty"`
}

func (x *RpfGroupAttribute) Reset() {
	*x = RpfGroupAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpfGroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpfGroupAttribute) ProtoMessage() {}

func (x *RpfGroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpfGroupAttribute.ProtoReflect.Descriptor instead.
func (*RpfGroupAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{119}
}

func (x *RpfGroupAttribute) GetRpfInterfaceCount() uint32 {
	if x != nil {
		return x.RpfInterfaceCount
	}
	return 0
}

func (x *RpfGroupAttribute) GetRpfMemberList() *Uint64List {
	if x != nil {
		return x.RpfMemberList
	}
	return nil
}

type RpfGroupMemberAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpfGroupId     uint64 `protobuf:"varint,1,opt,name=rpf_group_id,json=rpfGroupId,proto3" json:"rpf_group_id,omitempty"`
	RpfInterfaceId uint64 `protobuf:"varint,2,opt,name=rpf_interface_id,json=rpfInterfaceId,proto3" json:"rpf_interface_id,omitempty"`
}

func (x *RpfGroupMemberAttribute) Reset() {
	*x = RpfGroupMemberAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpfGroupMemberAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpfGroupMemberAttribute) ProtoMessage() {}

func (x *RpfGroupMemberAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpfGroupMemberAttribute.ProtoReflect.Descriptor instead.
func (*RpfGroupMemberAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{120}
}

func (x *RpfGroupMemberAttribute) GetRpfGroupId() uint64 {
	if x != nil {
		return x.RpfGroupId
	}
	return 0
}

func (x *RpfGroupMemberAttribute) GetRpfInterfaceId() uint64 {
	if x != nil {
		return x.RpfInterfaceId
	}
	return 0
}

type SamplepacketAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SampleRate uint32           `protobuf:"varint,1,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
	Type       SamplepacketType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.SamplepacketType" json:"type,omitempty"`
	Mode       SamplepacketMode `protobuf:"varint,3,opt,name=mode,proto3,enum=lemming.dataplane.sai.SamplepacketMode" json:"mode,omitempty"`
}

func (x *SamplepacketAttribute) Reset() {
	*x = SamplepacketAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SamplepacketAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SamplepacketAttribute) ProtoMessage() {}

func (x *SamplepacketAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SamplepacketAttribute.ProtoReflect.Descriptor instead.
func (*SamplepacketAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{121}
}

func (x *SamplepacketAttribute) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *SamplepacketAttribute) GetType() SamplepacketType {
	if x != nil {
		return x.Type
	}
	return SamplepacketType_SAMPLEPACKET_TYPE_UNSPECIFIED
}

func (x *SamplepacketAttribute) GetMode() SamplepacketMode {
	if x != nil {
		return x.Mode
	}
	return SamplepacketMode_SAMPLEPACKET_MODE_UNSPECIFIED
}

type SchedulerAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulingType        SchedulingType `protobuf:"varint,1,opt,name=scheduling_type,json=schedulingType,proto3,enum=lemming.dataplane.sai.SchedulingType" json:"scheduling_type,omitempty"`
	SchedulingWeight      uint32         `protobuf:"varint,2,opt,name=scheduling_weight,json=schedulingWeight,proto3" json:"scheduling_weight,omitempty"`
	MeterType             MeterType      `protobuf:"varint,3,opt,name=meter_type,json=meterType,proto3,enum=lemming.dataplane.sai.MeterType" json:"meter_type,omitempty"`
	MinBandwidthRate      uint64         `protobuf:"varint,4,opt,name=min_bandwidth_rate,json=minBandwidthRate,proto3" json:"min_bandwidth_rate,omitempty"`
	MinBandwidthBurstRate uint64         `protobuf:"varint,5,opt,name=min_bandwidth_burst_rate,json=minBandwidthBurstRate,proto3" json:"min_bandwidth_burst_rate,omitempty"`
	MaxBandwidthRate      uint64         `protobuf:"varint,6,opt,name=max_bandwidth_rate,json=maxBandwidthRate,proto3" json:"max_bandwidth_rate,omitempty"`
	MaxBandwidthBurstRate uint64         `protobuf:"varint,7,opt,name=max_bandwidth_burst_rate,json=maxBandwidthBurstRate,proto3" json:"max_bandwidth_burst_rate,omitempty"`
}

func (x *SchedulerAttribute) Reset() {
	*x = SchedulerAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerAttribute) ProtoMessage() {}

func (x *SchedulerAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerAttribute.ProtoReflect.Descriptor instead.
func (*SchedulerAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{122}
}

func (x *SchedulerAttribute) GetSchedulingType() SchedulingType {
	if x != nil {
		return x.SchedulingType
	}
	return SchedulingType_SCHEDULING_TYPE_UNSPECIFIED
}

func (x *SchedulerAttribute) GetSchedulingWeight() uint32 {
	if x != nil {
		return x.SchedulingWeight
	}
	return 0
}

func (x *SchedulerAttribute) GetMeterType() MeterType {
	if x != nil {
		return x.MeterType
	}
	return MeterType_METER_TYPE_UNSPECIFIED
}

func (x *SchedulerAttribute) GetMinBandwidthRate() uint64 {
	if x != nil {
		return x.MinBandwidthRate
	}
	return 0
}

func (x *SchedulerAttribute) GetMinBandwidthBurstRate() uint64 {
	if x != nil {
		return x.MinBandwidthBurstRate
	}
	return 0
}

func (x *SchedulerAttribute) GetMaxBandwidthRate() uint64 {
	if x != nil {
		return x.MaxBandwidthRate
	}
	return 0
}

func (x *SchedulerAttribute) GetMaxBandwidthBurstRate() uint64 {
	if x != nil {
		return x.MaxBandwidthBurstRate
	}
	return 0
}

type SchedulerGroupAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChildCount         uint32      `protobuf:"varint,1,opt,name=child_count,json=childCount,proto3" json:"child_count,omitempty"`
	ChildList          *Uint64List `protobuf:"bytes,2,opt,name=child_list,json=childList,proto3" json:"child_list,omitempty"`
	PortId             uint64      `protobuf:"varint,3,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	Level              uint32      `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	MaxChilds          uint32      `protobuf:"varint,5,opt,name=max_childs,json=maxChilds,proto3" json:"max_childs,omitempty"`
	SchedulerProfileId uint64      `protobuf:"varint,6,opt,name=scheduler_profile_id,json=schedulerProfileId,proto3" json:"scheduler_profile_id,omitempty"`
	ParentNode         uint64      `protobuf:"varint,7,opt,name=parent_node,json=parentNode,proto3" json:"parent_node,omitempty"`
}

func (x *SchedulerGroupAttribute) Reset() {
	*x = SchedulerGroupAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerGroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerGroupAttribute) ProtoMessage() {}

func (x *SchedulerGroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerGroupAttribute.ProtoReflect.Descriptor instead.
func (*SchedulerGroupAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{123}
}

func (x *SchedulerGroupAttribute) GetChildCount() uint32 {
	if x != nil {
		return x.ChildCount
	}
	return 0
}

func (x *SchedulerGroupAttribute) GetChildList() *Uint64List {
	if x != nil {
		return x.ChildList
	}
	return nil
}

func (x *SchedulerGroupAttribute) GetPortId() uint64 {
	if x != nil {
		return x.PortId
	}
	return 0
}

func (x *SchedulerGroupAttribute) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *SchedulerGroupAttribute) GetMaxChilds() uint32 {
	if x != nil {
		return x.MaxChilds
	}
	return 0
}

func (x *SchedulerGroupAttribute) GetSchedulerProfileId() uint64 {
	if x != nil {
		return x.SchedulerProfileId
	}
	return 0
}

func (x *SchedulerGroupAttribute) GetParentNode() uint64 {
	if x != nil {
		return x.ParentNode
	}
	return 0
}

type TlvEntryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TLVEntry `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TlvEntryList) Reset() {
	*x = TlvEntryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlvEntryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlvEntryList) ProtoMessage() {}

func (x *TlvEntryList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlvEntryList.ProtoReflect.Descriptor instead.
func (*TlvEntryList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{124}
}

func (x *TlvEntryList) GetList() []*TLVEntry {
	if x != nil {
		return x.List
	}
	return nil
}

type Srv6SidlistAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        Srv6SidlistType `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.Srv6SidlistType" json:"type,omitempty"`
	TlvList     *TlvEntryList   `protobuf:"bytes,2,opt,name=tlv_list,json=tlvList,proto3" json:"tlv_list,omitempty"`
	SegmentList *BytesList      `protobuf:"bytes,3,opt,name=segment_list,json=segmentList,proto3" json:"segment_list,omitempty"`
}

func (x *Srv6SidlistAttribute) Reset() {
	*x = Srv6SidlistAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Srv6SidlistAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Srv6SidlistAttribute) ProtoMessage() {}

func (x *Srv6SidlistAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Srv6SidlistAttribute.ProtoReflect.Descriptor instead.
func (*Srv6SidlistAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{125}
}

func (x *Srv6SidlistAttribute) GetType() Srv6SidlistType {
	if x != nil {
		return x.Type
	}
	return Srv6SidlistType_SRV6_SIDLIST_TYPE_UNSPECIFIED
}

func (x *Srv6SidlistAttribute) GetTlvList() *TlvEntryList {
	if x != nil {
		return x.TlvList
	}
	return nil
}

func (x *Srv6SidlistAttribute) GetSegmentList() *BytesList {
	if x != nil {
		return x.SegmentList
	}
	return nil
}

type StpAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanList *Uint32List `protobuf:"bytes,1,opt,name=vlan_list,json=vlanList,proto3" json:"vlan_list,omitempty"`
	BridgeId uint64      `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	PortList *Uint64List `protobuf:"bytes,3,opt,name=port_list,json=portList,proto3" json:"port_list,omitempty"`
}

func (x *StpAttribute) Reset() {
	*x = StpAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StpAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StpAttribute) ProtoMessage() {}

func (x *StpAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StpAttribute.ProtoReflect.Descriptor instead.
func (*StpAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{126}
}

func (x *StpAttribute) GetVlanList() *Uint32List {
	if x != nil {
		return x.VlanList
	}
	return nil
}

func (x *StpAttribute) GetBridgeId() uint64 {
	if x != nil {
		return x.BridgeId
	}
	return 0
}

func (x *StpAttribute) GetPortList() *Uint64List {
	if x != nil {
		return x.PortList
	}
	return nil
}

type StpPortAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stp        uint64       `protobuf:"varint,1,opt,name=stp,proto3" json:"stp,omitempty"`
	BridgePort uint64       `protobuf:"varint,2,opt,name=bridge_port,json=bridgePort,proto3" json:"bridge_port,omitempty"`
	State      StpPortState `protobuf:"varint,3,opt,name=state,proto3,enum=lemming.dataplane.sai.StpPortState" json:"state,omitempty"`
}

func (x *StpPortAttribute) Reset() {
	*x = StpPortAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StpPortAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StpPortAttribute) ProtoMessage() {}

func (x *StpPortAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StpPortAttribute.ProtoReflect.Descriptor instead.
func (*StpPortAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{127}
}

func (x *StpPortAttribute) GetStp() uint64 {
	if x != nil {
		return x.Stp
	}
	return 0
}

func (x *StpPortAttribute) GetBridgePort() uint64 {
	if x != nil {
		return x.BridgePort
	}
	return 0
}

func (x *StpPortAttribute) GetState() StpPortState {
	if x != nil {
		return x.State
	}
	return StpPortState_STP_PORT_STATE_UNSPECIFIED
}

type AclResourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ACLResource `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AclResourceList) Reset() {
	*x = AclResourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclResourceList) ProtoMessage() {}

func (x *AclResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclResourceList.ProtoReflect.Descriptor instead.
func (*AclResourceList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{128}
}

func (x *AclResourceList) GetList() []*ACLResource {
	if x != nil {
		return x.List
	}
	return nil
}

type TlvTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []TlvType `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.TlvType" json:"list,omitempty"`
}

func (x *TlvTypeList) Reset() {
	*x = TlvTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlvTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlvTypeList) ProtoMessage() {}

func (x *TlvTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlvTypeList.ProtoReflect.Descriptor instead.
func (*TlvTypeList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{129}
}

func (x *TlvTypeList) GetList() []TlvType {
	if x != nil {
		return x.List
	}
	return nil
}

type ObjectTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []ObjectType `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.ObjectType" json:"list,omitempty"`
}

func (x *ObjectTypeList) Reset() {
	*x = ObjectTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectTypeList) ProtoMessage() {}

func (x *ObjectTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectTypeList.ProtoReflect.Descriptor instead.
func (*ObjectTypeList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{130}
}

func (x *ObjectTypeList) GetList() []ObjectType {
	if x != nil {
		return x.List
	}
	return nil
}

type BfdSessionOffloadTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []BfdSessionOffloadType `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.BfdSessionOffloadType" json:"list,omitempty"`
}

func (x *BfdSessionOffloadTypeList) Reset() {
	*x = BfdSessionOffloadTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BfdSessionOffloadTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfdSessionOffloadTypeList) ProtoMessage() {}

func (x *BfdSessionOffloadTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfdSessionOffloadTypeList.ProtoReflect.Descriptor instead.
func (*BfdSessionOffloadTypeList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{131}
}

func (x *BfdSessionOffloadTypeList) GetList() []BfdSessionOffloadType {
	if x != nil {
		return x.List
	}
	return nil
}

type StatsModeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []StatsMode `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.StatsMode" json:"list,omitempty"`
}

func (x *StatsModeList) Reset() {
	*x = StatsModeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsModeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsModeList) ProtoMessage() {}

func (x *StatsModeList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsModeList.ProtoReflect.Descriptor instead.
func (*StatsModeList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{132}
}

func (x *StatsModeList) GetList() []StatsMode {
	if x != nil {
		return x.List
	}
	return nil
}

type SystemPortConfigList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*SystemPortConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SystemPortConfigList) Reset() {
	*x = SystemPortConfigList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemPortConfigList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemPortConfigList) ProtoMessage() {}

func (x *SystemPortConfigList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemPortConfigList.ProtoReflect.Descriptor instead.
func (*SystemPortConfigList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{133}
}

func (x *SystemPortConfigList) GetList() []*SystemPortConfig {
	if x != nil {
		return x.List
	}
	return nil
}

type SwitchAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfActivePorts                            uint32                        `protobuf:"varint,1,opt,name=number_of_active_ports,json=numberOfActivePorts,proto3" json:"number_of_active_ports,omitempty"`
	MaxNumberOfSupportedPorts                      uint32                        `protobuf:"varint,2,opt,name=max_number_of_supported_ports,json=maxNumberOfSupportedPorts,proto3" json:"max_number_of_supported_ports,omitempty"`
	PortList                                       *Uint64List                   `protobuf:"bytes,3,opt,name=port_list,json=portList,proto3" json:"port_list,omitempty"`
	PortMaxMtu                                     uint32                        `protobuf:"varint,4,opt,name=port_max_mtu,json=portMaxMtu,proto3" json:"port_max_mtu,omitempty"`
	CpuPort                                        uint64                        `protobuf:"varint,5,opt,name=cpu_port,json=cpuPort,proto3" json:"cpu_port,omitempty"`
	MaxVirtualRouters                              uint32                        `protobuf:"varint,6,opt,name=max_virtual_routers,json=maxVirtualRouters,proto3" json:"max_virtual_routers,omitempty"`
	FdbTableSize                                   uint32                        `protobuf:"varint,7,opt,name=fdb_table_size,json=fdbTableSize,proto3" json:"fdb_table_size,omitempty"`
	L3NeighborTableSize                            uint32                        `protobuf:"varint,8,opt,name=l3_neighbor_table_size,json=l3NeighborTableSize,proto3" json:"l3_neighbor_table_size,omitempty"`
	L3RouteTableSize                               uint32                        `protobuf:"varint,9,opt,name=l3_route_table_size,json=l3RouteTableSize,proto3" json:"l3_route_table_size,omitempty"`
	LagMembers                                     uint32                        `protobuf:"varint,10,opt,name=lag_members,json=lagMembers,proto3" json:"lag_members,omitempty"`
	NumberOfLags                                   uint32                        `protobuf:"varint,11,opt,name=number_of_lags,json=numberOfLags,proto3" json:"number_of_lags,omitempty"`
	EcmpMembers                                    uint32                        `protobuf:"varint,12,opt,name=ecmp_members,json=ecmpMembers,proto3" json:"ecmp_members,omitempty"`
	NumberOfEcmpGroups                             uint32                        `protobuf:"varint,13,opt,name=number_of_ecmp_groups,json=numberOfEcmpGroups,proto3" json:"number_of_ecmp_groups,omitempty"`
	NumberOfUnicastQueues                          uint32                        `protobuf:"varint,14,opt,name=number_of_unicast_queues,json=numberOfUnicastQueues,proto3" json:"number_of_unicast_queues,omitempty"`
	NumberOfMulticastQueues                        uint32                        `protobuf:"varint,15,opt,name=number_of_multicast_queues,json=numberOfMulticastQueues,proto3" json:"number_of_multicast_queues,omitempty"`
	NumberOfQueues                                 uint32                        `protobuf:"varint,16,opt,name=number_of_queues,json=numberOfQueues,proto3" json:"number_of_queues,omitempty"`
	NumberOfCpuQueues                              uint32                        `protobuf:"varint,17,opt,name=number_of_cpu_queues,json=numberOfCpuQueues,proto3" json:"number_of_cpu_queues,omitempty"`
	OnLinkRouteSupported                           bool                          `protobuf:"varint,18,opt,name=on_link_route_supported,json=onLinkRouteSupported,proto3" json:"on_link_route_supported,omitempty"`
	OperStatus                                     SwitchOperStatus              `protobuf:"varint,19,opt,name=oper_status,json=operStatus,proto3,enum=lemming.dataplane.sai.SwitchOperStatus" json:"oper_status,omitempty"`
	MaxNumberOfTempSensors                         uint32                        `protobuf:"varint,20,opt,name=max_number_of_temp_sensors,json=maxNumberOfTempSensors,proto3" json:"max_number_of_temp_sensors,omitempty"`
	TempList                                       *Int32List                    `protobuf:"bytes,21,opt,name=temp_list,json=tempList,proto3" json:"temp_list,omitempty"`
	MaxTemp                                        uint32                        `protobuf:"varint,22,opt,name=max_temp,json=maxTemp,proto3" json:"max_temp,omitempty"`
	AverageTemp                                    uint32                        `protobuf:"varint,23,opt,name=average_temp,json=averageTemp,proto3" json:"average_temp,omitempty"`
	AclTableMinimumPriority                        uint32                        `protobuf:"varint,24,opt,name=acl_table_minimum_priority,json=aclTableMinimumPriority,proto3" json:"acl_table_minimum_priority,omitempty"`
	AclTableMaximumPriority                        uint32                        `protobuf:"varint,25,opt,name=acl_table_maximum_priority,json=aclTableMaximumPriority,proto3" json:"acl_table_maximum_priority,omitempty"`
	AclEntryMinimumPriority                        uint32                        `protobuf:"varint,26,opt,name=acl_entry_minimum_priority,json=aclEntryMinimumPriority,proto3" json:"acl_entry_minimum_priority,omitempty"`
	AclEntryMaximumPriority                        uint32                        `protobuf:"varint,27,opt,name=acl_entry_maximum_priority,json=aclEntryMaximumPriority,proto3" json:"acl_entry_maximum_priority,omitempty"`
	AclTableGroupMinimumPriority                   uint32                        `protobuf:"varint,28,opt,name=acl_table_group_minimum_priority,json=aclTableGroupMinimumPriority,proto3" json:"acl_table_group_minimum_priority,omitempty"`
	AclTableGroupMaximumPriority                   uint32                        `protobuf:"varint,29,opt,name=acl_table_group_maximum_priority,json=aclTableGroupMaximumPriority,proto3" json:"acl_table_group_maximum_priority,omitempty"`
	FdbDstUserMetaDataRange                        *Uint32Range                  `protobuf:"bytes,30,opt,name=fdb_dst_user_meta_data_range,json=fdbDstUserMetaDataRange,proto3" json:"fdb_dst_user_meta_data_range,omitempty"`
	RouteDstUserMetaDataRange                      *Uint32Range                  `protobuf:"bytes,31,opt,name=route_dst_user_meta_data_range,json=routeDstUserMetaDataRange,proto3" json:"route_dst_user_meta_data_range,omitempty"`
	NeighborDstUserMetaDataRange                   *Uint32Range                  `protobuf:"bytes,32,opt,name=neighbor_dst_user_meta_data_range,json=neighborDstUserMetaDataRange,proto3" json:"neighbor_dst_user_meta_data_range,omitempty"`
	PortUserMetaDataRange                          *Uint32Range                  `protobuf:"bytes,33,opt,name=port_user_meta_data_range,json=portUserMetaDataRange,proto3" json:"port_user_meta_data_range,omitempty"`
	VlanUserMetaDataRange                          *Uint32Range                  `protobuf:"bytes,34,opt,name=vlan_user_meta_data_range,json=vlanUserMetaDataRange,proto3" json:"vlan_user_meta_data_range,omitempty"`
	AclUserMetaDataRange                           *Uint32Range                  `protobuf:"bytes,35,opt,name=acl_user_meta_data_range,json=aclUserMetaDataRange,proto3" json:"acl_user_meta_data_range,omitempty"`
	AclUserTrapIdRange                             *Uint32Range                  `protobuf:"bytes,36,opt,name=acl_user_trap_id_range,json=aclUserTrapIdRange,proto3" json:"acl_user_trap_id_range,omitempty"`
	DefaultVlanId                                  uint64                        `protobuf:"varint,37,opt,name=default_vlan_id,json=defaultVlanId,proto3" json:"default_vlan_id,omitempty"`
	DefaultStpInstId                               uint64                        `protobuf:"varint,38,opt,name=default_stp_inst_id,json=defaultStpInstId,proto3" json:"default_stp_inst_id,omitempty"`
	MaxStpInstance                                 uint32                        `protobuf:"varint,39,opt,name=max_stp_instance,json=maxStpInstance,proto3" json:"max_stp_instance,omitempty"`
	DefaultVirtualRouterId                         uint64                        `protobuf:"varint,40,opt,name=default_virtual_router_id,json=defaultVirtualRouterId,proto3" json:"default_virtual_router_id,omitempty"`
	DefaultOverrideVirtualRouterId                 uint64                        `protobuf:"varint,41,opt,name=default_override_virtual_router_id,json=defaultOverrideVirtualRouterId,proto3" json:"default_override_virtual_router_id,omitempty"`
	Default_1QBridgeId                             uint64                        `protobuf:"varint,42,opt,name=default_1q_bridge_id,json=default1qBridgeId,proto3" json:"default_1q_bridge_id,omitempty"`
	IngressAcl                                     uint64                        `protobuf:"varint,43,opt,name=ingress_acl,json=ingressAcl,proto3" json:"ingress_acl,omitempty"`
	EgressAcl                                      uint64                        `protobuf:"varint,44,opt,name=egress_acl,json=egressAcl,proto3" json:"egress_acl,omitempty"`
	QosMaxNumberOfTrafficClasses                   uint32                        `protobuf:"varint,45,opt,name=qos_max_number_of_traffic_classes,json=qosMaxNumberOfTrafficClasses,proto3" json:"qos_max_number_of_traffic_classes,omitempty"`
	QosMaxNumberOfSchedulerGroupHierarchyLevels    uint32                        `protobuf:"varint,46,opt,name=qos_max_number_of_scheduler_group_hierarchy_levels,json=qosMaxNumberOfSchedulerGroupHierarchyLevels,proto3" json:"qos_max_number_of_scheduler_group_hierarchy_levels,omitempty"`
	QosMaxNumberOfSchedulerGroupsPerHierarchyLevel *Uint32List                   `protobuf:"bytes,47,opt,name=qos_max_number_of_scheduler_groups_per_hierarchy_level,json=qosMaxNumberOfSchedulerGroupsPerHierarchyLevel,proto3" json:"qos_max_number_of_scheduler_groups_per_hierarchy_level,omitempty"`
	QosMaxNumberOfChildsPerSchedulerGroup          uint32                        `protobuf:"varint,48,opt,name=qos_max_number_of_childs_per_scheduler_group,json=qosMaxNumberOfChildsPerSchedulerGroup,proto3" json:"qos_max_number_of_childs_per_scheduler_group,omitempty"`
	TotalBufferSize                                uint64                        `protobuf:"varint,49,opt,name=total_buffer_size,json=totalBufferSize,proto3" json:"total_buffer_size,omitempty"`
	IngressBufferPoolNum                           uint32                        `protobuf:"varint,50,opt,name=ingress_buffer_pool_num,json=ingressBufferPoolNum,proto3" json:"ingress_buffer_pool_num,omitempty"`
	EgressBufferPoolNum                            uint32                        `protobuf:"varint,51,opt,name=egress_buffer_pool_num,json=egressBufferPoolNum,proto3" json:"egress_buffer_pool_num,omitempty"`
	AvailableIpv4RouteEntry                        uint32                        `protobuf:"varint,52,opt,name=available_ipv4_route_entry,json=availableIpv4RouteEntry,proto3" json:"available_ipv4_route_entry,omitempty"`
	AvailableIpv6RouteEntry                        uint32                        `protobuf:"varint,53,opt,name=available_ipv6_route_entry,json=availableIpv6RouteEntry,proto3" json:"available_ipv6_route_entry,omitempty"`
	AvailableIpv4NexthopEntry                      uint32                        `protobuf:"varint,54,opt,name=available_ipv4_nexthop_entry,json=availableIpv4NexthopEntry,proto3" json:"available_ipv4_nexthop_entry,omitempty"`
	AvailableIpv6NexthopEntry                      uint32                        `protobuf:"varint,55,opt,name=available_ipv6_nexthop_entry,json=availableIpv6NexthopEntry,proto3" json:"available_ipv6_nexthop_entry,omitempty"`
	AvailableIpv4NeighborEntry                     uint32                        `protobuf:"varint,56,opt,name=available_ipv4_neighbor_entry,json=availableIpv4NeighborEntry,proto3" json:"available_ipv4_neighbor_entry,omitempty"`
	AvailableIpv6NeighborEntry                     uint32                        `protobuf:"varint,57,opt,name=available_ipv6_neighbor_entry,json=availableIpv6NeighborEntry,proto3" json:"available_ipv6_neighbor_entry,omitempty"`
	AvailableNextHopGroupEntry                     uint32                        `protobuf:"varint,58,opt,name=available_next_hop_group_entry,json=availableNextHopGroupEntry,proto3" json:"available_next_hop_group_entry,omitempty"`
	AvailableNextHopGroupMemberEntry               uint32                        `protobuf:"varint,59,opt,name=available_next_hop_group_member_entry,json=availableNextHopGroupMemberEntry,proto3" json:"available_next_hop_group_member_entry,omitempty"`
	AvailableFdbEntry                              uint32                        `protobuf:"varint,60,opt,name=available_fdb_entry,json=availableFdbEntry,proto3" json:"available_fdb_entry,omitempty"`
	AvailableL2McEntry                             uint32                        `protobuf:"varint,61,opt,name=available_l2mc_entry,json=availableL2mcEntry,proto3" json:"available_l2mc_entry,omitempty"`
	AvailableIpmcEntry                             uint32                        `protobuf:"varint,62,opt,name=available_ipmc_entry,json=availableIpmcEntry,proto3" json:"available_ipmc_entry,omitempty"`
	AvailableSnatEntry                             uint32                        `protobuf:"varint,63,opt,name=available_snat_entry,json=availableSnatEntry,proto3" json:"available_snat_entry,omitempty"`
	AvailableDnatEntry                             uint32                        `protobuf:"varint,64,opt,name=available_dnat_entry,json=availableDnatEntry,proto3" json:"available_dnat_entry,omitempty"`
	AvailableDoubleNatEntry                        uint32                        `protobuf:"varint,65,opt,name=available_double_nat_entry,json=availableDoubleNatEntry,proto3" json:"available_double_nat_entry,omitempty"`
	AvailableAclTable                              *AclResourceList              `protobuf:"bytes,66,opt,name=available_acl_table,json=availableAclTable,proto3" json:"available_acl_table,omitempty"`
	AvailableAclTableGroup                         *AclResourceList              `protobuf:"bytes,67,opt,name=available_acl_table_group,json=availableAclTableGroup,proto3" json:"available_acl_table_group,omitempty"`
	AvailableMySidEntry                            uint32                        `protobuf:"varint,68,opt,name=available_my_sid_entry,json=availableMySidEntry,proto3" json:"available_my_sid_entry,omitempty"`
	DefaultTrapGroup                               uint64                        `protobuf:"varint,69,opt,name=default_trap_group,json=defaultTrapGroup,proto3" json:"default_trap_group,omitempty"`
	EcmpHash                                       uint64                        `protobuf:"varint,70,opt,name=ecmp_hash,json=ecmpHash,proto3" json:"ecmp_hash,omitempty"`
	LagHash                                        uint64                        `protobuf:"varint,71,opt,name=lag_hash,json=lagHash,proto3" json:"lag_hash,omitempty"`
	RestartWarm                                    bool                          `protobuf:"varint,72,opt,name=restart_warm,json=restartWarm,proto3" json:"restart_warm,omitempty"`
	WarmRecover                                    bool                          `protobuf:"varint,73,opt,name=warm_recover,json=warmRecover,proto3" json:"warm_recover,omitempty"`
	RestartType                                    SwitchRestartType             `protobuf:"varint,74,opt,name=restart_type,json=restartType,proto3,enum=lemming.dataplane.sai.SwitchRestartType" json:"restart_type,omitempty"`
	MinPlannedRestartInterval                      uint32                        `protobuf:"varint,75,opt,name=min_planned_restart_interval,json=minPlannedRestartInterval,proto3" json:"min_planned_restart_interval,omitempty"`
	NvStorageSize                                  uint64                        `protobuf:"varint,76,opt,name=nv_storage_size,json=nvStorageSize,proto3" json:"nv_storage_size,omitempty"`
	MaxAclActionCount                              uint32                        `protobuf:"varint,77,opt,name=max_acl_action_count,json=maxAclActionCount,proto3" json:"max_acl_action_count,omitempty"`
	MaxAclRangeCount                               uint32                        `protobuf:"varint,78,opt,name=max_acl_range_count,json=maxAclRangeCount,proto3" json:"max_acl_range_count,omitempty"`
	AclCapability                                  *ACLCapability                `protobuf:"bytes,79,opt,name=acl_capability,json=aclCapability,proto3" json:"acl_capability,omitempty"`
	McastSnoopingCapability                        SwitchMcastSnoopingCapability `protobuf:"varint,80,opt,name=mcast_snooping_capability,json=mcastSnoopingCapability,proto3,enum=lemming.dataplane.sai.SwitchMcastSnoopingCapability" json:"mcast_snooping_capability,omitempty"`
	SwitchingMode                                  SwitchSwitchingMode           `protobuf:"varint,81,opt,name=switching_mode,json=switchingMode,proto3,enum=lemming.dataplane.sai.SwitchSwitchingMode" json:"switching_mode,omitempty"`
	BcastCpuFloodEnable                            bool                          `protobuf:"varint,82,opt,name=bcast_cpu_flood_enable,json=bcastCpuFloodEnable,proto3" json:"bcast_cpu_flood_enable,omitempty"`
	McastCpuFloodEnable                            bool                          `protobuf:"varint,83,opt,name=mcast_cpu_flood_enable,json=mcastCpuFloodEnable,proto3" json:"mcast_cpu_flood_enable,omitempty"`
	SrcMacAddress                                  []byte                        `protobuf:"bytes,84,opt,name=src_mac_address,json=srcMacAddress,proto3" json:"src_mac_address,omitempty"`
	MaxLearnedAddresses                            uint32                        `protobuf:"varint,85,opt,name=max_learned_addresses,json=maxLearnedAddresses,proto3" json:"max_learned_addresses,omitempty"`
	FdbAgingTime                                   uint32                        `protobuf:"varint,86,opt,name=fdb_aging_time,json=fdbAgingTime,proto3" json:"fdb_aging_time,omitempty"`
	FdbUnicastMissPacketAction                     PacketAction                  `protobuf:"varint,87,opt,name=fdb_unicast_miss_packet_action,json=fdbUnicastMissPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"fdb_unicast_miss_packet_action,omitempty"`
	FdbBroadcastMissPacketAction                   PacketAction                  `protobuf:"varint,88,opt,name=fdb_broadcast_miss_packet_action,json=fdbBroadcastMissPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"fdb_broadcast_miss_packet_action,omitempty"`
	FdbMulticastMissPacketAction                   PacketAction                  `protobuf:"varint,89,opt,name=fdb_multicast_miss_packet_action,json=fdbMulticastMissPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"fdb_multicast_miss_packet_action,omitempty"`
	EcmpDefaultHashAlgorithm                       HashAlgorithm                 `protobuf:"varint,90,opt,name=ecmp_default_hash_algorithm,json=ecmpDefaultHashAlgorithm,proto3,enum=lemming.dataplane.sai.HashAlgorithm" json:"ecmp_default_hash_algorithm,omitempty"`
	EcmpDefaultHashSeed                            uint32                        `protobuf:"varint,91,opt,name=ecmp_default_hash_seed,json=ecmpDefaultHashSeed,proto3" json:"ecmp_default_hash_seed,omitempty"`
	EcmpDefaultHashOffset                          uint32                        `protobuf:"varint,92,opt,name=ecmp_default_hash_offset,json=ecmpDefaultHashOffset,proto3" json:"ecmp_default_hash_offset,omitempty"`
	EcmpDefaultSymmetricHash                       bool                          `protobuf:"varint,93,opt,name=ecmp_default_symmetric_hash,json=ecmpDefaultSymmetricHash,proto3" json:"ecmp_default_symmetric_hash,omitempty"`
	EcmpHashIpv4                                   uint64                        `protobuf:"varint,94,opt,name=ecmp_hash_ipv4,json=ecmpHashIpv4,proto3" json:"ecmp_hash_ipv4,omitempty"`
	EcmpHashIpv4InIpv4                             uint64                        `protobuf:"varint,95,opt,name=ecmp_hash_ipv4_in_ipv4,json=ecmpHashIpv4InIpv4,proto3" json:"ecmp_hash_ipv4_in_ipv4,omitempty"`
	EcmpHashIpv6                                   uint64                        `protobuf:"varint,96,opt,name=ecmp_hash_ipv6,json=ecmpHashIpv6,proto3" json:"ecmp_hash_ipv6,omitempty"`
	LagDefaultHashAlgorithm                        HashAlgorithm                 `protobuf:"varint,97,opt,name=lag_default_hash_algorithm,json=lagDefaultHashAlgorithm,proto3,enum=lemming.dataplane.sai.HashAlgorithm" json:"lag_default_hash_algorithm,omitempty"`
	LagDefaultHashSeed                             uint32                        `protobuf:"varint,98,opt,name=lag_default_hash_seed,json=lagDefaultHashSeed,proto3" json:"lag_default_hash_seed,omitempty"`
	LagDefaultHashOffset                           uint32                        `protobuf:"varint,99,opt,name=lag_default_hash_offset,json=lagDefaultHashOffset,proto3" json:"lag_default_hash_offset,omitempty"`
	LagDefaultSymmetricHash                        bool                          `protobuf:"varint,100,opt,name=lag_default_symmetric_hash,json=lagDefaultSymmetricHash,proto3" json:"lag_default_symmetric_hash,omitempty"`
	LagHashIpv4                                    uint64                        `protobuf:"varint,101,opt,name=lag_hash_ipv4,json=lagHashIpv4,proto3" json:"lag_hash_ipv4,omitempty"`
	LagHashIpv4InIpv4                              uint64                        `protobuf:"varint,102,opt,name=lag_hash_ipv4_in_ipv4,json=lagHashIpv4InIpv4,proto3" json:"lag_hash_ipv4_in_ipv4,omitempty"`
	LagHashIpv6                                    uint64                        `protobuf:"varint,103,opt,name=lag_hash_ipv6,json=lagHashIpv6,proto3" json:"lag_hash_ipv6,omitempty"`
	CounterRefreshInterval                         uint32                        `protobuf:"varint,104,opt,name=counter_refresh_interval,json=counterRefreshInterval,proto3" json:"counter_refresh_interval,omitempty"`
	QosDefaultTc                                   uint32                        `protobuf:"varint,105,opt,name=qos_default_tc,json=qosDefaultTc,proto3" json:"qos_default_tc,omitempty"`
	QosDot1PToTcMap                                uint64                        `protobuf:"varint,106,opt,name=qos_dot1p_to_tc_map,json=qosDot1pToTcMap,proto3" json:"qos_dot1p_to_tc_map,omitempty"`
	QosDot1PToColorMap                             uint64                        `protobuf:"varint,107,opt,name=qos_dot1p_to_color_map,json=qosDot1pToColorMap,proto3" json:"qos_dot1p_to_color_map,omitempty"`
	QosDscpToTcMap                                 uint64                        `protobuf:"varint,108,opt,name=qos_dscp_to_tc_map,json=qosDscpToTcMap,proto3" json:"qos_dscp_to_tc_map,omitempty"`
	QosDscpToColorMap                              uint64                        `protobuf:"varint,109,opt,name=qos_dscp_to_color_map,json=qosDscpToColorMap,proto3" json:"qos_dscp_to_color_map,omitempty"`
	QosTcToQueueMap                                uint64                        `protobuf:"varint,110,opt,name=qos_tc_to_queue_map,json=qosTcToQueueMap,proto3" json:"qos_tc_to_queue_map,omitempty"`
	QosTcAndColorToDot1PMap                        uint64                        `protobuf:"varint,111,opt,name=qos_tc_and_color_to_dot1p_map,json=qosTcAndColorToDot1pMap,proto3" json:"qos_tc_and_color_to_dot1p_map,omitempty"`
	QosTcAndColorToDscpMap                         uint64                        `protobuf:"varint,112,opt,name=qos_tc_and_color_to_dscp_map,json=qosTcAndColorToDscpMap,proto3" json:"qos_tc_and_color_to_dscp_map,omitempty"`
	SwitchShellEnable                              bool                          `protobuf:"varint,113,opt,name=switch_shell_enable,json=switchShellEnable,proto3" json:"switch_shell_enable,omitempty"`
	SwitchProfileId                                uint32                        `protobuf:"varint,114,opt,name=switch_profile_id,json=switchProfileId,proto3" json:"switch_profile_id,omitempty"`
	SwitchHardwareInfo                             *Int32List                    `protobuf:"bytes,115,opt,name=switch_hardware_info,json=switchHardwareInfo,proto3" json:"switch_hardware_info,omitempty"`
	FirmwarePathName                               *Int32List                    `protobuf:"bytes,116,opt,name=firmware_path_name,json=firmwarePathName,proto3" json:"firmware_path_name,omitempty"`
	InitSwitch                                     bool                          `protobuf:"varint,117,opt,name=init_switch,json=initSwitch,proto3" json:"init_switch,omitempty"`
	FastApiEnable                                  bool                          `protobuf:"varint,118,opt,name=fast_api_enable,json=fastApiEnable,proto3" json:"fast_api_enable,omitempty"`
	MirrorTc                                       uint32                        `protobuf:"varint,119,opt,name=mirror_tc,json=mirrorTc,proto3" json:"mirror_tc,omitempty"`
	AclStageIngress                                *ACLCapability                `protobuf:"bytes,120,opt,name=acl_stage_ingress,json=aclStageIngress,proto3" json:"acl_stage_ingress,omitempty"`
	AclStageEgress                                 *ACLCapability                `protobuf:"bytes,121,opt,name=acl_stage_egress,json=aclStageEgress,proto3" json:"acl_stage_egress,omitempty"`
	Srv6MaxSidDepth                                uint32                        `protobuf:"varint,122,opt,name=srv6_max_sid_depth,json=srv6MaxSidDepth,proto3" json:"srv6_max_sid_depth,omitempty"`
	Srv6TlvType                                    *TlvTypeList                  `protobuf:"bytes,123,opt,name=srv6_tlv_type,json=srv6TlvType,proto3" json:"srv6_tlv_type,omitempty"`
	QosNumLosslessQueues                           uint32                        `protobuf:"varint,124,opt,name=qos_num_lossless_queues,json=qosNumLosslessQueues,proto3" json:"qos_num_lossless_queues,omitempty"`
	PfcDlrPacketAction                             PacketAction                  `protobuf:"varint,125,opt,name=pfc_dlr_packet_action,json=pfcDlrPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"pfc_dlr_packet_action,omitempty"`
	PfcTcDldIntervalRange                          *Uint32Range                  `protobuf:"bytes,126,opt,name=pfc_tc_dld_interval_range,json=pfcTcDldIntervalRange,proto3" json:"pfc_tc_dld_interval_range,omitempty"`
	PfcTcDldInterval                               *UintMapList                  `protobuf:"bytes,127,opt,name=pfc_tc_dld_interval,json=pfcTcDldInterval,proto3" json:"pfc_tc_dld_interval,omitempty"`
	PfcTcDlrIntervalRange                          *Uint32Range                  `protobuf:"bytes,128,opt,name=pfc_tc_dlr_interval_range,json=pfcTcDlrIntervalRange,proto3" json:"pfc_tc_dlr_interval_range,omitempty"`
	PfcTcDlrInterval                               *UintMapList                  `protobuf:"bytes,129,opt,name=pfc_tc_dlr_interval,json=pfcTcDlrInterval,proto3" json:"pfc_tc_dlr_interval,omitempty"`
	SupportedProtectedObjectType                   *ObjectTypeList               `protobuf:"bytes,130,opt,name=supported_protected_object_type,json=supportedProtectedObjectType,proto3" json:"supported_protected_object_type,omitempty"`
	TpidOuterVlan                                  uint32                        `protobuf:"varint,131,opt,name=tpid_outer_vlan,json=tpidOuterVlan,proto3" json:"tpid_outer_vlan,omitempty"`
	TpidInnerVlan                                  uint32                        `protobuf:"varint,132,opt,name=tpid_inner_vlan,json=tpidInnerVlan,proto3" json:"tpid_inner_vlan,omitempty"`
	CrcCheckEnable                                 bool                          `protobuf:"varint,133,opt,name=crc_check_enable,json=crcCheckEnable,proto3" json:"crc_check_enable,omitempty"`
	CrcRecalculationEnable                         bool                          `protobuf:"varint,134,opt,name=crc_recalculation_enable,json=crcRecalculationEnable,proto3" json:"crc_recalculation_enable,omitempty"`
	NumberOfBfdSession                             uint32                        `protobuf:"varint,135,opt,name=number_of_bfd_session,json=numberOfBfdSession,proto3" json:"number_of_bfd_session,omitempty"`
	MaxBfdSession                                  uint32                        `protobuf:"varint,136,opt,name=max_bfd_session,json=maxBfdSession,proto3" json:"max_bfd_session,omitempty"`
	SupportedIpv4BfdSessionOffloadType             *BfdSessionOffloadTypeList    `protobuf:"bytes,137,opt,name=supported_ipv4_bfd_session_offload_type,json=supportedIpv4BfdSessionOffloadType,proto3" json:"supported_ipv4_bfd_session_offload_type,omitempty"`
	SupportedIpv6BfdSessionOffloadType             *BfdSessionOffloadTypeList    `protobuf:"bytes,138,opt,name=supported_ipv6_bfd_session_offload_type,json=supportedIpv6BfdSessionOffloadType,proto3" json:"supported_ipv6_bfd_session_offload_type,omitempty"`
	MinBfdRx                                       uint32                        `protobuf:"varint,139,opt,name=min_bfd_rx,json=minBfdRx,proto3" json:"min_bfd_rx,omitempty"`
	MinBfdTx                                       uint32                        `protobuf:"varint,140,opt,name=min_bfd_tx,json=minBfdTx,proto3" json:"min_bfd_tx,omitempty"`
	EcnEctThresholdEnable                          bool                          `protobuf:"varint,141,opt,name=ecn_ect_threshold_enable,json=ecnEctThresholdEnable,proto3" json:"ecn_ect_threshold_enable,omitempty"`
	VxlanDefaultRouterMac                          []byte                        `protobuf:"bytes,142,opt,name=vxlan_default_router_mac,json=vxlanDefaultRouterMac,proto3" json:"vxlan_default_router_mac,omitempty"`
	VxlanDefaultPort                               uint32                        `protobuf:"varint,143,opt,name=vxlan_default_port,json=vxlanDefaultPort,proto3" json:"vxlan_default_port,omitempty"`
	MaxMirrorSession                               uint32                        `protobuf:"varint,144,opt,name=max_mirror_session,json=maxMirrorSession,proto3" json:"max_mirror_session,omitempty"`
	MaxSampledMirrorSession                        uint32                        `protobuf:"varint,145,opt,name=max_sampled_mirror_session,json=maxSampledMirrorSession,proto3" json:"max_sampled_mirror_session,omitempty"`
	SupportedExtendedStatsMode                     *StatsModeList                `protobuf:"bytes,146,opt,name=supported_extended_stats_mode,json=supportedExtendedStatsMode,proto3" json:"supported_extended_stats_mode,omitempty"`
	UninitDataPlaneOnRemoval                       bool                          `protobuf:"varint,147,opt,name=uninit_data_plane_on_removal,json=uninitDataPlaneOnRemoval,proto3" json:"uninit_data_plane_on_removal,omitempty"`
	TamObjectId                                    *Uint64List                   `protobuf:"bytes,148,opt,name=tam_object_id,json=tamObjectId,proto3" json:"tam_object_id,omitempty"`
	SupportedObjectTypeList                        *ObjectTypeList               `protobuf:"bytes,149,opt,name=supported_object_type_list,json=supportedObjectTypeList,proto3" json:"supported_object_type_list,omitempty"`
	PreShutdown                                    bool                          `protobuf:"varint,150,opt,name=pre_shutdown,json=preShutdown,proto3" json:"pre_shutdown,omitempty"`
	NatZoneCounterObjectId                         uint64                        `protobuf:"varint,151,opt,name=nat_zone_counter_object_id,json=natZoneCounterObjectId,proto3" json:"nat_zone_counter_object_id,omitempty"`
	NatEnable                                      bool                          `protobuf:"varint,152,opt,name=nat_enable,json=natEnable,proto3" json:"nat_enable,omitempty"`
	HardwareAccessBus                              SwitchHardwareAccessBus       `protobuf:"varint,153,opt,name=hardware_access_bus,json=hardwareAccessBus,proto3,enum=lemming.dataplane.sai.SwitchHardwareAccessBus" json:"hardware_access_bus,omitempty"`
	PlatfromContext                                uint64                        `protobuf:"varint,154,opt,name=platfrom_context,json=platfromContext,proto3" json:"platfrom_context,omitempty"`
	FirmwareDownloadBroadcast                      bool                          `protobuf:"varint,155,opt,name=firmware_download_broadcast,json=firmwareDownloadBroadcast,proto3" json:"firmware_download_broadcast,omitempty"`
	FirmwareLoadMethod                             SwitchFirmwareLoadMethod      `protobuf:"varint,156,opt,name=firmware_load_method,json=firmwareLoadMethod,proto3,enum=lemming.dataplane.sai.SwitchFirmwareLoadMethod" json:"firmware_load_method,omitempty"`
	FirmwareLoadType                               SwitchFirmwareLoadType        `protobuf:"varint,157,opt,name=firmware_load_type,json=firmwareLoadType,proto3,enum=lemming.dataplane.sai.SwitchFirmwareLoadType" json:"firmware_load_type,omitempty"`
	FirmwareDownloadExecute                        bool                          `protobuf:"varint,158,opt,name=firmware_download_execute,json=firmwareDownloadExecute,proto3" json:"firmware_download_execute,omitempty"`
	FirmwareBroadcastStop                          bool                          `protobuf:"varint,159,opt,name=firmware_broadcast_stop,json=firmwareBroadcastStop,proto3" json:"firmware_broadcast_stop,omitempty"`
	FirmwareVerifyAndInitSwitch                    bool                          `protobuf:"varint,160,opt,name=firmware_verify_and_init_switch,json=firmwareVerifyAndInitSwitch,proto3" json:"firmware_verify_and_init_switch,omitempty"`
	FirmwareStatus                                 bool                          `protobuf:"varint,161,opt,name=firmware_status,json=firmwareStatus,proto3" json:"firmware_status,omitempty"`
	FirmwareMajorVersion                           uint32                        `protobuf:"varint,162,opt,name=firmware_major_version,json=firmwareMajorVersion,proto3" json:"firmware_major_version,omitempty"`
	FirmwareMinorVersion                           uint32                        `protobuf:"varint,163,opt,name=firmware_minor_version,json=firmwareMinorVersion,proto3" json:"firmware_minor_version,omitempty"`
	PortConnectorList                              *Uint64List                   `protobuf:"bytes,164,opt,name=port_connector_list,json=portConnectorList,proto3" json:"port_connector_list,omitempty"`
	PropogatePortStateFromLineToSystemPortSupport  bool                          `protobuf:"varint,165,opt,name=propogate_port_state_from_line_to_system_port_support,json=propogatePortStateFromLineToSystemPortSupport,proto3" json:"propogate_port_state_from_line_to_system_port_support,omitempty"`
	Type                                           SwitchType                    `protobuf:"varint,166,opt,name=type,proto3,enum=lemming.dataplane.sai.SwitchType" json:"type,omitempty"`
	MacsecObjectList                               *Uint64List                   `protobuf:"bytes,167,opt,name=macsec_object_list,json=macsecObjectList,proto3" json:"macsec_object_list,omitempty"`
	QosMplsExpToTcMap                              uint64                        `protobuf:"varint,168,opt,name=qos_mpls_exp_to_tc_map,json=qosMplsExpToTcMap,proto3" json:"qos_mpls_exp_to_tc_map,omitempty"`
	QosMplsExpToColorMap                           uint64                        `protobuf:"varint,169,opt,name=qos_mpls_exp_to_color_map,json=qosMplsExpToColorMap,proto3" json:"qos_mpls_exp_to_color_map,omitempty"`
	QosTcAndColorToMplsExpMap                      uint64                        `protobuf:"varint,170,opt,name=qos_tc_and_color_to_mpls_exp_map,json=qosTcAndColorToMplsExpMap,proto3" json:"qos_tc_and_color_to_mpls_exp_map,omitempty"`
	SwitchId                                       uint32                        `protobuf:"varint,171,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	MaxSystemCores                                 uint32                        `protobuf:"varint,172,opt,name=max_system_cores,json=maxSystemCores,proto3" json:"max_system_cores,omitempty"`
	SystemPortConfigList                           *SystemPortConfigList         `protobuf:"bytes,173,opt,name=system_port_config_list,json=systemPortConfigList,proto3" json:"system_port_config_list,omitempty"`
	NumberOfSystemPorts                            uint32                        `protobuf:"varint,174,opt,name=number_of_system_ports,json=numberOfSystemPorts,proto3" json:"number_of_system_ports,omitempty"`
	SystemPortList                                 *Uint64List                   `protobuf:"bytes,175,opt,name=system_port_list,json=systemPortList,proto3" json:"system_port_list,omitempty"`
	NumberOfFabricPorts                            uint32                        `protobuf:"varint,176,opt,name=number_of_fabric_ports,json=numberOfFabricPorts,proto3" json:"number_of_fabric_ports,omitempty"`
	FabricPortList                                 *Uint64List                   `protobuf:"bytes,177,opt,name=fabric_port_list,json=fabricPortList,proto3" json:"fabric_port_list,omitempty"`
	PacketDmaMemoryPoolSize                        uint32                        `protobuf:"varint,178,opt,name=packet_dma_memory_pool_size,json=packetDmaMemoryPoolSize,proto3" json:"packet_dma_memory_pool_size,omitempty"`
	FailoverConfigMode                             SwitchFailoverConfigMode      `protobuf:"varint,179,opt,name=failover_config_mode,json=failoverConfigMode,proto3,enum=lemming.dataplane.sai.SwitchFailoverConfigMode" json:"failover_config_mode,omitempty"`
	SupportedFailoverMode                          bool                          `protobuf:"varint,180,opt,name=supported_failover_mode,json=supportedFailoverMode,proto3" json:"supported_failover_mode,omitempty"`
	TunnelObjectsList                              *Uint64List                   `protobuf:"bytes,181,opt,name=tunnel_objects_list,json=tunnelObjectsList,proto3" json:"tunnel_objects_list,omitempty"`
	PacketAvailableDmaMemoryPoolSize               uint32                        `protobuf:"varint,182,opt,name=packet_available_dma_memory_pool_size,json=packetAvailableDmaMemoryPoolSize,proto3" json:"packet_available_dma_memory_pool_size,omitempty"`
	PreIngressAcl                                  uint64                        `protobuf:"varint,183,opt,name=pre_ingress_acl,json=preIngressAcl,proto3" json:"pre_ingress_acl,omitempty"`
	AvailableSnaptEntry                            uint32                        `protobuf:"varint,184,opt,name=available_snapt_entry,json=availableSnaptEntry,proto3" json:"available_snapt_entry,omitempty"`
	AvailableDnaptEntry                            uint32                        `protobuf:"varint,185,opt,name=available_dnapt_entry,json=availableDnaptEntry,proto3" json:"available_dnapt_entry,omitempty"`
	AvailableDoubleNaptEntry                       uint32                        `protobuf:"varint,186,opt,name=available_double_napt_entry,json=availableDoubleNaptEntry,proto3" json:"available_double_napt_entry,omitempty"`
	SlaveMdioAddrList                              *Uint32List                   `protobuf:"bytes,187,opt,name=slave_mdio_addr_list,json=slaveMdioAddrList,proto3" json:"slave_mdio_addr_list,omitempty"`
	MyMacTableMinimumPriority                      uint32                        `protobuf:"varint,188,opt,name=my_mac_table_minimum_priority,json=myMacTableMinimumPriority,proto3" json:"my_mac_table_minimum_priority,omitempty"`
	MyMacTableMaximumPriority                      uint32                        `protobuf:"varint,189,opt,name=my_mac_table_maximum_priority,json=myMacTableMaximumPriority,proto3" json:"my_mac_table_maximum_priority,omitempty"`
	MyMacList                                      *Uint64List                   `protobuf:"bytes,190,opt,name=my_mac_list,json=myMacList,proto3" json:"my_mac_list,omitempty"`
	InstalledMyMacEntries                          uint32                        `protobuf:"varint,191,opt,name=installed_my_mac_entries,json=installedMyMacEntries,proto3" json:"installed_my_mac_entries,omitempty"`
	AvailableMyMacEntries                          uint32                        `protobuf:"varint,192,opt,name=available_my_mac_entries,json=availableMyMacEntries,proto3" json:"available_my_mac_entries,omitempty"`
	MaxNumberOfForwardingClasses                   uint32                        `protobuf:"varint,193,opt,name=max_number_of_forwarding_classes,json=maxNumberOfForwardingClasses,proto3" json:"max_number_of_forwarding_classes,omitempty"`
	QosDscpToForwardingClassMap                    uint64                        `protobuf:"varint,194,opt,name=qos_dscp_to_forwarding_class_map,json=qosDscpToForwardingClassMap,proto3" json:"qos_dscp_to_forwarding_class_map,omitempty"`
	QosMplsExpToForwardingClassMap                 uint64                        `protobuf:"varint,195,opt,name=qos_mpls_exp_to_forwarding_class_map,json=qosMplsExpToForwardingClassMap,proto3" json:"qos_mpls_exp_to_forwarding_class_map,omitempty"`
	IpsecObjectId                                  uint64                        `protobuf:"varint,196,opt,name=ipsec_object_id,json=ipsecObjectId,proto3" json:"ipsec_object_id,omitempty"`
	IpsecSaTagTpid                                 uint32                        `protobuf:"varint,197,opt,name=ipsec_sa_tag_tpid,json=ipsecSaTagTpid,proto3" json:"ipsec_sa_tag_tpid,omitempty"`
}

func (x *SwitchAttribute) Reset() {
	*x = SwitchAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchAttribute) ProtoMessage() {}

func (x *SwitchAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchAttribute.ProtoReflect.Descriptor instead.
func (*SwitchAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{134}
}

func (x *SwitchAttribute) GetNumberOfActivePorts() uint32 {
	if x != nil {
		return x.NumberOfActivePorts
	}
	return 0
}

func (x *SwitchAttribute) GetMaxNumberOfSupportedPorts() uint32 {
	if x != nil {
		return x.MaxNumberOfSupportedPorts
	}
	return 0
}

func (x *SwitchAttribute) GetPortList() *Uint64List {
	if x != nil {
		return x.PortList
	}
	return nil
}

func (x *SwitchAttribute) GetPortMaxMtu() uint32 {
	if x != nil {
		return x.PortMaxMtu
	}
	return 0
}

func (x *SwitchAttribute) GetCpuPort() uint64 {
	if x != nil {
		return x.CpuPort
	}
	return 0
}

func (x *SwitchAttribute) GetMaxVirtualRouters() uint32 {
	if x != nil {
		return x.MaxVirtualRouters
	}
	return 0
}

func (x *SwitchAttribute) GetFdbTableSize() uint32 {
	if x != nil {
		return x.FdbTableSize
	}
	return 0
}

func (x *SwitchAttribute) GetL3NeighborTableSize() uint32 {
	if x != nil {
		return x.L3NeighborTableSize
	}
	return 0
}

func (x *SwitchAttribute) GetL3RouteTableSize() uint32 {
	if x != nil {
		return x.L3RouteTableSize
	}
	return 0
}

func (x *SwitchAttribute) GetLagMembers() uint32 {
	if x != nil {
		return x.LagMembers
	}
	return 0
}

func (x *SwitchAttribute) GetNumberOfLags() uint32 {
	if x != nil {
		return x.NumberOfLags
	}
	return 0
}

func (x *SwitchAttribute) GetEcmpMembers() uint32 {
	if x != nil {
		return x.EcmpMembers
	}
	return 0
}

func (x *SwitchAttribute) GetNumberOfEcmpGroups() uint32 {
	if x != nil {
		return x.NumberOfEcmpGroups
	}
	return 0
}

func (x *SwitchAttribute) GetNumberOfUnicastQueues() uint32 {
	if x != nil {
		return x.NumberOfUnicastQueues
	}
	return 0
}

func (x *SwitchAttribute) GetNumberOfMulticastQueues() uint32 {
	if x != nil {
		return x.NumberOfMulticastQueues
	}
	return 0
}

func (x *SwitchAttribute) GetNumberOfQueues() uint32 {
	if x != nil {
		return x.NumberOfQueues
	}
	return 0
}

func (x *SwitchAttribute) GetNumberOfCpuQueues() uint32 {
	if x != nil {
		return x.NumberOfCpuQueues
	}
	return 0
}

func (x *SwitchAttribute) GetOnLinkRouteSupported() bool {
	if x != nil {
		return x.OnLinkRouteSupported
	}
	return false
}

func (x *SwitchAttribute) GetOperStatus() SwitchOperStatus {
	if x != nil {
		return x.OperStatus
	}
	return SwitchOperStatus_SWITCH_OPER_STATUS_UNSPECIFIED
}

func (x *SwitchAttribute) GetMaxNumberOfTempSensors() uint32 {
	if x != nil {
		return x.MaxNumberOfTempSensors
	}
	return 0
}

func (x *SwitchAttribute) GetTempList() *Int32List {
	if x != nil {
		return x.TempList
	}
	return nil
}

func (x *SwitchAttribute) GetMaxTemp() uint32 {
	if x != nil {
		return x.MaxTemp
	}
	return 0
}

func (x *SwitchAttribute) GetAverageTemp() uint32 {
	if x != nil {
		return x.AverageTemp
	}
	return 0
}

func (x *SwitchAttribute) GetAclTableMinimumPriority() uint32 {
	if x != nil {
		return x.AclTableMinimumPriority
	}
	return 0
}

func (x *SwitchAttribute) GetAclTableMaximumPriority() uint32 {
	if x != nil {
		return x.AclTableMaximumPriority
	}
	return 0
}

func (x *SwitchAttribute) GetAclEntryMinimumPriority() uint32 {
	if x != nil {
		return x.AclEntryMinimumPriority
	}
	return 0
}

func (x *SwitchAttribute) GetAclEntryMaximumPriority() uint32 {
	if x != nil {
		return x.AclEntryMaximumPriority
	}
	return 0
}

func (x *SwitchAttribute) GetAclTableGroupMinimumPriority() uint32 {
	if x != nil {
		return x.AclTableGroupMinimumPriority
	}
	return 0
}

func (x *SwitchAttribute) GetAclTableGroupMaximumPriority() uint32 {
	if x != nil {
		return x.AclTableGroupMaximumPriority
	}
	return 0
}

func (x *SwitchAttribute) GetFdbDstUserMetaDataRange() *Uint32Range {
	if x != nil {
		return x.FdbDstUserMetaDataRange
	}
	return nil
}

func (x *SwitchAttribute) GetRouteDstUserMetaDataRange() *Uint32Range {
	if x != nil {
		return x.RouteDstUserMetaDataRange
	}
	return nil
}

func (x *SwitchAttribute) GetNeighborDstUserMetaDataRange() *Uint32Range {
	if x != nil {
		return x.NeighborDstUserMetaDataRange
	}
	return nil
}

func (x *SwitchAttribute) GetPortUserMetaDataRange() *Uint32Range {
	if x != nil {
		return x.PortUserMetaDataRange
	}
	return nil
}

func (x *SwitchAttribute) GetVlanUserMetaDataRange() *Uint32Range {
	if x != nil {
		return x.VlanUserMetaDataRange
	}
	return nil
}

func (x *SwitchAttribute) GetAclUserMetaDataRange() *Uint32Range {
	if x != nil {
		return x.AclUserMetaDataRange
	}
	return nil
}

func (x *SwitchAttribute) GetAclUserTrapIdRange() *Uint32Range {
	if x != nil {
		return x.AclUserTrapIdRange
	}
	return nil
}

func (x *SwitchAttribute) GetDefaultVlanId() uint64 {
	if x != nil {
		return x.DefaultVlanId
	}
	return 0
}

func (x *SwitchAttribute) GetDefaultStpInstId() uint64 {
	if x != nil {
		return x.DefaultStpInstId
	}
	return 0
}

func (x *SwitchAttribute) GetMaxStpInstance() uint32 {
	if x != nil {
		return x.MaxStpInstance
	}
	return 0
}

func (x *SwitchAttribute) GetDefaultVirtualRouterId() uint64 {
	if x != nil {
		return x.DefaultVirtualRouterId
	}
	return 0
}

func (x *SwitchAttribute) GetDefaultOverrideVirtualRouterId() uint64 {
	if x != nil {
		return x.DefaultOverrideVirtualRouterId
	}
	return 0
}

func (x *SwitchAttribute) GetDefault_1QBridgeId() uint64 {
	if x != nil {
		return x.Default_1QBridgeId
	}
	return 0
}

func (x *SwitchAttribute) GetIngressAcl() uint64 {
	if x != nil {
		return x.IngressAcl
	}
	return 0
}

func (x *SwitchAttribute) GetEgressAcl() uint64 {
	if x != nil {
		return x.EgressAcl
	}
	return 0
}

func (x *SwitchAttribute) GetQosMaxNumberOfTrafficClasses() uint32 {
	if x != nil {
		return x.QosMaxNumberOfTrafficClasses
	}
	return 0
}

func (x *SwitchAttribute) GetQosMaxNumberOfSchedulerGroupHierarchyLevels() uint32 {
	if x != nil {
		return x.QosMaxNumberOfSchedulerGroupHierarchyLevels
	}
	return 0
}

func (x *SwitchAttribute) GetQosMaxNumberOfSchedulerGroupsPerHierarchyLevel() *Uint32List {
	if x != nil {
		return x.QosMaxNumberOfSchedulerGroupsPerHierarchyLevel
	}
	return nil
}

func (x *SwitchAttribute) GetQosMaxNumberOfChildsPerSchedulerGroup() uint32 {
	if x != nil {
		return x.QosMaxNumberOfChildsPerSchedulerGroup
	}
	return 0
}

func (x *SwitchAttribute) GetTotalBufferSize() uint64 {
	if x != nil {
		return x.TotalBufferSize
	}
	return 0
}

func (x *SwitchAttribute) GetIngressBufferPoolNum() uint32 {
	if x != nil {
		return x.IngressBufferPoolNum
	}
	return 0
}

func (x *SwitchAttribute) GetEgressBufferPoolNum() uint32 {
	if x != nil {
		return x.EgressBufferPoolNum
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableIpv4RouteEntry() uint32 {
	if x != nil {
		return x.AvailableIpv4RouteEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableIpv6RouteEntry() uint32 {
	if x != nil {
		return x.AvailableIpv6RouteEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableIpv4NexthopEntry() uint32 {
	if x != nil {
		return x.AvailableIpv4NexthopEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableIpv6NexthopEntry() uint32 {
	if x != nil {
		return x.AvailableIpv6NexthopEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableIpv4NeighborEntry() uint32 {
	if x != nil {
		return x.AvailableIpv4NeighborEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableIpv6NeighborEntry() uint32 {
	if x != nil {
		return x.AvailableIpv6NeighborEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableNextHopGroupEntry() uint32 {
	if x != nil {
		return x.AvailableNextHopGroupEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableNextHopGroupMemberEntry() uint32 {
	if x != nil {
		return x.AvailableNextHopGroupMemberEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableFdbEntry() uint32 {
	if x != nil {
		return x.AvailableFdbEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableL2McEntry() uint32 {
	if x != nil {
		return x.AvailableL2McEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableIpmcEntry() uint32 {
	if x != nil {
		return x.AvailableIpmcEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableSnatEntry() uint32 {
	if x != nil {
		return x.AvailableSnatEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableDnatEntry() uint32 {
	if x != nil {
		return x.AvailableDnatEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableDoubleNatEntry() uint32 {
	if x != nil {
		return x.AvailableDoubleNatEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableAclTable() *AclResourceList {
	if x != nil {
		return x.AvailableAclTable
	}
	return nil
}

func (x *SwitchAttribute) GetAvailableAclTableGroup() *AclResourceList {
	if x != nil {
		return x.AvailableAclTableGroup
	}
	return nil
}

func (x *SwitchAttribute) GetAvailableMySidEntry() uint32 {
	if x != nil {
		return x.AvailableMySidEntry
	}
	return 0
}

func (x *SwitchAttribute) GetDefaultTrapGroup() uint64 {
	if x != nil {
		return x.DefaultTrapGroup
	}
	return 0
}

func (x *SwitchAttribute) GetEcmpHash() uint64 {
	if x != nil {
		return x.EcmpHash
	}
	return 0
}

func (x *SwitchAttribute) GetLagHash() uint64 {
	if x != nil {
		return x.LagHash
	}
	return 0
}

func (x *SwitchAttribute) GetRestartWarm() bool {
	if x != nil {
		return x.RestartWarm
	}
	return false
}

func (x *SwitchAttribute) GetWarmRecover() bool {
	if x != nil {
		return x.WarmRecover
	}
	return false
}

func (x *SwitchAttribute) GetRestartType() SwitchRestartType {
	if x != nil {
		return x.RestartType
	}
	return SwitchRestartType_SWITCH_RESTART_TYPE_UNSPECIFIED
}

func (x *SwitchAttribute) GetMinPlannedRestartInterval() uint32 {
	if x != nil {
		return x.MinPlannedRestartInterval
	}
	return 0
}

func (x *SwitchAttribute) GetNvStorageSize() uint64 {
	if x != nil {
		return x.NvStorageSize
	}
	return 0
}

func (x *SwitchAttribute) GetMaxAclActionCount() uint32 {
	if x != nil {
		return x.MaxAclActionCount
	}
	return 0
}

func (x *SwitchAttribute) GetMaxAclRangeCount() uint32 {
	if x != nil {
		return x.MaxAclRangeCount
	}
	return 0
}

func (x *SwitchAttribute) GetAclCapability() *ACLCapability {
	if x != nil {
		return x.AclCapability
	}
	return nil
}

func (x *SwitchAttribute) GetMcastSnoopingCapability() SwitchMcastSnoopingCapability {
	if x != nil {
		return x.McastSnoopingCapability
	}
	return SwitchMcastSnoopingCapability_SWITCH_MCAST_SNOOPING_CAPABILITY_UNSPECIFIED
}

func (x *SwitchAttribute) GetSwitchingMode() SwitchSwitchingMode {
	if x != nil {
		return x.SwitchingMode
	}
	return SwitchSwitchingMode_SWITCH_SWITCHING_MODE_UNSPECIFIED
}

func (x *SwitchAttribute) GetBcastCpuFloodEnable() bool {
	if x != nil {
		return x.BcastCpuFloodEnable
	}
	return false
}

func (x *SwitchAttribute) GetMcastCpuFloodEnable() bool {
	if x != nil {
		return x.McastCpuFloodEnable
	}
	return false
}

func (x *SwitchAttribute) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *SwitchAttribute) GetMaxLearnedAddresses() uint32 {
	if x != nil {
		return x.MaxLearnedAddresses
	}
	return 0
}

func (x *SwitchAttribute) GetFdbAgingTime() uint32 {
	if x != nil {
		return x.FdbAgingTime
	}
	return 0
}

func (x *SwitchAttribute) GetFdbUnicastMissPacketAction() PacketAction {
	if x != nil {
		return x.FdbUnicastMissPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SwitchAttribute) GetFdbBroadcastMissPacketAction() PacketAction {
	if x != nil {
		return x.FdbBroadcastMissPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SwitchAttribute) GetFdbMulticastMissPacketAction() PacketAction {
	if x != nil {
		return x.FdbMulticastMissPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SwitchAttribute) GetEcmpDefaultHashAlgorithm() HashAlgorithm {
	if x != nil {
		return x.EcmpDefaultHashAlgorithm
	}
	return HashAlgorithm_HASH_ALGORITHM_UNSPECIFIED
}

func (x *SwitchAttribute) GetEcmpDefaultHashSeed() uint32 {
	if x != nil {
		return x.EcmpDefaultHashSeed
	}
	return 0
}

func (x *SwitchAttribute) GetEcmpDefaultHashOffset() uint32 {
	if x != nil {
		return x.EcmpDefaultHashOffset
	}
	return 0
}

func (x *SwitchAttribute) GetEcmpDefaultSymmetricHash() bool {
	if x != nil {
		return x.EcmpDefaultSymmetricHash
	}
	return false
}

func (x *SwitchAttribute) GetEcmpHashIpv4() uint64 {
	if x != nil {
		return x.EcmpHashIpv4
	}
	return 0
}

func (x *SwitchAttribute) GetEcmpHashIpv4InIpv4() uint64 {
	if x != nil {
		return x.EcmpHashIpv4InIpv4
	}
	return 0
}

func (x *SwitchAttribute) GetEcmpHashIpv6() uint64 {
	if x != nil {
		return x.EcmpHashIpv6
	}
	return 0
}

func (x *SwitchAttribute) GetLagDefaultHashAlgorithm() HashAlgorithm {
	if x != nil {
		return x.LagDefaultHashAlgorithm
	}
	return HashAlgorithm_HASH_ALGORITHM_UNSPECIFIED
}

func (x *SwitchAttribute) GetLagDefaultHashSeed() uint32 {
	if x != nil {
		return x.LagDefaultHashSeed
	}
	return 0
}

func (x *SwitchAttribute) GetLagDefaultHashOffset() uint32 {
	if x != nil {
		return x.LagDefaultHashOffset
	}
	return 0
}

func (x *SwitchAttribute) GetLagDefaultSymmetricHash() bool {
	if x != nil {
		return x.LagDefaultSymmetricHash
	}
	return false
}

func (x *SwitchAttribute) GetLagHashIpv4() uint64 {
	if x != nil {
		return x.LagHashIpv4
	}
	return 0
}

func (x *SwitchAttribute) GetLagHashIpv4InIpv4() uint64 {
	if x != nil {
		return x.LagHashIpv4InIpv4
	}
	return 0
}

func (x *SwitchAttribute) GetLagHashIpv6() uint64 {
	if x != nil {
		return x.LagHashIpv6
	}
	return 0
}

func (x *SwitchAttribute) GetCounterRefreshInterval() uint32 {
	if x != nil {
		return x.CounterRefreshInterval
	}
	return 0
}

func (x *SwitchAttribute) GetQosDefaultTc() uint32 {
	if x != nil {
		return x.QosDefaultTc
	}
	return 0
}

func (x *SwitchAttribute) GetQosDot1PToTcMap() uint64 {
	if x != nil {
		return x.QosDot1PToTcMap
	}
	return 0
}

func (x *SwitchAttribute) GetQosDot1PToColorMap() uint64 {
	if x != nil {
		return x.QosDot1PToColorMap
	}
	return 0
}

func (x *SwitchAttribute) GetQosDscpToTcMap() uint64 {
	if x != nil {
		return x.QosDscpToTcMap
	}
	return 0
}

func (x *SwitchAttribute) GetQosDscpToColorMap() uint64 {
	if x != nil {
		return x.QosDscpToColorMap
	}
	return 0
}

func (x *SwitchAttribute) GetQosTcToQueueMap() uint64 {
	if x != nil {
		return x.QosTcToQueueMap
	}
	return 0
}

func (x *SwitchAttribute) GetQosTcAndColorToDot1PMap() uint64 {
	if x != nil {
		return x.QosTcAndColorToDot1PMap
	}
	return 0
}

func (x *SwitchAttribute) GetQosTcAndColorToDscpMap() uint64 {
	if x != nil {
		return x.QosTcAndColorToDscpMap
	}
	return 0
}

func (x *SwitchAttribute) GetSwitchShellEnable() bool {
	if x != nil {
		return x.SwitchShellEnable
	}
	return false
}

func (x *SwitchAttribute) GetSwitchProfileId() uint32 {
	if x != nil {
		return x.SwitchProfileId
	}
	return 0
}

func (x *SwitchAttribute) GetSwitchHardwareInfo() *Int32List {
	if x != nil {
		return x.SwitchHardwareInfo
	}
	return nil
}

func (x *SwitchAttribute) GetFirmwarePathName() *Int32List {
	if x != nil {
		return x.FirmwarePathName
	}
	return nil
}

func (x *SwitchAttribute) GetInitSwitch() bool {
	if x != nil {
		return x.InitSwitch
	}
	return false
}

func (x *SwitchAttribute) GetFastApiEnable() bool {
	if x != nil {
		return x.FastApiEnable
	}
	return false
}

func (x *SwitchAttribute) GetMirrorTc() uint32 {
	if x != nil {
		return x.MirrorTc
	}
	return 0
}

func (x *SwitchAttribute) GetAclStageIngress() *ACLCapability {
	if x != nil {
		return x.AclStageIngress
	}
	return nil
}

func (x *SwitchAttribute) GetAclStageEgress() *ACLCapability {
	if x != nil {
		return x.AclStageEgress
	}
	return nil
}

func (x *SwitchAttribute) GetSrv6MaxSidDepth() uint32 {
	if x != nil {
		return x.Srv6MaxSidDepth
	}
	return 0
}

func (x *SwitchAttribute) GetSrv6TlvType() *TlvTypeList {
	if x != nil {
		return x.Srv6TlvType
	}
	return nil
}

func (x *SwitchAttribute) GetQosNumLosslessQueues() uint32 {
	if x != nil {
		return x.QosNumLosslessQueues
	}
	return 0
}

func (x *SwitchAttribute) GetPfcDlrPacketAction() PacketAction {
	if x != nil {
		return x.PfcDlrPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SwitchAttribute) GetPfcTcDldIntervalRange() *Uint32Range {
	if x != nil {
		return x.PfcTcDldIntervalRange
	}
	return nil
}

func (x *SwitchAttribute) GetPfcTcDldInterval() *UintMapList {
	if x != nil {
		return x.PfcTcDldInterval
	}
	return nil
}

func (x *SwitchAttribute) GetPfcTcDlrIntervalRange() *Uint32Range {
	if x != nil {
		return x.PfcTcDlrIntervalRange
	}
	return nil
}

func (x *SwitchAttribute) GetPfcTcDlrInterval() *UintMapList {
	if x != nil {
		return x.PfcTcDlrInterval
	}
	return nil
}

func (x *SwitchAttribute) GetSupportedProtectedObjectType() *ObjectTypeList {
	if x != nil {
		return x.SupportedProtectedObjectType
	}
	return nil
}

func (x *SwitchAttribute) GetTpidOuterVlan() uint32 {
	if x != nil {
		return x.TpidOuterVlan
	}
	return 0
}

func (x *SwitchAttribute) GetTpidInnerVlan() uint32 {
	if x != nil {
		return x.TpidInnerVlan
	}
	return 0
}

func (x *SwitchAttribute) GetCrcCheckEnable() bool {
	if x != nil {
		return x.CrcCheckEnable
	}
	return false
}

func (x *SwitchAttribute) GetCrcRecalculationEnable() bool {
	if x != nil {
		return x.CrcRecalculationEnable
	}
	return false
}

func (x *SwitchAttribute) GetNumberOfBfdSession() uint32 {
	if x != nil {
		return x.NumberOfBfdSession
	}
	return 0
}

func (x *SwitchAttribute) GetMaxBfdSession() uint32 {
	if x != nil {
		return x.MaxBfdSession
	}
	return 0
}

func (x *SwitchAttribute) GetSupportedIpv4BfdSessionOffloadType() *BfdSessionOffloadTypeList {
	if x != nil {
		return x.SupportedIpv4BfdSessionOffloadType
	}
	return nil
}

func (x *SwitchAttribute) GetSupportedIpv6BfdSessionOffloadType() *BfdSessionOffloadTypeList {
	if x != nil {
		return x.SupportedIpv6BfdSessionOffloadType
	}
	return nil
}

func (x *SwitchAttribute) GetMinBfdRx() uint32 {
	if x != nil {
		return x.MinBfdRx
	}
	return 0
}

func (x *SwitchAttribute) GetMinBfdTx() uint32 {
	if x != nil {
		return x.MinBfdTx
	}
	return 0
}

func (x *SwitchAttribute) GetEcnEctThresholdEnable() bool {
	if x != nil {
		return x.EcnEctThresholdEnable
	}
	return false
}

func (x *SwitchAttribute) GetVxlanDefaultRouterMac() []byte {
	if x != nil {
		return x.VxlanDefaultRouterMac
	}
	return nil
}

func (x *SwitchAttribute) GetVxlanDefaultPort() uint32 {
	if x != nil {
		return x.VxlanDefaultPort
	}
	return 0
}

func (x *SwitchAttribute) GetMaxMirrorSession() uint32 {
	if x != nil {
		return x.MaxMirrorSession
	}
	return 0
}

func (x *SwitchAttribute) GetMaxSampledMirrorSession() uint32 {
	if x != nil {
		return x.MaxSampledMirrorSession
	}
	return 0
}

func (x *SwitchAttribute) GetSupportedExtendedStatsMode() *StatsModeList {
	if x != nil {
		return x.SupportedExtendedStatsMode
	}
	return nil
}

func (x *SwitchAttribute) GetUninitDataPlaneOnRemoval() bool {
	if x != nil {
		return x.UninitDataPlaneOnRemoval
	}
	return false
}

func (x *SwitchAttribute) GetTamObjectId() *Uint64List {
	if x != nil {
		return x.TamObjectId
	}
	return nil
}

func (x *SwitchAttribute) GetSupportedObjectTypeList() *ObjectTypeList {
	if x != nil {
		return x.SupportedObjectTypeList
	}
	return nil
}

func (x *SwitchAttribute) GetPreShutdown() bool {
	if x != nil {
		return x.PreShutdown
	}
	return false
}

func (x *SwitchAttribute) GetNatZoneCounterObjectId() uint64 {
	if x != nil {
		return x.NatZoneCounterObjectId
	}
	return 0
}

func (x *SwitchAttribute) GetNatEnable() bool {
	if x != nil {
		return x.NatEnable
	}
	return false
}

func (x *SwitchAttribute) GetHardwareAccessBus() SwitchHardwareAccessBus {
	if x != nil {
		return x.HardwareAccessBus
	}
	return SwitchHardwareAccessBus_SWITCH_HARDWARE_ACCESS_BUS_UNSPECIFIED
}

func (x *SwitchAttribute) GetPlatfromContext() uint64 {
	if x != nil {
		return x.PlatfromContext
	}
	return 0
}

func (x *SwitchAttribute) GetFirmwareDownloadBroadcast() bool {
	if x != nil {
		return x.FirmwareDownloadBroadcast
	}
	return false
}

func (x *SwitchAttribute) GetFirmwareLoadMethod() SwitchFirmwareLoadMethod {
	if x != nil {
		return x.FirmwareLoadMethod
	}
	return SwitchFirmwareLoadMethod_SWITCH_FIRMWARE_LOAD_METHOD_UNSPECIFIED
}

func (x *SwitchAttribute) GetFirmwareLoadType() SwitchFirmwareLoadType {
	if x != nil {
		return x.FirmwareLoadType
	}
	return SwitchFirmwareLoadType_SWITCH_FIRMWARE_LOAD_TYPE_UNSPECIFIED
}

func (x *SwitchAttribute) GetFirmwareDownloadExecute() bool {
	if x != nil {
		return x.FirmwareDownloadExecute
	}
	return false
}

func (x *SwitchAttribute) GetFirmwareBroadcastStop() bool {
	if x != nil {
		return x.FirmwareBroadcastStop
	}
	return false
}

func (x *SwitchAttribute) GetFirmwareVerifyAndInitSwitch() bool {
	if x != nil {
		return x.FirmwareVerifyAndInitSwitch
	}
	return false
}

func (x *SwitchAttribute) GetFirmwareStatus() bool {
	if x != nil {
		return x.FirmwareStatus
	}
	return false
}

func (x *SwitchAttribute) GetFirmwareMajorVersion() uint32 {
	if x != nil {
		return x.FirmwareMajorVersion
	}
	return 0
}

func (x *SwitchAttribute) GetFirmwareMinorVersion() uint32 {
	if x != nil {
		return x.FirmwareMinorVersion
	}
	return 0
}

func (x *SwitchAttribute) GetPortConnectorList() *Uint64List {
	if x != nil {
		return x.PortConnectorList
	}
	return nil
}

func (x *SwitchAttribute) GetPropogatePortStateFromLineToSystemPortSupport() bool {
	if x != nil {
		return x.PropogatePortStateFromLineToSystemPortSupport
	}
	return false
}

func (x *SwitchAttribute) GetType() SwitchType {
	if x != nil {
		return x.Type
	}
	return SwitchType_SWITCH_TYPE_UNSPECIFIED
}

func (x *SwitchAttribute) GetMacsecObjectList() *Uint64List {
	if x != nil {
		return x.MacsecObjectList
	}
	return nil
}

func (x *SwitchAttribute) GetQosMplsExpToTcMap() uint64 {
	if x != nil {
		return x.QosMplsExpToTcMap
	}
	return 0
}

func (x *SwitchAttribute) GetQosMplsExpToColorMap() uint64 {
	if x != nil {
		return x.QosMplsExpToColorMap
	}
	return 0
}

func (x *SwitchAttribute) GetQosTcAndColorToMplsExpMap() uint64 {
	if x != nil {
		return x.QosTcAndColorToMplsExpMap
	}
	return 0
}

func (x *SwitchAttribute) GetSwitchId() uint32 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *SwitchAttribute) GetMaxSystemCores() uint32 {
	if x != nil {
		return x.MaxSystemCores
	}
	return 0
}

func (x *SwitchAttribute) GetSystemPortConfigList() *SystemPortConfigList {
	if x != nil {
		return x.SystemPortConfigList
	}
	return nil
}

func (x *SwitchAttribute) GetNumberOfSystemPorts() uint32 {
	if x != nil {
		return x.NumberOfSystemPorts
	}
	return 0
}

func (x *SwitchAttribute) GetSystemPortList() *Uint64List {
	if x != nil {
		return x.SystemPortList
	}
	return nil
}

func (x *SwitchAttribute) GetNumberOfFabricPorts() uint32 {
	if x != nil {
		return x.NumberOfFabricPorts
	}
	return 0
}

func (x *SwitchAttribute) GetFabricPortList() *Uint64List {
	if x != nil {
		return x.FabricPortList
	}
	return nil
}

func (x *SwitchAttribute) GetPacketDmaMemoryPoolSize() uint32 {
	if x != nil {
		return x.PacketDmaMemoryPoolSize
	}
	return 0
}

func (x *SwitchAttribute) GetFailoverConfigMode() SwitchFailoverConfigMode {
	if x != nil {
		return x.FailoverConfigMode
	}
	return SwitchFailoverConfigMode_SWITCH_FAILOVER_CONFIG_MODE_UNSPECIFIED
}

func (x *SwitchAttribute) GetSupportedFailoverMode() bool {
	if x != nil {
		return x.SupportedFailoverMode
	}
	return false
}

func (x *SwitchAttribute) GetTunnelObjectsList() *Uint64List {
	if x != nil {
		return x.TunnelObjectsList
	}
	return nil
}

func (x *SwitchAttribute) GetPacketAvailableDmaMemoryPoolSize() uint32 {
	if x != nil {
		return x.PacketAvailableDmaMemoryPoolSize
	}
	return 0
}

func (x *SwitchAttribute) GetPreIngressAcl() uint64 {
	if x != nil {
		return x.PreIngressAcl
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableSnaptEntry() uint32 {
	if x != nil {
		return x.AvailableSnaptEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableDnaptEntry() uint32 {
	if x != nil {
		return x.AvailableDnaptEntry
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableDoubleNaptEntry() uint32 {
	if x != nil {
		return x.AvailableDoubleNaptEntry
	}
	return 0
}

func (x *SwitchAttribute) GetSlaveMdioAddrList() *Uint32List {
	if x != nil {
		return x.SlaveMdioAddrList
	}
	return nil
}

func (x *SwitchAttribute) GetMyMacTableMinimumPriority() uint32 {
	if x != nil {
		return x.MyMacTableMinimumPriority
	}
	return 0
}

func (x *SwitchAttribute) GetMyMacTableMaximumPriority() uint32 {
	if x != nil {
		return x.MyMacTableMaximumPriority
	}
	return 0
}

func (x *SwitchAttribute) GetMyMacList() *Uint64List {
	if x != nil {
		return x.MyMacList
	}
	return nil
}

func (x *SwitchAttribute) GetInstalledMyMacEntries() uint32 {
	if x != nil {
		return x.InstalledMyMacEntries
	}
	return 0
}

func (x *SwitchAttribute) GetAvailableMyMacEntries() uint32 {
	if x != nil {
		return x.AvailableMyMacEntries
	}
	return 0
}

func (x *SwitchAttribute) GetMaxNumberOfForwardingClasses() uint32 {
	if x != nil {
		return x.MaxNumberOfForwardingClasses
	}
	return 0
}

func (x *SwitchAttribute) GetQosDscpToForwardingClassMap() uint64 {
	if x != nil {
		return x.QosDscpToForwardingClassMap
	}
	return 0
}

func (x *SwitchAttribute) GetQosMplsExpToForwardingClassMap() uint64 {
	if x != nil {
		return x.QosMplsExpToForwardingClassMap
	}
	return 0
}

func (x *SwitchAttribute) GetIpsecObjectId() uint64 {
	if x != nil {
		return x.IpsecObjectId
	}
	return 0
}

func (x *SwitchAttribute) GetIpsecSaTagTpid() uint32 {
	if x != nil {
		return x.IpsecSaTagTpid
	}
	return 0
}

type SwitchTunnelAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelType              TunnelType              `protobuf:"varint,1,opt,name=tunnel_type,json=tunnelType,proto3,enum=lemming.dataplane.sai.TunnelType" json:"tunnel_type,omitempty"`
	LoopbackPacketAction    PacketAction            `protobuf:"varint,2,opt,name=loopback_packet_action,json=loopbackPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"loopback_packet_action,omitempty"`
	TunnelEncapEcnMode      TunnelEncapEcnMode      `protobuf:"varint,3,opt,name=tunnel_encap_ecn_mode,json=tunnelEncapEcnMode,proto3,enum=lemming.dataplane.sai.TunnelEncapEcnMode" json:"tunnel_encap_ecn_mode,omitempty"`
	EncapMappers            *Uint64List             `protobuf:"bytes,4,opt,name=encap_mappers,json=encapMappers,proto3" json:"encap_mappers,omitempty"`
	TunnelDecapEcnMode      TunnelDecapEcnMode      `protobuf:"varint,5,opt,name=tunnel_decap_ecn_mode,json=tunnelDecapEcnMode,proto3,enum=lemming.dataplane.sai.TunnelDecapEcnMode" json:"tunnel_decap_ecn_mode,omitempty"`
	DecapMappers            *Uint64List             `protobuf:"bytes,6,opt,name=decap_mappers,json=decapMappers,proto3" json:"decap_mappers,omitempty"`
	TunnelVxlanUdpSportMode TunnelVxlanUdpSportMode `protobuf:"varint,7,opt,name=tunnel_vxlan_udp_sport_mode,json=tunnelVxlanUdpSportMode,proto3,enum=lemming.dataplane.sai.TunnelVxlanUdpSportMode" json:"tunnel_vxlan_udp_sport_mode,omitempty"`
	VxlanUdpSport           uint32                  `protobuf:"varint,8,opt,name=vxlan_udp_sport,json=vxlanUdpSport,proto3" json:"vxlan_udp_sport,omitempty"`
	VxlanUdpSportMask       uint32                  `protobuf:"varint,9,opt,name=vxlan_udp_sport_mask,json=vxlanUdpSportMask,proto3" json:"vxlan_udp_sport_mask,omitempty"`
}

func (x *SwitchTunnelAttribute) Reset() {
	*x = SwitchTunnelAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchTunnelAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchTunnelAttribute) ProtoMessage() {}

func (x *SwitchTunnelAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchTunnelAttribute.ProtoReflect.Descriptor instead.
func (*SwitchTunnelAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{135}
}

func (x *SwitchTunnelAttribute) GetTunnelType() TunnelType {
	if x != nil {
		return x.TunnelType
	}
	return TunnelType_TUNNEL_TYPE_UNSPECIFIED
}

func (x *SwitchTunnelAttribute) GetLoopbackPacketAction() PacketAction {
	if x != nil {
		return x.LoopbackPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SwitchTunnelAttribute) GetTunnelEncapEcnMode() TunnelEncapEcnMode {
	if x != nil {
		return x.TunnelEncapEcnMode
	}
	return TunnelEncapEcnMode_TUNNEL_ENCAP_ECN_MODE_UNSPECIFIED
}

func (x *SwitchTunnelAttribute) GetEncapMappers() *Uint64List {
	if x != nil {
		return x.EncapMappers
	}
	return nil
}

func (x *SwitchTunnelAttribute) GetTunnelDecapEcnMode() TunnelDecapEcnMode {
	if x != nil {
		return x.TunnelDecapEcnMode
	}
	return TunnelDecapEcnMode_TUNNEL_DECAP_ECN_MODE_UNSPECIFIED
}

func (x *SwitchTunnelAttribute) GetDecapMappers() *Uint64List {
	if x != nil {
		return x.DecapMappers
	}
	return nil
}

func (x *SwitchTunnelAttribute) GetTunnelVxlanUdpSportMode() TunnelVxlanUdpSportMode {
	if x != nil {
		return x.TunnelVxlanUdpSportMode
	}
	return TunnelVxlanUdpSportMode_TUNNEL_VXLAN_UDP_SPORT_MODE_UNSPECIFIED
}

func (x *SwitchTunnelAttribute) GetVxlanUdpSport() uint32 {
	if x != nil {
		return x.VxlanUdpSport
	}
	return 0
}

func (x *SwitchTunnelAttribute) GetVxlanUdpSportMask() uint32 {
	if x != nil {
		return x.VxlanUdpSportMask
	}
	return 0
}

type SystemPortAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            SystemPortType    `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.SystemPortType" json:"type,omitempty"`
	QosNumberOfVoqs uint32            `protobuf:"varint,2,opt,name=qos_number_of_voqs,json=qosNumberOfVoqs,proto3" json:"qos_number_of_voqs,omitempty"`
	QosVoqList      *Uint64List       `protobuf:"bytes,3,opt,name=qos_voq_list,json=qosVoqList,proto3" json:"qos_voq_list,omitempty"`
	Port            uint64            `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	AdminState      bool              `protobuf:"varint,5,opt,name=admin_state,json=adminState,proto3" json:"admin_state,omitempty"`
	ConfigInfo      *SystemPortConfig `protobuf:"bytes,6,opt,name=config_info,json=configInfo,proto3" json:"config_info,omitempty"`
	QosTcToQueueMap uint64            `protobuf:"varint,7,opt,name=qos_tc_to_queue_map,json=qosTcToQueueMap,proto3" json:"qos_tc_to_queue_map,omitempty"`
}

func (x *SystemPortAttribute) Reset() {
	*x = SystemPortAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemPortAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemPortAttribute) ProtoMessage() {}

func (x *SystemPortAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemPortAttribute.ProtoReflect.Descriptor instead.
func (*SystemPortAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{136}
}

func (x *SystemPortAttribute) GetType() SystemPortType {
	if x != nil {
		return x.Type
	}
	return SystemPortType_SYSTEM_PORT_TYPE_UNSPECIFIED
}

func (x *SystemPortAttribute) GetQosNumberOfVoqs() uint32 {
	if x != nil {
		return x.QosNumberOfVoqs
	}
	return 0
}

func (x *SystemPortAttribute) GetQosVoqList() *Uint64List {
	if x != nil {
		return x.QosVoqList
	}
	return nil
}

func (x *SystemPortAttribute) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SystemPortAttribute) GetAdminState() bool {
	if x != nil {
		return x.AdminState
	}
	return false
}

func (x *SystemPortAttribute) GetConfigInfo() *SystemPortConfig {
	if x != nil {
		return x.ConfigInfo
	}
	return nil
}

func (x *SystemPortAttribute) GetQosTcToQueueMap() uint64 {
	if x != nil {
		return x.QosTcToQueueMap
	}
	return 0
}

type TamBindPointTypeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []TamBindPointType `protobuf:"varint,1,rep,packed,name=list,proto3,enum=lemming.dataplane.sai.TamBindPointType" json:"list,omitempty"`
}

func (x *TamBindPointTypeList) Reset() {
	*x = TamBindPointTypeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamBindPointTypeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamBindPointTypeList) ProtoMessage() {}

func (x *TamBindPointTypeList) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamBindPointTypeList.ProtoReflect.Descriptor instead.
func (*TamBindPointTypeList) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{137}
}

func (x *TamBindPointTypeList) GetList() []TamBindPointType {
	if x != nil {
		return x.List
	}
	return nil
}

type TamAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TelemetryObjectsList *Uint64List           `protobuf:"bytes,1,opt,name=telemetry_objects_list,json=telemetryObjectsList,proto3" json:"telemetry_objects_list,omitempty"`
	EventObjectsList     *Uint64List           `protobuf:"bytes,2,opt,name=event_objects_list,json=eventObjectsList,proto3" json:"event_objects_list,omitempty"`
	IntObjectsList       *Uint64List           `protobuf:"bytes,3,opt,name=int_objects_list,json=intObjectsList,proto3" json:"int_objects_list,omitempty"`
	TamBindPointTypeList *TamBindPointTypeList `protobuf:"bytes,4,opt,name=tam_bind_point_type_list,json=tamBindPointTypeList,proto3" json:"tam_bind_point_type_list,omitempty"`
}

func (x *TamAttribute) Reset() {
	*x = TamAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamAttribute) ProtoMessage() {}

func (x *TamAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamAttribute.ProtoReflect.Descriptor instead.
func (*TamAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{138}
}

func (x *TamAttribute) GetTelemetryObjectsList() *Uint64List {
	if x != nil {
		return x.TelemetryObjectsList
	}
	return nil
}

func (x *TamAttribute) GetEventObjectsList() *Uint64List {
	if x != nil {
		return x.EventObjectsList
	}
	return nil
}

func (x *TamAttribute) GetIntObjectsList() *Uint64List {
	if x != nil {
		return x.IntObjectsList
	}
	return nil
}

func (x *TamAttribute) GetTamBindPointTypeList() *TamBindPointTypeList {
	if x != nil {
		return x.TamBindPointTypeList
	}
	return nil
}

type TamCollectorAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcIp           []byte `protobuf:"bytes,1,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	DstIp           []byte `protobuf:"bytes,2,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	Localhost       bool   `protobuf:"varint,3,opt,name=localhost,proto3" json:"localhost,omitempty"`
	VirtualRouterId uint64 `protobuf:"varint,4,opt,name=virtual_router_id,json=virtualRouterId,proto3" json:"virtual_router_id,omitempty"`
	TruncateSize    uint32 `protobuf:"varint,5,opt,name=truncate_size,json=truncateSize,proto3" json:"truncate_size,omitempty"`
	Transport       uint64 `protobuf:"varint,6,opt,name=transport,proto3" json:"transport,omitempty"`
	DscpValue       uint32 `protobuf:"varint,7,opt,name=dscp_value,json=dscpValue,proto3" json:"dscp_value,omitempty"`
}

func (x *TamCollectorAttribute) Reset() {
	*x = TamCollectorAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamCollectorAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamCollectorAttribute) ProtoMessage() {}

func (x *TamCollectorAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamCollectorAttribute.ProtoReflect.Descriptor instead.
func (*TamCollectorAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{139}
}

func (x *TamCollectorAttribute) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *TamCollectorAttribute) GetDstIp() []byte {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *TamCollectorAttribute) GetLocalhost() bool {
	if x != nil {
		return x.Localhost
	}
	return false
}

func (x *TamCollectorAttribute) GetVirtualRouterId() uint64 {
	if x != nil {
		return x.VirtualRouterId
	}
	return 0
}

func (x *TamCollectorAttribute) GetTruncateSize() uint32 {
	if x != nil {
		return x.TruncateSize
	}
	return 0
}

func (x *TamCollectorAttribute) GetTransport() uint64 {
	if x != nil {
		return x.Transport
	}
	return 0
}

func (x *TamCollectorAttribute) GetDscpValue() uint32 {
	if x != nil {
		return x.DscpValue
	}
	return 0
}

type TamEventAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          TamEventType `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.TamEventType" json:"type,omitempty"`
	ActionList    *Uint64List  `protobuf:"bytes,2,opt,name=action_list,json=actionList,proto3" json:"action_list,omitempty"`
	CollectorList *Uint64List  `protobuf:"bytes,3,opt,name=collector_list,json=collectorList,proto3" json:"collector_list,omitempty"`
	Threshold     uint64       `protobuf:"varint,4,opt,name=threshold,proto3" json:"threshold,omitempty"`
	DscpValue     uint32       `protobuf:"varint,5,opt,name=dscp_value,json=dscpValue,proto3" json:"dscp_value,omitempty"`
}

func (x *TamEventAttribute) Reset() {
	*x = TamEventAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamEventAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamEventAttribute) ProtoMessage() {}

func (x *TamEventAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamEventAttribute.ProtoReflect.Descriptor instead.
func (*TamEventAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{140}
}

func (x *TamEventAttribute) GetType() TamEventType {
	if x != nil {
		return x.Type
	}
	return TamEventType_TAM_EVENT_TYPE_UNSPECIFIED
}

func (x *TamEventAttribute) GetActionList() *Uint64List {
	if x != nil {
		return x.ActionList
	}
	return nil
}

func (x *TamEventAttribute) GetCollectorList() *Uint64List {
	if x != nil {
		return x.CollectorList
	}
	return nil
}

func (x *TamEventAttribute) GetThreshold() uint64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *TamEventAttribute) GetDscpValue() uint32 {
	if x != nil {
		return x.DscpValue
	}
	return 0
}

type TamEventActionAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportType    uint64 `protobuf:"varint,1,opt,name=report_type,json=reportType,proto3" json:"report_type,omitempty"`
	QosActionType uint32 `protobuf:"varint,2,opt,name=qos_action_type,json=qosActionType,proto3" json:"qos_action_type,omitempty"`
}

func (x *TamEventActionAttribute) Reset() {
	*x = TamEventActionAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamEventActionAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamEventActionAttribute) ProtoMessage() {}

func (x *TamEventActionAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamEventActionAttribute.ProtoReflect.Descriptor instead.
func (*TamEventActionAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{141}
}

func (x *TamEventActionAttribute) GetReportType() uint64 {
	if x != nil {
		return x.ReportType
	}
	return 0
}

func (x *TamEventActionAttribute) GetQosActionType() uint32 {
	if x != nil {
		return x.QosActionType
	}
	return 0
}

type TamEventThresholdAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighWatermark uint32                `protobuf:"varint,1,opt,name=high_watermark,json=highWatermark,proto3" json:"high_watermark,omitempty"`
	LowWatermark  uint32                `protobuf:"varint,2,opt,name=low_watermark,json=lowWatermark,proto3" json:"low_watermark,omitempty"`
	Latency       uint32                `protobuf:"varint,3,opt,name=latency,proto3" json:"latency,omitempty"`
	Rate          uint32                `protobuf:"varint,4,opt,name=rate,proto3" json:"rate,omitempty"`
	AbsValue      uint32                `protobuf:"varint,5,opt,name=abs_value,json=absValue,proto3" json:"abs_value,omitempty"`
	Unit          TamEventThresholdUnit `protobuf:"varint,6,opt,name=unit,proto3,enum=lemming.dataplane.sai.TamEventThresholdUnit" json:"unit,omitempty"`
}

func (x *TamEventThresholdAttribute) Reset() {
	*x = TamEventThresholdAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamEventThresholdAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamEventThresholdAttribute) ProtoMessage() {}

func (x *TamEventThresholdAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamEventThresholdAttribute.ProtoReflect.Descriptor instead.
func (*TamEventThresholdAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{142}
}

func (x *TamEventThresholdAttribute) GetHighWatermark() uint32 {
	if x != nil {
		return x.HighWatermark
	}
	return 0
}

func (x *TamEventThresholdAttribute) GetLowWatermark() uint32 {
	if x != nil {
		return x.LowWatermark
	}
	return 0
}

func (x *TamEventThresholdAttribute) GetLatency() uint32 {
	if x != nil {
		return x.Latency
	}
	return 0
}

func (x *TamEventThresholdAttribute) GetRate() uint32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *TamEventThresholdAttribute) GetAbsValue() uint32 {
	if x != nil {
		return x.AbsValue
	}
	return 0
}

func (x *TamEventThresholdAttribute) GetUnit() TamEventThresholdUnit {
	if x != nil {
		return x.Unit
	}
	return TamEventThresholdUnit_TAM_EVENT_THRESHOLD_UNIT_UNSPECIFIED
}

type TamIntAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                      TamIntType         `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.TamIntType" json:"type,omitempty"`
	DeviceId                  uint32             `protobuf:"varint,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	IoamTraceType             uint32             `protobuf:"varint,3,opt,name=ioam_trace_type,json=ioamTraceType,proto3" json:"ioam_trace_type,omitempty"`
	IntPresenceType           TamIntPresenceType `protobuf:"varint,4,opt,name=int_presence_type,json=intPresenceType,proto3,enum=lemming.dataplane.sai.TamIntPresenceType" json:"int_presence_type,omitempty"`
	IntPresencePb1            uint32             `protobuf:"varint,5,opt,name=int_presence_pb1,json=intPresencePb1,proto3" json:"int_presence_pb1,omitempty"`
	IntPresencePb2            uint32             `protobuf:"varint,6,opt,name=int_presence_pb2,json=intPresencePb2,proto3" json:"int_presence_pb2,omitempty"`
	IntPresenceDscpValue      uint32             `protobuf:"varint,7,opt,name=int_presence_dscp_value,json=intPresenceDscpValue,proto3" json:"int_presence_dscp_value,omitempty"`
	Inline                    bool               `protobuf:"varint,8,opt,name=inline,proto3" json:"inline,omitempty"`
	IntPresenceL3Protocol     uint32             `protobuf:"varint,9,opt,name=int_presence_l3_protocol,json=intPresenceL3Protocol,proto3" json:"int_presence_l3_protocol,omitempty"`
	TraceVector               uint32             `protobuf:"varint,10,opt,name=trace_vector,json=traceVector,proto3" json:"trace_vector,omitempty"`
	ActionVector              uint32             `protobuf:"varint,11,opt,name=action_vector,json=actionVector,proto3" json:"action_vector,omitempty"`
	P4IntInstructionBitmap    uint32             `protobuf:"varint,12,opt,name=p4_int_instruction_bitmap,json=p4IntInstructionBitmap,proto3" json:"p4_int_instruction_bitmap,omitempty"`
	MetadataFragmentEnable    bool               `protobuf:"varint,13,opt,name=metadata_fragment_enable,json=metadataFragmentEnable,proto3" json:"metadata_fragment_enable,omitempty"`
	MetadataChecksumEnable    bool               `protobuf:"varint,14,opt,name=metadata_checksum_enable,json=metadataChecksumEnable,proto3" json:"metadata_checksum_enable,omitempty"`
	ReportAllPackets          bool               `protobuf:"varint,15,opt,name=report_all_packets,json=reportAllPackets,proto3" json:"report_all_packets,omitempty"`
	FlowLivenessPeriod        uint32             `protobuf:"varint,16,opt,name=flow_liveness_period,json=flowLivenessPeriod,proto3" json:"flow_liveness_period,omitempty"`
	LatencySensitivity        uint32             `protobuf:"varint,17,opt,name=latency_sensitivity,json=latencySensitivity,proto3" json:"latency_sensitivity,omitempty"`
	AclGroup                  uint64             `protobuf:"varint,18,opt,name=acl_group,json=aclGroup,proto3" json:"acl_group,omitempty"`
	MaxHopCount               uint32             `protobuf:"varint,19,opt,name=max_hop_count,json=maxHopCount,proto3" json:"max_hop_count,omitempty"`
	MaxLength                 uint32             `protobuf:"varint,20,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	NameSpaceId               uint32             `protobuf:"varint,21,opt,name=name_space_id,json=nameSpaceId,proto3" json:"name_space_id,omitempty"`
	NameSpaceIdGlobal         bool               `protobuf:"varint,22,opt,name=name_space_id_global,json=nameSpaceIdGlobal,proto3" json:"name_space_id_global,omitempty"`
	IngressSamplepacketEnable uint64             `protobuf:"varint,23,opt,name=ingress_samplepacket_enable,json=ingressSamplepacketEnable,proto3" json:"ingress_samplepacket_enable,omitempty"`
	CollectorList             *Uint64List        `protobuf:"bytes,24,opt,name=collector_list,json=collectorList,proto3" json:"collector_list,omitempty"`
	MathFunc                  uint64             `protobuf:"varint,25,opt,name=math_func,json=mathFunc,proto3" json:"math_func,omitempty"`
	ReportId                  uint64             `protobuf:"varint,26,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *TamIntAttribute) Reset() {
	*x = TamIntAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamIntAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamIntAttribute) ProtoMessage() {}

func (x *TamIntAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamIntAttribute.ProtoReflect.Descriptor instead.
func (*TamIntAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{143}
}

func (x *TamIntAttribute) GetType() TamIntType {
	if x != nil {
		return x.Type
	}
	return TamIntType_TAM_INT_TYPE_UNSPECIFIED
}

func (x *TamIntAttribute) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *TamIntAttribute) GetIoamTraceType() uint32 {
	if x != nil {
		return x.IoamTraceType
	}
	return 0
}

func (x *TamIntAttribute) GetIntPresenceType() TamIntPresenceType {
	if x != nil {
		return x.IntPresenceType
	}
	return TamIntPresenceType_TAM_INT_PRESENCE_TYPE_UNSPECIFIED
}

func (x *TamIntAttribute) GetIntPresencePb1() uint32 {
	if x != nil {
		return x.IntPresencePb1
	}
	return 0
}

func (x *TamIntAttribute) GetIntPresencePb2() uint32 {
	if x != nil {
		return x.IntPresencePb2
	}
	return 0
}

func (x *TamIntAttribute) GetIntPresenceDscpValue() uint32 {
	if x != nil {
		return x.IntPresenceDscpValue
	}
	return 0
}

func (x *TamIntAttribute) GetInline() bool {
	if x != nil {
		return x.Inline
	}
	return false
}

func (x *TamIntAttribute) GetIntPresenceL3Protocol() uint32 {
	if x != nil {
		return x.IntPresenceL3Protocol
	}
	return 0
}

func (x *TamIntAttribute) GetTraceVector() uint32 {
	if x != nil {
		return x.TraceVector
	}
	return 0
}

func (x *TamIntAttribute) GetActionVector() uint32 {
	if x != nil {
		return x.ActionVector
	}
	return 0
}

func (x *TamIntAttribute) GetP4IntInstructionBitmap() uint32 {
	if x != nil {
		return x.P4IntInstructionBitmap
	}
	return 0
}

func (x *TamIntAttribute) GetMetadataFragmentEnable() bool {
	if x != nil {
		return x.MetadataFragmentEnable
	}
	return false
}

func (x *TamIntAttribute) GetMetadataChecksumEnable() bool {
	if x != nil {
		return x.MetadataChecksumEnable
	}
	return false
}

func (x *TamIntAttribute) GetReportAllPackets() bool {
	if x != nil {
		return x.ReportAllPackets
	}
	return false
}

func (x *TamIntAttribute) GetFlowLivenessPeriod() uint32 {
	if x != nil {
		return x.FlowLivenessPeriod
	}
	return 0
}

func (x *TamIntAttribute) GetLatencySensitivity() uint32 {
	if x != nil {
		return x.LatencySensitivity
	}
	return 0
}

func (x *TamIntAttribute) GetAclGroup() uint64 {
	if x != nil {
		return x.AclGroup
	}
	return 0
}

func (x *TamIntAttribute) GetMaxHopCount() uint32 {
	if x != nil {
		return x.MaxHopCount
	}
	return 0
}

func (x *TamIntAttribute) GetMaxLength() uint32 {
	if x != nil {
		return x.MaxLength
	}
	return 0
}

func (x *TamIntAttribute) GetNameSpaceId() uint32 {
	if x != nil {
		return x.NameSpaceId
	}
	return 0
}

func (x *TamIntAttribute) GetNameSpaceIdGlobal() bool {
	if x != nil {
		return x.NameSpaceIdGlobal
	}
	return false
}

func (x *TamIntAttribute) GetIngressSamplepacketEnable() uint64 {
	if x != nil {
		return x.IngressSamplepacketEnable
	}
	return 0
}

func (x *TamIntAttribute) GetCollectorList() *Uint64List {
	if x != nil {
		return x.CollectorList
	}
	return nil
}

func (x *TamIntAttribute) GetMathFunc() uint64 {
	if x != nil {
		return x.MathFunc
	}
	return 0
}

func (x *TamIntAttribute) GetReportId() uint64 {
	if x != nil {
		return x.ReportId
	}
	return 0
}

type TamMathFuncAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TamTelMathFuncType TamTelMathFuncType `protobuf:"varint,1,opt,name=tam_tel_math_func_type,json=tamTelMathFuncType,proto3,enum=lemming.dataplane.sai.TamTelMathFuncType" json:"tam_tel_math_func_type,omitempty"`
}

func (x *TamMathFuncAttribute) Reset() {
	*x = TamMathFuncAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamMathFuncAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamMathFuncAttribute) ProtoMessage() {}

func (x *TamMathFuncAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamMathFuncAttribute.ProtoReflect.Descriptor instead.
func (*TamMathFuncAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{144}
}

func (x *TamMathFuncAttribute) GetTamTelMathFuncType() TamTelMathFuncType {
	if x != nil {
		return x.TamTelMathFuncType
	}
	return TamTelMathFuncType_TAM_TEL_MATH_FUNC_TYPE_UNSPECIFIED
}

type TamReportAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                  TamReportType `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.TamReportType" json:"type,omitempty"`
	HistogramNumberOfBins uint32        `protobuf:"varint,2,opt,name=histogram_number_of_bins,json=histogramNumberOfBins,proto3" json:"histogram_number_of_bins,omitempty"`
	HistogramBinBoundary  *Uint32List   `protobuf:"bytes,3,opt,name=histogram_bin_boundary,json=histogramBinBoundary,proto3" json:"histogram_bin_boundary,omitempty"`
	Quota                 uint32        `protobuf:"varint,4,opt,name=quota,proto3" json:"quota,omitempty"`
	ReportMode            TamReportMode `protobuf:"varint,5,opt,name=report_mode,json=reportMode,proto3,enum=lemming.dataplane.sai.TamReportMode" json:"report_mode,omitempty"`
	ReportInterval        uint32        `protobuf:"varint,6,opt,name=report_interval,json=reportInterval,proto3" json:"report_interval,omitempty"`
	EnterpriseNumber      uint32        `protobuf:"varint,7,opt,name=enterprise_number,json=enterpriseNumber,proto3" json:"enterprise_number,omitempty"`
}

func (x *TamReportAttribute) Reset() {
	*x = TamReportAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamReportAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamReportAttribute) ProtoMessage() {}

func (x *TamReportAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamReportAttribute.ProtoReflect.Descriptor instead.
func (*TamReportAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{145}
}

func (x *TamReportAttribute) GetType() TamReportType {
	if x != nil {
		return x.Type
	}
	return TamReportType_TAM_REPORT_TYPE_UNSPECIFIED
}

func (x *TamReportAttribute) GetHistogramNumberOfBins() uint32 {
	if x != nil {
		return x.HistogramNumberOfBins
	}
	return 0
}

func (x *TamReportAttribute) GetHistogramBinBoundary() *Uint32List {
	if x != nil {
		return x.HistogramBinBoundary
	}
	return nil
}

func (x *TamReportAttribute) GetQuota() uint32 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *TamReportAttribute) GetReportMode() TamReportMode {
	if x != nil {
		return x.ReportMode
	}
	return TamReportMode_TAM_REPORT_MODE_UNSPECIFIED
}

func (x *TamReportAttribute) GetReportInterval() uint32 {
	if x != nil {
		return x.ReportInterval
	}
	return 0
}

func (x *TamReportAttribute) GetEnterpriseNumber() uint32 {
	if x != nil {
		return x.EnterpriseNumber
	}
	return 0
}

type TamTelemetryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TamTypeList       *Uint64List      `protobuf:"bytes,1,opt,name=tam_type_list,json=tamTypeList,proto3" json:"tam_type_list,omitempty"`
	CollectorList     *Uint64List      `protobuf:"bytes,2,opt,name=collector_list,json=collectorList,proto3" json:"collector_list,omitempty"`
	TamReportingUnit  TamReportingUnit `protobuf:"varint,3,opt,name=tam_reporting_unit,json=tamReportingUnit,proto3,enum=lemming.dataplane.sai.TamReportingUnit" json:"tam_reporting_unit,omitempty"`
	ReportingInterval uint32           `protobuf:"varint,4,opt,name=reporting_interval,json=reportingInterval,proto3" json:"reporting_interval,omitempty"`
}

func (x *TamTelemetryAttribute) Reset() {
	*x = TamTelemetryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamTelemetryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamTelemetryAttribute) ProtoMessage() {}

func (x *TamTelemetryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamTelemetryAttribute.ProtoReflect.Descriptor instead.
func (*TamTelemetryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{146}
}

func (x *TamTelemetryAttribute) GetTamTypeList() *Uint64List {
	if x != nil {
		return x.TamTypeList
	}
	return nil
}

func (x *TamTelemetryAttribute) GetCollectorList() *Uint64List {
	if x != nil {
		return x.CollectorList
	}
	return nil
}

func (x *TamTelemetryAttribute) GetTamReportingUnit() TamReportingUnit {
	if x != nil {
		return x.TamReportingUnit
	}
	return TamReportingUnit_TAM_REPORTING_UNIT_UNSPECIFIED
}

func (x *TamTelemetryAttribute) GetReportingInterval() uint32 {
	if x != nil {
		return x.ReportingInterval
	}
	return 0
}

type TamTelTypeAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TamTelemetryType                     TamTelemetryType `protobuf:"varint,1,opt,name=tam_telemetry_type,json=tamTelemetryType,proto3,enum=lemming.dataplane.sai.TamTelemetryType" json:"tam_telemetry_type,omitempty"`
	IntSwitchIdentifier                  uint32           `protobuf:"varint,2,opt,name=int_switch_identifier,json=intSwitchIdentifier,proto3" json:"int_switch_identifier,omitempty"`
	SwitchEnablePortStats                bool             `protobuf:"varint,3,opt,name=switch_enable_port_stats,json=switchEnablePortStats,proto3" json:"switch_enable_port_stats,omitempty"`
	SwitchEnablePortStatsIngress         bool             `protobuf:"varint,4,opt,name=switch_enable_port_stats_ingress,json=switchEnablePortStatsIngress,proto3" json:"switch_enable_port_stats_ingress,omitempty"`
	SwitchEnablePortStatsEgress          bool             `protobuf:"varint,5,opt,name=switch_enable_port_stats_egress,json=switchEnablePortStatsEgress,proto3" json:"switch_enable_port_stats_egress,omitempty"`
	SwitchEnableVirtualQueueStats        bool             `protobuf:"varint,6,opt,name=switch_enable_virtual_queue_stats,json=switchEnableVirtualQueueStats,proto3" json:"switch_enable_virtual_queue_stats,omitempty"`
	SwitchEnableOutputQueueStats         bool             `protobuf:"varint,7,opt,name=switch_enable_output_queue_stats,json=switchEnableOutputQueueStats,proto3" json:"switch_enable_output_queue_stats,omitempty"`
	SwitchEnableMmuStats                 bool             `protobuf:"varint,8,opt,name=switch_enable_mmu_stats,json=switchEnableMmuStats,proto3" json:"switch_enable_mmu_stats,omitempty"`
	SwitchEnableFabricStats              bool             `protobuf:"varint,9,opt,name=switch_enable_fabric_stats,json=switchEnableFabricStats,proto3" json:"switch_enable_fabric_stats,omitempty"`
	SwitchEnableFilterStats              bool             `protobuf:"varint,10,opt,name=switch_enable_filter_stats,json=switchEnableFilterStats,proto3" json:"switch_enable_filter_stats,omitempty"`
	SwitchEnableResourceUtilizationStats bool             `protobuf:"varint,11,opt,name=switch_enable_resource_utilization_stats,json=switchEnableResourceUtilizationStats,proto3" json:"switch_enable_resource_utilization_stats,omitempty"`
	FabricQ                              bool             `protobuf:"varint,12,opt,name=fabric_q,json=fabricQ,proto3" json:"fabric_q,omitempty"`
	NeEnable                             bool             `protobuf:"varint,13,opt,name=ne_enable,json=neEnable,proto3" json:"ne_enable,omitempty"`
	DscpValue                            uint32           `protobuf:"varint,14,opt,name=dscp_value,json=dscpValue,proto3" json:"dscp_value,omitempty"`
	MathFunc                             uint64           `protobuf:"varint,15,opt,name=math_func,json=mathFunc,proto3" json:"math_func,omitempty"`
	ReportId                             uint64           `protobuf:"varint,16,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
}

func (x *TamTelTypeAttribute) Reset() {
	*x = TamTelTypeAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamTelTypeAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamTelTypeAttribute) ProtoMessage() {}

func (x *TamTelTypeAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamTelTypeAttribute.ProtoReflect.Descriptor instead.
func (*TamTelTypeAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{147}
}

func (x *TamTelTypeAttribute) GetTamTelemetryType() TamTelemetryType {
	if x != nil {
		return x.TamTelemetryType
	}
	return TamTelemetryType_TAM_TELEMETRY_TYPE_UNSPECIFIED
}

func (x *TamTelTypeAttribute) GetIntSwitchIdentifier() uint32 {
	if x != nil {
		return x.IntSwitchIdentifier
	}
	return 0
}

func (x *TamTelTypeAttribute) GetSwitchEnablePortStats() bool {
	if x != nil {
		return x.SwitchEnablePortStats
	}
	return false
}

func (x *TamTelTypeAttribute) GetSwitchEnablePortStatsIngress() bool {
	if x != nil {
		return x.SwitchEnablePortStatsIngress
	}
	return false
}

func (x *TamTelTypeAttribute) GetSwitchEnablePortStatsEgress() bool {
	if x != nil {
		return x.SwitchEnablePortStatsEgress
	}
	return false
}

func (x *TamTelTypeAttribute) GetSwitchEnableVirtualQueueStats() bool {
	if x != nil {
		return x.SwitchEnableVirtualQueueStats
	}
	return false
}

func (x *TamTelTypeAttribute) GetSwitchEnableOutputQueueStats() bool {
	if x != nil {
		return x.SwitchEnableOutputQueueStats
	}
	return false
}

func (x *TamTelTypeAttribute) GetSwitchEnableMmuStats() bool {
	if x != nil {
		return x.SwitchEnableMmuStats
	}
	return false
}

func (x *TamTelTypeAttribute) GetSwitchEnableFabricStats() bool {
	if x != nil {
		return x.SwitchEnableFabricStats
	}
	return false
}

func (x *TamTelTypeAttribute) GetSwitchEnableFilterStats() bool {
	if x != nil {
		return x.SwitchEnableFilterStats
	}
	return false
}

func (x *TamTelTypeAttribute) GetSwitchEnableResourceUtilizationStats() bool {
	if x != nil {
		return x.SwitchEnableResourceUtilizationStats
	}
	return false
}

func (x *TamTelTypeAttribute) GetFabricQ() bool {
	if x != nil {
		return x.FabricQ
	}
	return false
}

func (x *TamTelTypeAttribute) GetNeEnable() bool {
	if x != nil {
		return x.NeEnable
	}
	return false
}

func (x *TamTelTypeAttribute) GetDscpValue() uint32 {
	if x != nil {
		return x.DscpValue
	}
	return 0
}

func (x *TamTelTypeAttribute) GetMathFunc() uint64 {
	if x != nil {
		return x.MathFunc
	}
	return 0
}

func (x *TamTelTypeAttribute) GetReportId() uint64 {
	if x != nil {
		return x.ReportId
	}
	return 0
}

type TamTransportAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransportType     TamTransportType     `protobuf:"varint,1,opt,name=transport_type,json=transportType,proto3,enum=lemming.dataplane.sai.TamTransportType" json:"transport_type,omitempty"`
	SrcPort           uint32               `protobuf:"varint,2,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstPort           uint32               `protobuf:"varint,3,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	TransportAuthType TamTransportAuthType `protobuf:"varint,4,opt,name=transport_auth_type,json=transportAuthType,proto3,enum=lemming.dataplane.sai.TamTransportAuthType" json:"transport_auth_type,omitempty"`
	Mtu               uint32               `protobuf:"varint,5,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *TamTransportAttribute) Reset() {
	*x = TamTransportAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamTransportAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamTransportAttribute) ProtoMessage() {}

func (x *TamTransportAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamTransportAttribute.ProtoReflect.Descriptor instead.
func (*TamTransportAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{148}
}

func (x *TamTransportAttribute) GetTransportType() TamTransportType {
	if x != nil {
		return x.TransportType
	}
	return TamTransportType_TAM_TRANSPORT_TYPE_UNSPECIFIED
}

func (x *TamTransportAttribute) GetSrcPort() uint32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *TamTransportAttribute) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *TamTransportAttribute) GetTransportAuthType() TamTransportAuthType {
	if x != nil {
		return x.TransportAuthType
	}
	return TamTransportAuthType_TAM_TRANSPORT_AUTH_TYPE_UNSPECIFIED
}

func (x *TamTransportAttribute) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

type TunnelAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 TunnelType              `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.TunnelType" json:"type,omitempty"`
	UnderlayInterface    uint64                  `protobuf:"varint,2,opt,name=underlay_interface,json=underlayInterface,proto3" json:"underlay_interface,omitempty"`
	OverlayInterface     uint64                  `protobuf:"varint,3,opt,name=overlay_interface,json=overlayInterface,proto3" json:"overlay_interface,omitempty"`
	PeerMode             TunnelPeerMode          `protobuf:"varint,4,opt,name=peer_mode,json=peerMode,proto3,enum=lemming.dataplane.sai.TunnelPeerMode" json:"peer_mode,omitempty"`
	EncapSrcIp           []byte                  `protobuf:"bytes,5,opt,name=encap_src_ip,json=encapSrcIp,proto3" json:"encap_src_ip,omitempty"`
	EncapDstIp           []byte                  `protobuf:"bytes,6,opt,name=encap_dst_ip,json=encapDstIp,proto3" json:"encap_dst_ip,omitempty"`
	EncapTtlMode         TunnelTtlMode           `protobuf:"varint,7,opt,name=encap_ttl_mode,json=encapTtlMode,proto3,enum=lemming.dataplane.sai.TunnelTtlMode" json:"encap_ttl_mode,omitempty"`
	EncapTtlVal          uint32                  `protobuf:"varint,8,opt,name=encap_ttl_val,json=encapTtlVal,proto3" json:"encap_ttl_val,omitempty"`
	EncapDscpMode        TunnelDscpMode          `protobuf:"varint,9,opt,name=encap_dscp_mode,json=encapDscpMode,proto3,enum=lemming.dataplane.sai.TunnelDscpMode" json:"encap_dscp_mode,omitempty"`
	EncapDscpVal         uint32                  `protobuf:"varint,10,opt,name=encap_dscp_val,json=encapDscpVal,proto3" json:"encap_dscp_val,omitempty"`
	EncapGreKeyValid     bool                    `protobuf:"varint,11,opt,name=encap_gre_key_valid,json=encapGreKeyValid,proto3" json:"encap_gre_key_valid,omitempty"`
	EncapGreKey          uint32                  `protobuf:"varint,12,opt,name=encap_gre_key,json=encapGreKey,proto3" json:"encap_gre_key,omitempty"`
	EncapEcnMode         TunnelEncapEcnMode      `protobuf:"varint,13,opt,name=encap_ecn_mode,json=encapEcnMode,proto3,enum=lemming.dataplane.sai.TunnelEncapEcnMode" json:"encap_ecn_mode,omitempty"`
	EncapMappers         *Uint64List             `protobuf:"bytes,14,opt,name=encap_mappers,json=encapMappers,proto3" json:"encap_mappers,omitempty"`
	DecapEcnMode         TunnelDecapEcnMode      `protobuf:"varint,15,opt,name=decap_ecn_mode,json=decapEcnMode,proto3,enum=lemming.dataplane.sai.TunnelDecapEcnMode" json:"decap_ecn_mode,omitempty"`
	DecapMappers         *Uint64List             `protobuf:"bytes,16,opt,name=decap_mappers,json=decapMappers,proto3" json:"decap_mappers,omitempty"`
	DecapTtlMode         TunnelTtlMode           `protobuf:"varint,17,opt,name=decap_ttl_mode,json=decapTtlMode,proto3,enum=lemming.dataplane.sai.TunnelTtlMode" json:"decap_ttl_mode,omitempty"`
	DecapDscpMode        TunnelDscpMode          `protobuf:"varint,18,opt,name=decap_dscp_mode,json=decapDscpMode,proto3,enum=lemming.dataplane.sai.TunnelDscpMode" json:"decap_dscp_mode,omitempty"`
	TermTableEntryList   *Uint64List             `protobuf:"bytes,19,opt,name=term_table_entry_list,json=termTableEntryList,proto3" json:"term_table_entry_list,omitempty"`
	LoopbackPacketAction PacketAction            `protobuf:"varint,20,opt,name=loopback_packet_action,json=loopbackPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"loopback_packet_action,omitempty"`
	VxlanUdpSportMode    TunnelVxlanUdpSportMode `protobuf:"varint,21,opt,name=vxlan_udp_sport_mode,json=vxlanUdpSportMode,proto3,enum=lemming.dataplane.sai.TunnelVxlanUdpSportMode" json:"vxlan_udp_sport_mode,omitempty"`
	VxlanUdpSport        uint32                  `protobuf:"varint,22,opt,name=vxlan_udp_sport,json=vxlanUdpSport,proto3" json:"vxlan_udp_sport,omitempty"`
	VxlanUdpSportMask    uint32                  `protobuf:"varint,23,opt,name=vxlan_udp_sport_mask,json=vxlanUdpSportMask,proto3" json:"vxlan_udp_sport_mask,omitempty"`
	SaIndex              uint32                  `protobuf:"varint,24,opt,name=sa_index,json=saIndex,proto3" json:"sa_index,omitempty"`
	IpsecSaPortList      *Uint64List             `protobuf:"bytes,25,opt,name=ipsec_sa_port_list,json=ipsecSaPortList,proto3" json:"ipsec_sa_port_list,omitempty"`
}

func (x *TunnelAttribute) Reset() {
	*x = TunnelAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelAttribute) ProtoMessage() {}

func (x *TunnelAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelAttribute.ProtoReflect.Descriptor instead.
func (*TunnelAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{149}
}

func (x *TunnelAttribute) GetType() TunnelType {
	if x != nil {
		return x.Type
	}
	return TunnelType_TUNNEL_TYPE_UNSPECIFIED
}

func (x *TunnelAttribute) GetUnderlayInterface() uint64 {
	if x != nil {
		return x.UnderlayInterface
	}
	return 0
}

func (x *TunnelAttribute) GetOverlayInterface() uint64 {
	if x != nil {
		return x.OverlayInterface
	}
	return 0
}

func (x *TunnelAttribute) GetPeerMode() TunnelPeerMode {
	if x != nil {
		return x.PeerMode
	}
	return TunnelPeerMode_TUNNEL_PEER_MODE_UNSPECIFIED
}

func (x *TunnelAttribute) GetEncapSrcIp() []byte {
	if x != nil {
		return x.EncapSrcIp
	}
	return nil
}

func (x *TunnelAttribute) GetEncapDstIp() []byte {
	if x != nil {
		return x.EncapDstIp
	}
	return nil
}

func (x *TunnelAttribute) GetEncapTtlMode() TunnelTtlMode {
	if x != nil {
		return x.EncapTtlMode
	}
	return TunnelTtlMode_TUNNEL_TTL_MODE_UNSPECIFIED
}

func (x *TunnelAttribute) GetEncapTtlVal() uint32 {
	if x != nil {
		return x.EncapTtlVal
	}
	return 0
}

func (x *TunnelAttribute) GetEncapDscpMode() TunnelDscpMode {
	if x != nil {
		return x.EncapDscpMode
	}
	return TunnelDscpMode_TUNNEL_DSCP_MODE_UNSPECIFIED
}

func (x *TunnelAttribute) GetEncapDscpVal() uint32 {
	if x != nil {
		return x.EncapDscpVal
	}
	return 0
}

func (x *TunnelAttribute) GetEncapGreKeyValid() bool {
	if x != nil {
		return x.EncapGreKeyValid
	}
	return false
}

func (x *TunnelAttribute) GetEncapGreKey() uint32 {
	if x != nil {
		return x.EncapGreKey
	}
	return 0
}

func (x *TunnelAttribute) GetEncapEcnMode() TunnelEncapEcnMode {
	if x != nil {
		return x.EncapEcnMode
	}
	return TunnelEncapEcnMode_TUNNEL_ENCAP_ECN_MODE_UNSPECIFIED
}

func (x *TunnelAttribute) GetEncapMappers() *Uint64List {
	if x != nil {
		return x.EncapMappers
	}
	return nil
}

func (x *TunnelAttribute) GetDecapEcnMode() TunnelDecapEcnMode {
	if x != nil {
		return x.DecapEcnMode
	}
	return TunnelDecapEcnMode_TUNNEL_DECAP_ECN_MODE_UNSPECIFIED
}

func (x *TunnelAttribute) GetDecapMappers() *Uint64List {
	if x != nil {
		return x.DecapMappers
	}
	return nil
}

func (x *TunnelAttribute) GetDecapTtlMode() TunnelTtlMode {
	if x != nil {
		return x.DecapTtlMode
	}
	return TunnelTtlMode_TUNNEL_TTL_MODE_UNSPECIFIED
}

func (x *TunnelAttribute) GetDecapDscpMode() TunnelDscpMode {
	if x != nil {
		return x.DecapDscpMode
	}
	return TunnelDscpMode_TUNNEL_DSCP_MODE_UNSPECIFIED
}

func (x *TunnelAttribute) GetTermTableEntryList() *Uint64List {
	if x != nil {
		return x.TermTableEntryList
	}
	return nil
}

func (x *TunnelAttribute) GetLoopbackPacketAction() PacketAction {
	if x != nil {
		return x.LoopbackPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *TunnelAttribute) GetVxlanUdpSportMode() TunnelVxlanUdpSportMode {
	if x != nil {
		return x.VxlanUdpSportMode
	}
	return TunnelVxlanUdpSportMode_TUNNEL_VXLAN_UDP_SPORT_MODE_UNSPECIFIED
}

func (x *TunnelAttribute) GetVxlanUdpSport() uint32 {
	if x != nil {
		return x.VxlanUdpSport
	}
	return 0
}

func (x *TunnelAttribute) GetVxlanUdpSportMask() uint32 {
	if x != nil {
		return x.VxlanUdpSportMask
	}
	return 0
}

func (x *TunnelAttribute) GetSaIndex() uint32 {
	if x != nil {
		return x.SaIndex
	}
	return 0
}

func (x *TunnelAttribute) GetIpsecSaPortList() *Uint64List {
	if x != nil {
		return x.IpsecSaPortList
	}
	return nil
}

type TunnelMapAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      TunnelMapType `protobuf:"varint,1,opt,name=type,proto3,enum=lemming.dataplane.sai.TunnelMapType" json:"type,omitempty"`
	EntryList *Uint64List   `protobuf:"bytes,2,opt,name=entry_list,json=entryList,proto3" json:"entry_list,omitempty"`
}

func (x *TunnelMapAttribute) Reset() {
	*x = TunnelMapAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelMapAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelMapAttribute) ProtoMessage() {}

func (x *TunnelMapAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelMapAttribute.ProtoReflect.Descriptor instead.
func (*TunnelMapAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{150}
}

func (x *TunnelMapAttribute) GetType() TunnelMapType {
	if x != nil {
		return x.Type
	}
	return TunnelMapType_TUNNEL_MAP_TYPE_UNSPECIFIED
}

func (x *TunnelMapAttribute) GetEntryList() *Uint64List {
	if x != nil {
		return x.EntryList
	}
	return nil
}

type TunnelMapEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelMapType        TunnelMapType `protobuf:"varint,1,opt,name=tunnel_map_type,json=tunnelMapType,proto3,enum=lemming.dataplane.sai.TunnelMapType" json:"tunnel_map_type,omitempty"`
	TunnelMap            uint64        `protobuf:"varint,2,opt,name=tunnel_map,json=tunnelMap,proto3" json:"tunnel_map,omitempty"`
	OecnKey              uint32        `protobuf:"varint,3,opt,name=oecn_key,json=oecnKey,proto3" json:"oecn_key,omitempty"`
	OecnValue            uint32        `protobuf:"varint,4,opt,name=oecn_value,json=oecnValue,proto3" json:"oecn_value,omitempty"`
	UecnKey              uint32        `protobuf:"varint,5,opt,name=uecn_key,json=uecnKey,proto3" json:"uecn_key,omitempty"`
	UecnValue            uint32        `protobuf:"varint,6,opt,name=uecn_value,json=uecnValue,proto3" json:"uecn_value,omitempty"`
	VlanIdKey            uint32        `protobuf:"varint,7,opt,name=vlan_id_key,json=vlanIdKey,proto3" json:"vlan_id_key,omitempty"`
	VlanIdValue          uint32        `protobuf:"varint,8,opt,name=vlan_id_value,json=vlanIdValue,proto3" json:"vlan_id_value,omitempty"`
	VniIdKey             uint32        `protobuf:"varint,9,opt,name=vni_id_key,json=vniIdKey,proto3" json:"vni_id_key,omitempty"`
	VniIdValue           uint32        `protobuf:"varint,10,opt,name=vni_id_value,json=vniIdValue,proto3" json:"vni_id_value,omitempty"`
	BridgeIdKey          uint64        `protobuf:"varint,11,opt,name=bridge_id_key,json=bridgeIdKey,proto3" json:"bridge_id_key,omitempty"`
	BridgeIdValue        uint64        `protobuf:"varint,12,opt,name=bridge_id_value,json=bridgeIdValue,proto3" json:"bridge_id_value,omitempty"`
	VirtualRouterIdKey   uint64        `protobuf:"varint,13,opt,name=virtual_router_id_key,json=virtualRouterIdKey,proto3" json:"virtual_router_id_key,omitempty"`
	VirtualRouterIdValue uint64        `protobuf:"varint,14,opt,name=virtual_router_id_value,json=virtualRouterIdValue,proto3" json:"virtual_router_id_value,omitempty"`
	VsidIdKey            uint32        `protobuf:"varint,15,opt,name=vsid_id_key,json=vsidIdKey,proto3" json:"vsid_id_key,omitempty"`
	VsidIdValue          uint32        `protobuf:"varint,16,opt,name=vsid_id_value,json=vsidIdValue,proto3" json:"vsid_id_value,omitempty"`
}

func (x *TunnelMapEntryAttribute) Reset() {
	*x = TunnelMapEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelMapEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelMapEntryAttribute) ProtoMessage() {}

func (x *TunnelMapEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelMapEntryAttribute.ProtoReflect.Descriptor instead.
func (*TunnelMapEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{151}
}

func (x *TunnelMapEntryAttribute) GetTunnelMapType() TunnelMapType {
	if x != nil {
		return x.TunnelMapType
	}
	return TunnelMapType_TUNNEL_MAP_TYPE_UNSPECIFIED
}

func (x *TunnelMapEntryAttribute) GetTunnelMap() uint64 {
	if x != nil {
		return x.TunnelMap
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetOecnKey() uint32 {
	if x != nil {
		return x.OecnKey
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetOecnValue() uint32 {
	if x != nil {
		return x.OecnValue
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetUecnKey() uint32 {
	if x != nil {
		return x.UecnKey
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetUecnValue() uint32 {
	if x != nil {
		return x.UecnValue
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetVlanIdKey() uint32 {
	if x != nil {
		return x.VlanIdKey
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetVlanIdValue() uint32 {
	if x != nil {
		return x.VlanIdValue
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetVniIdKey() uint32 {
	if x != nil {
		return x.VniIdKey
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetVniIdValue() uint32 {
	if x != nil {
		return x.VniIdValue
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetBridgeIdKey() uint64 {
	if x != nil {
		return x.BridgeIdKey
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetBridgeIdValue() uint64 {
	if x != nil {
		return x.BridgeIdValue
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetVirtualRouterIdKey() uint64 {
	if x != nil {
		return x.VirtualRouterIdKey
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetVirtualRouterIdValue() uint64 {
	if x != nil {
		return x.VirtualRouterIdValue
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetVsidIdKey() uint32 {
	if x != nil {
		return x.VsidIdKey
	}
	return 0
}

func (x *TunnelMapEntryAttribute) GetVsidIdValue() uint32 {
	if x != nil {
		return x.VsidIdValue
	}
	return 0
}

type TunnelTermTableEntryAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrId           uint64                   `protobuf:"varint,1,opt,name=vr_id,json=vrId,proto3" json:"vr_id,omitempty"`
	Type           TunnelTermTableEntryType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.TunnelTermTableEntryType" json:"type,omitempty"`
	DstIp          []byte                   `protobuf:"bytes,3,opt,name=dst_ip,json=dstIp,proto3" json:"dst_ip,omitempty"`
	DstIpMask      []byte                   `protobuf:"bytes,4,opt,name=dst_ip_mask,json=dstIpMask,proto3" json:"dst_ip_mask,omitempty"`
	SrcIp          []byte                   `protobuf:"bytes,5,opt,name=src_ip,json=srcIp,proto3" json:"src_ip,omitempty"`
	SrcIpMask      []byte                   `protobuf:"bytes,6,opt,name=src_ip_mask,json=srcIpMask,proto3" json:"src_ip_mask,omitempty"`
	TunnelType     TunnelType               `protobuf:"varint,7,opt,name=tunnel_type,json=tunnelType,proto3,enum=lemming.dataplane.sai.TunnelType" json:"tunnel_type,omitempty"`
	ActionTunnelId uint64                   `protobuf:"varint,8,opt,name=action_tunnel_id,json=actionTunnelId,proto3" json:"action_tunnel_id,omitempty"`
	IpAddrFamily   IpAddrFamily             `protobuf:"varint,9,opt,name=ip_addr_family,json=ipAddrFamily,proto3,enum=lemming.dataplane.sai.IpAddrFamily" json:"ip_addr_family,omitempty"`
	IpsecVerified  bool                     `protobuf:"varint,10,opt,name=ipsec_verified,json=ipsecVerified,proto3" json:"ipsec_verified,omitempty"`
}

func (x *TunnelTermTableEntryAttribute) Reset() {
	*x = TunnelTermTableEntryAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelTermTableEntryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelTermTableEntryAttribute) ProtoMessage() {}

func (x *TunnelTermTableEntryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelTermTableEntryAttribute.ProtoReflect.Descriptor instead.
func (*TunnelTermTableEntryAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{152}
}

func (x *TunnelTermTableEntryAttribute) GetVrId() uint64 {
	if x != nil {
		return x.VrId
	}
	return 0
}

func (x *TunnelTermTableEntryAttribute) GetType() TunnelTermTableEntryType {
	if x != nil {
		return x.Type
	}
	return TunnelTermTableEntryType_TUNNEL_TERM_TABLE_ENTRY_TYPE_UNSPECIFIED
}

func (x *TunnelTermTableEntryAttribute) GetDstIp() []byte {
	if x != nil {
		return x.DstIp
	}
	return nil
}

func (x *TunnelTermTableEntryAttribute) GetDstIpMask() []byte {
	if x != nil {
		return x.DstIpMask
	}
	return nil
}

func (x *TunnelTermTableEntryAttribute) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *TunnelTermTableEntryAttribute) GetSrcIpMask() []byte {
	if x != nil {
		return x.SrcIpMask
	}
	return nil
}

func (x *TunnelTermTableEntryAttribute) GetTunnelType() TunnelType {
	if x != nil {
		return x.TunnelType
	}
	return TunnelType_TUNNEL_TYPE_UNSPECIFIED
}

func (x *TunnelTermTableEntryAttribute) GetActionTunnelId() uint64 {
	if x != nil {
		return x.ActionTunnelId
	}
	return 0
}

func (x *TunnelTermTableEntryAttribute) GetIpAddrFamily() IpAddrFamily {
	if x != nil {
		return x.IpAddrFamily
	}
	return IpAddrFamily_IP_ADDR_FAMILY_UNSPECIFIED
}

func (x *TunnelTermTableEntryAttribute) GetIpsecVerified() bool {
	if x != nil {
		return x.IpsecVerified
	}
	return false
}

type UdfAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId  uint64      `protobuf:"varint,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	GroupId  uint64      `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Base     UdfBase     `protobuf:"varint,3,opt,name=base,proto3,enum=lemming.dataplane.sai.UdfBase" json:"base,omitempty"`
	Offset   uint32      `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	HashMask *Uint32List `protobuf:"bytes,5,opt,name=hash_mask,json=hashMask,proto3" json:"hash_mask,omitempty"`
}

func (x *UdfAttribute) Reset() {
	*x = UdfAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UdfAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UdfAttribute) ProtoMessage() {}

func (x *UdfAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UdfAttribute.ProtoReflect.Descriptor instead.
func (*UdfAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{153}
}

func (x *UdfAttribute) GetMatchId() uint64 {
	if x != nil {
		return x.MatchId
	}
	return 0
}

func (x *UdfAttribute) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *UdfAttribute) GetBase() UdfBase {
	if x != nil {
		return x.Base
	}
	return UdfBase_UDF_BASE_UNSPECIFIED
}

func (x *UdfAttribute) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UdfAttribute) GetHashMask() *Uint32List {
	if x != nil {
		return x.HashMask
	}
	return nil
}

type UdfGroupAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UdfList *Uint64List  `protobuf:"bytes,1,opt,name=udf_list,json=udfList,proto3" json:"udf_list,omitempty"`
	Type    UdfGroupType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.UdfGroupType" json:"type,omitempty"`
	Length  uint32       `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *UdfGroupAttribute) Reset() {
	*x = UdfGroupAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UdfGroupAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UdfGroupAttribute) ProtoMessage() {}

func (x *UdfGroupAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UdfGroupAttribute.ProtoReflect.Descriptor instead.
func (*UdfGroupAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{154}
}

func (x *UdfGroupAttribute) GetUdfList() *Uint64List {
	if x != nil {
		return x.UdfList
	}
	return nil
}

func (x *UdfGroupAttribute) GetType() UdfGroupType {
	if x != nil {
		return x.Type
	}
	return UdfGroupType_UDF_GROUP_TYPE_UNSPECIFIED
}

func (x *UdfGroupAttribute) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type UdfMatchAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	L2Type   *AclFieldData `protobuf:"bytes,1,opt,name=l2_type,json=l2Type,proto3" json:"l2_type,omitempty"`
	L3Type   *AclFieldData `protobuf:"bytes,2,opt,name=l3_type,json=l3Type,proto3" json:"l3_type,omitempty"`
	GreType  *AclFieldData `protobuf:"bytes,3,opt,name=gre_type,json=greType,proto3" json:"gre_type,omitempty"`
	Priority uint32        `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *UdfMatchAttribute) Reset() {
	*x = UdfMatchAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UdfMatchAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UdfMatchAttribute) ProtoMessage() {}

func (x *UdfMatchAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UdfMatchAttribute.ProtoReflect.Descriptor instead.
func (*UdfMatchAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{155}
}

func (x *UdfMatchAttribute) GetL2Type() *AclFieldData {
	if x != nil {
		return x.L2Type
	}
	return nil
}

func (x *UdfMatchAttribute) GetL3Type() *AclFieldData {
	if x != nil {
		return x.L3Type
	}
	return nil
}

func (x *UdfMatchAttribute) GetGreType() *AclFieldData {
	if x != nil {
		return x.GreType
	}
	return nil
}

func (x *UdfMatchAttribute) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type VirtualRouterAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminV4State                   bool         `protobuf:"varint,1,opt,name=admin_v4_state,json=adminV4State,proto3" json:"admin_v4_state,omitempty"`
	AdminV6State                   bool         `protobuf:"varint,2,opt,name=admin_v6_state,json=adminV6State,proto3" json:"admin_v6_state,omitempty"`
	SrcMacAddress                  []byte       `protobuf:"bytes,3,opt,name=src_mac_address,json=srcMacAddress,proto3" json:"src_mac_address,omitempty"`
	ViolationTtl1PacketAction      PacketAction `protobuf:"varint,4,opt,name=violation_ttl1_packet_action,json=violationTtl1PacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"violation_ttl1_packet_action,omitempty"`
	ViolationIpOptionsPacketAction PacketAction `protobuf:"varint,5,opt,name=violation_ip_options_packet_action,json=violationIpOptionsPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"violation_ip_options_packet_action,omitempty"`
	UnknownL3MulticastPacketAction PacketAction `protobuf:"varint,6,opt,name=unknown_l3_multicast_packet_action,json=unknownL3MulticastPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction" json:"unknown_l3_multicast_packet_action,omitempty"`
	Label                          []byte       `protobuf:"bytes,7,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *VirtualRouterAttribute) Reset() {
	*x = VirtualRouterAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualRouterAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualRouterAttribute) ProtoMessage() {}

func (x *VirtualRouterAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualRouterAttribute.ProtoReflect.Descriptor instead.
func (*VirtualRouterAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{156}
}

func (x *VirtualRouterAttribute) GetAdminV4State() bool {
	if x != nil {
		return x.AdminV4State
	}
	return false
}

func (x *VirtualRouterAttribute) GetAdminV6State() bool {
	if x != nil {
		return x.AdminV6State
	}
	return false
}

func (x *VirtualRouterAttribute) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *VirtualRouterAttribute) GetViolationTtl1PacketAction() PacketAction {
	if x != nil {
		return x.ViolationTtl1PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *VirtualRouterAttribute) GetViolationIpOptionsPacketAction() PacketAction {
	if x != nil {
		return x.ViolationIpOptionsPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *VirtualRouterAttribute) GetUnknownL3MulticastPacketAction() PacketAction {
	if x != nil {
		return x.UnknownL3MulticastPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *VirtualRouterAttribute) GetLabel() []byte {
	if x != nil {
		return x.Label
	}
	return nil
}

type VlanAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId                             uint32                 `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	MemberList                         *Uint64List            `protobuf:"bytes,2,opt,name=member_list,json=memberList,proto3" json:"member_list,omitempty"`
	MaxLearnedAddresses                uint32                 `protobuf:"varint,3,opt,name=max_learned_addresses,json=maxLearnedAddresses,proto3" json:"max_learned_addresses,omitempty"`
	StpInstance                        uint64                 `protobuf:"varint,4,opt,name=stp_instance,json=stpInstance,proto3" json:"stp_instance,omitempty"`
	LearnDisable                       bool                   `protobuf:"varint,5,opt,name=learn_disable,json=learnDisable,proto3" json:"learn_disable,omitempty"`
	Ipv4McastLookupKeyType             VlanMcastLookupKeyType `protobuf:"varint,6,opt,name=ipv4_mcast_lookup_key_type,json=ipv4McastLookupKeyType,proto3,enum=lemming.dataplane.sai.VlanMcastLookupKeyType" json:"ipv4_mcast_lookup_key_type,omitempty"`
	Ipv6McastLookupKeyType             VlanMcastLookupKeyType `protobuf:"varint,7,opt,name=ipv6_mcast_lookup_key_type,json=ipv6McastLookupKeyType,proto3,enum=lemming.dataplane.sai.VlanMcastLookupKeyType" json:"ipv6_mcast_lookup_key_type,omitempty"`
	UnknownNonIpMcastOutputGroupId     uint64                 `protobuf:"varint,8,opt,name=unknown_non_ip_mcast_output_group_id,json=unknownNonIpMcastOutputGroupId,proto3" json:"unknown_non_ip_mcast_output_group_id,omitempty"`
	UnknownIpv4McastOutputGroupId      uint64                 `protobuf:"varint,9,opt,name=unknown_ipv4_mcast_output_group_id,json=unknownIpv4McastOutputGroupId,proto3" json:"unknown_ipv4_mcast_output_group_id,omitempty"`
	UnknownIpv6McastOutputGroupId      uint64                 `protobuf:"varint,10,opt,name=unknown_ipv6_mcast_output_group_id,json=unknownIpv6McastOutputGroupId,proto3" json:"unknown_ipv6_mcast_output_group_id,omitempty"`
	UnknownLinklocalMcastOutputGroupId uint64                 `protobuf:"varint,11,opt,name=unknown_linklocal_mcast_output_group_id,json=unknownLinklocalMcastOutputGroupId,proto3" json:"unknown_linklocal_mcast_output_group_id,omitempty"`
	IngressAcl                         uint64                 `protobuf:"varint,12,opt,name=ingress_acl,json=ingressAcl,proto3" json:"ingress_acl,omitempty"`
	EgressAcl                          uint64                 `protobuf:"varint,13,opt,name=egress_acl,json=egressAcl,proto3" json:"egress_acl,omitempty"`
	MetaData                           uint32                 `protobuf:"varint,14,opt,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty"`
	UnknownUnicastFloodControlType     VlanFloodControlType   `protobuf:"varint,15,opt,name=unknown_unicast_flood_control_type,json=unknownUnicastFloodControlType,proto3,enum=lemming.dataplane.sai.VlanFloodControlType" json:"unknown_unicast_flood_control_type,omitempty"`
	UnknownUnicastFloodGroup           uint64                 `protobuf:"varint,16,opt,name=unknown_unicast_flood_group,json=unknownUnicastFloodGroup,proto3" json:"unknown_unicast_flood_group,omitempty"`
	UnknownMulticastFloodControlType   VlanFloodControlType   `protobuf:"varint,17,opt,name=unknown_multicast_flood_control_type,json=unknownMulticastFloodControlType,proto3,enum=lemming.dataplane.sai.VlanFloodControlType" json:"unknown_multicast_flood_control_type,omitempty"`
	UnknownMulticastFloodGroup         uint64                 `protobuf:"varint,18,opt,name=unknown_multicast_flood_group,json=unknownMulticastFloodGroup,proto3" json:"unknown_multicast_flood_group,omitempty"`
	BroadcastFloodControlType          VlanFloodControlType   `protobuf:"varint,19,opt,name=broadcast_flood_control_type,json=broadcastFloodControlType,proto3,enum=lemming.dataplane.sai.VlanFloodControlType" json:"broadcast_flood_control_type,omitempty"`
	BroadcastFloodGroup                uint64                 `protobuf:"varint,20,opt,name=broadcast_flood_group,json=broadcastFloodGroup,proto3" json:"broadcast_flood_group,omitempty"`
	CustomIgmpSnoopingEnable           bool                   `protobuf:"varint,21,opt,name=custom_igmp_snooping_enable,json=customIgmpSnoopingEnable,proto3" json:"custom_igmp_snooping_enable,omitempty"`
	TamObject                          *Uint64List            `protobuf:"bytes,22,opt,name=tam_object,json=tamObject,proto3" json:"tam_object,omitempty"`
}

func (x *VlanAttribute) Reset() {
	*x = VlanAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanAttribute) ProtoMessage() {}

func (x *VlanAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanAttribute.ProtoReflect.Descriptor instead.
func (*VlanAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{157}
}

func (x *VlanAttribute) GetVlanId() uint32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *VlanAttribute) GetMemberList() *Uint64List {
	if x != nil {
		return x.MemberList
	}
	return nil
}

func (x *VlanAttribute) GetMaxLearnedAddresses() uint32 {
	if x != nil {
		return x.MaxLearnedAddresses
	}
	return 0
}

func (x *VlanAttribute) GetStpInstance() uint64 {
	if x != nil {
		return x.StpInstance
	}
	return 0
}

func (x *VlanAttribute) GetLearnDisable() bool {
	if x != nil {
		return x.LearnDisable
	}
	return false
}

func (x *VlanAttribute) GetIpv4McastLookupKeyType() VlanMcastLookupKeyType {
	if x != nil {
		return x.Ipv4McastLookupKeyType
	}
	return VlanMcastLookupKeyType_VLAN_MCAST_LOOKUP_KEY_TYPE_UNSPECIFIED
}

func (x *VlanAttribute) GetIpv6McastLookupKeyType() VlanMcastLookupKeyType {
	if x != nil {
		return x.Ipv6McastLookupKeyType
	}
	return VlanMcastLookupKeyType_VLAN_MCAST_LOOKUP_KEY_TYPE_UNSPECIFIED
}

func (x *VlanAttribute) GetUnknownNonIpMcastOutputGroupId() uint64 {
	if x != nil {
		return x.UnknownNonIpMcastOutputGroupId
	}
	return 0
}

func (x *VlanAttribute) GetUnknownIpv4McastOutputGroupId() uint64 {
	if x != nil {
		return x.UnknownIpv4McastOutputGroupId
	}
	return 0
}

func (x *VlanAttribute) GetUnknownIpv6McastOutputGroupId() uint64 {
	if x != nil {
		return x.UnknownIpv6McastOutputGroupId
	}
	return 0
}

func (x *VlanAttribute) GetUnknownLinklocalMcastOutputGroupId() uint64 {
	if x != nil {
		return x.UnknownLinklocalMcastOutputGroupId
	}
	return 0
}

func (x *VlanAttribute) GetIngressAcl() uint64 {
	if x != nil {
		return x.IngressAcl
	}
	return 0
}

func (x *VlanAttribute) GetEgressAcl() uint64 {
	if x != nil {
		return x.EgressAcl
	}
	return 0
}

func (x *VlanAttribute) GetMetaData() uint32 {
	if x != nil {
		return x.MetaData
	}
	return 0
}

func (x *VlanAttribute) GetUnknownUnicastFloodControlType() VlanFloodControlType {
	if x != nil {
		return x.UnknownUnicastFloodControlType
	}
	return VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *VlanAttribute) GetUnknownUnicastFloodGroup() uint64 {
	if x != nil {
		return x.UnknownUnicastFloodGroup
	}
	return 0
}

func (x *VlanAttribute) GetUnknownMulticastFloodControlType() VlanFloodControlType {
	if x != nil {
		return x.UnknownMulticastFloodControlType
	}
	return VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *VlanAttribute) GetUnknownMulticastFloodGroup() uint64 {
	if x != nil {
		return x.UnknownMulticastFloodGroup
	}
	return 0
}

func (x *VlanAttribute) GetBroadcastFloodControlType() VlanFloodControlType {
	if x != nil {
		return x.BroadcastFloodControlType
	}
	return VlanFloodControlType_VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *VlanAttribute) GetBroadcastFloodGroup() uint64 {
	if x != nil {
		return x.BroadcastFloodGroup
	}
	return 0
}

func (x *VlanAttribute) GetCustomIgmpSnoopingEnable() bool {
	if x != nil {
		return x.CustomIgmpSnoopingEnable
	}
	return false
}

func (x *VlanAttribute) GetTamObject() *Uint64List {
	if x != nil {
		return x.TamObject
	}
	return nil
}

type VlanMemberAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VlanId          uint64          `protobuf:"varint,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	BridgePortId    uint64          `protobuf:"varint,2,opt,name=bridge_port_id,json=bridgePortId,proto3" json:"bridge_port_id,omitempty"`
	VlanTaggingMode VlanTaggingMode `protobuf:"varint,3,opt,name=vlan_tagging_mode,json=vlanTaggingMode,proto3,enum=lemming.dataplane.sai.VlanTaggingMode" json:"vlan_tagging_mode,omitempty"`
}

func (x *VlanMemberAttribute) Reset() {
	*x = VlanMemberAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanMemberAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanMemberAttribute) ProtoMessage() {}

func (x *VlanMemberAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanMemberAttribute.ProtoReflect.Descriptor instead.
func (*VlanMemberAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{158}
}

func (x *VlanMemberAttribute) GetVlanId() uint64 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *VlanMemberAttribute) GetBridgePortId() uint64 {
	if x != nil {
		return x.BridgePortId
	}
	return 0
}

func (x *VlanMemberAttribute) GetVlanTaggingMode() VlanTaggingMode {
	if x != nil {
		return x.VlanTaggingMode
	}
	return VlanTaggingMode_VLAN_TAGGING_MODE_UNSPECIFIED
}

type WredAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GreenEnable                    bool        `protobuf:"varint,1,opt,name=green_enable,json=greenEnable,proto3" json:"green_enable,omitempty"`
	GreenMinThreshold              uint32      `protobuf:"varint,2,opt,name=green_min_threshold,json=greenMinThreshold,proto3" json:"green_min_threshold,omitempty"`
	GreenMaxThreshold              uint32      `protobuf:"varint,3,opt,name=green_max_threshold,json=greenMaxThreshold,proto3" json:"green_max_threshold,omitempty"`
	GreenDropProbability           uint32      `protobuf:"varint,4,opt,name=green_drop_probability,json=greenDropProbability,proto3" json:"green_drop_probability,omitempty"`
	YellowEnable                   bool        `protobuf:"varint,5,opt,name=yellow_enable,json=yellowEnable,proto3" json:"yellow_enable,omitempty"`
	YellowMinThreshold             uint32      `protobuf:"varint,6,opt,name=yellow_min_threshold,json=yellowMinThreshold,proto3" json:"yellow_min_threshold,omitempty"`
	YellowMaxThreshold             uint32      `protobuf:"varint,7,opt,name=yellow_max_threshold,json=yellowMaxThreshold,proto3" json:"yellow_max_threshold,omitempty"`
	YellowDropProbability          uint32      `protobuf:"varint,8,opt,name=yellow_drop_probability,json=yellowDropProbability,proto3" json:"yellow_drop_probability,omitempty"`
	RedEnable                      bool        `protobuf:"varint,9,opt,name=red_enable,json=redEnable,proto3" json:"red_enable,omitempty"`
	RedMinThreshold                uint32      `protobuf:"varint,10,opt,name=red_min_threshold,json=redMinThreshold,proto3" json:"red_min_threshold,omitempty"`
	RedMaxThreshold                uint32      `protobuf:"varint,11,opt,name=red_max_threshold,json=redMaxThreshold,proto3" json:"red_max_threshold,omitempty"`
	RedDropProbability             uint32      `protobuf:"varint,12,opt,name=red_drop_probability,json=redDropProbability,proto3" json:"red_drop_probability,omitempty"`
	Weight                         uint32      `protobuf:"varint,13,opt,name=weight,proto3" json:"weight,omitempty"`
	EcnMarkMode                    EcnMarkMode `protobuf:"varint,14,opt,name=ecn_mark_mode,json=ecnMarkMode,proto3,enum=lemming.dataplane.sai.EcnMarkMode" json:"ecn_mark_mode,omitempty"`
	EcnGreenMinThreshold           uint32      `protobuf:"varint,15,opt,name=ecn_green_min_threshold,json=ecnGreenMinThreshold,proto3" json:"ecn_green_min_threshold,omitempty"`
	EcnGreenMaxThreshold           uint32      `protobuf:"varint,16,opt,name=ecn_green_max_threshold,json=ecnGreenMaxThreshold,proto3" json:"ecn_green_max_threshold,omitempty"`
	EcnGreenMarkProbability        uint32      `protobuf:"varint,17,opt,name=ecn_green_mark_probability,json=ecnGreenMarkProbability,proto3" json:"ecn_green_mark_probability,omitempty"`
	EcnYellowMinThreshold          uint32      `protobuf:"varint,18,opt,name=ecn_yellow_min_threshold,json=ecnYellowMinThreshold,proto3" json:"ecn_yellow_min_threshold,omitempty"`
	EcnYellowMaxThreshold          uint32      `protobuf:"varint,19,opt,name=ecn_yellow_max_threshold,json=ecnYellowMaxThreshold,proto3" json:"ecn_yellow_max_threshold,omitempty"`
	EcnYellowMarkProbability       uint32      `protobuf:"varint,20,opt,name=ecn_yellow_mark_probability,json=ecnYellowMarkProbability,proto3" json:"ecn_yellow_mark_probability,omitempty"`
	EcnRedMinThreshold             uint32      `protobuf:"varint,21,opt,name=ecn_red_min_threshold,json=ecnRedMinThreshold,proto3" json:"ecn_red_min_threshold,omitempty"`
	EcnRedMaxThreshold             uint32      `protobuf:"varint,22,opt,name=ecn_red_max_threshold,json=ecnRedMaxThreshold,proto3" json:"ecn_red_max_threshold,omitempty"`
	EcnRedMarkProbability          uint32      `protobuf:"varint,23,opt,name=ecn_red_mark_probability,json=ecnRedMarkProbability,proto3" json:"ecn_red_mark_probability,omitempty"`
	EcnColorUnawareMinThreshold    uint32      `protobuf:"varint,24,opt,name=ecn_color_unaware_min_threshold,json=ecnColorUnawareMinThreshold,proto3" json:"ecn_color_unaware_min_threshold,omitempty"`
	EcnColorUnawareMaxThreshold    uint32      `protobuf:"varint,25,opt,name=ecn_color_unaware_max_threshold,json=ecnColorUnawareMaxThreshold,proto3" json:"ecn_color_unaware_max_threshold,omitempty"`
	EcnColorUnawareMarkProbability uint32      `protobuf:"varint,26,opt,name=ecn_color_unaware_mark_probability,json=ecnColorUnawareMarkProbability,proto3" json:"ecn_color_unaware_mark_probability,omitempty"`
}

func (x *WredAttribute) Reset() {
	*x = WredAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_common_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WredAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WredAttribute) ProtoMessage() {}

func (x *WredAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_common_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WredAttribute.ProtoReflect.Descriptor instead.
func (*WredAttribute) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_common_proto_rawDescGZIP(), []int{159}
}

func (x *WredAttribute) GetGreenEnable() bool {
	if x != nil {
		return x.GreenEnable
	}
	return false
}

func (x *WredAttribute) GetGreenMinThreshold() uint32 {
	if x != nil {
		return x.GreenMinThreshold
	}
	return 0
}

func (x *WredAttribute) GetGreenMaxThreshold() uint32 {
	if x != nil {
		return x.GreenMaxThreshold
	}
	return 0
}

func (x *WredAttribute) GetGreenDropProbability() uint32 {
	if x != nil {
		return x.GreenDropProbability
	}
	return 0
}

func (x *WredAttribute) GetYellowEnable() bool {
	if x != nil {
		return x.YellowEnable
	}
	return false
}

func (x *WredAttribute) GetYellowMinThreshold() uint32 {
	if x != nil {
		return x.YellowMinThreshold
	}
	return 0
}

func (x *WredAttribute) GetYellowMaxThreshold() uint32 {
	if x != nil {
		return x.YellowMaxThreshold
	}
	return 0
}

func (x *WredAttribute) GetYellowDropProbability() uint32 {
	if x != nil {
		return x.YellowDropProbability
	}
	return 0
}

func (x *WredAttribute) GetRedEnable() bool {
	if x != nil {
		return x.RedEnable
	}
	return false
}

func (x *WredAttribute) GetRedMinThreshold() uint32 {
	if x != nil {
		return x.RedMinThreshold
	}
	return 0
}

func (x *WredAttribute) GetRedMaxThreshold() uint32 {
	if x != nil {
		return x.RedMaxThreshold
	}
	return 0
}

func (x *WredAttribute) GetRedDropProbability() uint32 {
	if x != nil {
		return x.RedDropProbability
	}
	return 0
}

func (x *WredAttribute) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *WredAttribute) GetEcnMarkMode() EcnMarkMode {
	if x != nil {
		return x.EcnMarkMode
	}
	return EcnMarkMode_ECN_MARK_MODE_UNSPECIFIED
}

func (x *WredAttribute) GetEcnGreenMinThreshold() uint32 {
	if x != nil {
		return x.EcnGreenMinThreshold
	}
	return 0
}

func (x *WredAttribute) GetEcnGreenMaxThreshold() uint32 {
	if x != nil {
		return x.EcnGreenMaxThreshold
	}
	return 0
}

func (x *WredAttribute) GetEcnGreenMarkProbability() uint32 {
	if x != nil {
		return x.EcnGreenMarkProbability
	}
	return 0
}

func (x *WredAttribute) GetEcnYellowMinThreshold() uint32 {
	if x != nil {
		return x.EcnYellowMinThreshold
	}
	return 0
}

func (x *WredAttribute) GetEcnYellowMaxThreshold() uint32 {
	if x != nil {
		return x.EcnYellowMaxThreshold
	}
	return 0
}

func (x *WredAttribute) GetEcnYellowMarkProbability() uint32 {
	if x != nil {
		return x.EcnYellowMarkProbability
	}
	return 0
}

func (x *WredAttribute) GetEcnRedMinThreshold() uint32 {
	if x != nil {
		return x.EcnRedMinThreshold
	}
	return 0
}

func (x *WredAttribute) GetEcnRedMaxThreshold() uint32 {
	if x != nil {
		return x.EcnRedMaxThreshold
	}
	return 0
}

func (x *WredAttribute) GetEcnRedMarkProbability() uint32 {
	if x != nil {
		return x.EcnRedMarkProbability
	}
	return 0
}

func (x *WredAttribute) GetEcnColorUnawareMinThreshold() uint32 {
	if x != nil {
		return x.EcnColorUnawareMinThreshold
	}
	return 0
}

func (x *WredAttribute) GetEcnColorUnawareMaxThreshold() uint32 {
	if x != nil {
		return x.EcnColorUnawareMaxThreshold
	}
	return 0
}

func (x *WredAttribute) GetEcnColorUnawareMarkProbability() uint32 {
	if x != nil {
		return x.EcnColorUnawareMarkProbability
	}
	return 0
}

var File_dataplane_standalone_proto_common_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_common_proto_rawDesc = []byte{
	0x0a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf1, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x75,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x75, 0x69, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x06, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x06, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x69, 0x0a, 0x0d, 0x41, 0x43, 0x4c, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xc1, 0x03, 0x0a, 0x0c, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x61, 0x73,
	0x6b, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x61, 0x73, 0x6b, 0x55, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x4d,
	0x61, 0x63, 0x12, 0x19, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x61, 0x73, 0x6b, 0x49, 0x70, 0x12, 0x40, 0x0a,
	0x09, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1d,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x55, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x01, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x63, 0x12, 0x19, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x69, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x70, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x06, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x62,
	0x69, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x4e, 0x75, 0x6d,
	0x22, 0x9a, 0x01, 0x0a, 0x25, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x66,
	0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x62, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x53, 0x0a,
	0x16, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x5d, 0x0a, 0x08, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x05,
	0x62, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x62, 0x76, 0x49,
	0x64, 0x22, 0xd8, 0x01, 0x0a, 0x18, 0x46, 0x64, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46, 0x64, 0x62, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x66, 0x64, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x66, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x05,
	0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x22, 0x3f, 0x0a, 0x0a,
	0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x32, 0x0a,
	0x08, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x49, 0x70, 0x6d, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x76, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x72, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x6d, 0x63, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x1d, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x70, 0x73, 0x65, 0x63,
	0x5f, 0x73, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x70,
	0x73, 0x65, 0x63, 0x53, 0x61, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x1b, 0x69, 0x70, 0x73, 0x65, 0x63,
	0x5f, 0x73, 0x61, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x4f, 0x63, 0x74, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x17, 0x69, 0x70,
	0x73, 0x65, 0x63, 0x53, 0x61, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x1c, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x6e, 0x41, 0x74, 0x4d, 0x61, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x4c, 0x32, 0x6d, 0x63, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x13, 0x0a, 0x05, 0x62, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04,
	0x62, 0x76, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4c, 0x32, 0x6d, 0x63, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x07, 0x55, 0x69, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x6d, 0x61, 0x70, 0x1a, 0x3a, 0x0a, 0x0c, 0x55,
	0x69, 0x6e, 0x74, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62, 0x0a, 0x0d, 0x4d, 0x63, 0x61, 0x73, 0x74,
	0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x76, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x62, 0x76, 0x49, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x0a,
	0x4d, 0x79, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x72, 0x67, 0x73, 0x4c, 0x65, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73,
	0x69, 0x64, 0x22, 0x89, 0x03, 0x0a, 0x0c, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x53, 0x72,
	0x63, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x44, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x6b,
	0x65, 0x79, 0x4c, 0x34, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6b,
	0x65, 0x79, 0x5f, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x4c, 0x34, 0x44, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x6d, 0x61, 0x73,
	0x6b, 0x53, 0x72, 0x63, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x64,
	0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x6d,
	0x61, 0x73, 0x6b, 0x44, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09,
	0x6d, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x73,
	0x6b, 0x5f, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x4c, 0x34, 0x53, 0x72, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x34, 0x5f,
	0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x4c, 0x34, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x42,
	0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0xb0,
	0x01, 0x0a, 0x08, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x08, 0x6e, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x6e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e,
	0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x62, 0x0a, 0x0d, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x72, 0x69, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x72, 0x69, 0x66, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x71, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x79, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x7b, 0x0a, 0x1a, 0x50, 0x6f, 0x72, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x75, 0x0a, 0x0c, 0x50, 0x52, 0x42, 0x53, 0x5f, 0x52, 0x58,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x62, 0x73, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x08, 0x72, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf2, 0x01, 0x0a,
	0x0c, 0x51, 0x4f, 0x53, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x73, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x63,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x70,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x70, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65,
	0x78, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x70, 0x6c, 0x73, 0x45, 0x78,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x66,
	0x63, 0x22, 0x7a, 0x0a, 0x06, 0x51, 0x4f, 0x53, 0x4d, 0x61, 0x70, 0x12, 0x35, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x51, 0x4f, 0x53, 0x4d, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x51, 0x4f, 0x53, 0x4d, 0x61, 0x70,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01,
	0x0a, 0x1d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x66, 0x63, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f,
	0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x61, 0x70, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x13, 0x0a, 0x05, 0x76, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x76, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x11, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x43, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x6f, 0x71, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x56, 0x6f, 0x71, 0x22, 0x31, 0x0a, 0x04,
	0x48, 0x4d, 0x41, 0x43, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6d, 0x61, 0x63, 0x22,
	0xbb, 0x01, 0x0a, 0x08, 0x54, 0x4c, 0x56, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0c,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x31, 0x0a, 0x04, 0x68, 0x6d, 0x61, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x4d, 0x41, 0x43, 0x48, 0x00, 0x52, 0x04,
	0x68, 0x6d, 0x61, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x31, 0x0a,
	0x0b, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x61, 0x78,
	0x22, 0xbc, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22,
	0xab, 0x63, 0x0a, 0x11, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a,
	0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x72, 0x63, 0x49, 0x70, 0x76, 0x36, 0x12, 0x54, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x33,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41,
	0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x72, 0x63, 0x49, 0x70, 0x76, 0x36, 0x57, 0x6f, 0x72, 0x64, 0x33, 0x12, 0x54,
	0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x72, 0x63, 0x49, 0x70, 0x76, 0x36, 0x57,
	0x6f, 0x72, 0x64, 0x32, 0x12, 0x54, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x31, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x72,
	0x63, 0x49, 0x70, 0x76, 0x36, 0x57, 0x6f, 0x72, 0x64, 0x31, 0x12, 0x54, 0x0a, 0x14, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72,
	0x64, 0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x72, 0x63, 0x49, 0x70, 0x76, 0x36, 0x57, 0x6f, 0x72, 0x64, 0x30,
	0x12, 0x49, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36, 0x12, 0x54, 0x0a, 0x14, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f,
	0x72, 0x64, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36, 0x57, 0x6f, 0x72, 0x64,
	0x33, 0x12, 0x54, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x74, 0x49, 0x70,
	0x76, 0x36, 0x57, 0x6f, 0x72, 0x64, 0x32, 0x12, 0x54, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x31, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36, 0x57, 0x6f, 0x72, 0x64, 0x31, 0x12, 0x54, 0x0a,
	0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x77, 0x6f, 0x72, 0x64, 0x30, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36, 0x57, 0x6f,
	0x72, 0x64, 0x30, 0x12, 0x54, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x53, 0x72, 0x63, 0x49, 0x70, 0x76, 0x36, 0x12, 0x54, 0x0a, 0x14, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36, 0x12,
	0x47, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41,
	0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x12, 0x47, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x74, 0x4d, 0x61,
	0x63, 0x12, 0x45, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x72, 0x63, 0x49, 0x70, 0x12, 0x45, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x74, 0x49, 0x70, 0x12,
	0x50, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x72, 0x63, 0x49,
	0x70, 0x12, 0x50, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x49, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4b,
	0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x49, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x54,
	0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61,
	0x6e, 0x50, 0x72, 0x69, 0x12, 0x54, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x66, 0x69, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x75,
	0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x69, 0x12, 0x52, 0x0a, 0x13, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x54,
	0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61,
	0x6e, 0x50, 0x72, 0x69, 0x12, 0x54, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x66, 0x69, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x69, 0x12, 0x4e, 0x0a, 0x11, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4c, 0x34, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4c, 0x34, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x17, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x34, 0x53, 0x72,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x59, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41,
	0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x34, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x4d, 0x0a, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x58, 0x0a, 0x16, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x5a, 0x0a, 0x17, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x5b, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x69, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x73, 0x63,
	0x70, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x73, 0x63, 0x70, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x65, 0x63, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x63, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x74, 0x6c, 0x12, 0x40, 0x0a, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x6f, 0x73, 0x12, 0x49, 0x0a,
	0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x63, 0x70,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x61,
	0x63, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63, 0x6c, 0x49,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x61,
	0x63, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63, 0x6c, 0x49,
	0x70, 0x46, 0x72, 0x61, 0x67, 0x12, 0x56, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3e, 0x0a,
	0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x63, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x63, 0x12, 0x4b, 0x0a,
	0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41,
	0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x63,
	0x6d, 0x70, 0x76, 0x36, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x63, 0x6d, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x38,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x4d, 0x0a, 0x10, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x6e, 0x69, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x6e, 0x69, 0x12, 0x50, 0x0a, 0x12, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x48, 0x61, 0x73, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x4d, 0x0a, 0x10, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x63, 0x69, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x69, 0x12, 0x5a, 0x0a, 0x17, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x30, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x30, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x30, 0x5f, 0x74, 0x74, 0x6c, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x30, 0x54, 0x74, 0x6c, 0x12, 0x56,
	0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x30, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x30, 0x45, 0x78, 0x70, 0x12, 0x56, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x30, 0x5f, 0x62, 0x6f, 0x73, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x30, 0x42, 0x6f, 0x73, 0x12, 0x5a,
	0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x31, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x15, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x5f,
	0x74, 0x74, 0x6c, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x54,
	0x74, 0x6c, 0x12, 0x56, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x45, 0x78, 0x70, 0x12, 0x56, 0x0a, 0x15, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x5f,
	0x62, 0x6f, 0x73, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x42,
	0x6f, 0x73, 0x12, 0x5a, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x56,
	0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x32, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x32, 0x54, 0x74, 0x6c, 0x12, 0x56, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x5f, 0x65, 0x78, 0x70, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x45, 0x78, 0x70, 0x12, 0x56,
	0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x32, 0x5f, 0x62, 0x6f, 0x73, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x32, 0x42, 0x6f, 0x73, 0x12, 0x5a, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x56, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x54, 0x74, 0x6c, 0x12, 0x56, 0x0a, 0x15, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x5f,
	0x65, 0x78, 0x70, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x45,
	0x78, 0x70, 0x12, 0x56, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x5f, 0x62, 0x6f, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x42, 0x6f, 0x73, 0x12, 0x5a, 0x0a, 0x17, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x34, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x34, 0x5f, 0x74, 0x74, 0x6c, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x34, 0x54, 0x74, 0x6c, 0x12, 0x56,
	0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x34, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x34, 0x45, 0x78, 0x70, 0x12, 0x56, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x34, 0x5f, 0x62, 0x6f, 0x73, 0x18,
	0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x34, 0x42, 0x6f, 0x73, 0x12, 0x59,
	0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x64, 0x62, 0x5f, 0x64, 0x73, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x64, 0x62, 0x44, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x5d, 0x0a, 0x19, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x63, 0x0a, 0x1c, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x18, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x44, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x54, 0x0a,
	0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x54, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x54, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x6c, 0x61,
	0x6e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x13, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41,
	0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x41, 0x63, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x5e, 0x0a,
	0x1a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x64, 0x62, 0x5f, 0x6e, 0x70, 0x75, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x56, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x64, 0x62,
	0x4e, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x73, 0x74, 0x48, 0x69, 0x74, 0x12, 0x68, 0x0a,
	0x1f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f,
	0x6e, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74,
	0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41,
	0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x70, 0x75, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x73, 0x74, 0x48, 0x69, 0x74, 0x12, 0x62, 0x0a, 0x1c, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x70,
	0x75, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x73, 0x74, 0x48, 0x69, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x42, 0x74, 0x68, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x13, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x61, 0x65, 0x74, 0x68, 0x5f, 0x73, 0x79, 0x6e, 0x64, 0x72, 0x6f, 0x6d,
	0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x41, 0x65, 0x74, 0x68, 0x53, 0x79, 0x6e, 0x64, 0x72, 0x6f, 0x6d, 0x65, 0x12,
	0x63, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x69, 0x6e, 0x12, 0x63, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x18, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x78, 0x12, 0x54, 0x0a, 0x14, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x11, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x41, 0x63, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x58, 0x0a, 0x16, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x70, 0x76, 0x36, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x67, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x50, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x6d, 0x5f,
	0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x56, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x64,
	0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x58, 0x0a,
	0x15, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x52, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x74, 0x6c, 0x12, 0x48, 0x0a, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x63, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x54, 0x63, 0x12, 0x5b, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41,
	0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x5c, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x5e, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69,
	0x12, 0x5c, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x5e,
	0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x18, 0x70, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x15, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x12, 0x51,
	0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x53, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x56,
	0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x12, 0x51, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x73, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x53, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x12, 0x51, 0x0a, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x44, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x12, 0x4f, 0x0a, 0x11,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x72, 0x63, 0x49, 0x70, 0x12, 0x4f, 0x0a,
	0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x74, 0x5f,
	0x69, 0x70, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x44, 0x73, 0x74, 0x49, 0x70, 0x12, 0x53,
	0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x53, 0x72, 0x63, 0x49,
	0x70, 0x76, 0x36, 0x12, 0x53, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x44, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36, 0x12, 0x4c, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x79, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x44, 0x73, 0x63, 0x70, 0x12, 0x4a, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x63, 0x6e, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x45,
	0x63, 0x6e, 0x12, 0x58, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x7b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x4c, 0x34, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x58, 0x0a, 0x16,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x34, 0x5f, 0x64, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x4c, 0x34, 0x44,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x71, 0x0a, 0x22, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x7d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6f, 0x0a, 0x21, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x7e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x18, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x6c,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x67, 0x0a, 0x1d, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x5b, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x81, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x70, 0x49, 0x64, 0x12, 0x5b,
	0x0a, 0x17, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x12, 0x5b, 0x0a, 0x17, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x64, 0x74, 0x65, 0x6c, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x70, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6c, 0x44, 0x74,
	0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x12, 0x5c, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x74, 0x65, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x65,
	0x6c, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x72, 0x0a, 0x23, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x65, 0x6c,
	0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x65,
	0x6c, 0x54, 0x61, 0x69, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x6b, 0x0a, 0x1f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x74, 0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x65,
	0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x69, 0x0a, 0x1e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x65,
	0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x1a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x49, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x5f, 0x6e, 0x61, 0x74, 0x18, 0x89,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x4e, 0x61, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x8a, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x5a,
	0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x5c, 0x0a, 0x17, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x65, 0x0a, 0x1c, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x61,
	0x69, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x69, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x73, 0x12,
	0x58, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x6d, 0x5f, 0x69, 0x6e,
	0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x6d,
	0x49, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x62, 0x0a, 0x1a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x17, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x49,
	0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x53, 0x0a,
	0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c,
	0x6f, 0x77, 0x12, 0x59, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x92, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x4c, 0x61, 0x67, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x5b, 0x0a,
	0x17, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x65, 0x63, 0x6d, 0x70,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x45, 0x63, 0x6d, 0x70, 0x48, 0x61, 0x73, 0x68, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x72, 0x66, 0x18, 0x94, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x56, 0x72, 0x66, 0x12, 0x64, 0x0a, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x18, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x86, 0x01,
	0x0a, 0x11, 0x41, 0x63, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x53, 0x0a, 0x14, 0x41, 0x63, 0x6c, 0x42, 0x69, 0x6e,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x11, 0x41,
	0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x10, 0x41, 0x63,
	0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x0a, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8a, 0x26, 0x0a, 0x11, 0x41, 0x63,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x61, 0x63, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x63, 0x0a,
	0x18, 0x61, 0x63, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x61, 0x63,
	0x6c, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x61, 0x63, 0x6c, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11,
	0x61, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x72, 0x63, 0x49, 0x70, 0x76, 0x36, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x33, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x72, 0x63, 0x49,
	0x70, 0x76, 0x36, 0x57, 0x6f, 0x72, 0x64, 0x33, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x32,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x72, 0x63,
	0x49, 0x70, 0x76, 0x36, 0x57, 0x6f, 0x72, 0x64, 0x32, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72, 0x64,
	0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x72,
	0x63, 0x49, 0x70, 0x76, 0x36, 0x57, 0x6f, 0x72, 0x64, 0x31, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72,
	0x64, 0x30, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x72, 0x63, 0x49, 0x70, 0x76, 0x36, 0x57, 0x6f, 0x72, 0x64, 0x30, 0x12, 0x24, 0x0a, 0x0e, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x74, 0x49, 0x70, 0x76,
	0x36, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36, 0x57, 0x6f, 0x72,
	0x64, 0x33, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x73, 0x74, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36, 0x57, 0x6f,
	0x72, 0x64, 0x32, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x73, 0x74,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36, 0x57,
	0x6f, 0x72, 0x64, 0x31, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x73,
	0x74, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x30, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36,
	0x57, 0x6f, 0x72, 0x64, 0x30, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x53,
	0x72, 0x63, 0x49, 0x70, 0x76, 0x36, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x44, 0x73, 0x74, 0x49, 0x70, 0x76, 0x36, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x12,
	0x20, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x72, 0x63, 0x49,
	0x70, 0x12, 0x20, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x73,
	0x74, 0x49, 0x70, 0x12, 0x2b, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x72, 0x63, 0x49, 0x70,
	0x12, 0x2b, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x73, 0x74, 0x49, 0x70, 0x12, 0x24, 0x0a,
	0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x75,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f,
	0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x12, 0x2f, 0x0a, 0x14, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x63, 0x66, 0x69, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x69, 0x12, 0x2d, 0x0a, 0x13,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x12, 0x2f, 0x0a, 0x14,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x63, 0x66, 0x69, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x69, 0x12, 0x29, 0x0a,
	0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x34, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x34, 0x44, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x6c, 0x34, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x4c, 0x34, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4c, 0x34, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x36, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x73, 0x63, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x65, 0x63, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x63, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74,
	0x74, 0x6c, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x74, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x73, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x6f, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x70,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74,
	0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x29, 0x0a,
	0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x41,
	0x63, 0x6c, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63, 0x6c, 0x49, 0x70, 0x46,
	0x72, 0x61, 0x67, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x70, 0x76, 0x36, 0x46, 0x6c, 0x6f,
	0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x74, 0x63, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54,
	0x63, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x76,
	0x36, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x63, 0x6d, 0x70, 0x76, 0x36, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49,
	0x63, 0x6d, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x6e, 0x69, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x6e, 0x69, 0x12,
	0x2b, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x48, 0x61, 0x73, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x63, 0x69,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x53, 0x63, 0x69, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x30, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70,
	0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x30, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a,
	0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x30, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x30, 0x54, 0x74, 0x6c,
	0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x30, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x30,
	0x45, 0x78, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x30, 0x5f, 0x62, 0x6f, 0x73, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x30, 0x42, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70,
	0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a,
	0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x31, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x54, 0x74, 0x6c,
	0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x31, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x31,
	0x45, 0x78, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x31, 0x5f, 0x62, 0x6f, 0x73, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x31, 0x42, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70,
	0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a,
	0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x32, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x54, 0x74, 0x6c,
	0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x32, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x32,
	0x45, 0x78, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x5f, 0x62, 0x6f, 0x73, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x32, 0x42, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70,
	0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a,
	0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x33, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x54, 0x74, 0x6c,
	0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x33, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x33,
	0x45, 0x78, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x33, 0x5f, 0x62, 0x6f, 0x73, 0x18, 0x4c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x33, 0x42, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x34, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70,
	0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x34, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x31, 0x0a,
	0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x34, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x34, 0x54, 0x74, 0x6c,
	0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x34, 0x5f, 0x65, 0x78, 0x70, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x34,
	0x45, 0x78, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x34, 0x5f, 0x62, 0x6f, 0x73, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x34, 0x42, 0x6f, 0x73, 0x12, 0x34, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x66, 0x64, 0x62, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x64,
	0x62, 0x44, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x19,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x73, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x52, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x1c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x44, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x54,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x6c, 0x61, 0x6e,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x1a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x66, 0x64, 0x62, 0x5f, 0x6e, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x73,
	0x74, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x46, 0x64, 0x62, 0x4e, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x73, 0x74, 0x48,
	0x69, 0x74, 0x12, 0x43, 0x0a, 0x1f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6e, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x73,
	0x74, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x58, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4e, 0x70, 0x75, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x73, 0x74, 0x48, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x1c, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x73, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x59, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x73, 0x74, 0x48, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x74, 0x68, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x61, 0x65, 0x74, 0x68, 0x5f, 0x73,
	0x79, 0x6e, 0x64, 0x72, 0x6f, 0x6d, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x41, 0x65, 0x74, 0x68, 0x53, 0x79, 0x6e, 0x64, 0x72, 0x6f, 0x6d, 0x65,
	0x12, 0x3e, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x69, 0x6e,
	0x18, 0x5c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x6e,
	0x12, 0x3e, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x5d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x78,
	0x12, 0x58, 0x0a, 0x14, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x63,
	0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x67, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x60, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x6d,
	0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x40, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x62,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x63, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x63, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xbd, 0x02, 0x0a, 0x16, 0x41, 0x63, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x63, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x63, 0x0a, 0x18, 0x61, 0x63, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x42, 0x69, 0x6e,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x14,
	0x61, 0x63, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x1c, 0x41, 0x63, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x63, 0x6c, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x63, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x22, 0xfa, 0x0b, 0x0a, 0x13, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x77, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x68, 0x77, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63,
	0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0c,
	0x75, 0x64, 0x70, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x75, 0x64, 0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x54, 0x70, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x12,
	0x19, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x66, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x43, 0x66, 0x69, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x16, 0x62, 0x66, 0x64, 0x5f, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42,
	0x66, 0x64, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x14, 0x62, 0x66, 0x64, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x70, 0x68,
	0x64, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x69, 0x70, 0x68, 0x64, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x6f, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x74, 0x6c, 0x12, 0x31, 0x0a, 0x15,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x31, 0x0a, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x72, 0x63,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x73,
	0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x63, 0x68, 0x6f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x62, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x63,
	0x62, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69,
	0x6e, 0x5f, 0x72, 0x78, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x52,
	0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x78, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x4d, 0x69, 0x6e, 0x54, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x78, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x52, 0x78, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6f, 0x66, 0x66,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x54, 0x78, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x78, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x61,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x67,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69,
	0x61, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22,
	0x81, 0x06, 0x0a, 0x0f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x79, 0x0a, 0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1e,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x18, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x7d, 0x0a,
	0x24, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x20, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x1d,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x1a, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x6e, 0x0a, 0x1c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46,
	0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0xd8, 0x05, 0x0a, 0x13, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x4f, 0x0a, 0x0c, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x69, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x69, 0x66, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x11, 0x66, 0x64,
	0x62, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x64, 0x62, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x66, 0x64, 0x62, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x7e, 0x0a, 0x2a,
	0x66, 0x64, 0x62, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x25, 0x66, 0x64, 0x62, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xd6,
	0x02, 0x0a, 0x13, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6f,
	0x6c, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a,
	0x03, 0x74, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x03, 0x74,
	0x61, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x78, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x78, 0x6f, 0x66, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x77, 0x72, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xe7, 0x02, 0x0a, 0x16, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x58, 0x0a,
	0x0e, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x54, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x68, 0x12, 0x17, 0x0a,
	0x07, 0x78, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x78, 0x6f, 0x66, 0x66, 0x54, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x78, 0x6f, 0x6e, 0x5f, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x78, 0x6f, 0x6e, 0x54, 0x68, 0x12, 0x22, 0x0a,
	0x0d, 0x78, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x78, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54,
	0x68, 0x22, 0x4a, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a,
	0x10, 0x49, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x11, 0x4f, 0x75,
	0x74, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xed, 0x02, 0x0a, 0x15, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x56, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x44, 0x72,
	0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x69, 0x6e,
	0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59,
	0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x85, 0x04, 0x0a, 0x0d, 0x44, 0x74,
	0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73,
	0x74, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x16, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c,
	0x73, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x4c, 0x34, 0x44, 0x73, 0x63,
	0x70, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44,
	0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x63,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64,
	0x73, 0x63, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x17, 0x44, 0x74, 0x65,
	0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x48, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x18, 0x44,
	0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x74, 0x61, 0x69, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x22, 0x1f, 0x0a, 0x09, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x1a, 0x44, 0x74,
	0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12,
	0x40, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x64, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x64, 0x70, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x64, 0x70, 0x44, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x22, 0xe1, 0x02, 0x0a, 0x11, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x70, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x4d, 0x61, 0x63, 0x4d, 0x6f, 0x76, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x46, 0x64, 0x62,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x62, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x62, 0x76, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46, 0x64, 0x62, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x11, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61,
	0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x70, 0x76,
	0x34, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x75, 0x64, 0x66,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x75, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x61, 0x0a, 0x1c, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x18, 0x66, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x66, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e,
	0x54, 0x61, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x6d, 0x63, 0x67, 0x72, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x63, 0x67, 0x72,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa0, 0x03, 0x0a, 0x15, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54,
	0x72, 0x61, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x61, 0x67, 0x12, 0x49, 0x0a, 0x0e, 0x68, 0x6f, 0x73,
	0x74, 0x69, 0x66, 0x5f, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66,
	0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x4c, 0x61,
	0x67, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0c, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x63,
	0x6f, 0x70, 0x79, 0x5f, 0x74, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x7a, 0x65,
	0x72, 0x6f, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x78, 0x22, 0xfc, 0x01, 0x0a, 0x19, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x74, 0x72, 0x61, 0x70, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x66, 0x22, 0x9f, 0x03, 0x0a, 0x13, 0x48, 0x6f, 0x73, 0x74,
	0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x42, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69,
	0x66, 0x54, 0x72, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x72, 0x61, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x4d, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x48, 0x0a, 0x0e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x18, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x22, 0xaa, 0x01, 0x0a, 0x1e, 0x48, 0x6f, 0x73, 0x74, 0x69,
	0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x72, 0x61, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0xa5, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x33, 0x0a, 0x03, 0x74, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x03, 0x74, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb9, 0x04, 0x0a, 0x13,
	0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x50, 0x6f,
	0x70, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x08, 0x70, 0x73, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x73,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x12, 0x2a, 0x0a, 0x12,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x70, 0x6c, 0x73, 0x45, 0x78,
	0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x15, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70,
	0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x4d, 0x0a, 0x0c, 0x70, 0x6f,
	0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x70,
	0x6f, 0x70, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x70, 0x6f, 0x70,
	0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x70, 0x51, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x70, 0x6f,
	0x70, 0x51, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x49, 0x70, 0x6d, 0x63,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x48,
	0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x72, 0x70, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x49, 0x70, 0x6d, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x70, 0x6d,
	0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x70, 0x6d, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x69, 0x70, 0x6d, 0x63, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0e, 0x69, 0x70, 0x6d, 0x63, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x64, 0x0a, 0x18, 0x49, 0x70, 0x6d, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x70, 0x6d, 0x63, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x70, 0x6d, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x70, 0x6d, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x70, 0x6d, 0x63,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x0f, 0x49, 0x70, 0x73, 0x65,
	0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x83, 0x09, 0x0a, 0x0e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x74, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x24, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x75, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x75, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x2a, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x41, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x44, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6e, 0x5f, 0x33, 0x32, 0x62,
	0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x6e, 0x33, 0x32, 0x62, 0x69, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x73, 0x6e, 0x5f, 0x36, 0x34, 0x62, 0x69,
	0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x65, 0x73, 0x6e, 0x36, 0x34, 0x62, 0x69, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73, 0x65,
	0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x6d, 0x74, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x74, 0x75, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x61, 0x72, 0x6d,
	0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x61, 0x72, 0x6d, 0x42, 0x6f, 0x6f, 0x74, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x72, 0x6d,
	0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6d, 0x42, 0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x61,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x74, 0x61, 0x67, 0x54, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67,
	0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x67, 0x54, 0x70, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x73,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x3f,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x5f, 0x73, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x12, 0x3a, 0x0a,
	0x07, 0x73, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x06, 0x73, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x12, 0x49, 0x70,
	0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x74, 0x61,
	0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x63, 0x74, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x76, 0x72, 0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x76, 0x72, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x5e, 0x0a, 0x15, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x13, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0xe2, 0x07, 0x0a, 0x10, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x69, 0x70, 0x73, 0x65, 0x63, 0x49, 0x64, 0x12,
	0x5c, 0x0a, 0x12, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x61, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x0f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0d, 0x69, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x69, 0x70, 0x73, 0x65, 0x63, 0x53, 0x70, 0x69, 0x12, 0x28, 0x0a, 0x10,
	0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x65, 0x73, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x45, 0x73, 0x6e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x52, 0x0b, 0x69, 0x70, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a,
	0x1e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x70, 0x73, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x5f,
	0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x65,
	0x72, 0x6d, 0x44, 0x73, 0x74, 0x49, 0x70, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x65, 0x72, 0x6d, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x65,
	0x72, 0x6d, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x53, 0x72, 0x63, 0x49, 0x70, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x69, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x65, 0x72, 0x6d,
	0x53, 0x72, 0x63, 0x49, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x65, 0x73, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x45, 0x73, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x73, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x45, 0x73, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x55, 0x0a, 0x15, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x13, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x1d, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x86, 0x01, 0x0a, 0x12, 0x4c, 0x32, 0x6d, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x4c, 0x32,
	0x6d, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x32, 0x6d, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x32, 0x6d,
	0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x10,
	0x6c, 0x32, 0x6d, 0x63, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x6c, 0x32, 0x6d, 0x63, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x4c, 0x32,
	0x6d, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x32, 0x6d, 0x63, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c,
	0x32, 0x6d, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x32,
	0x6d, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6c, 0x32, 0x6d, 0x63, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x32, 0x6d, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6c, 0x32, 0x6d, 0x63,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x70, 0x22, 0x8d, 0x03, 0x0a, 0x0c, 0x4c,
	0x61, 0x67, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x55, 0x6e,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x72, 0x6f,
	0x70, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x70, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x4c,
	0x61, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x22, 0x55, 0x0a, 0x15, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x0a, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xd4, 0x0b, 0x0a, 0x0f, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x44,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x24, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x75, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x43, 0x75, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x2a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x19, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6c,
	0x65, 0x61, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x19, 0x73, 0x63, 0x69, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x63, 0x69, 0x49, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x63, 0x6c, 0x12, 0x6b, 0x0a, 0x1b, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x73,
	0x75, 0x69, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x18, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6e, 0x5f, 0x33, 0x32,
	0x62, 0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x6e, 0x33, 0x32, 0x62, 0x69, 0x74, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x78, 0x70, 0x6e, 0x5f, 0x36, 0x34, 0x62,
	0x69, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x78, 0x70, 0x6e, 0x36, 0x34, 0x62, 0x69, 0x74, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x63, 0x6d, 0x5f, 0x61, 0x65, 0x73,
	0x31, 0x32, 0x38, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x67, 0x63, 0x6d, 0x41, 0x65, 0x73, 0x31, 0x32, 0x38, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x63, 0x6d, 0x5f, 0x61,
	0x65, 0x73, 0x32, 0x35, 0x36, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x67, 0x63, 0x6d, 0x41, 0x65, 0x73, 0x32, 0x35, 0x36,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x18, 0x73, 0x65, 0x63,
	0x74, 0x61, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x16,
	0x73, 0x65, 0x63, 0x74, 0x61, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x69, 0x64, 0x65, 0x4d, 0x74, 0x75, 0x12, 0x2e,
	0x0a, 0x13, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x61, 0x72,
	0x6d, 0x42, 0x6f, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6d, 0x42, 0x6f,
	0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x74, 0x61, 0x67,
	0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x74, 0x61,
	0x67, 0x54, 0x70, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67, 0x54, 0x70,
	0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f,
	0x77, 0x12, 0x3e, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53,
	0x63, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53,
	0x61, 0x22, 0xed, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0e,
	0x61, 0x63, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x73, 0x63, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xa3, 0x02, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x74, 0x61, 0x67,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x11, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x51, 0x0a,
	0x10, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x13, 0x0a, 0x05, 0x73, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x73, 0x63, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x61, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x73, 0x61, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x78, 0x70, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x58, 0x70, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x78, 0x70, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x58, 0x70, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x78,
	0x70, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x58, 0x70, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x73, 0x63, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x73, 0x63, 0x69, 0x22, 0x8d, 0x05, 0x0a,
	0x11, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x63, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x63, 0x69, 0x12, 0x3b, 0x0a,
	0x1a, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x73, 0x63, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x53, 0x63, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x53, 0x65, 0x63, 0x74, 0x61, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x13,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x61, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x73,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f,
	0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x52, 0x11, 0x6d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x9a, 0x01, 0x0a,
	0x16, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x22, 0xa3, 0x08, 0x0a, 0x16, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x74, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x6c, 0x61,
	0x6e, 0x54, 0x70, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x63, 0x66, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x6c, 0x61,
	0x6e, 0x43, 0x66, 0x69, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x6a, 0x0a, 0x19, 0x65, 0x72, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x45, 0x72, 0x73, 0x70,
	0x61, 0x6e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x17, 0x65, 0x72, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x70, 0x68, 0x64, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x70, 0x68, 0x64, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x74, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x73,
	0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x64,
	0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x73, 0x74,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x67, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x75,
	0x64, 0x70, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x75, 0x64, 0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a,
	0x0c, 0x75, 0x64, 0x70, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x64, 0x70, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22,
	0xa9, 0x01, 0x0a, 0x0e, 0x4d, 0x79, 0x4d, 0x61, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xc5, 0x03, 0x0a, 0x13,
	0x4d, 0x79, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x79, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x12, 0x71, 0x0a, 0x18, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x79,
	0x53, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x16,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x76, 0x72, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xe8, 0x03, 0x0a, 0x11, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6e, 0x61, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x73,
	0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x72, 0x63, 0x49, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x13, 0x0a, 0x05, 0x76,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x72, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x73,
	0x74, 0x49, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x73, 0x72,
	0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x34,
	0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6c, 0x34, 0x5f, 0x64, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x34,
	0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x68, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x69, 0x74, 0x42,
	0x69, 0x74, 0x43, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x69, 0x74, 0x5f, 0x62, 0x69, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x74, 0x42, 0x69, 0x74, 0x22, 0xb6,
	0x03, 0x0a, 0x17, 0x4e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6e, 0x61,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6e, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x61, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc1, 0x03, 0x0a, 0x16, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x64, 0x73, 0x74,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x70, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e,
	0x6f, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x49, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x49, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0c, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x9c, 0x06, 0x0a, 0x10,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x76, 0x6e, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x56, 0x6e, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d,
	0x61, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x4d, 0x61, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x72,
	0x76, 0x36, 0x53, 0x69, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x74,
	0x6c, 0x12, 0x42, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4f,
	0x75, 0x74, 0x73, 0x65, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x73, 0x65,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f,
	0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x54, 0x74, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x54, 0x74, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x74, 0x74,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f,
	0x75, 0x74, 0x73, 0x65, 0x67, 0x54, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a,
	0x0f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4f,
	0x75, 0x74, 0x73, 0x65, 0x67, 0x45, 0x78, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6f, 0x75,
	0x74, 0x73, 0x65, 0x67, 0x45, 0x78, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6f,
	0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x45, 0x78, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x20, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f,
	0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x19, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f,
	0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x4d, 0x61, 0x70, 0x22, 0xff, 0x02, 0x0a, 0x15, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x14, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x6e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x22, 0x41, 0x0a, 0x0b,
	0x55, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0xa9, 0x01, 0x0a, 0x18, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x11,
	0x6d, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x6d, 0x61, 0x70,
	0x54, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbf, 0x03, 0x0a, 0x1b,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x60,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x5a, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0c,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4b, 0x0a,
	0x10, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x91, 0x05, 0x0a, 0x10, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x62, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x63, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x63, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x62,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x69, 0x72, 0x12, 0x53,
	0x0a, 0x13, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x11, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x21, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x1d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5b,
	0x0a, 0x18, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x0f, 0x50,
	0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x17, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d,
	0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x4d, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x79, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x45, 0x79, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x55, 0x0a, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x45,
	0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc9, 0x4c, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x70, 0x0a, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x17, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2f, 0x0a, 0x14, 0x71, 0x6f, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x71, 0x6f, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x71, 0x6f, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x71,
	0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x71,
	0x6f, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1a, 0x71, 0x6f, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x5a, 0x0a, 0x18, 0x71, 0x6f, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x15, 0x71, 0x6f, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x71,
	0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x71, 0x6f, 0x73, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x48, 0x65, 0x61, 0x64, 0x72, 0x6f,
	0x6f, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x54, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6d, 0x0a, 0x1b, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x18, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x44, 0x75,
	0x70, 0x6c, 0x65, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x69, 0x0a, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41,
	0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x17, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x15,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x64, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x7c, 0x0a, 0x23, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f,
	0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x23, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x61,
	0x6c, 0x66, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x44, 0x75,
	0x70, 0x6c, 0x65, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x78, 0x0a, 0x23, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x1f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x27, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61,
	0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x41, 0x73, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x65, 0x0a, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x69, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4f, 0x75, 0x69, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x21, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x60, 0x0a,
	0x1b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x18, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x0a, 0x65, 0x79, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x45, 0x79, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x65,
	0x79, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x68, 0x77, 0x5f, 0x6c, 0x61,
	0x6e, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0a, 0x68, 0x77, 0x4c, 0x61, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65,
	0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x75,
	0x6c, 0x6c, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x64, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x64, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6f, 0x0a, 0x1c,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46,
	0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x46, 0x65,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x62, 0x0a,
	0x1c, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6c, 0x66,
	0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x64, 0x48, 0x61, 0x6c, 0x66, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x41,
	0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x1c, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x19, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x41, 0x73, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x58, 0x0a, 0x15, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x69, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x64, 0x4f, 0x75, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65,
	0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x55, 0x6e, 0x74,
	0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61,
	0x67, 0x67, 0x65, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70,
	0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x65,
	0x63, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x46, 0x65, 0x63, 0x12, 0x3d, 0x0a, 0x08, 0x66, 0x65, 0x63, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x66,
	0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65,
	0x63, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x0f, 0x66,
	0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x73, 0x63, 0x70, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74,
	0x75, 0x12, 0x42, 0x0a, 0x1e, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x66, 0x6c, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x22, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1e, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x63, 0x0a,
	0x18, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x15, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63,
	0x6c, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x41, 0x63, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63,
	0x6c, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61,
	0x63, 0x73, 0x65, 0x63, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x63, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x41, 0x63, 0x6c, 0x12, 0x4b, 0x0a, 0x10,
	0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x16, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x15, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x69, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x1d, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x1a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a,
	0x1c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x6d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x19, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x63, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x71, 0x6f, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x63, 0x12, 0x2c, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x6f,
	0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x54, 0x6f, 0x54,
	0x63, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x16, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31,
	0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x71, 0x6f, 0x73, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x54, 0x6f,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x12, 0x71, 0x6f, 0x73, 0x5f,
	0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x4b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x71, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x54,
	0x63, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x15, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70,
	0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63,
	0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x4d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x3e, 0x0a, 0x1d, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x74, 0x31,
	0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x71, 0x6f, 0x73,
	0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x44, 0x6f, 0x74, 0x31,
	0x70, 0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x1c, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x71, 0x6f, 0x73, 0x54,
	0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x44, 0x73, 0x63, 0x70, 0x4d,
	0x61, 0x70, 0x12, 0x3d, 0x0a, 0x1c, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x50, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x54,
	0x6f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61,
	0x70, 0x12, 0x50, 0x0a, 0x26, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x20, 0x71, 0x6f, 0x73, 0x50, 0x66, 0x63, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x1d, 0x71, 0x6f, 0x73, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x52, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x71, 0x6f, 0x73, 0x50,
	0x66, 0x63, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x37, 0x0a, 0x18, 0x71, 0x6f, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x53, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x71, 0x6f, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x67, 0x0a,
	0x1f, 0x71, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1b, 0x71, 0x6f, 0x73, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x1e, 0x71, 0x6f, 0x73, 0x5f, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x1a, 0x71, 0x6f, 0x73, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6f, 0x0a,
	0x1a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x56, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x17, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x78, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x78, 0x12, 0x37, 0x0a, 0x18, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x78, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x54, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x56, 0x0a, 0x16, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x5b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x77, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x68, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x65, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x65, 0x65, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x65, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x5e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x65, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x65, 0x65, 0x65, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x65, 0x65, 0x57, 0x61, 0x6b, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0c, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x61, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x6b, 0x74, 0x5f, 0x74, 0x78,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x62, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70,
	0x6b, 0x74, 0x54, 0x78, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x61,
	0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x09, 0x74, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x50, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x64, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73,
	0x69, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x73, 0x65, 0x72,
	0x64, 0x65, 0x73, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x12, 0x48,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x64, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x64, 0x65,
	0x73, 0x49, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x64,
	0x65, 0x73, 0x5f, 0x69, 0x70, 0x72, 0x65, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x73, 0x65, 0x72, 0x64, 0x65, 0x73, 0x49, 0x70,
	0x72, 0x65, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x70, 0x74,
	0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x74, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x70, 0x74, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x17, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x72, 0x62, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x62, 0x73, 0x50, 0x6f, 0x6c, 0x79,
	0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x64, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x49, 0x64, 0x12, 0x75, 0x0a, 0x1c,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x19, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x66, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x6f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x70,
	0x72, 0x62, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x62,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x70, 0x72, 0x62, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x62, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x71, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70,
	0x72, 0x62, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x70, 0x72, 0x62, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x72, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72,
	0x62, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x72, 0x62, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x62, 0x73, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x70, 0x72, 0x62, 0x73, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x47, 0x0a, 0x0d, 0x70, 0x72, 0x62, 0x73, 0x5f, 0x72, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x52, 0x42, 0x53, 0x5f, 0x52, 0x58, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x62,
	0x73, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x75, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x76, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x74, 0x6c, 0x12, 0x31, 0x0a, 0x16, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x77,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70,
	0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x12, 0x37, 0x0a, 0x19, 0x71, 0x6f, 0x73, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x78, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x71, 0x6f, 0x73, 0x4d,
	0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70,
	0x12, 0x43, 0x0a, 0x20, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x79, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x71, 0x6f, 0x73, 0x54,
	0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x4d, 0x70, 0x6c, 0x73, 0x45,
	0x78, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x70, 0x69, 0x64, 0x18, 0x7a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x70, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x0f, 0x65, 0x72, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x7b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x45,
	0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x65, 0x72,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x7c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x1b, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x18, 0x66, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x66, 0x61, 0x62, 0x72, 0x69,
	0x63, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x7f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5f,
	0x0a, 0x13, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x12, 0x66, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x81,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x66, 0x65,
	0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x82, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x46,
	0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x4d,
	0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x83, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0c, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x54, 0x0a,
	0x10, 0x6d, 0x64, 0x69, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x64, 0x69, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x6d, 0x64, 0x69, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x6d, 0x64, 0x69, 0x78, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x64, 0x69, 0x78, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x6d, 0x64, 0x69, 0x78, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5e, 0x0a, 0x14, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x5f, 0x31, 0x30,
	0x30, 0x30, 0x78, 0x5f, 0x73, 0x67, 0x6d, 0x69, 0x69, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x31, 0x30, 0x30, 0x30, 0x78, 0x53, 0x67, 0x6d, 0x69, 0x69, 0x53, 0x6c, 0x61,
	0x76, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12, 0x47, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x88, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x52, 0x09, 0x64, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x67, 0x0a, 0x1a, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x67, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x16, 0x61, 0x75,
	0x74, 0x6f, 0x4e, 0x65, 0x67, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x11, 0x0a, 0x03, 0x69, 0x70, 0x67, 0x18, 0x8b, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x69, 0x70, 0x67, 0x12, 0x3e, 0x0a, 0x1b, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x42, 0x0a, 0x1d, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x71,
	0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x8e, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x71, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54,
	0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x4d, 0x61, 0x70, 0x12, 0x4d, 0x0a, 0x24, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x8f, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1e, 0x71, 0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d,
	0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0xc5, 0x02, 0x0a, 0x16, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x69, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x11,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x64,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x69, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x69, 0x64, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x50,
	0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x77, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x71, 0x6f,
	0x73, 0x57, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x1f,
	0x0a, 0x09, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x86, 0x06, 0x0a, 0x13, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x64, 0x65, 0x73, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x42, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x68,
	0x61, 0x73, 0x69, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x69, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x69, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x0a, 0x69, 0x70, 0x72, 0x65, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x69, 0x70, 0x72, 0x65, 0x64, 0x72, 0x69, 0x76,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x66, 0x69, 0x72, 0x5f, 0x70, 0x72, 0x65,
	0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x74, 0x78, 0x46, 0x69, 0x72,
	0x50, 0x72, 0x65, 0x31, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x66, 0x69, 0x72, 0x5f, 0x70,
	0x72, 0x65, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x74, 0x78, 0x46,
	0x69, 0x72, 0x50, 0x72, 0x65, 0x32, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x66, 0x69, 0x72,
	0x5f, 0x70, 0x72, 0x65, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x74,
	0x78, 0x46, 0x69, 0x72, 0x50, 0x72, 0x65, 0x33, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x66,
	0x69, 0x72, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x09, 0x74, 0x78, 0x46, 0x69, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x78,
	0x5f, 0x66, 0x69, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0a, 0x74, 0x78, 0x46, 0x69, 0x72, 0x50, 0x6f, 0x73, 0x74, 0x31, 0x12, 0x42,
	0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x66, 0x69, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x32, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x74, 0x78, 0x46, 0x69, 0x72, 0x50, 0x6f, 0x73,
	0x74, 0x32, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x66, 0x69, 0x72, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x74, 0x78, 0x46, 0x69,
	0x72, 0x50, 0x6f, 0x73, 0x74, 0x33, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x66, 0x69, 0x72,
	0x5f, 0x61, 0x74, 0x74, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x74,
	0x78, 0x46, 0x69, 0x72, 0x41, 0x74, 0x74, 0x6e, 0x22, 0x3f, 0x0a, 0x0a, 0x51, 0x6f, 0x73, 0x4d,
	0x61, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x51, 0x4f, 0x53,
	0x4d, 0x61, 0x70, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x51, 0x6f,
	0x73, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x51, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x51, 0x6f, 0x73, 0x4d, 0x61, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x54, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x77, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x66, 0x63,
	0x5f, 0x64, 0x6c, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x66, 0x63, 0x44, 0x6c, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x66,
	0x63, 0x5f, 0x64, 0x6c, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x70, 0x66, 0x63, 0x44, 0x6c, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x0a,
	0x74, 0x61, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x09, 0x74, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8f,
	0x07, 0x0a, 0x18, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x76, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x56, 0x34, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x56, 0x36, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6d, 0x74, 0x75, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x63, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x63, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x63, 0x6c, 0x12, 0x62, 0x0a, 0x1b, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d, 0x69, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x34, 0x5f, 0x6d,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x76, 0x34, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x76, 0x36, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76, 0x36, 0x4d, 0x63, 0x61,
	0x73, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x6c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x74, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xa8, 0x02, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0c,
	0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x11,
	0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x70, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x72, 0x70, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x49, 0x0a, 0x0f, 0x72, 0x70, 0x66, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x72,
	0x70, 0x66, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x17,
	0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x70, 0x66, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72,
	0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x70, 0x66,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x70, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x15, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3b,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x03, 0x0a, 0x12, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x4e, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3f, 0x0a, 0x0a,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6d,
	0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x62, 0x75, 0x72,
	0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6d,
	0x69, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x75, 0x72, 0x73, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x42, 0x75, 0x72, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x17,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x09, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x43, 0x0a, 0x0c, 0x54,
	0x6c, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x54, 0x4c, 0x56, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xd7, 0x01, 0x0a, 0x14, 0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x6c, 0x69, 0x73, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x53, 0x72, 0x76, 0x36, 0x53, 0x69, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x74, 0x6c, 0x76, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x54, 0x6c, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x74, 0x6c,
	0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x53,
	0x74, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x70,
	0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x74, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x41,
	0x63, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x0b, 0x54, 0x6c, 0x76, 0x54, 0x79, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x6c, 0x76, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x0e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x5d, 0x0a, 0x19, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x45, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x14, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xcd, 0x60,
	0x0a, 0x0f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x33, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6d,
	0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x78, 0x4d, 0x74, 0x75, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70,
	0x75, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x70,
	0x75, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x64, 0x62, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66,
	0x64, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6c,
	0x33, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6c, 0x33, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x33, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c,
	0x33, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x67, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x67, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x4c, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x63,
	0x6d, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x45, 0x63, 0x6d, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x43, 0x70, 0x75, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x17, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a,
	0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54,
	0x65, 0x6d, 0x70, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x54, 0x65, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x63, 0x6c, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x63, 0x6c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x63, 0x6c, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x63, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3b,
	0x0a, 0x1a, 0x61, 0x63, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x61, 0x63, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x20, 0x61,
	0x63, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x61, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x20, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x61,
	0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x1c, 0x66,
	0x64, 0x62, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x17, 0x66, 0x64, 0x62, 0x44, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x65,
	0x0a, 0x1e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x19, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x44, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x6b, 0x0a, 0x21, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x1c, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x44, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x5c, 0x0a, 0x19, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x15, 0x70, 0x6f, 0x72, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x5c, 0x0a, 0x19, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x15, 0x76, 0x6c, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5a,
	0x0a, 0x18, 0x61, 0x63, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x61, 0x63, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x56, 0x0a, 0x16, 0x61, 0x63,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x12,
	0x61, 0x63, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x54, 0x72, 0x61, 0x70, 0x49, 0x64, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x74, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a,
	0x0a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x31, 0x71, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x31, 0x71, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x12, 0x47, 0x0a, 0x21, 0x71,
	0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x71, 0x6f, 0x73, 0x4d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x32, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x2b, 0x71, 0x6f, 0x73, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x69,
	0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x91, 0x01,
	0x0a, 0x36, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x2e, 0x71, 0x6f, 0x73, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x50, 0x65, 0x72, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x5b, 0x0a, 0x2c, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x25, 0x71, 0x6f, 0x73, 0x4d, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x50, 0x65, 0x72,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x75,
	0x6d, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50,
	0x6f, 0x6f, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x76, 0x34, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x1e, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x25,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x64, 0x62, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x64, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x32, 0x6d, 0x63, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x32, 0x6d, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x70, 0x6d,
	0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x6d, 0x63, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x6e, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x6e, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6e, 0x61, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x56, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x61, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x61, 0x0a, 0x19, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x0a,
	0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x79, 0x5f, 0x73, 0x69,
	0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x79, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x45, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x63, 0x6d, 0x70, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x47, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6c, 0x61, 0x67, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x61, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x49, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x4b,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x4a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x76, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6e, 0x76, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x6c,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x61, 0x63, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x43, 0x4c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x0d, 0x61, 0x63, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x70, 0x0a, 0x19, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6e, 0x6f, 0x6f, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x17, 0x6d, 0x63, 0x61, 0x73,
	0x74, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x63, 0x61, 0x73, 0x74, 0x43, 0x70, 0x75,
	0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6d,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x6d, 0x63, 0x61,
	0x73, 0x74, 0x43, 0x70, 0x75, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x66, 0x64, 0x62, 0x5f, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x56,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x64, 0x62, 0x41, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x67, 0x0a, 0x1e, 0x66, 0x64, 0x62, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x1a, 0x66, 0x64, 0x62, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x20, 0x66,
	0x64, 0x62, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x58, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x66, 0x64, 0x62, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x20, 0x66, 0x64, 0x62, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x59, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x66, 0x64, 0x62, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x1b, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x52, 0x18, 0x65, 0x63, 0x6d, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x63,
	0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x73, 0x65, 0x65, 0x64, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x63, 0x6d, 0x70,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x5c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x65, 0x63, 0x6d, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x63, 0x6d, 0x70,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65,
	0x63, 0x6d, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x63, 0x6d, 0x70, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x65, 0x63, 0x6d, 0x70, 0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x34, 0x12, 0x32, 0x0a,
	0x16, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x69, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x65,
	0x63, 0x6d, 0x70, 0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x49, 0x70, 0x76,
	0x34, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69,
	0x70, 0x76, 0x36, 0x18, 0x60, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x63, 0x6d, 0x70, 0x48,
	0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x36, 0x12, 0x61, 0x0a, 0x1a, 0x6c, 0x61, 0x67, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x52, 0x17, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x61,
	0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73,
	0x65, 0x65, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x61, 0x67, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x18, 0x65, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x67, 0x48, 0x61, 0x73,
	0x68, 0x49, 0x70, 0x76, 0x34, 0x12, 0x30, 0x0a, 0x15, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x67, 0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76,
	0x34, 0x49, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x67, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x67, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6c, 0x61, 0x67, 0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x36, 0x12, 0x38, 0x0a, 0x18, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x63, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x71,
	0x6f, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x63, 0x12, 0x2c, 0x0a, 0x13, 0x71,
	0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x44, 0x6f, 0x74,
	0x31, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x12, 0x32, 0x0a, 0x16, 0x71, 0x6f, 0x73,
	0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x71, 0x6f, 0x73, 0x44, 0x6f,
	0x74, 0x31, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a,
	0x12, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x71, 0x6f, 0x73, 0x44, 0x73,
	0x63, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x15, 0x71, 0x6f, 0x73,
	0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x44, 0x73, 0x63,
	0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a, 0x13, 0x71,
	0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x54,
	0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3e, 0x0a, 0x1d, 0x71, 0x6f, 0x73,
	0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f,
	0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54,
	0x6f, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x1c, 0x71, 0x6f, 0x73,
	0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f,
	0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x70, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f,
	0x44, 0x73, 0x63, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x72, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x14, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x73, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x12, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x74, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x75, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e,
	0x69, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x66, 0x61, 0x73, 0x74, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x63, 0x18, 0x77, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x63, 0x12, 0x50, 0x0a,
	0x11, 0x61, 0x63, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x41, 0x43, 0x4c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f,
	0x61, 0x63, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x4e, 0x0a, 0x10, 0x61, 0x63, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x41, 0x43, 0x4c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x61, 0x63, 0x6c, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2b, 0x0a, 0x12, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x64, 0x5f,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x72, 0x76,
	0x36, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x64, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x0d,
	0x73, 0x72, 0x76, 0x36, 0x5f, 0x74, 0x6c, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x7b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x6c, 0x76, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x73, 0x72, 0x76, 0x36, 0x54, 0x6c, 0x76,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x71, 0x6f, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f,
	0x6c, 0x6f, 0x73, 0x73, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18,
	0x7c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x71, 0x6f, 0x73, 0x4e, 0x75, 0x6d, 0x4c, 0x6f, 0x73,
	0x73, 0x6c, 0x65, 0x73, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x70,
	0x66, 0x63, 0x5f, 0x64, 0x6c, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x70, 0x66, 0x63, 0x44, 0x6c, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x19, 0x70, 0x66, 0x63, 0x5f, 0x74, 0x63, 0x5f, 0x64, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x15, 0x70, 0x66, 0x63, 0x54,
	0x63, 0x44, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x51, 0x0a, 0x13, 0x70, 0x66, 0x63, 0x5f, 0x74, 0x63, 0x5f, 0x64, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x10, 0x70, 0x66, 0x63, 0x54, 0x63, 0x44, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x5d, 0x0a, 0x19, 0x70, 0x66, 0x63, 0x5f, 0x74, 0x63, 0x5f, 0x64,
	0x6c, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x15, 0x70, 0x66,
	0x63, 0x54, 0x63, 0x44, 0x6c, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x70, 0x66, 0x63, 0x5f, 0x74, 0x63, 0x5f, 0x64, 0x6c,
	0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x70, 0x66, 0x63, 0x54, 0x63, 0x44, 0x6c, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x6d, 0x0a, 0x1f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x70, 0x69, 0x64, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x70, 0x69, 0x64, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x63, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x85, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x72, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x18, 0x63, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x86, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x72, 0x63, 0x52, 0x65, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x66, 0x64, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61,
	0x78, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01, 0x0a, 0x27,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x62,
	0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x22, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x70, 0x76, 0x34, 0x42,
	0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x27, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x22, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x49, 0x70, 0x76, 0x36, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x72, 0x78, 0x18, 0x8b, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x42, 0x66, 0x64, 0x52, 0x78, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x66, 0x64, 0x5f, 0x74, 0x78, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x42, 0x66, 0x64, 0x54, 0x78, 0x12, 0x38, 0x0a, 0x18, 0x65,
	0x63, 0x6e, 0x5f, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x65, 0x63, 0x6e, 0x45, 0x63, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61,
	0x63, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x12,
	0x2d, 0x0a, 0x12, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x91, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x6d, 0x61, 0x78, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x4d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x1d, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x92, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x75, 0x6e, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x75, 0x6e,
	0x69, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4f, 0x6e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0d, 0x74, 0x61, 0x6d, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0b, 0x74, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x63,
	0x0a, 0x1a, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x95, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x17, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x61, 0x74, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6e, 0x61,
	0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x61, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x5f, 0x0a, 0x13, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42,
	0x75, 0x73, 0x52, 0x11, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x42, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x3f, 0x0a, 0x1b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x62, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x12, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x5c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x9d, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x19, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x12, 0x37, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x9f, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x45, 0x0a, 0x1f, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x16, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa3, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x69, 0x6e,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x13, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6d, 0x0a,
	0x35, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2d, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x67, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x6e, 0x65, 0x54, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x16, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73,
	0x45, 0x78, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x19, 0x71, 0x6f,
	0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14,
	0x71, 0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x4d, 0x61, 0x70, 0x12, 0x44, 0x0a, 0x20, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x19, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f,
	0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x4d, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0xac, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xad,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4c,
	0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x16,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0e, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x6d, 0x61, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0xb2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x6d,
	0x61, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x62, 0x0a, 0x14, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x61, 0x69,
	0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x12, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0xb4,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x13,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x50, 0x0a, 0x25, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6d, 0x61, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x6d, 0x61, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x12, 0x33, 0x0a, 0x15, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x74, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x33, 0x0a, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6e,
	0x61, 0x70, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6e, 0x61, 0x70, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x70, 0x74, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x70, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x14, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x6d,
	0x64, 0x69, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xbb, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x4d, 0x64,
	0x69, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x79,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xbc, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x19, 0x6d, 0x79, 0x4d, 0x61, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a,
	0x1d, 0x6d, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0xbd,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6d, 0x79, 0x4d, 0x61, 0x63, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x42, 0x0a, 0x0b, 0x6d, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x6d, 0x79, 0x4d, 0x61, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x6d, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x4d, 0x79, 0x4d, 0x61, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x79, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0xc0, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x79, 0x4d, 0x61,
	0x63, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0xc1, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x20, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x71, 0x6f,
	0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x4d, 0x0a, 0x24, 0x71, 0x6f, 0x73,
	0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x71, 0x6f, 0x73, 0x4d, 0x70, 0x6c,
	0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xc4, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x69, 0x70, 0x73, 0x65, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x61, 0x5f, 0x74, 0x61,
	0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69,
	0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x54, 0x61, 0x67, 0x54, 0x70, 0x69, 0x64, 0x22, 0xc9, 0x05,
	0x0a, 0x15, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x6c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x12, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x45, 0x63, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x15,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x63, 0x6e,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x63, 0x61, 0x70, 0x45,
	0x63, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65,
	0x63, 0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x65,
	0x63, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x12, 0x6c, 0x0a, 0x1b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x78, 0x6c,
	0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x17, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56,
	0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70,
	0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xef, 0x02, 0x0a, 0x13, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x12,
	0x71, 0x6f, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x6f,
	0x71, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x56, 0x6f, 0x71, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x71, 0x6f, 0x73,
	0x5f, 0x76, 0x6f, 0x71, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0a, 0x71, 0x6f, 0x73, 0x56, 0x6f, 0x71, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a,
	0x13, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x54,
	0x63, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x53, 0x0a, 0x14, 0x54,
	0x61, 0x6d, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x42, 0x69, 0x6e,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xea, 0x02, 0x0a, 0x0c, 0x54, 0x61, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x57, 0x0a, 0x16, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x12, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x18, 0x74, 0x61, 0x6d, 0x5f,
	0x62, 0x69, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x14, 0x74, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf1, 0x01,
	0x0a, 0x15, 0x54, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x12, 0x15,
	0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x73, 0x63, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x97, 0x02, 0x0a, 0x11, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x42, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x64, 0x73, 0x63, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x62, 0x0a, 0x17, 0x54,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x71, 0x6f, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x71, 0x6f, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xf5, 0x01, 0x0a, 0x1a, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x6f,
	0x77, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x62, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x62, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xc1, 0x09, 0x0a, 0x0f, 0x54, 0x61, 0x6d, 0x49,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x6f, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6f, 0x61, 0x6d, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x49, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70,
	0x62, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x62, 0x31, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x62, 0x32, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x62, 0x32, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x44, 0x73, 0x63, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x33, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x33, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x34, 0x49, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x12, 0x38, 0x0a,
	0x18, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x66,
	0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x63, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x48, 0x6f, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x14, 0x54,
	0x61, 0x6d, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x74, 0x61, 0x6d, 0x5f, 0x74, 0x65, 0x6c, 0x5f, 0x6d,
	0x61, 0x74, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x54,
	0x65, 0x6c, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x12,
	0x74, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x93, 0x03, 0x0a, 0x12, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x69, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x42, 0x69, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x16,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x69, 0x6e, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x14, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x69, 0x6e, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xae, 0x02, 0x0a, 0x15, 0x54, 0x61, 0x6d,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x74, 0x61, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x74, 0x61,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x74, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x10, 0x74, 0x61, 0x6d, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x93, 0x07, 0x0a, 0x13, 0x54, 0x61,
	0x6d, 0x54, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x55, 0x0a, 0x12, 0x74, 0x61, 0x6d, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x74, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x18,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x44, 0x0a,
	0x1f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x21, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x46, 0x0a,
	0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6d, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6d, 0x75, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x28, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x5f, 0x71, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x51, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x73, 0x63, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x68, 0x46, 0x75,
	0x6e, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x22,
	0x8c, 0x02, 0x0a, 0x15, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x63,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x72, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x5b, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x74, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x22, 0x87,
	0x0c, 0x0a, 0x0f, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x53, 0x72, 0x63, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0c, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x44, 0x73, 0x74, 0x49, 0x70, 0x12, 0x4a, 0x0a,
	0x0e, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x54, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x4d, 0x0a,
	0x0f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x44, 0x73, 0x63, 0x70, 0x56,
	0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x47, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x47,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x65,
	0x63, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x45,
	0x63, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0c, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x4f,
	0x0a, 0x0e, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x63, 0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x46, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x61, 0x70,
	0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x64, 0x65, 0x63, 0x61, 0x70,
	0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x74,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x54, 0x74, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x64, 0x73, 0x63,
	0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x73, 0x63, 0x70, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x63, 0x61, 0x70, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x54, 0x0a, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x16, 0x6c, 0x6f, 0x6f, 0x70,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x6c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x14, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70,
	0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x56, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x11, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64,
	0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x76,
	0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x14,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4e, 0x0a, 0x12, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x5f, 0x73, 0x61, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61,
	0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x09, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf8, 0x04, 0x0a, 0x17,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x61, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x65, 0x63, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x65, 0x63, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x65, 0x63, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x65, 0x63, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x75, 0x65, 0x63, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x75, 0x65, 0x63, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x65, 0x63,
	0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75,
	0x65, 0x63, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x0a,
	0x76, 0x6e, 0x69, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x76, 0x6e, 0x69, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x6e,
	0x69, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x76, 0x6e, 0x69, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x4b, 0x65, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x49, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x17, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x76, 0x73, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x73, 0x69, 0x64, 0x49, 0x64, 0x4b,
	0x65, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x76, 0x73, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x73, 0x69, 0x64, 0x49,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc7, 0x03, 0x0a, 0x1d, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x76, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x76, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x73, 0x74,
	0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x64, 0x73, 0x74, 0x49, 0x70, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x72, 0x63,
	0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70,
	0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x72, 0x63, 0x49, 0x70, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x42, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x49,
	0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0c, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x70, 0x73, 0x65, 0x63, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x22, 0xd0, 0x01, 0x0a, 0x0c, 0x55, 0x64, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x64,
	0x66, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x4d,
	0x61, 0x73, 0x6b, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x75, 0x64, 0x66,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07,
	0x75, 0x64, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x64,
	0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x55, 0x64, 0x66,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x07, 0x6c, 0x32, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x6c, 0x32, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x07,
	0x6c, 0x33, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x6c, 0x33, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x67, 0x72,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x67, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xea, 0x03, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x34, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x56, 0x34, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x76, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x56, 0x36, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x64, 0x0a, 0x1c, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x31, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x19, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x74, 0x6c, 0x31, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x22, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x22,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x33, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1e, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c, 0x33, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x22, 0xef, 0x0b, 0x0a, 0x0d, 0x56, 0x6c, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x70, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74,
	0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x69,
	0x0a, 0x1a, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d,
	0x63, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x16, 0x69, 0x70, 0x76, 0x34, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x1a, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x69, 0x70,
	0x76, 0x36, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x24, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x6e, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4e, 0x6f, 0x6e, 0x49, 0x70,
	0x4d, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x4d, 0x63, 0x61, 0x73, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x49, 0x0a,
	0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x49, 0x70, 0x76, 0x36, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x27, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x63, 0x61, 0x73, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x77, 0x0a, 0x22, 0x75, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c,
	0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56,
	0x6c, 0x61, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x1e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x7b, 0x0a, 0x24, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x20, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46,
	0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x41, 0x0a, 0x1d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x6c, 0x0a, 0x1c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c,
	0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69,
	0x67, 0x6d, 0x70, 0x5f, 0x73, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x49, 0x67, 0x6d, 0x70, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x61, 0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x74, 0x61, 0x6d, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x13, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x11,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0f, 0x76, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0xe5, 0x0a, 0x0a, 0x0d, 0x57, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x72, 0x6f, 0x70,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x72, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x72, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x46, 0x0a,
	0x0d, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x45, 0x63, 0x6e,
	0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x65, 0x63, 0x6e, 0x4d, 0x61, 0x72,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x63, 0x6e, 0x5f, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x63, 0x6e, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x65, 0x63, 0x6e, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x65,
	0x63, 0x6e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x63, 0x6e, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x65, 0x63, 0x6e, 0x47, 0x72, 0x65, 0x65,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x37, 0x0a, 0x18, 0x65, 0x63, 0x6e, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x65, 0x63, 0x6e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x6e,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x63, 0x6e,
	0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x63, 0x6e,
	0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x63, 0x6e, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x65, 0x63, 0x6e, 0x59, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x63, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x65, 0x63, 0x6e, 0x52, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x63, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x63, 0x6e, 0x52, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x63, 0x6e, 0x5f, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x65, 0x63, 0x6e, 0x52, 0x65,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x44, 0x0a, 0x1f, 0x65, 0x63, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e,
	0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x65, 0x63, 0x6e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x65, 0x63, 0x6e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1b, 0x65, 0x63, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65,
	0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4a, 0x0a, 0x22,
	0x65, 0x63, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1e, 0x65, 0x63, 0x6e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x55, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2a, 0xbe, 0x0f, 0x0a, 0x0d, 0x41, 0x63, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41,
	0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x21, 0x0a,
	0x1d, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x41,
	0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d,
	0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x08, 0x12,
	0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x10, 0x09,
	0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x54,
	0x4c, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x43, 0x10, 0x0b, 0x12,
	0x24, 0x0a, 0x20, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x4e,
	0x45, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22,
	0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x50,
	0x52, 0x49, 0x10, 0x0e, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x26, 0x0a, 0x22, 0x41,
	0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x52,
	0x49, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x49, 0x44, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x56, 0x4c, 0x41, 0x4e,
	0x5f, 0x50, 0x52, 0x49, 0x10, 0x12, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x52,
	0x43, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x13, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44,
	0x53, 0x54, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x14, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x10, 0x15, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x17, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x18, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x45, 0x43, 0x4e, 0x10, 0x1a, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c,
	0x34, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x1b, 0x12, 0x23, 0x0a, 0x1f,
	0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x4c, 0x34, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x1c, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x41, 0x4d,
	0x50, 0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x1d, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x41, 0x4d,
	0x50, 0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x1e, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x1f, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x43, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x20, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x21, 0x12, 0x24, 0x0a, 0x20, 0x41,
	0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x10,
	0x22, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x4f, 0x50, 0x10, 0x23, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x54, 0x45, 0x4c, 0x5f,
	0x49, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x24, 0x12, 0x2b, 0x0a,
	0x27, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x25, 0x12, 0x30, 0x0a, 0x2c, 0x41, 0x43,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x54,
	0x45, 0x4c, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x26, 0x12, 0x2c, 0x0a, 0x28,
	0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x54, 0x45, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x27, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x43,
	0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x54,
	0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x28, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x41,
	0x54, 0x10, 0x29, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52,
	0x54, 0x10, 0x2a, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x2b, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x2c, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x4c, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x53, 0x10, 0x2d, 0x12, 0x29,
	0x0a, 0x25, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x41, 0x49,
	0x4c, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x53, 0x10, 0x2e, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43, 0x4c,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4d,
	0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x2f, 0x12, 0x27, 0x0a,
	0x23, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x30, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x31, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x4c, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c,
	0x41, 0x47, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x49, 0x44, 0x10, 0x32, 0x12, 0x24, 0x0a, 0x20,
	0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x49, 0x44,
	0x10, 0x33, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x52, 0x46, 0x10, 0x34, 0x12,
	0x28, 0x0a, 0x24, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x35, 0x2a, 0xff, 0x01, 0x0a, 0x10, 0x41, 0x63,
	0x6c, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x1f, 0x41, 0x43, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x47, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x43, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24,
	0x41, 0x43, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x43, 0x4c, 0x5f, 0x42, 0x49,
	0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x41,
	0x43, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x06, 0x2a, 0x9f, 0x01, 0x0a, 0x0d,
	0x41, 0x63, 0x6c, 0x44, 0x74, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x12, 0x20, 0x0a,
	0x1c, 0x41, 0x43, 0x4c, 0x5f, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4f,
	0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x43, 0x4c, 0x5f, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x4c,
	0x5f, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4f, 0x50, 0x5f, 0x49, 0x4e,
	0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x4c, 0x5f, 0x44, 0x54, 0x45, 0x4c, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4f, 0x50, 0x5f, 0x49, 0x4f, 0x41, 0x4d, 0x10, 0x03, 0x12, 0x1d,
	0x0a, 0x19, 0x41, 0x43, 0x4c, 0x5f, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x4f, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x2a, 0xa9, 0x01,
	0x0a, 0x09, 0x41, 0x63, 0x6c, 0x49, 0x70, 0x46, 0x72, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x17, 0x41,
	0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4c, 0x5f,
	0x49, 0x50, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x4e,
	0x5f, 0x46, 0x52, 0x41, 0x47, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x4c, 0x5f, 0x49,
	0x50, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x5f,
	0x4f, 0x52, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x4c,
	0x5f, 0x49, 0x50, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x04, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x5f, 0x4e,
	0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x10, 0x05, 0x2a, 0x9c, 0x02, 0x0a, 0x09, 0x41, 0x63,
	0x6c, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x4c, 0x5f, 0x49,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x4c,
	0x5f, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x5f, 0x49, 0x50, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x41, 0x4e, 0x59, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x4c, 0x5f,
	0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x41, 0x4e, 0x59, 0x10,
	0x06, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x10, 0x08,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x52, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x09, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x50,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x10, 0x0a, 0x2a, 0xda, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x6c,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x4c,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x4c,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x34, 0x5f, 0x53,
	0x52, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x24, 0x0a, 0x20, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x34, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x4c,
	0x41, 0x4e, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x56, 0x4c, 0x41,
	0x4e, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4c, 0x45, 0x4e,
	0x47, 0x54, 0x48, 0x10, 0x05, 0x2a, 0xa8, 0x01, 0x0a, 0x08, 0x41, 0x63, 0x6c, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x43, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x43, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x43,
	0x53, 0x45, 0x43, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x05,
	0x2a, 0x81, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c,
	0x45, 0x4c, 0x10, 0x02, 0x2a, 0xc9, 0x06, 0x0a, 0x03, 0x41, 0x70, 0x69, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x50, 0x49, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x41, 0x49, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50,
	0x49, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50,
	0x49, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x5f,
	0x46, 0x44, 0x42, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x49, 0x5f, 0x56, 0x4c, 0x41,
	0x4e, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x50, 0x49, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x50,
	0x49, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x50, 0x49, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x50, 0x49, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x50, 0x49, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x0b,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x5f, 0x41, 0x43, 0x4c, 0x10, 0x0c, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x50, 0x49, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x10, 0x0d, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x50, 0x49, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0e, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x54, 0x50, 0x10, 0x10,
	0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x41, 0x47, 0x10, 0x11, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x50, 0x49, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x10, 0x12, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x50, 0x49, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x50, 0x49, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x14, 0x12, 0x0d, 0x0a,
	0x09, 0x41, 0x50, 0x49, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x50, 0x49, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x10, 0x16, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x5f,
	0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0x18, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x49, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x5f, 0x55, 0x44,
	0x46, 0x10, 0x1a, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x10, 0x1b, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x32, 0x4d, 0x43, 0x10,
	0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x49, 0x5f, 0x49, 0x50, 0x4d, 0x43, 0x10, 0x1d, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x50, 0x49, 0x5f, 0x52, 0x50, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x1e, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x32, 0x4d, 0x43, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x50, 0x49, 0x5f, 0x49, 0x50,
	0x4d, 0x43, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x20, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50,
	0x49, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x44, 0x42, 0x10, 0x21, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x50, 0x49, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x22, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x50, 0x49, 0x5f, 0x54, 0x41, 0x4d, 0x10, 0x23, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50,
	0x49, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x10, 0x24, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x49, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x10, 0x25, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x49, 0x5f, 0x44, 0x54,
	0x45, 0x4c, 0x10, 0x26, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x5f, 0x42, 0x46, 0x44, 0x10,
	0x27, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x49, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x28, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50,
	0x49, 0x5f, 0x4e, 0x41, 0x54, 0x10, 0x29, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x50, 0x49, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x2a, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x5f,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x2b, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x10, 0x2c, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x2d, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x5f, 0x4d, 0x59, 0x5f, 0x4d,
	0x41, 0x43, 0x10, 0x2e, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x50, 0x49, 0x5f, 0x49, 0x50, 0x53, 0x45,
	0x43, 0x10, 0x2f, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x49, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x30,
	0x2a, 0xae, 0x01, 0x0a, 0x14, 0x42, 0x66, 0x64, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x46, 0x44,
	0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x46, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x49,
	0x4e, 0x5f, 0x49, 0x50, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x46, 0x44, 0x5f, 0x45, 0x4e,
	0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x33, 0x5f, 0x47, 0x52, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x46, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x03, 0x2a, 0xb0, 0x01, 0x0a, 0x15, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x42,
	0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x46, 0x44, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x42,
	0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x53, 0x54, 0x45, 0x4e, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x03, 0x2a, 0x98, 0x01, 0x0a, 0x0e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x46, 0x44, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x46, 0x44,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x46,
	0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f,
	0x55, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x03, 0x2a,
	0xa8, 0x01, 0x0a, 0x0f, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x46, 0x44, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x04, 0x2a, 0xc2, 0x01, 0x0a, 0x0e, 0x42,
	0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x1c, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x50,
	0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x46, 0x44, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x59,
	0x4e, 0x43, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x42,
	0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x04, 0x2a,
	0xe2, 0x01, 0x0a, 0x16, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x52,
	0x49, 0x44, 0x47, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x32, 0x4d, 0x43, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22,
	0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x04, 0x2a, 0xce, 0x02, 0x0a, 0x19, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x46, 0x64, 0x62, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x46, 0x44, 0x42, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x52, 0x49,
	0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x4c, 0x45, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x48, 0x57, 0x10, 0x03, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x52,
	0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x4c, 0x45,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x50, 0x55, 0x5f,
	0x54, 0x52, 0x41, 0x50, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x4c, 0x4f, 0x47, 0x10,
	0x05, 0x12, 0x32, 0x0a, 0x2e, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x46, 0x44, 0x42, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x06, 0x2a, 0xb6, 0x01, 0x0a, 0x0e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x52, 0x49, 0x44,
	0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x52,
	0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49,
	0x4e, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x52,
	0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x42,
	0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c,
	0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x04, 0x2a, 0x8d,
	0x01, 0x0a, 0x15, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x52, 0x49, 0x44,
	0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x52, 0x49,
	0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xc9,
	0x01, 0x0a, 0x0e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a,
	0x1a, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x31, 0x51, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1e, 0x0a,
	0x1a, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x31, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x05, 0x2a, 0x99, 0x01, 0x0a, 0x0a, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x52, 0x49,
	0x44, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x52, 0x49,
	0x44, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x53, 0x10, 0x04, 0x2a, 0x51, 0x0a, 0x0a, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x31, 0x51, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x44, 0x10, 0x02, 0x2a, 0xb2, 0x08, 0x0a, 0x0e, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x1c,
	0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29,
	0x0a, 0x25, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43,
	0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x55, 0x46,
	0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x41,
	0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12,
	0x24, 0x0a, 0x20, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x53, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f,
	0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f,
	0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x53, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52,
	0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e,
	0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59,
	0x54, 0x45, 0x53, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f,
	0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x06, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x55, 0x46, 0x46, 0x45,
	0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x07, 0x12, 0x2d, 0x0a, 0x29, 0x42, 0x55, 0x46, 0x46, 0x45,
	0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f,
	0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x53, 0x10, 0x08, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52,
	0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x57,
	0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x09, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x27,
	0x0a, 0x23, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x32, 0x0a, 0x2e, 0x42, 0x55, 0x46, 0x46, 0x45,
	0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45,
	0x4e, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x0c, 0x12, 0x30, 0x0a, 0x2c, 0x42,
	0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x33, 0x0a,
	0x2f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43,
	0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53,
	0x10, 0x0e, 0x12, 0x31, 0x0a, 0x2d, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x52,
	0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x59,
	0x54, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x30, 0x0a, 0x2c, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f,
	0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x52,
	0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x10, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x55, 0x46, 0x46, 0x45,
	0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f,
	0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x11, 0x12, 0x2c, 0x0a, 0x28, 0x42, 0x55, 0x46, 0x46, 0x45,
	0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x52, 0x45, 0x44,
	0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x53, 0x10, 0x12, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f,
	0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45,
	0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10,
	0x13, 0x12, 0x33, 0x0a, 0x2f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x58, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x14, 0x12, 0x2e, 0x0a, 0x2a, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52,
	0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x58, 0x4f, 0x46, 0x46, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x15, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52,
	0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x16, 0x2a, 0x94,
	0x01, 0x0a, 0x17, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x55,
	0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48,
	0x4f, 0x4c, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52,
	0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x26, 0x0a,
	0x22, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41,
	0x4d, 0x49, 0x43, 0x10, 0x02, 0x2a, 0x88, 0x01, 0x0a, 0x0e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x55, 0x46, 0x46,
	0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x55,
	0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x46, 0x46,
	0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f,
	0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x03,
	0x2a, 0xa0, 0x01, 0x0a, 0x1a, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x2d, 0x0a, 0x29, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28,
	0x0a, 0x24, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x55, 0x46, 0x46,
	0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53,
	0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49,
	0x43, 0x10, 0x02, 0x2a, 0x80, 0x01, 0x0a, 0x0f, 0x42, 0x75, 0x6c, 0x6b, 0x4f, 0x70, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x55, 0x4c, 0x4b, 0x5f,
	0x4f, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x42,
	0x55, 0x4c, 0x4b, 0x5f, 0x4f, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x4f, 0x50, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0xfb, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x41, 0x70, 0x69, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x41,
	0x50, 0x49, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x4d, 0x4f,
	0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x47, 0x45, 0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e,
	0x5f, 0x41, 0x50, 0x49, 0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49,
	0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x42, 0x55, 0x4c,
	0x4b, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x4d, 0x4f,
	0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x08,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x4d,
	0x41, 0x58, 0x10, 0x09, 0x2a, 0x81, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x03, 0x2a, 0x45, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x2a,
	0x6c, 0x0a, 0x16, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x42,
	0x69, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x2a, 0xf0, 0x01,
	0x0a, 0x10, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x53, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f,
	0x55, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x10,
	0x02, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x49,
	0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x10, 0x03,
	0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x10, 0x04,
	0x2a, 0xb8, 0x02, 0x0a, 0x0d, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47,
	0x10, 0x03, 0x12, 0x31, 0x0a, 0x2d, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x42, 0x52, 0x45,
	0x41, 0x43, 0x48, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10,
	0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x07, 0x2a, 0x80, 0x02, 0x0a, 0x0b,
	0x45, 0x63, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x45,
	0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x43,
	0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x59, 0x45, 0x4c,
	0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a,
	0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52,
	0x45, 0x45, 0x4e, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52,
	0x45, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x43, 0x4e,
	0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x43, 0x4e, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x08, 0x2a, 0x78,
	0x0a, 0x17, 0x45, 0x72, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x52, 0x53,
	0x50, 0x41, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x45, 0x52, 0x53, 0x50, 0x41, 0x4e, 0x5f, 0x45,
	0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x33, 0x5f, 0x47, 0x52, 0x45, 0x5f,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x01, 0x2a, 0x65, 0x0a, 0x0c, 0x46, 0x64, 0x62, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x44, 0x42, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x44, 0x42, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x2a,
	0x7b, 0x0a, 0x08, 0x46, 0x64, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x44, 0x42, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d,
	0x4f, 0x56, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x9a, 0x01, 0x0a,
	0x11, 0x46, 0x64, 0x62, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x44, 0x42, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x44, 0x42, 0x5f,
	0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x44,
	0x42, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x46,
	0x44, 0x42, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0xee, 0x01, 0x0a, 0x0d, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1e, 0x0a, 0x1a, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x43, 0x52,
	0x43, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x58, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x52, 0x41,
	0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41,
	0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x43, 0x52, 0x43, 0x5f, 0x33, 0x32, 0x4c,
	0x4f, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f,
	0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x43, 0x52, 0x43, 0x5f, 0x33, 0x32, 0x48, 0x49, 0x10, 0x05,
	0x12, 0x1c, 0x0a, 0x18, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54,
	0x48, 0x4d, 0x5f, 0x43, 0x52, 0x43, 0x5f, 0x43, 0x43, 0x49, 0x54, 0x54, 0x10, 0x06, 0x12, 0x1a,
	0x0a, 0x16, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x43, 0x52, 0x43, 0x5f, 0x58, 0x4f, 0x52, 0x10, 0x07, 0x2a, 0xef, 0x02, 0x0a, 0x1b, 0x48,
	0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x2b, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x42, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x44, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x45, 0x54, 0x44, 0x45, 0x56, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x37, 0x0a, 0x33, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x44, 0x45, 0x56, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x2d,
	0x0a, 0x29, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x44, 0x45, 0x56, 0x5f, 0x4c, 0x33, 0x10, 0x05, 0x12, 0x2d, 0x0a,
	0x29, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x47, 0x45, 0x4e, 0x45, 0x54, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x06, 0x2a, 0xef, 0x01, 0x0a,
	0x14, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x47, 0x10,
	0x02, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41,
	0x4e, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x4c, 0x44, 0x43, 0x41, 0x52, 0x44, 0x10, 0x05, 0x2a, 0x87,
	0x12, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52,
	0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x50, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41,
	0x43, 0x50, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54,
	0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x41, 0x50, 0x4f, 0x4c, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4c, 0x44, 0x50, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x56, 0x52, 0x53, 0x54, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x4d, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x07, 0x12, 0x24, 0x0a,
	0x20, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x56,
	0x45, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52,
	0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x56, 0x31, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x09, 0x12, 0x28, 0x0a,
	0x24, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x32, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x4d, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x33, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54,
	0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x44, 0x4c, 0x44, 0x10, 0x0d, 0x12,
	0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x44, 0x50, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x54,
	0x50, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52,
	0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x54, 0x50, 0x10, 0x10, 0x12, 0x19, 0x0a,
	0x15, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x41, 0x47, 0x50, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x54, 0x50,
	0x10, 0x12, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x54, 0x50, 0x5f, 0x54, 0x58, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f,
	0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x4c,
	0x32, 0x10, 0x14, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52,
	0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x56, 0x36, 0x5f, 0x4c,
	0x32, 0x10, 0x15, 0x12, 0x2d, 0x0a, 0x29, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52,
	0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x17, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54,
	0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x48, 0x43, 0x50,
	0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x10, 0x1a, 0x12, 0x18, 0x0a,
	0x14, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x49, 0x4d, 0x10, 0x1b, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x52, 0x52, 0x50,
	0x10, 0x1c, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x56, 0x36, 0x10, 0x1d, 0x12,
	0x1b, 0x0a, 0x17, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x53, 0x50, 0x46, 0x56, 0x36, 0x10, 0x1e, 0x12, 0x1b, 0x0a, 0x17,
	0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x52, 0x52, 0x50, 0x56, 0x36, 0x10, 0x1f, 0x12, 0x2c, 0x0a, 0x28, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x20, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x5f, 0x4d, 0x4c, 0x44, 0x5f, 0x56, 0x31, 0x5f, 0x56, 0x32, 0x10, 0x21, 0x12, 0x27, 0x0a, 0x23,
	0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x4c, 0x44, 0x5f, 0x56, 0x31, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x22, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f,
	0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d,
	0x4c, 0x44, 0x5f, 0x56, 0x31, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x23, 0x12, 0x22, 0x0a, 0x1e,
	0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x4c, 0x44, 0x5f, 0x56, 0x32, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x24,
	0x12, 0x29, 0x0a, 0x25, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x33, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x25, 0x12, 0x1e, 0x0a, 0x1a, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4e, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x26, 0x12, 0x1e, 0x0a, 0x1a, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x4e, 0x41, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x27, 0x12, 0x20, 0x0a, 0x1c, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x41, 0x54, 0x5f, 0x48, 0x41, 0x49, 0x52, 0x50, 0x49, 0x4e, 0x10, 0x28, 0x12, 0x2f, 0x0a,
	0x2b, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f,
	0x53, 0x4f, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x29, 0x12, 0x30,
	0x0a, 0x2c, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52,
	0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2a,
	0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x10, 0x2b, 0x12, 0x2d, 0x0a, 0x29, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x2c, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x32, 0x4d, 0x45, 0x10, 0x2d, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46,
	0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x53, 0x48, 0x10, 0x2e,
	0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4e, 0x4d, 0x50, 0x10, 0x2f, 0x12, 0x18, 0x0a, 0x14, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x47, 0x50, 0x10, 0x30, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f,
	0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x47, 0x50, 0x56, 0x36, 0x10,
	0x31, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x46, 0x44, 0x10, 0x32, 0x12, 0x1a, 0x0a, 0x16, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x46, 0x44, 0x56, 0x36, 0x10, 0x33, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x46, 0x44, 0x5f,
	0x4d, 0x49, 0x43, 0x52, 0x4f, 0x10, 0x34, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x46, 0x44, 0x56,
	0x36, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x10, 0x35, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x44,
	0x50, 0x10, 0x36, 0x12, 0x2f, 0x0a, 0x2b, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52,
	0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x50,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x10, 0x37, 0x12, 0x21, 0x0a, 0x1d, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54,
	0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x33, 0x5f, 0x4d, 0x54, 0x55, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x38, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x54, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x39, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x43, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x3a, 0x12, 0x33, 0x0a,
	0x2f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52,
	0x10, 0x3b, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x10, 0x3c, 0x12, 0x2c,
	0x0a, 0x28, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x3d, 0x12, 0x23, 0x0a, 0x1f,
	0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x3e, 0x12, 0x2c, 0x0a, 0x28, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x3f, 0x12,
	0x2b, 0x0a, 0x27, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4c,
	0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x40, 0x12, 0x30, 0x0a, 0x2c,
	0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x41, 0x12, 0x18,
	0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x42, 0x2a, 0x9c, 0x01, 0x0a, 0x0c, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x66, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x46, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x46, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x49, 0x50, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x10,
	0x02, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x58, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x03, 0x2a, 0x70, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x69,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x45, 0x54, 0x44, 0x45, 0x56, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x44, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45,
	0x4e, 0x45, 0x54, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x03, 0x2a, 0xcb, 0x03, 0x0a, 0x19, 0x48, 0x6f,
	0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54,
	0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52,
	0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12,
	0x28, 0x0a, 0x24, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48,
	0x42, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x10, 0x04, 0x12, 0x25,
	0x0a, 0x21, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x43, 0x4c, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x44, 0x42, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29,
	0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x07, 0x12, 0x33, 0x0a, 0x2f, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x08,
	0x12, 0x25, 0x0a, 0x21, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x09, 0x2a, 0x83, 0x01, 0x0a, 0x0d, 0x48, 0x6f, 0x73, 0x74,
	0x69, 0x66, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x46, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x46, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x53, 0x54,
	0x52, 0x49, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f,
	0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x54,
	0x41, 0x47, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0xa0, 0x10,
	0x0a, 0x0c, 0x49, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x1a, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x32, 0x5f, 0x41, 0x4e,
	0x59, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x4d, 0x41, 0x43, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x43, 0x41, 0x53, 0x54, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x4d, 0x41, 0x43, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x53, 0x5f, 0x44, 0x4d, 0x41, 0x43, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x49,
	0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x4d,
	0x41, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x05, 0x12, 0x27, 0x0a,
	0x23, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x07, 0x12, 0x25,
	0x0a, 0x21, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x46, 0x49, 0x4c,
	0x54, 0x45, 0x52, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x55, 0x43, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x4d,
	0x43, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x49,
	0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x32,
	0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x4c, 0x32, 0x5f,
	0x4d, 0x54, 0x55, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x33, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x0d,
	0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x4c, 0x33, 0x5f, 0x4d, 0x54,
	0x55, 0x10, 0x0e, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x54, 0x4c, 0x10, 0x0f, 0x12, 0x25, 0x0a, 0x21, 0x49,
	0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x33,
	0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52,
	0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x33, 0x5f, 0x48, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x10, 0x12, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x13, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x43, 0x5f, 0x44, 0x49,
	0x50, 0x5f, 0x4d, 0x43, 0x5f, 0x44, 0x4d, 0x41, 0x43, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x49,
	0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x44, 0x49,
	0x50, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x15, 0x12, 0x1f, 0x0a, 0x1b,
	0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53,
	0x49, 0x50, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x16, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x53, 0x49, 0x50, 0x5f, 0x4d, 0x43, 0x10, 0x17, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x50, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x45, 0x10, 0x18, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x50, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x19, 0x12, 0x23, 0x0a, 0x1f,
	0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d,
	0x43, 0x5f, 0x44, 0x4d, 0x41, 0x43, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10,
	0x1a, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x50, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x5f, 0x44,
	0x49, 0x50, 0x10, 0x1b, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x50, 0x5f, 0x42, 0x43, 0x10, 0x1c, 0x12,
	0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x44, 0x49, 0x50, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x1d, 0x12, 0x21, 0x0a,
	0x1d, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x44, 0x49, 0x50, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x1e,
	0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x50, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x10, 0x1f, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x43, 0x5f, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x30, 0x10, 0x20, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x43,
	0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x31, 0x10, 0x21, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x52, 0x49, 0x46,
	0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x22, 0x12, 0x20, 0x0a, 0x1c, 0x49,
	0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x52,
	0x49, 0x46, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x23, 0x12, 0x1c, 0x0a,
	0x18, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4c, 0x50, 0x4d, 0x34, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x24, 0x12, 0x1c, 0x0a, 0x18, 0x49,
	0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x50,
	0x4d, 0x36, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x25, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x4c, 0x41, 0x43,
	0x4b, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x26, 0x12, 0x20, 0x0a,
	0x1c, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x52, 0x50, 0x10, 0x27, 0x12,
	0x26, 0x0a, 0x22, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x5f, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x48, 0x4f, 0x50, 0x10, 0x28, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x33, 0x5f, 0x45, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x29, 0x12,
	0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x43, 0x41, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x2a, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x2b, 0x12, 0x23, 0x0a, 0x1f, 0x49,
	0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x4c, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x2c,
	0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c,
	0x41, 0x47, 0x10, 0x2d, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0x2e, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4c, 0x5f,
	0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x49, 0x46, 0x10, 0x2f, 0x12, 0x25, 0x0a,
	0x21, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x4c, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x10, 0x30, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x31, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x45,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x41, 0x47, 0x10, 0x32, 0x12, 0x22, 0x0a, 0x1e, 0x49,
	0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x4c, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0x33, 0x12,
	0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x52, 0x49, 0x46,
	0x10, 0x34, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x35, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x4e, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x41, 0x52, 0x44, 0x53, 0x10, 0x36, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4d,
	0x49, 0x53, 0x53, 0x10, 0x37, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x38, 0x12, 0x16, 0x0a,
	0x12, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x45, 0x4e, 0x44, 0x10, 0x39, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x3a, 0x12, 0x23, 0x0a, 0x1f, 0x49,
	0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x3b,
	0x2a, 0xd2, 0x04, 0x0a, 0x18, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x12, 0x2b, 0x0a,
	0x27, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x53, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x34, 0x0a, 0x30, 0x49, 0x4e,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x5f, 0x4f,
	0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x03,
	0x12, 0x2f, 0x0a, 0x2b, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10,
	0x04, 0x12, 0x3b, 0x0a, 0x37, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x5f, 0x4f, 0x43, 0x43,
	0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x05, 0x12, 0x36,
	0x0a, 0x32, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x06, 0x12, 0x3e, 0x0a, 0x3a, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x58, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x07, 0x12, 0x39, 0x0a, 0x35, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x58, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10,
	0x08, 0x12, 0x2f, 0x0a, 0x2b, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53,
	0x10, 0x09, 0x12, 0x31, 0x0a, 0x2d, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52,
	0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x10, 0x0a, 0x2a, 0x89, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x70, 0x51, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x24, 0x49, 0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x4f,
	0x50, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x53, 0x45,
	0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x4f, 0x50, 0x5f, 0x51, 0x4f, 0x53, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x49, 0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x4f,
	0x50, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10,
	0x02, 0x2a, 0x89, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e,
	0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x4f, 0x50, 0x5f, 0x54, 0x54,
	0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x50, 0x4f, 0x50, 0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e,
	0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x4f, 0x50, 0x5f, 0x54, 0x54,
	0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10, 0x02, 0x2a, 0x77, 0x0a,
	0x11, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x73, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x50, 0x53, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x53, 0x45,
	0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x53, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4c, 0x53, 0x50, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x53, 0x45, 0x47,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x53, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x4c, 0x53, 0x50, 0x10, 0x02, 0x2a, 0x60, 0x0a, 0x0c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44,
	0x52, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c,
	0x59, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x2a, 0x60, 0x0a, 0x0d, 0x49, 0x70, 0x6d, 0x63,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x50, 0x4d,
	0x43, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x50,
	0x4d, 0x43, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x47,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x50, 0x4d, 0x43, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x47, 0x10, 0x02, 0x2a, 0xa5, 0x01, 0x0a, 0x0b, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50,
	0x53, 0x45, 0x43, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x50, 0x53, 0x45,
	0x43, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x41, 0x45, 0x53, 0x31, 0x32, 0x38, 0x5f,
	0x47, 0x43, 0x4d, 0x31, 0x36, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x5f, 0x47,
	0x43, 0x4d, 0x31, 0x36, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f,
	0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x41, 0x45, 0x53, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x4d,
	0x41, 0x43, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x43, 0x49,
	0x50, 0x48, 0x45, 0x52, 0x5f, 0x41, 0x45, 0x53, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x4d, 0x41, 0x43,
	0x10, 0x04, 0x2a, 0x6a, 0x0a, 0x0e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x2a, 0x8a,
	0x02, 0x0a, 0x0d, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x54, 0x58, 0x5f, 0x4e, 0x4f,
	0x4e, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x03, 0x12, 0x21,
	0x0a, 0x1d, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x52, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10,
	0x04, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x58, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x58, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x49,
	0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x06, 0x2a, 0xe7, 0x01, 0x0a, 0x17,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x53, 0x41, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x33, 0x0a, 0x2f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41,
	0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x41,
	0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x01, 0x12, 0x34, 0x0a, 0x30, 0x49, 0x50, 0x53,
	0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x02, 0x12,
	0x34, 0x0a, 0x30, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x4f, 0x43, 0x54, 0x45,
	0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x42, 0x4f, 0x56, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d,
	0x41, 0x52, 0x4b, 0x10, 0x03, 0x2a, 0x94, 0x03, 0x0a, 0x0b, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53,
	0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x50, 0x53, 0x45,
	0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x50,
	0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x4f, 0x4f, 0x44,
	0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x22, 0x0a,
	0x1e, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x10,
	0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x10,
	0x06, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x5f, 0x50,
	0x4b, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x50, 0x53, 0x45,
	0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x10, 0x08, 0x12, 0x27, 0x0a,
	0x23, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44,
	0x55, 0x4d, 0x4d, 0x59, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54,
	0x53, 0x5f, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f,
	0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x0a, 0x2a, 0x7f, 0x0a, 0x12,
	0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x53, 0x4f, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x53, 0x4f, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x2a, 0x60, 0x0a,
	0x0d, 0x4c, 0x32, 0x6d, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x4c, 0x32, 0x4d, 0x43, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x4c, 0x32, 0x4d, 0x43, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x32, 0x4d, 0x43, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x47, 0x10, 0x02, 0x2a,
	0xa5, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15,
	0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f,
	0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x06, 0x2a, 0xd4, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53,
	0x55, 0x49, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x43, 0x49, 0x50,
	0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45,
	0x53, 0x5f, 0x31, 0x32, 0x38, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x47,
	0x43, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55,
	0x49, 0x54, 0x45, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x58, 0x50, 0x4e, 0x5f,
	0x31, 0x32, 0x38, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f,
	0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x43, 0x4d,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x58, 0x50, 0x4e, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x04, 0x2a, 0x6e,
	0x0a, 0x0f, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x2a, 0xc6,
	0x06, 0x0a, 0x0e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x5f, 0x55,
	0x4e, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x26, 0x0a,
	0x22, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x43,
	0x54, 0x45, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x2c, 0x0a,
	0x28, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x41, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x41, 0x43,
	0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x41, 0x43,
	0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x42, 0x52,
	0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x2e, 0x0a, 0x2a, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x0b, 0x12, 0x22,
	0x0a, 0x1e, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44,
	0x10, 0x0c, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x0d, 0x12,
	0x26, 0x0a, 0x22, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50,
	0x4b, 0x54, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x54, 0x41, 0x47,
	0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x4e,
	0x4f, 0x5f, 0x53, 0x43, 0x49, 0x10, 0x11, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x41, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50,
	0x4b, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x43, 0x49, 0x10,
	0x12, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x52, 0x55, 0x4e, 0x10, 0x13, 0x2a, 0xa0, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41,
	0x43, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41,
	0x43, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x03, 0x2a, 0xe9, 0x03, 0x0a, 0x0c, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x43,
	0x54, 0x45, 0x54, 0x53, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f,
	0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53,
	0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f,
	0x55, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x55, 0x4e,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x43,
	0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50,
	0x4b, 0x54, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1f, 0x0a,
	0x1b, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x22,
	0x0a, 0x1e, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x41, 0x43, 0x53,
	0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x41, 0x10,
	0x0a, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x55, 0x53,
	0x45, 0x44, 0x5f, 0x53, 0x41, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54,
	0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x0c, 0x2a, 0x50, 0x0a, 0x0c, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x53, 0x63, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43,
	0x5f, 0x53, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43,
	0x5f, 0x53, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x53, 0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x01, 0x2a, 0x77, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x03, 0x2a, 0xac, 0x01, 0x0a, 0x1b, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0xbf, 0x01, 0x0a, 0x11, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57,
	0x10, 0x04, 0x2a, 0xfa, 0x03, 0x0a, 0x20, 0x4d, 0x79, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x31, 0x4d, 0x59, 0x5f, 0x53, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e,
	0x0a, 0x2a, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52,
	0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x2d,
	0x0a, 0x29, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52,
	0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x53, 0x50, 0x10, 0x02, 0x12, 0x2d, 0x0a,
	0x29, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e,
	0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f,
	0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x50, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29,
	0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x04, 0x12, 0x35, 0x0a, 0x31, 0x4d,
	0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46, 0x4c,
	0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x53, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x50,
	0x10, 0x05, 0x12, 0x35, 0x0a, 0x31, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41,
	0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x44, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x50, 0x10, 0x06, 0x12, 0x35, 0x0a, 0x31, 0x4d, 0x59, 0x5f,
	0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x56,
	0x4f, 0x52, 0x5f, 0x50, 0x53, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x07,
	0x12, 0x3d, 0x0a, 0x39, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49,
	0x4f, 0x52, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x50, 0x53, 0x50, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x55, 0x53, 0x50, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x08, 0x2a,
	0x81, 0x06, 0x0a, 0x1a, 0x4d, 0x79, 0x53, 0x69, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x2e,
	0x0a, 0x2a, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24,
	0x0a, 0x20, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52,
	0x5f, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45,
	0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x58, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x59,
	0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x54, 0x10, 0x03,
	0x12, 0x26, 0x0a, 0x22, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49,
	0x4f, 0x52, 0x5f, 0x44, 0x58, 0x36, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x59, 0x5f, 0x53,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x44, 0x58, 0x34, 0x10, 0x05,
	0x12, 0x26, 0x0a, 0x22, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49,
	0x4f, 0x52, 0x5f, 0x44, 0x54, 0x36, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x59, 0x5f, 0x53,
	0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x44, 0x54, 0x34, 0x10, 0x07,
	0x12, 0x27, 0x0a, 0x23, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49,
	0x4f, 0x52, 0x5f, 0x44, 0x54, 0x34, 0x36, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x59, 0x5f,
	0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x42, 0x36, 0x5f, 0x45,
	0x4e, 0x43, 0x41, 0x50, 0x53, 0x10, 0x09, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x59, 0x5f, 0x53, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x42, 0x36, 0x5f, 0x45, 0x4e, 0x43,
	0x41, 0x50, 0x53, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x59, 0x5f,
	0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x42, 0x36, 0x5f, 0x49,
	0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x0b, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x59, 0x5f, 0x53, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x42, 0x36, 0x5f, 0x49, 0x4e, 0x53,
	0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x59, 0x5f,
	0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x10, 0x0d,
	0x12, 0x25, 0x0a, 0x21, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49,
	0x4f, 0x52, 0x5f, 0x55, 0x41, 0x10, 0x0e, 0x12, 0x35, 0x0a, 0x31, 0x4d, 0x59, 0x5f, 0x53, 0x49,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x0f, 0x12, 0x33,
	0x0a, 0x2f, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x4e,
	0x44, 0x10, 0x10, 0x2a, 0xa9, 0x01, 0x0a, 0x07, 0x4e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x4e, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x4e, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4e, 0x41, 0x54, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41,
	0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d,
	0x4e, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x05, 0x2a,
	0xdf, 0x09, 0x0a, 0x0f, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x53, 0x52, 0x43, 0x5f,
	0x49, 0x50, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x50,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53,
	0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x52,
	0x43, 0x5f, 0x49, 0x50, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x4e, 0x45,
	0x52, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x09,
	0x12, 0x24, 0x0a, 0x20, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x44, 0x53, 0x54, 0x5f,
	0x49, 0x50, 0x56, 0x34, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x4e, 0x45,
	0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20,
	0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36,
	0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53,
	0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x10,
	0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x34, 0x5f, 0x53, 0x52,
	0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x34,
	0x5f, 0x44, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x4e,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x53, 0x52, 0x43, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x14, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e,
	0x4e, 0x45, 0x52, 0x5f, 0x49, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10,
	0x15, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x10, 0x16, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e,
	0x4e, 0x45, 0x52, 0x5f, 0x4c, 0x34, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x17, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x4c, 0x34, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x18, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x19, 0x12,
	0x23, 0x0a, 0x1f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x4d,
	0x41, 0x43, 0x10, 0x1a, 0x12, 0x24, 0x0a, 0x20, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c,
	0x41, 0x42, 0x45, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x1b, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x30, 0x10, 0x1c, 0x12, 0x22,
	0x0a, 0x1e, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x31,
	0x10, 0x1d, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53,
	0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x32, 0x10, 0x1e, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x33, 0x10, 0x1f, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x34, 0x10, 0x20, 0x12, 0x25,
	0x0a, 0x21, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x41,
	0x42, 0x45, 0x4c, 0x10, 0x21, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x22, 0x2a, 0x75, 0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x45, 0x58, 0x54,
	0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x35, 0x0a, 0x31, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52,
	0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x54, 0x4f,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x01, 0x2a, 0xbf, 0x01, 0x0a, 0x20, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x35, 0x0a,
	0x31, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45,
	0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x52,
	0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x31, 0x0a, 0x2d, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x02, 0x2a, 0xb7, 0x01, 0x0a, 0x1e, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x33, 0x0a,
	0x2f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x42, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x42, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x2a, 0xa5, 0x02, 0x0a, 0x10, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e,
	0x0a, 0x2a, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x55, 0x4e,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x5f, 0x45, 0x43, 0x4d,
	0x50, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x9a, 0x01, 0x0a,
	0x0b, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x45, 0x58,
	0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f,
	0x53, 0x49, 0x44, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x2a, 0xf2, 0x17, 0x0a, 0x0a, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x41, 0x47, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x10, 0x05,
	0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x06,
	0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a,
	0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x4c,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0b,
	0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x0c, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x10,
	0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x10, 0x12,
	0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x50, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x10, 0x13,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x52, 0x45, 0x44, 0x10, 0x14, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x15, 0x12,
	0x15, 0x0a, 0x11, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x10,
	0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x19, 0x12,
	0x1e, 0x0a, 0x1a, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x1a, 0x12,
	0x26, 0x0a, 0x22, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x1b, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x47, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x1c, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x44, 0x46, 0x10, 0x1e, 0x12, 0x19,
	0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x44,
	0x46, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x44, 0x46, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x20, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x21, 0x12,
	0x16, 0x0a, 0x12, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x22, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52,
	0x41, 0x50, 0x10, 0x23, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x24, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x25, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x10, 0x26, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0x27, 0x12, 0x1b, 0x0a, 0x17, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x28, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41,
	0x50, 0x10, 0x2a, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x2b, 0x12, 0x27, 0x0a, 0x23, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x10, 0x2c, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x2d, 0x12,
	0x25, 0x0a, 0x21, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x2e, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x2f,
	0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x50, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x30, 0x12, 0x20, 0x0a, 0x1c, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x50, 0x46, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x31, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x4d,
	0x43, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x32, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x4d, 0x43, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x33, 0x12, 0x1a, 0x0a, 0x16,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x4d, 0x43,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x34, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x4d, 0x43, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x35, 0x12, 0x1a, 0x0a, 0x16, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x4d, 0x43, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x36, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x4d, 0x43, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x10, 0x37, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x10, 0x38, 0x12, 0x28, 0x0a, 0x24, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x10, 0x39, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52,
	0x49, 0x44, 0x47, 0x45, 0x10, 0x3a, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x3b, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x10, 0x3c, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4d, 0x10, 0x3d, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x53,
	0x49, 0x44, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x3e, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f,
	0x4c, 0x10, 0x3f, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x40,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x54, 0x45, 0x4c, 0x10, 0x41, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x42, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x49, 0x4e,
	0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x43, 0x12, 0x23, 0x0a, 0x1f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x54, 0x45, 0x4c, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x44,
	0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x54, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x45, 0x12, 0x1b, 0x0a, 0x17,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x46, 0x44, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x46, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x47, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x48, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x10,
	0x49, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x4a, 0x12, 0x23, 0x0a,
	0x1f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4d,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x4b, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x4c,
	0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x4d, 0x12,
	0x1d, 0x0a, 0x19, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x10, 0x4e, 0x12, 0x1d,
	0x0a, 0x19, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41,
	0x4d, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x4f, 0x12, 0x20, 0x0a,
	0x1c, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4d,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x50, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x51, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x5f, 0x5a, 0x4f,
	0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x52, 0x12, 0x19, 0x0a, 0x15,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x53, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x54,
	0x12, 0x17, 0x0a, 0x13, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x55, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x56, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x57, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x52,
	0x44, 0x45, 0x53, 0x10, 0x58, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x10, 0x59, 0x12, 0x1b, 0x0a,
	0x17, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43,
	0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x5a, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43,
	0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x5b, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x43,
	0x10, 0x5c, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x10, 0x5d, 0x12, 0x1b, 0x0a,
	0x17, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x5e, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x47,
	0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x10, 0x5f, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x10, 0x60, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x61,
	0x12, 0x16, 0x0a, 0x12, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x59, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x62, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x63, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x53, 0x45,
	0x43, 0x10, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x10, 0x66, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x67, 0x2a, 0xeb,
	0x02, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4c, 0x32, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x55, 0x54, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x33, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23,
	0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4c, 0x33, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x07, 0x12,
	0x25, 0x0a, 0x21, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x08, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x09, 0x2a, 0x67, 0x0a, 0x0d,
	0x4f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x45, 0x78, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x4f, 0x55, 0x54, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x4f, 0x55, 0x54, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f,
	0x55, 0x54, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50,
	0x49, 0x50, 0x45, 0x10, 0x02, 0x2a, 0x67, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x54,
	0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x55, 0x54, 0x53, 0x45, 0x47,
	0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x55, 0x54, 0x53, 0x45,
	0x47, 0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x46, 0x4f,
	0x52, 0x4d, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x55, 0x54, 0x53, 0x45, 0x47, 0x5f, 0x54,
	0x54, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x10, 0x02, 0x2a, 0x55,
	0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x4f, 0x55, 0x54, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x55, 0x54,
	0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x4f, 0x55, 0x54, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x57, 0x41, 0x50, 0x10, 0x02, 0x2a, 0xf9, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x03,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x52, 0x41, 0x50, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x45, 0x4e, 0x59, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10,
	0x08, 0x2a, 0x72, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x47,
	0x52, 0x45, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f,
	0x52, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x7e, 0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x56,
	0x6c, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x56, 0x4c,
	0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x55, 0x4e, 0x54, 0x41, 0x47, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f,
	0x54, 0x41, 0x47, 0x10, 0x03, 0x2a, 0xa6, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65,
	0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x20,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x42, 0x4c, 0x49, 0x4e, 0x44,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x03, 0x2a, 0xa1,
	0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x52, 0x5f,
	0x54, 0x43, 0x4d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x52, 0x5f, 0x54, 0x43, 0x4d, 0x10, 0x02, 0x12, 0x1e,
	0x0a, 0x1a, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x52, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x10, 0x04, 0x2a, 0xbe, 0x02, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x42, 0x59,
	0x54, 0x45, 0x53, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x53, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x42, 0x59,
	0x54, 0x45, 0x53, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x53, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x08, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x10, 0x09, 0x2a, 0xd9, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x6f,
	0x4e, 0x65, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a,
	0x25, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4e, 0x45,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4e, 0x45, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04, 0x2a,
	0xcc, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x4f, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x4f,
	0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x5f, 0x4c,
	0x41, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x52,
	0x45, 0x41, 0x4b, 0x4f, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x32, 0x5f, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x4f, 0x55, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x34, 0x5f, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x4f, 0x55, 0x54, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x04, 0x2a, 0xc9,
	0x01, 0x0a, 0x19, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x28,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x2a,
	0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x03, 0x2a, 0xd6, 0x01, 0x0a, 0x0d, 0x50,
	0x6f, 0x72, 0x74, 0x44, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a,
	0x14, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x44, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45,
	0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x46, 0x49, 0x42, 0x45,
	0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x43, 0x4f, 0x50, 0x50,
	0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x5f, 0x46, 0x49, 0x42, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45,
	0x44, 0x10, 0x05, 0x2a, 0x85, 0x03, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x72, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x43, 0x52, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4d, 0x49, 0x53, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x52,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x58, 0x5f, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x52, 0x43, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x09, 0x2a, 0xef, 0x01, 0x0a, 0x13,
	0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x53, 0x35, 0x32, 0x38, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x53, 0x35, 0x34, 0x34, 0x10, 0x03,
	0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x53, 0x35, 0x34, 0x34,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1d,
	0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x43, 0x10, 0x05, 0x2a, 0x70, 0x0a,
	0x0b, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x43, 0x10, 0x03, 0x2a,
	0xd1, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x58,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x04, 0x2a, 0x9f, 0x05, 0x0a, 0x11, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x52, 0x32, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x34,
	0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x10, 0x05, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x32, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x52, 0x34, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x52, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x52, 0x34, 0x10,
	0x09, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x52, 0x10, 0x0a, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x52, 0x34, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x41, 0x55, 0x49, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x4d, 0x49, 0x49, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x46,
	0x49, 0x10, 0x0e, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x4c, 0x41, 0x55, 0x49,
	0x10, 0x0f, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x52, 0x32, 0x10, 0x10, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x55, 0x49, 0x34, 0x10, 0x11, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x41, 0x55, 0x49, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x58, 0x46, 0x49, 0x10, 0x13, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x58, 0x47, 0x4d, 0x49, 0x49, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x15, 0x2a, 0xb7, 0x01, 0x0a, 0x18, 0x50, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x4f, 0x50,
	0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x03, 0x2a,
	0xa5, 0x02, 0x0a, 0x1d, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54,
	0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x39, 0x0a, 0x35,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x4e, 0x52, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x52, 0x45,
	0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x2a, 0xa0, 0x01, 0x0a, 0x18, 0x50, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x52,
	0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xae, 0x01, 0x0a, 0x10, 0x50,
	0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x50,
	0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50,
	0x48, 0x59, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x04, 0x2a, 0xa4, 0x01, 0x0a, 0x12,
	0x50, 0x6f, 0x72, 0x74, 0x4d, 0x64, 0x69, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x44, 0x49, 0x58, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4d, 0x44, 0x49, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4d, 0x44, 0x49, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x23, 0x0a,
	0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x44, 0x49, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x4f, 0x56, 0x45, 0x52,
	0x10, 0x03, 0x2a, 0x84, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x64, 0x69, 0x78, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4d, 0x44, 0x49, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x44, 0x49, 0x58, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x44, 0x49,
	0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52,
	0x4f, 0x53, 0x53, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x02, 0x2a, 0xc4, 0x01, 0x0a, 0x0d, 0x50, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49,
	0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x10,
	0x04, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x10, 0x05,
	0x2a, 0x91, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x30, 0x30, 0x30, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x58, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x31, 0x30, 0x30, 0x46, 0x58,
	0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x47, 0x4d, 0x49, 0x49, 0x5f, 0x53, 0x4c, 0x41,
	0x56, 0x45, 0x10, 0x03, 0x2a, 0xc4, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x2a, 0xf1, 0x07, 0x0a, 0x0c,
	0x50, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49,
	0x46, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45,
	0x45, 0x4e, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45,
	0x4e, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50,
	0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x53, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50,
	0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10,
	0x06, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57,
	0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x53, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x09, 0x12, 0x30, 0x0a, 0x2c,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47,
	0x52, 0x45, 0x45, 0x4e, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x2e,
	0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x31,
	0x0a, 0x2d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e,
	0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10,
	0x0c, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f,
	0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53,
	0x10, 0x0d, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43,
	0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53,
	0x10, 0x0e, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43,
	0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0f,
	0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x10, 0x12, 0x28, 0x0a, 0x24,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57,
	0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50,
	0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x5f, 0x4f, 0x43,
	0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x12, 0x12,
	0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x13, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x14, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x41, 0x54,
	0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x15, 0x12, 0x1f,
	0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x16, 0x2a,
	0xb3, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x62, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x42,
	0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x58,
	0x5f, 0x52, 0x58, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52,
	0x42, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x52, 0x58, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52,
	0x42, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x54, 0x58, 0x10, 0x04, 0x2a, 0xc4, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x62, 0x73, 0x52, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f, 0x52, 0x58, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x53, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52,
	0x42, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x04, 0x2a, 0xaa, 0x01, 0x0a,
	0x1b, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x2b,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x4c,
	0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a,
	0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x93, 0x01, 0x0a, 0x0b, 0x50, 0x6f,
	0x72, 0x74, 0x50, 0x74, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x54, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x50, 0x54, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x54, 0x50, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x54, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x53,
	0x54, 0x45, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x03, 0x2a,
	0xfa, 0x40, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54,
	0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54,
	0x53, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41,
	0x52, 0x44, 0x53, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10,
	0x05, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49,
	0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x53, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x08, 0x12, 0x21, 0x0a,
	0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x49, 0x4e,
	0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x53, 0x10, 0x09,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x46,
	0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x0b, 0x12, 0x23,
	0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x4f,
	0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54,
	0x53, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x46, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x53,
	0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x49, 0x46, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x0e, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x51, 0x4c, 0x45, 0x4e, 0x10, 0x0f, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x10, 0x12,
	0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x10, 0x11, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x12, 0x12, 0x28, 0x0a, 0x24, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50,
	0x4b, 0x54, 0x53, 0x10, 0x13, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x42,
	0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x14, 0x12,
	0x28, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x15, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x53, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x16, 0x12, 0x28,
	0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x36, 0x34, 0x5f,
	0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x17, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x36, 0x35, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x32, 0x37,
	0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x18, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x53, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x54, 0x4f, 0x5f, 0x32,
	0x35, 0x35, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x19, 0x12, 0x30, 0x0a, 0x2c, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x53, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x54, 0x4f,
	0x5f, 0x35, 0x31, 0x31, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x1a, 0x12, 0x31, 0x0a,
	0x2d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x35, 0x31, 0x32, 0x5f,
	0x54, 0x4f, 0x5f, 0x31, 0x30, 0x32, 0x33, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x1b,
	0x12, 0x32, 0x0a, 0x2e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x31,
	0x30, 0x32, 0x34, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x35, 0x31, 0x38, 0x5f, 0x4f, 0x43, 0x54, 0x45,
	0x54, 0x53, 0x10, 0x1c, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x5f, 0x31, 0x35, 0x31, 0x39, 0x5f, 0x54, 0x4f, 0x5f, 0x32, 0x30, 0x34, 0x37, 0x5f,
	0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x1d, 0x12, 0x32, 0x0a, 0x2e, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x5f, 0x54, 0x4f, 0x5f, 0x34,
	0x30, 0x39, 0x35, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x1e, 0x12, 0x32, 0x0a, 0x2e,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x34, 0x30, 0x39, 0x36, 0x5f,
	0x54, 0x4f, 0x5f, 0x39, 0x32, 0x31, 0x36, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x1f,
	0x12, 0x33, 0x0a, 0x2f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x39,
	0x32, 0x31, 0x37, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x36, 0x33, 0x38, 0x33, 0x5f, 0x4f, 0x43, 0x54,
	0x45, 0x54, 0x53, 0x10, 0x20, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x21, 0x12, 0x24,
	0x0a, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x52, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x10, 0x22, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x54, 0x58, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x5a, 0x45, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x23, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x53, 0x5f, 0x4a, 0x41, 0x42, 0x42, 0x45, 0x52, 0x53, 0x10, 0x24, 0x12, 0x20, 0x0a,
	0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x25, 0x12,
	0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x26, 0x12,
	0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x27, 0x12, 0x2a, 0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x43,
	0x52, 0x43, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10,
	0x28, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x54, 0x58, 0x5f, 0x4e, 0x4f,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x29, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x53, 0x5f, 0x52, 0x58, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10,
	0x2a, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49,
	0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x53, 0x10, 0x2b, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x5f,
	0x49, 0x4e, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x2c, 0x12, 0x1e, 0x0a, 0x1a, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x55,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x2d, 0x12, 0x22, 0x0a, 0x1e, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x4e,
	0x4f, 0x4e, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x2e, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x5f,
	0x49, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x53, 0x10, 0x2f, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x30, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x55,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x31, 0x12, 0x23, 0x0a, 0x1f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x4e, 0x4f, 0x4e, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x32,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50,
	0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x53, 0x10, 0x33, 0x12,
	0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x53, 0x10, 0x34, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x35, 0x12, 0x20, 0x0a,
	0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f,
	0x49, 0x4e, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x36, 0x12,
	0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50,
	0x4b, 0x54, 0x53, 0x10, 0x37, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x49, 0x4e, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x38, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x41, 0x52, 0x44, 0x53, 0x10, 0x39, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x43,
	0x54, 0x45, 0x54, 0x53, 0x10, 0x3a, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x55, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x3b, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x4e, 0x4f, 0x4e, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x3c,
	0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54,
	0x53, 0x10, 0x3d, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52,
	0x44, 0x53, 0x10, 0x3e, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x3f, 0x12, 0x26,
	0x0a, 0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45,
	0x4e, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x40, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10,
	0x41, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x59,
	0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x42, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x52, 0x45, 0x44,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53,
	0x10, 0x43, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x52, 0x45, 0x44, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x45, 0x12, 0x20, 0x0a, 0x1c,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x46, 0x12, 0x20,
	0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x43, 0x4e, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x47,
	0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x36, 0x34, 0x5f, 0x4f,
	0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x48, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x5f, 0x36, 0x35, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x32, 0x37, 0x5f, 0x4f, 0x43, 0x54,
	0x45, 0x54, 0x53, 0x10, 0x49, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53,
	0x5f, 0x31, 0x32, 0x38, 0x5f, 0x54, 0x4f, 0x5f, 0x32, 0x35, 0x35, 0x5f, 0x4f, 0x43, 0x54, 0x45,
	0x54, 0x53, 0x10, 0x4a, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f,
	0x32, 0x35, 0x36, 0x5f, 0x54, 0x4f, 0x5f, 0x35, 0x31, 0x31, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54,
	0x53, 0x10, 0x4b, 0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x35,
	0x31, 0x32, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x30, 0x32, 0x33, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54,
	0x53, 0x10, 0x4c, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x31,
	0x30, 0x32, 0x34, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x35, 0x31, 0x38, 0x5f, 0x4f, 0x43, 0x54, 0x45,
	0x54, 0x53, 0x10, 0x4d, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f,
	0x31, 0x35, 0x31, 0x39, 0x5f, 0x54, 0x4f, 0x5f, 0x32, 0x30, 0x34, 0x37, 0x5f, 0x4f, 0x43, 0x54,
	0x45, 0x54, 0x53, 0x10, 0x4e, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54, 0x53,
	0x5f, 0x32, 0x30, 0x34, 0x38, 0x5f, 0x54, 0x4f, 0x5f, 0x34, 0x30, 0x39, 0x35, 0x5f, 0x4f, 0x43,
	0x54, 0x45, 0x54, 0x53, 0x10, 0x4f, 0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b, 0x54,
	0x53, 0x5f, 0x34, 0x30, 0x39, 0x36, 0x5f, 0x54, 0x4f, 0x5f, 0x39, 0x32, 0x31, 0x36, 0x5f, 0x4f,
	0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x50, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x5f, 0x39, 0x32, 0x31, 0x37, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x36, 0x33, 0x38, 0x33,
	0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x51, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x36, 0x34, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10,
	0x52, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x36, 0x35,
	0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x32, 0x37, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x53,
	0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x31, 0x32, 0x38,
	0x5f, 0x54, 0x4f, 0x5f, 0x32, 0x35, 0x35, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x54,
	0x12, 0x2e, 0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x32, 0x35, 0x36,
	0x5f, 0x54, 0x4f, 0x5f, 0x35, 0x31, 0x31, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x55,
	0x12, 0x2f, 0x0a, 0x2b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x35, 0x31, 0x32,
	0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x30, 0x32, 0x33, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10,
	0x56, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x31, 0x30,
	0x32, 0x34, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x35, 0x31, 0x38, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54,
	0x53, 0x10, 0x57, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f,
	0x31, 0x35, 0x31, 0x39, 0x5f, 0x54, 0x4f, 0x5f, 0x32, 0x30, 0x34, 0x37, 0x5f, 0x4f, 0x43, 0x54,
	0x45, 0x54, 0x53, 0x10, 0x58, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x4b, 0x54,
	0x53, 0x5f, 0x32, 0x30, 0x34, 0x38, 0x5f, 0x54, 0x4f, 0x5f, 0x34, 0x30, 0x39, 0x35, 0x5f, 0x4f,
	0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x59, 0x12, 0x30, 0x0a, 0x2c, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50,
	0x4b, 0x54, 0x53, 0x5f, 0x34, 0x30, 0x39, 0x36, 0x5f, 0x54, 0x4f, 0x5f, 0x39, 0x32, 0x31, 0x36,
	0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x5a, 0x12, 0x31, 0x0a, 0x2d, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x50, 0x4b, 0x54, 0x53, 0x5f, 0x39, 0x32, 0x31, 0x37, 0x5f, 0x54, 0x4f, 0x5f, 0x31, 0x36,
	0x33, 0x38, 0x33, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x5b, 0x12, 0x25, 0x0a, 0x21,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x5c, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x42, 0x59,
	0x54, 0x45, 0x53, 0x10, 0x5d, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x52,
	0x52, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x59, 0x54, 0x45,
	0x53, 0x10, 0x5e, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52,
	0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x5f, 0x12, 0x26, 0x0a, 0x22,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x60, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x5f,
	0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x61, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x62, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x57,
	0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x63,
	0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x64, 0x12,
	0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x65, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x66, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x54, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x67, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x30, 0x5f, 0x52, 0x58, 0x5f,
	0x50, 0x4b, 0x54, 0x53, 0x10, 0x68, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x30, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x4b, 0x54,
	0x53, 0x10, 0x69, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x50, 0x46, 0x43, 0x5f, 0x31, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x6a,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46,
	0x43, 0x5f, 0x31, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x6b, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x32,
	0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x32, 0x5f, 0x54, 0x58,
	0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x33, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x10, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x33, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10,
	0x6f, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50,
	0x46, 0x43, 0x5f, 0x34, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x70, 0x12, 0x1b,
	0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f,
	0x34, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x71, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x35, 0x5f, 0x52,
	0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x72, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x35, 0x5f, 0x54, 0x58, 0x5f, 0x50,
	0x4b, 0x54, 0x53, 0x10, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x36, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53,
	0x10, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x50, 0x46, 0x43, 0x5f, 0x36, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x75, 0x12,
	0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43,
	0x5f, 0x37, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x76, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x37, 0x5f,
	0x54, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x77, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x30, 0x5f, 0x52, 0x58, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x78,
	0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46,
	0x43, 0x5f, 0x30, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x79, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x31, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x7a, 0x12, 0x25,
	0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f,
	0x31, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x7b, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x32, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x7c, 0x12, 0x25, 0x0a, 0x21,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x32, 0x5f,
	0x54, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x7d, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x50, 0x46, 0x43, 0x5f, 0x33, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x7e, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x33, 0x5f, 0x54, 0x58,
	0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x7f, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50,
	0x46, 0x43, 0x5f, 0x34, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x80, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x34, 0x5f, 0x54, 0x58, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x81,
	0x01, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50,
	0x46, 0x43, 0x5f, 0x35, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x82, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x35, 0x5f, 0x54, 0x58, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x83,
	0x01, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50,
	0x46, 0x43, 0x5f, 0x36, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x84, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x36, 0x5f, 0x54, 0x58, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x85,
	0x01, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50,
	0x46, 0x43, 0x5f, 0x37, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x86, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x37, 0x5f, 0x54, 0x58, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x87,
	0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50,
	0x46, 0x43, 0x5f, 0x30, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x10, 0x88, 0x01, 0x12, 0x29, 0x0a, 0x24,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x30, 0x5f,
	0x54, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x53, 0x10, 0x89, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x31, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x10,
	0x8a, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x50, 0x46, 0x43, 0x5f, 0x31, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x10, 0x8b, 0x01, 0x12, 0x29, 0x0a,
	0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x32,
	0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x10, 0x8c, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x32, 0x5f, 0x54, 0x58, 0x5f, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53,
	0x10, 0x8d, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x50, 0x46, 0x43, 0x5f, 0x33, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x10, 0x8e, 0x01, 0x12, 0x29,
	0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f,
	0x33, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x10, 0x8f, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x34, 0x5f, 0x52, 0x58, 0x5f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x53, 0x10, 0x90, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x34, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x10, 0x91, 0x01, 0x12,
	0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43,
	0x5f, 0x35, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x10, 0x92, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x35, 0x5f, 0x54, 0x58,
	0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x10, 0x93, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x36, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x10, 0x94, 0x01,
	0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46,
	0x43, 0x5f, 0x36, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x10, 0x95, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x37, 0x5f, 0x52,
	0x58, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x53, 0x10, 0x96, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x37, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x10, 0x97,
	0x01, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50,
	0x46, 0x43, 0x5f, 0x30, 0x5f, 0x4f, 0x4e, 0x32, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x58, 0x5f, 0x50,
	0x4b, 0x54, 0x53, 0x10, 0x98, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x31, 0x5f, 0x4f, 0x4e, 0x32, 0x4f, 0x46, 0x46,
	0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x99, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x32, 0x5f, 0x4f,
	0x4e, 0x32, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x9a, 0x01,
	0x12, 0x23, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46,
	0x43, 0x5f, 0x33, 0x5f, 0x4f, 0x4e, 0x32, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x10, 0x9b, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x34, 0x5f, 0x4f, 0x4e, 0x32, 0x4f, 0x46, 0x46, 0x5f,
	0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x9c, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x35, 0x5f, 0x4f, 0x4e,
	0x32, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x9d, 0x01, 0x12,
	0x23, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x46, 0x43,
	0x5f, 0x36, 0x5f, 0x4f, 0x4e, 0x32, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x58, 0x5f, 0x50, 0x4b, 0x54,
	0x53, 0x10, 0x9e, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x37, 0x5f, 0x4f, 0x4e, 0x32, 0x4f, 0x46, 0x46, 0x5f, 0x52,
	0x58, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x9f, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x53, 0x10, 0xa0, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x46, 0x43,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0xa1, 0x01, 0x12, 0x31, 0x0a, 0x2c, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x53, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x10, 0xa2, 0x01, 0x12, 0x33,
	0x0a, 0x2e, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x33,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53,
	0x10, 0xa3, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x44, 0x4f, 0x54, 0x33, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x53, 0x51, 0x45, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0xa4, 0x01, 0x12, 0x30,
	0x0a, 0x2b, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x33,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xa5, 0x01,
	0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x4f,
	0x54, 0x33, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xa6, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x4c, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xa7, 0x01, 0x12, 0x36, 0x0a, 0x31, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x43,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53,
	0x10, 0xa8, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x44, 0x4f, 0x54, 0x33, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x43, 0x41, 0x52, 0x52,
	0x49, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53,
	0x10, 0xa9, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x44, 0x4f, 0x54, 0x33, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x53, 0x10, 0xaa, 0x01, 0x12, 0x35,
	0x0a, 0x30, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x33,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x4d, 0x41, 0x43, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x53, 0x10, 0xab, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x33, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0xac, 0x01, 0x12, 0x2e,
	0x0a, 0x29, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x4f, 0x54, 0x33,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x10, 0xad, 0x01, 0x12, 0x21,
	0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x45, 0x45, 0x5f,
	0x54, 0x58, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xae,
	0x01, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45,
	0x45, 0x45, 0x5f, 0x52, 0x58, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0xaf, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x45, 0x45, 0x45, 0x5f, 0x54, 0x58, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xb0, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x45, 0x45, 0x45, 0x5f, 0x52, 0x58, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xb1, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x50, 0x52, 0x42, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0xb2, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x10,
	0xb3, 0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x49, 0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53,
	0x10, 0xb4, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x43, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0xb5, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x49, 0x4e, 0x5f, 0x46,
	0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53,
	0x10, 0xb6, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x46, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x10, 0xb7, 0x01, 0x12, 0x28, 0x0a, 0x23,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x10, 0xb8, 0x01, 0x12, 0x38, 0x0a, 0x33, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45,
	0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x30,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0xb9, 0x01,
	0x12, 0x38, 0x0a, 0x33, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x31, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0xba, 0x01, 0x12, 0x38, 0x0a, 0x33, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x53, 0x5f, 0x32, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54,
	0x53, 0x10, 0xbb, 0x01, 0x12, 0x38, 0x0a, 0x33, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x33, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0xbc, 0x01, 0x12, 0x38,
	0x0a, 0x33, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x34, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0xbd, 0x01, 0x12, 0x38, 0x0a, 0x33, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53,
	0x5f, 0x35, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10,
	0xbe, 0x01, 0x12, 0x38, 0x0a, 0x33, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x36, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0xbf, 0x01, 0x12, 0x38, 0x0a, 0x33,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x37, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50,
	0x4b, 0x54, 0x53, 0x10, 0xc0, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xc1, 0x01, 0x12,
	0x29, 0x0a, 0x24, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0xc2, 0x01, 0x12, 0x39, 0x0a, 0x34, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x53, 0x5f, 0x30, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x10, 0xc3, 0x01, 0x12, 0x39, 0x0a, 0x34, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45,
	0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x31,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0xc4, 0x01,
	0x12, 0x39, 0x0a, 0x34, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x32, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0xc5, 0x01, 0x12, 0x39, 0x0a, 0x34, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x33, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50,
	0x4b, 0x54, 0x53, 0x10, 0xc6, 0x01, 0x12, 0x39, 0x0a, 0x34, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f,
	0x34, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0xc7,
	0x01, 0x12, 0x39, 0x0a, 0x34, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f,
	0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x35, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0xc8, 0x01, 0x12, 0x39, 0x0a, 0x34,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x36, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f,
	0x50, 0x4b, 0x54, 0x53, 0x10, 0xc9, 0x01, 0x12, 0x39, 0x0a, 0x34, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53,
	0x5f, 0x37, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10,
	0xca, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xcb, 0x01, 0x2a, 0x7c, 0x0a, 0x08,
	0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x50, 0x55, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49,
	0x43, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x04, 0x2a, 0x81, 0x05, 0x0a, 0x0a, 0x51,
	0x6f, 0x73, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x4f, 0x53,
	0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x4f, 0x53, 0x5f, 0x4d,
	0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x50, 0x5f, 0x54, 0x4f,
	0x5f, 0x54, 0x43, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x54,
	0x43, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x43, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10,
	0x05, 0x12, 0x25, 0x0a, 0x21, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x54,
	0x4f, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x51, 0x4f, 0x53, 0x5f,
	0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x50, 0x10, 0x07,
	0x12, 0x25, 0x0a, 0x21, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x43, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x08, 0x12, 0x2f, 0x0a, 0x2b, 0x51, 0x4f, 0x53, 0x5f, 0x4d,
	0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x09, 0x12, 0x26, 0x0a, 0x22, 0x51, 0x4f, 0x53, 0x5f,
	0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x0a,
	0x12, 0x1f, 0x0a, 0x1b, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x43, 0x10,
	0x0b, 0x12, 0x22, 0x0a, 0x1e, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x10, 0x0d,
	0x12, 0x29, 0x0a, 0x25, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x0e, 0x12, 0x2d, 0x0a, 0x29, 0x51,
	0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53,
	0x5f, 0x45, 0x58, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x0f, 0x12, 0x22, 0x0a, 0x1e, 0x51, 0x4f,
	0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x10, 0x2a, 0xa3,
	0x01, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x66, 0x63, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x29,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x5f, 0x50, 0x46, 0x43, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0xb6, 0x0b, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x08, 0x12, 0x1d,
	0x0a, 0x19, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c,
	0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x09, 0x12, 0x1b, 0x0a,
	0x17, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10,
	0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x0c, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53,
	0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x52, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x0f,
	0x12, 0x20, 0x0a, 0x1c, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52,
	0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53,
	0x10, 0x10, 0x12, 0x29, 0x0a, 0x25, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x11, 0x12, 0x27, 0x0a,
	0x23, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45,
	0x4e, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x12, 0x12, 0x2a, 0x0a, 0x26, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x52, 0x45, 0x44,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53,
	0x10, 0x13, 0x12, 0x28, 0x0a, 0x24, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x14, 0x12, 0x27, 0x0a, 0x23,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x57,
	0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x53, 0x10, 0x15, 0x12, 0x25, 0x0a, 0x21, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x16, 0x12, 0x23, 0x0a, 0x1f,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10,
	0x17, 0x12, 0x21, 0x0a, 0x1d, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x57, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x18, 0x12, 0x23, 0x0a, 0x1f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43,
	0x59, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x19, 0x12, 0x1e, 0x0a, 0x1a, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52,
	0x4b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x1a, 0x12, 0x2a, 0x0a, 0x26, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x59,
	0x54, 0x45, 0x53, 0x10, 0x1b, 0x12, 0x25, 0x0a, 0x21, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52,
	0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x1c, 0x12, 0x2c, 0x0a, 0x28,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e,
	0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x1d, 0x12, 0x2a, 0x0a, 0x26, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x57,
	0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x1e, 0x12, 0x2d, 0x0a, 0x29, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x52, 0x45, 0x44,
	0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x53, 0x10, 0x1f, 0x12, 0x2b, 0x0a, 0x27, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f,
	0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53,
	0x10, 0x20, 0x12, 0x2a, 0x0a, 0x26, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x21, 0x12, 0x28,
	0x0a, 0x24, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x44,
	0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x22, 0x12, 0x26, 0x0a, 0x22, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x23,
	0x12, 0x24, 0x0a, 0x20, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57,
	0x52, 0x45, 0x44, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x53, 0x10, 0x24, 0x12, 0x23, 0x0a, 0x1f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x5f, 0x4f, 0x43, 0x43, 0x55, 0x50, 0x41,
	0x4e, 0x43, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x25, 0x12, 0x1e, 0x0a, 0x1a, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d,
	0x41, 0x52, 0x4b, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x26, 0x12, 0x20, 0x0a, 0x1c, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x27, 0x2a, 0xe3, 0x01,
	0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a,
	0x16, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x56, 0x4f, 0x51, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x5f, 0x56, 0x4f, 0x51, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x58, 0x10,
	0x06, 0x12, 0x20, 0x0a, 0x1c, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53,
	0x45, 0x10, 0x07, 0x2a, 0x84, 0x03, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x21, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4f,
	0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x02, 0x12, 0x24, 0x0a,
	0x20, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54,
	0x53, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x43, 0x54,
	0x45, 0x54, 0x53, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10,
	0x06, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x07, 0x12, 0x2b, 0x0a,
	0x27, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x08, 0x2a, 0xb2, 0x02, 0x0a, 0x13, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x25, 0x0a,
	0x21, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55,
	0x42, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x06, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x51, 0x49, 0x4e, 0x51, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x07, 0x2a,
	0x74, 0x0a, 0x10, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x4c,
	0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x41, 0x4d, 0x50, 0x4c,
	0x45, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x7c, 0x0a, 0x10, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x41, 0x4d,
	0x50, 0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x2a, 0x80, 0x01, 0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43,
	0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x52, 0x52, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x57, 0x52, 0x52, 0x10, 0x03, 0x2a, 0xdd, 0x01, 0x0a, 0x0f, 0x53, 0x72, 0x76, 0x36, 0x53,
	0x69, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x52,
	0x56, 0x36, 0x5f, 0x53, 0x49, 0x44, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x53, 0x49, 0x44, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x52, 0x56, 0x36, 0x5f, 0x53, 0x49, 0x44, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x53, 0x49, 0x44, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x52, 0x56, 0x36, 0x5f, 0x53, 0x49, 0x44, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x5f, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x53, 0x49, 0x44, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x05, 0x2a, 0x5b, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x10, 0x02, 0x2a, 0x87, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x50, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x50, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x50, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x50, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x9c, 0x01,
	0x0a, 0x18, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x48, 0x49, 0x54, 0x4c, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x48, 0x49, 0x54, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x02, 0x2a, 0xbf, 0x01, 0x0a,
	0x18, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x45, 0x45, 0x50, 0x52, 0x4f, 0x4d, 0x10, 0x03, 0x2a, 0xb0,
	0x01, 0x0a, 0x16, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x46,
	0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45,
	0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10,
	0x03, 0x2a, 0xb3, 0x01, 0x0a, 0x17, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x26, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x4d, 0x44, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x55, 0x53, 0x5f, 0x49, 0x32, 0x43,
	0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x48, 0x41, 0x52,
	0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x55, 0x53,
	0x5f, 0x43, 0x50, 0x4c, 0x44, 0x10, 0x03, 0x2a, 0xfe, 0x01, 0x0a, 0x1d, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x53, 0x6e, 0x6f, 0x6f, 0x70, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x4e, 0x4f, 0x4f, 0x50, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x4e, 0x4f, 0x4f,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x4e, 0x4f, 0x4f, 0x50, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x58, 0x47, 0x10, 0x02, 0x12,
	0x27, 0x0a, 0x23, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x53, 0x4e, 0x4f, 0x4f, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x53, 0x47, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x4e, 0x4f, 0x4f, 0x50, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x58, 0x47, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x53, 0x47, 0x10, 0x04, 0x2a, 0xad, 0x01, 0x0a, 0x10, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x94, 0x01, 0x0a, 0x11, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x03, 0x2a,
	0xf4, 0x0a, 0x0a, 0x0a, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55,
	0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53,
	0x5f, 0x30, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10,
	0x02, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x31, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x03, 0x12, 0x39, 0x0a, 0x35,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x32, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x04, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x53, 0x5f, 0x33, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53,
	0x10, 0x05, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x34, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x06, 0x12, 0x39, 0x0a,
	0x35, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x35, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x07, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x53, 0x5f, 0x36, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54,
	0x53, 0x10, 0x08, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x37, 0x5f,
	0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x09, 0x12, 0x28,
	0x0a, 0x24, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x0a, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x10, 0x0b, 0x12, 0x3a, 0x0a, 0x36, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f,
	0x30, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x0c,
	0x12, 0x3a, 0x0a, 0x36, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x31, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x0d, 0x12, 0x3a, 0x0a, 0x36,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x32, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x0e, 0x12, 0x3a, 0x0a, 0x36, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x53, 0x5f, 0x33, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x10, 0x0f, 0x12, 0x3a, 0x0a, 0x36, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52,
	0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f,
	0x34, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x10,
	0x12, 0x3a, 0x0a, 0x36, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x35, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x11, 0x12, 0x3a, 0x0a, 0x36,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x53, 0x5f, 0x36, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x12, 0x12, 0x3a, 0x0a, 0x36, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x53, 0x5f, 0x37, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x50, 0x4b,
	0x54, 0x53, 0x10, 0x13, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x14, 0x12,
	0x2d, 0x0a, 0x29, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x46,
	0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x15, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x45, 0x43,
	0x43, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x16, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x17, 0x12, 0x2e, 0x0a, 0x2a, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45,
	0x53, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x47, 0x45, 0x53, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x18, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41,
	0x4c, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x19, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x1a, 0x2a, 0x90, 0x01, 0x0a, 0x13, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x49,
	0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43,
	0x55, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x2a, 0x80, 0x01, 0x0a, 0x0a, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x55, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x10, 0x02, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x4f, 0x51, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x10, 0x04, 0x2a, 0x6b, 0x0a, 0x0e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x89, 0x02, 0x0a, 0x10, 0x54, 0x61,
	0x6d, 0x42, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x1f, 0x54, 0x41, 0x4d, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x4d, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x41, 0x4d, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x4d, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x47, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x41, 0x4d, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x41, 0x4d, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x41, 0x4d, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x50, 0x47, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x4d, 0x5f,
	0x42, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x53, 0x50, 0x10, 0x07, 0x2a, 0xc1, 0x02, 0x0a, 0x15, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x28, 0x0a, 0x24, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x41, 0x4d,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4e, 0x4f, 0x53, 0x45, 0x43, 0x10, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x43,
	0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d,
	0x53, 0x45, 0x43, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x54,
	0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f,
	0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x05, 0x12,
	0x24, 0x0a, 0x20, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x45, 0x54, 0x53, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x43, 0x45, 0x4c, 0x4c, 0x53, 0x10, 0x07, 0x2a, 0xfb, 0x02, 0x0a, 0x0c, 0x54, 0x61,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41,
	0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41,
	0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41, 0x4d,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57,
	0x5f, 0x57, 0x41, 0x54, 0x43, 0x48, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x43, 0x50, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x03, 0x12, 0x22, 0x0a,
	0x1e, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10,
	0x04, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x55, 0x54, 0x49, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x1d,
	0x0a, 0x19, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x50, 0x47, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x10, 0x08, 0x12, 0x20, 0x0a,
	0x1c, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x50, 0x47, 0x5f, 0x58, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x09, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x53, 0x50, 0x10, 0x0a, 0x2a, 0xc5, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x6d, 0x49,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x21, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x41,
	0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x42, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x41, 0x4d, 0x5f,
	0x49, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x33, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x03, 0x12,
	0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x04, 0x2a,
	0xe6, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4f, 0x41,
	0x4d, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x46, 0x41, 0x31, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41,
	0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x46, 0x41, 0x32, 0x10,
	0x03, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x34, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x31, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x34, 0x5f,
	0x49, 0x4e, 0x54, 0x5f, 0x32, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x4d, 0x5f, 0x49,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x45,
	0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x49,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x46, 0x41, 0x31, 0x5f, 0x54, 0x41, 0x49,
	0x4c, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x07, 0x2a, 0x63, 0x0a, 0x0d, 0x54, 0x61, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41,
	0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x4c, 0x4b, 0x10, 0x02, 0x2a, 0x94, 0x02,
	0x0a, 0x0d, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49,
	0x50, 0x46, 0x49, 0x58, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x49, 0x46, 0x54, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x4d, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x34, 0x5f, 0x45, 0x58,
	0x54, 0x4e, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x45, 0x58,
	0x54, 0x4e, 0x10, 0x08, 0x2a, 0xaa, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x41, 0x4d,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x4d,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x4d, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x4d, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x41, 0x59, 0x10,
	0x04, 0x2a, 0x93, 0x02, 0x0a, 0x12, 0x54, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x68,
	0x46, 0x75, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x41, 0x4d, 0x5f,
	0x54, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x48,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x54,
	0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4f, 0x5f,
	0x4d, 0x45, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45,
	0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x4c, 0x47, 0x45, 0x42, 0x52, 0x41, 0x49, 0x43, 0x5f, 0x4d, 0x45, 0x41, 0x4e, 0x10,
	0x03, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x54,
	0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x56, 0x45, 0x52,
	0x41, 0x47, 0x45, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c,
	0x5f, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45,
	0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x06, 0x2a, 0xc8, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x6d, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e,
	0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x41, 0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41,
	0x4d, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x4d,
	0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x10, 0x05, 0x2a, 0xa3, 0x01, 0x0a, 0x14, 0x54, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x54,
	0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x53, 0x4c, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x4d, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x4c, 0x53, 0x10, 0x03, 0x2a, 0xc7, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x1e, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41,
	0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x44, 0x50, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x50,
	0x43, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x05, 0x2a, 0x76, 0x0a, 0x07, 0x54, 0x6c, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x4c, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4c, 0x56, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x54, 0x4c, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4c, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x50, 0x41, 0x51, 0x55, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4c, 0x56, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x04, 0x2a, 0xb2, 0x01, 0x0a, 0x12, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x63, 0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x43, 0x41,
	0x50, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x44, 0x45, 0x43, 0x41, 0x50, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x43, 0x41, 0x50, 0x5f, 0x45, 0x43, 0x4e,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x44, 0x45, 0x43, 0x41, 0x50, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x77, 0x0a, 0x0e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x44, 0x53, 0x43, 0x50,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x44, 0x53,
	0x43, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x49, 0x50, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x02, 0x2a, 0x87, 0x01, 0x0a, 0x12, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x25, 0x0a, 0x21, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f,
	0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0xa8, 0x04, 0x0a, 0x0d, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d,
	0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x45, 0x43, 0x4e, 0x5f, 0x54, 0x4f,
	0x5f, 0x55, 0x45, 0x43, 0x4e, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x45, 0x43, 0x4e, 0x5f,
	0x4f, 0x45, 0x43, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x45, 0x43, 0x4e, 0x10, 0x02, 0x12, 0x22,
	0x0a, 0x1e, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x56, 0x4e, 0x49, 0x5f, 0x54, 0x4f, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f,
	0x5f, 0x56, 0x4e, 0x49, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4e, 0x49, 0x5f, 0x54, 0x4f,
	0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x49, 0x46, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x54, 0x4f, 0x5f, 0x56, 0x4e, 0x49,
	0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4e, 0x49, 0x5f, 0x54, 0x4f, 0x5f, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x07,
	0x12, 0x2c, 0x0a, 0x28, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x56, 0x4e, 0x49, 0x10, 0x08, 0x12, 0x23,
	0x0a, 0x1f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x56, 0x53, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x54,
	0x4f, 0x5f, 0x56, 0x53, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x53, 0x49, 0x44,
	0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x49, 0x46, 0x10, 0x0b, 0x12,
	0x25, 0x0a, 0x21, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x54, 0x4f, 0x5f,
	0x56, 0x53, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0d, 0x2a, 0x67, 0x0a,
	0x0e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x50, 0x45, 0x45, 0x52,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x32, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x50, 0x32, 0x4d, 0x50, 0x10, 0x02, 0x2a, 0x99, 0x01, 0x0a, 0x0a, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x43, 0x54,
	0x45, 0x54, 0x53, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53,
	0x10, 0x04, 0x2a, 0xe4, 0x01, 0x0a, 0x18, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72,
	0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x28, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x32,
	0x50, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45,
	0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x32, 0x4d, 0x50, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x32, 0x50, 0x10,
	0x03, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x52, 0x4d,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x50, 0x32, 0x4d, 0x50, 0x10, 0x04, 0x2a, 0x73, 0x0a, 0x0d, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x49, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x02, 0x2a, 0x92,
	0x02, 0x0a, 0x0a, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x49, 0x4e, 0x49, 0x50,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x50, 0x49, 0x4e, 0x49, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x58,
	0x4c, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x10,
	0x05, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x56, 0x47, 0x52, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x49, 0x4e, 0x49, 0x50, 0x5f, 0x45,
	0x53, 0x50, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x49, 0x4e, 0x49, 0x50, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x45,
	0x53, 0x50, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x45, 0x53,
	0x50, 0x10, 0x09, 0x2a, 0x9f, 0x01, 0x0a, 0x17, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x78,
	0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x27, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f,
	0x55, 0x44, 0x50, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x44, 0x50,
	0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x50, 0x48, 0x45, 0x4d, 0x45,
	0x52, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x07, 0x55, 0x64, 0x66, 0x42, 0x61, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x55, 0x44, 0x46, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x44,
	0x46, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x32, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x44, 0x46, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x33, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x44, 0x46, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4c, 0x34, 0x10, 0x03, 0x2a, 0x95, 0x01,
	0x0a, 0x0c, 0x55, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x55, 0x44, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18,
	0x0a, 0x14, 0x55, 0x44, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x44, 0x46, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x49, 0x43, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x44, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x44, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x4e, 0x44, 0x10, 0x04, 0x2a, 0xd0, 0x01, 0x0a, 0x14, 0x56, 0x6c, 0x61, 0x6e, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x23, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x4c, 0x41, 0x4e,
	0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x4c,
	0x41, 0x4e, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x32, 0x4d, 0x43, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x42, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xdb, 0x01, 0x0a, 0x16, 0x56, 0x6c, 0x61,
	0x6e, 0x4d, 0x63, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x43, 0x41, 0x53,
	0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x25, 0x0a, 0x21, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x4f,
	0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x43, 0x5f, 0x44, 0x41, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x4d,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x47, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x4c, 0x41,
	0x4e, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x47, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24,
	0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55,
	0x50, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x58, 0x47, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x53, 0x47, 0x10, 0x04, 0x2a, 0xae, 0x03, 0x0a, 0x08, 0x56, 0x6c, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4f,
	0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49,
	0x4e, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x03, 0x12, 0x1f,
	0x0a, 0x1b, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4e,
	0x4f, 0x4e, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f,
	0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x53, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4c,
	0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x53, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x53, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54, 0x53, 0x10, 0x08, 0x12, 0x19,
	0x0a, 0x15, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4c, 0x41,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x55, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x55, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x50, 0x4b, 0x54, 0x53, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x4c, 0x41,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x41,
	0x52, 0x44, 0x53, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x10, 0x0d, 0x12,
	0x16, 0x0a, 0x12, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x51, 0x4c, 0x45, 0x4e, 0x10, 0x0e, 0x2a, 0x99, 0x01, 0x0a, 0x0f, 0x56, 0x6c, 0x61, 0x6e,
	0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x56,
	0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21,
	0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x41, 0x47, 0x47, 0x45,
	0x44, 0x10, 0x03, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_common_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_common_proto_rawDescData = file_dataplane_standalone_proto_common_proto_rawDesc
)

func file_dataplane_standalone_proto_common_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_common_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_common_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_common_proto_rawDescData
}

var file_dataplane_standalone_proto_common_proto_enumTypes = make([]protoimpl.EnumInfo, 166)
var file_dataplane_standalone_proto_common_proto_msgTypes = make([]protoimpl.MessageInfo, 161)
var file_dataplane_standalone_proto_common_proto_goTypes = []interface{}{
	(AclActionType)(0),                            // 0: lemming.dataplane.sai.AclActionType
	(AclBindPointType)(0),                         // 1: lemming.dataplane.sai.AclBindPointType
	(AclDtelFlowOp)(0),                            // 2: lemming.dataplane.sai.AclDtelFlowOp
	(AclIpFrag)(0),                                // 3: lemming.dataplane.sai.AclIpFrag
	(AclIpType)(0),                                // 4: lemming.dataplane.sai.AclIpType
	(AclRangeType)(0),                             // 5: lemming.dataplane.sai.AclRangeType
	(AclStage)(0),                                 // 6: lemming.dataplane.sai.AclStage
	(AclTableGroupType)(0),                        // 7: lemming.dataplane.sai.AclTableGroupType
	(Api)(0),                                      // 8: lemming.dataplane.sai.Api
	(BfdEncapsulationType)(0),                     // 9: lemming.dataplane.sai.BfdEncapsulationType
	(BfdSessionOffloadType)(0),                    // 10: lemming.dataplane.sai.BfdSessionOffloadType
	(BfdSessionStat)(0),                           // 11: lemming.dataplane.sai.BfdSessionStat
	(BfdSessionState)(0),                          // 12: lemming.dataplane.sai.BfdSessionState
	(BfdSessionType)(0),                           // 13: lemming.dataplane.sai.BfdSessionType
	(BridgeFloodControlType)(0),                   // 14: lemming.dataplane.sai.BridgeFloodControlType
	(BridgePortFdbLearningMode)(0),                // 15: lemming.dataplane.sai.BridgePortFdbLearningMode
	(BridgePortStat)(0),                           // 16: lemming.dataplane.sai.BridgePortStat
	(BridgePortTaggingMode)(0),                    // 17: lemming.dataplane.sai.BridgePortTaggingMode
	(BridgePortType)(0),                           // 18: lemming.dataplane.sai.BridgePortType
	(BridgeStat)(0),                               // 19: lemming.dataplane.sai.BridgeStat
	(BridgeType)(0),                               // 20: lemming.dataplane.sai.BridgeType
	(BufferPoolStat)(0),                           // 21: lemming.dataplane.sai.BufferPoolStat
	(BufferPoolThresholdMode)(0),                  // 22: lemming.dataplane.sai.BufferPoolThresholdMode
	(BufferPoolType)(0),                           // 23: lemming.dataplane.sai.BufferPoolType
	(BufferProfileThresholdMode)(0),               // 24: lemming.dataplane.sai.BufferProfileThresholdMode
	(BulkOpErrorMode)(0),                          // 25: lemming.dataplane.sai.BulkOpErrorMode
	(CommonApi)(0),                                // 26: lemming.dataplane.sai.CommonApi
	(CounterStat)(0),                              // 27: lemming.dataplane.sai.CounterStat
	(CounterType)(0),                              // 28: lemming.dataplane.sai.CounterType
	(DebugCounterBindMethod)(0),                   // 29: lemming.dataplane.sai.DebugCounterBindMethod
	(DebugCounterType)(0),                         // 30: lemming.dataplane.sai.DebugCounterType
	(DtelEventType)(0),                            // 31: lemming.dataplane.sai.DtelEventType
	(EcnMarkMode)(0),                              // 32: lemming.dataplane.sai.EcnMarkMode
	(ErspanEncapsulationType)(0),                  // 33: lemming.dataplane.sai.ErspanEncapsulationType
	(FdbEntryType)(0),                             // 34: lemming.dataplane.sai.FdbEntryType
	(FdbEvent)(0),                                 // 35: lemming.dataplane.sai.FdbEvent
	(FdbFlushEntryType)(0),                        // 36: lemming.dataplane.sai.FdbFlushEntryType
	(HashAlgorithm)(0),                            // 37: lemming.dataplane.sai.HashAlgorithm
	(HostifTableEntryChannelType)(0),              // 38: lemming.dataplane.sai.HostifTableEntryChannelType
	(HostifTableEntryType)(0),                     // 39: lemming.dataplane.sai.HostifTableEntryType
	(HostifTrapType)(0),                           // 40: lemming.dataplane.sai.HostifTrapType
	(HostifTxType)(0),                             // 41: lemming.dataplane.sai.HostifTxType
	(HostifType)(0),                               // 42: lemming.dataplane.sai.HostifType
	(HostifUserDefinedTrapType)(0),                // 43: lemming.dataplane.sai.HostifUserDefinedTrapType
	(HostifVlanTag)(0),                            // 44: lemming.dataplane.sai.HostifVlanTag
	(InDropReason)(0),                             // 45: lemming.dataplane.sai.InDropReason
	(IngressPriorityGroupStat)(0),                 // 46: lemming.dataplane.sai.IngressPriorityGroupStat
	(InsegEntryPopQosMode)(0),                     // 47: lemming.dataplane.sai.InsegEntryPopQosMode
	(InsegEntryPopTtlMode)(0),                     // 48: lemming.dataplane.sai.InsegEntryPopTtlMode
	(InsegEntryPscType)(0),                        // 49: lemming.dataplane.sai.InsegEntryPscType
	(IpAddrFamily)(0),                             // 50: lemming.dataplane.sai.IpAddrFamily
	(IpmcEntryType)(0),                            // 51: lemming.dataplane.sai.IpmcEntryType
	(IpsecCipher)(0),                              // 52: lemming.dataplane.sai.IpsecCipher
	(IpsecDirection)(0),                           // 53: lemming.dataplane.sai.IpsecDirection
	(IpsecPortStat)(0),                            // 54: lemming.dataplane.sai.IpsecPortStat
	(IpsecSaOctetCountStatus)(0),                  // 55: lemming.dataplane.sai.IpsecSaOctetCountStatus
	(IpsecSaStat)(0),                              // 56: lemming.dataplane.sai.IpsecSaStat
	(IsolationGroupType)(0),                       // 57: lemming.dataplane.sai.IsolationGroupType
	(L2McEntryType)(0),                            // 58: lemming.dataplane.sai.L2mcEntryType
	(LogLevel)(0),                                 // 59: lemming.dataplane.sai.LogLevel
	(MacsecCipherSuite)(0),                        // 60: lemming.dataplane.sai.MacsecCipherSuite
	(MacsecDirection)(0),                          // 61: lemming.dataplane.sai.MacsecDirection
	(MacsecFlowStat)(0),                           // 62: lemming.dataplane.sai.MacsecFlowStat
	(MacsecPortStat)(0),                           // 63: lemming.dataplane.sai.MacsecPortStat
	(MacsecSaStat)(0),                             // 64: lemming.dataplane.sai.MacsecSaStat
	(MacsecScStat)(0),                             // 65: lemming.dataplane.sai.MacsecScStat
	(MeterType)(0),                                // 66: lemming.dataplane.sai.MeterType
	(MirrorSessionCongestionMode)(0),              // 67: lemming.dataplane.sai.MirrorSessionCongestionMode
	(MirrorSessionType)(0),                        // 68: lemming.dataplane.sai.MirrorSessionType
	(MySidEntryEndpointBehaviorFlavor)(0),         // 69: lemming.dataplane.sai.MySidEntryEndpointBehaviorFlavor
	(MySidEntryEndpointBehavior)(0),               // 70: lemming.dataplane.sai.MySidEntryEndpointBehavior
	(NatType)(0),                                  // 71: lemming.dataplane.sai.NatType
	(NativeHashField)(0),                          // 72: lemming.dataplane.sai.NativeHashField
	(NextHopGroupMapType)(0),                      // 73: lemming.dataplane.sai.NextHopGroupMapType
	(NextHopGroupMemberConfiguredRole)(0),         // 74: lemming.dataplane.sai.NextHopGroupMemberConfiguredRole
	(NextHopGroupMemberObservedRole)(0),           // 75: lemming.dataplane.sai.NextHopGroupMemberObservedRole
	(NextHopGroupType)(0),                         // 76: lemming.dataplane.sai.NextHopGroupType
	(NextHopType)(0),                              // 77: lemming.dataplane.sai.NextHopType
	(ObjectType)(0),                               // 78: lemming.dataplane.sai.ObjectType
	(OutDropReason)(0),                            // 79: lemming.dataplane.sai.OutDropReason
	(OutsegExpMode)(0),                            // 80: lemming.dataplane.sai.OutsegExpMode
	(OutsegTtlMode)(0),                            // 81: lemming.dataplane.sai.OutsegTtlMode
	(OutsegType)(0),                               // 82: lemming.dataplane.sai.OutsegType
	(PacketAction)(0),                             // 83: lemming.dataplane.sai.PacketAction
	(PacketColor)(0),                              // 84: lemming.dataplane.sai.PacketColor
	(PacketVlan)(0),                               // 85: lemming.dataplane.sai.PacketVlan
	(PolicerColorSource)(0),                       // 86: lemming.dataplane.sai.PolicerColorSource
	(PolicerMode)(0),                              // 87: lemming.dataplane.sai.PolicerMode
	(PolicerStat)(0),                              // 88: lemming.dataplane.sai.PolicerStat
	(PortAutoNegConfigMode)(0),                    // 89: lemming.dataplane.sai.PortAutoNegConfigMode
	(PortBreakoutModeType)(0),                     // 90: lemming.dataplane.sai.PortBreakoutModeType
	(PortConnectorFailoverMode)(0),                // 91: lemming.dataplane.sai.PortConnectorFailoverMode
	(PortDualMedia)(0),                            // 92: lemming.dataplane.sai.PortDualMedia
	(PortErrStatus)(0),                            // 93: lemming.dataplane.sai.PortErrStatus
	(PortFecModeExtended)(0),                      // 94: lemming.dataplane.sai.PortFecModeExtended
	(PortFecMode)(0),                              // 95: lemming.dataplane.sai.PortFecMode
	(PortFlowControlMode)(0),                      // 96: lemming.dataplane.sai.PortFlowControlMode
	(PortInterfaceType)(0),                        // 97: lemming.dataplane.sai.PortInterfaceType
	(PortInternalLoopbackMode)(0),                 // 98: lemming.dataplane.sai.PortInternalLoopbackMode
	(PortLinkTrainingFailureStatus)(0),            // 99: lemming.dataplane.sai.PortLinkTrainingFailureStatus
	(PortLinkTrainingRxStatus)(0),                 // 100: lemming.dataplane.sai.PortLinkTrainingRxStatus
	(PortLoopbackMode)(0),                         // 101: lemming.dataplane.sai.PortLoopbackMode
	(PortMdixModeConfig)(0),                       // 102: lemming.dataplane.sai.PortMdixModeConfig
	(PortMdixModeStatus)(0),                       // 103: lemming.dataplane.sai.PortMdixModeStatus
	(PortMediaType)(0),                            // 104: lemming.dataplane.sai.PortMediaType
	(PortModuleType)(0),                           // 105: lemming.dataplane.sai.PortModuleType
	(PortOperStatus)(0),                           // 106: lemming.dataplane.sai.PortOperStatus
	(PortPoolStat)(0),                             // 107: lemming.dataplane.sai.PortPoolStat
	(PortPrbsConfig)(0),                           // 108: lemming.dataplane.sai.PortPrbsConfig
	(PortPrbsRxStatus)(0),                         // 109: lemming.dataplane.sai.PortPrbsRxStatus
	(PortPriorityFlowControlMode)(0),              // 110: lemming.dataplane.sai.PortPriorityFlowControlMode
	(PortPtpMode)(0),                              // 111: lemming.dataplane.sai.PortPtpMode
	(PortStat)(0),                                 // 112: lemming.dataplane.sai.PortStat
	(PortType)(0),                                 // 113: lemming.dataplane.sai.PortType
	(QosMapType)(0),                               // 114: lemming.dataplane.sai.QosMapType
	(QueuePfcDeadlockEventType)(0),                // 115: lemming.dataplane.sai.QueuePfcDeadlockEventType
	(QueueStat)(0),                                // 116: lemming.dataplane.sai.QueueStat
	(QueueType)(0),                                // 117: lemming.dataplane.sai.QueueType
	(RouterInterfaceStat)(0),                      // 118: lemming.dataplane.sai.RouterInterfaceStat
	(RouterInterfaceType)(0),                      // 119: lemming.dataplane.sai.RouterInterfaceType
	(SamplepacketMode)(0),                         // 120: lemming.dataplane.sai.SamplepacketMode
	(SamplepacketType)(0),                         // 121: lemming.dataplane.sai.SamplepacketType
	(SchedulingType)(0),                           // 122: lemming.dataplane.sai.SchedulingType
	(Srv6SidlistType)(0),                          // 123: lemming.dataplane.sai.Srv6SidlistType
	(StatsMode)(0),                                // 124: lemming.dataplane.sai.StatsMode
	(StpPortState)(0),                             // 125: lemming.dataplane.sai.StpPortState
	(SwitchFailoverConfigMode)(0),                 // 126: lemming.dataplane.sai.SwitchFailoverConfigMode
	(SwitchFirmwareLoadMethod)(0),                 // 127: lemming.dataplane.sai.SwitchFirmwareLoadMethod
	(SwitchFirmwareLoadType)(0),                   // 128: lemming.dataplane.sai.SwitchFirmwareLoadType
	(SwitchHardwareAccessBus)(0),                  // 129: lemming.dataplane.sai.SwitchHardwareAccessBus
	(SwitchMcastSnoopingCapability)(0),            // 130: lemming.dataplane.sai.SwitchMcastSnoopingCapability
	(SwitchOperStatus)(0),                         // 131: lemming.dataplane.sai.SwitchOperStatus
	(SwitchRestartType)(0),                        // 132: lemming.dataplane.sai.SwitchRestartType
	(SwitchStat)(0),                               // 133: lemming.dataplane.sai.SwitchStat
	(SwitchSwitchingMode)(0),                      // 134: lemming.dataplane.sai.SwitchSwitchingMode
	(SwitchType)(0),                               // 135: lemming.dataplane.sai.SwitchType
	(SystemPortType)(0),                           // 136: lemming.dataplane.sai.SystemPortType
	(TamBindPointType)(0),                         // 137: lemming.dataplane.sai.TamBindPointType
	(TamEventThresholdUnit)(0),                    // 138: lemming.dataplane.sai.TamEventThresholdUnit
	(TamEventType)(0),                             // 139: lemming.dataplane.sai.TamEventType
	(TamIntPresenceType)(0),                       // 140: lemming.dataplane.sai.TamIntPresenceType
	(TamIntType)(0),                               // 141: lemming.dataplane.sai.TamIntType
	(TamReportMode)(0),                            // 142: lemming.dataplane.sai.TamReportMode
	(TamReportType)(0),                            // 143: lemming.dataplane.sai.TamReportType
	(TamReportingUnit)(0),                         // 144: lemming.dataplane.sai.TamReportingUnit
	(TamTelMathFuncType)(0),                       // 145: lemming.dataplane.sai.TamTelMathFuncType
	(TamTelemetryType)(0),                         // 146: lemming.dataplane.sai.TamTelemetryType
	(TamTransportAuthType)(0),                     // 147: lemming.dataplane.sai.TamTransportAuthType
	(TamTransportType)(0),                         // 148: lemming.dataplane.sai.TamTransportType
	(TlvType)(0),                                  // 149: lemming.dataplane.sai.TlvType
	(TunnelDecapEcnMode)(0),                       // 150: lemming.dataplane.sai.TunnelDecapEcnMode
	(TunnelDscpMode)(0),                           // 151: lemming.dataplane.sai.TunnelDscpMode
	(TunnelEncapEcnMode)(0),                       // 152: lemming.dataplane.sai.TunnelEncapEcnMode
	(TunnelMapType)(0),                            // 153: lemming.dataplane.sai.TunnelMapType
	(TunnelPeerMode)(0),                           // 154: lemming.dataplane.sai.TunnelPeerMode
	(TunnelStat)(0),                               // 155: lemming.dataplane.sai.TunnelStat
	(TunnelTermTableEntryType)(0),                 // 156: lemming.dataplane.sai.TunnelTermTableEntryType
	(TunnelTtlMode)(0),                            // 157: lemming.dataplane.sai.TunnelTtlMode
	(TunnelType)(0),                               // 158: lemming.dataplane.sai.TunnelType
	(TunnelVxlanUdpSportMode)(0),                  // 159: lemming.dataplane.sai.TunnelVxlanUdpSportMode
	(UdfBase)(0),                                  // 160: lemming.dataplane.sai.UdfBase
	(UdfGroupType)(0),                             // 161: lemming.dataplane.sai.UdfGroupType
	(VlanFloodControlType)(0),                     // 162: lemming.dataplane.sai.VlanFloodControlType
	(VlanMcastLookupKeyType)(0),                   // 163: lemming.dataplane.sai.VlanMcastLookupKeyType
	(VlanStat)(0),                                 // 164: lemming.dataplane.sai.VlanStat
	(VlanTaggingMode)(0),                          // 165: lemming.dataplane.sai.VlanTaggingMode
	(*AclActionData)(nil),                         // 166: lemming.dataplane.sai.AclActionData
	(*ACLCapability)(nil),                         // 167: lemming.dataplane.sai.ACLCapability
	(*AclFieldData)(nil),                          // 168: lemming.dataplane.sai.AclFieldData
	(*ACLResource)(nil),                           // 169: lemming.dataplane.sai.ACLResource
	(*BfdSessionStateChangeNotificationData)(nil), // 170: lemming.dataplane.sai.BfdSessionStateChangeNotificationData
	(*FabricPortReachability)(nil),                // 171: lemming.dataplane.sai.FabricPortReachability
	(*FdbEntry)(nil),                              // 172: lemming.dataplane.sai.FdbEntry
	(*FdbEventNotificationData)(nil),              // 173: lemming.dataplane.sai.FdbEventNotificationData
	(*InsegEntry)(nil),                            // 174: lemming.dataplane.sai.InsegEntry
	(*IpPrefix)(nil),                              // 175: lemming.dataplane.sai.IpPrefix
	(*IpmcEntry)(nil),                             // 176: lemming.dataplane.sai.IpmcEntry
	(*IpsecSaStatusNotificationData)(nil),         // 177: lemming.dataplane.sai.IpsecSaStatusNotificationData
	(*L2McEntry)(nil),                             // 178: lemming.dataplane.sai.L2mcEntry
	(*UintMap)(nil),                               // 179: lemming.dataplane.sai.UintMap
	(*McastFdbEntry)(nil),                         // 180: lemming.dataplane.sai.McastFdbEntry
	(*MySidEntry)(nil),                            // 181: lemming.dataplane.sai.MySidEntry
	(*NatEntryData)(nil),                          // 182: lemming.dataplane.sai.NatEntryData
	(*NatEntry)(nil),                              // 183: lemming.dataplane.sai.NatEntry
	(*NeighborEntry)(nil),                         // 184: lemming.dataplane.sai.NeighborEntry
	(*PortEyeValues)(nil),                         // 185: lemming.dataplane.sai.PortEyeValues
	(*PortOperStatusNotification)(nil),            // 186: lemming.dataplane.sai.PortOperStatusNotification
	(*PRBS_RXState)(nil),                          // 187: lemming.dataplane.sai.PRBS_RXState
	(*QOSMapParams)(nil),                          // 188: lemming.dataplane.sai.QOSMapParams
	(*QOSMap)(nil),                                // 189: lemming.dataplane.sai.QOSMap
	(*QueueDeadlockNotificationData)(nil),         // 190: lemming.dataplane.sai.QueueDeadlockNotificationData
	(*RouteEntry)(nil),                            // 191: lemming.dataplane.sai.RouteEntry
	(*SystemPortConfig)(nil),                      // 192: lemming.dataplane.sai.SystemPortConfig
	(*HMAC)(nil),                                  // 193: lemming.dataplane.sai.HMAC
	(*TLVEntry)(nil),                              // 194: lemming.dataplane.sai.TLVEntry
	(*Uint32Range)(nil),                           // 195: lemming.dataplane.sai.Uint32Range
	(*AclCounterAttribute)(nil),                   // 196: lemming.dataplane.sai.AclCounterAttribute
	(*AclEntryAttribute)(nil),                     // 197: lemming.dataplane.sai.AclEntryAttribute
	(*AclRangeAttribute)(nil),                     // 198: lemming.dataplane.sai.AclRangeAttribute
	(*AclBindPointTypeList)(nil),                  // 199: lemming.dataplane.sai.AclBindPointTypeList
	(*AclActionTypeList)(nil),                     // 200: lemming.dataplane.sai.AclActionTypeList
	(*AclRangeTypeList)(nil),                      // 201: lemming.dataplane.sai.AclRangeTypeList
	(*Uint64List)(nil),                            // 202: lemming.dataplane.sai.Uint64List
	(*AclTableAttribute)(nil),                     // 203: lemming.dataplane.sai.AclTableAttribute
	(*AclTableGroupAttribute)(nil),                // 204: lemming.dataplane.sai.AclTableGroupAttribute
	(*AclTableGroupMemberAttribute)(nil),          // 205: lemming.dataplane.sai.AclTableGroupMemberAttribute
	(*BfdSessionAttribute)(nil),                   // 206: lemming.dataplane.sai.BfdSessionAttribute
	(*BridgeAttribute)(nil),                       // 207: lemming.dataplane.sai.BridgeAttribute
	(*BridgePortAttribute)(nil),                   // 208: lemming.dataplane.sai.BridgePortAttribute
	(*BufferPoolAttribute)(nil),                   // 209: lemming.dataplane.sai.BufferPoolAttribute
	(*BufferProfileAttribute)(nil),                // 210: lemming.dataplane.sai.BufferProfileAttribute
	(*CounterAttribute)(nil),                      // 211: lemming.dataplane.sai.CounterAttribute
	(*InDropReasonList)(nil),                      // 212: lemming.dataplane.sai.InDropReasonList
	(*OutDropReasonList)(nil),                     // 213: lemming.dataplane.sai.OutDropReasonList
	(*DebugCounterAttribute)(nil),                 // 214: lemming.dataplane.sai.DebugCounterAttribute
	(*DtelAttribute)(nil),                         // 215: lemming.dataplane.sai.DtelAttribute
	(*DtelEventAttribute)(nil),                    // 216: lemming.dataplane.sai.DtelEventAttribute
	(*DtelIntSessionAttribute)(nil),               // 217: lemming.dataplane.sai.DtelIntSessionAttribute
	(*DtelQueueReportAttribute)(nil),              // 218: lemming.dataplane.sai.DtelQueueReportAttribute
	(*BytesList)(nil),                             // 219: lemming.dataplane.sai.BytesList
	(*DtelReportSessionAttribute)(nil),            // 220: lemming.dataplane.sai.DtelReportSessionAttribute
	(*FdbEntryAttribute)(nil),                     // 221: lemming.dataplane.sai.FdbEntryAttribute
	(*FdbFlushAttribute)(nil),                     // 222: lemming.dataplane.sai.FdbFlushAttribute
	(*FineGrainedHashFieldAttribute)(nil),         // 223: lemming.dataplane.sai.FineGrainedHashFieldAttribute
	(*NativeHashFieldList)(nil),                   // 224: lemming.dataplane.sai.NativeHashFieldList
	(*HashAttribute)(nil),                         // 225: lemming.dataplane.sai.HashAttribute
	(*HostifAttribute)(nil),                       // 226: lemming.dataplane.sai.HostifAttribute
	(*HostifPacketAttribute)(nil),                 // 227: lemming.dataplane.sai.HostifPacketAttribute
	(*HostifTableEntryAttribute)(nil),             // 228: lemming.dataplane.sai.HostifTableEntryAttribute
	(*HostifTrapAttribute)(nil),                   // 229: lemming.dataplane.sai.HostifTrapAttribute
	(*HostifTrapGroupAttribute)(nil),              // 230: lemming.dataplane.sai.HostifTrapGroupAttribute
	(*HostifUserDefinedTrapAttribute)(nil),        // 231: lemming.dataplane.sai.HostifUserDefinedTrapAttribute
	(*IngressPriorityGroupAttribute)(nil),         // 232: lemming.dataplane.sai.IngressPriorityGroupAttribute
	(*InsegEntryAttribute)(nil),                   // 233: lemming.dataplane.sai.InsegEntryAttribute
	(*IpmcEntryAttribute)(nil),                    // 234: lemming.dataplane.sai.IpmcEntryAttribute
	(*IpmcGroupAttribute)(nil),                    // 235: lemming.dataplane.sai.IpmcGroupAttribute
	(*IpmcGroupMemberAttribute)(nil),              // 236: lemming.dataplane.sai.IpmcGroupMemberAttribute
	(*IpsecCipherList)(nil),                       // 237: lemming.dataplane.sai.IpsecCipherList
	(*IpsecAttribute)(nil),                        // 238: lemming.dataplane.sai.IpsecAttribute
	(*IpsecPortAttribute)(nil),                    // 239: lemming.dataplane.sai.IpsecPortAttribute
	(*IpsecSaAttribute)(nil),                      // 240: lemming.dataplane.sai.IpsecSaAttribute
	(*IsolationGroupAttribute)(nil),               // 241: lemming.dataplane.sai.IsolationGroupAttribute
	(*IsolationGroupMemberAttribute)(nil),         // 242: lemming.dataplane.sai.IsolationGroupMemberAttribute
	(*L2McEntryAttribute)(nil),                    // 243: lemming.dataplane.sai.L2mcEntryAttribute
	(*L2McGroupAttribute)(nil),                    // 244: lemming.dataplane.sai.L2mcGroupAttribute
	(*L2McGroupMemberAttribute)(nil),              // 245: lemming.dataplane.sai.L2mcGroupMemberAttribute
	(*LagAttribute)(nil),                          // 246: lemming.dataplane.sai.LagAttribute
	(*LagMemberAttribute)(nil),                    // 247: lemming.dataplane.sai.LagMemberAttribute
	(*MacsecCipherSuiteList)(nil),                 // 248: lemming.dataplane.sai.MacsecCipherSuiteList
	(*Uint32List)(nil),                            // 249: lemming.dataplane.sai.Uint32List
	(*MacsecAttribute)(nil),                       // 250: lemming.dataplane.sai.MacsecAttribute
	(*MacsecFlowAttribute)(nil),                   // 251: lemming.dataplane.sai.MacsecFlowAttribute
	(*MacsecPortAttribute)(nil),                   // 252: lemming.dataplane.sai.MacsecPortAttribute
	(*MacsecSaAttribute)(nil),                     // 253: lemming.dataplane.sai.MacsecSaAttribute
	(*MacsecScAttribute)(nil),                     // 254: lemming.dataplane.sai.MacsecScAttribute
	(*McastFdbEntryAttribute)(nil),                // 255: lemming.dataplane.sai.McastFdbEntryAttribute
	(*MirrorSessionAttribute)(nil),                // 256: lemming.dataplane.sai.MirrorSessionAttribute
	(*MyMacAttribute)(nil),                        // 257: lemming.dataplane.sai.MyMacAttribute
	(*MySidEntryAttribute)(nil),                   // 258: lemming.dataplane.sai.MySidEntryAttribute
	(*NatEntryAttribute)(nil),                     // 259: lemming.dataplane.sai.NatEntryAttribute
	(*NatZoneCounterAttribute)(nil),               // 260: lemming.dataplane.sai.NatZoneCounterAttribute
	(*NeighborEntryAttribute)(nil),                // 261: lemming.dataplane.sai.NeighborEntryAttribute
	(*NextHopAttribute)(nil),                      // 262: lemming.dataplane.sai.NextHopAttribute
	(*NextHopGroupAttribute)(nil),                 // 263: lemming.dataplane.sai.NextHopGroupAttribute
	(*UintMapList)(nil),                           // 264: lemming.dataplane.sai.UintMapList
	(*NextHopGroupMapAttribute)(nil),              // 265: lemming.dataplane.sai.NextHopGroupMapAttribute
	(*NextHopGroupMemberAttribute)(nil),           // 266: lemming.dataplane.sai.NextHopGroupMemberAttribute
	(*PacketActionList)(nil),                      // 267: lemming.dataplane.sai.PacketActionList
	(*PolicerAttribute)(nil),                      // 268: lemming.dataplane.sai.PolicerAttribute
	(*PortBreakoutModeTypeList)(nil),              // 269: lemming.dataplane.sai.PortBreakoutModeTypeList
	(*PortFecModeList)(nil),                       // 270: lemming.dataplane.sai.PortFecModeList
	(*PortFecModeExtendedList)(nil),               // 271: lemming.dataplane.sai.PortFecModeExtendedList
	(*PortEyeValuesList)(nil),                     // 272: lemming.dataplane.sai.PortEyeValuesList
	(*PortInterfaceTypeList)(nil),                 // 273: lemming.dataplane.sai.PortInterfaceTypeList
	(*PortErrStatusList)(nil),                     // 274: lemming.dataplane.sai.PortErrStatusList
	(*PortAttribute)(nil),                         // 275: lemming.dataplane.sai.PortAttribute
	(*PortConnectorAttribute)(nil),                // 276: lemming.dataplane.sai.PortConnectorAttribute
	(*PortPoolAttribute)(nil),                     // 277: lemming.dataplane.sai.PortPoolAttribute
	(*Int32List)(nil),                             // 278: lemming.dataplane.sai.Int32List
	(*PortSerdesAttribute)(nil),                   // 279: lemming.dataplane.sai.PortSerdesAttribute
	(*QosMapList)(nil),                            // 280: lemming.dataplane.sai.QosMapList
	(*QosMapAttribute)(nil),                       // 281: lemming.dataplane.sai.QosMapAttribute
	(*QueueAttribute)(nil),                        // 282: lemming.dataplane.sai.QueueAttribute
	(*RouterInterfaceAttribute)(nil),              // 283: lemming.dataplane.sai.RouterInterfaceAttribute
	(*RouteEntryAttribute)(nil),                   // 284: lemming.dataplane.sai.RouteEntryAttribute
	(*RpfGroupAttribute)(nil),                     // 285: lemming.dataplane.sai.RpfGroupAttribute
	(*RpfGroupMemberAttribute)(nil),               // 286: lemming.dataplane.sai.RpfGroupMemberAttribute
	(*SamplepacketAttribute)(nil),                 // 287: lemming.dataplane.sai.SamplepacketAttribute
	(*SchedulerAttribute)(nil),                    // 288: lemming.dataplane.sai.SchedulerAttribute
	(*SchedulerGroupAttribute)(nil),               // 289: lemming.dataplane.sai.SchedulerGroupAttribute
	(*TlvEntryList)(nil),                          // 290: lemming.dataplane.sai.TlvEntryList
	(*Srv6SidlistAttribute)(nil),                  // 291: lemming.dataplane.sai.Srv6SidlistAttribute
	(*StpAttribute)(nil),                          // 292: lemming.dataplane.sai.StpAttribute
	(*StpPortAttribute)(nil),                      // 293: lemming.dataplane.sai.StpPortAttribute
	(*AclResourceList)(nil),                       // 294: lemming.dataplane.sai.AclResourceList
	(*TlvTypeList)(nil),                           // 295: lemming.dataplane.sai.TlvTypeList
	(*ObjectTypeList)(nil),                        // 296: lemming.dataplane.sai.ObjectTypeList
	(*BfdSessionOffloadTypeList)(nil),             // 297: lemming.dataplane.sai.BfdSessionOffloadTypeList
	(*StatsModeList)(nil),                         // 298: lemming.dataplane.sai.StatsModeList
	(*SystemPortConfigList)(nil),                  // 299: lemming.dataplane.sai.SystemPortConfigList
	(*SwitchAttribute)(nil),                       // 300: lemming.dataplane.sai.SwitchAttribute
	(*SwitchTunnelAttribute)(nil),                 // 301: lemming.dataplane.sai.SwitchTunnelAttribute
	(*SystemPortAttribute)(nil),                   // 302: lemming.dataplane.sai.SystemPortAttribute
	(*TamBindPointTypeList)(nil),                  // 303: lemming.dataplane.sai.TamBindPointTypeList
	(*TamAttribute)(nil),                          // 304: lemming.dataplane.sai.TamAttribute
	(*TamCollectorAttribute)(nil),                 // 305: lemming.dataplane.sai.TamCollectorAttribute
	(*TamEventAttribute)(nil),                     // 306: lemming.dataplane.sai.TamEventAttribute
	(*TamEventActionAttribute)(nil),               // 307: lemming.dataplane.sai.TamEventActionAttribute
	(*TamEventThresholdAttribute)(nil),            // 308: lemming.dataplane.sai.TamEventThresholdAttribute
	(*TamIntAttribute)(nil),                       // 309: lemming.dataplane.sai.TamIntAttribute
	(*TamMathFuncAttribute)(nil),                  // 310: lemming.dataplane.sai.TamMathFuncAttribute
	(*TamReportAttribute)(nil),                    // 311: lemming.dataplane.sai.TamReportAttribute
	(*TamTelemetryAttribute)(nil),                 // 312: lemming.dataplane.sai.TamTelemetryAttribute
	(*TamTelTypeAttribute)(nil),                   // 313: lemming.dataplane.sai.TamTelTypeAttribute
	(*TamTransportAttribute)(nil),                 // 314: lemming.dataplane.sai.TamTransportAttribute
	(*TunnelAttribute)(nil),                       // 315: lemming.dataplane.sai.TunnelAttribute
	(*TunnelMapAttribute)(nil),                    // 316: lemming.dataplane.sai.TunnelMapAttribute
	(*TunnelMapEntryAttribute)(nil),               // 317: lemming.dataplane.sai.TunnelMapEntryAttribute
	(*TunnelTermTableEntryAttribute)(nil),         // 318: lemming.dataplane.sai.TunnelTermTableEntryAttribute
	(*UdfAttribute)(nil),                          // 319: lemming.dataplane.sai.UdfAttribute
	(*UdfGroupAttribute)(nil),                     // 320: lemming.dataplane.sai.UdfGroupAttribute
	(*UdfMatchAttribute)(nil),                     // 321: lemming.dataplane.sai.UdfMatchAttribute
	(*VirtualRouterAttribute)(nil),                // 322: lemming.dataplane.sai.VirtualRouterAttribute
	(*VlanAttribute)(nil),                         // 323: lemming.dataplane.sai.VlanAttribute
	(*VlanMemberAttribute)(nil),                   // 324: lemming.dataplane.sai.VlanMemberAttribute
	(*WredAttribute)(nil),                         // 325: lemming.dataplane.sai.WredAttribute
	nil,                                           // 326: lemming.dataplane.sai.UintMap.UintmapEntry
	(*timestamppb.Timestamp)(nil),                 // 327: google.protobuf.Timestamp
}
var file_dataplane_standalone_proto_common_proto_depIdxs = []int32{
	202, // 0: lemming.dataplane.sai.AclActionData.objlist:type_name -> lemming.dataplane.sai.Uint64List
	202, // 1: lemming.dataplane.sai.AclFieldData.mask_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 2: lemming.dataplane.sai.AclFieldData.data_list:type_name -> lemming.dataplane.sai.Uint64List
	6,   // 3: lemming.dataplane.sai.ACLResource.stage:type_name -> lemming.dataplane.sai.AclStage
	1,   // 4: lemming.dataplane.sai.ACLResource.bind_point:type_name -> lemming.dataplane.sai.AclBindPointType
	12,  // 5: lemming.dataplane.sai.BfdSessionStateChangeNotificationData.session_state:type_name -> lemming.dataplane.sai.BfdSessionState
	35,  // 6: lemming.dataplane.sai.FdbEventNotificationData.event_type:type_name -> lemming.dataplane.sai.FdbEvent
	172, // 7: lemming.dataplane.sai.FdbEventNotificationData.fdb_entry:type_name -> lemming.dataplane.sai.FdbEntry
	221, // 8: lemming.dataplane.sai.FdbEventNotificationData.attrs:type_name -> lemming.dataplane.sai.FdbEntryAttribute
	51,  // 9: lemming.dataplane.sai.IpmcEntry.type:type_name -> lemming.dataplane.sai.IpmcEntryType
	55,  // 10: lemming.dataplane.sai.IpsecSaStatusNotificationData.ipsec_sa_octet_count_status:type_name -> lemming.dataplane.sai.IpsecSaOctetCountStatus
	58,  // 11: lemming.dataplane.sai.L2mcEntry.type:type_name -> lemming.dataplane.sai.L2mcEntryType
	326, // 12: lemming.dataplane.sai.UintMap.uintmap:type_name -> lemming.dataplane.sai.UintMap.UintmapEntry
	71,  // 13: lemming.dataplane.sai.NatEntry.nat_type:type_name -> lemming.dataplane.sai.NatType
	182, // 14: lemming.dataplane.sai.NatEntry.data:type_name -> lemming.dataplane.sai.NatEntryData
	106, // 15: lemming.dataplane.sai.PortOperStatusNotification.port_state:type_name -> lemming.dataplane.sai.PortOperStatus
	109, // 16: lemming.dataplane.sai.PRBS_RXState.rx_status:type_name -> lemming.dataplane.sai.PortPrbsRxStatus
	84,  // 17: lemming.dataplane.sai.QOSMapParams.color:type_name -> lemming.dataplane.sai.PacketColor
	188, // 18: lemming.dataplane.sai.QOSMap.key:type_name -> lemming.dataplane.sai.QOSMapParams
	188, // 19: lemming.dataplane.sai.QOSMap.value:type_name -> lemming.dataplane.sai.QOSMapParams
	115, // 20: lemming.dataplane.sai.QueueDeadlockNotificationData.event:type_name -> lemming.dataplane.sai.QueuePfcDeadlockEventType
	175, // 21: lemming.dataplane.sai.RouteEntry.destination:type_name -> lemming.dataplane.sai.IpPrefix
	193, // 22: lemming.dataplane.sai.TLVEntry.hmac:type_name -> lemming.dataplane.sai.HMAC
	168, // 23: lemming.dataplane.sai.AclEntryAttribute.field_src_ipv6:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 24: lemming.dataplane.sai.AclEntryAttribute.field_src_ipv6_word3:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 25: lemming.dataplane.sai.AclEntryAttribute.field_src_ipv6_word2:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 26: lemming.dataplane.sai.AclEntryAttribute.field_src_ipv6_word1:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 27: lemming.dataplane.sai.AclEntryAttribute.field_src_ipv6_word0:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 28: lemming.dataplane.sai.AclEntryAttribute.field_dst_ipv6:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 29: lemming.dataplane.sai.AclEntryAttribute.field_dst_ipv6_word3:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 30: lemming.dataplane.sai.AclEntryAttribute.field_dst_ipv6_word2:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 31: lemming.dataplane.sai.AclEntryAttribute.field_dst_ipv6_word1:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 32: lemming.dataplane.sai.AclEntryAttribute.field_dst_ipv6_word0:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 33: lemming.dataplane.sai.AclEntryAttribute.field_inner_src_ipv6:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 34: lemming.dataplane.sai.AclEntryAttribute.field_inner_dst_ipv6:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 35: lemming.dataplane.sai.AclEntryAttribute.field_src_mac:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 36: lemming.dataplane.sai.AclEntryAttribute.field_dst_mac:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 37: lemming.dataplane.sai.AclEntryAttribute.field_src_ip:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 38: lemming.dataplane.sai.AclEntryAttribute.field_dst_ip:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 39: lemming.dataplane.sai.AclEntryAttribute.field_inner_src_ip:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 40: lemming.dataplane.sai.AclEntryAttribute.field_inner_dst_ip:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 41: lemming.dataplane.sai.AclEntryAttribute.field_in_ports:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 42: lemming.dataplane.sai.AclEntryAttribute.field_out_ports:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 43: lemming.dataplane.sai.AclEntryAttribute.field_in_port:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 44: lemming.dataplane.sai.AclEntryAttribute.field_out_port:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 45: lemming.dataplane.sai.AclEntryAttribute.field_src_port:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 46: lemming.dataplane.sai.AclEntryAttribute.field_outer_vlan_id:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 47: lemming.dataplane.sai.AclEntryAttribute.field_outer_vlan_pri:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 48: lemming.dataplane.sai.AclEntryAttribute.field_outer_vlan_cfi:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 49: lemming.dataplane.sai.AclEntryAttribute.field_inner_vlan_id:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 50: lemming.dataplane.sai.AclEntryAttribute.field_inner_vlan_pri:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 51: lemming.dataplane.sai.AclEntryAttribute.field_inner_vlan_cfi:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 52: lemming.dataplane.sai.AclEntryAttribute.field_l4_src_port:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 53: lemming.dataplane.sai.AclEntryAttribute.field_l4_dst_port:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 54: lemming.dataplane.sai.AclEntryAttribute.field_inner_l4_src_port:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 55: lemming.dataplane.sai.AclEntryAttribute.field_inner_l4_dst_port:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 56: lemming.dataplane.sai.AclEntryAttribute.field_ether_type:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 57: lemming.dataplane.sai.AclEntryAttribute.field_inner_ether_type:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 58: lemming.dataplane.sai.AclEntryAttribute.field_ip_protocol:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 59: lemming.dataplane.sai.AclEntryAttribute.field_inner_ip_protocol:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 60: lemming.dataplane.sai.AclEntryAttribute.field_ip_identification:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 61: lemming.dataplane.sai.AclEntryAttribute.field_dscp:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 62: lemming.dataplane.sai.AclEntryAttribute.field_ecn:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 63: lemming.dataplane.sai.AclEntryAttribute.field_ttl:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 64: lemming.dataplane.sai.AclEntryAttribute.field_tos:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 65: lemming.dataplane.sai.AclEntryAttribute.field_ip_flags:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 66: lemming.dataplane.sai.AclEntryAttribute.field_tcp_flags:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 67: lemming.dataplane.sai.AclEntryAttribute.field_acl_ip_type:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 68: lemming.dataplane.sai.AclEntryAttribute.field_acl_ip_frag:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 69: lemming.dataplane.sai.AclEntryAttribute.field_ipv6_flow_label:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 70: lemming.dataplane.sai.AclEntryAttribute.field_tc:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 71: lemming.dataplane.sai.AclEntryAttribute.field_icmp_type:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 72: lemming.dataplane.sai.AclEntryAttribute.field_icmp_code:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 73: lemming.dataplane.sai.AclEntryAttribute.field_icmpv6_type:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 74: lemming.dataplane.sai.AclEntryAttribute.field_icmpv6_code:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 75: lemming.dataplane.sai.AclEntryAttribute.field_packet_vlan:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 76: lemming.dataplane.sai.AclEntryAttribute.field_tunnel_vni:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 77: lemming.dataplane.sai.AclEntryAttribute.field_has_vlan_tag:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 78: lemming.dataplane.sai.AclEntryAttribute.field_macsec_sci:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 79: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label0_label:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 80: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label0_ttl:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 81: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label0_exp:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 82: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label0_bos:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 83: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label1_label:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 84: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label1_ttl:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 85: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label1_exp:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 86: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label1_bos:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 87: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label2_label:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 88: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label2_ttl:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 89: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label2_exp:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 90: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label2_bos:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 91: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label3_label:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 92: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label3_ttl:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 93: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label3_exp:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 94: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label3_bos:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 95: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label4_label:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 96: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label4_ttl:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 97: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label4_exp:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 98: lemming.dataplane.sai.AclEntryAttribute.field_mpls_label4_bos:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 99: lemming.dataplane.sai.AclEntryAttribute.field_fdb_dst_user_meta:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 100: lemming.dataplane.sai.AclEntryAttribute.field_route_dst_user_meta:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 101: lemming.dataplane.sai.AclEntryAttribute.field_neighbor_dst_user_meta:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 102: lemming.dataplane.sai.AclEntryAttribute.field_port_user_meta:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 103: lemming.dataplane.sai.AclEntryAttribute.field_vlan_user_meta:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 104: lemming.dataplane.sai.AclEntryAttribute.field_acl_user_meta:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 105: lemming.dataplane.sai.AclEntryAttribute.field_fdb_npu_meta_dst_hit:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 106: lemming.dataplane.sai.AclEntryAttribute.field_neighbor_npu_meta_dst_hit:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 107: lemming.dataplane.sai.AclEntryAttribute.field_route_npu_meta_dst_hit:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 108: lemming.dataplane.sai.AclEntryAttribute.field_bth_opcode:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 109: lemming.dataplane.sai.AclEntryAttribute.field_aeth_syndrome:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 110: lemming.dataplane.sai.AclEntryAttribute.user_defined_field_group_min:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 111: lemming.dataplane.sai.AclEntryAttribute.user_defined_field_group_max:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 112: lemming.dataplane.sai.AclEntryAttribute.field_acl_range_type:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 113: lemming.dataplane.sai.AclEntryAttribute.field_ipv6_next_header:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 114: lemming.dataplane.sai.AclEntryAttribute.field_gre_key:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 115: lemming.dataplane.sai.AclEntryAttribute.field_tam_int_type:type_name -> lemming.dataplane.sai.AclFieldData
	166, // 116: lemming.dataplane.sai.AclEntryAttribute.action_redirect:type_name -> lemming.dataplane.sai.AclActionData
	166, // 117: lemming.dataplane.sai.AclEntryAttribute.action_endpoint_ip:type_name -> lemming.dataplane.sai.AclActionData
	166, // 118: lemming.dataplane.sai.AclEntryAttribute.action_redirect_list:type_name -> lemming.dataplane.sai.AclActionData
	166, // 119: lemming.dataplane.sai.AclEntryAttribute.action_packet_action:type_name -> lemming.dataplane.sai.AclActionData
	166, // 120: lemming.dataplane.sai.AclEntryAttribute.action_flood:type_name -> lemming.dataplane.sai.AclActionData
	166, // 121: lemming.dataplane.sai.AclEntryAttribute.action_counter:type_name -> lemming.dataplane.sai.AclActionData
	166, // 122: lemming.dataplane.sai.AclEntryAttribute.action_mirror_ingress:type_name -> lemming.dataplane.sai.AclActionData
	166, // 123: lemming.dataplane.sai.AclEntryAttribute.action_mirror_egress:type_name -> lemming.dataplane.sai.AclActionData
	166, // 124: lemming.dataplane.sai.AclEntryAttribute.action_set_policer:type_name -> lemming.dataplane.sai.AclActionData
	166, // 125: lemming.dataplane.sai.AclEntryAttribute.action_decrement_ttl:type_name -> lemming.dataplane.sai.AclActionData
	166, // 126: lemming.dataplane.sai.AclEntryAttribute.action_set_tc:type_name -> lemming.dataplane.sai.AclActionData
	166, // 127: lemming.dataplane.sai.AclEntryAttribute.action_set_packet_color:type_name -> lemming.dataplane.sai.AclActionData
	166, // 128: lemming.dataplane.sai.AclEntryAttribute.action_set_inner_vlan_id:type_name -> lemming.dataplane.sai.AclActionData
	166, // 129: lemming.dataplane.sai.AclEntryAttribute.action_set_inner_vlan_pri:type_name -> lemming.dataplane.sai.AclActionData
	166, // 130: lemming.dataplane.sai.AclEntryAttribute.action_set_outer_vlan_id:type_name -> lemming.dataplane.sai.AclActionData
	166, // 131: lemming.dataplane.sai.AclEntryAttribute.action_set_outer_vlan_pri:type_name -> lemming.dataplane.sai.AclActionData
	166, // 132: lemming.dataplane.sai.AclEntryAttribute.action_add_vlan_id:type_name -> lemming.dataplane.sai.AclActionData
	166, // 133: lemming.dataplane.sai.AclEntryAttribute.action_add_vlan_pri:type_name -> lemming.dataplane.sai.AclActionData
	166, // 134: lemming.dataplane.sai.AclEntryAttribute.action_set_src_mac:type_name -> lemming.dataplane.sai.AclActionData
	166, // 135: lemming.dataplane.sai.AclEntryAttribute.action_set_dst_mac:type_name -> lemming.dataplane.sai.AclActionData
	166, // 136: lemming.dataplane.sai.AclEntryAttribute.action_set_src_ip:type_name -> lemming.dataplane.sai.AclActionData
	166, // 137: lemming.dataplane.sai.AclEntryAttribute.action_set_dst_ip:type_name -> lemming.dataplane.sai.AclActionData
	166, // 138: lemming.dataplane.sai.AclEntryAttribute.action_set_src_ipv6:type_name -> lemming.dataplane.sai.AclActionData
	166, // 139: lemming.dataplane.sai.AclEntryAttribute.action_set_dst_ipv6:type_name -> lemming.dataplane.sai.AclActionData
	166, // 140: lemming.dataplane.sai.AclEntryAttribute.action_set_dscp:type_name -> lemming.dataplane.sai.AclActionData
	166, // 141: lemming.dataplane.sai.AclEntryAttribute.action_set_ecn:type_name -> lemming.dataplane.sai.AclActionData
	166, // 142: lemming.dataplane.sai.AclEntryAttribute.action_set_l4_src_port:type_name -> lemming.dataplane.sai.AclActionData
	166, // 143: lemming.dataplane.sai.AclEntryAttribute.action_set_l4_dst_port:type_name -> lemming.dataplane.sai.AclActionData
	166, // 144: lemming.dataplane.sai.AclEntryAttribute.action_ingress_samplepacket_enable:type_name -> lemming.dataplane.sai.AclActionData
	166, // 145: lemming.dataplane.sai.AclEntryAttribute.action_egress_samplepacket_enable:type_name -> lemming.dataplane.sai.AclActionData
	166, // 146: lemming.dataplane.sai.AclEntryAttribute.action_set_acl_meta_data:type_name -> lemming.dataplane.sai.AclActionData
	166, // 147: lemming.dataplane.sai.AclEntryAttribute.action_egress_block_port_list:type_name -> lemming.dataplane.sai.AclActionData
	166, // 148: lemming.dataplane.sai.AclEntryAttribute.action_set_user_trap_id:type_name -> lemming.dataplane.sai.AclActionData
	166, // 149: lemming.dataplane.sai.AclEntryAttribute.action_set_do_not_learn:type_name -> lemming.dataplane.sai.AclActionData
	166, // 150: lemming.dataplane.sai.AclEntryAttribute.action_acl_dtel_flow_op:type_name -> lemming.dataplane.sai.AclActionData
	166, // 151: lemming.dataplane.sai.AclEntryAttribute.action_dtel_int_session:type_name -> lemming.dataplane.sai.AclActionData
	166, // 152: lemming.dataplane.sai.AclEntryAttribute.action_dtel_drop_report_enable:type_name -> lemming.dataplane.sai.AclActionData
	166, // 153: lemming.dataplane.sai.AclEntryAttribute.action_dtel_tail_drop_report_enable:type_name -> lemming.dataplane.sai.AclActionData
	166, // 154: lemming.dataplane.sai.AclEntryAttribute.action_dtel_flow_sample_percent:type_name -> lemming.dataplane.sai.AclActionData
	166, // 155: lemming.dataplane.sai.AclEntryAttribute.action_dtel_report_all_packets:type_name -> lemming.dataplane.sai.AclActionData
	166, // 156: lemming.dataplane.sai.AclEntryAttribute.action_no_nat:type_name -> lemming.dataplane.sai.AclActionData
	166, // 157: lemming.dataplane.sai.AclEntryAttribute.action_int_insert:type_name -> lemming.dataplane.sai.AclActionData
	166, // 158: lemming.dataplane.sai.AclEntryAttribute.action_int_delete:type_name -> lemming.dataplane.sai.AclActionData
	166, // 159: lemming.dataplane.sai.AclEntryAttribute.action_int_report_flow:type_name -> lemming.dataplane.sai.AclActionData
	166, // 160: lemming.dataplane.sai.AclEntryAttribute.action_int_report_drops:type_name -> lemming.dataplane.sai.AclActionData
	166, // 161: lemming.dataplane.sai.AclEntryAttribute.action_int_report_tail_drops:type_name -> lemming.dataplane.sai.AclActionData
	166, // 162: lemming.dataplane.sai.AclEntryAttribute.action_tam_int_object:type_name -> lemming.dataplane.sai.AclActionData
	166, // 163: lemming.dataplane.sai.AclEntryAttribute.action_set_isolation_group:type_name -> lemming.dataplane.sai.AclActionData
	166, // 164: lemming.dataplane.sai.AclEntryAttribute.action_macsec_flow:type_name -> lemming.dataplane.sai.AclActionData
	166, // 165: lemming.dataplane.sai.AclEntryAttribute.action_set_lag_hash_id:type_name -> lemming.dataplane.sai.AclActionData
	166, // 166: lemming.dataplane.sai.AclEntryAttribute.action_set_ecmp_hash_id:type_name -> lemming.dataplane.sai.AclActionData
	166, // 167: lemming.dataplane.sai.AclEntryAttribute.action_set_vrf:type_name -> lemming.dataplane.sai.AclActionData
	166, // 168: lemming.dataplane.sai.AclEntryAttribute.action_set_forwarding_class:type_name -> lemming.dataplane.sai.AclActionData
	5,   // 169: lemming.dataplane.sai.AclRangeAttribute.type:type_name -> lemming.dataplane.sai.AclRangeType
	195, // 170: lemming.dataplane.sai.AclRangeAttribute.limit:type_name -> lemming.dataplane.sai.Uint32Range
	1,   // 171: lemming.dataplane.sai.AclBindPointTypeList.list:type_name -> lemming.dataplane.sai.AclBindPointType
	0,   // 172: lemming.dataplane.sai.AclActionTypeList.list:type_name -> lemming.dataplane.sai.AclActionType
	5,   // 173: lemming.dataplane.sai.AclRangeTypeList.list:type_name -> lemming.dataplane.sai.AclRangeType
	6,   // 174: lemming.dataplane.sai.AclTableAttribute.acl_stage:type_name -> lemming.dataplane.sai.AclStage
	199, // 175: lemming.dataplane.sai.AclTableAttribute.acl_bind_point_type_list:type_name -> lemming.dataplane.sai.AclBindPointTypeList
	200, // 176: lemming.dataplane.sai.AclTableAttribute.acl_action_type_list:type_name -> lemming.dataplane.sai.AclActionTypeList
	201, // 177: lemming.dataplane.sai.AclTableAttribute.field_acl_range_type:type_name -> lemming.dataplane.sai.AclRangeTypeList
	202, // 178: lemming.dataplane.sai.AclTableAttribute.entry_list:type_name -> lemming.dataplane.sai.Uint64List
	6,   // 179: lemming.dataplane.sai.AclTableGroupAttribute.acl_stage:type_name -> lemming.dataplane.sai.AclStage
	199, // 180: lemming.dataplane.sai.AclTableGroupAttribute.acl_bind_point_type_list:type_name -> lemming.dataplane.sai.AclBindPointTypeList
	7,   // 181: lemming.dataplane.sai.AclTableGroupAttribute.type:type_name -> lemming.dataplane.sai.AclTableGroupType
	202, // 182: lemming.dataplane.sai.AclTableGroupAttribute.member_list:type_name -> lemming.dataplane.sai.Uint64List
	13,  // 183: lemming.dataplane.sai.BfdSessionAttribute.type:type_name -> lemming.dataplane.sai.BfdSessionType
	9,   // 184: lemming.dataplane.sai.BfdSessionAttribute.bfd_encapsulation_type:type_name -> lemming.dataplane.sai.BfdEncapsulationType
	12,  // 185: lemming.dataplane.sai.BfdSessionAttribute.state:type_name -> lemming.dataplane.sai.BfdSessionState
	10,  // 186: lemming.dataplane.sai.BfdSessionAttribute.offload_type:type_name -> lemming.dataplane.sai.BfdSessionOffloadType
	20,  // 187: lemming.dataplane.sai.BridgeAttribute.type:type_name -> lemming.dataplane.sai.BridgeType
	202, // 188: lemming.dataplane.sai.BridgeAttribute.port_list:type_name -> lemming.dataplane.sai.Uint64List
	14,  // 189: lemming.dataplane.sai.BridgeAttribute.unknown_unicast_flood_control_type:type_name -> lemming.dataplane.sai.BridgeFloodControlType
	14,  // 190: lemming.dataplane.sai.BridgeAttribute.unknown_multicast_flood_control_type:type_name -> lemming.dataplane.sai.BridgeFloodControlType
	14,  // 191: lemming.dataplane.sai.BridgeAttribute.broadcast_flood_control_type:type_name -> lemming.dataplane.sai.BridgeFloodControlType
	18,  // 192: lemming.dataplane.sai.BridgePortAttribute.type:type_name -> lemming.dataplane.sai.BridgePortType
	17,  // 193: lemming.dataplane.sai.BridgePortAttribute.tagging_mode:type_name -> lemming.dataplane.sai.BridgePortTaggingMode
	15,  // 194: lemming.dataplane.sai.BridgePortAttribute.fdb_learning_mode:type_name -> lemming.dataplane.sai.BridgePortFdbLearningMode
	83,  // 195: lemming.dataplane.sai.BridgePortAttribute.fdb_learning_limit_violation_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	23,  // 196: lemming.dataplane.sai.BufferPoolAttribute.type:type_name -> lemming.dataplane.sai.BufferPoolType
	22,  // 197: lemming.dataplane.sai.BufferPoolAttribute.threshold_mode:type_name -> lemming.dataplane.sai.BufferPoolThresholdMode
	202, // 198: lemming.dataplane.sai.BufferPoolAttribute.tam:type_name -> lemming.dataplane.sai.Uint64List
	24,  // 199: lemming.dataplane.sai.BufferProfileAttribute.threshold_mode:type_name -> lemming.dataplane.sai.BufferProfileThresholdMode
	28,  // 200: lemming.dataplane.sai.CounterAttribute.type:type_name -> lemming.dataplane.sai.CounterType
	45,  // 201: lemming.dataplane.sai.InDropReasonList.list:type_name -> lemming.dataplane.sai.InDropReason
	79,  // 202: lemming.dataplane.sai.OutDropReasonList.list:type_name -> lemming.dataplane.sai.OutDropReason
	30,  // 203: lemming.dataplane.sai.DebugCounterAttribute.type:type_name -> lemming.dataplane.sai.DebugCounterType
	29,  // 204: lemming.dataplane.sai.DebugCounterAttribute.bind_method:type_name -> lemming.dataplane.sai.DebugCounterBindMethod
	212, // 205: lemming.dataplane.sai.DebugCounterAttribute.in_drop_reason_list:type_name -> lemming.dataplane.sai.InDropReasonList
	213, // 206: lemming.dataplane.sai.DebugCounterAttribute.out_drop_reason_list:type_name -> lemming.dataplane.sai.OutDropReasonList
	202, // 207: lemming.dataplane.sai.DtelAttribute.sink_port_list:type_name -> lemming.dataplane.sai.Uint64List
	168, // 208: lemming.dataplane.sai.DtelAttribute.int_l4_dscp:type_name -> lemming.dataplane.sai.AclFieldData
	31,  // 209: lemming.dataplane.sai.DtelEventAttribute.type:type_name -> lemming.dataplane.sai.DtelEventType
	219, // 210: lemming.dataplane.sai.DtelReportSessionAttribute.dst_ip_list:type_name -> lemming.dataplane.sai.BytesList
	34,  // 211: lemming.dataplane.sai.FdbEntryAttribute.type:type_name -> lemming.dataplane.sai.FdbEntryType
	83,  // 212: lemming.dataplane.sai.FdbEntryAttribute.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	36,  // 213: lemming.dataplane.sai.FdbFlushAttribute.entry_type:type_name -> lemming.dataplane.sai.FdbFlushEntryType
	72,  // 214: lemming.dataplane.sai.FineGrainedHashFieldAttribute.native_hash_field:type_name -> lemming.dataplane.sai.NativeHashField
	72,  // 215: lemming.dataplane.sai.NativeHashFieldList.list:type_name -> lemming.dataplane.sai.NativeHashField
	224, // 216: lemming.dataplane.sai.HashAttribute.native_hash_field_list:type_name -> lemming.dataplane.sai.NativeHashFieldList
	202, // 217: lemming.dataplane.sai.HashAttribute.udf_group_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 218: lemming.dataplane.sai.HashAttribute.fine_grained_hash_field_list:type_name -> lemming.dataplane.sai.Uint64List
	42,  // 219: lemming.dataplane.sai.HostifAttribute.type:type_name -> lemming.dataplane.sai.HostifType
	44,  // 220: lemming.dataplane.sai.HostifAttribute.vlan_tag:type_name -> lemming.dataplane.sai.HostifVlanTag
	41,  // 221: lemming.dataplane.sai.HostifPacketAttribute.hostif_tx_type:type_name -> lemming.dataplane.sai.HostifTxType
	327, // 222: lemming.dataplane.sai.HostifPacketAttribute.timestamp:type_name -> google.protobuf.Timestamp
	39,  // 223: lemming.dataplane.sai.HostifTableEntryAttribute.type:type_name -> lemming.dataplane.sai.HostifTableEntryType
	38,  // 224: lemming.dataplane.sai.HostifTableEntryAttribute.channel_type:type_name -> lemming.dataplane.sai.HostifTableEntryChannelType
	40,  // 225: lemming.dataplane.sai.HostifTrapAttribute.trap_type:type_name -> lemming.dataplane.sai.HostifTrapType
	83,  // 226: lemming.dataplane.sai.HostifTrapAttribute.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	202, // 227: lemming.dataplane.sai.HostifTrapAttribute.exclude_port_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 228: lemming.dataplane.sai.HostifTrapAttribute.mirror_session:type_name -> lemming.dataplane.sai.Uint64List
	43,  // 229: lemming.dataplane.sai.HostifUserDefinedTrapAttribute.type:type_name -> lemming.dataplane.sai.HostifUserDefinedTrapType
	202, // 230: lemming.dataplane.sai.IngressPriorityGroupAttribute.tam:type_name -> lemming.dataplane.sai.Uint64List
	83,  // 231: lemming.dataplane.sai.InsegEntryAttribute.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	49,  // 232: lemming.dataplane.sai.InsegEntryAttribute.psc_type:type_name -> lemming.dataplane.sai.InsegEntryPscType
	48,  // 233: lemming.dataplane.sai.InsegEntryAttribute.pop_ttl_mode:type_name -> lemming.dataplane.sai.InsegEntryPopTtlMode
	47,  // 234: lemming.dataplane.sai.InsegEntryAttribute.pop_qos_mode:type_name -> lemming.dataplane.sai.InsegEntryPopQosMode
	83,  // 235: lemming.dataplane.sai.IpmcEntryAttribute.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	202, // 236: lemming.dataplane.sai.IpmcGroupAttribute.ipmc_member_list:type_name -> lemming.dataplane.sai.Uint64List
	52,  // 237: lemming.dataplane.sai.IpsecCipherList.list:type_name -> lemming.dataplane.sai.IpsecCipher
	237, // 238: lemming.dataplane.sai.IpsecAttribute.supported_cipher_list:type_name -> lemming.dataplane.sai.IpsecCipherList
	124, // 239: lemming.dataplane.sai.IpsecAttribute.stats_mode:type_name -> lemming.dataplane.sai.StatsMode
	202, // 240: lemming.dataplane.sai.IpsecAttribute.sa_list:type_name -> lemming.dataplane.sai.Uint64List
	134, // 241: lemming.dataplane.sai.IpsecPortAttribute.switch_switching_mode:type_name -> lemming.dataplane.sai.SwitchSwitchingMode
	53,  // 242: lemming.dataplane.sai.IpsecSaAttribute.ipsec_direction:type_name -> lemming.dataplane.sai.IpsecDirection
	55,  // 243: lemming.dataplane.sai.IpsecSaAttribute.octet_count_status:type_name -> lemming.dataplane.sai.IpsecSaOctetCountStatus
	202, // 244: lemming.dataplane.sai.IpsecSaAttribute.ipsec_port_list:type_name -> lemming.dataplane.sai.Uint64List
	52,  // 245: lemming.dataplane.sai.IpsecSaAttribute.ipsec_cipher:type_name -> lemming.dataplane.sai.IpsecCipher
	57,  // 246: lemming.dataplane.sai.IsolationGroupAttribute.type:type_name -> lemming.dataplane.sai.IsolationGroupType
	202, // 247: lemming.dataplane.sai.IsolationGroupAttribute.isolation_member_list:type_name -> lemming.dataplane.sai.Uint64List
	83,  // 248: lemming.dataplane.sai.L2mcEntryAttribute.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	202, // 249: lemming.dataplane.sai.L2mcGroupAttribute.l2mc_member_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 250: lemming.dataplane.sai.LagAttribute.port_list:type_name -> lemming.dataplane.sai.Uint64List
	60,  // 251: lemming.dataplane.sai.MacsecCipherSuiteList.list:type_name -> lemming.dataplane.sai.MacsecCipherSuite
	61,  // 252: lemming.dataplane.sai.MacsecAttribute.direction:type_name -> lemming.dataplane.sai.MacsecDirection
	248, // 253: lemming.dataplane.sai.MacsecAttribute.supported_cipher_suite_list:type_name -> lemming.dataplane.sai.MacsecCipherSuiteList
	249, // 254: lemming.dataplane.sai.MacsecAttribute.sectag_offsets_supported:type_name -> lemming.dataplane.sai.Uint32List
	124, // 255: lemming.dataplane.sai.MacsecAttribute.stats_mode:type_name -> lemming.dataplane.sai.StatsMode
	202, // 256: lemming.dataplane.sai.MacsecAttribute.supported_port_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 257: lemming.dataplane.sai.MacsecAttribute.flow_list:type_name -> lemming.dataplane.sai.Uint64List
	61,  // 258: lemming.dataplane.sai.MacsecFlowAttribute.macsec_direction:type_name -> lemming.dataplane.sai.MacsecDirection
	202, // 259: lemming.dataplane.sai.MacsecFlowAttribute.acl_entry_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 260: lemming.dataplane.sai.MacsecFlowAttribute.sc_list:type_name -> lemming.dataplane.sai.Uint64List
	61,  // 261: lemming.dataplane.sai.MacsecPortAttribute.macsec_direction:type_name -> lemming.dataplane.sai.MacsecDirection
	134, // 262: lemming.dataplane.sai.MacsecPortAttribute.switch_switching_mode:type_name -> lemming.dataplane.sai.SwitchSwitchingMode
	61,  // 263: lemming.dataplane.sai.MacsecSaAttribute.macsec_direction:type_name -> lemming.dataplane.sai.MacsecDirection
	61,  // 264: lemming.dataplane.sai.MacsecScAttribute.macsec_direction:type_name -> lemming.dataplane.sai.MacsecDirection
	202, // 265: lemming.dataplane.sai.MacsecScAttribute.sa_list:type_name -> lemming.dataplane.sai.Uint64List
	60,  // 266: lemming.dataplane.sai.MacsecScAttribute.macsec_cipher_suite:type_name -> lemming.dataplane.sai.MacsecCipherSuite
	83,  // 267: lemming.dataplane.sai.McastFdbEntryAttribute.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	68,  // 268: lemming.dataplane.sai.MirrorSessionAttribute.type:type_name -> lemming.dataplane.sai.MirrorSessionType
	67,  // 269: lemming.dataplane.sai.MirrorSessionAttribute.congestion_mode:type_name -> lemming.dataplane.sai.MirrorSessionCongestionMode
	33,  // 270: lemming.dataplane.sai.MirrorSessionAttribute.erspan_encapsulation_type:type_name -> lemming.dataplane.sai.ErspanEncapsulationType
	202, // 271: lemming.dataplane.sai.MirrorSessionAttribute.monitor_portlist:type_name -> lemming.dataplane.sai.Uint64List
	70,  // 272: lemming.dataplane.sai.MySidEntryAttribute.endpoint_behavior:type_name -> lemming.dataplane.sai.MySidEntryEndpointBehavior
	69,  // 273: lemming.dataplane.sai.MySidEntryAttribute.endpoint_behavior_flavor:type_name -> lemming.dataplane.sai.MySidEntryEndpointBehaviorFlavor
	83,  // 274: lemming.dataplane.sai.MySidEntryAttribute.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	71,  // 275: lemming.dataplane.sai.NatEntryAttribute.nat_type:type_name -> lemming.dataplane.sai.NatType
	71,  // 276: lemming.dataplane.sai.NatZoneCounterAttribute.nat_type:type_name -> lemming.dataplane.sai.NatType
	83,  // 277: lemming.dataplane.sai.NeighborEntryAttribute.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	50,  // 278: lemming.dataplane.sai.NeighborEntryAttribute.ip_addr_family:type_name -> lemming.dataplane.sai.IpAddrFamily
	77,  // 279: lemming.dataplane.sai.NextHopAttribute.type:type_name -> lemming.dataplane.sai.NextHopType
	249, // 280: lemming.dataplane.sai.NextHopAttribute.labelstack:type_name -> lemming.dataplane.sai.Uint32List
	82,  // 281: lemming.dataplane.sai.NextHopAttribute.outseg_type:type_name -> lemming.dataplane.sai.OutsegType
	81,  // 282: lemming.dataplane.sai.NextHopAttribute.outseg_ttl_mode:type_name -> lemming.dataplane.sai.OutsegTtlMode
	80,  // 283: lemming.dataplane.sai.NextHopAttribute.outseg_exp_mode:type_name -> lemming.dataplane.sai.OutsegExpMode
	202, // 284: lemming.dataplane.sai.NextHopGroupAttribute.next_hop_member_list:type_name -> lemming.dataplane.sai.Uint64List
	76,  // 285: lemming.dataplane.sai.NextHopGroupAttribute.type:type_name -> lemming.dataplane.sai.NextHopGroupType
	179, // 286: lemming.dataplane.sai.UintMapList.list:type_name -> lemming.dataplane.sai.UintMap
	73,  // 287: lemming.dataplane.sai.NextHopGroupMapAttribute.type:type_name -> lemming.dataplane.sai.NextHopGroupMapType
	264, // 288: lemming.dataplane.sai.NextHopGroupMapAttribute.map_to_value_list:type_name -> lemming.dataplane.sai.UintMapList
	74,  // 289: lemming.dataplane.sai.NextHopGroupMemberAttribute.configured_role:type_name -> lemming.dataplane.sai.NextHopGroupMemberConfiguredRole
	75,  // 290: lemming.dataplane.sai.NextHopGroupMemberAttribute.observed_role:type_name -> lemming.dataplane.sai.NextHopGroupMemberObservedRole
	83,  // 291: lemming.dataplane.sai.PacketActionList.list:type_name -> lemming.dataplane.sai.PacketAction
	66,  // 292: lemming.dataplane.sai.PolicerAttribute.meter_type:type_name -> lemming.dataplane.sai.MeterType
	87,  // 293: lemming.dataplane.sai.PolicerAttribute.mode:type_name -> lemming.dataplane.sai.PolicerMode
	86,  // 294: lemming.dataplane.sai.PolicerAttribute.color_source:type_name -> lemming.dataplane.sai.PolicerColorSource
	83,  // 295: lemming.dataplane.sai.PolicerAttribute.green_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	83,  // 296: lemming.dataplane.sai.PolicerAttribute.yellow_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	83,  // 297: lemming.dataplane.sai.PolicerAttribute.red_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	267, // 298: lemming.dataplane.sai.PolicerAttribute.enable_counter_packet_action_list:type_name -> lemming.dataplane.sai.PacketActionList
	90,  // 299: lemming.dataplane.sai.PortBreakoutModeTypeList.list:type_name -> lemming.dataplane.sai.PortBreakoutModeType
	95,  // 300: lemming.dataplane.sai.PortFecModeList.list:type_name -> lemming.dataplane.sai.PortFecMode
	94,  // 301: lemming.dataplane.sai.PortFecModeExtendedList.list:type_name -> lemming.dataplane.sai.PortFecModeExtended
	185, // 302: lemming.dataplane.sai.PortEyeValuesList.list:type_name -> lemming.dataplane.sai.PortEyeValues
	97,  // 303: lemming.dataplane.sai.PortInterfaceTypeList.list:type_name -> lemming.dataplane.sai.PortInterfaceType
	93,  // 304: lemming.dataplane.sai.PortErrStatusList.list:type_name -> lemming.dataplane.sai.PortErrStatus
	113, // 305: lemming.dataplane.sai.PortAttribute.type:type_name -> lemming.dataplane.sai.PortType
	106, // 306: lemming.dataplane.sai.PortAttribute.oper_status:type_name -> lemming.dataplane.sai.PortOperStatus
	269, // 307: lemming.dataplane.sai.PortAttribute.supported_breakout_mode_type:type_name -> lemming.dataplane.sai.PortBreakoutModeTypeList
	90,  // 308: lemming.dataplane.sai.PortAttribute.current_breakout_mode_type:type_name -> lemming.dataplane.sai.PortBreakoutModeType
	202, // 309: lemming.dataplane.sai.PortAttribute.qos_queue_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 310: lemming.dataplane.sai.PortAttribute.qos_scheduler_group_list:type_name -> lemming.dataplane.sai.Uint64List
	249, // 311: lemming.dataplane.sai.PortAttribute.supported_speed:type_name -> lemming.dataplane.sai.Uint32List
	270, // 312: lemming.dataplane.sai.PortAttribute.supported_fec_mode:type_name -> lemming.dataplane.sai.PortFecModeList
	271, // 313: lemming.dataplane.sai.PortAttribute.supported_fec_mode_extended:type_name -> lemming.dataplane.sai.PortFecModeExtendedList
	249, // 314: lemming.dataplane.sai.PortAttribute.supported_half_duplex_speed:type_name -> lemming.dataplane.sai.Uint32List
	96,  // 315: lemming.dataplane.sai.PortAttribute.supported_flow_control_mode:type_name -> lemming.dataplane.sai.PortFlowControlMode
	104, // 316: lemming.dataplane.sai.PortAttribute.supported_media_type:type_name -> lemming.dataplane.sai.PortMediaType
	249, // 317: lemming.dataplane.sai.PortAttribute.remote_advertised_speed:type_name -> lemming.dataplane.sai.Uint32List
	270, // 318: lemming.dataplane.sai.PortAttribute.remote_advertised_fec_mode:type_name -> lemming.dataplane.sai.PortFecModeList
	271, // 319: lemming.dataplane.sai.PortAttribute.remote_advertised_fec_mode_extended:type_name -> lemming.dataplane.sai.PortFecModeExtendedList
	249, // 320: lemming.dataplane.sai.PortAttribute.remote_advertised_half_duplex_speed:type_name -> lemming.dataplane.sai.Uint32List
	96,  // 321: lemming.dataplane.sai.PortAttribute.remote_advertised_flow_control_mode:type_name -> lemming.dataplane.sai.PortFlowControlMode
	104, // 322: lemming.dataplane.sai.PortAttribute.remote_advertised_media_type:type_name -> lemming.dataplane.sai.PortMediaType
	202, // 323: lemming.dataplane.sai.PortAttribute.ingress_priority_group_list:type_name -> lemming.dataplane.sai.Uint64List
	272, // 324: lemming.dataplane.sai.PortAttribute.eye_values:type_name -> lemming.dataplane.sai.PortEyeValuesList
	249, // 325: lemming.dataplane.sai.PortAttribute.hw_lane_list:type_name -> lemming.dataplane.sai.Uint32List
	104, // 326: lemming.dataplane.sai.PortAttribute.media_type:type_name -> lemming.dataplane.sai.PortMediaType
	249, // 327: lemming.dataplane.sai.PortAttribute.advertised_speed:type_name -> lemming.dataplane.sai.Uint32List
	270, // 328: lemming.dataplane.sai.PortAttribute.advertised_fec_mode:type_name -> lemming.dataplane.sai.PortFecModeList
	271, // 329: lemming.dataplane.sai.PortAttribute.advertised_fec_mode_extended:type_name -> lemming.dataplane.sai.PortFecModeExtendedList
	249, // 330: lemming.dataplane.sai.PortAttribute.advertised_half_duplex_speed:type_name -> lemming.dataplane.sai.Uint32List
	96,  // 331: lemming.dataplane.sai.PortAttribute.advertised_flow_control_mode:type_name -> lemming.dataplane.sai.PortFlowControlMode
	104, // 332: lemming.dataplane.sai.PortAttribute.advertised_media_type:type_name -> lemming.dataplane.sai.PortMediaType
	98,  // 333: lemming.dataplane.sai.PortAttribute.internal_loopback_mode:type_name -> lemming.dataplane.sai.PortInternalLoopbackMode
	95,  // 334: lemming.dataplane.sai.PortAttribute.fec_mode:type_name -> lemming.dataplane.sai.PortFecMode
	94,  // 335: lemming.dataplane.sai.PortAttribute.fec_mode_extended:type_name -> lemming.dataplane.sai.PortFecModeExtended
	96,  // 336: lemming.dataplane.sai.PortAttribute.global_flow_control_mode:type_name -> lemming.dataplane.sai.PortFlowControlMode
	202, // 337: lemming.dataplane.sai.PortAttribute.macsec_port_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 338: lemming.dataplane.sai.PortAttribute.ingress_mirror_session:type_name -> lemming.dataplane.sai.Uint64List
	202, // 339: lemming.dataplane.sai.PortAttribute.egress_mirror_session:type_name -> lemming.dataplane.sai.Uint64List
	202, // 340: lemming.dataplane.sai.PortAttribute.ingress_sample_mirror_session:type_name -> lemming.dataplane.sai.Uint64List
	202, // 341: lemming.dataplane.sai.PortAttribute.egress_sample_mirror_session:type_name -> lemming.dataplane.sai.Uint64List
	202, // 342: lemming.dataplane.sai.PortAttribute.qos_ingress_buffer_profile_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 343: lemming.dataplane.sai.PortAttribute.qos_egress_buffer_profile_list:type_name -> lemming.dataplane.sai.Uint64List
	110, // 344: lemming.dataplane.sai.PortAttribute.priority_flow_control_mode:type_name -> lemming.dataplane.sai.PortPriorityFlowControlMode
	202, // 345: lemming.dataplane.sai.PortAttribute.egress_block_port_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 346: lemming.dataplane.sai.PortAttribute.port_pool_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 347: lemming.dataplane.sai.PortAttribute.tam_object:type_name -> lemming.dataplane.sai.Uint64List
	249, // 348: lemming.dataplane.sai.PortAttribute.serdes_preemphasis:type_name -> lemming.dataplane.sai.Uint32List
	249, // 349: lemming.dataplane.sai.PortAttribute.serdes_idriver:type_name -> lemming.dataplane.sai.Uint32List
	249, // 350: lemming.dataplane.sai.PortAttribute.serdes_ipredriver:type_name -> lemming.dataplane.sai.Uint32List
	111, // 351: lemming.dataplane.sai.PortAttribute.ptp_mode:type_name -> lemming.dataplane.sai.PortPtpMode
	97,  // 352: lemming.dataplane.sai.PortAttribute.interface_type:type_name -> lemming.dataplane.sai.PortInterfaceType
	273, // 353: lemming.dataplane.sai.PortAttribute.advertised_interface_type:type_name -> lemming.dataplane.sai.PortInterfaceTypeList
	99,  // 354: lemming.dataplane.sai.PortAttribute.link_training_failure_status:type_name -> lemming.dataplane.sai.PortLinkTrainingFailureStatus
	100, // 355: lemming.dataplane.sai.PortAttribute.link_training_rx_status:type_name -> lemming.dataplane.sai.PortLinkTrainingRxStatus
	108, // 356: lemming.dataplane.sai.PortAttribute.prbs_config:type_name -> lemming.dataplane.sai.PortPrbsConfig
	109, // 357: lemming.dataplane.sai.PortAttribute.prbs_rx_status:type_name -> lemming.dataplane.sai.PortPrbsRxStatus
	187, // 358: lemming.dataplane.sai.PortAttribute.prbs_rx_state:type_name -> lemming.dataplane.sai.PRBS_RXState
	274, // 359: lemming.dataplane.sai.PortAttribute.err_status_list:type_name -> lemming.dataplane.sai.PortErrStatusList
	135, // 360: lemming.dataplane.sai.PortAttribute.fabric_attached_switch_type:type_name -> lemming.dataplane.sai.SwitchType
	171, // 361: lemming.dataplane.sai.PortAttribute.fabric_reachability:type_name -> lemming.dataplane.sai.FabricPortReachability
	101, // 362: lemming.dataplane.sai.PortAttribute.loopback_mode:type_name -> lemming.dataplane.sai.PortLoopbackMode
	103, // 363: lemming.dataplane.sai.PortAttribute.mdix_mode_status:type_name -> lemming.dataplane.sai.PortMdixModeStatus
	102, // 364: lemming.dataplane.sai.PortAttribute.mdix_mode_config:type_name -> lemming.dataplane.sai.PortMdixModeConfig
	89,  // 365: lemming.dataplane.sai.PortAttribute.auto_neg_config_mode:type_name -> lemming.dataplane.sai.PortAutoNegConfigMode
	105, // 366: lemming.dataplane.sai.PortAttribute.module_type:type_name -> lemming.dataplane.sai.PortModuleType
	92,  // 367: lemming.dataplane.sai.PortAttribute.dual_media:type_name -> lemming.dataplane.sai.PortDualMedia
	94,  // 368: lemming.dataplane.sai.PortAttribute.auto_neg_fec_mode_extended:type_name -> lemming.dataplane.sai.PortFecModeExtended
	91,  // 369: lemming.dataplane.sai.PortConnectorAttribute.failover_mode:type_name -> lemming.dataplane.sai.PortConnectorFailoverMode
	278, // 370: lemming.dataplane.sai.PortSerdesAttribute.preemphasis:type_name -> lemming.dataplane.sai.Int32List
	278, // 371: lemming.dataplane.sai.PortSerdesAttribute.idriver:type_name -> lemming.dataplane.sai.Int32List
	278, // 372: lemming.dataplane.sai.PortSerdesAttribute.ipredriver:type_name -> lemming.dataplane.sai.Int32List
	278, // 373: lemming.dataplane.sai.PortSerdesAttribute.tx_fir_pre1:type_name -> lemming.dataplane.sai.Int32List
	278, // 374: lemming.dataplane.sai.PortSerdesAttribute.tx_fir_pre2:type_name -> lemming.dataplane.sai.Int32List
	278, // 375: lemming.dataplane.sai.PortSerdesAttribute.tx_fir_pre3:type_name -> lemming.dataplane.sai.Int32List
	278, // 376: lemming.dataplane.sai.PortSerdesAttribute.tx_fir_main:type_name -> lemming.dataplane.sai.Int32List
	278, // 377: lemming.dataplane.sai.PortSerdesAttribute.tx_fir_post1:type_name -> lemming.dataplane.sai.Int32List
	278, // 378: lemming.dataplane.sai.PortSerdesAttribute.tx_fir_post2:type_name -> lemming.dataplane.sai.Int32List
	278, // 379: lemming.dataplane.sai.PortSerdesAttribute.tx_fir_post3:type_name -> lemming.dataplane.sai.Int32List
	278, // 380: lemming.dataplane.sai.PortSerdesAttribute.tx_fir_attn:type_name -> lemming.dataplane.sai.Int32List
	189, // 381: lemming.dataplane.sai.QosMapList.list:type_name -> lemming.dataplane.sai.QOSMap
	114, // 382: lemming.dataplane.sai.QosMapAttribute.type:type_name -> lemming.dataplane.sai.QosMapType
	280, // 383: lemming.dataplane.sai.QosMapAttribute.map_to_value_list:type_name -> lemming.dataplane.sai.QosMapList
	117, // 384: lemming.dataplane.sai.QueueAttribute.type:type_name -> lemming.dataplane.sai.QueueType
	202, // 385: lemming.dataplane.sai.QueueAttribute.tam_object:type_name -> lemming.dataplane.sai.Uint64List
	119, // 386: lemming.dataplane.sai.RouterInterfaceAttribute.type:type_name -> lemming.dataplane.sai.RouterInterfaceType
	83,  // 387: lemming.dataplane.sai.RouterInterfaceAttribute.neighbor_miss_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	83,  // 388: lemming.dataplane.sai.RouterInterfaceAttribute.loopback_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	83,  // 389: lemming.dataplane.sai.RouteEntryAttribute.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	50,  // 390: lemming.dataplane.sai.RouteEntryAttribute.ip_addr_family:type_name -> lemming.dataplane.sai.IpAddrFamily
	202, // 391: lemming.dataplane.sai.RpfGroupAttribute.rpf_member_list:type_name -> lemming.dataplane.sai.Uint64List
	121, // 392: lemming.dataplane.sai.SamplepacketAttribute.type:type_name -> lemming.dataplane.sai.SamplepacketType
	120, // 393: lemming.dataplane.sai.SamplepacketAttribute.mode:type_name -> lemming.dataplane.sai.SamplepacketMode
	122, // 394: lemming.dataplane.sai.SchedulerAttribute.scheduling_type:type_name -> lemming.dataplane.sai.SchedulingType
	66,  // 395: lemming.dataplane.sai.SchedulerAttribute.meter_type:type_name -> lemming.dataplane.sai.MeterType
	202, // 396: lemming.dataplane.sai.SchedulerGroupAttribute.child_list:type_name -> lemming.dataplane.sai.Uint64List
	194, // 397: lemming.dataplane.sai.TlvEntryList.list:type_name -> lemming.dataplane.sai.TLVEntry
	123, // 398: lemming.dataplane.sai.Srv6SidlistAttribute.type:type_name -> lemming.dataplane.sai.Srv6SidlistType
	290, // 399: lemming.dataplane.sai.Srv6SidlistAttribute.tlv_list:type_name -> lemming.dataplane.sai.TlvEntryList
	219, // 400: lemming.dataplane.sai.Srv6SidlistAttribute.segment_list:type_name -> lemming.dataplane.sai.BytesList
	249, // 401: lemming.dataplane.sai.StpAttribute.vlan_list:type_name -> lemming.dataplane.sai.Uint32List
	202, // 402: lemming.dataplane.sai.StpAttribute.port_list:type_name -> lemming.dataplane.sai.Uint64List
	125, // 403: lemming.dataplane.sai.StpPortAttribute.state:type_name -> lemming.dataplane.sai.StpPortState
	169, // 404: lemming.dataplane.sai.AclResourceList.list:type_name -> lemming.dataplane.sai.ACLResource
	149, // 405: lemming.dataplane.sai.TlvTypeList.list:type_name -> lemming.dataplane.sai.TlvType
	78,  // 406: lemming.dataplane.sai.ObjectTypeList.list:type_name -> lemming.dataplane.sai.ObjectType
	10,  // 407: lemming.dataplane.sai.BfdSessionOffloadTypeList.list:type_name -> lemming.dataplane.sai.BfdSessionOffloadType
	124, // 408: lemming.dataplane.sai.StatsModeList.list:type_name -> lemming.dataplane.sai.StatsMode
	192, // 409: lemming.dataplane.sai.SystemPortConfigList.list:type_name -> lemming.dataplane.sai.SystemPortConfig
	202, // 410: lemming.dataplane.sai.SwitchAttribute.port_list:type_name -> lemming.dataplane.sai.Uint64List
	131, // 411: lemming.dataplane.sai.SwitchAttribute.oper_status:type_name -> lemming.dataplane.sai.SwitchOperStatus
	278, // 412: lemming.dataplane.sai.SwitchAttribute.temp_list:type_name -> lemming.dataplane.sai.Int32List
	195, // 413: lemming.dataplane.sai.SwitchAttribute.fdb_dst_user_meta_data_range:type_name -> lemming.dataplane.sai.Uint32Range
	195, // 414: lemming.dataplane.sai.SwitchAttribute.route_dst_user_meta_data_range:type_name -> lemming.dataplane.sai.Uint32Range
	195, // 415: lemming.dataplane.sai.SwitchAttribute.neighbor_dst_user_meta_data_range:type_name -> lemming.dataplane.sai.Uint32Range
	195, // 416: lemming.dataplane.sai.SwitchAttribute.port_user_meta_data_range:type_name -> lemming.dataplane.sai.Uint32Range
	195, // 417: lemming.dataplane.sai.SwitchAttribute.vlan_user_meta_data_range:type_name -> lemming.dataplane.sai.Uint32Range
	195, // 418: lemming.dataplane.sai.SwitchAttribute.acl_user_meta_data_range:type_name -> lemming.dataplane.sai.Uint32Range
	195, // 419: lemming.dataplane.sai.SwitchAttribute.acl_user_trap_id_range:type_name -> lemming.dataplane.sai.Uint32Range
	249, // 420: lemming.dataplane.sai.SwitchAttribute.qos_max_number_of_scheduler_groups_per_hierarchy_level:type_name -> lemming.dataplane.sai.Uint32List
	294, // 421: lemming.dataplane.sai.SwitchAttribute.available_acl_table:type_name -> lemming.dataplane.sai.AclResourceList
	294, // 422: lemming.dataplane.sai.SwitchAttribute.available_acl_table_group:type_name -> lemming.dataplane.sai.AclResourceList
	132, // 423: lemming.dataplane.sai.SwitchAttribute.restart_type:type_name -> lemming.dataplane.sai.SwitchRestartType
	167, // 424: lemming.dataplane.sai.SwitchAttribute.acl_capability:type_name -> lemming.dataplane.sai.ACLCapability
	130, // 425: lemming.dataplane.sai.SwitchAttribute.mcast_snooping_capability:type_name -> lemming.dataplane.sai.SwitchMcastSnoopingCapability
	134, // 426: lemming.dataplane.sai.SwitchAttribute.switching_mode:type_name -> lemming.dataplane.sai.SwitchSwitchingMode
	83,  // 427: lemming.dataplane.sai.SwitchAttribute.fdb_unicast_miss_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	83,  // 428: lemming.dataplane.sai.SwitchAttribute.fdb_broadcast_miss_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	83,  // 429: lemming.dataplane.sai.SwitchAttribute.fdb_multicast_miss_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	37,  // 430: lemming.dataplane.sai.SwitchAttribute.ecmp_default_hash_algorithm:type_name -> lemming.dataplane.sai.HashAlgorithm
	37,  // 431: lemming.dataplane.sai.SwitchAttribute.lag_default_hash_algorithm:type_name -> lemming.dataplane.sai.HashAlgorithm
	278, // 432: lemming.dataplane.sai.SwitchAttribute.switch_hardware_info:type_name -> lemming.dataplane.sai.Int32List
	278, // 433: lemming.dataplane.sai.SwitchAttribute.firmware_path_name:type_name -> lemming.dataplane.sai.Int32List
	167, // 434: lemming.dataplane.sai.SwitchAttribute.acl_stage_ingress:type_name -> lemming.dataplane.sai.ACLCapability
	167, // 435: lemming.dataplane.sai.SwitchAttribute.acl_stage_egress:type_name -> lemming.dataplane.sai.ACLCapability
	295, // 436: lemming.dataplane.sai.SwitchAttribute.srv6_tlv_type:type_name -> lemming.dataplane.sai.TlvTypeList
	83,  // 437: lemming.dataplane.sai.SwitchAttribute.pfc_dlr_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	195, // 438: lemming.dataplane.sai.SwitchAttribute.pfc_tc_dld_interval_range:type_name -> lemming.dataplane.sai.Uint32Range
	264, // 439: lemming.dataplane.sai.SwitchAttribute.pfc_tc_dld_interval:type_name -> lemming.dataplane.sai.UintMapList
	195, // 440: lemming.dataplane.sai.SwitchAttribute.pfc_tc_dlr_interval_range:type_name -> lemming.dataplane.sai.Uint32Range
	264, // 441: lemming.dataplane.sai.SwitchAttribute.pfc_tc_dlr_interval:type_name -> lemming.dataplane.sai.UintMapList
	296, // 442: lemming.dataplane.sai.SwitchAttribute.supported_protected_object_type:type_name -> lemming.dataplane.sai.ObjectTypeList
	297, // 443: lemming.dataplane.sai.SwitchAttribute.supported_ipv4_bfd_session_offload_type:type_name -> lemming.dataplane.sai.BfdSessionOffloadTypeList
	297, // 444: lemming.dataplane.sai.SwitchAttribute.supported_ipv6_bfd_session_offload_type:type_name -> lemming.dataplane.sai.BfdSessionOffloadTypeList
	298, // 445: lemming.dataplane.sai.SwitchAttribute.supported_extended_stats_mode:type_name -> lemming.dataplane.sai.StatsModeList
	202, // 446: lemming.dataplane.sai.SwitchAttribute.tam_object_id:type_name -> lemming.dataplane.sai.Uint64List
	296, // 447: lemming.dataplane.sai.SwitchAttribute.supported_object_type_list:type_name -> lemming.dataplane.sai.ObjectTypeList
	129, // 448: lemming.dataplane.sai.SwitchAttribute.hardware_access_bus:type_name -> lemming.dataplane.sai.SwitchHardwareAccessBus
	127, // 449: lemming.dataplane.sai.SwitchAttribute.firmware_load_method:type_name -> lemming.dataplane.sai.SwitchFirmwareLoadMethod
	128, // 450: lemming.dataplane.sai.SwitchAttribute.firmware_load_type:type_name -> lemming.dataplane.sai.SwitchFirmwareLoadType
	202, // 451: lemming.dataplane.sai.SwitchAttribute.port_connector_list:type_name -> lemming.dataplane.sai.Uint64List
	135, // 452: lemming.dataplane.sai.SwitchAttribute.type:type_name -> lemming.dataplane.sai.SwitchType
	202, // 453: lemming.dataplane.sai.SwitchAttribute.macsec_object_list:type_name -> lemming.dataplane.sai.Uint64List
	299, // 454: lemming.dataplane.sai.SwitchAttribute.system_port_config_list:type_name -> lemming.dataplane.sai.SystemPortConfigList
	202, // 455: lemming.dataplane.sai.SwitchAttribute.system_port_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 456: lemming.dataplane.sai.SwitchAttribute.fabric_port_list:type_name -> lemming.dataplane.sai.Uint64List
	126, // 457: lemming.dataplane.sai.SwitchAttribute.failover_config_mode:type_name -> lemming.dataplane.sai.SwitchFailoverConfigMode
	202, // 458: lemming.dataplane.sai.SwitchAttribute.tunnel_objects_list:type_name -> lemming.dataplane.sai.Uint64List
	249, // 459: lemming.dataplane.sai.SwitchAttribute.slave_mdio_addr_list:type_name -> lemming.dataplane.sai.Uint32List
	202, // 460: lemming.dataplane.sai.SwitchAttribute.my_mac_list:type_name -> lemming.dataplane.sai.Uint64List
	158, // 461: lemming.dataplane.sai.SwitchTunnelAttribute.tunnel_type:type_name -> lemming.dataplane.sai.TunnelType
	83,  // 462: lemming.dataplane.sai.SwitchTunnelAttribute.loopback_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	152, // 463: lemming.dataplane.sai.SwitchTunnelAttribute.tunnel_encap_ecn_mode:type_name -> lemming.dataplane.sai.TunnelEncapEcnMode
	202, // 464: lemming.dataplane.sai.SwitchTunnelAttribute.encap_mappers:type_name -> lemming.dataplane.sai.Uint64List
	150, // 465: lemming.dataplane.sai.SwitchTunnelAttribute.tunnel_decap_ecn_mode:type_name -> lemming.dataplane.sai.TunnelDecapEcnMode
	202, // 466: lemming.dataplane.sai.SwitchTunnelAttribute.decap_mappers:type_name -> lemming.dataplane.sai.Uint64List
	159, // 467: lemming.dataplane.sai.SwitchTunnelAttribute.tunnel_vxlan_udp_sport_mode:type_name -> lemming.dataplane.sai.TunnelVxlanUdpSportMode
	136, // 468: lemming.dataplane.sai.SystemPortAttribute.type:type_name -> lemming.dataplane.sai.SystemPortType
	202, // 469: lemming.dataplane.sai.SystemPortAttribute.qos_voq_list:type_name -> lemming.dataplane.sai.Uint64List
	192, // 470: lemming.dataplane.sai.SystemPortAttribute.config_info:type_name -> lemming.dataplane.sai.SystemPortConfig
	137, // 471: lemming.dataplane.sai.TamBindPointTypeList.list:type_name -> lemming.dataplane.sai.TamBindPointType
	202, // 472: lemming.dataplane.sai.TamAttribute.telemetry_objects_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 473: lemming.dataplane.sai.TamAttribute.event_objects_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 474: lemming.dataplane.sai.TamAttribute.int_objects_list:type_name -> lemming.dataplane.sai.Uint64List
	303, // 475: lemming.dataplane.sai.TamAttribute.tam_bind_point_type_list:type_name -> lemming.dataplane.sai.TamBindPointTypeList
	139, // 476: lemming.dataplane.sai.TamEventAttribute.type:type_name -> lemming.dataplane.sai.TamEventType
	202, // 477: lemming.dataplane.sai.TamEventAttribute.action_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 478: lemming.dataplane.sai.TamEventAttribute.collector_list:type_name -> lemming.dataplane.sai.Uint64List
	138, // 479: lemming.dataplane.sai.TamEventThresholdAttribute.unit:type_name -> lemming.dataplane.sai.TamEventThresholdUnit
	141, // 480: lemming.dataplane.sai.TamIntAttribute.type:type_name -> lemming.dataplane.sai.TamIntType
	140, // 481: lemming.dataplane.sai.TamIntAttribute.int_presence_type:type_name -> lemming.dataplane.sai.TamIntPresenceType
	202, // 482: lemming.dataplane.sai.TamIntAttribute.collector_list:type_name -> lemming.dataplane.sai.Uint64List
	145, // 483: lemming.dataplane.sai.TamMathFuncAttribute.tam_tel_math_func_type:type_name -> lemming.dataplane.sai.TamTelMathFuncType
	143, // 484: lemming.dataplane.sai.TamReportAttribute.type:type_name -> lemming.dataplane.sai.TamReportType
	249, // 485: lemming.dataplane.sai.TamReportAttribute.histogram_bin_boundary:type_name -> lemming.dataplane.sai.Uint32List
	142, // 486: lemming.dataplane.sai.TamReportAttribute.report_mode:type_name -> lemming.dataplane.sai.TamReportMode
	202, // 487: lemming.dataplane.sai.TamTelemetryAttribute.tam_type_list:type_name -> lemming.dataplane.sai.Uint64List
	202, // 488: lemming.dataplane.sai.TamTelemetryAttribute.collector_list:type_name -> lemming.dataplane.sai.Uint64List
	144, // 489: lemming.dataplane.sai.TamTelemetryAttribute.tam_reporting_unit:type_name -> lemming.dataplane.sai.TamReportingUnit
	146, // 490: lemming.dataplane.sai.TamTelTypeAttribute.tam_telemetry_type:type_name -> lemming.dataplane.sai.TamTelemetryType
	148, // 491: lemming.dataplane.sai.TamTransportAttribute.transport_type:type_name -> lemming.dataplane.sai.TamTransportType
	147, // 492: lemming.dataplane.sai.TamTransportAttribute.transport_auth_type:type_name -> lemming.dataplane.sai.TamTransportAuthType
	158, // 493: lemming.dataplane.sai.TunnelAttribute.type:type_name -> lemming.dataplane.sai.TunnelType
	154, // 494: lemming.dataplane.sai.TunnelAttribute.peer_mode:type_name -> lemming.dataplane.sai.TunnelPeerMode
	157, // 495: lemming.dataplane.sai.TunnelAttribute.encap_ttl_mode:type_name -> lemming.dataplane.sai.TunnelTtlMode
	151, // 496: lemming.dataplane.sai.TunnelAttribute.encap_dscp_mode:type_name -> lemming.dataplane.sai.TunnelDscpMode
	152, // 497: lemming.dataplane.sai.TunnelAttribute.encap_ecn_mode:type_name -> lemming.dataplane.sai.TunnelEncapEcnMode
	202, // 498: lemming.dataplane.sai.TunnelAttribute.encap_mappers:type_name -> lemming.dataplane.sai.Uint64List
	150, // 499: lemming.dataplane.sai.TunnelAttribute.decap_ecn_mode:type_name -> lemming.dataplane.sai.TunnelDecapEcnMode
	202, // 500: lemming.dataplane.sai.TunnelAttribute.decap_mappers:type_name -> lemming.dataplane.sai.Uint64List
	157, // 501: lemming.dataplane.sai.TunnelAttribute.decap_ttl_mode:type_name -> lemming.dataplane.sai.TunnelTtlMode
	151, // 502: lemming.dataplane.sai.TunnelAttribute.decap_dscp_mode:type_name -> lemming.dataplane.sai.TunnelDscpMode
	202, // 503: lemming.dataplane.sai.TunnelAttribute.term_table_entry_list:type_name -> lemming.dataplane.sai.Uint64List
	83,  // 504: lemming.dataplane.sai.TunnelAttribute.loopback_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	159, // 505: lemming.dataplane.sai.TunnelAttribute.vxlan_udp_sport_mode:type_name -> lemming.dataplane.sai.TunnelVxlanUdpSportMode
	202, // 506: lemming.dataplane.sai.TunnelAttribute.ipsec_sa_port_list:type_name -> lemming.dataplane.sai.Uint64List
	153, // 507: lemming.dataplane.sai.TunnelMapAttribute.type:type_name -> lemming.dataplane.sai.TunnelMapType
	202, // 508: lemming.dataplane.sai.TunnelMapAttribute.entry_list:type_name -> lemming.dataplane.sai.Uint64List
	153, // 509: lemming.dataplane.sai.TunnelMapEntryAttribute.tunnel_map_type:type_name -> lemming.dataplane.sai.TunnelMapType
	156, // 510: lemming.dataplane.sai.TunnelTermTableEntryAttribute.type:type_name -> lemming.dataplane.sai.TunnelTermTableEntryType
	158, // 511: lemming.dataplane.sai.TunnelTermTableEntryAttribute.tunnel_type:type_name -> lemming.dataplane.sai.TunnelType
	50,  // 512: lemming.dataplane.sai.TunnelTermTableEntryAttribute.ip_addr_family:type_name -> lemming.dataplane.sai.IpAddrFamily
	160, // 513: lemming.dataplane.sai.UdfAttribute.base:type_name -> lemming.dataplane.sai.UdfBase
	249, // 514: lemming.dataplane.sai.UdfAttribute.hash_mask:type_name -> lemming.dataplane.sai.Uint32List
	202, // 515: lemming.dataplane.sai.UdfGroupAttribute.udf_list:type_name -> lemming.dataplane.sai.Uint64List
	161, // 516: lemming.dataplane.sai.UdfGroupAttribute.type:type_name -> lemming.dataplane.sai.UdfGroupType
	168, // 517: lemming.dataplane.sai.UdfMatchAttribute.l2_type:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 518: lemming.dataplane.sai.UdfMatchAttribute.l3_type:type_name -> lemming.dataplane.sai.AclFieldData
	168, // 519: lemming.dataplane.sai.UdfMatchAttribute.gre_type:type_name -> lemming.dataplane.sai.AclFieldData
	83,  // 520: lemming.dataplane.sai.VirtualRouterAttribute.violation_ttl1_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	83,  // 521: lemming.dataplane.sai.VirtualRouterAttribute.violation_ip_options_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	83,  // 522: lemming.dataplane.sai.VirtualRouterAttribute.unknown_l3_multicast_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	202, // 523: lemming.dataplane.sai.VlanAttribute.member_list:type_name -> lemming.dataplane.sai.Uint64List
	163, // 524: lemming.dataplane.sai.VlanAttribute.ipv4_mcast_lookup_key_type:type_name -> lemming.dataplane.sai.VlanMcastLookupKeyType
	163, // 525: lemming.dataplane.sai.VlanAttribute.ipv6_mcast_lookup_key_type:type_name -> lemming.dataplane.sai.VlanMcastLookupKeyType
	162, // 526: lemming.dataplane.sai.VlanAttribute.unknown_unicast_flood_control_type:type_name -> lemming.dataplane.sai.VlanFloodControlType
	162, // 527: lemming.dataplane.sai.VlanAttribute.unknown_multicast_flood_control_type:type_name -> lemming.dataplane.sai.VlanFloodControlType
	162, // 528: lemming.dataplane.sai.VlanAttribute.broadcast_flood_control_type:type_name -> lemming.dataplane.sai.VlanFloodControlType
	202, // 529: lemming.dataplane.sai.VlanAttribute.tam_object:type_name -> lemming.dataplane.sai.Uint64List
	165, // 530: lemming.dataplane.sai.VlanMemberAttribute.vlan_tagging_mode:type_name -> lemming.dataplane.sai.VlanTaggingMode
	32,  // 531: lemming.dataplane.sai.WredAttribute.ecn_mark_mode:type_name -> lemming.dataplane.sai.EcnMarkMode
	532, // [532:532] is the sub-list for method output_type
	532, // [532:532] is the sub-list for method input_type
	532, // [532:532] is the sub-list for extension type_name
	532, // [532:532] is the sub-list for extension extendee
	0,   // [0:532] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_common_proto_init() }
func file_dataplane_standalone_proto_common_proto_init() {
	if File_dataplane_standalone_proto_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclActionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACLCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclFieldData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACLResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BfdSessionStateChangeNotificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FabricPortReachability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FdbEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FdbEventNotificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsegEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpmcEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecSaStatusNotificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2McEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UintMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McastFdbEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySidEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NatEntryData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NatEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighborEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortEyeValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortOperStatusNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PRBS_RXState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QOSMapParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QOSMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueDeadlockNotificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemPortConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMAC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLVEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclCounterAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRangeAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclBindPointTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclActionTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRangeTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint64List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclTableAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclTableGroupAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclTableGroupMemberAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BfdSessionAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgePortAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferPoolAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferProfileAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InDropReasonList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutDropReasonList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugCounterAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DtelAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DtelEventAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DtelIntSessionAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DtelQueueReportAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DtelReportSessionAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FdbEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FdbFlushAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FineGrainedHashFieldAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeHashFieldList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostifAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostifPacketAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostifTableEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostifTrapAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostifTrapGroupAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostifUserDefinedTrapAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressPriorityGroupAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsegEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpmcEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpmcGroupAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpmcGroupMemberAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecCipherList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecPortAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecSaAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsolationGroupAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsolationGroupMemberAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2McEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2McGroupAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2McGroupMemberAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LagMemberAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecCipherSuiteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecFlowAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecPortAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecSaAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecScAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*McastFdbEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirrorSessionAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyMacAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MySidEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NatEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NatZoneCounterAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeighborEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroupAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UintMapList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroupMapAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroupMemberAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketActionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicerAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortBreakoutModeTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortFecModeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortFecModeExtendedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortEyeValuesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortInterfaceTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortErrStatusList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortConnectorAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortPoolAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortSerdesAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosMapList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QosMapAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterInterfaceAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpfGroupAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpfGroupMemberAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SamplepacketAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerGroupAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TlvEntryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Srv6SidlistAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StpAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StpPortAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclResourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TlvTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BfdSessionOffloadTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsModeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemPortConfigList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchTunnelAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemPortAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamBindPointTypeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamCollectorAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamEventAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamEventActionAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamEventThresholdAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamIntAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamMathFuncAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamReportAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamTelemetryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamTelTypeAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamTransportAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelMapAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelMapEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelTermTableEntryAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UdfAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UdfGroupAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UdfMatchAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualRouterAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanMemberAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_common_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WredAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_common_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AclActionData_Uint)(nil),
		(*AclActionData_Int)(nil),
		(*AclActionData_Mac)(nil),
		(*AclActionData_Ip)(nil),
		(*AclActionData_Oid)(nil),
		(*AclActionData_Objlist)(nil),
		(*AclActionData_Ipaddr)(nil),
	}
	file_dataplane_standalone_proto_common_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AclFieldData_MaskUint)(nil),
		(*AclFieldData_MaskInt)(nil),
		(*AclFieldData_MaskMac)(nil),
		(*AclFieldData_MaskIp)(nil),
		(*AclFieldData_MaskList)(nil),
		(*AclFieldData_DataBool)(nil),
		(*AclFieldData_DataUint)(nil),
		(*AclFieldData_DataInt)(nil),
		(*AclFieldData_DataMac)(nil),
		(*AclFieldData_DataIp)(nil),
		(*AclFieldData_DataList)(nil),
	}
	file_dataplane_standalone_proto_common_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*NatEntryData_KeySrcIp)(nil),
		(*NatEntryData_KeyDstIp)(nil),
		(*NatEntryData_KeyProto)(nil),
		(*NatEntryData_KeyL4SrcPort)(nil),
		(*NatEntryData_KeyL4DstPort)(nil),
		(*NatEntryData_MaskSrcIp)(nil),
		(*NatEntryData_MaskDstIp)(nil),
		(*NatEntryData_MaskProto)(nil),
		(*NatEntryData_MaskL4SrcPort)(nil),
		(*NatEntryData_MaskL4DstPort)(nil),
	}
	file_dataplane_standalone_proto_common_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*TLVEntry_IngressNode)(nil),
		(*TLVEntry_EgressNode)(nil),
		(*TLVEntry_OpaqueContainer)(nil),
		(*TLVEntry_Hmac)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_common_proto_rawDesc,
			NumEnums:      166,
			NumMessages:   161,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dataplane_standalone_proto_common_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_common_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_common_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_common_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_common_proto = out.File
	file_dataplane_standalone_proto_common_proto_rawDesc = nil
	file_dataplane_standalone_proto_common_proto_goTypes = nil
	file_dataplane_standalone_proto_common_proto_depIdxs = nil
}
