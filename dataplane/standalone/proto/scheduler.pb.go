// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/scheduler.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SchedulerAttr int32

const (
	SchedulerAttr_SCHEDULER_ATTR_UNSPECIFIED              SchedulerAttr = 0
	SchedulerAttr_SCHEDULER_ATTR_SCHEDULING_TYPE          SchedulerAttr = 1
	SchedulerAttr_SCHEDULER_ATTR_SCHEDULING_WEIGHT        SchedulerAttr = 2
	SchedulerAttr_SCHEDULER_ATTR_METER_TYPE               SchedulerAttr = 3
	SchedulerAttr_SCHEDULER_ATTR_MIN_BANDWIDTH_RATE       SchedulerAttr = 4
	SchedulerAttr_SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE SchedulerAttr = 5
	SchedulerAttr_SCHEDULER_ATTR_MAX_BANDWIDTH_RATE       SchedulerAttr = 6
	SchedulerAttr_SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE SchedulerAttr = 7
)

// Enum value maps for SchedulerAttr.
var (
	SchedulerAttr_name = map[int32]string{
		0: "SCHEDULER_ATTR_UNSPECIFIED",
		1: "SCHEDULER_ATTR_SCHEDULING_TYPE",
		2: "SCHEDULER_ATTR_SCHEDULING_WEIGHT",
		3: "SCHEDULER_ATTR_METER_TYPE",
		4: "SCHEDULER_ATTR_MIN_BANDWIDTH_RATE",
		5: "SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE",
		6: "SCHEDULER_ATTR_MAX_BANDWIDTH_RATE",
		7: "SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE",
	}
	SchedulerAttr_value = map[string]int32{
		"SCHEDULER_ATTR_UNSPECIFIED":              0,
		"SCHEDULER_ATTR_SCHEDULING_TYPE":          1,
		"SCHEDULER_ATTR_SCHEDULING_WEIGHT":        2,
		"SCHEDULER_ATTR_METER_TYPE":               3,
		"SCHEDULER_ATTR_MIN_BANDWIDTH_RATE":       4,
		"SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE": 5,
		"SCHEDULER_ATTR_MAX_BANDWIDTH_RATE":       6,
		"SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE": 7,
	}
)

func (x SchedulerAttr) Enum() *SchedulerAttr {
	p := new(SchedulerAttr)
	*p = x
	return p
}

func (x SchedulerAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulerAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_scheduler_proto_enumTypes[0].Descriptor()
}

func (SchedulerAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_scheduler_proto_enumTypes[0]
}

func (x SchedulerAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulerAttr.Descriptor instead.
func (SchedulerAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_scheduler_proto_rawDescGZIP(), []int{0}
}

type CreateSchedulerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                uint64         `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	SchedulingType        SchedulingType `protobuf:"varint,2,opt,name=scheduling_type,json=schedulingType,proto3,enum=lemming.dataplane.sai.SchedulingType" json:"scheduling_type,omitempty"`
	SchedulingWeight      uint32         `protobuf:"varint,3,opt,name=scheduling_weight,json=schedulingWeight,proto3" json:"scheduling_weight,omitempty"`
	MeterType             MeterType      `protobuf:"varint,4,opt,name=meter_type,json=meterType,proto3,enum=lemming.dataplane.sai.MeterType" json:"meter_type,omitempty"`
	MinBandwidthRate      uint64         `protobuf:"varint,5,opt,name=min_bandwidth_rate,json=minBandwidthRate,proto3" json:"min_bandwidth_rate,omitempty"`
	MinBandwidthBurstRate uint64         `protobuf:"varint,6,opt,name=min_bandwidth_burst_rate,json=minBandwidthBurstRate,proto3" json:"min_bandwidth_burst_rate,omitempty"`
	MaxBandwidthRate      uint64         `protobuf:"varint,7,opt,name=max_bandwidth_rate,json=maxBandwidthRate,proto3" json:"max_bandwidth_rate,omitempty"`
	MaxBandwidthBurstRate uint64         `protobuf:"varint,8,opt,name=max_bandwidth_burst_rate,json=maxBandwidthBurstRate,proto3" json:"max_bandwidth_burst_rate,omitempty"`
}

func (x *CreateSchedulerRequest) Reset() {
	*x = CreateSchedulerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulerRequest) ProtoMessage() {}

func (x *CreateSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulerRequest.ProtoReflect.Descriptor instead.
func (*CreateSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSchedulerRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateSchedulerRequest) GetSchedulingType() SchedulingType {
	if x != nil {
		return x.SchedulingType
	}
	return SchedulingType_SCHEDULING_TYPE_UNSPECIFIED
}

func (x *CreateSchedulerRequest) GetSchedulingWeight() uint32 {
	if x != nil {
		return x.SchedulingWeight
	}
	return 0
}

func (x *CreateSchedulerRequest) GetMeterType() MeterType {
	if x != nil {
		return x.MeterType
	}
	return MeterType_METER_TYPE_UNSPECIFIED
}

func (x *CreateSchedulerRequest) GetMinBandwidthRate() uint64 {
	if x != nil {
		return x.MinBandwidthRate
	}
	return 0
}

func (x *CreateSchedulerRequest) GetMinBandwidthBurstRate() uint64 {
	if x != nil {
		return x.MinBandwidthBurstRate
	}
	return 0
}

func (x *CreateSchedulerRequest) GetMaxBandwidthRate() uint64 {
	if x != nil {
		return x.MaxBandwidthRate
	}
	return 0
}

func (x *CreateSchedulerRequest) GetMaxBandwidthBurstRate() uint64 {
	if x != nil {
		return x.MaxBandwidthBurstRate
	}
	return 0
}

type CreateSchedulerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateSchedulerResponse) Reset() {
	*x = CreateSchedulerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulerResponse) ProtoMessage() {}

func (x *CreateSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulerResponse.ProtoReflect.Descriptor instead.
func (*CreateSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSchedulerResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveSchedulerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveSchedulerRequest) Reset() {
	*x = RemoveSchedulerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSchedulerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSchedulerRequest) ProtoMessage() {}

func (x *RemoveSchedulerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSchedulerRequest.ProtoReflect.Descriptor instead.
func (*RemoveSchedulerRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveSchedulerRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveSchedulerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSchedulerResponse) Reset() {
	*x = RemoveSchedulerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSchedulerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSchedulerResponse) ProtoMessage() {}

func (x *RemoveSchedulerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSchedulerResponse.ProtoReflect.Descriptor instead.
func (*RemoveSchedulerResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_scheduler_proto_rawDescGZIP(), []int{3}
}

type SetSchedulerAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	// Types that are assignable to Attr:
	//
	//	*SetSchedulerAttributeRequest_SchedulingType
	//	*SetSchedulerAttributeRequest_SchedulingWeight
	//	*SetSchedulerAttributeRequest_MeterType
	//	*SetSchedulerAttributeRequest_MinBandwidthRate
	//	*SetSchedulerAttributeRequest_MinBandwidthBurstRate
	//	*SetSchedulerAttributeRequest_MaxBandwidthRate
	//	*SetSchedulerAttributeRequest_MaxBandwidthBurstRate
	Attr isSetSchedulerAttributeRequest_Attr `protobuf_oneof:"attr"`
}

func (x *SetSchedulerAttributeRequest) Reset() {
	*x = SetSchedulerAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSchedulerAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSchedulerAttributeRequest) ProtoMessage() {}

func (x *SetSchedulerAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSchedulerAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetSchedulerAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_scheduler_proto_rawDescGZIP(), []int{4}
}

func (x *SetSchedulerAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (m *SetSchedulerAttributeRequest) GetAttr() isSetSchedulerAttributeRequest_Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (x *SetSchedulerAttributeRequest) GetSchedulingType() SchedulingType {
	if x, ok := x.GetAttr().(*SetSchedulerAttributeRequest_SchedulingType); ok {
		return x.SchedulingType
	}
	return SchedulingType_SCHEDULING_TYPE_UNSPECIFIED
}

func (x *SetSchedulerAttributeRequest) GetSchedulingWeight() uint32 {
	if x, ok := x.GetAttr().(*SetSchedulerAttributeRequest_SchedulingWeight); ok {
		return x.SchedulingWeight
	}
	return 0
}

func (x *SetSchedulerAttributeRequest) GetMeterType() MeterType {
	if x, ok := x.GetAttr().(*SetSchedulerAttributeRequest_MeterType); ok {
		return x.MeterType
	}
	return MeterType_METER_TYPE_UNSPECIFIED
}

func (x *SetSchedulerAttributeRequest) GetMinBandwidthRate() uint64 {
	if x, ok := x.GetAttr().(*SetSchedulerAttributeRequest_MinBandwidthRate); ok {
		return x.MinBandwidthRate
	}
	return 0
}

func (x *SetSchedulerAttributeRequest) GetMinBandwidthBurstRate() uint64 {
	if x, ok := x.GetAttr().(*SetSchedulerAttributeRequest_MinBandwidthBurstRate); ok {
		return x.MinBandwidthBurstRate
	}
	return 0
}

func (x *SetSchedulerAttributeRequest) GetMaxBandwidthRate() uint64 {
	if x, ok := x.GetAttr().(*SetSchedulerAttributeRequest_MaxBandwidthRate); ok {
		return x.MaxBandwidthRate
	}
	return 0
}

func (x *SetSchedulerAttributeRequest) GetMaxBandwidthBurstRate() uint64 {
	if x, ok := x.GetAttr().(*SetSchedulerAttributeRequest_MaxBandwidthBurstRate); ok {
		return x.MaxBandwidthBurstRate
	}
	return 0
}

type isSetSchedulerAttributeRequest_Attr interface {
	isSetSchedulerAttributeRequest_Attr()
}

type SetSchedulerAttributeRequest_SchedulingType struct {
	SchedulingType SchedulingType `protobuf:"varint,2,opt,name=scheduling_type,json=schedulingType,proto3,enum=lemming.dataplane.sai.SchedulingType,oneof"`
}

type SetSchedulerAttributeRequest_SchedulingWeight struct {
	SchedulingWeight uint32 `protobuf:"varint,3,opt,name=scheduling_weight,json=schedulingWeight,proto3,oneof"`
}

type SetSchedulerAttributeRequest_MeterType struct {
	MeterType MeterType `protobuf:"varint,4,opt,name=meter_type,json=meterType,proto3,enum=lemming.dataplane.sai.MeterType,oneof"`
}

type SetSchedulerAttributeRequest_MinBandwidthRate struct {
	MinBandwidthRate uint64 `protobuf:"varint,5,opt,name=min_bandwidth_rate,json=minBandwidthRate,proto3,oneof"`
}

type SetSchedulerAttributeRequest_MinBandwidthBurstRate struct {
	MinBandwidthBurstRate uint64 `protobuf:"varint,6,opt,name=min_bandwidth_burst_rate,json=minBandwidthBurstRate,proto3,oneof"`
}

type SetSchedulerAttributeRequest_MaxBandwidthRate struct {
	MaxBandwidthRate uint64 `protobuf:"varint,7,opt,name=max_bandwidth_rate,json=maxBandwidthRate,proto3,oneof"`
}

type SetSchedulerAttributeRequest_MaxBandwidthBurstRate struct {
	MaxBandwidthBurstRate uint64 `protobuf:"varint,8,opt,name=max_bandwidth_burst_rate,json=maxBandwidthBurstRate,proto3,oneof"`
}

func (*SetSchedulerAttributeRequest_SchedulingType) isSetSchedulerAttributeRequest_Attr() {}

func (*SetSchedulerAttributeRequest_SchedulingWeight) isSetSchedulerAttributeRequest_Attr() {}

func (*SetSchedulerAttributeRequest_MeterType) isSetSchedulerAttributeRequest_Attr() {}

func (*SetSchedulerAttributeRequest_MinBandwidthRate) isSetSchedulerAttributeRequest_Attr() {}

func (*SetSchedulerAttributeRequest_MinBandwidthBurstRate) isSetSchedulerAttributeRequest_Attr() {}

func (*SetSchedulerAttributeRequest_MaxBandwidthRate) isSetSchedulerAttributeRequest_Attr() {}

func (*SetSchedulerAttributeRequest_MaxBandwidthBurstRate) isSetSchedulerAttributeRequest_Attr() {}

type SetSchedulerAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSchedulerAttributeResponse) Reset() {
	*x = SetSchedulerAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSchedulerAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSchedulerAttributeResponse) ProtoMessage() {}

func (x *SetSchedulerAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSchedulerAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetSchedulerAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_scheduler_proto_rawDescGZIP(), []int{5}
}

type GetSchedulerAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64          `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []SchedulerAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.SchedulerAttr" json:"attr_type,omitempty"`
}

func (x *GetSchedulerAttributeRequest) Reset() {
	*x = GetSchedulerAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerAttributeRequest) ProtoMessage() {}

func (x *GetSchedulerAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetSchedulerAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_scheduler_proto_rawDescGZIP(), []int{6}
}

func (x *GetSchedulerAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetSchedulerAttributeRequest) GetAttrType() []SchedulerAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetSchedulerAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr []*SchedulerAttribute `protobuf:"bytes,1,rep,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetSchedulerAttributeResponse) Reset() {
	*x = GetSchedulerAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerAttributeResponse) ProtoMessage() {}

func (x *GetSchedulerAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_scheduler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetSchedulerAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_scheduler_proto_rawDescGZIP(), []int{7}
}

func (x *GetSchedulerAttributeResponse) GetAttr() []*SchedulerAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_standalone_proto_scheduler_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_scheduler_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x1a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x03, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x4e, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3f, 0x0a, 0x0a,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6d,
	0x69, 0x6e, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x62, 0x75, 0x72,
	0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6d,
	0x69, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x75, 0x72, 0x73, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x42, 0x75, 0x72, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x22, 0x2b, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd2, 0x03, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x4d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x69, 0x6e, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x75, 0x72, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x10, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x42, 0x75, 0x72, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0xc0, 0x02, 0x0a, 0x0d, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x45,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x44,
	0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d,
	0x49, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x42, 0x55, 0x52,
	0x53, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x06,
	0x12, 0x2b, 0x0a, 0x27, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x44, 0x54, 0x48,
	0x5f, 0x42, 0x55, 0x52, 0x53, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x07, 0x32, 0x81, 0x04,
	0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x72, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x2d,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x72, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x12, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x33, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_scheduler_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_scheduler_proto_rawDescData = file_dataplane_standalone_proto_scheduler_proto_rawDesc
)

func file_dataplane_standalone_proto_scheduler_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_scheduler_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_scheduler_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_scheduler_proto_rawDescData
}

var file_dataplane_standalone_proto_scheduler_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_standalone_proto_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dataplane_standalone_proto_scheduler_proto_goTypes = []interface{}{
	(SchedulerAttr)(0),                    // 0: lemming.dataplane.sai.SchedulerAttr
	(*CreateSchedulerRequest)(nil),        // 1: lemming.dataplane.sai.CreateSchedulerRequest
	(*CreateSchedulerResponse)(nil),       // 2: lemming.dataplane.sai.CreateSchedulerResponse
	(*RemoveSchedulerRequest)(nil),        // 3: lemming.dataplane.sai.RemoveSchedulerRequest
	(*RemoveSchedulerResponse)(nil),       // 4: lemming.dataplane.sai.RemoveSchedulerResponse
	(*SetSchedulerAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetSchedulerAttributeRequest
	(*SetSchedulerAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetSchedulerAttributeResponse
	(*GetSchedulerAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetSchedulerAttributeRequest
	(*GetSchedulerAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetSchedulerAttributeResponse
	(SchedulingType)(0),                   // 9: lemming.dataplane.sai.SchedulingType
	(MeterType)(0),                        // 10: lemming.dataplane.sai.MeterType
	(*SchedulerAttribute)(nil),            // 11: lemming.dataplane.sai.SchedulerAttribute
}
var file_dataplane_standalone_proto_scheduler_proto_depIdxs = []int32{
	9,  // 0: lemming.dataplane.sai.CreateSchedulerRequest.scheduling_type:type_name -> lemming.dataplane.sai.SchedulingType
	10, // 1: lemming.dataplane.sai.CreateSchedulerRequest.meter_type:type_name -> lemming.dataplane.sai.MeterType
	9,  // 2: lemming.dataplane.sai.SetSchedulerAttributeRequest.scheduling_type:type_name -> lemming.dataplane.sai.SchedulingType
	10, // 3: lemming.dataplane.sai.SetSchedulerAttributeRequest.meter_type:type_name -> lemming.dataplane.sai.MeterType
	0,  // 4: lemming.dataplane.sai.GetSchedulerAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.SchedulerAttr
	11, // 5: lemming.dataplane.sai.GetSchedulerAttributeResponse.attr:type_name -> lemming.dataplane.sai.SchedulerAttribute
	1,  // 6: lemming.dataplane.sai.Scheduler.CreateScheduler:input_type -> lemming.dataplane.sai.CreateSchedulerRequest
	3,  // 7: lemming.dataplane.sai.Scheduler.RemoveScheduler:input_type -> lemming.dataplane.sai.RemoveSchedulerRequest
	5,  // 8: lemming.dataplane.sai.Scheduler.SetSchedulerAttribute:input_type -> lemming.dataplane.sai.SetSchedulerAttributeRequest
	7,  // 9: lemming.dataplane.sai.Scheduler.GetSchedulerAttribute:input_type -> lemming.dataplane.sai.GetSchedulerAttributeRequest
	2,  // 10: lemming.dataplane.sai.Scheduler.CreateScheduler:output_type -> lemming.dataplane.sai.CreateSchedulerResponse
	4,  // 11: lemming.dataplane.sai.Scheduler.RemoveScheduler:output_type -> lemming.dataplane.sai.RemoveSchedulerResponse
	6,  // 12: lemming.dataplane.sai.Scheduler.SetSchedulerAttribute:output_type -> lemming.dataplane.sai.SetSchedulerAttributeResponse
	8,  // 13: lemming.dataplane.sai.Scheduler.GetSchedulerAttribute:output_type -> lemming.dataplane.sai.GetSchedulerAttributeResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_scheduler_proto_init() }
func file_dataplane_standalone_proto_scheduler_proto_init() {
	if File_dataplane_standalone_proto_scheduler_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_scheduler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchedulerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_scheduler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchedulerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_scheduler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSchedulerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_scheduler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSchedulerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_scheduler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSchedulerAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_scheduler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSchedulerAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_scheduler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_scheduler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_scheduler_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SetSchedulerAttributeRequest_SchedulingType)(nil),
		(*SetSchedulerAttributeRequest_SchedulingWeight)(nil),
		(*SetSchedulerAttributeRequest_MeterType)(nil),
		(*SetSchedulerAttributeRequest_MinBandwidthRate)(nil),
		(*SetSchedulerAttributeRequest_MinBandwidthBurstRate)(nil),
		(*SetSchedulerAttributeRequest_MaxBandwidthRate)(nil),
		(*SetSchedulerAttributeRequest_MaxBandwidthBurstRate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_scheduler_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_scheduler_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_scheduler_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_scheduler_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_scheduler_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_scheduler_proto = out.File
	file_dataplane_standalone_proto_scheduler_proto_rawDesc = nil
	file_dataplane_standalone_proto_scheduler_proto_goTypes = nil
	file_dataplane_standalone_proto_scheduler_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerClient interface {
	CreateScheduler(ctx context.Context, in *CreateSchedulerRequest, opts ...grpc.CallOption) (*CreateSchedulerResponse, error)
	RemoveScheduler(ctx context.Context, in *RemoveSchedulerRequest, opts ...grpc.CallOption) (*RemoveSchedulerResponse, error)
	SetSchedulerAttribute(ctx context.Context, in *SetSchedulerAttributeRequest, opts ...grpc.CallOption) (*SetSchedulerAttributeResponse, error)
	GetSchedulerAttribute(ctx context.Context, in *GetSchedulerAttributeRequest, opts ...grpc.CallOption) (*GetSchedulerAttributeResponse, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) CreateScheduler(ctx context.Context, in *CreateSchedulerRequest, opts ...grpc.CallOption) (*CreateSchedulerResponse, error) {
	out := new(CreateSchedulerResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Scheduler/CreateScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) RemoveScheduler(ctx context.Context, in *RemoveSchedulerRequest, opts ...grpc.CallOption) (*RemoveSchedulerResponse, error) {
	out := new(RemoveSchedulerResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Scheduler/RemoveScheduler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SetSchedulerAttribute(ctx context.Context, in *SetSchedulerAttributeRequest, opts ...grpc.CallOption) (*SetSchedulerAttributeResponse, error) {
	out := new(SetSchedulerAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Scheduler/SetSchedulerAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetSchedulerAttribute(ctx context.Context, in *GetSchedulerAttributeRequest, opts ...grpc.CallOption) (*GetSchedulerAttributeResponse, error) {
	out := new(GetSchedulerAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Scheduler/GetSchedulerAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
type SchedulerServer interface {
	CreateScheduler(context.Context, *CreateSchedulerRequest) (*CreateSchedulerResponse, error)
	RemoveScheduler(context.Context, *RemoveSchedulerRequest) (*RemoveSchedulerResponse, error)
	SetSchedulerAttribute(context.Context, *SetSchedulerAttributeRequest) (*SetSchedulerAttributeResponse, error)
	GetSchedulerAttribute(context.Context, *GetSchedulerAttributeRequest) (*GetSchedulerAttributeResponse, error)
}

// UnimplementedSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerServer struct {
}

func (*UnimplementedSchedulerServer) CreateScheduler(context.Context, *CreateSchedulerRequest) (*CreateSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduler not implemented")
}
func (*UnimplementedSchedulerServer) RemoveScheduler(context.Context, *RemoveSchedulerRequest) (*RemoveSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveScheduler not implemented")
}
func (*UnimplementedSchedulerServer) SetSchedulerAttribute(context.Context, *SetSchedulerAttributeRequest) (*SetSchedulerAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchedulerAttribute not implemented")
}
func (*UnimplementedSchedulerServer) GetSchedulerAttribute(context.Context, *GetSchedulerAttributeRequest) (*GetSchedulerAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerAttribute not implemented")
}

func RegisterSchedulerServer(s *grpc.Server, srv SchedulerServer) {
	s.RegisterService(&_Scheduler_serviceDesc, srv)
}

func _Scheduler_CreateScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).CreateScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Scheduler/CreateScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).CreateScheduler(ctx, req.(*CreateSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_RemoveScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RemoveScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Scheduler/RemoveScheduler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RemoveScheduler(ctx, req.(*RemoveSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SetSchedulerAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSchedulerAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SetSchedulerAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Scheduler/SetSchedulerAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SetSchedulerAttribute(ctx, req.(*SetSchedulerAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetSchedulerAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulerAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetSchedulerAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Scheduler/GetSchedulerAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetSchedulerAttribute(ctx, req.(*GetSchedulerAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScheduler",
			Handler:    _Scheduler_CreateScheduler_Handler,
		},
		{
			MethodName: "RemoveScheduler",
			Handler:    _Scheduler_RemoveScheduler_Handler,
		},
		{
			MethodName: "SetSchedulerAttribute",
			Handler:    _Scheduler_SetSchedulerAttribute_Handler,
		},
		{
			MethodName: "GetSchedulerAttribute",
			Handler:    _Scheduler_GetSchedulerAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/scheduler.proto",
}
