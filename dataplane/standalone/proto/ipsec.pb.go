// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/ipsec.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpsecAttr int32

const (
	IpsecAttr_IPSEC_ATTR_UNSPECIFIED                                IpsecAttr = 0
	IpsecAttr_IPSEC_ATTR_TERM_REMOTE_IP_MATCH_SUPPORTED             IpsecAttr = 1
	IpsecAttr_IPSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED       IpsecAttr = 2
	IpsecAttr_IPSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED IpsecAttr = 3
	IpsecAttr_IPSEC_ATTR_STATS_MODE_READ_SUPPORTED                  IpsecAttr = 4
	IpsecAttr_IPSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED            IpsecAttr = 5
	IpsecAttr_IPSEC_ATTR_SN_32BIT_SUPPORTED                         IpsecAttr = 6
	IpsecAttr_IPSEC_ATTR_ESN_64BIT_SUPPORTED                        IpsecAttr = 7
	IpsecAttr_IPSEC_ATTR_SUPPORTED_CIPHER_LIST                      IpsecAttr = 8
	IpsecAttr_IPSEC_ATTR_SYSTEM_SIDE_MTU                            IpsecAttr = 9
	IpsecAttr_IPSEC_ATTR_WARM_BOOT_SUPPORTED                        IpsecAttr = 10
	IpsecAttr_IPSEC_ATTR_WARM_BOOT_ENABLE                           IpsecAttr = 11
	IpsecAttr_IPSEC_ATTR_EXTERNAL_SA_INDEX_ENABLE                   IpsecAttr = 12
	IpsecAttr_IPSEC_ATTR_CTAG_TPID                                  IpsecAttr = 13
	IpsecAttr_IPSEC_ATTR_STAG_TPID                                  IpsecAttr = 14
	IpsecAttr_IPSEC_ATTR_MAX_VLAN_TAGS_PARSED                       IpsecAttr = 15
	IpsecAttr_IPSEC_ATTR_OCTET_COUNT_HIGH_WATERMARK                 IpsecAttr = 16
	IpsecAttr_IPSEC_ATTR_OCTET_COUNT_LOW_WATERMARK                  IpsecAttr = 17
	IpsecAttr_IPSEC_ATTR_STATS_MODE                                 IpsecAttr = 18
	IpsecAttr_IPSEC_ATTR_AVAILABLE_IPSEC_SA                         IpsecAttr = 19
	IpsecAttr_IPSEC_ATTR_SA_LIST                                    IpsecAttr = 20
)

// Enum value maps for IpsecAttr.
var (
	IpsecAttr_name = map[int32]string{
		0:  "IPSEC_ATTR_UNSPECIFIED",
		1:  "IPSEC_ATTR_TERM_REMOTE_IP_MATCH_SUPPORTED",
		2:  "IPSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED",
		3:  "IPSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED",
		4:  "IPSEC_ATTR_STATS_MODE_READ_SUPPORTED",
		5:  "IPSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED",
		6:  "IPSEC_ATTR_SN_32BIT_SUPPORTED",
		7:  "IPSEC_ATTR_ESN_64BIT_SUPPORTED",
		8:  "IPSEC_ATTR_SUPPORTED_CIPHER_LIST",
		9:  "IPSEC_ATTR_SYSTEM_SIDE_MTU",
		10: "IPSEC_ATTR_WARM_BOOT_SUPPORTED",
		11: "IPSEC_ATTR_WARM_BOOT_ENABLE",
		12: "IPSEC_ATTR_EXTERNAL_SA_INDEX_ENABLE",
		13: "IPSEC_ATTR_CTAG_TPID",
		14: "IPSEC_ATTR_STAG_TPID",
		15: "IPSEC_ATTR_MAX_VLAN_TAGS_PARSED",
		16: "IPSEC_ATTR_OCTET_COUNT_HIGH_WATERMARK",
		17: "IPSEC_ATTR_OCTET_COUNT_LOW_WATERMARK",
		18: "IPSEC_ATTR_STATS_MODE",
		19: "IPSEC_ATTR_AVAILABLE_IPSEC_SA",
		20: "IPSEC_ATTR_SA_LIST",
	}
	IpsecAttr_value = map[string]int32{
		"IPSEC_ATTR_UNSPECIFIED":                                0,
		"IPSEC_ATTR_TERM_REMOTE_IP_MATCH_SUPPORTED":             1,
		"IPSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED":       2,
		"IPSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED": 3,
		"IPSEC_ATTR_STATS_MODE_READ_SUPPORTED":                  4,
		"IPSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED":            5,
		"IPSEC_ATTR_SN_32BIT_SUPPORTED":                         6,
		"IPSEC_ATTR_ESN_64BIT_SUPPORTED":                        7,
		"IPSEC_ATTR_SUPPORTED_CIPHER_LIST":                      8,
		"IPSEC_ATTR_SYSTEM_SIDE_MTU":                            9,
		"IPSEC_ATTR_WARM_BOOT_SUPPORTED":                        10,
		"IPSEC_ATTR_WARM_BOOT_ENABLE":                           11,
		"IPSEC_ATTR_EXTERNAL_SA_INDEX_ENABLE":                   12,
		"IPSEC_ATTR_CTAG_TPID":                                  13,
		"IPSEC_ATTR_STAG_TPID":                                  14,
		"IPSEC_ATTR_MAX_VLAN_TAGS_PARSED":                       15,
		"IPSEC_ATTR_OCTET_COUNT_HIGH_WATERMARK":                 16,
		"IPSEC_ATTR_OCTET_COUNT_LOW_WATERMARK":                  17,
		"IPSEC_ATTR_STATS_MODE":                                 18,
		"IPSEC_ATTR_AVAILABLE_IPSEC_SA":                         19,
		"IPSEC_ATTR_SA_LIST":                                    20,
	}
)

func (x IpsecAttr) Enum() *IpsecAttr {
	p := new(IpsecAttr)
	*p = x
	return p
}

func (x IpsecAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpsecAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_ipsec_proto_enumTypes[0].Descriptor()
}

func (IpsecAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_ipsec_proto_enumTypes[0]
}

func (x IpsecAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpsecAttr.Descriptor instead.
func (IpsecAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{0}
}

type IpsecPortAttr int32

const (
	IpsecPortAttr_IPSEC_PORT_ATTR_UNSPECIFIED                 IpsecPortAttr = 0
	IpsecPortAttr_IPSEC_PORT_ATTR_PORT_ID                     IpsecPortAttr = 1
	IpsecPortAttr_IPSEC_PORT_ATTR_CTAG_ENABLE                 IpsecPortAttr = 2
	IpsecPortAttr_IPSEC_PORT_ATTR_STAG_ENABLE                 IpsecPortAttr = 3
	IpsecPortAttr_IPSEC_PORT_ATTR_NATIVE_VLAN_ID              IpsecPortAttr = 4
	IpsecPortAttr_IPSEC_PORT_ATTR_VRF_FROM_PACKET_VLAN_ENABLE IpsecPortAttr = 5
	IpsecPortAttr_IPSEC_PORT_ATTR_SWITCH_SWITCHING_MODE       IpsecPortAttr = 6
)

// Enum value maps for IpsecPortAttr.
var (
	IpsecPortAttr_name = map[int32]string{
		0: "IPSEC_PORT_ATTR_UNSPECIFIED",
		1: "IPSEC_PORT_ATTR_PORT_ID",
		2: "IPSEC_PORT_ATTR_CTAG_ENABLE",
		3: "IPSEC_PORT_ATTR_STAG_ENABLE",
		4: "IPSEC_PORT_ATTR_NATIVE_VLAN_ID",
		5: "IPSEC_PORT_ATTR_VRF_FROM_PACKET_VLAN_ENABLE",
		6: "IPSEC_PORT_ATTR_SWITCH_SWITCHING_MODE",
	}
	IpsecPortAttr_value = map[string]int32{
		"IPSEC_PORT_ATTR_UNSPECIFIED":                 0,
		"IPSEC_PORT_ATTR_PORT_ID":                     1,
		"IPSEC_PORT_ATTR_CTAG_ENABLE":                 2,
		"IPSEC_PORT_ATTR_STAG_ENABLE":                 3,
		"IPSEC_PORT_ATTR_NATIVE_VLAN_ID":              4,
		"IPSEC_PORT_ATTR_VRF_FROM_PACKET_VLAN_ENABLE": 5,
		"IPSEC_PORT_ATTR_SWITCH_SWITCHING_MODE":       6,
	}
)

func (x IpsecPortAttr) Enum() *IpsecPortAttr {
	p := new(IpsecPortAttr)
	*p = x
	return p
}

func (x IpsecPortAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpsecPortAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_ipsec_proto_enumTypes[1].Descriptor()
}

func (IpsecPortAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_ipsec_proto_enumTypes[1]
}

func (x IpsecPortAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpsecPortAttr.Descriptor instead.
func (IpsecPortAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{1}
}

type IpsecSaAttr int32

const (
	IpsecSaAttr_IPSEC_SA_ATTR_UNSPECIFIED                    IpsecSaAttr = 0
	IpsecSaAttr_IPSEC_SA_ATTR_IPSEC_DIRECTION                IpsecSaAttr = 1
	IpsecSaAttr_IPSEC_SA_ATTR_IPSEC_ID                       IpsecSaAttr = 2
	IpsecSaAttr_IPSEC_SA_ATTR_OCTET_COUNT_STATUS             IpsecSaAttr = 3
	IpsecSaAttr_IPSEC_SA_ATTR_EXTERNAL_SA_INDEX              IpsecSaAttr = 4
	IpsecSaAttr_IPSEC_SA_ATTR_SA_INDEX                       IpsecSaAttr = 5
	IpsecSaAttr_IPSEC_SA_ATTR_IPSEC_PORT_LIST                IpsecSaAttr = 6
	IpsecSaAttr_IPSEC_SA_ATTR_IPSEC_SPI                      IpsecSaAttr = 7
	IpsecSaAttr_IPSEC_SA_ATTR_IPSEC_ESN_ENABLE               IpsecSaAttr = 8
	IpsecSaAttr_IPSEC_SA_ATTR_IPSEC_CIPHER                   IpsecSaAttr = 9
	IpsecSaAttr_IPSEC_SA_ATTR_ENCRYPT_KEY                    IpsecSaAttr = 10
	IpsecSaAttr_IPSEC_SA_ATTR_SALT                           IpsecSaAttr = 11
	IpsecSaAttr_IPSEC_SA_ATTR_AUTH_KEY                       IpsecSaAttr = 12
	IpsecSaAttr_IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_ENABLE IpsecSaAttr = 13
	IpsecSaAttr_IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_WINDOW IpsecSaAttr = 14
	IpsecSaAttr_IPSEC_SA_ATTR_TERM_DST_IP                    IpsecSaAttr = 15
	IpsecSaAttr_IPSEC_SA_ATTR_TERM_VLAN_ID_ENABLE            IpsecSaAttr = 16
	IpsecSaAttr_IPSEC_SA_ATTR_TERM_VLAN_ID                   IpsecSaAttr = 17
	IpsecSaAttr_IPSEC_SA_ATTR_TERM_SRC_IP_ENABLE             IpsecSaAttr = 18
	IpsecSaAttr_IPSEC_SA_ATTR_TERM_SRC_IP                    IpsecSaAttr = 19
	IpsecSaAttr_IPSEC_SA_ATTR_EGRESS_ESN                     IpsecSaAttr = 20
	IpsecSaAttr_IPSEC_SA_ATTR_MINIMUM_INGRESS_ESN            IpsecSaAttr = 21
)

// Enum value maps for IpsecSaAttr.
var (
	IpsecSaAttr_name = map[int32]string{
		0:  "IPSEC_SA_ATTR_UNSPECIFIED",
		1:  "IPSEC_SA_ATTR_IPSEC_DIRECTION",
		2:  "IPSEC_SA_ATTR_IPSEC_ID",
		3:  "IPSEC_SA_ATTR_OCTET_COUNT_STATUS",
		4:  "IPSEC_SA_ATTR_EXTERNAL_SA_INDEX",
		5:  "IPSEC_SA_ATTR_SA_INDEX",
		6:  "IPSEC_SA_ATTR_IPSEC_PORT_LIST",
		7:  "IPSEC_SA_ATTR_IPSEC_SPI",
		8:  "IPSEC_SA_ATTR_IPSEC_ESN_ENABLE",
		9:  "IPSEC_SA_ATTR_IPSEC_CIPHER",
		10: "IPSEC_SA_ATTR_ENCRYPT_KEY",
		11: "IPSEC_SA_ATTR_SALT",
		12: "IPSEC_SA_ATTR_AUTH_KEY",
		13: "IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_ENABLE",
		14: "IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_WINDOW",
		15: "IPSEC_SA_ATTR_TERM_DST_IP",
		16: "IPSEC_SA_ATTR_TERM_VLAN_ID_ENABLE",
		17: "IPSEC_SA_ATTR_TERM_VLAN_ID",
		18: "IPSEC_SA_ATTR_TERM_SRC_IP_ENABLE",
		19: "IPSEC_SA_ATTR_TERM_SRC_IP",
		20: "IPSEC_SA_ATTR_EGRESS_ESN",
		21: "IPSEC_SA_ATTR_MINIMUM_INGRESS_ESN",
	}
	IpsecSaAttr_value = map[string]int32{
		"IPSEC_SA_ATTR_UNSPECIFIED":                    0,
		"IPSEC_SA_ATTR_IPSEC_DIRECTION":                1,
		"IPSEC_SA_ATTR_IPSEC_ID":                       2,
		"IPSEC_SA_ATTR_OCTET_COUNT_STATUS":             3,
		"IPSEC_SA_ATTR_EXTERNAL_SA_INDEX":              4,
		"IPSEC_SA_ATTR_SA_INDEX":                       5,
		"IPSEC_SA_ATTR_IPSEC_PORT_LIST":                6,
		"IPSEC_SA_ATTR_IPSEC_SPI":                      7,
		"IPSEC_SA_ATTR_IPSEC_ESN_ENABLE":               8,
		"IPSEC_SA_ATTR_IPSEC_CIPHER":                   9,
		"IPSEC_SA_ATTR_ENCRYPT_KEY":                    10,
		"IPSEC_SA_ATTR_SALT":                           11,
		"IPSEC_SA_ATTR_AUTH_KEY":                       12,
		"IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_ENABLE": 13,
		"IPSEC_SA_ATTR_IPSEC_REPLAY_PROTECTION_WINDOW": 14,
		"IPSEC_SA_ATTR_TERM_DST_IP":                    15,
		"IPSEC_SA_ATTR_TERM_VLAN_ID_ENABLE":            16,
		"IPSEC_SA_ATTR_TERM_VLAN_ID":                   17,
		"IPSEC_SA_ATTR_TERM_SRC_IP_ENABLE":             18,
		"IPSEC_SA_ATTR_TERM_SRC_IP":                    19,
		"IPSEC_SA_ATTR_EGRESS_ESN":                     20,
		"IPSEC_SA_ATTR_MINIMUM_INGRESS_ESN":            21,
	}
)

func (x IpsecSaAttr) Enum() *IpsecSaAttr {
	p := new(IpsecSaAttr)
	*p = x
	return p
}

func (x IpsecSaAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpsecSaAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_ipsec_proto_enumTypes[2].Descriptor()
}

func (IpsecSaAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_ipsec_proto_enumTypes[2]
}

func (x IpsecSaAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpsecSaAttr.Descriptor instead.
func (IpsecSaAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{2}
}

type CreateIpsecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                  uint64     `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	WarmBootEnable          *bool      `protobuf:"varint,2,opt,name=warm_boot_enable,json=warmBootEnable,proto3,oneof" json:"warm_boot_enable,omitempty"`
	ExternalSaIndexEnable   *bool      `protobuf:"varint,3,opt,name=external_sa_index_enable,json=externalSaIndexEnable,proto3,oneof" json:"external_sa_index_enable,omitempty"`
	CtagTpid                *uint32    `protobuf:"varint,4,opt,name=ctag_tpid,json=ctagTpid,proto3,oneof" json:"ctag_tpid,omitempty"`
	StagTpid                *uint32    `protobuf:"varint,5,opt,name=stag_tpid,json=stagTpid,proto3,oneof" json:"stag_tpid,omitempty"`
	MaxVlanTagsParsed       *uint32    `protobuf:"varint,6,opt,name=max_vlan_tags_parsed,json=maxVlanTagsParsed,proto3,oneof" json:"max_vlan_tags_parsed,omitempty"`
	OctetCountHighWatermark *uint64    `protobuf:"varint,7,opt,name=octet_count_high_watermark,json=octetCountHighWatermark,proto3,oneof" json:"octet_count_high_watermark,omitempty"`
	OctetCountLowWatermark  *uint64    `protobuf:"varint,8,opt,name=octet_count_low_watermark,json=octetCountLowWatermark,proto3,oneof" json:"octet_count_low_watermark,omitempty"`
	StatsMode               *StatsMode `protobuf:"varint,9,opt,name=stats_mode,json=statsMode,proto3,enum=lemming.dataplane.sai.StatsMode,oneof" json:"stats_mode,omitempty"`
}

func (x *CreateIpsecRequest) Reset() {
	*x = CreateIpsecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIpsecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIpsecRequest) ProtoMessage() {}

func (x *CreateIpsecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIpsecRequest.ProtoReflect.Descriptor instead.
func (*CreateIpsecRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{0}
}

func (x *CreateIpsecRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateIpsecRequest) GetWarmBootEnable() bool {
	if x != nil && x.WarmBootEnable != nil {
		return *x.WarmBootEnable
	}
	return false
}

func (x *CreateIpsecRequest) GetExternalSaIndexEnable() bool {
	if x != nil && x.ExternalSaIndexEnable != nil {
		return *x.ExternalSaIndexEnable
	}
	return false
}

func (x *CreateIpsecRequest) GetCtagTpid() uint32 {
	if x != nil && x.CtagTpid != nil {
		return *x.CtagTpid
	}
	return 0
}

func (x *CreateIpsecRequest) GetStagTpid() uint32 {
	if x != nil && x.StagTpid != nil {
		return *x.StagTpid
	}
	return 0
}

func (x *CreateIpsecRequest) GetMaxVlanTagsParsed() uint32 {
	if x != nil && x.MaxVlanTagsParsed != nil {
		return *x.MaxVlanTagsParsed
	}
	return 0
}

func (x *CreateIpsecRequest) GetOctetCountHighWatermark() uint64 {
	if x != nil && x.OctetCountHighWatermark != nil {
		return *x.OctetCountHighWatermark
	}
	return 0
}

func (x *CreateIpsecRequest) GetOctetCountLowWatermark() uint64 {
	if x != nil && x.OctetCountLowWatermark != nil {
		return *x.OctetCountLowWatermark
	}
	return 0
}

func (x *CreateIpsecRequest) GetStatsMode() StatsMode {
	if x != nil && x.StatsMode != nil {
		return *x.StatsMode
	}
	return StatsMode_STATS_MODE_UNSPECIFIED
}

type CreateIpsecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateIpsecResponse) Reset() {
	*x = CreateIpsecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIpsecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIpsecResponse) ProtoMessage() {}

func (x *CreateIpsecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIpsecResponse.ProtoReflect.Descriptor instead.
func (*CreateIpsecResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIpsecResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveIpsecRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveIpsecRequest) Reset() {
	*x = RemoveIpsecRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIpsecRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIpsecRequest) ProtoMessage() {}

func (x *RemoveIpsecRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIpsecRequest.ProtoReflect.Descriptor instead.
func (*RemoveIpsecRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveIpsecRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveIpsecResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveIpsecResponse) Reset() {
	*x = RemoveIpsecResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIpsecResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIpsecResponse) ProtoMessage() {}

func (x *RemoveIpsecResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIpsecResponse.ProtoReflect.Descriptor instead.
func (*RemoveIpsecResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{3}
}

type SetIpsecAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                     uint64     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	WarmBootEnable          *bool      `protobuf:"varint,2,opt,name=warm_boot_enable,json=warmBootEnable,proto3,oneof" json:"warm_boot_enable,omitempty"`
	CtagTpid                *uint32    `protobuf:"varint,3,opt,name=ctag_tpid,json=ctagTpid,proto3,oneof" json:"ctag_tpid,omitempty"`
	StagTpid                *uint32    `protobuf:"varint,4,opt,name=stag_tpid,json=stagTpid,proto3,oneof" json:"stag_tpid,omitempty"`
	MaxVlanTagsParsed       *uint32    `protobuf:"varint,5,opt,name=max_vlan_tags_parsed,json=maxVlanTagsParsed,proto3,oneof" json:"max_vlan_tags_parsed,omitempty"`
	OctetCountHighWatermark *uint64    `protobuf:"varint,6,opt,name=octet_count_high_watermark,json=octetCountHighWatermark,proto3,oneof" json:"octet_count_high_watermark,omitempty"`
	OctetCountLowWatermark  *uint64    `protobuf:"varint,7,opt,name=octet_count_low_watermark,json=octetCountLowWatermark,proto3,oneof" json:"octet_count_low_watermark,omitempty"`
	StatsMode               *StatsMode `protobuf:"varint,8,opt,name=stats_mode,json=statsMode,proto3,enum=lemming.dataplane.sai.StatsMode,oneof" json:"stats_mode,omitempty"`
}

func (x *SetIpsecAttributeRequest) Reset() {
	*x = SetIpsecAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIpsecAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIpsecAttributeRequest) ProtoMessage() {}

func (x *SetIpsecAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIpsecAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetIpsecAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{4}
}

func (x *SetIpsecAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetIpsecAttributeRequest) GetWarmBootEnable() bool {
	if x != nil && x.WarmBootEnable != nil {
		return *x.WarmBootEnable
	}
	return false
}

func (x *SetIpsecAttributeRequest) GetCtagTpid() uint32 {
	if x != nil && x.CtagTpid != nil {
		return *x.CtagTpid
	}
	return 0
}

func (x *SetIpsecAttributeRequest) GetStagTpid() uint32 {
	if x != nil && x.StagTpid != nil {
		return *x.StagTpid
	}
	return 0
}

func (x *SetIpsecAttributeRequest) GetMaxVlanTagsParsed() uint32 {
	if x != nil && x.MaxVlanTagsParsed != nil {
		return *x.MaxVlanTagsParsed
	}
	return 0
}

func (x *SetIpsecAttributeRequest) GetOctetCountHighWatermark() uint64 {
	if x != nil && x.OctetCountHighWatermark != nil {
		return *x.OctetCountHighWatermark
	}
	return 0
}

func (x *SetIpsecAttributeRequest) GetOctetCountLowWatermark() uint64 {
	if x != nil && x.OctetCountLowWatermark != nil {
		return *x.OctetCountLowWatermark
	}
	return 0
}

func (x *SetIpsecAttributeRequest) GetStatsMode() StatsMode {
	if x != nil && x.StatsMode != nil {
		return *x.StatsMode
	}
	return StatsMode_STATS_MODE_UNSPECIFIED
}

type SetIpsecAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetIpsecAttributeResponse) Reset() {
	*x = SetIpsecAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIpsecAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIpsecAttributeResponse) ProtoMessage() {}

func (x *SetIpsecAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIpsecAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetIpsecAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{5}
}

type GetIpsecAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64      `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []IpsecAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.IpsecAttr" json:"attr_type,omitempty"`
}

func (x *GetIpsecAttributeRequest) Reset() {
	*x = GetIpsecAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpsecAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpsecAttributeRequest) ProtoMessage() {}

func (x *GetIpsecAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpsecAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetIpsecAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{6}
}

func (x *GetIpsecAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetIpsecAttributeRequest) GetAttrType() []IpsecAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetIpsecAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *IpsecAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetIpsecAttributeResponse) Reset() {
	*x = GetIpsecAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpsecAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpsecAttributeResponse) ProtoMessage() {}

func (x *GetIpsecAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpsecAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetIpsecAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{7}
}

func (x *GetIpsecAttributeResponse) GetAttr() *IpsecAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateIpsecPortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                  uint64               `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	PortId                  *uint64              `protobuf:"varint,2,opt,name=port_id,json=portId,proto3,oneof" json:"port_id,omitempty"`
	CtagEnable              *bool                `protobuf:"varint,3,opt,name=ctag_enable,json=ctagEnable,proto3,oneof" json:"ctag_enable,omitempty"`
	StagEnable              *bool                `protobuf:"varint,4,opt,name=stag_enable,json=stagEnable,proto3,oneof" json:"stag_enable,omitempty"`
	NativeVlanId            *uint32              `protobuf:"varint,5,opt,name=native_vlan_id,json=nativeVlanId,proto3,oneof" json:"native_vlan_id,omitempty"`
	VrfFromPacketVlanEnable *bool                `protobuf:"varint,6,opt,name=vrf_from_packet_vlan_enable,json=vrfFromPacketVlanEnable,proto3,oneof" json:"vrf_from_packet_vlan_enable,omitempty"`
	SwitchSwitchingMode     *SwitchSwitchingMode `protobuf:"varint,7,opt,name=switch_switching_mode,json=switchSwitchingMode,proto3,enum=lemming.dataplane.sai.SwitchSwitchingMode,oneof" json:"switch_switching_mode,omitempty"`
}

func (x *CreateIpsecPortRequest) Reset() {
	*x = CreateIpsecPortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIpsecPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIpsecPortRequest) ProtoMessage() {}

func (x *CreateIpsecPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIpsecPortRequest.ProtoReflect.Descriptor instead.
func (*CreateIpsecPortRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{8}
}

func (x *CreateIpsecPortRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateIpsecPortRequest) GetPortId() uint64 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

func (x *CreateIpsecPortRequest) GetCtagEnable() bool {
	if x != nil && x.CtagEnable != nil {
		return *x.CtagEnable
	}
	return false
}

func (x *CreateIpsecPortRequest) GetStagEnable() bool {
	if x != nil && x.StagEnable != nil {
		return *x.StagEnable
	}
	return false
}

func (x *CreateIpsecPortRequest) GetNativeVlanId() uint32 {
	if x != nil && x.NativeVlanId != nil {
		return *x.NativeVlanId
	}
	return 0
}

func (x *CreateIpsecPortRequest) GetVrfFromPacketVlanEnable() bool {
	if x != nil && x.VrfFromPacketVlanEnable != nil {
		return *x.VrfFromPacketVlanEnable
	}
	return false
}

func (x *CreateIpsecPortRequest) GetSwitchSwitchingMode() SwitchSwitchingMode {
	if x != nil && x.SwitchSwitchingMode != nil {
		return *x.SwitchSwitchingMode
	}
	return SwitchSwitchingMode_SWITCH_SWITCHING_MODE_UNSPECIFIED
}

type CreateIpsecPortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateIpsecPortResponse) Reset() {
	*x = CreateIpsecPortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIpsecPortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIpsecPortResponse) ProtoMessage() {}

func (x *CreateIpsecPortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIpsecPortResponse.ProtoReflect.Descriptor instead.
func (*CreateIpsecPortResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{9}
}

func (x *CreateIpsecPortResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveIpsecPortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveIpsecPortRequest) Reset() {
	*x = RemoveIpsecPortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIpsecPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIpsecPortRequest) ProtoMessage() {}

func (x *RemoveIpsecPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIpsecPortRequest.ProtoReflect.Descriptor instead.
func (*RemoveIpsecPortRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveIpsecPortRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveIpsecPortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveIpsecPortResponse) Reset() {
	*x = RemoveIpsecPortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIpsecPortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIpsecPortResponse) ProtoMessage() {}

func (x *RemoveIpsecPortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIpsecPortResponse.ProtoReflect.Descriptor instead.
func (*RemoveIpsecPortResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{11}
}

type SetIpsecPortAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                     uint64               `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CtagEnable              *bool                `protobuf:"varint,2,opt,name=ctag_enable,json=ctagEnable,proto3,oneof" json:"ctag_enable,omitempty"`
	StagEnable              *bool                `protobuf:"varint,3,opt,name=stag_enable,json=stagEnable,proto3,oneof" json:"stag_enable,omitempty"`
	VrfFromPacketVlanEnable *bool                `protobuf:"varint,4,opt,name=vrf_from_packet_vlan_enable,json=vrfFromPacketVlanEnable,proto3,oneof" json:"vrf_from_packet_vlan_enable,omitempty"`
	SwitchSwitchingMode     *SwitchSwitchingMode `protobuf:"varint,5,opt,name=switch_switching_mode,json=switchSwitchingMode,proto3,enum=lemming.dataplane.sai.SwitchSwitchingMode,oneof" json:"switch_switching_mode,omitempty"`
}

func (x *SetIpsecPortAttributeRequest) Reset() {
	*x = SetIpsecPortAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIpsecPortAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIpsecPortAttributeRequest) ProtoMessage() {}

func (x *SetIpsecPortAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIpsecPortAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetIpsecPortAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{12}
}

func (x *SetIpsecPortAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetIpsecPortAttributeRequest) GetCtagEnable() bool {
	if x != nil && x.CtagEnable != nil {
		return *x.CtagEnable
	}
	return false
}

func (x *SetIpsecPortAttributeRequest) GetStagEnable() bool {
	if x != nil && x.StagEnable != nil {
		return *x.StagEnable
	}
	return false
}

func (x *SetIpsecPortAttributeRequest) GetVrfFromPacketVlanEnable() bool {
	if x != nil && x.VrfFromPacketVlanEnable != nil {
		return *x.VrfFromPacketVlanEnable
	}
	return false
}

func (x *SetIpsecPortAttributeRequest) GetSwitchSwitchingMode() SwitchSwitchingMode {
	if x != nil && x.SwitchSwitchingMode != nil {
		return *x.SwitchSwitchingMode
	}
	return SwitchSwitchingMode_SWITCH_SWITCHING_MODE_UNSPECIFIED
}

type SetIpsecPortAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetIpsecPortAttributeResponse) Reset() {
	*x = SetIpsecPortAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIpsecPortAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIpsecPortAttributeResponse) ProtoMessage() {}

func (x *SetIpsecPortAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIpsecPortAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetIpsecPortAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{13}
}

type GetIpsecPortAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64          `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []IpsecPortAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.IpsecPortAttr" json:"attr_type,omitempty"`
}

func (x *GetIpsecPortAttributeRequest) Reset() {
	*x = GetIpsecPortAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpsecPortAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpsecPortAttributeRequest) ProtoMessage() {}

func (x *GetIpsecPortAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpsecPortAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetIpsecPortAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{14}
}

func (x *GetIpsecPortAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetIpsecPortAttributeRequest) GetAttrType() []IpsecPortAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetIpsecPortAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *IpsecPortAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetIpsecPortAttributeResponse) Reset() {
	*x = GetIpsecPortAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpsecPortAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpsecPortAttributeResponse) ProtoMessage() {}

func (x *GetIpsecPortAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpsecPortAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetIpsecPortAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{15}
}

func (x *GetIpsecPortAttributeResponse) GetAttr() *IpsecPortAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type GetIpsecPortStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64          `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CounterIds []IpsecPortStat `protobuf:"varint,2,rep,packed,name=counter_ids,json=counterIds,proto3,enum=lemming.dataplane.sai.IpsecPortStat" json:"counter_ids,omitempty"`
}

func (x *GetIpsecPortStatsRequest) Reset() {
	*x = GetIpsecPortStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpsecPortStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpsecPortStatsRequest) ProtoMessage() {}

func (x *GetIpsecPortStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpsecPortStatsRequest.ProtoReflect.Descriptor instead.
func (*GetIpsecPortStatsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{16}
}

func (x *GetIpsecPortStatsRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetIpsecPortStatsRequest) GetCounterIds() []IpsecPortStat {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

type GetIpsecPortStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values uint64 `protobuf:"varint,1,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *GetIpsecPortStatsResponse) Reset() {
	*x = GetIpsecPortStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpsecPortStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpsecPortStatsResponse) ProtoMessage() {}

func (x *GetIpsecPortStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpsecPortStatsResponse.ProtoReflect.Descriptor instead.
func (*GetIpsecPortStatsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{17}
}

func (x *GetIpsecPortStatsResponse) GetValues() uint64 {
	if x != nil {
		return x.Values
	}
	return 0
}

type CreateIpsecSaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                      uint64          `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	IpsecDirection              *IpsecDirection `protobuf:"varint,2,opt,name=ipsec_direction,json=ipsecDirection,proto3,enum=lemming.dataplane.sai.IpsecDirection,oneof" json:"ipsec_direction,omitempty"`
	IpsecId                     *uint64         `protobuf:"varint,3,opt,name=ipsec_id,json=ipsecId,proto3,oneof" json:"ipsec_id,omitempty"`
	ExternalSaIndex             *uint32         `protobuf:"varint,4,opt,name=external_sa_index,json=externalSaIndex,proto3,oneof" json:"external_sa_index,omitempty"`
	IpsecPortList               []uint64        `protobuf:"varint,5,rep,packed,name=ipsec_port_list,json=ipsecPortList,proto3" json:"ipsec_port_list,omitempty"`
	IpsecSpi                    *uint32         `protobuf:"varint,6,opt,name=ipsec_spi,json=ipsecSpi,proto3,oneof" json:"ipsec_spi,omitempty"`
	IpsecEsnEnable              *bool           `protobuf:"varint,7,opt,name=ipsec_esn_enable,json=ipsecEsnEnable,proto3,oneof" json:"ipsec_esn_enable,omitempty"`
	IpsecCipher                 *IpsecCipher    `protobuf:"varint,8,opt,name=ipsec_cipher,json=ipsecCipher,proto3,enum=lemming.dataplane.sai.IpsecCipher,oneof" json:"ipsec_cipher,omitempty"`
	EncryptKey                  []byte          `protobuf:"bytes,9,opt,name=encrypt_key,json=encryptKey,proto3,oneof" json:"encrypt_key,omitempty"`
	Salt                        *uint32         `protobuf:"varint,10,opt,name=salt,proto3,oneof" json:"salt,omitempty"`
	AuthKey                     []byte          `protobuf:"bytes,11,opt,name=auth_key,json=authKey,proto3,oneof" json:"auth_key,omitempty"`
	IpsecReplayProtectionEnable *bool           `protobuf:"varint,12,opt,name=ipsec_replay_protection_enable,json=ipsecReplayProtectionEnable,proto3,oneof" json:"ipsec_replay_protection_enable,omitempty"`
	IpsecReplayProtectionWindow *uint32         `protobuf:"varint,13,opt,name=ipsec_replay_protection_window,json=ipsecReplayProtectionWindow,proto3,oneof" json:"ipsec_replay_protection_window,omitempty"`
	TermDstIp                   []byte          `protobuf:"bytes,14,opt,name=term_dst_ip,json=termDstIp,proto3,oneof" json:"term_dst_ip,omitempty"`
	TermVlanIdEnable            *bool           `protobuf:"varint,15,opt,name=term_vlan_id_enable,json=termVlanIdEnable,proto3,oneof" json:"term_vlan_id_enable,omitempty"`
	TermVlanId                  *uint32         `protobuf:"varint,16,opt,name=term_vlan_id,json=termVlanId,proto3,oneof" json:"term_vlan_id,omitempty"`
	TermSrcIpEnable             *bool           `protobuf:"varint,17,opt,name=term_src_ip_enable,json=termSrcIpEnable,proto3,oneof" json:"term_src_ip_enable,omitempty"`
	TermSrcIp                   []byte          `protobuf:"bytes,18,opt,name=term_src_ip,json=termSrcIp,proto3,oneof" json:"term_src_ip,omitempty"`
	EgressEsn                   *uint64         `protobuf:"varint,19,opt,name=egress_esn,json=egressEsn,proto3,oneof" json:"egress_esn,omitempty"`
	MinimumIngressEsn           *uint64         `protobuf:"varint,20,opt,name=minimum_ingress_esn,json=minimumIngressEsn,proto3,oneof" json:"minimum_ingress_esn,omitempty"`
}

func (x *CreateIpsecSaRequest) Reset() {
	*x = CreateIpsecSaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIpsecSaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIpsecSaRequest) ProtoMessage() {}

func (x *CreateIpsecSaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIpsecSaRequest.ProtoReflect.Descriptor instead.
func (*CreateIpsecSaRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{18}
}

func (x *CreateIpsecSaRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateIpsecSaRequest) GetIpsecDirection() IpsecDirection {
	if x != nil && x.IpsecDirection != nil {
		return *x.IpsecDirection
	}
	return IpsecDirection_IPSEC_DIRECTION_UNSPECIFIED
}

func (x *CreateIpsecSaRequest) GetIpsecId() uint64 {
	if x != nil && x.IpsecId != nil {
		return *x.IpsecId
	}
	return 0
}

func (x *CreateIpsecSaRequest) GetExternalSaIndex() uint32 {
	if x != nil && x.ExternalSaIndex != nil {
		return *x.ExternalSaIndex
	}
	return 0
}

func (x *CreateIpsecSaRequest) GetIpsecPortList() []uint64 {
	if x != nil {
		return x.IpsecPortList
	}
	return nil
}

func (x *CreateIpsecSaRequest) GetIpsecSpi() uint32 {
	if x != nil && x.IpsecSpi != nil {
		return *x.IpsecSpi
	}
	return 0
}

func (x *CreateIpsecSaRequest) GetIpsecEsnEnable() bool {
	if x != nil && x.IpsecEsnEnable != nil {
		return *x.IpsecEsnEnable
	}
	return false
}

func (x *CreateIpsecSaRequest) GetIpsecCipher() IpsecCipher {
	if x != nil && x.IpsecCipher != nil {
		return *x.IpsecCipher
	}
	return IpsecCipher_IPSEC_CIPHER_UNSPECIFIED
}

func (x *CreateIpsecSaRequest) GetEncryptKey() []byte {
	if x != nil {
		return x.EncryptKey
	}
	return nil
}

func (x *CreateIpsecSaRequest) GetSalt() uint32 {
	if x != nil && x.Salt != nil {
		return *x.Salt
	}
	return 0
}

func (x *CreateIpsecSaRequest) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *CreateIpsecSaRequest) GetIpsecReplayProtectionEnable() bool {
	if x != nil && x.IpsecReplayProtectionEnable != nil {
		return *x.IpsecReplayProtectionEnable
	}
	return false
}

func (x *CreateIpsecSaRequest) GetIpsecReplayProtectionWindow() uint32 {
	if x != nil && x.IpsecReplayProtectionWindow != nil {
		return *x.IpsecReplayProtectionWindow
	}
	return 0
}

func (x *CreateIpsecSaRequest) GetTermDstIp() []byte {
	if x != nil {
		return x.TermDstIp
	}
	return nil
}

func (x *CreateIpsecSaRequest) GetTermVlanIdEnable() bool {
	if x != nil && x.TermVlanIdEnable != nil {
		return *x.TermVlanIdEnable
	}
	return false
}

func (x *CreateIpsecSaRequest) GetTermVlanId() uint32 {
	if x != nil && x.TermVlanId != nil {
		return *x.TermVlanId
	}
	return 0
}

func (x *CreateIpsecSaRequest) GetTermSrcIpEnable() bool {
	if x != nil && x.TermSrcIpEnable != nil {
		return *x.TermSrcIpEnable
	}
	return false
}

func (x *CreateIpsecSaRequest) GetTermSrcIp() []byte {
	if x != nil {
		return x.TermSrcIp
	}
	return nil
}

func (x *CreateIpsecSaRequest) GetEgressEsn() uint64 {
	if x != nil && x.EgressEsn != nil {
		return *x.EgressEsn
	}
	return 0
}

func (x *CreateIpsecSaRequest) GetMinimumIngressEsn() uint64 {
	if x != nil && x.MinimumIngressEsn != nil {
		return *x.MinimumIngressEsn
	}
	return 0
}

type CreateIpsecSaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateIpsecSaResponse) Reset() {
	*x = CreateIpsecSaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIpsecSaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIpsecSaResponse) ProtoMessage() {}

func (x *CreateIpsecSaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIpsecSaResponse.ProtoReflect.Descriptor instead.
func (*CreateIpsecSaResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{19}
}

func (x *CreateIpsecSaResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveIpsecSaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveIpsecSaRequest) Reset() {
	*x = RemoveIpsecSaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIpsecSaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIpsecSaRequest) ProtoMessage() {}

func (x *RemoveIpsecSaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIpsecSaRequest.ProtoReflect.Descriptor instead.
func (*RemoveIpsecSaRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{20}
}

func (x *RemoveIpsecSaRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveIpsecSaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveIpsecSaResponse) Reset() {
	*x = RemoveIpsecSaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveIpsecSaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIpsecSaResponse) ProtoMessage() {}

func (x *RemoveIpsecSaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIpsecSaResponse.ProtoReflect.Descriptor instead.
func (*RemoveIpsecSaResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{21}
}

type SetIpsecSaAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                         uint64   `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	ExternalSaIndex             *uint32  `protobuf:"varint,2,opt,name=external_sa_index,json=externalSaIndex,proto3,oneof" json:"external_sa_index,omitempty"`
	IpsecPortList               []uint64 `protobuf:"varint,3,rep,packed,name=ipsec_port_list,json=ipsecPortList,proto3" json:"ipsec_port_list,omitempty"`
	IpsecReplayProtectionEnable *bool    `protobuf:"varint,4,opt,name=ipsec_replay_protection_enable,json=ipsecReplayProtectionEnable,proto3,oneof" json:"ipsec_replay_protection_enable,omitempty"`
	IpsecReplayProtectionWindow *uint32  `protobuf:"varint,5,opt,name=ipsec_replay_protection_window,json=ipsecReplayProtectionWindow,proto3,oneof" json:"ipsec_replay_protection_window,omitempty"`
	EgressEsn                   *uint64  `protobuf:"varint,6,opt,name=egress_esn,json=egressEsn,proto3,oneof" json:"egress_esn,omitempty"`
	MinimumIngressEsn           *uint64  `protobuf:"varint,7,opt,name=minimum_ingress_esn,json=minimumIngressEsn,proto3,oneof" json:"minimum_ingress_esn,omitempty"`
}

func (x *SetIpsecSaAttributeRequest) Reset() {
	*x = SetIpsecSaAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIpsecSaAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIpsecSaAttributeRequest) ProtoMessage() {}

func (x *SetIpsecSaAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIpsecSaAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetIpsecSaAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{22}
}

func (x *SetIpsecSaAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetIpsecSaAttributeRequest) GetExternalSaIndex() uint32 {
	if x != nil && x.ExternalSaIndex != nil {
		return *x.ExternalSaIndex
	}
	return 0
}

func (x *SetIpsecSaAttributeRequest) GetIpsecPortList() []uint64 {
	if x != nil {
		return x.IpsecPortList
	}
	return nil
}

func (x *SetIpsecSaAttributeRequest) GetIpsecReplayProtectionEnable() bool {
	if x != nil && x.IpsecReplayProtectionEnable != nil {
		return *x.IpsecReplayProtectionEnable
	}
	return false
}

func (x *SetIpsecSaAttributeRequest) GetIpsecReplayProtectionWindow() uint32 {
	if x != nil && x.IpsecReplayProtectionWindow != nil {
		return *x.IpsecReplayProtectionWindow
	}
	return 0
}

func (x *SetIpsecSaAttributeRequest) GetEgressEsn() uint64 {
	if x != nil && x.EgressEsn != nil {
		return *x.EgressEsn
	}
	return 0
}

func (x *SetIpsecSaAttributeRequest) GetMinimumIngressEsn() uint64 {
	if x != nil && x.MinimumIngressEsn != nil {
		return *x.MinimumIngressEsn
	}
	return 0
}

type SetIpsecSaAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetIpsecSaAttributeResponse) Reset() {
	*x = SetIpsecSaAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIpsecSaAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIpsecSaAttributeResponse) ProtoMessage() {}

func (x *SetIpsecSaAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIpsecSaAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetIpsecSaAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{23}
}

type GetIpsecSaAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64        `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []IpsecSaAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.IpsecSaAttr" json:"attr_type,omitempty"`
}

func (x *GetIpsecSaAttributeRequest) Reset() {
	*x = GetIpsecSaAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpsecSaAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpsecSaAttributeRequest) ProtoMessage() {}

func (x *GetIpsecSaAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpsecSaAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetIpsecSaAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{24}
}

func (x *GetIpsecSaAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetIpsecSaAttributeRequest) GetAttrType() []IpsecSaAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetIpsecSaAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *IpsecSaAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetIpsecSaAttributeResponse) Reset() {
	*x = GetIpsecSaAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpsecSaAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpsecSaAttributeResponse) ProtoMessage() {}

func (x *GetIpsecSaAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpsecSaAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetIpsecSaAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{25}
}

func (x *GetIpsecSaAttributeResponse) GetAttr() *IpsecSaAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type GetIpsecSaStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64        `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CounterIds []IpsecSaStat `protobuf:"varint,2,rep,packed,name=counter_ids,json=counterIds,proto3,enum=lemming.dataplane.sai.IpsecSaStat" json:"counter_ids,omitempty"`
}

func (x *GetIpsecSaStatsRequest) Reset() {
	*x = GetIpsecSaStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpsecSaStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpsecSaStatsRequest) ProtoMessage() {}

func (x *GetIpsecSaStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpsecSaStatsRequest.ProtoReflect.Descriptor instead.
func (*GetIpsecSaStatsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{26}
}

func (x *GetIpsecSaStatsRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetIpsecSaStatsRequest) GetCounterIds() []IpsecSaStat {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

type GetIpsecSaStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values uint64 `protobuf:"varint,1,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *GetIpsecSaStatsResponse) Reset() {
	*x = GetIpsecSaStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIpsecSaStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIpsecSaStatsResponse) ProtoMessage() {}

func (x *GetIpsecSaStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_ipsec_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIpsecSaStatsResponse.ProtoReflect.Descriptor instead.
func (*GetIpsecSaStatsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP(), []int{27}
}

func (x *GetIpsecSaStatsResponse) GetValues() uint64 {
	if x != nil {
		return x.Values
	}
	return 0
}

var File_dataplane_standalone_proto_ipsec_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_ipsec_proto_rawDesc = []byte{
	0x0a, 0x26, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a,
	0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x05, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x33, 0x0a, 0x10, 0x77, 0x61, 0x72, 0x6d, 0x5f,
	0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6d, 0x42,
	0x6f, 0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x0c, 0x48, 0x01, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x09, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x02, 0x52, 0x08, 0x63, 0x74, 0x61,
	0x67, 0x54, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67,
	0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x0e, 0x48, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67, 0x54, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x0f, 0x48, 0x04, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x56, 0x6c, 0x61, 0x6e, 0x54,
	0x61, 0x67, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1a,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x10, 0x48, 0x05, 0x52, 0x17, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x19, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x11, 0x48, 0x06, 0x52,
	0x16, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x12, 0x48, 0x07, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x64, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0x27, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd, 0x04, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x10, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x62,
	0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6d, 0x42, 0x6f,
	0x6f, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x63,
	0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x0d, 0x48, 0x01, 0x52, 0x08, 0x63, 0x74, 0x61, 0x67, 0x54, 0x70, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48, 0x02, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x67, 0x54, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48,
	0x03, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x10, 0x48, 0x04, 0x52, 0x17, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48,
	0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x19, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x77, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x11, 0x48, 0x05, 0x52, 0x16, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x6f, 0x77, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x12, 0x48, 0x06, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x74, 0x61, 0x67, 0x5f,
	0x74, 0x70, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70,
	0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x74, 0x61, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x77,
	0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x49, 0x70,
	0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70,
	0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x56, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x90, 0x04, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x07,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0b, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x0a, 0x63,
	0x74, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1b, 0x76, 0x72, 0x66,
	0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x17, 0x76, 0x72, 0x66, 0x46, 0x72, 0x6f, 0x6d, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x69, 0x0a, 0x15, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x06, 0x48, 0x05, 0x52, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88,
	0xb5, 0x18, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x69, 0x64, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x2b, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x16, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x96, 0x03, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x74, 0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1b, 0x76,
	0x72, 0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x02, 0x52, 0x17, 0x76, 0x72, 0x66, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x15, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x03, 0x52, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x1e, 0x0a, 0x1c, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x53, 0x65, 0x74,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x5e, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22,
	0x73, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x45, 0x0a,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x22, 0x33, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x92, 0x0b, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x59, 0x0a, 0x0f, 0x69, 0x70,
	0x73, 0x65, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73, 0x65,
	0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x0e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52,
	0x07, 0x69, 0x70, 0x73, 0x65, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x02, 0x52, 0x0f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x06, 0x52, 0x0d, 0x69, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x09, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x70, 0x69, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x03, 0x52, 0x08, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x53, 0x70, 0x69, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x5f, 0x65, 0x73, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x04, 0x52, 0x0e, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x45, 0x73, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a,
	0x0c, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73, 0x65,
	0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x05, 0x52,
	0x0b, 0x69, 0x70, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48, 0x06, 0x52, 0x0a, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x04, 0x73,
	0x61, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48,
	0x07, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x0c, 0x48, 0x08, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x4e, 0x0a, 0x1e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x09,
	0x52, 0x1b, 0x69, 0x70, 0x73, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x4e, 0x0a, 0x1e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48, 0x0a,
	0x52, 0x1b, 0x69, 0x70, 0x73, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48, 0x0b, 0x52, 0x09, 0x74,
	0x65, 0x72, 0x6d, 0x44, 0x73, 0x74, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x13, 0x74,
	0x65, 0x72, 0x6d, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x10, 0x48, 0x0c,
	0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x11, 0x48, 0x0d, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x12, 0x48, 0x0e, 0x52, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x53, 0x72, 0x63, 0x49,
	0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0b, 0x74, 0x65,
	0x72, 0x6d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x13, 0x48, 0x0f, 0x52, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x53, 0x72, 0x63,
	0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x65, 0x73, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48,
	0x10, 0x52, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x73, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x65, 0x73, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x15, 0x48, 0x11, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x45, 0x73, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x66,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x69,
	0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x5f, 0x73, 0x70, 0x69, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f,
	0x65, 0x73, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69,
	0x70, 0x73, 0x65, 0x63, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x61, 0x6c, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x65, 0x73, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x73, 0x6e, 0x22, 0x29,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x14, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x70, 0x73,
	0x65, 0x63, 0x53, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9b, 0x04, 0x0a,
	0x1a, 0x53, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x35, 0x0a,
	0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x00,
	0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x06, 0x52, 0x0d, 0x69, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x4e, 0x0a, 0x1e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d,
	0x48, 0x01, 0x52, 0x1b, 0x69, 0x70, 0x73, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x4e, 0x0a, 0x1e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e,
	0x48, 0x02, 0x52, 0x1b, 0x69, 0x70, 0x73, 0x65, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x73, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48, 0x03, 0x52, 0x09,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x45, 0x73, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x13,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x65, 0x73, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x15, 0x48,
	0x04, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x45, 0x73, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x21, 0x0a,
	0x1f, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65,
	0x73, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x73, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x53, 0x65,
	0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x74, 0x74,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73,
	0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x49, 0x70,
	0x73, 0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2a, 0x9f, 0x06, 0x0a, 0x09, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x50, 0x53, 0x45,
	0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x49,
	0x50, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x43, 0x55, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x39, 0x0a, 0x35, 0x49, 0x50, 0x53, 0x45,
	0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x2e, 0x0a,
	0x2a, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x21, 0x0a,
	0x1d, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x4e, 0x5f, 0x33,
	0x32, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x22, 0x0a, 0x1e, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45,
	0x53, 0x4e, 0x5f, 0x36, 0x34, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x49, 0x50,
	0x48, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x50,
	0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x53, 0x49, 0x44, 0x45, 0x5f, 0x4d, 0x54, 0x55, 0x10, 0x09, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x50,
	0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x42, 0x4f,
	0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x1f,
	0x0a, 0x1b, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x57, 0x41, 0x52,
	0x4d, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12,
	0x27, 0x0a, 0x23, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x58,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x41, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x50, 0x53, 0x45,
	0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x50, 0x49, 0x44,
	0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x50, 0x49, 0x44, 0x10, 0x0e, 0x12, 0x23, 0x0a, 0x1f,
	0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x56,
	0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x44, 0x10,
	0x0f, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x4f, 0x43, 0x54, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48,
	0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x10, 0x12, 0x28, 0x0a, 0x24,
	0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x43, 0x54, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52,
	0x4d, 0x41, 0x52, 0x4b, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0x12, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f,
	0x53, 0x41, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x53, 0x41, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x14, 0x2a, 0x8f, 0x02, 0x0a,
	0x0d, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1f,
	0x0a, 0x1b, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x43, 0x54, 0x41, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a,
	0x1b, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x47, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x22,
	0x0a, 0x1e, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44,
	0x10, 0x04, 0x12, 0x2f, 0x0a, 0x2b, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x50,
	0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x06, 0x2a, 0xfd,
	0x05, 0x0a, 0x0b, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1d,
	0x0a, 0x19, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49,
	0x50, 0x53, 0x45, 0x43, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20,
	0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x43,
	0x54, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x41, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x41, 0x5f, 0x49, 0x4e, 0x44, 0x45,
	0x58, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f,
	0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x50,
	0x49, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x45, 0x53, 0x4e, 0x5f, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x43,
	0x49, 0x50, 0x48, 0x45, 0x52, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x5f, 0x4b, 0x45, 0x59, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f,
	0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x41, 0x4c, 0x54, 0x10, 0x0b, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x0c, 0x12, 0x30, 0x0a, 0x2c, 0x49, 0x50,
	0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x53, 0x45,
	0x43, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0d, 0x12, 0x30, 0x0a, 0x2c,
	0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50,
	0x53, 0x45, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x0e, 0x12, 0x1d,
	0x0a, 0x19, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x54, 0x45, 0x52, 0x4d, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x0f, 0x12, 0x25, 0x0a,
	0x21, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54,
	0x45, 0x52, 0x4d, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f,
	0x49, 0x44, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x49,
	0x50, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x50,
	0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x4d,
	0x5f, 0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x53,
	0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x45, 0x53, 0x4e, 0x10, 0x14, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x53, 0x41, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d,
	0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x53, 0x4e, 0x10, 0x15, 0x32, 0x8b,
	0x0d, 0x0a, 0x05, 0x49, 0x70, 0x73, 0x65, 0x63, 0x12, 0x66, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x12, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x12,
	0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x70,
	0x73, 0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2f, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x78, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70,
	0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73,
	0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x72, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x33,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x78, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x12, 0x2b, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65,
	0x63, 0x53, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0d, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x12, 0x2b, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63,
	0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x70,
	0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63,
	0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x70,
	0x73, 0x65, 0x63, 0x53, 0x61, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f,
	0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_ipsec_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_ipsec_proto_rawDescData = file_dataplane_standalone_proto_ipsec_proto_rawDesc
)

func file_dataplane_standalone_proto_ipsec_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_ipsec_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_ipsec_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_ipsec_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_ipsec_proto_rawDescData
}

var file_dataplane_standalone_proto_ipsec_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_dataplane_standalone_proto_ipsec_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_dataplane_standalone_proto_ipsec_proto_goTypes = []interface{}{
	(IpsecAttr)(0),                        // 0: lemming.dataplane.sai.IpsecAttr
	(IpsecPortAttr)(0),                    // 1: lemming.dataplane.sai.IpsecPortAttr
	(IpsecSaAttr)(0),                      // 2: lemming.dataplane.sai.IpsecSaAttr
	(*CreateIpsecRequest)(nil),            // 3: lemming.dataplane.sai.CreateIpsecRequest
	(*CreateIpsecResponse)(nil),           // 4: lemming.dataplane.sai.CreateIpsecResponse
	(*RemoveIpsecRequest)(nil),            // 5: lemming.dataplane.sai.RemoveIpsecRequest
	(*RemoveIpsecResponse)(nil),           // 6: lemming.dataplane.sai.RemoveIpsecResponse
	(*SetIpsecAttributeRequest)(nil),      // 7: lemming.dataplane.sai.SetIpsecAttributeRequest
	(*SetIpsecAttributeResponse)(nil),     // 8: lemming.dataplane.sai.SetIpsecAttributeResponse
	(*GetIpsecAttributeRequest)(nil),      // 9: lemming.dataplane.sai.GetIpsecAttributeRequest
	(*GetIpsecAttributeResponse)(nil),     // 10: lemming.dataplane.sai.GetIpsecAttributeResponse
	(*CreateIpsecPortRequest)(nil),        // 11: lemming.dataplane.sai.CreateIpsecPortRequest
	(*CreateIpsecPortResponse)(nil),       // 12: lemming.dataplane.sai.CreateIpsecPortResponse
	(*RemoveIpsecPortRequest)(nil),        // 13: lemming.dataplane.sai.RemoveIpsecPortRequest
	(*RemoveIpsecPortResponse)(nil),       // 14: lemming.dataplane.sai.RemoveIpsecPortResponse
	(*SetIpsecPortAttributeRequest)(nil),  // 15: lemming.dataplane.sai.SetIpsecPortAttributeRequest
	(*SetIpsecPortAttributeResponse)(nil), // 16: lemming.dataplane.sai.SetIpsecPortAttributeResponse
	(*GetIpsecPortAttributeRequest)(nil),  // 17: lemming.dataplane.sai.GetIpsecPortAttributeRequest
	(*GetIpsecPortAttributeResponse)(nil), // 18: lemming.dataplane.sai.GetIpsecPortAttributeResponse
	(*GetIpsecPortStatsRequest)(nil),      // 19: lemming.dataplane.sai.GetIpsecPortStatsRequest
	(*GetIpsecPortStatsResponse)(nil),     // 20: lemming.dataplane.sai.GetIpsecPortStatsResponse
	(*CreateIpsecSaRequest)(nil),          // 21: lemming.dataplane.sai.CreateIpsecSaRequest
	(*CreateIpsecSaResponse)(nil),         // 22: lemming.dataplane.sai.CreateIpsecSaResponse
	(*RemoveIpsecSaRequest)(nil),          // 23: lemming.dataplane.sai.RemoveIpsecSaRequest
	(*RemoveIpsecSaResponse)(nil),         // 24: lemming.dataplane.sai.RemoveIpsecSaResponse
	(*SetIpsecSaAttributeRequest)(nil),    // 25: lemming.dataplane.sai.SetIpsecSaAttributeRequest
	(*SetIpsecSaAttributeResponse)(nil),   // 26: lemming.dataplane.sai.SetIpsecSaAttributeResponse
	(*GetIpsecSaAttributeRequest)(nil),    // 27: lemming.dataplane.sai.GetIpsecSaAttributeRequest
	(*GetIpsecSaAttributeResponse)(nil),   // 28: lemming.dataplane.sai.GetIpsecSaAttributeResponse
	(*GetIpsecSaStatsRequest)(nil),        // 29: lemming.dataplane.sai.GetIpsecSaStatsRequest
	(*GetIpsecSaStatsResponse)(nil),       // 30: lemming.dataplane.sai.GetIpsecSaStatsResponse
	(StatsMode)(0),                        // 31: lemming.dataplane.sai.StatsMode
	(*IpsecAttribute)(nil),                // 32: lemming.dataplane.sai.IpsecAttribute
	(SwitchSwitchingMode)(0),              // 33: lemming.dataplane.sai.SwitchSwitchingMode
	(*IpsecPortAttribute)(nil),            // 34: lemming.dataplane.sai.IpsecPortAttribute
	(IpsecPortStat)(0),                    // 35: lemming.dataplane.sai.IpsecPortStat
	(IpsecDirection)(0),                   // 36: lemming.dataplane.sai.IpsecDirection
	(IpsecCipher)(0),                      // 37: lemming.dataplane.sai.IpsecCipher
	(*IpsecSaAttribute)(nil),              // 38: lemming.dataplane.sai.IpsecSaAttribute
	(IpsecSaStat)(0),                      // 39: lemming.dataplane.sai.IpsecSaStat
}
var file_dataplane_standalone_proto_ipsec_proto_depIdxs = []int32{
	31, // 0: lemming.dataplane.sai.CreateIpsecRequest.stats_mode:type_name -> lemming.dataplane.sai.StatsMode
	31, // 1: lemming.dataplane.sai.SetIpsecAttributeRequest.stats_mode:type_name -> lemming.dataplane.sai.StatsMode
	0,  // 2: lemming.dataplane.sai.GetIpsecAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.IpsecAttr
	32, // 3: lemming.dataplane.sai.GetIpsecAttributeResponse.attr:type_name -> lemming.dataplane.sai.IpsecAttribute
	33, // 4: lemming.dataplane.sai.CreateIpsecPortRequest.switch_switching_mode:type_name -> lemming.dataplane.sai.SwitchSwitchingMode
	33, // 5: lemming.dataplane.sai.SetIpsecPortAttributeRequest.switch_switching_mode:type_name -> lemming.dataplane.sai.SwitchSwitchingMode
	1,  // 6: lemming.dataplane.sai.GetIpsecPortAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.IpsecPortAttr
	34, // 7: lemming.dataplane.sai.GetIpsecPortAttributeResponse.attr:type_name -> lemming.dataplane.sai.IpsecPortAttribute
	35, // 8: lemming.dataplane.sai.GetIpsecPortStatsRequest.counter_ids:type_name -> lemming.dataplane.sai.IpsecPortStat
	36, // 9: lemming.dataplane.sai.CreateIpsecSaRequest.ipsec_direction:type_name -> lemming.dataplane.sai.IpsecDirection
	37, // 10: lemming.dataplane.sai.CreateIpsecSaRequest.ipsec_cipher:type_name -> lemming.dataplane.sai.IpsecCipher
	2,  // 11: lemming.dataplane.sai.GetIpsecSaAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.IpsecSaAttr
	38, // 12: lemming.dataplane.sai.GetIpsecSaAttributeResponse.attr:type_name -> lemming.dataplane.sai.IpsecSaAttribute
	39, // 13: lemming.dataplane.sai.GetIpsecSaStatsRequest.counter_ids:type_name -> lemming.dataplane.sai.IpsecSaStat
	3,  // 14: lemming.dataplane.sai.Ipsec.CreateIpsec:input_type -> lemming.dataplane.sai.CreateIpsecRequest
	5,  // 15: lemming.dataplane.sai.Ipsec.RemoveIpsec:input_type -> lemming.dataplane.sai.RemoveIpsecRequest
	7,  // 16: lemming.dataplane.sai.Ipsec.SetIpsecAttribute:input_type -> lemming.dataplane.sai.SetIpsecAttributeRequest
	9,  // 17: lemming.dataplane.sai.Ipsec.GetIpsecAttribute:input_type -> lemming.dataplane.sai.GetIpsecAttributeRequest
	11, // 18: lemming.dataplane.sai.Ipsec.CreateIpsecPort:input_type -> lemming.dataplane.sai.CreateIpsecPortRequest
	13, // 19: lemming.dataplane.sai.Ipsec.RemoveIpsecPort:input_type -> lemming.dataplane.sai.RemoveIpsecPortRequest
	15, // 20: lemming.dataplane.sai.Ipsec.SetIpsecPortAttribute:input_type -> lemming.dataplane.sai.SetIpsecPortAttributeRequest
	17, // 21: lemming.dataplane.sai.Ipsec.GetIpsecPortAttribute:input_type -> lemming.dataplane.sai.GetIpsecPortAttributeRequest
	19, // 22: lemming.dataplane.sai.Ipsec.GetIpsecPortStats:input_type -> lemming.dataplane.sai.GetIpsecPortStatsRequest
	21, // 23: lemming.dataplane.sai.Ipsec.CreateIpsecSa:input_type -> lemming.dataplane.sai.CreateIpsecSaRequest
	23, // 24: lemming.dataplane.sai.Ipsec.RemoveIpsecSa:input_type -> lemming.dataplane.sai.RemoveIpsecSaRequest
	25, // 25: lemming.dataplane.sai.Ipsec.SetIpsecSaAttribute:input_type -> lemming.dataplane.sai.SetIpsecSaAttributeRequest
	27, // 26: lemming.dataplane.sai.Ipsec.GetIpsecSaAttribute:input_type -> lemming.dataplane.sai.GetIpsecSaAttributeRequest
	29, // 27: lemming.dataplane.sai.Ipsec.GetIpsecSaStats:input_type -> lemming.dataplane.sai.GetIpsecSaStatsRequest
	4,  // 28: lemming.dataplane.sai.Ipsec.CreateIpsec:output_type -> lemming.dataplane.sai.CreateIpsecResponse
	6,  // 29: lemming.dataplane.sai.Ipsec.RemoveIpsec:output_type -> lemming.dataplane.sai.RemoveIpsecResponse
	8,  // 30: lemming.dataplane.sai.Ipsec.SetIpsecAttribute:output_type -> lemming.dataplane.sai.SetIpsecAttributeResponse
	10, // 31: lemming.dataplane.sai.Ipsec.GetIpsecAttribute:output_type -> lemming.dataplane.sai.GetIpsecAttributeResponse
	12, // 32: lemming.dataplane.sai.Ipsec.CreateIpsecPort:output_type -> lemming.dataplane.sai.CreateIpsecPortResponse
	14, // 33: lemming.dataplane.sai.Ipsec.RemoveIpsecPort:output_type -> lemming.dataplane.sai.RemoveIpsecPortResponse
	16, // 34: lemming.dataplane.sai.Ipsec.SetIpsecPortAttribute:output_type -> lemming.dataplane.sai.SetIpsecPortAttributeResponse
	18, // 35: lemming.dataplane.sai.Ipsec.GetIpsecPortAttribute:output_type -> lemming.dataplane.sai.GetIpsecPortAttributeResponse
	20, // 36: lemming.dataplane.sai.Ipsec.GetIpsecPortStats:output_type -> lemming.dataplane.sai.GetIpsecPortStatsResponse
	22, // 37: lemming.dataplane.sai.Ipsec.CreateIpsecSa:output_type -> lemming.dataplane.sai.CreateIpsecSaResponse
	24, // 38: lemming.dataplane.sai.Ipsec.RemoveIpsecSa:output_type -> lemming.dataplane.sai.RemoveIpsecSaResponse
	26, // 39: lemming.dataplane.sai.Ipsec.SetIpsecSaAttribute:output_type -> lemming.dataplane.sai.SetIpsecSaAttributeResponse
	28, // 40: lemming.dataplane.sai.Ipsec.GetIpsecSaAttribute:output_type -> lemming.dataplane.sai.GetIpsecSaAttributeResponse
	30, // 41: lemming.dataplane.sai.Ipsec.GetIpsecSaStats:output_type -> lemming.dataplane.sai.GetIpsecSaStatsResponse
	28, // [28:42] is the sub-list for method output_type
	14, // [14:28] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_ipsec_proto_init() }
func file_dataplane_standalone_proto_ipsec_proto_init() {
	if File_dataplane_standalone_proto_ipsec_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIpsecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIpsecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIpsecRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIpsecResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIpsecAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIpsecAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpsecAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpsecAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIpsecPortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIpsecPortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIpsecPortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIpsecPortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIpsecPortAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIpsecPortAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpsecPortAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpsecPortAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpsecPortStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpsecPortStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIpsecSaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIpsecSaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIpsecSaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveIpsecSaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIpsecSaAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIpsecSaAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpsecSaAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpsecSaAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpsecSaStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_ipsec_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIpsecSaStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_ipsec_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_ipsec_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_ipsec_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_ipsec_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_ipsec_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_ipsec_proto_msgTypes[22].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_ipsec_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_ipsec_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_ipsec_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_ipsec_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_ipsec_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_ipsec_proto = out.File
	file_dataplane_standalone_proto_ipsec_proto_rawDesc = nil
	file_dataplane_standalone_proto_ipsec_proto_goTypes = nil
	file_dataplane_standalone_proto_ipsec_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IpsecClient is the client API for Ipsec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IpsecClient interface {
	CreateIpsec(ctx context.Context, in *CreateIpsecRequest, opts ...grpc.CallOption) (*CreateIpsecResponse, error)
	RemoveIpsec(ctx context.Context, in *RemoveIpsecRequest, opts ...grpc.CallOption) (*RemoveIpsecResponse, error)
	SetIpsecAttribute(ctx context.Context, in *SetIpsecAttributeRequest, opts ...grpc.CallOption) (*SetIpsecAttributeResponse, error)
	GetIpsecAttribute(ctx context.Context, in *GetIpsecAttributeRequest, opts ...grpc.CallOption) (*GetIpsecAttributeResponse, error)
	CreateIpsecPort(ctx context.Context, in *CreateIpsecPortRequest, opts ...grpc.CallOption) (*CreateIpsecPortResponse, error)
	RemoveIpsecPort(ctx context.Context, in *RemoveIpsecPortRequest, opts ...grpc.CallOption) (*RemoveIpsecPortResponse, error)
	SetIpsecPortAttribute(ctx context.Context, in *SetIpsecPortAttributeRequest, opts ...grpc.CallOption) (*SetIpsecPortAttributeResponse, error)
	GetIpsecPortAttribute(ctx context.Context, in *GetIpsecPortAttributeRequest, opts ...grpc.CallOption) (*GetIpsecPortAttributeResponse, error)
	GetIpsecPortStats(ctx context.Context, in *GetIpsecPortStatsRequest, opts ...grpc.CallOption) (*GetIpsecPortStatsResponse, error)
	CreateIpsecSa(ctx context.Context, in *CreateIpsecSaRequest, opts ...grpc.CallOption) (*CreateIpsecSaResponse, error)
	RemoveIpsecSa(ctx context.Context, in *RemoveIpsecSaRequest, opts ...grpc.CallOption) (*RemoveIpsecSaResponse, error)
	SetIpsecSaAttribute(ctx context.Context, in *SetIpsecSaAttributeRequest, opts ...grpc.CallOption) (*SetIpsecSaAttributeResponse, error)
	GetIpsecSaAttribute(ctx context.Context, in *GetIpsecSaAttributeRequest, opts ...grpc.CallOption) (*GetIpsecSaAttributeResponse, error)
	GetIpsecSaStats(ctx context.Context, in *GetIpsecSaStatsRequest, opts ...grpc.CallOption) (*GetIpsecSaStatsResponse, error)
}

type ipsecClient struct {
	cc grpc.ClientConnInterface
}

func NewIpsecClient(cc grpc.ClientConnInterface) IpsecClient {
	return &ipsecClient{cc}
}

func (c *ipsecClient) CreateIpsec(ctx context.Context, in *CreateIpsecRequest, opts ...grpc.CallOption) (*CreateIpsecResponse, error) {
	out := new(CreateIpsecResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/CreateIpsec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) RemoveIpsec(ctx context.Context, in *RemoveIpsecRequest, opts ...grpc.CallOption) (*RemoveIpsecResponse, error) {
	out := new(RemoveIpsecResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/RemoveIpsec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) SetIpsecAttribute(ctx context.Context, in *SetIpsecAttributeRequest, opts ...grpc.CallOption) (*SetIpsecAttributeResponse, error) {
	out := new(SetIpsecAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/SetIpsecAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) GetIpsecAttribute(ctx context.Context, in *GetIpsecAttributeRequest, opts ...grpc.CallOption) (*GetIpsecAttributeResponse, error) {
	out := new(GetIpsecAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/GetIpsecAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) CreateIpsecPort(ctx context.Context, in *CreateIpsecPortRequest, opts ...grpc.CallOption) (*CreateIpsecPortResponse, error) {
	out := new(CreateIpsecPortResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/CreateIpsecPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) RemoveIpsecPort(ctx context.Context, in *RemoveIpsecPortRequest, opts ...grpc.CallOption) (*RemoveIpsecPortResponse, error) {
	out := new(RemoveIpsecPortResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/RemoveIpsecPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) SetIpsecPortAttribute(ctx context.Context, in *SetIpsecPortAttributeRequest, opts ...grpc.CallOption) (*SetIpsecPortAttributeResponse, error) {
	out := new(SetIpsecPortAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/SetIpsecPortAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) GetIpsecPortAttribute(ctx context.Context, in *GetIpsecPortAttributeRequest, opts ...grpc.CallOption) (*GetIpsecPortAttributeResponse, error) {
	out := new(GetIpsecPortAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/GetIpsecPortAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) GetIpsecPortStats(ctx context.Context, in *GetIpsecPortStatsRequest, opts ...grpc.CallOption) (*GetIpsecPortStatsResponse, error) {
	out := new(GetIpsecPortStatsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/GetIpsecPortStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) CreateIpsecSa(ctx context.Context, in *CreateIpsecSaRequest, opts ...grpc.CallOption) (*CreateIpsecSaResponse, error) {
	out := new(CreateIpsecSaResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/CreateIpsecSa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) RemoveIpsecSa(ctx context.Context, in *RemoveIpsecSaRequest, opts ...grpc.CallOption) (*RemoveIpsecSaResponse, error) {
	out := new(RemoveIpsecSaResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/RemoveIpsecSa", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) SetIpsecSaAttribute(ctx context.Context, in *SetIpsecSaAttributeRequest, opts ...grpc.CallOption) (*SetIpsecSaAttributeResponse, error) {
	out := new(SetIpsecSaAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/SetIpsecSaAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) GetIpsecSaAttribute(ctx context.Context, in *GetIpsecSaAttributeRequest, opts ...grpc.CallOption) (*GetIpsecSaAttributeResponse, error) {
	out := new(GetIpsecSaAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/GetIpsecSaAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) GetIpsecSaStats(ctx context.Context, in *GetIpsecSaStatsRequest, opts ...grpc.CallOption) (*GetIpsecSaStatsResponse, error) {
	out := new(GetIpsecSaStatsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Ipsec/GetIpsecSaStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpsecServer is the server API for Ipsec service.
type IpsecServer interface {
	CreateIpsec(context.Context, *CreateIpsecRequest) (*CreateIpsecResponse, error)
	RemoveIpsec(context.Context, *RemoveIpsecRequest) (*RemoveIpsecResponse, error)
	SetIpsecAttribute(context.Context, *SetIpsecAttributeRequest) (*SetIpsecAttributeResponse, error)
	GetIpsecAttribute(context.Context, *GetIpsecAttributeRequest) (*GetIpsecAttributeResponse, error)
	CreateIpsecPort(context.Context, *CreateIpsecPortRequest) (*CreateIpsecPortResponse, error)
	RemoveIpsecPort(context.Context, *RemoveIpsecPortRequest) (*RemoveIpsecPortResponse, error)
	SetIpsecPortAttribute(context.Context, *SetIpsecPortAttributeRequest) (*SetIpsecPortAttributeResponse, error)
	GetIpsecPortAttribute(context.Context, *GetIpsecPortAttributeRequest) (*GetIpsecPortAttributeResponse, error)
	GetIpsecPortStats(context.Context, *GetIpsecPortStatsRequest) (*GetIpsecPortStatsResponse, error)
	CreateIpsecSa(context.Context, *CreateIpsecSaRequest) (*CreateIpsecSaResponse, error)
	RemoveIpsecSa(context.Context, *RemoveIpsecSaRequest) (*RemoveIpsecSaResponse, error)
	SetIpsecSaAttribute(context.Context, *SetIpsecSaAttributeRequest) (*SetIpsecSaAttributeResponse, error)
	GetIpsecSaAttribute(context.Context, *GetIpsecSaAttributeRequest) (*GetIpsecSaAttributeResponse, error)
	GetIpsecSaStats(context.Context, *GetIpsecSaStatsRequest) (*GetIpsecSaStatsResponse, error)
}

// UnimplementedIpsecServer can be embedded to have forward compatible implementations.
type UnimplementedIpsecServer struct {
}

func (*UnimplementedIpsecServer) CreateIpsec(context.Context, *CreateIpsecRequest) (*CreateIpsecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpsec not implemented")
}
func (*UnimplementedIpsecServer) RemoveIpsec(context.Context, *RemoveIpsecRequest) (*RemoveIpsecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIpsec not implemented")
}
func (*UnimplementedIpsecServer) SetIpsecAttribute(context.Context, *SetIpsecAttributeRequest) (*SetIpsecAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIpsecAttribute not implemented")
}
func (*UnimplementedIpsecServer) GetIpsecAttribute(context.Context, *GetIpsecAttributeRequest) (*GetIpsecAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecAttribute not implemented")
}
func (*UnimplementedIpsecServer) CreateIpsecPort(context.Context, *CreateIpsecPortRequest) (*CreateIpsecPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpsecPort not implemented")
}
func (*UnimplementedIpsecServer) RemoveIpsecPort(context.Context, *RemoveIpsecPortRequest) (*RemoveIpsecPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIpsecPort not implemented")
}
func (*UnimplementedIpsecServer) SetIpsecPortAttribute(context.Context, *SetIpsecPortAttributeRequest) (*SetIpsecPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIpsecPortAttribute not implemented")
}
func (*UnimplementedIpsecServer) GetIpsecPortAttribute(context.Context, *GetIpsecPortAttributeRequest) (*GetIpsecPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecPortAttribute not implemented")
}
func (*UnimplementedIpsecServer) GetIpsecPortStats(context.Context, *GetIpsecPortStatsRequest) (*GetIpsecPortStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecPortStats not implemented")
}
func (*UnimplementedIpsecServer) CreateIpsecSa(context.Context, *CreateIpsecSaRequest) (*CreateIpsecSaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpsecSa not implemented")
}
func (*UnimplementedIpsecServer) RemoveIpsecSa(context.Context, *RemoveIpsecSaRequest) (*RemoveIpsecSaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIpsecSa not implemented")
}
func (*UnimplementedIpsecServer) SetIpsecSaAttribute(context.Context, *SetIpsecSaAttributeRequest) (*SetIpsecSaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIpsecSaAttribute not implemented")
}
func (*UnimplementedIpsecServer) GetIpsecSaAttribute(context.Context, *GetIpsecSaAttributeRequest) (*GetIpsecSaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecSaAttribute not implemented")
}
func (*UnimplementedIpsecServer) GetIpsecSaStats(context.Context, *GetIpsecSaStatsRequest) (*GetIpsecSaStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecSaStats not implemented")
}

func RegisterIpsecServer(s *grpc.Server, srv IpsecServer) {
	s.RegisterService(&_Ipsec_serviceDesc, srv)
}

func _Ipsec_CreateIpsec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpsecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).CreateIpsec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/CreateIpsec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).CreateIpsec(ctx, req.(*CreateIpsecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_RemoveIpsec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIpsecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).RemoveIpsec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/RemoveIpsec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).RemoveIpsec(ctx, req.(*RemoveIpsecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_SetIpsecAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIpsecAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).SetIpsecAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/SetIpsecAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).SetIpsecAttribute(ctx, req.(*SetIpsecAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_GetIpsecAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).GetIpsecAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/GetIpsecAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).GetIpsecAttribute(ctx, req.(*GetIpsecAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_CreateIpsecPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpsecPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).CreateIpsecPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/CreateIpsecPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).CreateIpsecPort(ctx, req.(*CreateIpsecPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_RemoveIpsecPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIpsecPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).RemoveIpsecPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/RemoveIpsecPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).RemoveIpsecPort(ctx, req.(*RemoveIpsecPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_SetIpsecPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIpsecPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).SetIpsecPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/SetIpsecPortAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).SetIpsecPortAttribute(ctx, req.(*SetIpsecPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_GetIpsecPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).GetIpsecPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/GetIpsecPortAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).GetIpsecPortAttribute(ctx, req.(*GetIpsecPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_GetIpsecPortStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecPortStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).GetIpsecPortStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/GetIpsecPortStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).GetIpsecPortStats(ctx, req.(*GetIpsecPortStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_CreateIpsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).CreateIpsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/CreateIpsecSa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).CreateIpsecSa(ctx, req.(*CreateIpsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_RemoveIpsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIpsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).RemoveIpsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/RemoveIpsecSa",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).RemoveIpsecSa(ctx, req.(*RemoveIpsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_SetIpsecSaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIpsecSaAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).SetIpsecSaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/SetIpsecSaAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).SetIpsecSaAttribute(ctx, req.(*SetIpsecSaAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_GetIpsecSaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecSaAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).GetIpsecSaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/GetIpsecSaAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).GetIpsecSaAttribute(ctx, req.(*GetIpsecSaAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_GetIpsecSaStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecSaStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).GetIpsecSaStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Ipsec/GetIpsecSaStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).GetIpsecSaStats(ctx, req.(*GetIpsecSaStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ipsec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Ipsec",
	HandlerType: (*IpsecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIpsec",
			Handler:    _Ipsec_CreateIpsec_Handler,
		},
		{
			MethodName: "RemoveIpsec",
			Handler:    _Ipsec_RemoveIpsec_Handler,
		},
		{
			MethodName: "SetIpsecAttribute",
			Handler:    _Ipsec_SetIpsecAttribute_Handler,
		},
		{
			MethodName: "GetIpsecAttribute",
			Handler:    _Ipsec_GetIpsecAttribute_Handler,
		},
		{
			MethodName: "CreateIpsecPort",
			Handler:    _Ipsec_CreateIpsecPort_Handler,
		},
		{
			MethodName: "RemoveIpsecPort",
			Handler:    _Ipsec_RemoveIpsecPort_Handler,
		},
		{
			MethodName: "SetIpsecPortAttribute",
			Handler:    _Ipsec_SetIpsecPortAttribute_Handler,
		},
		{
			MethodName: "GetIpsecPortAttribute",
			Handler:    _Ipsec_GetIpsecPortAttribute_Handler,
		},
		{
			MethodName: "GetIpsecPortStats",
			Handler:    _Ipsec_GetIpsecPortStats_Handler,
		},
		{
			MethodName: "CreateIpsecSa",
			Handler:    _Ipsec_CreateIpsecSa_Handler,
		},
		{
			MethodName: "RemoveIpsecSa",
			Handler:    _Ipsec_RemoveIpsecSa_Handler,
		},
		{
			MethodName: "SetIpsecSaAttribute",
			Handler:    _Ipsec_SetIpsecSaAttribute_Handler,
		},
		{
			MethodName: "GetIpsecSaAttribute",
			Handler:    _Ipsec_GetIpsecSaAttribute_Handler,
		},
		{
			MethodName: "GetIpsecSaStats",
			Handler:    _Ipsec_GetIpsecSaStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/ipsec.proto",
}
