
syntax = "proto3";

package lemming.dataplane.sai;

import "google/protobuf/timestamp.proto";
import "google/protobuf/descriptor.proto";

option go_package = "github.com/openconfig/lemming/dataplane/standalone/proto;sai";

extend google.protobuf.FieldOptions {
  optional int32 attr_enum_value = 50000;
}

extend google.protobuf.MessageOptions {
  optional ObjectType sai_type = 50001;
}

message AclActionData {
  bool enable = 1;
  oneof parameter {
    uint64 uint = 2;
    uint64 int = 3;
    bytes mac = 4;
    bytes ip = 5;
    uint64 oid = 6;
    Uint64List objlist = 7;
    bytes ipaddr = 8;
  };
}

message ACLCapability {
  bool is_action_list_mandatory = 1;
  repeated AclActionType action_list = 2;
}

message AclFieldData {
  bool enable = 1;
  oneof mask {
    uint64 mask_uint = 2;
    uint64 mask_int = 3;
    bytes mask_mac = 4;
    bytes mask_ip = 5;
    Uint64List mask_list = 6;
  };
  oneof data {
    bool data_bool = 7;
    uint64 data_uint = 8;
    int64 data_int = 9;
    bytes data_mac = 10;
    bytes data_ip = 11;
    Uint64List data_list = 12;
  };
}

message Uint64List {
  repeated uint64 list = 1;
}

message ACLResource {
  AclStage stage = 1;
  AclBindPointType bind_point = 2;
  uint32 avail_num = 3;
}

message BfdSessionStateChangeNotificationData {
  uint64 bfd_session_id = 1;
  BfdSessionState session_state = 2;
}

message FabricPortReachability {
  uint32 switch_id = 1;
  bool reachable = 2;
}

message FdbEntry {
  uint64 switch_id = 1;
  bytes mac_address = 2;
  uint64 bv_id = 3;
}

message FdbEventNotificationData {
  FdbEvent event_type = 1;
  FdbEntry fdb_entry = 2;
  repeated FdbEntryAttribute attrs = 3;
}

message InsegEntry {
  uint64 switch_id = 1;
  uint32 label = 2;
}

message IpPrefix {
  bytes addr = 1;
  bytes mask = 2;
}

message IpmcEntry {
  uint64 switch_id = 1;
  uint64 vr_id = 2;
  IpmcEntryType type = 3;
  bytes destination = 4;
  bytes source = 5;
}

message IpsecSaStatusNotificationData {
  uint64 ipsec_sa_id = 1;
  IpsecSaOctetCountStatus ipsec_sa_octet_count_status = 2;
  bool ipsec_egress_sn_at_max_limit = 3;
}

message L2mcEntry {
  uint64 switch_id = 1;
  uint64 bv_id = 2;
  L2mcEntryType type = 3;
  bytes destination = 4;
  bytes source = 5;
}

message LatchStatus {
  bool current_status = 1;
  bool changed = 2;
}

message UintMap {
  map<uint32, uint32> uintmap = 1;
}

message McastFdbEntry {
  uint64 switch_id = 1;
  bytes mac_address = 2;
  uint64 bv_id = 3;
}

message MySidEntry {
  uint64 switch_id = 1;
  uint64 vr_id = 2;
  uint32 locator_block_len = 3;
  uint32 locator_node_len = 4;
  uint32 function_len = 5;
  uint32 args_len = 6;
  bytes sid = 7;
}

message NatEntryData {
  oneof key {
    bytes key_src_ip = 2;
    bytes key_dst_ip = 3;
    uint32 key_proto = 4;
    uint32 key_l4_src_port = 5;
    uint32 key_l4_dst_port = 6;
  };
  oneof mask {
    bytes mask_src_ip = 7;
    bytes mask_dst_ip = 8;
    uint32 mask_proto = 9;
    uint32 mask_l4_src_port = 10;
    uint32 mask_l4_dst_port = 11;
  };
}

message NatEntry {
  uint64 switch_id = 1;
  uint64 vr_id = 2;
  NatType nat_type = 3;
  NatEntryData data = 4;
}

message NeighborEntry {
  uint64 switch_id = 1;
  uint64 rif_id = 2;
  bytes ip_address = 3;
}

message PortEyeValues {
  uint32 lane = 1;
  int32 left = 2;
  int32 right = 3;
  int32 up = 4;
  int32 down = 5;
}

message PortLaneLatchStatus {
  uint32 lane = 1;
  LatchStatus value = 2;
}

message PortOperStatusNotification {
  uint64 port_id = 1;
  PortOperStatus port_state = 2;
}

message PRBS_RXState {
  PortPrbsRxStatus rx_status = 1;
  uint32 error_count = 2;
}

message QOSMapParams {
  uint32 tc = 1;
  uint32 dscp = 2;
  uint32 dot1p = 3;
  uint32 prio = 4;
  uint32 pg = 5;
  uint32 queue_index = 6;
  PacketColor color = 7;
  uint32 mpls_exp = 8;
  uint32 fc = 9;
}

message QOSMap {
  QOSMapParams key = 1;
  QOSMapParams value = 2;
}

message QueueDeadlockNotificationData {
  uint64 queue_id = 1;
  QueuePfcDeadlockEventType event = 2;
  bool app_managed_recovery = 3;
}

message RouteEntry {
  uint64 switch_id = 1;
  uint64 vr_id = 2;
  IpPrefix destination = 3;
}

message SystemPortConfig {
  uint32 port_id = 1;
  uint32 attached_switch_id = 2;
  uint32 attached_core_index = 3;
  uint32 attached_core_port_index = 4;
  uint32 speed = 5;
  uint32 num_voq = 6;
}

message HMAC {
  uint32 key_id = 1;
  repeated uint32 hmac = 2;
}

message TLVEntry {
  oneof entry {
    bytes ingress_node = 1;
    bytes egress_node = 2;
    bytes opaque_container = 3;
    HMAC hmac = 4;
  }
}

message Uint32Range {
  uint64 min = 1;
  uint64 max = 2;
}

message ObjectTypeQueryRequest {
  uint64 object = 1;
}

message ObjectTypeQueryResponse {
  ObjectType type = 1;
}

service Entrypoint {
  rpc ObjectTypeQuery(ObjectTypeQueryRequest)
      returns (ObjectTypeQueryResponse) {}
}

enum AclActionType {
  ACL_ACTION_TYPE_UNSPECIFIED = 0;
  ACL_ACTION_TYPE_REDIRECT = 1;
  ACL_ACTION_TYPE_ENDPOINT_IP = 2;
  ACL_ACTION_TYPE_REDIRECT_LIST = 3;
  ACL_ACTION_TYPE_PACKET_ACTION = 4;
  ACL_ACTION_TYPE_FLOOD = 5;
  ACL_ACTION_TYPE_COUNTER = 6;
  ACL_ACTION_TYPE_MIRROR_INGRESS = 7;
  ACL_ACTION_TYPE_MIRROR_EGRESS = 8;
  ACL_ACTION_TYPE_SET_POLICER = 9;
  ACL_ACTION_TYPE_DECREMENT_TTL = 10;
  ACL_ACTION_TYPE_SET_TC = 11;
  ACL_ACTION_TYPE_SET_PACKET_COLOR = 12;
  ACL_ACTION_TYPE_SET_INNER_VLAN_ID = 13;
  ACL_ACTION_TYPE_SET_INNER_VLAN_PRI = 14;
  ACL_ACTION_TYPE_SET_OUTER_VLAN_ID = 15;
  ACL_ACTION_TYPE_SET_OUTER_VLAN_PRI = 16;
  ACL_ACTION_TYPE_ADD_VLAN_ID = 17;
  ACL_ACTION_TYPE_ADD_VLAN_PRI = 18;
  ACL_ACTION_TYPE_SET_SRC_MAC = 19;
  ACL_ACTION_TYPE_SET_DST_MAC = 20;
  ACL_ACTION_TYPE_SET_SRC_IP = 21;
  ACL_ACTION_TYPE_SET_DST_IP = 22;
  ACL_ACTION_TYPE_SET_SRC_IPV6 = 23;
  ACL_ACTION_TYPE_SET_DST_IPV6 = 24;
  ACL_ACTION_TYPE_SET_DSCP = 25;
  ACL_ACTION_TYPE_SET_ECN = 26;
  ACL_ACTION_TYPE_SET_L4_SRC_PORT = 27;
  ACL_ACTION_TYPE_SET_L4_DST_PORT = 28;
  ACL_ACTION_TYPE_INGRESS_SAMPLEPACKET_ENABLE = 29;
  ACL_ACTION_TYPE_EGRESS_SAMPLEPACKET_ENABLE = 30;
  ACL_ACTION_TYPE_SET_ACL_META_DATA = 31;
  ACL_ACTION_TYPE_EGRESS_BLOCK_PORT_LIST = 32;
  ACL_ACTION_TYPE_SET_USER_TRAP_ID = 33;
  ACL_ACTION_TYPE_SET_DO_NOT_LEARN = 34;
  ACL_ACTION_TYPE_ACL_DTEL_FLOW_OP = 35;
  ACL_ACTION_TYPE_DTEL_INT_SESSION = 36;
  ACL_ACTION_TYPE_DTEL_DROP_REPORT_ENABLE = 37;
  ACL_ACTION_TYPE_DTEL_TAIL_DROP_REPORT_ENABLE = 38;
  ACL_ACTION_TYPE_DTEL_FLOW_SAMPLE_PERCENT = 39;
  ACL_ACTION_TYPE_DTEL_REPORT_ALL_PACKETS = 40;
  ACL_ACTION_TYPE_NO_NAT = 41;
  ACL_ACTION_TYPE_INT_INSERT = 42;
  ACL_ACTION_TYPE_INT_DELETE = 43;
  ACL_ACTION_TYPE_INT_REPORT_FLOW = 44;
  ACL_ACTION_TYPE_INT_REPORT_DROPS = 45;
  ACL_ACTION_TYPE_INT_REPORT_TAIL_DROPS = 46;
  ACL_ACTION_TYPE_TAM_INT_OBJECT = 47;
  ACL_ACTION_TYPE_SET_ISOLATION_GROUP = 48;
  ACL_ACTION_TYPE_MACSEC_FLOW = 49;
  ACL_ACTION_TYPE_SET_LAG_HASH_ID = 50;
  ACL_ACTION_TYPE_SET_ECMP_HASH_ID = 51;
  ACL_ACTION_TYPE_SET_VRF = 52;
  ACL_ACTION_TYPE_SET_FORWARDING_CLASS = 53;
}

enum AclBindPointType {
  option allow_alias = true;
  ACL_BIND_POINT_TYPE_UNSPECIFIED = 0;
  ACL_BIND_POINT_TYPE_PORT = 1;
  ACL_BIND_POINT_TYPE_LAG = 2;
  ACL_BIND_POINT_TYPE_VLAN = 3;
  ACL_BIND_POINT_TYPE_ROUTER_INTERFACE = 4;
  ACL_BIND_POINT_TYPE_ROUTER_INTF = 4;
  ACL_BIND_POINT_TYPE_SWITCH = 5;
}

enum AclDtelFlowOp {
  ACL_DTEL_FLOW_OP_UNSPECIFIED = 0;
  ACL_DTEL_FLOW_OP_NOP = 1;
  ACL_DTEL_FLOW_OP_INT = 2;
  ACL_DTEL_FLOW_OP_IOAM = 3;
  ACL_DTEL_FLOW_OP_POSTCARD = 4;
}

enum AclIpFrag {
  ACL_IP_FRAG_UNSPECIFIED = 0;
  ACL_IP_FRAG_ANY = 1;
  ACL_IP_FRAG_NON_FRAG = 2;
  ACL_IP_FRAG_NON_FRAG_OR_HEAD = 3;
  ACL_IP_FRAG_HEAD = 4;
  ACL_IP_FRAG_NON_HEAD = 5;
}

enum AclIpType {
  ACL_IP_TYPE_UNSPECIFIED = 0;
  ACL_IP_TYPE_ANY = 1;
  ACL_IP_TYPE_IP = 2;
  ACL_IP_TYPE_NON_IP = 3;
  ACL_IP_TYPE_IPV4ANY = 4;
  ACL_IP_TYPE_NON_IPV4 = 5;
  ACL_IP_TYPE_IPV6ANY = 6;
  ACL_IP_TYPE_NON_IPV6 = 7;
  ACL_IP_TYPE_ARP = 8;
  ACL_IP_TYPE_ARP_REQUEST = 9;
  ACL_IP_TYPE_ARP_REPLY = 10;
}

enum AclRangeType {
  ACL_RANGE_TYPE_UNSPECIFIED = 0;
  ACL_RANGE_TYPE_L4_SRC_PORT_RANGE = 1;
  ACL_RANGE_TYPE_L4_DST_PORT_RANGE = 2;
  ACL_RANGE_TYPE_OUTER_VLAN = 3;
  ACL_RANGE_TYPE_INNER_VLAN = 4;
  ACL_RANGE_TYPE_PACKET_LENGTH = 5;
}

enum AclStage {
  ACL_STAGE_UNSPECIFIED = 0;
  ACL_STAGE_INGRESS = 1;
  ACL_STAGE_EGRESS = 2;
  ACL_STAGE_INGRESS_MACSEC = 3;
  ACL_STAGE_EGRESS_MACSEC = 4;
  ACL_STAGE_PRE_INGRESS = 5;
}

enum AclTableGroupType {
  ACL_TABLE_GROUP_TYPE_UNSPECIFIED = 0;
  ACL_TABLE_GROUP_TYPE_SEQUENTIAL = 1;
  ACL_TABLE_GROUP_TYPE_PARALLEL = 2;
}

enum ApiExtensions {
  option allow_alias = true;
  API_EXTENSIONS_UNSPECIFIED = 0;
  API_EXTENSIONS_RANGE_START = 1;
  API_BMTOR = 1;
  API_EXTENSIONS_RANGE_END = 2;
}

enum Api {
  API_UNSPECIFIED = 0;
  API_SAI_UNSPECIFIED = 1;
  API_SWITCH = 2;
  API_PORT = 3;
  API_FDB = 4;
  API_VLAN = 5;
  API_VIRTUAL_ROUTER = 6;
  API_ROUTE = 7;
  API_NEXT_HOP = 8;
  API_NEXT_HOP_GROUP = 9;
  API_ROUTER_INTERFACE = 10;
  API_NEIGHBOR = 11;
  API_ACL = 12;
  API_HOSTIF = 13;
  API_MIRROR = 14;
  API_SAMPLEPACKET = 15;
  API_STP = 16;
  API_LAG = 17;
  API_POLICER = 18;
  API_WRED = 19;
  API_QOS_MAP = 20;
  API_QUEUE = 21;
  API_SCHEDULER = 22;
  API_SCHEDULER_GROUP = 23;
  API_BUFFER = 24;
  API_HASH = 25;
  API_UDF = 26;
  API_TUNNEL = 27;
  API_L2MC = 28;
  API_IPMC = 29;
  API_RPF_GROUP = 30;
  API_L2MC_GROUP = 31;
  API_IPMC_GROUP = 32;
  API_MCAST_FDB = 33;
  API_BRIDGE = 34;
  API_TAM = 35;
  API_SRV6 = 36;
  API_MPLS = 37;
  API_DTEL = 38;
  API_BFD = 39;
  API_ISOLATION_GROUP = 40;
  API_NAT = 41;
  API_COUNTER = 42;
  API_DEBUG_COUNTER = 43;
  API_MACSEC = 44;
  API_SYSTEM_PORT = 45;
  API_MY_MAC = 46;
  API_IPSEC = 47;
  API_GENERIC_PROGRAMMABLE = 48;
  API_MAX = 49;
}

enum AttrConditionType {
  ATTR_CONDITION_TYPE_UNSPECIFIED = 0;
  ATTR_CONDITION_TYPE_NONE = 1;
  ATTR_CONDITION_TYPE_OR = 2;
  ATTR_CONDITION_TYPE_AND = 3;
  ATTR_CONDITION_TYPE_MIXED = 4;
}

enum AttrFlags {
  ATTR_FLAGS_UNSPECIFIED = 0;
  ATTR_FLAGS_MANDATORY_ON_CREATE = 1;
  ATTR_FLAGS_CREATE_ONLY = 2;
  ATTR_FLAGS_CREATE_AND_SET = 3;
  ATTR_FLAGS_READ_ONLY = 4;
  ATTR_FLAGS_KEY = 5;
  ATTR_FLAGS_DYNAMIC = 6;
  ATTR_FLAGS_SPECIAL = 7;
}

enum AttrValueType {
  ATTR_VALUE_TYPE_UNSPECIFIED = 0;
  ATTR_VALUE_TYPE_BOOL = 1;
  ATTR_VALUE_TYPE_CHARDATA = 2;
  ATTR_VALUE_TYPE_UINT8 = 3;
  ATTR_VALUE_TYPE_INT8 = 4;
  ATTR_VALUE_TYPE_UINT16 = 5;
  ATTR_VALUE_TYPE_INT16 = 6;
  ATTR_VALUE_TYPE_UINT32 = 7;
  ATTR_VALUE_TYPE_INT32 = 8;
  ATTR_VALUE_TYPE_UINT64 = 9;
  ATTR_VALUE_TYPE_INT64 = 10;
  ATTR_VALUE_TYPE_POINTER = 11;
  ATTR_VALUE_TYPE_MAC = 12;
  ATTR_VALUE_TYPE_IPV4 = 13;
  ATTR_VALUE_TYPE_IPV6 = 14;
  ATTR_VALUE_TYPE_IP_ADDRESS = 15;
  ATTR_VALUE_TYPE_IP_PREFIX = 16;
  ATTR_VALUE_TYPE_PRBS_RX_STATE = 17;
  ATTR_VALUE_TYPE_OBJECT_ID = 18;
  ATTR_VALUE_TYPE_OBJECT_LIST = 19;
  ATTR_VALUE_TYPE_UINT8_LIST = 20;
  ATTR_VALUE_TYPE_INT8_LIST = 21;
  ATTR_VALUE_TYPE_UINT16_LIST = 22;
  ATTR_VALUE_TYPE_INT16_LIST = 23;
  ATTR_VALUE_TYPE_UINT32_LIST = 24;
  ATTR_VALUE_TYPE_INT32_LIST = 25;
  ATTR_VALUE_TYPE_UINT32_RANGE = 26;
  ATTR_VALUE_TYPE_UINT16_RANGE_LIST = 27;
  ATTR_VALUE_TYPE_INT32_RANGE = 28;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_BOOL = 29;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_UINT8 = 30;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_INT8 = 31;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_UINT16 = 32;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_INT16 = 33;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_UINT32 = 34;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_INT32 = 35;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_UINT64 = 36;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_MAC = 37;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_IPV4 = 38;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_IPV6 = 39;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_MACSEC_SCI = 40;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_OBJECT_ID = 41;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_OBJECT_LIST = 42;
  ATTR_VALUE_TYPE_ACL_FIELD_DATA_UINT8_LIST = 43;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_BOOL = 44;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_UINT8 = 45;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_INT8 = 46;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_UINT16 = 47;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_INT16 = 48;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_UINT32 = 49;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_INT32 = 50;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_MAC = 51;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_IPV4 = 52;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_IPV6 = 53;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_IP_ADDRESS = 54;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_OBJECT_ID = 55;
  ATTR_VALUE_TYPE_ACL_ACTION_DATA_OBJECT_LIST = 56;
  ATTR_VALUE_TYPE_ACL_CAPABILITY = 57;
  ATTR_VALUE_TYPE_ACL_RESOURCE_LIST = 58;
  ATTR_VALUE_TYPE_MAP_LIST = 59;
  ATTR_VALUE_TYPE_VLAN_LIST = 60;
  ATTR_VALUE_TYPE_QOS_MAP_LIST = 61;
  ATTR_VALUE_TYPE_TLV_LIST = 62;
  ATTR_VALUE_TYPE_SEGMENT_LIST = 63;
  ATTR_VALUE_TYPE_IP_ADDRESS_LIST = 64;
  ATTR_VALUE_TYPE_PORT_EYE_VALUES_LIST = 65;
  ATTR_VALUE_TYPE_TIMESPEC = 66;
  ATTR_VALUE_TYPE_NAT_ENTRY_DATA = 67;
  ATTR_VALUE_TYPE_MACSEC_SCI = 68;
  ATTR_VALUE_TYPE_MACSEC_SSCI = 69;
  ATTR_VALUE_TYPE_MACSEC_SAK = 70;
  ATTR_VALUE_TYPE_MACSEC_AUTH_KEY = 71;
  ATTR_VALUE_TYPE_MACSEC_SALT = 72;
  ATTR_VALUE_TYPE_SYSTEM_PORT_CONFIG = 73;
  ATTR_VALUE_TYPE_SYSTEM_PORT_CONFIG_LIST = 74;
  ATTR_VALUE_TYPE_FABRIC_PORT_REACHABILITY = 75;
  ATTR_VALUE_TYPE_PORT_ERR_STATUS_LIST = 76;
  ATTR_VALUE_TYPE_ENCRYPT_KEY = 77;
  ATTR_VALUE_TYPE_AUTH_KEY = 78;
  ATTR_VALUE_TYPE_LATCH_STATUS = 79;
  ATTR_VALUE_TYPE_PORT_LANE_LATCH_STATUS_LIST = 80;
  ATTR_VALUE_TYPE_JSON = 81;
}

enum BfdEncapsulationType {
  BFD_ENCAPSULATION_TYPE_UNSPECIFIED = 0;
  BFD_ENCAPSULATION_TYPE_IP_IN_IP = 1;
  BFD_ENCAPSULATION_TYPE_L3_GRE_TUNNEL = 2;
  BFD_ENCAPSULATION_TYPE_NONE = 3;
}

enum BfdSessionOffloadType {
  BFD_SESSION_OFFLOAD_TYPE_UNSPECIFIED = 0;
  BFD_SESSION_OFFLOAD_TYPE_NONE = 1;
  BFD_SESSION_OFFLOAD_TYPE_FULL = 2;
  BFD_SESSION_OFFLOAD_TYPE_SUSTENANCE = 3;
}

enum BfdSessionStat {
  BFD_SESSION_STAT_UNSPECIFIED = 0;
  BFD_SESSION_STAT_IN_PACKETS = 1;
  BFD_SESSION_STAT_OUT_PACKETS = 2;
  BFD_SESSION_STAT_DROP_PACKETS = 3;
}

enum BfdSessionState {
  BFD_SESSION_STATE_UNSPECIFIED = 0;
  BFD_SESSION_STATE_ADMIN_DOWN = 1;
  BFD_SESSION_STATE_DOWN = 2;
  BFD_SESSION_STATE_INIT = 3;
  BFD_SESSION_STATE_UP = 4;
}

enum BfdSessionType {
  BFD_SESSION_TYPE_UNSPECIFIED = 0;
  BFD_SESSION_TYPE_DEMAND_ACTIVE = 1;
  BFD_SESSION_TYPE_DEMAND_PASSIVE = 2;
  BFD_SESSION_TYPE_ASYNC_ACTIVE = 3;
  BFD_SESSION_TYPE_ASYNC_PASSIVE = 4;
}

enum BridgeFloodControlType {
  BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED = 0;
  BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS = 1;
  BRIDGE_FLOOD_CONTROL_TYPE_NONE = 2;
  BRIDGE_FLOOD_CONTROL_TYPE_L2MC_GROUP = 3;
  BRIDGE_FLOOD_CONTROL_TYPE_COMBINED = 4;
}

enum BridgePortFdbLearningMode {
  BRIDGE_PORT_FDB_LEARNING_MODE_UNSPECIFIED = 0;
  BRIDGE_PORT_FDB_LEARNING_MODE_DROP = 1;
  BRIDGE_PORT_FDB_LEARNING_MODE_DISABLE = 2;
  BRIDGE_PORT_FDB_LEARNING_MODE_HW = 3;
  BRIDGE_PORT_FDB_LEARNING_MODE_CPU_TRAP = 4;
  BRIDGE_PORT_FDB_LEARNING_MODE_CPU_LOG = 5;
  BRIDGE_PORT_FDB_LEARNING_MODE_FDB_NOTIFICATION = 6;
}

enum BridgePortStat {
  BRIDGE_PORT_STAT_UNSPECIFIED = 0;
  BRIDGE_PORT_STAT_IN_OCTETS = 1;
  BRIDGE_PORT_STAT_IN_PACKETS = 2;
  BRIDGE_PORT_STAT_OUT_OCTETS = 3;
  BRIDGE_PORT_STAT_OUT_PACKETS = 4;
}

enum BridgePortTaggingMode {
  BRIDGE_PORT_TAGGING_MODE_UNSPECIFIED = 0;
  BRIDGE_PORT_TAGGING_MODE_UNTAGGED = 1;
  BRIDGE_PORT_TAGGING_MODE_TAGGED = 2;
}

enum BridgePortType {
  BRIDGE_PORT_TYPE_UNSPECIFIED = 0;
  BRIDGE_PORT_TYPE_PORT = 1;
  BRIDGE_PORT_TYPE_SUB_PORT = 2;
  BRIDGE_PORT_TYPE_1Q_ROUTER = 3;
  BRIDGE_PORT_TYPE_1D_ROUTER = 4;
  BRIDGE_PORT_TYPE_TUNNEL = 5;
}

enum BridgeStat {
  BRIDGE_STAT_UNSPECIFIED = 0;
  BRIDGE_STAT_IN_OCTETS = 1;
  BRIDGE_STAT_IN_PACKETS = 2;
  BRIDGE_STAT_OUT_OCTETS = 3;
  BRIDGE_STAT_OUT_PACKETS = 4;
}

enum BridgeType {
  BRIDGE_TYPE_UNSPECIFIED = 0;
  BRIDGE_TYPE_1Q = 1;
  BRIDGE_TYPE_1D = 2;
}

enum BufferPoolStat {
  BUFFER_POOL_STAT_UNSPECIFIED = 0;
  BUFFER_POOL_STAT_CURR_OCCUPANCY_BYTES = 1;
  BUFFER_POOL_STAT_WATERMARK_BYTES = 2;
  BUFFER_POOL_STAT_DROPPED_PACKETS = 3;
  BUFFER_POOL_STAT_GREEN_WRED_DROPPED_PACKETS = 4;
  BUFFER_POOL_STAT_GREEN_WRED_DROPPED_BYTES = 5;
  BUFFER_POOL_STAT_YELLOW_WRED_DROPPED_PACKETS = 6;
  BUFFER_POOL_STAT_YELLOW_WRED_DROPPED_BYTES = 7;
  BUFFER_POOL_STAT_RED_WRED_DROPPED_PACKETS = 8;
  BUFFER_POOL_STAT_RED_WRED_DROPPED_BYTES = 9;
  BUFFER_POOL_STAT_WRED_DROPPED_PACKETS = 10;
  BUFFER_POOL_STAT_WRED_DROPPED_BYTES = 11;
  BUFFER_POOL_STAT_GREEN_WRED_ECN_MARKED_PACKETS = 12;
  BUFFER_POOL_STAT_GREEN_WRED_ECN_MARKED_BYTES = 13;
  BUFFER_POOL_STAT_YELLOW_WRED_ECN_MARKED_PACKETS = 14;
  BUFFER_POOL_STAT_YELLOW_WRED_ECN_MARKED_BYTES = 15;
  BUFFER_POOL_STAT_RED_WRED_ECN_MARKED_PACKETS = 16;
  BUFFER_POOL_STAT_RED_WRED_ECN_MARKED_BYTES = 17;
  BUFFER_POOL_STAT_WRED_ECN_MARKED_PACKETS = 18;
  BUFFER_POOL_STAT_WRED_ECN_MARKED_BYTES = 19;
  BUFFER_POOL_STAT_XOFF_ROOM_CURR_OCCUPANCY_BYTES = 20;
  BUFFER_POOL_STAT_XOFF_ROOM_WATERMARK_BYTES = 21;
  BUFFER_POOL_STAT_CUSTOM_RANGE_BASE = 22;
}

enum BufferPoolThresholdMode {
  BUFFER_POOL_THRESHOLD_MODE_UNSPECIFIED = 0;
  BUFFER_POOL_THRESHOLD_MODE_STATIC = 1;
  BUFFER_POOL_THRESHOLD_MODE_DYNAMIC = 2;
}

enum BufferPoolType {
  BUFFER_POOL_TYPE_UNSPECIFIED = 0;
  BUFFER_POOL_TYPE_INGRESS = 1;
  BUFFER_POOL_TYPE_EGRESS = 2;
  BUFFER_POOL_TYPE_BOTH = 3;
}

enum BufferProfileThresholdMode {
  BUFFER_PROFILE_THRESHOLD_MODE_UNSPECIFIED = 0;
  BUFFER_PROFILE_THRESHOLD_MODE_STATIC = 1;
  BUFFER_PROFILE_THRESHOLD_MODE_DYNAMIC = 2;
}

enum BulkOpErrorMode {
  BULK_OP_ERROR_MODE_UNSPECIFIED = 0;
  BULK_OP_ERROR_MODE_STOP_ON_ERROR = 1;
  BULK_OP_ERROR_MODE_IGNORE_ERROR = 2;
}

enum CommonApi {
  COMMON_API_UNSPECIFIED = 0;
  COMMON_API_CREATE = 1;
  COMMON_API_REMOVE = 2;
  COMMON_API_SET = 3;
  COMMON_API_GET = 4;
  COMMON_API_BULK_CREATE = 5;
  COMMON_API_BULK_REMOVE = 6;
  COMMON_API_BULK_SET = 7;
  COMMON_API_BULK_GET = 8;
  COMMON_API_MAX = 9;
}

enum ConditionOperator {
  CONDITION_OPERATOR_UNSPECIFIED = 0;
  CONDITION_OPERATOR_EQ = 1;
  CONDITION_OPERATOR_NE = 2;
  CONDITION_OPERATOR_LT = 3;
  CONDITION_OPERATOR_GT = 4;
  CONDITION_OPERATOR_LE = 5;
  CONDITION_OPERATOR_GE = 6;
}

enum CounterStat {
  COUNTER_STAT_UNSPECIFIED = 0;
  COUNTER_STAT_PACKETS = 1;
  COUNTER_STAT_BYTES = 2;
  COUNTER_STAT_CUSTOM_RANGE_BASE = 3;
}

enum CounterType {
  COUNTER_TYPE_UNSPECIFIED = 0;
  COUNTER_TYPE_REGULAR = 1;
}

enum DebugCounterBindMethod {
  DEBUG_COUNTER_BIND_METHOD_UNSPECIFIED = 0;
  DEBUG_COUNTER_BIND_METHOD_AUTOMATIC = 1;
}

enum DebugCounterType {
  DEBUG_COUNTER_TYPE_UNSPECIFIED = 0;
  DEBUG_COUNTER_TYPE_PORT_IN_DROP_REASONS = 1;
  DEBUG_COUNTER_TYPE_PORT_OUT_DROP_REASONS = 2;
  DEBUG_COUNTER_TYPE_SWITCH_IN_DROP_REASONS = 3;
  DEBUG_COUNTER_TYPE_SWITCH_OUT_DROP_REASONS = 4;
}

enum DefaultValueType {
  DEFAULT_VALUE_TYPE_UNSPECIFIED = 0;
  DEFAULT_VALUE_TYPE_NONE = 1;
  DEFAULT_VALUE_TYPE_CONST = 2;
  DEFAULT_VALUE_TYPE_ATTR_RANGE = 3;
  DEFAULT_VALUE_TYPE_ATTR_VALUE = 4;
  DEFAULT_VALUE_TYPE_EMPTY_LIST = 5;
  DEFAULT_VALUE_TYPE_VENDOR_SPECIFIC = 6;
  DEFAULT_VALUE_TYPE_SWITCH_INTERNAL = 7;
}

enum DtelEventType {
  DTEL_EVENT_TYPE_UNSPECIFIED = 0;
  DTEL_EVENT_TYPE_FLOW_STATE = 1;
  DTEL_EVENT_TYPE_FLOW_REPORT_ALL_PACKETS = 2;
  DTEL_EVENT_TYPE_FLOW_TCPFLAG = 3;
  DTEL_EVENT_TYPE_QUEUE_REPORT_THRESHOLD_BREACH = 4;
  DTEL_EVENT_TYPE_QUEUE_REPORT_TAIL_DROP = 5;
  DTEL_EVENT_TYPE_DROP_REPORT = 6;
  DTEL_EVENT_TYPE_MAX = 7;
}

enum EcnMarkMode {
  ECN_MARK_MODE_UNSPECIFIED = 0;
  ECN_MARK_MODE_NONE = 1;
  ECN_MARK_MODE_GREEN = 2;
  ECN_MARK_MODE_YELLOW = 3;
  ECN_MARK_MODE_RED = 4;
  ECN_MARK_MODE_GREEN_YELLOW = 5;
  ECN_MARK_MODE_GREEN_RED = 6;
  ECN_MARK_MODE_YELLOW_RED = 7;
  ECN_MARK_MODE_ALL = 8;
}

enum EnumFlagsType {
  ENUM_FLAGS_TYPE_UNSPECIFIED = 0;
  ENUM_FLAGS_TYPE_NONE = 1;
  ENUM_FLAGS_TYPE_STRICT = 2;
  ENUM_FLAGS_TYPE_MIXED = 3;
  ENUM_FLAGS_TYPE_RANGES = 4;
  ENUM_FLAGS_TYPE_FREE = 5;
}

enum ErspanEncapsulationType {
  ERSPAN_ENCAPSULATION_TYPE_UNSPECIFIED = 0;
  ERSPAN_ENCAPSULATION_TYPE_MIRROR_L3_GRE_TUNNEL = 1;
}

enum FdbEntryType {
  FDB_ENTRY_TYPE_UNSPECIFIED = 0;
  FDB_ENTRY_TYPE_DYNAMIC = 1;
  FDB_ENTRY_TYPE_STATIC = 2;
}

enum FdbEvent {
  FDB_EVENT_UNSPECIFIED = 0;
  FDB_EVENT_LEARNED = 1;
  FDB_EVENT_AGED = 2;
  FDB_EVENT_MOVE = 3;
  FDB_EVENT_FLUSHED = 4;
}

enum FdbFlushEntryType {
  FDB_FLUSH_ENTRY_TYPE_UNSPECIFIED = 0;
  FDB_FLUSH_ENTRY_TYPE_DYNAMIC = 1;
  FDB_FLUSH_ENTRY_TYPE_STATIC = 2;
  FDB_FLUSH_ENTRY_TYPE_ALL = 3;
}

enum HashAlgorithm {
  HASH_ALGORITHM_UNSPECIFIED = 0;
  HASH_ALGORITHM_CRC = 1;
  HASH_ALGORITHM_XOR = 2;
  HASH_ALGORITHM_RANDOM = 3;
  HASH_ALGORITHM_CRC_32LO = 4;
  HASH_ALGORITHM_CRC_32HI = 5;
  HASH_ALGORITHM_CRC_CCITT = 6;
  HASH_ALGORITHM_CRC_XOR = 7;
}

enum HostifTableEntryChannelType {
  HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_UNSPECIFIED = 0;
  HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_CB = 1;
  HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_FD = 2;
  HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_PHYSICAL_PORT = 3;
  HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_LOGICAL_PORT = 4;
  HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_L3 = 5;
  HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_GENETLINK = 6;
}

enum HostifTableEntryType {
  HOSTIF_TABLE_ENTRY_TYPE_UNSPECIFIED = 0;
  HOSTIF_TABLE_ENTRY_TYPE_PORT = 1;
  HOSTIF_TABLE_ENTRY_TYPE_LAG = 2;
  HOSTIF_TABLE_ENTRY_TYPE_VLAN = 3;
  HOSTIF_TABLE_ENTRY_TYPE_TRAP_ID = 4;
  HOSTIF_TABLE_ENTRY_TYPE_WILDCARD = 5;
}

enum HostifTrapType {
  option allow_alias = true;
  HOSTIF_TRAP_TYPE_UNSPECIFIED = 0;
  HOSTIF_TRAP_TYPE_START = 1;
  HOSTIF_TRAP_TYPE_STP = 1;
  HOSTIF_TRAP_TYPE_LACP = 2;
  HOSTIF_TRAP_TYPE_EAPOL = 3;
  HOSTIF_TRAP_TYPE_LLDP = 4;
  HOSTIF_TRAP_TYPE_PVRST = 5;
  HOSTIF_TRAP_TYPE_IGMP_TYPE_QUERY = 6;
  HOSTIF_TRAP_TYPE_IGMP_TYPE_LEAVE = 7;
  HOSTIF_TRAP_TYPE_IGMP_TYPE_V1_REPORT = 8;
  HOSTIF_TRAP_TYPE_IGMP_TYPE_V2_REPORT = 9;
  HOSTIF_TRAP_TYPE_IGMP_TYPE_V3_REPORT = 10;
  HOSTIF_TRAP_TYPE_SAMPLEPACKET = 11;
  HOSTIF_TRAP_TYPE_UDLD = 12;
  HOSTIF_TRAP_TYPE_CDP = 13;
  HOSTIF_TRAP_TYPE_VTP = 14;
  HOSTIF_TRAP_TYPE_DTP = 15;
  HOSTIF_TRAP_TYPE_PAGP = 16;
  HOSTIF_TRAP_TYPE_PTP = 17;
  HOSTIF_TRAP_TYPE_PTP_TX_EVENT = 18;
  HOSTIF_TRAP_TYPE_DHCP_L2 = 19;
  HOSTIF_TRAP_TYPE_DHCPV6_L2 = 20;
  HOSTIF_TRAP_TYPE_SWITCH_CUSTOM_RANGE_BASE = 21;
  HOSTIF_TRAP_TYPE_ARP_REQUEST = 22;
  HOSTIF_TRAP_TYPE_ARP_RESPONSE = 23;
  HOSTIF_TRAP_TYPE_DHCP = 24;
  HOSTIF_TRAP_TYPE_OSPF = 25;
  HOSTIF_TRAP_TYPE_PIM = 26;
  HOSTIF_TRAP_TYPE_VRRP = 27;
  HOSTIF_TRAP_TYPE_DHCPV6 = 28;
  HOSTIF_TRAP_TYPE_OSPFV6 = 29;
  HOSTIF_TRAP_TYPE_VRRPV6 = 30;
  HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_DISCOVERY = 31;
  HOSTIF_TRAP_TYPE_IPV6_MLD_V1_V2 = 32;
  HOSTIF_TRAP_TYPE_IPV6_MLD_V1_REPORT = 33;
  HOSTIF_TRAP_TYPE_IPV6_MLD_V1_DONE = 34;
  HOSTIF_TRAP_TYPE_MLD_V2_REPORT = 35;
  HOSTIF_TRAP_TYPE_UNKNOWN_L3_MULTICAST = 36;
  HOSTIF_TRAP_TYPE_SNAT_MISS = 37;
  HOSTIF_TRAP_TYPE_DNAT_MISS = 38;
  HOSTIF_TRAP_TYPE_NAT_HAIRPIN = 39;
  HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_SOLICITATION = 40;
  HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_ADVERTISEMENT = 41;
  HOSTIF_TRAP_TYPE_ISIS = 42;
  HOSTIF_TRAP_TYPE_ROUTER_CUSTOM_RANGE_BASE = 43;
  HOSTIF_TRAP_TYPE_IP2ME = 44;
  HOSTIF_TRAP_TYPE_SSH = 45;
  HOSTIF_TRAP_TYPE_SNMP = 46;
  HOSTIF_TRAP_TYPE_BGP = 47;
  HOSTIF_TRAP_TYPE_BGPV6 = 48;
  HOSTIF_TRAP_TYPE_BFD = 49;
  HOSTIF_TRAP_TYPE_BFDV6 = 50;
  HOSTIF_TRAP_TYPE_BFD_MICRO = 51;
  HOSTIF_TRAP_TYPE_BFDV6_MICRO = 52;
  HOSTIF_TRAP_TYPE_LDP = 53;
  HOSTIF_TRAP_TYPE_GNMI = 54;
  HOSTIF_TRAP_TYPE_P4RT = 55;
  HOSTIF_TRAP_TYPE_NTPCLIENT = 56;
  HOSTIF_TRAP_TYPE_NTPSERVER = 57;
  HOSTIF_TRAP_TYPE_LOCAL_IP_CUSTOM_RANGE_BASE = 58;
  HOSTIF_TRAP_TYPE_L3_MTU_ERROR = 59;
  HOSTIF_TRAP_TYPE_TTL_ERROR = 60;
  HOSTIF_TRAP_TYPE_STATIC_FDB_MOVE = 61;
  HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_EGRESS_BUFFER = 62;
  HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_WRED = 63;
  HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_ROUTER = 64;
  HOSTIF_TRAP_TYPE_MPLS_TTL_ERROR = 65;
  HOSTIF_TRAP_TYPE_MPLS_ROUTER_ALERT_LABEL = 66;
  HOSTIF_TRAP_TYPE_MPLS_LABEL_LOOKUP_MISS = 67;
  HOSTIF_TRAP_TYPE_CUSTOM_EXCEPTION_RANGE_BASE = 68;
  HOSTIF_TRAP_TYPE_END = 69;
}

enum HostifTxType {
  HOSTIF_TX_TYPE_UNSPECIFIED = 0;
  HOSTIF_TX_TYPE_PIPELINE_BYPASS = 1;
  HOSTIF_TX_TYPE_PIPELINE_LOOKUP = 2;
  HOSTIF_TX_TYPE_CUSTOM_RANGE_BASE = 3;
}

enum HostifType {
  HOSTIF_TYPE_UNSPECIFIED = 0;
  HOSTIF_TYPE_NETDEV = 1;
  HOSTIF_TYPE_FD = 2;
  HOSTIF_TYPE_GENETLINK = 3;
}

enum HostifUserDefinedTrapType {
  option allow_alias = true;
  HOSTIF_USER_DEFINED_TRAP_TYPE_UNSPECIFIED = 0;
  HOSTIF_USER_DEFINED_TRAP_TYPE_START = 1;
  HOSTIF_USER_DEFINED_TRAP_TYPE_ROUTER = 1;
  HOSTIF_USER_DEFINED_TRAP_TYPE_NEIGHBOR = 2;
  HOSTIF_USER_DEFINED_TRAP_TYPE_NEIGH = 2;
  HOSTIF_USER_DEFINED_TRAP_TYPE_ACL = 3;
  HOSTIF_USER_DEFINED_TRAP_TYPE_FDB = 4;
  HOSTIF_USER_DEFINED_TRAP_TYPE_INSEG_ENTRY = 5;
  HOSTIF_USER_DEFINED_TRAP_TYPE_CUSTOM_RANGE_BASE = 6;
  HOSTIF_USER_DEFINED_TRAP_TYPE_END = 7;
}

enum HostifVlanTag {
  HOSTIF_VLAN_TAG_UNSPECIFIED = 0;
  HOSTIF_VLAN_TAG_STRIP = 1;
  HOSTIF_VLAN_TAG_KEEP = 2;
  HOSTIF_VLAN_TAG_ORIGINAL = 3;
}

enum InDropReason {
  option allow_alias = true;
  IN_DROP_REASON_UNSPECIFIED = 0;
  IN_DROP_REASON_START = 1;
  IN_DROP_REASON_L2_ANY = 1;
  IN_DROP_REASON_SMAC_MULTICAST = 2;
  IN_DROP_REASON_SMAC_EQUALS_DMAC = 3;
  IN_DROP_REASON_DMAC_RESERVED = 4;
  IN_DROP_REASON_VLAN_TAG_NOT_ALLOWED = 5;
  IN_DROP_REASON_INGRESS_VLAN_FILTER = 6;
  IN_DROP_REASON_INGRESS_STP_FILTER = 7;
  IN_DROP_REASON_FDB_UC_DISCARD = 8;
  IN_DROP_REASON_FDB_MC_DISCARD = 9;
  IN_DROP_REASON_L2_LOOPBACK_FILTER = 10;
  IN_DROP_REASON_EXCEEDS_L2_MTU = 11;
  IN_DROP_REASON_L3_ANY = 12;
  IN_DROP_REASON_EXCEEDS_L3_MTU = 13;
  IN_DROP_REASON_TTL = 14;
  IN_DROP_REASON_L3_LOOPBACK_FILTER = 15;
  IN_DROP_REASON_NON_ROUTABLE = 16;
  IN_DROP_REASON_NO_L3_HEADER = 17;
  IN_DROP_REASON_IP_HEADER_ERROR = 18;
  IN_DROP_REASON_UC_DIP_MC_DMAC = 19;
  IN_DROP_REASON_DIP_LOOPBACK = 20;
  IN_DROP_REASON_SIP_LOOPBACK = 21;
  IN_DROP_REASON_SIP_MC = 22;
  IN_DROP_REASON_SIP_CLASS_E = 23;
  IN_DROP_REASON_SIP_UNSPECIFIED = 24;
  IN_DROP_REASON_MC_DMAC_MISMATCH = 25;
  IN_DROP_REASON_SIP_EQUALS_DIP = 26;
  IN_DROP_REASON_SIP_BC = 27;
  IN_DROP_REASON_DIP_LOCAL = 28;
  IN_DROP_REASON_DIP_LINK_LOCAL = 29;
  IN_DROP_REASON_SIP_LINK_LOCAL = 30;
  IN_DROP_REASON_IPV6_MC_SCOPE0 = 31;
  IN_DROP_REASON_IPV6_MC_SCOPE1 = 32;
  IN_DROP_REASON_IRIF_DISABLED = 33;
  IN_DROP_REASON_ERIF_DISABLED = 34;
  IN_DROP_REASON_LPM4_MISS = 35;
  IN_DROP_REASON_LPM6_MISS = 36;
  IN_DROP_REASON_BLACKHOLE_ROUTE = 37;
  IN_DROP_REASON_BLACKHOLE_ARP = 38;
  IN_DROP_REASON_UNRESOLVED_NEXT_HOP = 39;
  IN_DROP_REASON_L3_EGRESS_LINK_DOWN = 40;
  IN_DROP_REASON_DECAP_ERROR = 41;
  IN_DROP_REASON_ACL_ANY = 42;
  IN_DROP_REASON_ACL_INGRESS_PORT = 43;
  IN_DROP_REASON_ACL_INGRESS_LAG = 44;
  IN_DROP_REASON_ACL_INGRESS_VLAN = 45;
  IN_DROP_REASON_ACL_INGRESS_RIF = 46;
  IN_DROP_REASON_ACL_INGRESS_SWITCH = 47;
  IN_DROP_REASON_ACL_EGRESS_PORT = 48;
  IN_DROP_REASON_ACL_EGRESS_LAG = 49;
  IN_DROP_REASON_ACL_EGRESS_VLAN = 50;
  IN_DROP_REASON_ACL_EGRESS_RIF = 51;
  IN_DROP_REASON_ACL_EGRESS_SWITCH = 52;
  IN_DROP_REASON_FDB_AND_BLACKHOLE_DISCARDS = 53;
  IN_DROP_REASON_MPLS_MISS = 54;
  IN_DROP_REASON_SRV6_LOCAL_SID_DROP = 55;
  IN_DROP_REASON_END = 56;
  IN_DROP_REASON_CUSTOM_RANGE_BASE = 57;
  IN_DROP_REASON_CUSTOM_RANGE_END = 58;
}

enum IngressPriorityGroupStat {
  INGRESS_PRIORITY_GROUP_STAT_UNSPECIFIED = 0;
  INGRESS_PRIORITY_GROUP_STAT_PACKETS = 1;
  INGRESS_PRIORITY_GROUP_STAT_BYTES = 2;
  INGRESS_PRIORITY_GROUP_STAT_CURR_OCCUPANCY_BYTES = 3;
  INGRESS_PRIORITY_GROUP_STAT_WATERMARK_BYTES = 4;
  INGRESS_PRIORITY_GROUP_STAT_SHARED_CURR_OCCUPANCY_BYTES = 5;
  INGRESS_PRIORITY_GROUP_STAT_SHARED_WATERMARK_BYTES = 6;
  INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_CURR_OCCUPANCY_BYTES = 7;
  INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_WATERMARK_BYTES = 8;
  INGRESS_PRIORITY_GROUP_STAT_DROPPED_PACKETS = 9;
  INGRESS_PRIORITY_GROUP_STAT_CUSTOM_RANGE_BASE = 10;
}

enum InsegEntryPopQosMode {
  INSEG_ENTRY_POP_QOS_MODE_UNSPECIFIED = 0;
  INSEG_ENTRY_POP_QOS_MODE_UNIFORM = 1;
  INSEG_ENTRY_POP_QOS_MODE_PIPE = 2;
}

enum InsegEntryPopTtlMode {
  INSEG_ENTRY_POP_TTL_MODE_UNSPECIFIED = 0;
  INSEG_ENTRY_POP_TTL_MODE_UNIFORM = 1;
  INSEG_ENTRY_POP_TTL_MODE_PIPE = 2;
}

enum InsegEntryPscType {
  INSEG_ENTRY_PSC_TYPE_UNSPECIFIED = 0;
  INSEG_ENTRY_PSC_TYPE_ELSP = 1;
  INSEG_ENTRY_PSC_TYPE_LLSP = 2;
}

enum IpAddrFamily {
  IP_ADDR_FAMILY_UNSPECIFIED = 0;
  IP_ADDR_FAMILY_IPV4 = 1;
  IP_ADDR_FAMILY_IPV6 = 2;
}

enum IpmcEntryType {
  IPMC_ENTRY_TYPE_UNSPECIFIED = 0;
  IPMC_ENTRY_TYPE_SG = 1;
  IPMC_ENTRY_TYPE_XG = 2;
}

enum IpsecCipher {
  IPSEC_CIPHER_UNSPECIFIED = 0;
  IPSEC_CIPHER_AES128_GCM16 = 1;
  IPSEC_CIPHER_AES256_GCM16 = 2;
  IPSEC_CIPHER_AES128_GMAC = 3;
  IPSEC_CIPHER_AES256_GMAC = 4;
}

enum IpsecDirection {
  IPSEC_DIRECTION_UNSPECIFIED = 0;
  IPSEC_DIRECTION_EGRESS = 1;
  IPSEC_DIRECTION_INGRESS = 2;
}

enum IpsecPortStat {
  IPSEC_PORT_STAT_UNSPECIFIED = 0;
  IPSEC_PORT_STAT_TX_ERROR_PKTS = 1;
  IPSEC_PORT_STAT_TX_IPSEC_PKTS = 2;
  IPSEC_PORT_STAT_TX_NON_IPSEC_PKTS = 3;
  IPSEC_PORT_STAT_RX_ERROR_PKTS = 4;
  IPSEC_PORT_STAT_RX_IPSEC_PKTS = 5;
  IPSEC_PORT_STAT_RX_NON_IPSEC_PKTS = 6;
}

enum IpsecSaOctetCountStatus {
  IPSEC_SA_OCTET_COUNT_STATUS_UNSPECIFIED = 0;
  IPSEC_SA_OCTET_COUNT_STATUS_BELOW_LOW_WATERMARK = 1;
  IPSEC_SA_OCTET_COUNT_STATUS_BELOW_HIGH_WATERMARK = 2;
  IPSEC_SA_OCTET_COUNT_STATUS_ABOVE_HIGH_WATERMARK = 3;
}

enum IpsecSaStat {
  IPSEC_SA_STAT_UNSPECIFIED = 0;
  IPSEC_SA_STAT_PROTECTED_OCTETS = 1;
  IPSEC_SA_STAT_PROTECTED_PKTS = 2;
  IPSEC_SA_STAT_GOOD_PKTS = 3;
  IPSEC_SA_STAT_BAD_HEADER_PKTS_IN = 4;
  IPSEC_SA_STAT_REPLAYED_PKTS_IN = 5;
  IPSEC_SA_STAT_LATE_PKTS_IN = 6;
  IPSEC_SA_STAT_BAD_TRAILER_PKTS_IN = 7;
  IPSEC_SA_STAT_AUTH_FAIL_PKTS_IN = 8;
  IPSEC_SA_STAT_DUMMY_DROPPED_PKTS_IN = 9;
  IPSEC_SA_STAT_OTHER_DROPPED_PKTS = 10;
}

enum IsolationGroupType {
  ISOLATION_GROUP_TYPE_UNSPECIFIED = 0;
  ISOLATION_GROUP_TYPE_PORT = 1;
  ISOLATION_GROUP_TYPE_BRIDGE_PORT = 2;
}

enum L2mcEntryType {
  L2MC_ENTRY_TYPE_UNSPECIFIED = 0;
  L2MC_ENTRY_TYPE_SG = 1;
  L2MC_ENTRY_TYPE_XG = 2;
}

enum LogLevel {
  LOG_LEVEL_UNSPECIFIED = 0;
  LOG_LEVEL_DEBUG = 1;
  LOG_LEVEL_INFO = 2;
  LOG_LEVEL_NOTICE = 3;
  LOG_LEVEL_WARN = 4;
  LOG_LEVEL_ERROR = 5;
  LOG_LEVEL_CRITICAL = 6;
}

enum MacsecCipherSuite {
  MACSEC_CIPHER_SUITE_UNSPECIFIED = 0;
  MACSEC_CIPHER_SUITE_GCM_AES_128 = 1;
  MACSEC_CIPHER_SUITE_GCM_AES_256 = 2;
  MACSEC_CIPHER_SUITE_GCM_AES_XPN_128 = 3;
  MACSEC_CIPHER_SUITE_GCM_AES_XPN_256 = 4;
}

enum MacsecDirection {
  MACSEC_DIRECTION_UNSPECIFIED = 0;
  MACSEC_DIRECTION_EGRESS = 1;
  MACSEC_DIRECTION_INGRESS = 2;
}

enum MacsecFlowStat {
  MACSEC_FLOW_STAT_UNSPECIFIED = 0;
  MACSEC_FLOW_STAT_OTHER_ERR = 1;
  MACSEC_FLOW_STAT_OCTETS_UNCONTROLLED = 2;
  MACSEC_FLOW_STAT_OCTETS_CONTROLLED = 3;
  MACSEC_FLOW_STAT_OUT_OCTETS_COMMON = 4;
  MACSEC_FLOW_STAT_UCAST_PKTS_UNCONTROLLED = 5;
  MACSEC_FLOW_STAT_UCAST_PKTS_CONTROLLED = 6;
  MACSEC_FLOW_STAT_MULTICAST_PKTS_UNCONTROLLED = 7;
  MACSEC_FLOW_STAT_MULTICAST_PKTS_CONTROLLED = 8;
  MACSEC_FLOW_STAT_BROADCAST_PKTS_UNCONTROLLED = 9;
  MACSEC_FLOW_STAT_BROADCAST_PKTS_CONTROLLED = 10;
  MACSEC_FLOW_STAT_CONTROL_PKTS = 11;
  MACSEC_FLOW_STAT_PKTS_UNTAGGED = 12;
  MACSEC_FLOW_STAT_IN_TAGGED_CONTROL_PKTS = 13;
  MACSEC_FLOW_STAT_OUT_PKTS_TOO_LONG = 14;
  MACSEC_FLOW_STAT_IN_PKTS_NO_TAG = 15;
  MACSEC_FLOW_STAT_IN_PKTS_BAD_TAG = 16;
  MACSEC_FLOW_STAT_IN_PKTS_NO_SCI = 17;
  MACSEC_FLOW_STAT_IN_PKTS_UNKNOWN_SCI = 18;
  MACSEC_FLOW_STAT_IN_PKTS_OVERRUN = 19;
}

enum MacsecMaxSecureAssociationsPerSc {
  MACSEC_MAX_SECURE_ASSOCIATIONS_PER_SC_UNSPECIFIED = 0;
  MACSEC_MAX_SECURE_ASSOCIATIONS_PER_SC_TWO = 1;
  MACSEC_MAX_SECURE_ASSOCIATIONS_PER_SC_FOUR = 2;
}

enum MacsecPortStat {
  MACSEC_PORT_STAT_UNSPECIFIED = 0;
  MACSEC_PORT_STAT_PRE_MACSEC_DROP_PKTS = 1;
  MACSEC_PORT_STAT_CONTROL_PKTS = 2;
  MACSEC_PORT_STAT_DATA_PKTS = 3;
}

enum MacsecSaStat {
  MACSEC_SA_STAT_UNSPECIFIED = 0;
  MACSEC_SA_STAT_OCTETS_ENCRYPTED = 1;
  MACSEC_SA_STAT_OCTETS_PROTECTED = 2;
  MACSEC_SA_STAT_OUT_PKTS_ENCRYPTED = 3;
  MACSEC_SA_STAT_OUT_PKTS_PROTECTED = 4;
  MACSEC_SA_STAT_IN_PKTS_UNCHECKED = 5;
  MACSEC_SA_STAT_IN_PKTS_DELAYED = 6;
  MACSEC_SA_STAT_IN_PKTS_LATE = 7;
  MACSEC_SA_STAT_IN_PKTS_INVALID = 8;
  MACSEC_SA_STAT_IN_PKTS_NOT_VALID = 9;
  MACSEC_SA_STAT_IN_PKTS_NOT_USING_SA = 10;
  MACSEC_SA_STAT_IN_PKTS_UNUSED_SA = 11;
  MACSEC_SA_STAT_IN_PKTS_OK = 12;
}

enum MacsecScStat {
  MACSEC_SC_STAT_UNSPECIFIED = 0;
  MACSEC_SC_STAT_SA_NOT_IN_USE = 1;
}

enum MeterType {
  METER_TYPE_UNSPECIFIED = 0;
  METER_TYPE_PACKETS = 1;
  METER_TYPE_BYTES = 2;
  METER_TYPE_CUSTOM_RANGE_BASE = 3;
}

enum MirrorSessionCongestionMode {
  MIRROR_SESSION_CONGESTION_MODE_UNSPECIFIED = 0;
  MIRROR_SESSION_CONGESTION_MODE_INDEPENDENT = 1;
  MIRROR_SESSION_CONGESTION_MODE_CORRELATED = 2;
}

enum MirrorSessionType {
  MIRROR_SESSION_TYPE_UNSPECIFIED = 0;
  MIRROR_SESSION_TYPE_LOCAL = 1;
  MIRROR_SESSION_TYPE_REMOTE = 2;
  MIRROR_SESSION_TYPE_ENHANCED_REMOTE = 3;
  MIRROR_SESSION_TYPE_SFLOW = 4;
}

enum MySidEntryEndpointBehaviorFlavor {
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_UNSPECIFIED = 0;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_NONE = 1;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP = 2;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_USP = 3;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_USD = 4;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP_AND_USP = 5;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_USD_AND_USP = 6;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP_AND_USD = 7;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_FLAVOR_PSP_AND_USP_AND_USD = 8;
}

enum MySidEntryEndpointBehavior {
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UNSPECIFIED = 0;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_E = 1;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_X = 2;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_T = 3;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DX6 = 4;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DX4 = 5;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DT6 = 6;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DT4 = 7;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_DT46 = 8;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_ENCAPS = 9;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_ENCAPS_RED = 10;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_INSERT = 11;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_B6_INSERT_RED = 12;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UN = 13;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_UA = 14;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_CUSTOM_RANGE_START = 15;
  MY_SID_ENTRY_ENDPOINT_BEHAVIOR_CUSTOM_RANGE_END = 16;
}

enum NatEvent {
  NAT_EVENT_UNSPECIFIED = 0;
  NAT_EVENT_NONE = 1;
  NAT_EVENT_AGED = 2;
}

enum NatType {
  NAT_TYPE_UNSPECIFIED = 0;
  NAT_TYPE_NONE = 1;
  NAT_TYPE_SOURCE_NAT = 2;
  NAT_TYPE_DESTINATION_NAT = 3;
  NAT_TYPE_DOUBLE_NAT = 4;
  NAT_TYPE_DESTINATION_NAT_POOL = 5;
}

enum NativeHashField {
  NATIVE_HASH_FIELD_UNSPECIFIED = 0;
  NATIVE_HASH_FIELD_SRC_IP = 1;
  NATIVE_HASH_FIELD_DST_IP = 2;
  NATIVE_HASH_FIELD_INNER_SRC_IP = 3;
  NATIVE_HASH_FIELD_INNER_DST_IP = 4;
  NATIVE_HASH_FIELD_SRC_IPV4 = 5;
  NATIVE_HASH_FIELD_DST_IPV4 = 6;
  NATIVE_HASH_FIELD_SRC_IPV6 = 7;
  NATIVE_HASH_FIELD_DST_IPV6 = 8;
  NATIVE_HASH_FIELD_INNER_SRC_IPV4 = 9;
  NATIVE_HASH_FIELD_INNER_DST_IPV4 = 10;
  NATIVE_HASH_FIELD_INNER_SRC_IPV6 = 11;
  NATIVE_HASH_FIELD_INNER_DST_IPV6 = 12;
  NATIVE_HASH_FIELD_VLAN_ID = 13;
  NATIVE_HASH_FIELD_IP_PROTOCOL = 14;
  NATIVE_HASH_FIELD_ETHERTYPE = 15;
  NATIVE_HASH_FIELD_L4_SRC_PORT = 16;
  NATIVE_HASH_FIELD_L4_DST_PORT = 17;
  NATIVE_HASH_FIELD_SRC_MAC = 18;
  NATIVE_HASH_FIELD_DST_MAC = 19;
  NATIVE_HASH_FIELD_IN_PORT = 20;
  NATIVE_HASH_FIELD_INNER_IP_PROTOCOL = 21;
  NATIVE_HASH_FIELD_INNER_ETHERTYPE = 22;
  NATIVE_HASH_FIELD_INNER_L4_SRC_PORT = 23;
  NATIVE_HASH_FIELD_INNER_L4_DST_PORT = 24;
  NATIVE_HASH_FIELD_INNER_SRC_MAC = 25;
  NATIVE_HASH_FIELD_INNER_DST_MAC = 26;
  NATIVE_HASH_FIELD_MPLS_LABEL_ALL = 27;
  NATIVE_HASH_FIELD_MPLS_LABEL_0 = 28;
  NATIVE_HASH_FIELD_MPLS_LABEL_1 = 29;
  NATIVE_HASH_FIELD_MPLS_LABEL_2 = 30;
  NATIVE_HASH_FIELD_MPLS_LABEL_3 = 31;
  NATIVE_HASH_FIELD_MPLS_LABEL_4 = 32;
  NATIVE_HASH_FIELD_IPV6_FLOW_LABEL = 33;
  NATIVE_HASH_FIELD_NONE = 34;
}

enum NextHopGroupMapType {
  NEXT_HOP_GROUP_MAP_TYPE_UNSPECIFIED = 0;
  NEXT_HOP_GROUP_MAP_TYPE_FORWARDING_CLASS_TO_INDEX = 1;
}

enum NextHopGroupMemberConfiguredRole {
  NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_UNSPECIFIED = 0;
  NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_PRIMARY = 1;
  NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_STANDBY = 2;
}

enum NextHopGroupMemberObservedRole {
  NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_UNSPECIFIED = 0;
  NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_ACTIVE = 1;
  NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_INACTIVE = 2;
}

enum NextHopGroupType {
  option allow_alias = true;
  NEXT_HOP_GROUP_TYPE_UNSPECIFIED = 0;
  NEXT_HOP_GROUP_TYPE_DYNAMIC_UNORDERED_ECMP = 1;
  NEXT_HOP_GROUP_TYPE_ECMP = 1;
  NEXT_HOP_GROUP_TYPE_DYNAMIC_ORDERED_ECMP = 2;
  NEXT_HOP_GROUP_TYPE_FINE_GRAIN_ECMP = 3;
  NEXT_HOP_GROUP_TYPE_PROTECTION = 4;
  NEXT_HOP_GROUP_TYPE_CLASS_BASED = 5;
}

enum NextHopType {
  NEXT_HOP_TYPE_UNSPECIFIED = 0;
  NEXT_HOP_TYPE_IP = 1;
  NEXT_HOP_TYPE_MPLS = 2;
  NEXT_HOP_TYPE_TUNNEL_ENCAP = 3;
  NEXT_HOP_TYPE_SRV6_SIDLIST = 4;
}

enum ObjectStage {
  OBJECT_STAGE_UNSPECIFIED = 0;
  OBJECT_STAGE_BOTH = 1;
  OBJECT_STAGE_INGRESS = 2;
  OBJECT_STAGE_EGRESS = 3;
}

enum ObjectTypeExtensions {
  option allow_alias = true;
  OBJECT_TYPE_EXTENSIONS_UNSPECIFIED = 0;
  OBJECT_TYPE_EXTENSIONS_RANGE_START = 1;
  OBJECT_TYPE_TABLE_BITMAP_CLASSIFICATION_ENTRY = 1;
  OBJECT_TYPE_TABLE_BITMAP_ROUTER_ENTRY = 2;
  OBJECT_TYPE_TABLE_META_TUNNEL_ENTRY = 3;
  OBJECT_TYPE_EXTENSIONS_RANGE_END = 4;
}

enum ObjectType {
  OBJECT_TYPE_UNSPECIFIED = 0;
  OBJECT_TYPE_NULL = 1;
  OBJECT_TYPE_PORT = 2;
  OBJECT_TYPE_LAG = 3;
  OBJECT_TYPE_VIRTUAL_ROUTER = 4;
  OBJECT_TYPE_NEXT_HOP = 5;
  OBJECT_TYPE_NEXT_HOP_GROUP = 6;
  OBJECT_TYPE_ROUTER_INTERFACE = 7;
  OBJECT_TYPE_ACL_TABLE = 8;
  OBJECT_TYPE_ACL_ENTRY = 9;
  OBJECT_TYPE_ACL_COUNTER = 10;
  OBJECT_TYPE_ACL_RANGE = 11;
  OBJECT_TYPE_ACL_TABLE_GROUP = 12;
  OBJECT_TYPE_ACL_TABLE_GROUP_MEMBER = 13;
  OBJECT_TYPE_HOSTIF = 14;
  OBJECT_TYPE_MIRROR_SESSION = 15;
  OBJECT_TYPE_SAMPLEPACKET = 16;
  OBJECT_TYPE_STP = 17;
  OBJECT_TYPE_HOSTIF_TRAP_GROUP = 18;
  OBJECT_TYPE_POLICER = 19;
  OBJECT_TYPE_WRED = 20;
  OBJECT_TYPE_QOS_MAP = 21;
  OBJECT_TYPE_QUEUE = 22;
  OBJECT_TYPE_SCHEDULER = 23;
  OBJECT_TYPE_SCHEDULER_GROUP = 24;
  OBJECT_TYPE_BUFFER_POOL = 25;
  OBJECT_TYPE_BUFFER_PROFILE = 26;
  OBJECT_TYPE_INGRESS_PRIORITY_GROUP = 27;
  OBJECT_TYPE_LAG_MEMBER = 28;
  OBJECT_TYPE_HASH = 29;
  OBJECT_TYPE_UDF = 30;
  OBJECT_TYPE_UDF_MATCH = 31;
  OBJECT_TYPE_UDF_GROUP = 32;
  OBJECT_TYPE_FDB_ENTRY = 33;
  OBJECT_TYPE_SWITCH = 34;
  OBJECT_TYPE_HOSTIF_TRAP = 35;
  OBJECT_TYPE_HOSTIF_TABLE_ENTRY = 36;
  OBJECT_TYPE_NEIGHBOR_ENTRY = 37;
  OBJECT_TYPE_ROUTE_ENTRY = 38;
  OBJECT_TYPE_VLAN = 39;
  OBJECT_TYPE_VLAN_MEMBER = 40;
  OBJECT_TYPE_HOSTIF_PACKET = 41;
  OBJECT_TYPE_TUNNEL_MAP = 42;
  OBJECT_TYPE_TUNNEL = 43;
  OBJECT_TYPE_TUNNEL_TERM_TABLE_ENTRY = 44;
  OBJECT_TYPE_FDB_FLUSH = 45;
  OBJECT_TYPE_NEXT_HOP_GROUP_MEMBER = 46;
  OBJECT_TYPE_STP_PORT = 47;
  OBJECT_TYPE_RPF_GROUP = 48;
  OBJECT_TYPE_RPF_GROUP_MEMBER = 49;
  OBJECT_TYPE_L2MC_GROUP = 50;
  OBJECT_TYPE_L2MC_GROUP_MEMBER = 51;
  OBJECT_TYPE_IPMC_GROUP = 52;
  OBJECT_TYPE_IPMC_GROUP_MEMBER = 53;
  OBJECT_TYPE_L2MC_ENTRY = 54;
  OBJECT_TYPE_IPMC_ENTRY = 55;
  OBJECT_TYPE_MCAST_FDB_ENTRY = 56;
  OBJECT_TYPE_HOSTIF_USER_DEFINED_TRAP = 57;
  OBJECT_TYPE_BRIDGE = 58;
  OBJECT_TYPE_BRIDGE_PORT = 59;
  OBJECT_TYPE_TUNNEL_MAP_ENTRY = 60;
  OBJECT_TYPE_TAM = 61;
  OBJECT_TYPE_SRV6_SIDLIST = 62;
  OBJECT_TYPE_PORT_POOL = 63;
  OBJECT_TYPE_INSEG_ENTRY = 64;
  OBJECT_TYPE_DTEL = 65;
  OBJECT_TYPE_DTEL_QUEUE_REPORT = 66;
  OBJECT_TYPE_DTEL_INT_SESSION = 67;
  OBJECT_TYPE_DTEL_REPORT_SESSION = 68;
  OBJECT_TYPE_DTEL_EVENT = 69;
  OBJECT_TYPE_BFD_SESSION = 70;
  OBJECT_TYPE_ISOLATION_GROUP = 71;
  OBJECT_TYPE_ISOLATION_GROUP_MEMBER = 72;
  OBJECT_TYPE_TAM_MATH_FUNC = 73;
  OBJECT_TYPE_TAM_REPORT = 74;
  OBJECT_TYPE_TAM_EVENT_THRESHOLD = 75;
  OBJECT_TYPE_TAM_TEL_TYPE = 76;
  OBJECT_TYPE_TAM_TRANSPORT = 77;
  OBJECT_TYPE_TAM_TELEMETRY = 78;
  OBJECT_TYPE_TAM_COLLECTOR = 79;
  OBJECT_TYPE_TAM_EVENT_ACTION = 80;
  OBJECT_TYPE_TAM_EVENT = 81;
  OBJECT_TYPE_NAT_ZONE_COUNTER = 82;
  OBJECT_TYPE_NAT_ENTRY = 83;
  OBJECT_TYPE_TAM_INT = 84;
  OBJECT_TYPE_COUNTER = 85;
  OBJECT_TYPE_DEBUG_COUNTER = 86;
  OBJECT_TYPE_PORT_CONNECTOR = 87;
  OBJECT_TYPE_PORT_SERDES = 88;
  OBJECT_TYPE_MACSEC = 89;
  OBJECT_TYPE_MACSEC_PORT = 90;
  OBJECT_TYPE_MACSEC_FLOW = 91;
  OBJECT_TYPE_MACSEC_SC = 92;
  OBJECT_TYPE_MACSEC_SA = 93;
  OBJECT_TYPE_SYSTEM_PORT = 94;
  OBJECT_TYPE_FINE_GRAINED_HASH_FIELD = 95;
  OBJECT_TYPE_SWITCH_TUNNEL = 96;
  OBJECT_TYPE_MY_SID_ENTRY = 97;
  OBJECT_TYPE_MY_MAC = 98;
  OBJECT_TYPE_NEXT_HOP_GROUP_MAP = 99;
  OBJECT_TYPE_IPSEC = 100;
  OBJECT_TYPE_IPSEC_PORT = 101;
  OBJECT_TYPE_IPSEC_SA = 102;
  OBJECT_TYPE_GENERIC_PROGRAMMABLE = 103;
  OBJECT_TYPE_MAX = 104;
}

enum OutDropReason {
  option allow_alias = true;
  OUT_DROP_REASON_UNSPECIFIED = 0;
  OUT_DROP_REASON_START = 1;
  OUT_DROP_REASON_L2_ANY = 1;
  OUT_DROP_REASON_EGRESS_VLAN_FILTER = 2;
  OUT_DROP_REASON_L3_ANY = 3;
  OUT_DROP_REASON_L3_EGRESS_LINK_DOWN = 4;
  OUT_DROP_REASON_TUNNEL_LOOPBACK_PACKET_DROP = 5;
  OUT_DROP_REASON_END = 6;
  OUT_DROP_REASON_CUSTOM_RANGE_BASE = 7;
  OUT_DROP_REASON_CUSTOM_RANGE_END = 8;
}

enum OutsegExpMode {
  OUTSEG_EXP_MODE_UNSPECIFIED = 0;
  OUTSEG_EXP_MODE_UNIFORM = 1;
  OUTSEG_EXP_MODE_PIPE = 2;
}

enum OutsegTtlMode {
  OUTSEG_TTL_MODE_UNSPECIFIED = 0;
  OUTSEG_TTL_MODE_UNIFORM = 1;
  OUTSEG_TTL_MODE_PIPE = 2;
}

enum OutsegType {
  OUTSEG_TYPE_UNSPECIFIED = 0;
  OUTSEG_TYPE_PUSH = 1;
  OUTSEG_TYPE_SWAP = 2;
}

enum PacketAction {
  PACKET_ACTION_UNSPECIFIED = 0;
  PACKET_ACTION_DROP = 1;
  PACKET_ACTION_FORWARD = 2;
  PACKET_ACTION_COPY = 3;
  PACKET_ACTION_COPY_CANCEL = 4;
  PACKET_ACTION_TRAP = 5;
  PACKET_ACTION_LOG = 6;
  PACKET_ACTION_DENY = 7;
  PACKET_ACTION_TRANSIT = 8;
  PACKET_ACTION_DONOTDROP = 9;
}

enum PacketColor {
  PACKET_COLOR_UNSPECIFIED = 0;
  PACKET_COLOR_GREEN = 1;
  PACKET_COLOR_YELLOW = 2;
  PACKET_COLOR_RED = 3;
}

enum PacketVlan {
  PACKET_VLAN_UNSPECIFIED = 0;
  PACKET_VLAN_UNTAG = 1;
  PACKET_VLAN_SINGLE_OUTER_TAG = 2;
  PACKET_VLAN_DOUBLE_TAG = 3;
}

enum PolicerColorSource {
  POLICER_COLOR_SOURCE_UNSPECIFIED = 0;
  POLICER_COLOR_SOURCE_BLIND = 1;
  POLICER_COLOR_SOURCE_AWARE = 2;
  POLICER_COLOR_SOURCE_CUSTOM_RANGE_BASE = 3;
}

enum PolicerMode {
  POLICER_MODE_UNSPECIFIED = 0;
  POLICER_MODE_SR_TCM = 1;
  POLICER_MODE_TR_TCM = 2;
  POLICER_MODE_STORM_CONTROL = 3;
  POLICER_MODE_CUSTOM_RANGE_BASE = 4;
}

enum PolicerStat {
  POLICER_STAT_UNSPECIFIED = 0;
  POLICER_STAT_PACKETS = 1;
  POLICER_STAT_ATTR_BYTES = 2;
  POLICER_STAT_GREEN_PACKETS = 3;
  POLICER_STAT_GREEN_BYTES = 4;
  POLICER_STAT_YELLOW_PACKETS = 5;
  POLICER_STAT_YELLOW_BYTES = 6;
  POLICER_STAT_RED_PACKETS = 7;
  POLICER_STAT_RED_BYTES = 8;
  POLICER_STAT_CUSTOM_RANGE_BASE = 9;
}

enum PortAutoNegConfigMode {
  PORT_AUTO_NEG_CONFIG_MODE_UNSPECIFIED = 0;
  PORT_AUTO_NEG_CONFIG_MODE_DISABLED = 1;
  PORT_AUTO_NEG_CONFIG_MODE_AUTO = 2;
  PORT_AUTO_NEG_CONFIG_MODE_SLAVE = 3;
  PORT_AUTO_NEG_CONFIG_MODE_MASTER = 4;
}

enum PortBreakoutModeType {
  PORT_BREAKOUT_MODE_TYPE_UNSPECIFIED = 0;
  PORT_BREAKOUT_MODE_TYPE_1_LANE = 1;
  PORT_BREAKOUT_MODE_TYPE_2_LANE = 2;
  PORT_BREAKOUT_MODE_TYPE_4_LANE = 3;
  PORT_BREAKOUT_MODE_TYPE_MAX = 4;
}

enum PortConnectorFailoverMode {
  PORT_CONNECTOR_FAILOVER_MODE_UNSPECIFIED = 0;
  PORT_CONNECTOR_FAILOVER_MODE_DISABLE = 1;
  PORT_CONNECTOR_FAILOVER_MODE_PRIMARY = 2;
  PORT_CONNECTOR_FAILOVER_MODE_SECONDARY = 3;
}

enum PortDualMedia {
  PORT_DUAL_MEDIA_UNSPECIFIED = 0;
  PORT_DUAL_MEDIA_NONE = 1;
  PORT_DUAL_MEDIA_COPPER_ONLY = 2;
  PORT_DUAL_MEDIA_FIBER_ONLY = 3;
  PORT_DUAL_MEDIA_COPPER_PREFERRED = 4;
  PORT_DUAL_MEDIA_FIBER_PREFERRED = 5;
}

enum PortErrStatus {
  PORT_ERR_STATUS_UNSPECIFIED = 0;
  PORT_ERR_STATUS_DATA_UNIT_CRC_ERROR = 1;
  PORT_ERR_STATUS_DATA_UNIT_SIZE = 2;
  PORT_ERR_STATUS_DATA_UNIT_MISALIGNMENT_ERROR = 3;
  PORT_ERR_STATUS_CODE_GROUP_ERROR = 4;
  PORT_ERR_STATUS_SIGNAL_LOCAL_ERROR = 5;
  PORT_ERR_STATUS_NO_RX_REACHABILITY = 6;
  PORT_ERR_STATUS_CRC_RATE = 7;
  PORT_ERR_STATUS_REMOTE_FAULT_STATUS = 8;
  PORT_ERR_STATUS_MAX = 9;
}

enum PortFecModeExtended {
  PORT_FEC_MODE_EXTENDED_UNSPECIFIED = 0;
  PORT_FEC_MODE_EXTENDED_NONE = 1;
  PORT_FEC_MODE_EXTENDED_RS528 = 2;
  PORT_FEC_MODE_EXTENDED_RS544 = 3;
  PORT_FEC_MODE_EXTENDED_RS544_INTERLEAVED = 4;
  PORT_FEC_MODE_EXTENDED_FC = 5;
}

enum PortFecMode {
  PORT_FEC_MODE_UNSPECIFIED = 0;
  PORT_FEC_MODE_NONE = 1;
  PORT_FEC_MODE_RS = 2;
  PORT_FEC_MODE_FC = 3;
}

enum PortFlowControlMode {
  PORT_FLOW_CONTROL_MODE_UNSPECIFIED = 0;
  PORT_FLOW_CONTROL_MODE_DISABLE = 1;
  PORT_FLOW_CONTROL_MODE_TX_ONLY = 2;
  PORT_FLOW_CONTROL_MODE_RX_ONLY = 3;
  PORT_FLOW_CONTROL_MODE_BOTH_ENABLE = 4;
}

enum PortInterfaceType {
  PORT_INTERFACE_TYPE_UNSPECIFIED = 0;
  PORT_INTERFACE_TYPE_NONE = 1;
  PORT_INTERFACE_TYPE_CR = 2;
  PORT_INTERFACE_TYPE_CR2 = 3;
  PORT_INTERFACE_TYPE_CR4 = 4;
  PORT_INTERFACE_TYPE_SR = 5;
  PORT_INTERFACE_TYPE_SR2 = 6;
  PORT_INTERFACE_TYPE_SR4 = 7;
  PORT_INTERFACE_TYPE_LR = 8;
  PORT_INTERFACE_TYPE_LR4 = 9;
  PORT_INTERFACE_TYPE_KR = 10;
  PORT_INTERFACE_TYPE_KR4 = 11;
  PORT_INTERFACE_TYPE_CAUI = 12;
  PORT_INTERFACE_TYPE_GMII = 13;
  PORT_INTERFACE_TYPE_SFI = 14;
  PORT_INTERFACE_TYPE_XLAUI = 15;
  PORT_INTERFACE_TYPE_KR2 = 16;
  PORT_INTERFACE_TYPE_CAUI4 = 17;
  PORT_INTERFACE_TYPE_XAUI = 18;
  PORT_INTERFACE_TYPE_XFI = 19;
  PORT_INTERFACE_TYPE_XGMII = 20;
  PORT_INTERFACE_TYPE_CR8 = 21;
  PORT_INTERFACE_TYPE_KR8 = 22;
  PORT_INTERFACE_TYPE_SR8 = 23;
  PORT_INTERFACE_TYPE_LR8 = 24;
  PORT_INTERFACE_TYPE_MAX = 25;
}

enum PortInternalLoopbackMode {
  PORT_INTERNAL_LOOPBACK_MODE_UNSPECIFIED = 0;
  PORT_INTERNAL_LOOPBACK_MODE_NONE = 1;
  PORT_INTERNAL_LOOPBACK_MODE_PHY = 2;
  PORT_INTERNAL_LOOPBACK_MODE_MAC = 3;
}

enum PortLinkTrainingFailureStatus {
  PORT_LINK_TRAINING_FAILURE_STATUS_UNSPECIFIED = 0;
  PORT_LINK_TRAINING_FAILURE_STATUS_NO_ERROR = 1;
  PORT_LINK_TRAINING_FAILURE_STATUS_FRAME_LOCK_ERROR = 2;
  PORT_LINK_TRAINING_FAILURE_STATUS_SNR_LOWER_THRESHOLD = 3;
  PORT_LINK_TRAINING_FAILURE_STATUS_TIME_OUT = 4;
}

enum PortLinkTrainingRxStatus {
  PORT_LINK_TRAINING_RX_STATUS_UNSPECIFIED = 0;
  PORT_LINK_TRAINING_RX_STATUS_NOT_TRAINED = 1;
  PORT_LINK_TRAINING_RX_STATUS_TRAINED = 2;
}

enum PortLoopbackMode {
  PORT_LOOPBACK_MODE_UNSPECIFIED = 0;
  PORT_LOOPBACK_MODE_NONE = 1;
  PORT_LOOPBACK_MODE_PHY = 2;
  PORT_LOOPBACK_MODE_MAC = 3;
  PORT_LOOPBACK_MODE_PHY_REMOTE = 4;
}

enum PortMdixModeConfig {
  PORT_MDIX_MODE_CONFIG_UNSPECIFIED = 0;
  PORT_MDIX_MODE_CONFIG_AUTO = 1;
  PORT_MDIX_MODE_CONFIG_STRAIGHT = 2;
  PORT_MDIX_MODE_CONFIG_CROSSOVER = 3;
}

enum PortMdixModeStatus {
  PORT_MDIX_MODE_STATUS_UNSPECIFIED = 0;
  PORT_MDIX_MODE_STATUS_STRAIGHT = 1;
  PORT_MDIX_MODE_STATUS_CROSSOVER = 2;
}

enum PortMediaType {
  PORT_MEDIA_TYPE_UNSPECIFIED = 0;
  PORT_MEDIA_TYPE_NOT_PRESENT = 1;
  PORT_MEDIA_TYPE_UNKNOWN = 2;
  PORT_MEDIA_TYPE_FIBER = 3;
  PORT_MEDIA_TYPE_COPPER = 4;
  PORT_MEDIA_TYPE_BACKPLANE = 5;
}

enum PortModuleType {
  PORT_MODULE_TYPE_UNSPECIFIED = 0;
  PORT_MODULE_TYPE_1000BASE_X = 1;
  PORT_MODULE_TYPE_100FX = 2;
  PORT_MODULE_TYPE_SGMII_SLAVE = 3;
}

enum PortOperStatus {
  PORT_OPER_STATUS_UNSPECIFIED = 0;
  PORT_OPER_STATUS_UNKNOWN = 1;
  PORT_OPER_STATUS_UP = 2;
  PORT_OPER_STATUS_DOWN = 3;
  PORT_OPER_STATUS_TESTING = 4;
  PORT_OPER_STATUS_NOT_PRESENT = 5;
}

enum PortPoolStat {
  PORT_POOL_STAT_UNSPECIFIED = 0;
  PORT_POOL_STAT_IF_OCTETS = 1;
  PORT_POOL_STAT_GREEN_WRED_DROPPED_PACKETS = 2;
  PORT_POOL_STAT_GREEN_WRED_DROPPED_BYTES = 3;
  PORT_POOL_STAT_YELLOW_WRED_DROPPED_PACKETS = 4;
  PORT_POOL_STAT_YELLOW_WRED_DROPPED_BYTES = 5;
  PORT_POOL_STAT_RED_WRED_DROPPED_PACKETS = 6;
  PORT_POOL_STAT_RED_WRED_DROPPED_BYTES = 7;
  PORT_POOL_STAT_WRED_DROPPED_PACKETS = 8;
  PORT_POOL_STAT_WRED_DROPPED_BYTES = 9;
  PORT_POOL_STAT_GREEN_WRED_ECN_MARKED_PACKETS = 10;
  PORT_POOL_STAT_GREEN_WRED_ECN_MARKED_BYTES = 11;
  PORT_POOL_STAT_YELLOW_WRED_ECN_MARKED_PACKETS = 12;
  PORT_POOL_STAT_YELLOW_WRED_ECN_MARKED_BYTES = 13;
  PORT_POOL_STAT_RED_WRED_ECN_MARKED_PACKETS = 14;
  PORT_POOL_STAT_RED_WRED_ECN_MARKED_BYTES = 15;
  PORT_POOL_STAT_WRED_ECN_MARKED_PACKETS = 16;
  PORT_POOL_STAT_WRED_ECN_MARKED_BYTES = 17;
  PORT_POOL_STAT_CURR_OCCUPANCY_BYTES = 18;
  PORT_POOL_STAT_WATERMARK_BYTES = 19;
  PORT_POOL_STAT_SHARED_CURR_OCCUPANCY_BYTES = 20;
  PORT_POOL_STAT_SHARED_WATERMARK_BYTES = 21;
  PORT_POOL_STAT_DROPPED_PKTS = 22;
}

enum PortPrbsConfig {
  PORT_PRBS_CONFIG_UNSPECIFIED = 0;
  PORT_PRBS_CONFIG_DISABLE = 1;
  PORT_PRBS_CONFIG_ENABLE_TX_RX = 2;
  PORT_PRBS_CONFIG_ENABLE_RX = 3;
  PORT_PRBS_CONFIG_ENABLE_TX = 4;
}

enum PortPrbsRxStatus {
  PORT_PRBS_RX_STATUS_UNSPECIFIED = 0;
  PORT_PRBS_RX_STATUS_OK = 1;
  PORT_PRBS_RX_STATUS_LOCK_WITH_ERRORS = 2;
  PORT_PRBS_RX_STATUS_NOT_LOCKED = 3;
  PORT_PRBS_RX_STATUS_LOST_LOCK = 4;
}

enum PortPriorityFlowControlMode {
  PORT_PRIORITY_FLOW_CONTROL_MODE_UNSPECIFIED = 0;
  PORT_PRIORITY_FLOW_CONTROL_MODE_COMBINED = 1;
  PORT_PRIORITY_FLOW_CONTROL_MODE_SEPARATE = 2;
}

enum PortPtpMode {
  PORT_PTP_MODE_UNSPECIFIED = 0;
  PORT_PTP_MODE_NONE = 1;
  PORT_PTP_MODE_SINGLE_STEP_TIMESTAMP = 2;
  PORT_PTP_MODE_TWO_STEP_TIMESTAMP = 3;
}

enum PortStat {
  option allow_alias = true;
  PORT_STAT_UNSPECIFIED = 0;
  PORT_STAT_IF_IN_OCTETS = 1;
  PORT_STAT_IF_IN_UCAST_PKTS = 2;
  PORT_STAT_IF_IN_NON_UCAST_PKTS = 3;
  PORT_STAT_IF_IN_DISCARDS = 4;
  PORT_STAT_IF_IN_ERRORS = 5;
  PORT_STAT_IF_IN_UNKNOWN_PROTOS = 6;
  PORT_STAT_IF_IN_BROADCAST_PKTS = 7;
  PORT_STAT_IF_IN_MULTICAST_PKTS = 8;
  PORT_STAT_IF_IN_VLAN_DISCARDS = 9;
  PORT_STAT_IF_OUT_OCTETS = 10;
  PORT_STAT_IF_OUT_UCAST_PKTS = 11;
  PORT_STAT_IF_OUT_NON_UCAST_PKTS = 12;
  PORT_STAT_IF_OUT_DISCARDS = 13;
  PORT_STAT_IF_OUT_ERRORS = 14;
  PORT_STAT_IF_OUT_QLEN = 15;
  PORT_STAT_IF_OUT_BROADCAST_PKTS = 16;
  PORT_STAT_IF_OUT_MULTICAST_PKTS = 17;
  PORT_STAT_ETHER_STATS_DROP_EVENTS = 18;
  PORT_STAT_ETHER_STATS_MULTICAST_PKTS = 19;
  PORT_STAT_ETHER_STATS_BROADCAST_PKTS = 20;
  PORT_STAT_ETHER_STATS_UNDERSIZE_PKTS = 21;
  PORT_STAT_ETHER_STATS_FRAGMENTS = 22;
  PORT_STAT_ETHER_STATS_PKTS_64_OCTETS = 23;
  PORT_STAT_ETHER_STATS_PKTS_65_TO_127_OCTETS = 24;
  PORT_STAT_ETHER_STATS_PKTS_128_TO_255_OCTETS = 25;
  PORT_STAT_ETHER_STATS_PKTS_256_TO_511_OCTETS = 26;
  PORT_STAT_ETHER_STATS_PKTS_512_TO_1023_OCTETS = 27;
  PORT_STAT_ETHER_STATS_PKTS_1024_TO_1518_OCTETS = 28;
  PORT_STAT_ETHER_STATS_PKTS_1519_TO_2047_OCTETS = 29;
  PORT_STAT_ETHER_STATS_PKTS_2048_TO_4095_OCTETS = 30;
  PORT_STAT_ETHER_STATS_PKTS_4096_TO_9216_OCTETS = 31;
  PORT_STAT_ETHER_STATS_PKTS_9217_TO_16383_OCTETS = 32;
  PORT_STAT_ETHER_STATS_OVERSIZE_PKTS = 33;
  PORT_STAT_ETHER_RX_OVERSIZE_PKTS = 34;
  PORT_STAT_ETHER_TX_OVERSIZE_PKTS = 35;
  PORT_STAT_ETHER_STATS_JABBERS = 36;
  PORT_STAT_ETHER_STATS_OCTETS = 37;
  PORT_STAT_ETHER_STATS_PKTS = 38;
  PORT_STAT_ETHER_STATS_COLLISIONS = 39;
  PORT_STAT_ETHER_STATS_CRC_ALIGN_ERRORS = 40;
  PORT_STAT_ETHER_STATS_TX_NO_ERRORS = 41;
  PORT_STAT_ETHER_STATS_RX_NO_ERRORS = 42;
  PORT_STAT_IP_IN_RECEIVES = 43;
  PORT_STAT_IP_IN_OCTETS = 44;
  PORT_STAT_IP_IN_UCAST_PKTS = 45;
  PORT_STAT_IP_IN_NON_UCAST_PKTS = 46;
  PORT_STAT_IP_IN_DISCARDS = 47;
  PORT_STAT_IP_OUT_OCTETS = 48;
  PORT_STAT_IP_OUT_UCAST_PKTS = 49;
  PORT_STAT_IP_OUT_NON_UCAST_PKTS = 50;
  PORT_STAT_IP_OUT_DISCARDS = 51;
  PORT_STAT_IPV6_IN_RECEIVES = 52;
  PORT_STAT_IPV6_IN_OCTETS = 53;
  PORT_STAT_IPV6_IN_UCAST_PKTS = 54;
  PORT_STAT_IPV6_IN_NON_UCAST_PKTS = 55;
  PORT_STAT_IPV6_IN_MCAST_PKTS = 56;
  PORT_STAT_IPV6_IN_DISCARDS = 57;
  PORT_STAT_IPV6_OUT_OCTETS = 58;
  PORT_STAT_IPV6_OUT_UCAST_PKTS = 59;
  PORT_STAT_IPV6_OUT_NON_UCAST_PKTS = 60;
  PORT_STAT_IPV6_OUT_MCAST_PKTS = 61;
  PORT_STAT_IPV6_OUT_DISCARDS = 62;
  PORT_STAT_GREEN_WRED_DROPPED_PACKETS = 63;
  PORT_STAT_GREEN_WRED_DROPPED_BYTES = 64;
  PORT_STAT_YELLOW_WRED_DROPPED_PACKETS = 65;
  PORT_STAT_YELLOW_WRED_DROPPED_BYTES = 66;
  PORT_STAT_RED_WRED_DROPPED_PACKETS = 67;
  PORT_STAT_RED_WRED_DROPPED_BYTES = 68;
  PORT_STAT_WRED_DROPPED_PACKETS = 69;
  PORT_STAT_WRED_DROPPED_BYTES = 70;
  PORT_STAT_ECN_MARKED_PACKETS = 71;
  PORT_STAT_ETHER_IN_PKTS_64_OCTETS = 72;
  PORT_STAT_ETHER_IN_PKTS_65_TO_127_OCTETS = 73;
  PORT_STAT_ETHER_IN_PKTS_128_TO_255_OCTETS = 74;
  PORT_STAT_ETHER_IN_PKTS_256_TO_511_OCTETS = 75;
  PORT_STAT_ETHER_IN_PKTS_512_TO_1023_OCTETS = 76;
  PORT_STAT_ETHER_IN_PKTS_1024_TO_1518_OCTETS = 77;
  PORT_STAT_ETHER_IN_PKTS_1519_TO_2047_OCTETS = 78;
  PORT_STAT_ETHER_IN_PKTS_2048_TO_4095_OCTETS = 79;
  PORT_STAT_ETHER_IN_PKTS_4096_TO_9216_OCTETS = 80;
  PORT_STAT_ETHER_IN_PKTS_9217_TO_16383_OCTETS = 81;
  PORT_STAT_ETHER_OUT_PKTS_64_OCTETS = 82;
  PORT_STAT_ETHER_OUT_PKTS_65_TO_127_OCTETS = 83;
  PORT_STAT_ETHER_OUT_PKTS_128_TO_255_OCTETS = 84;
  PORT_STAT_ETHER_OUT_PKTS_256_TO_511_OCTETS = 85;
  PORT_STAT_ETHER_OUT_PKTS_512_TO_1023_OCTETS = 86;
  PORT_STAT_ETHER_OUT_PKTS_1024_TO_1518_OCTETS = 87;
  PORT_STAT_ETHER_OUT_PKTS_1519_TO_2047_OCTETS = 88;
  PORT_STAT_ETHER_OUT_PKTS_2048_TO_4095_OCTETS = 89;
  PORT_STAT_ETHER_OUT_PKTS_4096_TO_9216_OCTETS = 90;
  PORT_STAT_ETHER_OUT_PKTS_9217_TO_16383_OCTETS = 91;
  PORT_STAT_IN_CURR_OCCUPANCY_BYTES = 92;
  PORT_STAT_IN_WATERMARK_BYTES = 93;
  PORT_STAT_IN_SHARED_CURR_OCCUPANCY_BYTES = 94;
  PORT_STAT_IN_SHARED_WATERMARK_BYTES = 95;
  PORT_STAT_OUT_CURR_OCCUPANCY_BYTES = 96;
  PORT_STAT_OUT_WATERMARK_BYTES = 97;
  PORT_STAT_OUT_SHARED_CURR_OCCUPANCY_BYTES = 98;
  PORT_STAT_OUT_SHARED_WATERMARK_BYTES = 99;
  PORT_STAT_IN_DROPPED_PKTS = 100;
  PORT_STAT_OUT_DROPPED_PKTS = 101;
  PORT_STAT_PAUSE_RX_PKTS = 102;
  PORT_STAT_PAUSE_TX_PKTS = 103;
  PORT_STAT_PFC_0_RX_PKTS = 104;
  PORT_STAT_PFC_0_TX_PKTS = 105;
  PORT_STAT_PFC_1_RX_PKTS = 106;
  PORT_STAT_PFC_1_TX_PKTS = 107;
  PORT_STAT_PFC_2_RX_PKTS = 108;
  PORT_STAT_PFC_2_TX_PKTS = 109;
  PORT_STAT_PFC_3_RX_PKTS = 110;
  PORT_STAT_PFC_3_TX_PKTS = 111;
  PORT_STAT_PFC_4_RX_PKTS = 112;
  PORT_STAT_PFC_4_TX_PKTS = 113;
  PORT_STAT_PFC_5_RX_PKTS = 114;
  PORT_STAT_PFC_5_TX_PKTS = 115;
  PORT_STAT_PFC_6_RX_PKTS = 116;
  PORT_STAT_PFC_6_TX_PKTS = 117;
  PORT_STAT_PFC_7_RX_PKTS = 118;
  PORT_STAT_PFC_7_TX_PKTS = 119;
  PORT_STAT_PFC_0_RX_PAUSE_DURATION = 120;
  PORT_STAT_PFC_0_TX_PAUSE_DURATION = 121;
  PORT_STAT_PFC_1_RX_PAUSE_DURATION = 122;
  PORT_STAT_PFC_1_TX_PAUSE_DURATION = 123;
  PORT_STAT_PFC_2_RX_PAUSE_DURATION = 124;
  PORT_STAT_PFC_2_TX_PAUSE_DURATION = 125;
  PORT_STAT_PFC_3_RX_PAUSE_DURATION = 126;
  PORT_STAT_PFC_3_TX_PAUSE_DURATION = 127;
  PORT_STAT_PFC_4_RX_PAUSE_DURATION = 128;
  PORT_STAT_PFC_4_TX_PAUSE_DURATION = 129;
  PORT_STAT_PFC_5_RX_PAUSE_DURATION = 130;
  PORT_STAT_PFC_5_TX_PAUSE_DURATION = 131;
  PORT_STAT_PFC_6_RX_PAUSE_DURATION = 132;
  PORT_STAT_PFC_6_TX_PAUSE_DURATION = 133;
  PORT_STAT_PFC_7_RX_PAUSE_DURATION = 134;
  PORT_STAT_PFC_7_TX_PAUSE_DURATION = 135;
  PORT_STAT_PFC_0_RX_PAUSE_DURATION_US = 136;
  PORT_STAT_PFC_0_TX_PAUSE_DURATION_US = 137;
  PORT_STAT_PFC_1_RX_PAUSE_DURATION_US = 138;
  PORT_STAT_PFC_1_TX_PAUSE_DURATION_US = 139;
  PORT_STAT_PFC_2_RX_PAUSE_DURATION_US = 140;
  PORT_STAT_PFC_2_TX_PAUSE_DURATION_US = 141;
  PORT_STAT_PFC_3_RX_PAUSE_DURATION_US = 142;
  PORT_STAT_PFC_3_TX_PAUSE_DURATION_US = 143;
  PORT_STAT_PFC_4_RX_PAUSE_DURATION_US = 144;
  PORT_STAT_PFC_4_TX_PAUSE_DURATION_US = 145;
  PORT_STAT_PFC_5_RX_PAUSE_DURATION_US = 146;
  PORT_STAT_PFC_5_TX_PAUSE_DURATION_US = 147;
  PORT_STAT_PFC_6_RX_PAUSE_DURATION_US = 148;
  PORT_STAT_PFC_6_TX_PAUSE_DURATION_US = 149;
  PORT_STAT_PFC_7_RX_PAUSE_DURATION_US = 150;
  PORT_STAT_PFC_7_TX_PAUSE_DURATION_US = 151;
  PORT_STAT_PFC_0_ON2OFF_RX_PKTS = 152;
  PORT_STAT_PFC_1_ON2OFF_RX_PKTS = 153;
  PORT_STAT_PFC_2_ON2OFF_RX_PKTS = 154;
  PORT_STAT_PFC_3_ON2OFF_RX_PKTS = 155;
  PORT_STAT_PFC_4_ON2OFF_RX_PKTS = 156;
  PORT_STAT_PFC_5_ON2OFF_RX_PKTS = 157;
  PORT_STAT_PFC_6_ON2OFF_RX_PKTS = 158;
  PORT_STAT_PFC_7_ON2OFF_RX_PKTS = 159;
  PORT_STAT_DOT3_STATS_ALIGNMENT_ERRORS = 160;
  PORT_STAT_DOT3_STATS_FCS_ERRORS = 161;
  PORT_STAT_DOT3_STATS_SINGLE_COLLISION_FRAMES = 162;
  PORT_STAT_DOT3_STATS_MULTIPLE_COLLISION_FRAMES = 163;
  PORT_STAT_DOT3_STATS_SQE_TEST_ERRORS = 164;
  PORT_STAT_DOT3_STATS_DEFERRED_TRANSMISSIONS = 165;
  PORT_STAT_DOT3_STATS_LATE_COLLISIONS = 166;
  PORT_STAT_DOT3_STATS_EXCESSIVE_COLLISIONS = 167;
  PORT_STAT_DOT3_STATS_INTERNAL_MAC_TRANSMIT_ERRORS = 168;
  PORT_STAT_DOT3_STATS_CARRIER_SENSE_ERRORS = 169;
  PORT_STAT_DOT3_STATS_FRAME_TOO_LONGS = 170;
  PORT_STAT_DOT3_STATS_INTERNAL_MAC_RECEIVE_ERRORS = 171;
  PORT_STAT_DOT3_STATS_SYMBOL_ERRORS = 172;
  PORT_STAT_DOT3_CONTROL_IN_UNKNOWN_OPCODES = 173;
  PORT_STAT_EEE_TX_EVENT_COUNT = 174;
  PORT_STAT_EEE_RX_EVENT_COUNT = 175;
  PORT_STAT_EEE_TX_DURATION = 176;
  PORT_STAT_EEE_RX_DURATION = 177;
  PORT_STAT_PRBS_ERROR_COUNT = 178;
  PORT_STAT_IF_IN_FEC_CORRECTABLE_FRAMES = 179;
  PORT_STAT_IF_IN_FEC_NOT_CORRECTABLE_FRAMES = 180;
  PORT_STAT_IF_IN_FEC_SYMBOL_ERRORS = 181;
  PORT_STAT_IF_IN_FABRIC_DATA_UNITS = 182;
  PORT_STAT_IF_OUT_FABRIC_DATA_UNITS = 183;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S0 = 184;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S1 = 185;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S2 = 186;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S3 = 187;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S4 = 188;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S5 = 189;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S6 = 190;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S7 = 191;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S8 = 192;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S9 = 193;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S10 = 194;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S11 = 195;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S12 = 196;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S13 = 197;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S14 = 198;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S15 = 199;
  PORT_STAT_IF_IN_FEC_CODEWORD_ERRORS_S16 = 200;
  PORT_STAT_IN_DROP_REASON_RANGE_BASE = 201;
  PORT_STAT_IN_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS = 201;
  PORT_STAT_IN_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS = 202;
  PORT_STAT_IN_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS = 203;
  PORT_STAT_IN_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS = 204;
  PORT_STAT_IN_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS = 205;
  PORT_STAT_IN_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS = 206;
  PORT_STAT_IN_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS = 207;
  PORT_STAT_IN_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS = 208;
  PORT_STAT_IN_DROP_REASON_RANGE_END = 209;
  PORT_STAT_OUT_DROP_REASON_RANGE_BASE = 210;
  PORT_STAT_OUT_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS = 210;
  PORT_STAT_OUT_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS = 211;
  PORT_STAT_OUT_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS = 212;
  PORT_STAT_OUT_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS = 213;
  PORT_STAT_OUT_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS = 214;
  PORT_STAT_OUT_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS = 215;
  PORT_STAT_OUT_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS = 216;
  PORT_STAT_OUT_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS = 217;
  PORT_STAT_OUT_DROP_REASON_RANGE_END = 218;
}

enum PortType {
  PORT_TYPE_UNSPECIFIED = 0;
  PORT_TYPE_LOGICAL = 1;
  PORT_TYPE_CPU = 2;
  PORT_TYPE_FABRIC = 3;
  PORT_TYPE_RECYCLE = 4;
}

enum QosMapType {
  QOS_MAP_TYPE_UNSPECIFIED = 0;
  QOS_MAP_TYPE_DOT1P_TO_TC = 1;
  QOS_MAP_TYPE_DOT1P_TO_COLOR = 2;
  QOS_MAP_TYPE_DSCP_TO_TC = 3;
  QOS_MAP_TYPE_DSCP_TO_COLOR = 4;
  QOS_MAP_TYPE_TC_TO_QUEUE = 5;
  QOS_MAP_TYPE_TC_AND_COLOR_TO_DSCP = 6;
  QOS_MAP_TYPE_TC_AND_COLOR_TO_DOT1P = 7;
  QOS_MAP_TYPE_TC_TO_PRIORITY_GROUP = 8;
  QOS_MAP_TYPE_PFC_PRIORITY_TO_PRIORITY_GROUP = 9;
  QOS_MAP_TYPE_PFC_PRIORITY_TO_QUEUE = 10;
  QOS_MAP_TYPE_MPLS_EXP_TO_TC = 11;
  QOS_MAP_TYPE_MPLS_EXP_TO_COLOR = 12;
  QOS_MAP_TYPE_TC_AND_COLOR_TO_MPLS_EXP = 13;
  QOS_MAP_TYPE_DSCP_TO_FORWARDING_CLASS = 14;
  QOS_MAP_TYPE_MPLS_EXP_TO_FORWARDING_CLASS = 15;
  QOS_MAP_TYPE_CUSTOM_RANGE_BASE = 16;
}

enum QueuePfcContinuousDeadlockState {
  QUEUE_PFC_CONTINUOUS_DEADLOCK_STATE_UNSPECIFIED = 0;
  QUEUE_PFC_CONTINUOUS_DEADLOCK_STATE_NOT_PAUSED = 1;
  QUEUE_PFC_CONTINUOUS_DEADLOCK_STATE_PAUSED = 2;
  QUEUE_PFC_CONTINUOUS_DEADLOCK_STATE_PAUSED_NOT_CONTINUOUS = 3;
}

enum QueuePfcDeadlockEventType {
  QUEUE_PFC_DEADLOCK_EVENT_TYPE_UNSPECIFIED = 0;
  QUEUE_PFC_DEADLOCK_EVENT_TYPE_DETECTED = 1;
  QUEUE_PFC_DEADLOCK_EVENT_TYPE_RECOVERED = 2;
}

enum QueueStat {
  QUEUE_STAT_UNSPECIFIED = 0;
  QUEUE_STAT_PACKETS = 1;
  QUEUE_STAT_BYTES = 2;
  QUEUE_STAT_DROPPED_PACKETS = 3;
  QUEUE_STAT_DROPPED_BYTES = 4;
  QUEUE_STAT_GREEN_PACKETS = 5;
  QUEUE_STAT_GREEN_BYTES = 6;
  QUEUE_STAT_GREEN_DROPPED_PACKETS = 7;
  QUEUE_STAT_GREEN_DROPPED_BYTES = 8;
  QUEUE_STAT_YELLOW_PACKETS = 9;
  QUEUE_STAT_YELLOW_BYTES = 10;
  QUEUE_STAT_YELLOW_DROPPED_PACKETS = 11;
  QUEUE_STAT_YELLOW_DROPPED_BYTES = 12;
  QUEUE_STAT_RED_PACKETS = 13;
  QUEUE_STAT_RED_BYTES = 14;
  QUEUE_STAT_RED_DROPPED_PACKETS = 15;
  QUEUE_STAT_RED_DROPPED_BYTES = 16;
  QUEUE_STAT_GREEN_WRED_DROPPED_PACKETS = 17;
  QUEUE_STAT_GREEN_WRED_DROPPED_BYTES = 18;
  QUEUE_STAT_YELLOW_WRED_DROPPED_PACKETS = 19;
  QUEUE_STAT_YELLOW_WRED_DROPPED_BYTES = 20;
  QUEUE_STAT_RED_WRED_DROPPED_PACKETS = 21;
  QUEUE_STAT_RED_WRED_DROPPED_BYTES = 22;
  QUEUE_STAT_WRED_DROPPED_PACKETS = 23;
  QUEUE_STAT_WRED_DROPPED_BYTES = 24;
  QUEUE_STAT_CURR_OCCUPANCY_BYTES = 25;
  QUEUE_STAT_WATERMARK_BYTES = 26;
  QUEUE_STAT_SHARED_CURR_OCCUPANCY_BYTES = 27;
  QUEUE_STAT_SHARED_WATERMARK_BYTES = 28;
  QUEUE_STAT_GREEN_WRED_ECN_MARKED_PACKETS = 29;
  QUEUE_STAT_GREEN_WRED_ECN_MARKED_BYTES = 30;
  QUEUE_STAT_YELLOW_WRED_ECN_MARKED_PACKETS = 31;
  QUEUE_STAT_YELLOW_WRED_ECN_MARKED_BYTES = 32;
  QUEUE_STAT_RED_WRED_ECN_MARKED_PACKETS = 33;
  QUEUE_STAT_RED_WRED_ECN_MARKED_BYTES = 34;
  QUEUE_STAT_WRED_ECN_MARKED_PACKETS = 35;
  QUEUE_STAT_WRED_ECN_MARKED_BYTES = 36;
  QUEUE_STAT_CURR_OCCUPANCY_LEVEL = 37;
  QUEUE_STAT_WATERMARK_LEVEL = 38;
  QUEUE_STAT_CUSTOM_RANGE_BASE = 39;
}

enum QueueType {
  QUEUE_TYPE_UNSPECIFIED = 0;
  QUEUE_TYPE_ALL = 1;
  QUEUE_TYPE_UNICAST = 2;
  QUEUE_TYPE_MULTICAST = 3;
  QUEUE_TYPE_UNICAST_VOQ = 4;
  QUEUE_TYPE_MULTICAST_VOQ = 5;
  QUEUE_TYPE_FABRIC_TX = 6;
  QUEUE_TYPE_CUSTOM_RANGE_BASE = 7;
}

enum RouterInterfaceStat {
  ROUTER_INTERFACE_STAT_UNSPECIFIED = 0;
  ROUTER_INTERFACE_STAT_IN_OCTETS = 1;
  ROUTER_INTERFACE_STAT_IN_PACKETS = 2;
  ROUTER_INTERFACE_STAT_OUT_OCTETS = 3;
  ROUTER_INTERFACE_STAT_OUT_PACKETS = 4;
  ROUTER_INTERFACE_STAT_IN_ERROR_OCTETS = 5;
  ROUTER_INTERFACE_STAT_IN_ERROR_PACKETS = 6;
  ROUTER_INTERFACE_STAT_OUT_ERROR_OCTETS = 7;
  ROUTER_INTERFACE_STAT_OUT_ERROR_PACKETS = 8;
}

enum RouterInterfaceType {
  ROUTER_INTERFACE_TYPE_UNSPECIFIED = 0;
  ROUTER_INTERFACE_TYPE_PORT = 1;
  ROUTER_INTERFACE_TYPE_VLAN = 2;
  ROUTER_INTERFACE_TYPE_LOOPBACK = 3;
  ROUTER_INTERFACE_TYPE_MPLS_ROUTER = 4;
  ROUTER_INTERFACE_TYPE_SUB_PORT = 5;
  ROUTER_INTERFACE_TYPE_BRIDGE = 6;
  ROUTER_INTERFACE_TYPE_QINQ_PORT = 7;
}

enum SamplepacketMode {
  SAMPLEPACKET_MODE_UNSPECIFIED = 0;
  SAMPLEPACKET_MODE_EXCLUSIVE = 1;
  SAMPLEPACKET_MODE_SHARED = 2;
}

enum SamplepacketType {
  SAMPLEPACKET_TYPE_UNSPECIFIED = 0;
  SAMPLEPACKET_TYPE_SLOW_PATH = 1;
  SAMPLEPACKET_TYPE_MIRROR_SESSION = 2;
}

enum SchedulingType {
  SCHEDULING_TYPE_UNSPECIFIED = 0;
  SCHEDULING_TYPE_STRICT = 1;
  SCHEDULING_TYPE_WRR = 2;
  SCHEDULING_TYPE_DWRR = 3;
}

enum Srv6SidlistType {
  SRV6_SIDLIST_TYPE_UNSPECIFIED = 0;
  SRV6_SIDLIST_TYPE_INSERT = 1;
  SRV6_SIDLIST_TYPE_INSERT_RED = 2;
  SRV6_SIDLIST_TYPE_ENCAPS = 3;
  SRV6_SIDLIST_TYPE_ENCAPS_RED = 4;
  SRV6_SIDLIST_TYPE_CUSTOM_RANGE_BASE = 5;
}

enum StatsMode {
  STATS_MODE_UNSPECIFIED = 0;
  STATS_MODE_READ = 1;
  STATS_MODE_READ_AND_CLEAR = 2;
  STATS_MODE_BULK_READ = 3;
  STATS_MODE_BULK_CLEAR = 4;
  STATS_MODE_BULK_READ_AND_CLEAR = 5;
}

enum StpPortState {
  STP_PORT_STATE_UNSPECIFIED = 0;
  STP_PORT_STATE_LEARNING = 1;
  STP_PORT_STATE_FORWARDING = 2;
  STP_PORT_STATE_BLOCKING = 3;
}

enum SwitchAttrExtensions {
  SWITCH_ATTR_EXTENSIONS_UNSPECIFIED = 0;
  SWITCH_ATTR_EXTENSIONS_RANGE_START = 1;
  SWITCH_ATTR_EXTENSIONS_RANGE_END = 2;
}

enum SwitchFailoverConfigMode {
  SWITCH_FAILOVER_CONFIG_MODE_UNSPECIFIED = 0;
  SWITCH_FAILOVER_CONFIG_MODE_NO_HITLESS = 1;
  SWITCH_FAILOVER_CONFIG_MODE_HITLESS = 2;
}

enum SwitchFirmwareLoadMethod {
  SWITCH_FIRMWARE_LOAD_METHOD_UNSPECIFIED = 0;
  SWITCH_FIRMWARE_LOAD_METHOD_NONE = 1;
  SWITCH_FIRMWARE_LOAD_METHOD_INTERNAL = 2;
  SWITCH_FIRMWARE_LOAD_METHOD_EEPROM = 3;
}

enum SwitchFirmwareLoadType {
  SWITCH_FIRMWARE_LOAD_TYPE_UNSPECIFIED = 0;
  SWITCH_FIRMWARE_LOAD_TYPE_SKIP = 1;
  SWITCH_FIRMWARE_LOAD_TYPE_FORCE = 2;
  SWITCH_FIRMWARE_LOAD_TYPE_AUTO = 3;
}

enum SwitchHardwareAccessBus {
  SWITCH_HARDWARE_ACCESS_BUS_UNSPECIFIED = 0;
  SWITCH_HARDWARE_ACCESS_BUS_MDIO = 1;
  SWITCH_HARDWARE_ACCESS_BUS_I2C = 2;
  SWITCH_HARDWARE_ACCESS_BUS_CPLD = 3;
}

enum SwitchMcastSnoopingCapability {
  SWITCH_MCAST_SNOOPING_CAPABILITY_UNSPECIFIED = 0;
  SWITCH_MCAST_SNOOPING_CAPABILITY_NONE = 1;
  SWITCH_MCAST_SNOOPING_CAPABILITY_XG = 2;
  SWITCH_MCAST_SNOOPING_CAPABILITY_SG = 3;
  SWITCH_MCAST_SNOOPING_CAPABILITY_XG_AND_SG = 4;
}

enum SwitchOperStatus {
  SWITCH_OPER_STATUS_UNSPECIFIED = 0;
  SWITCH_OPER_STATUS_UNKNOWN = 1;
  SWITCH_OPER_STATUS_UP = 2;
  SWITCH_OPER_STATUS_DOWN = 3;
  SWITCH_OPER_STATUS_FAILED = 4;
}

enum SwitchRestartType {
  SWITCH_RESTART_TYPE_UNSPECIFIED = 0;
  SWITCH_RESTART_TYPE_NONE = 1;
  SWITCH_RESTART_TYPE_PLANNED = 2;
  SWITCH_RESTART_TYPE_ANY = 3;
}

enum SwitchStat {
  option allow_alias = true;
  SWITCH_STAT_UNSPECIFIED = 0;
  SWITCH_STAT_IN_DROP_REASON_RANGE_BASE = 1;
  SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS = 1;
  SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS = 2;
  SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS = 3;
  SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS = 4;
  SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS = 5;
  SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS = 6;
  SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS = 7;
  SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS = 8;
  SWITCH_STAT_IN_DROP_REASON_RANGE_END = 9;
  SWITCH_STAT_OUT_DROP_REASON_RANGE_BASE = 10;
  SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS = 10;
  SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS = 11;
  SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS = 12;
  SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS = 13;
  SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS = 14;
  SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS = 15;
  SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS = 16;
  SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS = 17;
  SWITCH_STAT_OUT_DROP_REASON_RANGE_END = 18;
  SWITCH_STAT_FABRIC_DROP_REASON_RANGE_BASE = 19;
  SWITCH_STAT_ECC_DROP = 19;
  SWITCH_STAT_REACHABILITY_DROP = 20;
  SWITCH_STAT_HIGHEST_QUEUE_CONGESTION_LEVEL = 21;
  SWITCH_STAT_GLOBAL_DROP = 22;
  SWITCH_STAT_FABRIC_DROP_REASON_RANGE_END = 23;
}

enum SwitchSwitchingMode {
  SWITCH_SWITCHING_MODE_UNSPECIFIED = 0;
  SWITCH_SWITCHING_MODE_CUT_THROUGH = 1;
  SWITCH_SWITCHING_MODE_STORE_AND_FORWARD = 2;
}

enum SwitchType {
  SWITCH_TYPE_UNSPECIFIED = 0;
  SWITCH_TYPE_NPU = 1;
  SWITCH_TYPE_PHY = 2;
  SWITCH_TYPE_VOQ = 3;
  SWITCH_TYPE_FABRIC = 4;
}

enum SystemPortType {
  SYSTEM_PORT_TYPE_UNSPECIFIED = 0;
  SYSTEM_PORT_TYPE_LOCAL = 1;
  SYSTEM_PORT_TYPE_REMOTE = 2;
}

enum TableBitmapClassificationEntryAction {
  TABLE_BITMAP_CLASSIFICATION_ENTRY_ACTION_UNSPECIFIED = 0;
  TABLE_BITMAP_CLASSIFICATION_ENTRY_ACTION_SET_METADATA = 1;
  TABLE_BITMAP_CLASSIFICATION_ENTRY_ACTION_NOACTION = 2;
}

enum TableBitmapClassificationEntryStat {
  TABLE_BITMAP_CLASSIFICATION_ENTRY_STAT_UNSPECIFIED = 0;
  TABLE_BITMAP_CLASSIFICATION_ENTRY_STAT_HIT_PACKETS = 1;
  TABLE_BITMAP_CLASSIFICATION_ENTRY_STAT_HIT_OCTETS = 2;
}

enum TableBitmapRouterEntryAction {
  TABLE_BITMAP_ROUTER_ENTRY_ACTION_UNSPECIFIED = 0;
  TABLE_BITMAP_ROUTER_ENTRY_ACTION_TO_NEXTHOP = 1;
  TABLE_BITMAP_ROUTER_ENTRY_ACTION_TO_LOCAL = 2;
  TABLE_BITMAP_ROUTER_ENTRY_ACTION_TO_CPU = 3;
  TABLE_BITMAP_ROUTER_ENTRY_ACTION_DROP = 4;
  TABLE_BITMAP_ROUTER_ENTRY_ACTION_NOACTION = 5;
}

enum TableBitmapRouterEntryStat {
  TABLE_BITMAP_ROUTER_ENTRY_STAT_UNSPECIFIED = 0;
  TABLE_BITMAP_ROUTER_ENTRY_STAT_HIT_PACKETS = 1;
  TABLE_BITMAP_ROUTER_ENTRY_STAT_HIT_OCTETS = 2;
}

enum TableMetaTunnelEntryAction {
  TABLE_META_TUNNEL_ENTRY_ACTION_UNSPECIFIED = 0;
  TABLE_META_TUNNEL_ENTRY_ACTION_TUNNEL_ENCAP = 1;
  TABLE_META_TUNNEL_ENTRY_ACTION_NOACTION = 2;
}

enum TableMetaTunnelEntryStat {
  TABLE_META_TUNNEL_ENTRY_STAT_UNSPECIFIED = 0;
  TABLE_META_TUNNEL_ENTRY_STAT_HIT_PACKETS = 1;
  TABLE_META_TUNNEL_ENTRY_STAT_HIT_OCTETS = 2;
}

enum TamBindPointType {
  TAM_BIND_POINT_TYPE_UNSPECIFIED = 0;
  TAM_BIND_POINT_TYPE_QUEUE = 1;
  TAM_BIND_POINT_TYPE_PORT = 2;
  TAM_BIND_POINT_TYPE_LAG = 3;
  TAM_BIND_POINT_TYPE_VLAN = 4;
  TAM_BIND_POINT_TYPE_SWITCH = 5;
  TAM_BIND_POINT_TYPE_IPG = 6;
  TAM_BIND_POINT_TYPE_BSP = 7;
}

enum TamEventThresholdUnit {
  TAM_EVENT_THRESHOLD_UNIT_UNSPECIFIED = 0;
  TAM_EVENT_THRESHOLD_UNIT_NANOSEC = 1;
  TAM_EVENT_THRESHOLD_UNIT_USEC = 2;
  TAM_EVENT_THRESHOLD_UNIT_MSEC = 3;
  TAM_EVENT_THRESHOLD_UNIT_PERCENT = 4;
  TAM_EVENT_THRESHOLD_UNIT_BYTES = 5;
  TAM_EVENT_THRESHOLD_UNIT_PACKETS = 6;
  TAM_EVENT_THRESHOLD_UNIT_CELLS = 7;
}

enum TamEventType {
  TAM_EVENT_TYPE_UNSPECIFIED = 0;
  TAM_EVENT_TYPE_FLOW_STATE = 1;
  TAM_EVENT_TYPE_FLOW_WATCHLIST = 2;
  TAM_EVENT_TYPE_FLOW_TCPFLAG = 3;
  TAM_EVENT_TYPE_QUEUE_THRESHOLD = 4;
  TAM_EVENT_TYPE_QUEUE_TAIL_DROP = 5;
  TAM_EVENT_TYPE_PACKET_DROP = 6;
  TAM_EVENT_TYPE_RESOURCE_UTILIZATION = 7;
  TAM_EVENT_TYPE_IPG_SHARED = 8;
  TAM_EVENT_TYPE_IPG_XOFF_ROOM = 9;
  TAM_EVENT_TYPE_BSP = 10;
}

enum TamIntPresenceType {
  TAM_INT_PRESENCE_TYPE_UNSPECIFIED = 0;
  TAM_INT_PRESENCE_TYPE_UNDEFINED = 1;
  TAM_INT_PRESENCE_TYPE_PB = 2;
  TAM_INT_PRESENCE_TYPE_L3_PROTOCOL = 3;
  TAM_INT_PRESENCE_TYPE_DSCP = 4;
}

enum TamIntType {
  TAM_INT_TYPE_UNSPECIFIED = 0;
  TAM_INT_TYPE_IOAM = 1;
  TAM_INT_TYPE_IFA1 = 2;
  TAM_INT_TYPE_IFA2 = 3;
  TAM_INT_TYPE_P4_INT_1 = 4;
  TAM_INT_TYPE_P4_INT_2 = 5;
  TAM_INT_TYPE_DIRECT_EXPORT = 6;
  TAM_INT_TYPE_IFA1_TAILSTAMP = 7;
}

enum TamReportMode {
  TAM_REPORT_MODE_UNSPECIFIED = 0;
  TAM_REPORT_MODE_ALL = 1;
  TAM_REPORT_MODE_BULK = 2;
}

enum TamReportType {
  TAM_REPORT_TYPE_UNSPECIFIED = 0;
  TAM_REPORT_TYPE_SFLOW = 1;
  TAM_REPORT_TYPE_IPFIX = 2;
  TAM_REPORT_TYPE_PROTO = 3;
  TAM_REPORT_TYPE_THRIFT = 4;
  TAM_REPORT_TYPE_JSON = 5;
  TAM_REPORT_TYPE_P4_EXTN = 6;
  TAM_REPORT_TYPE_HISTOGRAM = 7;
  TAM_REPORT_TYPE_VENDOR_EXTN = 8;
}

enum TamReportingUnit {
  TAM_REPORTING_UNIT_UNSPECIFIED = 0;
  TAM_REPORTING_UNIT_SEC = 1;
  TAM_REPORTING_UNIT_MINUTE = 2;
  TAM_REPORTING_UNIT_HOUR = 3;
  TAM_REPORTING_UNIT_DAY = 4;
}

enum TamTelMathFuncType {
  TAM_TEL_MATH_FUNC_TYPE_UNSPECIFIED = 0;
  TAM_TEL_MATH_FUNC_TYPE_NONE = 1;
  TAM_TEL_MATH_FUNC_TYPE_GEO_MEAN = 2;
  TAM_TEL_MATH_FUNC_TYPE_ALGEBRAIC_MEAN = 3;
  TAM_TEL_MATH_FUNC_TYPE_AVERAGE = 4;
  TAM_TEL_MATH_FUNC_TYPE_MODE = 5;
  TAM_TEL_MATH_FUNC_TYPE_RATE = 6;
}

enum TamTelemetryType {
  TAM_TELEMETRY_TYPE_UNSPECIFIED = 0;
  TAM_TELEMETRY_TYPE_NE = 1;
  TAM_TELEMETRY_TYPE_SWITCH = 2;
  TAM_TELEMETRY_TYPE_FABRIC = 3;
  TAM_TELEMETRY_TYPE_FLOW = 4;
  TAM_TELEMETRY_TYPE_INT = 5;
}

enum TamTransportAuthType {
  TAM_TRANSPORT_AUTH_TYPE_UNSPECIFIED = 0;
  TAM_TRANSPORT_AUTH_TYPE_NONE = 1;
  TAM_TRANSPORT_AUTH_TYPE_SSL = 2;
  TAM_TRANSPORT_AUTH_TYPE_TLS = 3;
}

enum TamTransportType {
  TAM_TRANSPORT_TYPE_UNSPECIFIED = 0;
  TAM_TRANSPORT_TYPE_NONE = 1;
  TAM_TRANSPORT_TYPE_TCP = 2;
  TAM_TRANSPORT_TYPE_UDP = 3;
  TAM_TRANSPORT_TYPE_GRPC = 4;
  TAM_TRANSPORT_TYPE_MIRROR = 5;
}

enum TlvType {
  TLV_TYPE_UNSPECIFIED = 0;
  TLV_TYPE_INGRESS = 1;
  TLV_TYPE_EGRESS = 2;
  TLV_TYPE_OPAQUE = 3;
  TLV_TYPE_HMAC = 4;
}

enum TunnelDecapEcnMode {
  TUNNEL_DECAP_ECN_MODE_UNSPECIFIED = 0;
  TUNNEL_DECAP_ECN_MODE_STANDARD = 1;
  TUNNEL_DECAP_ECN_MODE_COPY_FROM_OUTER = 2;
  TUNNEL_DECAP_ECN_MODE_USER_DEFINED = 3;
}

enum TunnelDscpMode {
  TUNNEL_DSCP_MODE_UNSPECIFIED = 0;
  TUNNEL_DSCP_MODE_UNIFORM_MODEL = 1;
  TUNNEL_DSCP_MODE_PIPE_MODEL = 2;
}

enum TunnelEncapEcnMode {
  TUNNEL_ENCAP_ECN_MODE_UNSPECIFIED = 0;
  TUNNEL_ENCAP_ECN_MODE_STANDARD = 1;
  TUNNEL_ENCAP_ECN_MODE_USER_DEFINED = 2;
}

enum TunnelMapType {
  TUNNEL_MAP_TYPE_UNSPECIFIED = 0;
  TUNNEL_MAP_TYPE_OECN_TO_UECN = 1;
  TUNNEL_MAP_TYPE_UECN_OECN_TO_OECN = 2;
  TUNNEL_MAP_TYPE_VNI_TO_VLAN_ID = 3;
  TUNNEL_MAP_TYPE_VLAN_ID_TO_VNI = 4;
  TUNNEL_MAP_TYPE_VNI_TO_BRIDGE_IF = 5;
  TUNNEL_MAP_TYPE_BRIDGE_IF_TO_VNI = 6;
  TUNNEL_MAP_TYPE_VNI_TO_VIRTUAL_ROUTER_ID = 7;
  TUNNEL_MAP_TYPE_VIRTUAL_ROUTER_ID_TO_VNI = 8;
  TUNNEL_MAP_TYPE_VSID_TO_VLAN_ID = 9;
  TUNNEL_MAP_TYPE_VLAN_ID_TO_VSID = 10;
  TUNNEL_MAP_TYPE_VSID_TO_BRIDGE_IF = 11;
  TUNNEL_MAP_TYPE_BRIDGE_IF_TO_VSID = 12;
  TUNNEL_MAP_TYPE_CUSTOM_RANGE_BASE = 13;
}

enum TunnelPeerMode {
  TUNNEL_PEER_MODE_UNSPECIFIED = 0;
  TUNNEL_PEER_MODE_P2P = 1;
  TUNNEL_PEER_MODE_P2MP = 2;
}

enum TunnelStat {
  TUNNEL_STAT_UNSPECIFIED = 0;
  TUNNEL_STAT_IN_OCTETS = 1;
  TUNNEL_STAT_IN_PACKETS = 2;
  TUNNEL_STAT_OUT_OCTETS = 3;
  TUNNEL_STAT_OUT_PACKETS = 4;
}

enum TunnelTermTableEntryType {
  TUNNEL_TERM_TABLE_ENTRY_TYPE_UNSPECIFIED = 0;
  TUNNEL_TERM_TABLE_ENTRY_TYPE_P2P = 1;
  TUNNEL_TERM_TABLE_ENTRY_TYPE_P2MP = 2;
  TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2P = 3;
  TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2MP = 4;
}

enum TunnelTtlMode {
  TUNNEL_TTL_MODE_UNSPECIFIED = 0;
  TUNNEL_TTL_MODE_UNIFORM_MODEL = 1;
  TUNNEL_TTL_MODE_PIPE_MODEL = 2;
}

enum TunnelType {
  TUNNEL_TYPE_UNSPECIFIED = 0;
  TUNNEL_TYPE_IPINIP = 1;
  TUNNEL_TYPE_IPINIP_GRE = 2;
  TUNNEL_TYPE_VXLAN = 3;
  TUNNEL_TYPE_MPLS = 4;
  TUNNEL_TYPE_SRV6 = 5;
  TUNNEL_TYPE_NVGRE = 6;
  TUNNEL_TYPE_IPINIP_ESP = 7;
  TUNNEL_TYPE_IPINIP_UDP_ESP = 8;
  TUNNEL_TYPE_VXLAN_UDP_ESP = 9;
}

enum TunnelVxlanUdpSportMode {
  TUNNEL_VXLAN_UDP_SPORT_MODE_UNSPECIFIED = 0;
  TUNNEL_VXLAN_UDP_SPORT_MODE_USER_DEFINED = 1;
  TUNNEL_VXLAN_UDP_SPORT_MODE_EPHEMERAL = 2;
}

enum UdfBase {
  UDF_BASE_UNSPECIFIED = 0;
  UDF_BASE_L2 = 1;
  UDF_BASE_L3 = 2;
  UDF_BASE_L4 = 3;
}

enum UdfGroupType {
  option allow_alias = true;
  UDF_GROUP_TYPE_UNSPECIFIED = 0;
  UDF_GROUP_TYPE_START = 1;
  UDF_GROUP_TYPE_GENERIC = 1;
  UDF_GROUP_TYPE_HASH = 2;
  UDF_GROUP_TYPE_END = 3;
}

enum VlanFloodControlType {
  VLAN_FLOOD_CONTROL_TYPE_UNSPECIFIED = 0;
  VLAN_FLOOD_CONTROL_TYPE_ALL = 1;
  VLAN_FLOOD_CONTROL_TYPE_NONE = 2;
  VLAN_FLOOD_CONTROL_TYPE_L2MC_GROUP = 3;
  VLAN_FLOOD_CONTROL_TYPE_COMBINED = 4;
}

enum VlanMcastLookupKeyType {
  VLAN_MCAST_LOOKUP_KEY_TYPE_UNSPECIFIED = 0;
  VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA = 1;
  VLAN_MCAST_LOOKUP_KEY_TYPE_XG = 2;
  VLAN_MCAST_LOOKUP_KEY_TYPE_SG = 3;
  VLAN_MCAST_LOOKUP_KEY_TYPE_XG_AND_SG = 4;
}

enum VlanStat {
  VLAN_STAT_UNSPECIFIED = 0;
  VLAN_STAT_IN_OCTETS = 1;
  VLAN_STAT_IN_PACKETS = 2;
  VLAN_STAT_IN_UCAST_PKTS = 3;
  VLAN_STAT_IN_NON_UCAST_PKTS = 4;
  VLAN_STAT_IN_DISCARDS = 5;
  VLAN_STAT_IN_ERRORS = 6;
  VLAN_STAT_IN_UNKNOWN_PROTOS = 7;
  VLAN_STAT_OUT_OCTETS = 8;
  VLAN_STAT_OUT_PACKETS = 9;
  VLAN_STAT_OUT_UCAST_PKTS = 10;
  VLAN_STAT_OUT_NON_UCAST_PKTS = 11;
  VLAN_STAT_OUT_DISCARDS = 12;
  VLAN_STAT_OUT_ERRORS = 13;
  VLAN_STAT_OUT_QLEN = 14;
}

enum VlanTaggingMode {
  VLAN_TAGGING_MODE_UNSPECIFIED = 0;
  VLAN_TAGGING_MODE_UNTAGGED = 1;
  VLAN_TAGGING_MODE_TAGGED = 2;
  VLAN_TAGGING_MODE_PRIORITY_TAGGED = 3;
}

message AclCounterAttribute {
  optional uint64 table_id = 1 [(attr_enum_value) = 1];
  optional bool enable_packet_count = 2 [(attr_enum_value) = 2];
  optional bool enable_byte_count = 3 [(attr_enum_value) = 3];
  optional uint64 packets = 4 [(attr_enum_value) = 4];
  optional uint64 bytes = 5 [(attr_enum_value) = 5];
  optional bytes label = 6 [(attr_enum_value) = 6];
}

message AclEntryAttribute {
  optional uint64 table_id = 1 [(attr_enum_value) = 1];
  optional uint32 priority = 2 [(attr_enum_value) = 2];
  optional bool admin_state = 3 [(attr_enum_value) = 3];
  optional AclFieldData field_src_ipv6 = 4 [(attr_enum_value) = 4];
  optional AclFieldData field_src_ipv6_word3 = 5 [(attr_enum_value) = 5];
  optional AclFieldData field_src_ipv6_word2 = 6 [(attr_enum_value) = 6];
  optional AclFieldData field_src_ipv6_word1 = 7 [(attr_enum_value) = 7];
  optional AclFieldData field_src_ipv6_word0 = 8 [(attr_enum_value) = 8];
  optional AclFieldData field_dst_ipv6 = 9 [(attr_enum_value) = 9];
  optional AclFieldData field_dst_ipv6_word3 = 10 [(attr_enum_value) = 10];
  optional AclFieldData field_dst_ipv6_word2 = 11 [(attr_enum_value) = 11];
  optional AclFieldData field_dst_ipv6_word1 = 12 [(attr_enum_value) = 12];
  optional AclFieldData field_dst_ipv6_word0 = 13 [(attr_enum_value) = 13];
  optional AclFieldData field_inner_src_ipv6 = 14 [(attr_enum_value) = 14];
  optional AclFieldData field_inner_dst_ipv6 = 15 [(attr_enum_value) = 15];
  optional AclFieldData field_src_mac = 16 [(attr_enum_value) = 16];
  optional AclFieldData field_dst_mac = 17 [(attr_enum_value) = 17];
  optional AclFieldData field_src_ip = 18 [(attr_enum_value) = 18];
  optional AclFieldData field_dst_ip = 19 [(attr_enum_value) = 19];
  optional AclFieldData field_inner_src_ip = 20 [(attr_enum_value) = 20];
  optional AclFieldData field_inner_dst_ip = 21 [(attr_enum_value) = 21];
  optional AclFieldData field_in_ports = 22 [(attr_enum_value) = 22];
  optional AclFieldData field_out_ports = 23 [(attr_enum_value) = 23];
  optional AclFieldData field_in_port = 24 [(attr_enum_value) = 24];
  optional AclFieldData field_out_port = 25 [(attr_enum_value) = 25];
  optional AclFieldData field_src_port = 26 [(attr_enum_value) = 26];
  optional AclFieldData field_outer_vlan_id = 27 [(attr_enum_value) = 27];
  optional AclFieldData field_outer_vlan_pri = 28 [(attr_enum_value) = 28];
  optional AclFieldData field_outer_vlan_cfi = 29 [(attr_enum_value) = 29];
  optional AclFieldData field_inner_vlan_id = 30 [(attr_enum_value) = 30];
  optional AclFieldData field_inner_vlan_pri = 31 [(attr_enum_value) = 31];
  optional AclFieldData field_inner_vlan_cfi = 32 [(attr_enum_value) = 32];
  optional AclFieldData field_l4_src_port = 33 [(attr_enum_value) = 33];
  optional AclFieldData field_l4_dst_port = 34 [(attr_enum_value) = 34];
  optional AclFieldData field_inner_l4_src_port = 35 [(attr_enum_value) = 35];
  optional AclFieldData field_inner_l4_dst_port = 36 [(attr_enum_value) = 36];
  optional AclFieldData field_ether_type = 37 [(attr_enum_value) = 37];
  optional AclFieldData field_inner_ether_type = 38 [(attr_enum_value) = 38];
  optional AclFieldData field_ip_protocol = 39 [(attr_enum_value) = 39];
  optional AclFieldData field_inner_ip_protocol = 40 [(attr_enum_value) = 40];
  optional AclFieldData field_ip_identification = 41 [(attr_enum_value) = 41];
  optional AclFieldData field_dscp = 42 [(attr_enum_value) = 42];
  optional AclFieldData field_ecn = 43 [(attr_enum_value) = 43];
  optional AclFieldData field_ttl = 44 [(attr_enum_value) = 44];
  optional AclFieldData field_tos = 45 [(attr_enum_value) = 45];
  optional AclFieldData field_ip_flags = 46 [(attr_enum_value) = 46];
  optional AclFieldData field_tcp_flags = 47 [(attr_enum_value) = 47];
  optional AclFieldData field_acl_ip_type = 48 [(attr_enum_value) = 48];
  optional AclFieldData field_acl_ip_frag = 49 [(attr_enum_value) = 49];
  optional AclFieldData field_ipv6_flow_label = 50 [(attr_enum_value) = 50];
  optional AclFieldData field_tc = 51 [(attr_enum_value) = 51];
  optional AclFieldData field_icmp_type = 52 [(attr_enum_value) = 52];
  optional AclFieldData field_icmp_code = 53 [(attr_enum_value) = 53];
  optional AclFieldData field_icmpv6_type = 54 [(attr_enum_value) = 54];
  optional AclFieldData field_icmpv6_code = 55 [(attr_enum_value) = 55];
  optional AclFieldData field_packet_vlan = 56 [(attr_enum_value) = 56];
  optional AclFieldData field_tunnel_vni = 57 [(attr_enum_value) = 57];
  optional AclFieldData field_has_vlan_tag = 58 [(attr_enum_value) = 58];
  optional AclFieldData field_macsec_sci = 59 [(attr_enum_value) = 59];
  optional AclFieldData field_mpls_label0_label = 60 [(attr_enum_value) = 60];
  optional AclFieldData field_mpls_label0_ttl = 61 [(attr_enum_value) = 61];
  optional AclFieldData field_mpls_label0_exp = 62 [(attr_enum_value) = 62];
  optional AclFieldData field_mpls_label0_bos = 63 [(attr_enum_value) = 63];
  optional AclFieldData field_mpls_label1_label = 64 [(attr_enum_value) = 64];
  optional AclFieldData field_mpls_label1_ttl = 65 [(attr_enum_value) = 65];
  optional AclFieldData field_mpls_label1_exp = 66 [(attr_enum_value) = 66];
  optional AclFieldData field_mpls_label1_bos = 67 [(attr_enum_value) = 67];
  optional AclFieldData field_mpls_label2_label = 68 [(attr_enum_value) = 68];
  optional AclFieldData field_mpls_label2_ttl = 69 [(attr_enum_value) = 69];
  optional AclFieldData field_mpls_label2_exp = 70 [(attr_enum_value) = 70];
  optional AclFieldData field_mpls_label2_bos = 71 [(attr_enum_value) = 71];
  optional AclFieldData field_mpls_label3_label = 72 [(attr_enum_value) = 72];
  optional AclFieldData field_mpls_label3_ttl = 73 [(attr_enum_value) = 73];
  optional AclFieldData field_mpls_label3_exp = 74 [(attr_enum_value) = 74];
  optional AclFieldData field_mpls_label3_bos = 75 [(attr_enum_value) = 75];
  optional AclFieldData field_mpls_label4_label = 76 [(attr_enum_value) = 76];
  optional AclFieldData field_mpls_label4_ttl = 77 [(attr_enum_value) = 77];
  optional AclFieldData field_mpls_label4_exp = 78 [(attr_enum_value) = 78];
  optional AclFieldData field_mpls_label4_bos = 79 [(attr_enum_value) = 79];
  optional AclFieldData field_fdb_dst_user_meta = 80 [(attr_enum_value) = 80];
  optional AclFieldData field_route_dst_user_meta = 81 [(attr_enum_value) = 81];
  optional AclFieldData field_neighbor_dst_user_meta = 82
      [(attr_enum_value) = 82];
  optional AclFieldData field_port_user_meta = 83 [(attr_enum_value) = 83];
  optional AclFieldData field_vlan_user_meta = 84 [(attr_enum_value) = 84];
  optional AclFieldData field_acl_user_meta = 85 [(attr_enum_value) = 85];
  optional AclFieldData field_fdb_npu_meta_dst_hit = 86
      [(attr_enum_value) = 86];
  optional AclFieldData field_neighbor_npu_meta_dst_hit = 87
      [(attr_enum_value) = 87];
  optional AclFieldData field_route_npu_meta_dst_hit = 88
      [(attr_enum_value) = 88];
  optional AclFieldData field_bth_opcode = 89 [(attr_enum_value) = 89];
  optional AclFieldData field_aeth_syndrome = 90 [(attr_enum_value) = 90];
  optional AclFieldData user_defined_field_group_min = 91
      [(attr_enum_value) = 91];
  optional AclFieldData user_defined_field_group_max = 92
      [(attr_enum_value) = 92];
  optional AclFieldData field_acl_range_type = 93 [(attr_enum_value) = 93];
  optional AclFieldData field_ipv6_next_header = 94 [(attr_enum_value) = 94];
  optional AclFieldData field_gre_key = 95 [(attr_enum_value) = 95];
  optional AclFieldData field_tam_int_type = 96 [(attr_enum_value) = 96];
  optional AclActionData action_redirect = 97 [(attr_enum_value) = 97];
  optional AclActionData action_endpoint_ip = 98 [(attr_enum_value) = 98];
  optional AclActionData action_redirect_list = 99 [(attr_enum_value) = 99];
  optional AclActionData action_packet_action = 100 [(attr_enum_value) = 100];
  optional AclActionData action_flood = 101 [(attr_enum_value) = 101];
  optional AclActionData action_counter = 102 [(attr_enum_value) = 102];
  optional AclActionData action_mirror_ingress = 103 [(attr_enum_value) = 103];
  optional AclActionData action_mirror_egress = 104 [(attr_enum_value) = 104];
  optional AclActionData action_set_policer = 105 [(attr_enum_value) = 105];
  optional AclActionData action_decrement_ttl = 106 [(attr_enum_value) = 106];
  optional AclActionData action_set_tc = 107 [(attr_enum_value) = 107];
  optional AclActionData action_set_packet_color = 108
      [(attr_enum_value) = 108];
  optional AclActionData action_set_inner_vlan_id = 109
      [(attr_enum_value) = 109];
  optional AclActionData action_set_inner_vlan_pri = 110
      [(attr_enum_value) = 110];
  optional AclActionData action_set_outer_vlan_id = 111
      [(attr_enum_value) = 111];
  optional AclActionData action_set_outer_vlan_pri = 112
      [(attr_enum_value) = 112];
  optional AclActionData action_add_vlan_id = 113 [(attr_enum_value) = 113];
  optional AclActionData action_add_vlan_pri = 114 [(attr_enum_value) = 114];
  optional AclActionData action_set_src_mac = 115 [(attr_enum_value) = 115];
  optional AclActionData action_set_dst_mac = 116 [(attr_enum_value) = 116];
  optional AclActionData action_set_src_ip = 117 [(attr_enum_value) = 117];
  optional AclActionData action_set_dst_ip = 118 [(attr_enum_value) = 118];
  optional AclActionData action_set_src_ipv6 = 119 [(attr_enum_value) = 119];
  optional AclActionData action_set_dst_ipv6 = 120 [(attr_enum_value) = 120];
  optional AclActionData action_set_dscp = 121 [(attr_enum_value) = 121];
  optional AclActionData action_set_ecn = 122 [(attr_enum_value) = 122];
  optional AclActionData action_set_l4_src_port = 123 [(attr_enum_value) = 123];
  optional AclActionData action_set_l4_dst_port = 124 [(attr_enum_value) = 124];
  optional AclActionData action_ingress_samplepacket_enable = 125
      [(attr_enum_value) = 125];
  optional AclActionData action_egress_samplepacket_enable = 126
      [(attr_enum_value) = 126];
  optional AclActionData action_set_acl_meta_data = 127
      [(attr_enum_value) = 127];
  optional AclActionData action_egress_block_port_list = 128
      [(attr_enum_value) = 128];
  optional AclActionData action_set_user_trap_id = 129
      [(attr_enum_value) = 129];
  optional AclActionData action_set_do_not_learn = 130
      [(attr_enum_value) = 130];
  optional AclActionData action_acl_dtel_flow_op = 131
      [(attr_enum_value) = 131];
  optional AclActionData action_dtel_int_session = 132
      [(attr_enum_value) = 132];
  optional AclActionData action_dtel_drop_report_enable = 133
      [(attr_enum_value) = 133];
  optional AclActionData action_dtel_tail_drop_report_enable = 134
      [(attr_enum_value) = 134];
  optional AclActionData action_dtel_flow_sample_percent = 135
      [(attr_enum_value) = 135];
  optional AclActionData action_dtel_report_all_packets = 136
      [(attr_enum_value) = 136];
  optional AclActionData action_no_nat = 137 [(attr_enum_value) = 137];
  optional AclActionData action_int_insert = 138 [(attr_enum_value) = 138];
  optional AclActionData action_int_delete = 139 [(attr_enum_value) = 139];
  optional AclActionData action_int_report_flow = 140 [(attr_enum_value) = 140];
  optional AclActionData action_int_report_drops = 141
      [(attr_enum_value) = 141];
  optional AclActionData action_int_report_tail_drops = 142
      [(attr_enum_value) = 142];
  optional AclActionData action_tam_int_object = 143 [(attr_enum_value) = 143];
  optional AclActionData action_set_isolation_group = 144
      [(attr_enum_value) = 144];
  optional AclActionData action_macsec_flow = 145 [(attr_enum_value) = 145];
  optional AclActionData action_set_lag_hash_id = 146 [(attr_enum_value) = 146];
  optional AclActionData action_set_ecmp_hash_id = 147
      [(attr_enum_value) = 147];
  optional AclActionData action_set_vrf = 148 [(attr_enum_value) = 148];
  optional AclActionData action_set_forwarding_class = 149
      [(attr_enum_value) = 149];
}

message AclRangeAttribute {
  optional AclRangeType type = 1 [(attr_enum_value) = 1];
  optional Uint32Range limit = 2 [(attr_enum_value) = 2];
}

message AclTableAttribute {
  optional AclStage acl_stage = 1 [(attr_enum_value) = 1];
  repeated AclBindPointType acl_bind_point_type_list = 2
      [(attr_enum_value) = 2];
  optional uint32 size = 3 [(attr_enum_value) = 3];
  repeated AclActionType acl_action_type_list = 4 [(attr_enum_value) = 4];
  optional bool field_src_ipv6 = 5 [(attr_enum_value) = 5];
  optional bool field_src_ipv6_word3 = 6 [(attr_enum_value) = 6];
  optional bool field_src_ipv6_word2 = 7 [(attr_enum_value) = 7];
  optional bool field_src_ipv6_word1 = 8 [(attr_enum_value) = 8];
  optional bool field_src_ipv6_word0 = 9 [(attr_enum_value) = 9];
  optional bool field_dst_ipv6 = 10 [(attr_enum_value) = 10];
  optional bool field_dst_ipv6_word3 = 11 [(attr_enum_value) = 11];
  optional bool field_dst_ipv6_word2 = 12 [(attr_enum_value) = 12];
  optional bool field_dst_ipv6_word1 = 13 [(attr_enum_value) = 13];
  optional bool field_dst_ipv6_word0 = 14 [(attr_enum_value) = 14];
  optional bool field_inner_src_ipv6 = 15 [(attr_enum_value) = 15];
  optional bool field_inner_dst_ipv6 = 16 [(attr_enum_value) = 16];
  optional bool field_src_mac = 17 [(attr_enum_value) = 17];
  optional bool field_dst_mac = 18 [(attr_enum_value) = 18];
  optional bool field_src_ip = 19 [(attr_enum_value) = 19];
  optional bool field_dst_ip = 20 [(attr_enum_value) = 20];
  optional bool field_inner_src_ip = 21 [(attr_enum_value) = 21];
  optional bool field_inner_dst_ip = 22 [(attr_enum_value) = 22];
  optional bool field_in_ports = 23 [(attr_enum_value) = 23];
  optional bool field_out_ports = 24 [(attr_enum_value) = 24];
  optional bool field_in_port = 25 [(attr_enum_value) = 25];
  optional bool field_out_port = 26 [(attr_enum_value) = 26];
  optional bool field_src_port = 27 [(attr_enum_value) = 27];
  optional bool field_outer_vlan_id = 28 [(attr_enum_value) = 28];
  optional bool field_outer_vlan_pri = 29 [(attr_enum_value) = 29];
  optional bool field_outer_vlan_cfi = 30 [(attr_enum_value) = 30];
  optional bool field_inner_vlan_id = 31 [(attr_enum_value) = 31];
  optional bool field_inner_vlan_pri = 32 [(attr_enum_value) = 32];
  optional bool field_inner_vlan_cfi = 33 [(attr_enum_value) = 33];
  optional bool field_l4_src_port = 34 [(attr_enum_value) = 34];
  optional bool field_l4_dst_port = 35 [(attr_enum_value) = 35];
  optional bool field_inner_l4_src_port = 36 [(attr_enum_value) = 36];
  optional bool field_inner_l4_dst_port = 37 [(attr_enum_value) = 37];
  optional bool field_ether_type = 38 [(attr_enum_value) = 38];
  optional bool field_inner_ether_type = 39 [(attr_enum_value) = 39];
  optional bool field_ip_protocol = 40 [(attr_enum_value) = 40];
  optional bool field_inner_ip_protocol = 41 [(attr_enum_value) = 41];
  optional bool field_ip_identification = 42 [(attr_enum_value) = 42];
  optional bool field_dscp = 43 [(attr_enum_value) = 43];
  optional bool field_ecn = 44 [(attr_enum_value) = 44];
  optional bool field_ttl = 45 [(attr_enum_value) = 45];
  optional bool field_tos = 46 [(attr_enum_value) = 46];
  optional bool field_ip_flags = 47 [(attr_enum_value) = 47];
  optional bool field_tcp_flags = 48 [(attr_enum_value) = 48];
  optional bool field_acl_ip_type = 49 [(attr_enum_value) = 49];
  optional bool field_acl_ip_frag = 50 [(attr_enum_value) = 50];
  optional bool field_ipv6_flow_label = 51 [(attr_enum_value) = 51];
  optional bool field_tc = 52 [(attr_enum_value) = 52];
  optional bool field_icmp_type = 53 [(attr_enum_value) = 53];
  optional bool field_icmp_code = 54 [(attr_enum_value) = 54];
  optional bool field_icmpv6_type = 55 [(attr_enum_value) = 55];
  optional bool field_icmpv6_code = 56 [(attr_enum_value) = 56];
  optional bool field_packet_vlan = 57 [(attr_enum_value) = 57];
  optional bool field_tunnel_vni = 58 [(attr_enum_value) = 58];
  optional bool field_has_vlan_tag = 59 [(attr_enum_value) = 59];
  optional bool field_macsec_sci = 60 [(attr_enum_value) = 60];
  optional bool field_mpls_label0_label = 61 [(attr_enum_value) = 61];
  optional bool field_mpls_label0_ttl = 62 [(attr_enum_value) = 62];
  optional bool field_mpls_label0_exp = 63 [(attr_enum_value) = 63];
  optional bool field_mpls_label0_bos = 64 [(attr_enum_value) = 64];
  optional bool field_mpls_label1_label = 65 [(attr_enum_value) = 65];
  optional bool field_mpls_label1_ttl = 66 [(attr_enum_value) = 66];
  optional bool field_mpls_label1_exp = 67 [(attr_enum_value) = 67];
  optional bool field_mpls_label1_bos = 68 [(attr_enum_value) = 68];
  optional bool field_mpls_label2_label = 69 [(attr_enum_value) = 69];
  optional bool field_mpls_label2_ttl = 70 [(attr_enum_value) = 70];
  optional bool field_mpls_label2_exp = 71 [(attr_enum_value) = 71];
  optional bool field_mpls_label2_bos = 72 [(attr_enum_value) = 72];
  optional bool field_mpls_label3_label = 73 [(attr_enum_value) = 73];
  optional bool field_mpls_label3_ttl = 74 [(attr_enum_value) = 74];
  optional bool field_mpls_label3_exp = 75 [(attr_enum_value) = 75];
  optional bool field_mpls_label3_bos = 76 [(attr_enum_value) = 76];
  optional bool field_mpls_label4_label = 77 [(attr_enum_value) = 77];
  optional bool field_mpls_label4_ttl = 78 [(attr_enum_value) = 78];
  optional bool field_mpls_label4_exp = 79 [(attr_enum_value) = 79];
  optional bool field_mpls_label4_bos = 80 [(attr_enum_value) = 80];
  optional bool field_fdb_dst_user_meta = 81 [(attr_enum_value) = 81];
  optional bool field_route_dst_user_meta = 82 [(attr_enum_value) = 82];
  optional bool field_neighbor_dst_user_meta = 83 [(attr_enum_value) = 83];
  optional bool field_port_user_meta = 84 [(attr_enum_value) = 84];
  optional bool field_vlan_user_meta = 85 [(attr_enum_value) = 85];
  optional bool field_acl_user_meta = 86 [(attr_enum_value) = 86];
  optional bool field_fdb_npu_meta_dst_hit = 87 [(attr_enum_value) = 87];
  optional bool field_neighbor_npu_meta_dst_hit = 88 [(attr_enum_value) = 88];
  optional bool field_route_npu_meta_dst_hit = 89 [(attr_enum_value) = 89];
  optional bool field_bth_opcode = 90 [(attr_enum_value) = 90];
  optional bool field_aeth_syndrome = 91 [(attr_enum_value) = 91];
  optional uint64 user_defined_field_group_min = 92 [(attr_enum_value) = 92];
  optional uint64 user_defined_field_group_max = 93 [(attr_enum_value) = 93];
  repeated AclRangeType field_acl_range_type = 94 [(attr_enum_value) = 94];
  optional bool field_ipv6_next_header = 95 [(attr_enum_value) = 95];
  optional bool field_gre_key = 96 [(attr_enum_value) = 96];
  optional bool field_tam_int_type = 97 [(attr_enum_value) = 97];
  repeated uint64 entry_list = 98 [(attr_enum_value) = 98];
  optional uint32 available_acl_entry = 99 [(attr_enum_value) = 99];
  optional uint32 available_acl_counter = 100 [(attr_enum_value) = 100];
}

message AclTableGroupAttribute {
  optional AclStage acl_stage = 1 [(attr_enum_value) = 1];
  repeated AclBindPointType acl_bind_point_type_list = 2
      [(attr_enum_value) = 2];
  optional AclTableGroupType type = 3 [(attr_enum_value) = 3];
  repeated uint64 member_list = 4 [(attr_enum_value) = 4];
}

message AclTableGroupMemberAttribute {
  optional uint64 acl_table_group_id = 1 [(attr_enum_value) = 1];
  optional uint64 acl_table_id = 2 [(attr_enum_value) = 2];
  optional uint32 priority = 3 [(attr_enum_value) = 3];
}

message BfdSessionAttribute {
  optional BfdSessionType type = 1 [(attr_enum_value) = 1];
  optional bool hw_lookup_valid = 2 [(attr_enum_value) = 2];
  optional uint64 virtual_router = 3 [(attr_enum_value) = 3];
  optional uint64 port = 4 [(attr_enum_value) = 4];
  optional uint32 local_discriminator = 5 [(attr_enum_value) = 5];
  optional uint32 remote_discriminator = 6 [(attr_enum_value) = 6];
  optional uint32 udp_src_port = 7 [(attr_enum_value) = 7];
  optional uint32 tc = 8 [(attr_enum_value) = 8];
  optional uint32 vlan_tpid = 9 [(attr_enum_value) = 9];
  optional uint32 vlan_id = 10 [(attr_enum_value) = 10];
  optional uint32 vlan_pri = 11 [(attr_enum_value) = 11];
  optional uint32 vlan_cfi = 12 [(attr_enum_value) = 12];
  optional bool vlan_header_valid = 13 [(attr_enum_value) = 13];
  optional BfdEncapsulationType bfd_encapsulation_type = 14
      [(attr_enum_value) = 14];
  optional uint32 iphdr_version = 15 [(attr_enum_value) = 15];
  optional uint32 tos = 16 [(attr_enum_value) = 16];
  optional uint32 ttl = 17 [(attr_enum_value) = 17];
  optional bytes src_ip_address = 18 [(attr_enum_value) = 18];
  optional bytes dst_ip_address = 19 [(attr_enum_value) = 19];
  optional uint32 tunnel_tos = 20 [(attr_enum_value) = 20];
  optional uint32 tunnel_ttl = 21 [(attr_enum_value) = 21];
  optional bytes tunnel_src_ip_address = 22 [(attr_enum_value) = 22];
  optional bytes tunnel_dst_ip_address = 23 [(attr_enum_value) = 23];
  optional bytes src_mac_address = 24 [(attr_enum_value) = 24];
  optional bytes dst_mac_address = 25 [(attr_enum_value) = 25];
  optional bool echo_enable = 26 [(attr_enum_value) = 26];
  optional bool multihop = 27 [(attr_enum_value) = 27];
  optional bool cbit = 28 [(attr_enum_value) = 28];
  optional uint32 min_tx = 29 [(attr_enum_value) = 29];
  optional uint32 min_rx = 30 [(attr_enum_value) = 30];
  optional uint32 multiplier = 31 [(attr_enum_value) = 31];
  optional uint32 remote_min_tx = 32 [(attr_enum_value) = 32];
  optional uint32 remote_min_rx = 33 [(attr_enum_value) = 33];
  optional BfdSessionState state = 34 [(attr_enum_value) = 34];
  optional BfdSessionOffloadType offload_type = 35 [(attr_enum_value) = 35];
  optional uint32 negotiated_tx = 36 [(attr_enum_value) = 36];
  optional uint32 negotiated_rx = 37 [(attr_enum_value) = 37];
  optional uint32 local_diag = 38 [(attr_enum_value) = 38];
  optional uint32 remote_diag = 39 [(attr_enum_value) = 39];
  optional uint32 remote_multiplier = 40 [(attr_enum_value) = 40];
}

message BridgeAttribute {
  optional BridgeType type = 1 [(attr_enum_value) = 1];
  repeated uint64 port_list = 2 [(attr_enum_value) = 2];
  optional uint32 max_learned_addresses = 3 [(attr_enum_value) = 3];
  optional bool learn_disable = 4 [(attr_enum_value) = 4];
  optional BridgeFloodControlType unknown_unicast_flood_control_type = 5
      [(attr_enum_value) = 5];
  optional uint64 unknown_unicast_flood_group = 6 [(attr_enum_value) = 6];
  optional BridgeFloodControlType unknown_multicast_flood_control_type = 7
      [(attr_enum_value) = 7];
  optional uint64 unknown_multicast_flood_group = 8 [(attr_enum_value) = 8];
  optional BridgeFloodControlType broadcast_flood_control_type = 9
      [(attr_enum_value) = 9];
  optional uint64 broadcast_flood_group = 10 [(attr_enum_value) = 10];
}

message BridgePortAttribute {
  optional BridgePortType type = 1 [(attr_enum_value) = 1];
  optional uint64 port_id = 2 [(attr_enum_value) = 2];
  optional BridgePortTaggingMode tagging_mode = 3 [(attr_enum_value) = 3];
  optional uint32 vlan_id = 4 [(attr_enum_value) = 4];
  optional uint64 rif_id = 5 [(attr_enum_value) = 5];
  optional uint64 tunnel_id = 6 [(attr_enum_value) = 6];
  optional uint64 bridge_id = 7 [(attr_enum_value) = 7];
  optional BridgePortFdbLearningMode fdb_learning_mode = 8
      [(attr_enum_value) = 8];
  optional uint32 max_learned_addresses = 9 [(attr_enum_value) = 9];
  optional PacketAction fdb_learning_limit_violation_packet_action = 10
      [(attr_enum_value) = 10];
  optional bool admin_state = 11 [(attr_enum_value) = 11];
  optional bool ingress_filtering = 12 [(attr_enum_value) = 12];
  optional bool egress_filtering = 13 [(attr_enum_value) = 13];
  optional uint64 isolation_group = 14 [(attr_enum_value) = 14];
}

message BufferPoolAttribute {
  optional uint64 shared_size = 1 [(attr_enum_value) = 1];
  optional BufferPoolType type = 2 [(attr_enum_value) = 2];
  optional uint64 size = 3 [(attr_enum_value) = 3];
  optional BufferPoolThresholdMode threshold_mode = 4 [(attr_enum_value) = 4];
  repeated uint64 tam = 5 [(attr_enum_value) = 5];
  optional uint64 xoff_size = 6 [(attr_enum_value) = 6];
  optional uint64 wred_profile_id = 7 [(attr_enum_value) = 7];
}

message BufferProfileAttribute {
  optional uint64 pool_id = 1 [(attr_enum_value) = 1];
  optional uint64 reserved_buffer_size = 2 [(attr_enum_value) = 2];
  optional BufferProfileThresholdMode threshold_mode = 3
      [(attr_enum_value) = 3];
  optional int32 shared_dynamic_th = 4 [(attr_enum_value) = 4];
  optional uint64 shared_static_th = 5 [(attr_enum_value) = 5];
  optional uint64 xoff_th = 6 [(attr_enum_value) = 6];
  optional uint64 xon_th = 7 [(attr_enum_value) = 7];
  optional uint64 xon_offset_th = 8 [(attr_enum_value) = 8];
}

message CounterAttribute {
  optional CounterType type = 1 [(attr_enum_value) = 1];
  optional bytes label = 2 [(attr_enum_value) = 2];
}

message DebugCounterAttribute {
  optional uint32 index = 1 [(attr_enum_value) = 1];
  optional DebugCounterType type = 2 [(attr_enum_value) = 2];
  optional DebugCounterBindMethod bind_method = 3 [(attr_enum_value) = 3];
  repeated InDropReason in_drop_reason_list = 4 [(attr_enum_value) = 4];
  repeated OutDropReason out_drop_reason_list = 5 [(attr_enum_value) = 5];
}

message DtelAttribute {
  optional bool int_endpoint_enable = 1 [(attr_enum_value) = 1];
  optional bool int_transit_enable = 2 [(attr_enum_value) = 2];
  optional bool postcard_enable = 3 [(attr_enum_value) = 3];
  optional bool drop_report_enable = 4 [(attr_enum_value) = 4];
  optional bool queue_report_enable = 5 [(attr_enum_value) = 5];
  optional uint32 switch_id = 6 [(attr_enum_value) = 6];
  optional uint32 flow_state_clear_cycle = 7 [(attr_enum_value) = 7];
  optional uint32 latency_sensitivity = 8 [(attr_enum_value) = 8];
  repeated uint64 sink_port_list = 9 [(attr_enum_value) = 9];
  optional AclFieldData int_l4_dscp = 10 [(attr_enum_value) = 10];
}

message DtelEventAttribute {
  optional DtelEventType type = 1 [(attr_enum_value) = 1];
  optional uint64 report_session = 2 [(attr_enum_value) = 2];
  optional uint32 dscp_value = 3 [(attr_enum_value) = 3];
}

message DtelIntSessionAttribute {
  optional uint32 max_hop_count = 1 [(attr_enum_value) = 1];
  optional bool collect_switch_id = 2 [(attr_enum_value) = 2];
  optional bool collect_switch_ports = 3 [(attr_enum_value) = 3];
  optional bool collect_ingress_timestamp = 4 [(attr_enum_value) = 4];
  optional bool collect_egress_timestamp = 5 [(attr_enum_value) = 5];
  optional bool collect_queue_info = 6 [(attr_enum_value) = 6];
}

message DtelQueueReportAttribute {
  optional uint64 queue_id = 1 [(attr_enum_value) = 1];
  optional uint32 depth_threshold = 2 [(attr_enum_value) = 2];
  optional uint32 latency_threshold = 3 [(attr_enum_value) = 3];
  optional uint32 breach_quota = 4 [(attr_enum_value) = 4];
  optional bool tail_drop = 5 [(attr_enum_value) = 5];
}

message DtelReportSessionAttribute {
  optional bytes src_ip = 1 [(attr_enum_value) = 1];
  repeated bytes dst_ip_list = 2 [(attr_enum_value) = 2];
  optional uint64 virtual_router_id = 3 [(attr_enum_value) = 3];
  optional uint32 truncate_size = 4 [(attr_enum_value) = 4];
  optional uint32 udp_dst_port = 5 [(attr_enum_value) = 5];
}

message FdbEntryAttribute {
  optional FdbEntryType type = 1 [(attr_enum_value) = 1];
  optional PacketAction packet_action = 2 [(attr_enum_value) = 2];
  optional uint64 user_trap_id = 3 [(attr_enum_value) = 3];
  optional uint64 bridge_port_id = 4 [(attr_enum_value) = 4];
  optional uint32 meta_data = 5 [(attr_enum_value) = 5];
  optional bytes endpoint_ip = 6 [(attr_enum_value) = 6];
  optional uint64 counter_id = 7 [(attr_enum_value) = 7];
  optional bool allow_mac_move = 8 [(attr_enum_value) = 8];
}

message FdbFlushAttribute {
  optional uint64 bridge_port_id = 1 [(attr_enum_value) = 1];
  optional uint64 bv_id = 2 [(attr_enum_value) = 2];
  optional FdbFlushEntryType entry_type = 3 [(attr_enum_value) = 3];
}

message FineGrainedHashFieldAttribute {
  optional NativeHashField native_hash_field = 1 [(attr_enum_value) = 1];
  optional bytes ipv4_mask = 2 [(attr_enum_value) = 2];
  optional bytes ipv6_mask = 3 [(attr_enum_value) = 3];
  optional uint32 sequence_id = 4 [(attr_enum_value) = 4];
}

message GenericProgrammableAttribute {
  repeated int32 object_name = 1 [(attr_enum_value) = 1];
  optional bytes entry = 2 [(attr_enum_value) = 2];
  optional uint64 counter_id = 3 [(attr_enum_value) = 3];
}

message HashAttribute {
  repeated NativeHashField native_hash_field_list = 1 [(attr_enum_value) = 1];
  repeated uint64 udf_group_list = 2 [(attr_enum_value) = 2];
  repeated uint64 fine_grained_hash_field_list = 3 [(attr_enum_value) = 3];
}

message HostifAttribute {
  optional HostifType type = 1 [(attr_enum_value) = 1];
  optional uint64 obj_id = 2 [(attr_enum_value) = 2];
  optional bytes name = 3 [(attr_enum_value) = 3];
  optional bool oper_status = 4 [(attr_enum_value) = 4];
  optional uint32 queue = 5 [(attr_enum_value) = 5];
  optional HostifVlanTag vlan_tag = 6 [(attr_enum_value) = 6];
  optional bytes genetlink_mcgrp_name = 7 [(attr_enum_value) = 7];
}

message HostifPacketAttribute {
  optional uint64 hostif_trap_id = 1 [(attr_enum_value) = 1];
  optional uint64 ingress_port = 2 [(attr_enum_value) = 2];
  optional uint64 ingress_lag = 3 [(attr_enum_value) = 3];
  optional HostifTxType hostif_tx_type = 4 [(attr_enum_value) = 4];
  optional uint64 egress_port_or_lag = 5 [(attr_enum_value) = 5];
  optional uint64 bridge_id = 6 [(attr_enum_value) = 6];
  optional google.protobuf.Timestamp timestamp = 7 [(attr_enum_value) = 7];
  optional uint32 egress_queue_index = 8 [(attr_enum_value) = 8];
  optional bool zero_copy_tx = 9 [(attr_enum_value) = 9];
}

message HostifTableEntryAttribute {
  optional HostifTableEntryType type = 1 [(attr_enum_value) = 1];
  optional uint64 obj_id = 2 [(attr_enum_value) = 2];
  optional uint64 trap_id = 3 [(attr_enum_value) = 3];
  optional HostifTableEntryChannelType channel_type = 4 [(attr_enum_value) = 4];
  optional uint64 host_if = 5 [(attr_enum_value) = 5];
}

message HostifTrapAttribute {
  optional HostifTrapType trap_type = 1 [(attr_enum_value) = 1];
  optional PacketAction packet_action = 2 [(attr_enum_value) = 2];
  optional uint32 trap_priority = 3 [(attr_enum_value) = 3];
  repeated uint64 exclude_port_list = 4 [(attr_enum_value) = 4];
  optional uint64 trap_group = 5 [(attr_enum_value) = 5];
  repeated uint64 mirror_session = 6 [(attr_enum_value) = 6];
  optional uint64 counter_id = 7 [(attr_enum_value) = 7];
}

message HostifTrapGroupAttribute {
  optional bool admin_state = 1 [(attr_enum_value) = 1];
  optional uint32 queue = 2 [(attr_enum_value) = 2];
  optional uint64 policer = 3 [(attr_enum_value) = 3];
  optional ObjectStage object_stage = 4 [(attr_enum_value) = 4];
}

message HostifUserDefinedTrapAttribute {
  optional HostifUserDefinedTrapType type = 1 [(attr_enum_value) = 1];
  optional uint32 trap_priority = 2 [(attr_enum_value) = 2];
  optional uint64 trap_group = 3 [(attr_enum_value) = 3];
}

message IngressPriorityGroupAttribute {
  optional uint64 buffer_profile = 1 [(attr_enum_value) = 1];
  optional uint64 port = 2 [(attr_enum_value) = 2];
  repeated uint64 tam = 3 [(attr_enum_value) = 3];
  optional uint32 index = 4 [(attr_enum_value) = 4];
}

message InsegEntryAttribute {
  optional uint32 num_of_pop = 1 [(attr_enum_value) = 1];
  optional PacketAction packet_action = 2 [(attr_enum_value) = 2];
  optional uint32 trap_priority = 3 [(attr_enum_value) = 3];
  optional uint64 next_hop_id = 4 [(attr_enum_value) = 4];
  optional InsegEntryPscType psc_type = 5 [(attr_enum_value) = 5];
  optional uint32 qos_tc = 6 [(attr_enum_value) = 6];
  optional uint64 mpls_exp_to_tc_map = 7 [(attr_enum_value) = 7];
  optional uint64 mpls_exp_to_color_map = 8 [(attr_enum_value) = 8];
  optional InsegEntryPopTtlMode pop_ttl_mode = 9 [(attr_enum_value) = 9];
  optional InsegEntryPopQosMode pop_qos_mode = 10 [(attr_enum_value) = 10];
  optional uint64 counter_id = 11 [(attr_enum_value) = 11];
}

message IpmcEntryAttribute {
  optional PacketAction packet_action = 1 [(attr_enum_value) = 1];
  optional uint64 output_group_id = 2 [(attr_enum_value) = 2];
  optional uint64 rpf_group_id = 3 [(attr_enum_value) = 3];
  optional uint64 counter_id = 4 [(attr_enum_value) = 4];
}

message IpmcGroupAttribute {
  optional uint32 ipmc_output_count = 1 [(attr_enum_value) = 1];
  repeated uint64 ipmc_member_list = 2 [(attr_enum_value) = 2];
}

message IpmcGroupMemberAttribute {
  optional uint64 ipmc_group_id = 1 [(attr_enum_value) = 1];
  optional uint64 ipmc_output_id = 2 [(attr_enum_value) = 2];
}

message IpsecAttribute {
  optional bool term_remote_ip_match_supported = 1 [(attr_enum_value) = 1];
  optional bool switching_mode_cut_through_supported = 2
      [(attr_enum_value) = 2];
  optional bool switching_mode_store_and_forward_supported = 3
      [(attr_enum_value) = 3];
  optional bool stats_mode_read_supported = 4 [(attr_enum_value) = 4];
  optional bool stats_mode_read_clear_supported = 5 [(attr_enum_value) = 5];
  optional bool sn_32bit_supported = 6 [(attr_enum_value) = 6];
  optional bool esn_64bit_supported = 7 [(attr_enum_value) = 7];
  repeated IpsecCipher supported_cipher_list = 8 [(attr_enum_value) = 8];
  optional uint32 system_side_mtu = 9 [(attr_enum_value) = 9];
  optional bool warm_boot_supported = 10 [(attr_enum_value) = 10];
  optional bool warm_boot_enable = 11 [(attr_enum_value) = 11];
  optional bool external_sa_index_enable = 12 [(attr_enum_value) = 12];
  optional uint32 ctag_tpid = 13 [(attr_enum_value) = 13];
  optional uint32 stag_tpid = 14 [(attr_enum_value) = 14];
  optional uint32 max_vlan_tags_parsed = 15 [(attr_enum_value) = 15];
  optional uint64 octet_count_high_watermark = 16 [(attr_enum_value) = 16];
  optional uint64 octet_count_low_watermark = 17 [(attr_enum_value) = 17];
  optional StatsMode stats_mode = 18 [(attr_enum_value) = 18];
  optional uint32 available_ipsec_sa = 19 [(attr_enum_value) = 19];
  repeated uint64 sa_list = 20 [(attr_enum_value) = 20];
}

message IpsecPortAttribute {
  optional uint64 port_id = 1 [(attr_enum_value) = 1];
  optional bool ctag_enable = 2 [(attr_enum_value) = 2];
  optional bool stag_enable = 3 [(attr_enum_value) = 3];
  optional uint32 native_vlan_id = 4 [(attr_enum_value) = 4];
  optional bool vrf_from_packet_vlan_enable = 5 [(attr_enum_value) = 5];
  optional SwitchSwitchingMode switch_switching_mode = 6
      [(attr_enum_value) = 6];
}

message IpsecSaAttribute {
  optional IpsecDirection ipsec_direction = 1 [(attr_enum_value) = 1];
  optional uint64 ipsec_id = 2 [(attr_enum_value) = 2];
  optional IpsecSaOctetCountStatus octet_count_status = 3
      [(attr_enum_value) = 3];
  optional uint32 external_sa_index = 4 [(attr_enum_value) = 4];
  optional uint32 sa_index = 5 [(attr_enum_value) = 5];
  repeated uint64 ipsec_port_list = 6 [(attr_enum_value) = 6];
  optional uint32 ipsec_spi = 7 [(attr_enum_value) = 7];
  optional bool ipsec_esn_enable = 8 [(attr_enum_value) = 8];
  optional IpsecCipher ipsec_cipher = 9 [(attr_enum_value) = 9];
  optional bytes encrypt_key = 10 [(attr_enum_value) = 10];
  optional uint32 salt = 11 [(attr_enum_value) = 11];
  optional bytes auth_key = 12 [(attr_enum_value) = 12];
  optional bool ipsec_replay_protection_enable = 13 [(attr_enum_value) = 13];
  optional uint32 ipsec_replay_protection_window = 14 [(attr_enum_value) = 14];
  optional bytes term_dst_ip = 15 [(attr_enum_value) = 15];
  optional bool term_vlan_id_enable = 16 [(attr_enum_value) = 16];
  optional uint32 term_vlan_id = 17 [(attr_enum_value) = 17];
  optional bool term_src_ip_enable = 18 [(attr_enum_value) = 18];
  optional bytes term_src_ip = 19 [(attr_enum_value) = 19];
  optional uint64 egress_esn = 20 [(attr_enum_value) = 20];
  optional uint64 minimum_ingress_esn = 21 [(attr_enum_value) = 21];
}

message IsolationGroupAttribute {
  optional IsolationGroupType type = 1 [(attr_enum_value) = 1];
  repeated uint64 isolation_member_list = 2 [(attr_enum_value) = 2];
}

message IsolationGroupMemberAttribute {
  optional uint64 isolation_group_id = 1 [(attr_enum_value) = 1];
  optional uint64 isolation_object = 2 [(attr_enum_value) = 2];
}

message L2mcEntryAttribute {
  optional PacketAction packet_action = 1 [(attr_enum_value) = 1];
  optional uint64 output_group_id = 2 [(attr_enum_value) = 2];
}

message L2mcGroupAttribute {
  optional uint32 l2mc_output_count = 1 [(attr_enum_value) = 1];
  repeated uint64 l2mc_member_list = 2 [(attr_enum_value) = 2];
}

message L2mcGroupMemberAttribute {
  optional uint64 l2mc_group_id = 1 [(attr_enum_value) = 1];
  optional uint64 l2mc_output_id = 2 [(attr_enum_value) = 2];
  optional bytes l2mc_endpoint_ip = 3 [(attr_enum_value) = 3];
}

message LagAttribute {
  repeated uint64 port_list = 1 [(attr_enum_value) = 1];
  optional uint64 ingress_acl = 2 [(attr_enum_value) = 2];
  optional uint64 egress_acl = 3 [(attr_enum_value) = 3];
  optional uint32 port_vlan_id = 4 [(attr_enum_value) = 4];
  optional uint32 default_vlan_priority = 5 [(attr_enum_value) = 5];
  optional bool drop_untagged = 6 [(attr_enum_value) = 6];
  optional bool drop_tagged = 7 [(attr_enum_value) = 7];
  optional uint32 tpid = 8 [(attr_enum_value) = 8];
  optional uint32 system_port_aggregate_id = 9 [(attr_enum_value) = 9];
  optional bytes label = 10 [(attr_enum_value) = 10];
}

message LagMemberAttribute {
  optional uint64 lag_id = 1 [(attr_enum_value) = 1];
  optional uint64 port_id = 2 [(attr_enum_value) = 2];
  optional bool egress_disable = 3 [(attr_enum_value) = 3];
  optional bool ingress_disable = 4 [(attr_enum_value) = 4];
}

message MacsecAttribute {
  optional MacsecDirection direction = 1 [(attr_enum_value) = 1];
  optional bool switching_mode_cut_through_supported = 2
      [(attr_enum_value) = 2];
  optional bool switching_mode_store_and_forward_supported = 3
      [(attr_enum_value) = 3];
  optional bool stats_mode_read_supported = 4 [(attr_enum_value) = 4];
  optional bool stats_mode_read_clear_supported = 5 [(attr_enum_value) = 5];
  optional bool sci_in_ingress_macsec_acl = 6 [(attr_enum_value) = 6];
  repeated MacsecCipherSuite supported_cipher_suite_list = 7
      [(attr_enum_value) = 7];
  optional bool pn_32bit_supported = 8 [(attr_enum_value) = 8];
  optional bool xpn_64bit_supported = 9 [(attr_enum_value) = 9];
  optional bool gcm_aes128_supported = 10 [(attr_enum_value) = 10];
  optional bool gcm_aes256_supported = 11 [(attr_enum_value) = 11];
  repeated uint32 sectag_offsets_supported = 12 [(attr_enum_value) = 12];
  optional uint32 system_side_mtu = 13 [(attr_enum_value) = 13];
  optional bool warm_boot_supported = 14 [(attr_enum_value) = 14];
  optional bool warm_boot_enable = 15 [(attr_enum_value) = 15];
  optional uint32 ctag_tpid = 16 [(attr_enum_value) = 16];
  optional uint32 stag_tpid = 17 [(attr_enum_value) = 17];
  optional uint32 max_vlan_tags_parsed = 18 [(attr_enum_value) = 18];
  optional StatsMode stats_mode = 19 [(attr_enum_value) = 19];
  optional bool physical_bypass_enable = 20 [(attr_enum_value) = 20];
  repeated uint64 supported_port_list = 21 [(attr_enum_value) = 21];
  optional uint32 available_macsec_flow = 22 [(attr_enum_value) = 22];
  repeated uint64 flow_list = 23 [(attr_enum_value) = 23];
  optional uint32 available_macsec_sc = 24 [(attr_enum_value) = 24];
  optional uint32 available_macsec_sa = 25 [(attr_enum_value) = 25];
  optional MacsecMaxSecureAssociationsPerSc max_secure_associations_per_sc = 26
      [(attr_enum_value) = 26];
}

message MacsecFlowAttribute {
  optional MacsecDirection macsec_direction = 1 [(attr_enum_value) = 1];
  repeated uint64 acl_entry_list = 2 [(attr_enum_value) = 2];
  repeated uint64 sc_list = 3 [(attr_enum_value) = 3];
}

message MacsecPortAttribute {
  optional MacsecDirection macsec_direction = 1 [(attr_enum_value) = 1];
  optional uint64 port_id = 2 [(attr_enum_value) = 2];
  optional bool ctag_enable = 3 [(attr_enum_value) = 3];
  optional bool stag_enable = 4 [(attr_enum_value) = 4];
  optional SwitchSwitchingMode switch_switching_mode = 5
      [(attr_enum_value) = 5];
}

message MacsecSaAttribute {
  optional MacsecDirection macsec_direction = 1 [(attr_enum_value) = 1];
  optional uint64 sc_id = 2 [(attr_enum_value) = 2];
  optional uint32 an = 3 [(attr_enum_value) = 3];
  optional bytes sak = 4 [(attr_enum_value) = 4];
  optional bytes salt = 5 [(attr_enum_value) = 5];
  optional bytes auth_key = 6 [(attr_enum_value) = 6];
  optional uint64 configured_egress_xpn = 7 [(attr_enum_value) = 7];
  optional uint64 current_xpn = 8 [(attr_enum_value) = 8];
  optional uint64 minimum_ingress_xpn = 9 [(attr_enum_value) = 9];
  optional uint32 macsec_ssci = 10 [(attr_enum_value) = 10];
}

message MacsecScAttribute {
  optional MacsecDirection macsec_direction = 1 [(attr_enum_value) = 1];
  optional uint64 flow_id = 2 [(attr_enum_value) = 2];
  optional uint64 macsec_sci = 3 [(attr_enum_value) = 3];
  optional bool macsec_explicit_sci_enable = 4 [(attr_enum_value) = 4];
  optional uint32 macsec_sectag_offset = 5 [(attr_enum_value) = 5];
  optional uint64 active_egress_sa_id = 6 [(attr_enum_value) = 6];
  optional bool macsec_replay_protection_enable = 7 [(attr_enum_value) = 7];
  optional uint32 macsec_replay_protection_window = 8 [(attr_enum_value) = 8];
  repeated uint64 sa_list = 9 [(attr_enum_value) = 9];
  optional MacsecCipherSuite macsec_cipher_suite = 10 [(attr_enum_value) = 10];
  optional bool encryption_enable = 11 [(attr_enum_value) = 11];
}

message McastFdbEntryAttribute {
  optional uint64 group_id = 1 [(attr_enum_value) = 1];
  optional PacketAction packet_action = 2 [(attr_enum_value) = 2];
  optional uint32 meta_data = 3 [(attr_enum_value) = 3];
}

message MirrorSessionAttribute {
  optional MirrorSessionType type = 1 [(attr_enum_value) = 1];
  optional uint64 monitor_port = 2 [(attr_enum_value) = 2];
  optional uint32 truncate_size = 3 [(attr_enum_value) = 3];
  optional uint32 sample_rate = 4 [(attr_enum_value) = 4];
  optional MirrorSessionCongestionMode congestion_mode = 5
      [(attr_enum_value) = 5];
  optional uint32 tc = 6 [(attr_enum_value) = 6];
  optional uint32 vlan_tpid = 7 [(attr_enum_value) = 7];
  optional uint32 vlan_id = 8 [(attr_enum_value) = 8];
  optional uint32 vlan_pri = 9 [(attr_enum_value) = 9];
  optional uint32 vlan_cfi = 10 [(attr_enum_value) = 10];
  optional bool vlan_header_valid = 11 [(attr_enum_value) = 11];
  optional ErspanEncapsulationType erspan_encapsulation_type = 12
      [(attr_enum_value) = 12];
  optional uint32 iphdr_version = 13 [(attr_enum_value) = 13];
  optional uint32 tos = 14 [(attr_enum_value) = 14];
  optional uint32 ttl = 15 [(attr_enum_value) = 15];
  optional bytes src_ip_address = 16 [(attr_enum_value) = 16];
  optional bytes dst_ip_address = 17 [(attr_enum_value) = 17];
  optional bytes src_mac_address = 18 [(attr_enum_value) = 18];
  optional bytes dst_mac_address = 19 [(attr_enum_value) = 19];
  optional uint32 gre_protocol_type = 20 [(attr_enum_value) = 20];
  optional bool monitor_portlist_valid = 21 [(attr_enum_value) = 21];
  repeated uint64 monitor_portlist = 22 [(attr_enum_value) = 22];
  optional uint64 policer = 23 [(attr_enum_value) = 23];
  optional uint32 udp_src_port = 24 [(attr_enum_value) = 24];
  optional uint32 udp_dst_port = 25 [(attr_enum_value) = 25];
  optional uint64 counter_id = 26 [(attr_enum_value) = 26];
}

message MyMacAttribute {
  optional uint32 priority = 1 [(attr_enum_value) = 1];
  optional uint64 port_id = 2 [(attr_enum_value) = 2];
  optional uint32 vlan_id = 3 [(attr_enum_value) = 3];
  optional bytes mac_address = 4 [(attr_enum_value) = 4];
  optional bytes mac_address_mask = 5 [(attr_enum_value) = 5];
}

message MySidEntryAttribute {
  optional MySidEntryEndpointBehavior endpoint_behavior = 1
      [(attr_enum_value) = 1];
  optional MySidEntryEndpointBehaviorFlavor endpoint_behavior_flavor = 2
      [(attr_enum_value) = 2];
  optional PacketAction packet_action = 3 [(attr_enum_value) = 3];
  optional uint32 trap_priority = 4 [(attr_enum_value) = 4];
  optional uint64 next_hop_id = 5 [(attr_enum_value) = 5];
  optional uint64 tunnel_id = 6 [(attr_enum_value) = 6];
  optional uint64 vrf = 7 [(attr_enum_value) = 7];
  optional uint64 counter_id = 8 [(attr_enum_value) = 8];
}

message NatEntryAttribute {
  optional NatType nat_type = 1 [(attr_enum_value) = 1];
  optional bytes src_ip = 2 [(attr_enum_value) = 2];
  optional bytes src_ip_mask = 3 [(attr_enum_value) = 3];
  optional uint64 vr_id = 4 [(attr_enum_value) = 4];
  optional bytes dst_ip = 5 [(attr_enum_value) = 5];
  optional bytes dst_ip_mask = 6 [(attr_enum_value) = 6];
  optional uint32 l4_src_port = 7 [(attr_enum_value) = 7];
  optional uint32 l4_dst_port = 8 [(attr_enum_value) = 8];
  optional bool enable_packet_count = 9 [(attr_enum_value) = 9];
  optional uint64 packet_count = 10 [(attr_enum_value) = 10];
  optional bool enable_byte_count = 11 [(attr_enum_value) = 11];
  optional uint64 byte_count = 12 [(attr_enum_value) = 12];
  optional bool hit_bit_cor = 13 [(attr_enum_value) = 13];
  optional bool hit_bit = 14 [(attr_enum_value) = 14];
  optional uint32 aging_time = 15 [(attr_enum_value) = 15];
}

message NatZoneCounterAttribute {
  optional NatType nat_type = 1 [(attr_enum_value) = 1];
  optional uint32 zone_id = 2 [(attr_enum_value) = 2];
  optional bool enable_discard = 3 [(attr_enum_value) = 3];
  optional uint64 discard_packet_count = 4 [(attr_enum_value) = 4];
  optional bool enable_translation_needed = 5 [(attr_enum_value) = 5];
  optional uint64 translation_needed_packet_count = 6 [(attr_enum_value) = 6];
  optional bool enable_translations = 7 [(attr_enum_value) = 7];
  optional uint64 translations_packet_count = 8 [(attr_enum_value) = 8];
}

message NeighborEntryAttribute {
  optional bytes dst_mac_address = 1 [(attr_enum_value) = 1];
  optional PacketAction packet_action = 2 [(attr_enum_value) = 2];
  optional uint64 user_trap_id = 3 [(attr_enum_value) = 3];
  optional bool no_host_route = 4 [(attr_enum_value) = 4];
  optional uint32 meta_data = 5 [(attr_enum_value) = 5];
  optional uint64 counter_id = 6 [(attr_enum_value) = 6];
  optional uint32 encap_index = 7 [(attr_enum_value) = 7];
  optional bool encap_impose_index = 8 [(attr_enum_value) = 8];
  optional bool is_local = 9 [(attr_enum_value) = 9];
  optional IpAddrFamily ip_addr_family = 10 [(attr_enum_value) = 10];
}

message NextHopAttribute {
  optional NextHopType type = 1 [(attr_enum_value) = 1];
  optional bytes ip = 2 [(attr_enum_value) = 2];
  optional uint64 router_interface_id = 3 [(attr_enum_value) = 3];
  optional uint64 tunnel_id = 4 [(attr_enum_value) = 4];
  optional uint32 tunnel_vni = 5 [(attr_enum_value) = 5];
  optional bytes tunnel_mac = 6 [(attr_enum_value) = 6];
  optional uint64 srv6_sidlist_id = 7 [(attr_enum_value) = 7];
  repeated uint32 labelstack = 8 [(attr_enum_value) = 8];
  optional uint64 counter_id = 9 [(attr_enum_value) = 9];
  optional bool disable_decrement_ttl = 10 [(attr_enum_value) = 10];
  optional OutsegType outseg_type = 11 [(attr_enum_value) = 11];
  optional OutsegTtlMode outseg_ttl_mode = 12 [(attr_enum_value) = 12];
  optional uint32 outseg_ttl_value = 13 [(attr_enum_value) = 13];
  optional OutsegExpMode outseg_exp_mode = 14 [(attr_enum_value) = 14];
  optional uint32 outseg_exp_value = 15 [(attr_enum_value) = 15];
  optional uint64 qos_tc_and_color_to_mpls_exp_map = 16
      [(attr_enum_value) = 16];
}

message NextHopGroupAttribute {
  optional uint32 next_hop_count = 1 [(attr_enum_value) = 1];
  repeated uint64 next_hop_member_list = 2 [(attr_enum_value) = 2];
  optional NextHopGroupType type = 3 [(attr_enum_value) = 3];
  optional bool set_switchover = 4 [(attr_enum_value) = 4];
  optional uint64 counter_id = 5 [(attr_enum_value) = 5];
  optional uint32 configured_size = 6 [(attr_enum_value) = 6];
  optional uint32 real_size = 7 [(attr_enum_value) = 7];
  optional uint64 selection_map = 8 [(attr_enum_value) = 8];
}

message NextHopGroupMapAttribute {
  optional NextHopGroupMapType type = 1 [(attr_enum_value) = 1];
  repeated UintMap map_to_value_list = 2 [(attr_enum_value) = 2];
}

message NextHopGroupMemberAttribute {
  optional uint64 next_hop_group_id = 1 [(attr_enum_value) = 1];
  optional uint64 next_hop_id = 2 [(attr_enum_value) = 2];
  optional uint32 weight = 3 [(attr_enum_value) = 3];
  optional NextHopGroupMemberConfiguredRole configured_role = 4
      [(attr_enum_value) = 4];
  optional NextHopGroupMemberObservedRole observed_role = 5
      [(attr_enum_value) = 5];
  optional uint64 monitored_object = 6 [(attr_enum_value) = 6];
  optional uint32 index = 7 [(attr_enum_value) = 7];
  optional uint32 sequence_id = 8 [(attr_enum_value) = 8];
  optional uint64 counter_id = 9 [(attr_enum_value) = 9];
}

message PolicerAttribute {
  optional MeterType meter_type = 1 [(attr_enum_value) = 1];
  optional PolicerMode mode = 2 [(attr_enum_value) = 2];
  optional PolicerColorSource color_source = 3 [(attr_enum_value) = 3];
  optional uint64 cbs = 4 [(attr_enum_value) = 4];
  optional uint64 cir = 5 [(attr_enum_value) = 5];
  optional uint64 pbs = 6 [(attr_enum_value) = 6];
  optional uint64 pir = 7 [(attr_enum_value) = 7];
  optional PacketAction green_packet_action = 8 [(attr_enum_value) = 8];
  optional PacketAction yellow_packet_action = 9 [(attr_enum_value) = 9];
  optional PacketAction red_packet_action = 10 [(attr_enum_value) = 10];
  repeated PacketAction enable_counter_packet_action_list = 11
      [(attr_enum_value) = 11];
  optional ObjectStage object_stage = 12 [(attr_enum_value) = 12];
}

message PortAttribute {
  optional PortType type = 1 [(attr_enum_value) = 1];
  optional PortOperStatus oper_status = 2 [(attr_enum_value) = 2];
  repeated PortBreakoutModeType supported_breakout_mode_type = 3
      [(attr_enum_value) = 3];
  optional PortBreakoutModeType current_breakout_mode_type = 4
      [(attr_enum_value) = 4];
  optional uint32 qos_number_of_queues = 5 [(attr_enum_value) = 5];
  repeated uint64 qos_queue_list = 6 [(attr_enum_value) = 6];
  optional uint32 qos_number_of_scheduler_groups = 7 [(attr_enum_value) = 7];
  repeated uint64 qos_scheduler_group_list = 8 [(attr_enum_value) = 8];
  optional uint32 qos_maximum_headroom_size = 9 [(attr_enum_value) = 9];
  repeated uint32 supported_speed = 10 [(attr_enum_value) = 10];
  repeated PortFecMode supported_fec_mode = 11 [(attr_enum_value) = 11];
  repeated PortFecModeExtended supported_fec_mode_extended = 12
      [(attr_enum_value) = 12];
  repeated uint32 supported_half_duplex_speed = 13 [(attr_enum_value) = 13];
  optional bool supported_auto_neg_mode = 14 [(attr_enum_value) = 14];
  optional PortFlowControlMode supported_flow_control_mode = 15
      [(attr_enum_value) = 15];
  optional bool supported_asymmetric_pause_mode = 16 [(attr_enum_value) = 16];
  optional PortMediaType supported_media_type = 17 [(attr_enum_value) = 17];
  repeated uint32 remote_advertised_speed = 18 [(attr_enum_value) = 18];
  repeated PortFecMode remote_advertised_fec_mode = 19 [(attr_enum_value) = 19];
  repeated PortFecModeExtended remote_advertised_fec_mode_extended = 20
      [(attr_enum_value) = 20];
  repeated uint32 remote_advertised_half_duplex_speed = 21
      [(attr_enum_value) = 21];
  optional bool remote_advertised_auto_neg_mode = 22 [(attr_enum_value) = 22];
  optional PortFlowControlMode remote_advertised_flow_control_mode = 23
      [(attr_enum_value) = 23];
  optional bool remote_advertised_asymmetric_pause_mode = 24
      [(attr_enum_value) = 24];
  optional PortMediaType remote_advertised_media_type = 25
      [(attr_enum_value) = 25];
  optional uint32 remote_advertised_oui_code = 26 [(attr_enum_value) = 26];
  optional uint32 number_of_ingress_priority_groups = 27
      [(attr_enum_value) = 27];
  repeated uint64 ingress_priority_group_list = 28 [(attr_enum_value) = 28];
  repeated PortEyeValues eye_values = 29 [(attr_enum_value) = 29];
  optional uint32 oper_speed = 30 [(attr_enum_value) = 30];
  repeated uint32 hw_lane_list = 31 [(attr_enum_value) = 31];
  optional uint32 speed = 32 [(attr_enum_value) = 32];
  optional bool full_duplex_mode = 33 [(attr_enum_value) = 33];
  optional bool auto_neg_mode = 34 [(attr_enum_value) = 34];
  optional bool admin_state = 35 [(attr_enum_value) = 35];
  optional PortMediaType media_type = 36 [(attr_enum_value) = 36];
  repeated uint32 advertised_speed = 37 [(attr_enum_value) = 37];
  repeated PortFecMode advertised_fec_mode = 38 [(attr_enum_value) = 38];
  repeated PortFecModeExtended advertised_fec_mode_extended = 39
      [(attr_enum_value) = 39];
  repeated uint32 advertised_half_duplex_speed = 40 [(attr_enum_value) = 40];
  optional bool advertised_auto_neg_mode = 41 [(attr_enum_value) = 41];
  optional PortFlowControlMode advertised_flow_control_mode = 42
      [(attr_enum_value) = 42];
  optional bool advertised_asymmetric_pause_mode = 43 [(attr_enum_value) = 43];
  optional PortMediaType advertised_media_type = 44 [(attr_enum_value) = 44];
  optional uint32 advertised_oui_code = 45 [(attr_enum_value) = 45];
  optional uint32 port_vlan_id = 46 [(attr_enum_value) = 46];
  optional uint32 default_vlan_priority = 47 [(attr_enum_value) = 47];
  optional bool drop_untagged = 48 [(attr_enum_value) = 48];
  optional bool drop_tagged = 49 [(attr_enum_value) = 49];
  optional PortInternalLoopbackMode internal_loopback_mode = 50
      [(attr_enum_value) = 50];
  optional bool use_extended_fec = 51 [(attr_enum_value) = 51];
  optional PortFecMode fec_mode = 52 [(attr_enum_value) = 52];
  optional PortFecModeExtended fec_mode_extended = 53 [(attr_enum_value) = 53];
  optional bool update_dscp = 54 [(attr_enum_value) = 54];
  optional uint32 mtu = 55 [(attr_enum_value) = 55];
  optional uint64 flood_storm_control_policer_id = 56 [(attr_enum_value) = 56];
  optional uint64 broadcast_storm_control_policer_id = 57
      [(attr_enum_value) = 57];
  optional uint64 multicast_storm_control_policer_id = 58
      [(attr_enum_value) = 58];
  optional PortFlowControlMode global_flow_control_mode = 59
      [(attr_enum_value) = 59];
  optional uint64 ingress_acl = 60 [(attr_enum_value) = 60];
  optional uint64 egress_acl = 61 [(attr_enum_value) = 61];
  optional uint64 ingress_macsec_acl = 62 [(attr_enum_value) = 62];
  optional uint64 egress_macsec_acl = 63 [(attr_enum_value) = 63];
  repeated uint64 macsec_port_list = 64 [(attr_enum_value) = 64];
  repeated uint64 ingress_mirror_session = 65 [(attr_enum_value) = 65];
  repeated uint64 egress_mirror_session = 66 [(attr_enum_value) = 66];
  optional uint64 ingress_samplepacket_enable = 67 [(attr_enum_value) = 67];
  optional uint64 egress_samplepacket_enable = 68 [(attr_enum_value) = 68];
  repeated uint64 ingress_sample_mirror_session = 69 [(attr_enum_value) = 69];
  repeated uint64 egress_sample_mirror_session = 70 [(attr_enum_value) = 70];
  optional uint64 policer_id = 71 [(attr_enum_value) = 71];
  optional uint32 qos_default_tc = 72 [(attr_enum_value) = 72];
  optional uint64 qos_dot1p_to_tc_map = 73 [(attr_enum_value) = 73];
  optional uint64 qos_dot1p_to_color_map = 74 [(attr_enum_value) = 74];
  optional uint64 qos_dscp_to_tc_map = 75 [(attr_enum_value) = 75];
  optional uint64 qos_dscp_to_color_map = 76 [(attr_enum_value) = 76];
  optional uint64 qos_tc_to_queue_map = 77 [(attr_enum_value) = 77];
  optional uint64 qos_tc_and_color_to_dot1p_map = 78 [(attr_enum_value) = 78];
  optional uint64 qos_tc_and_color_to_dscp_map = 79 [(attr_enum_value) = 79];
  optional uint64 qos_tc_to_priority_group_map = 80 [(attr_enum_value) = 80];
  optional uint64 qos_pfc_priority_to_priority_group_map = 81
      [(attr_enum_value) = 81];
  optional uint64 qos_pfc_priority_to_queue_map = 82 [(attr_enum_value) = 82];
  optional uint64 qos_scheduler_profile_id = 83 [(attr_enum_value) = 83];
  repeated uint64 qos_ingress_buffer_profile_list = 84 [(attr_enum_value) = 84];
  repeated uint64 qos_egress_buffer_profile_list = 85 [(attr_enum_value) = 85];
  optional PortPriorityFlowControlMode priority_flow_control_mode = 86
      [(attr_enum_value) = 86];
  optional uint32 priority_flow_control = 87 [(attr_enum_value) = 87];
  optional uint32 priority_flow_control_rx = 88 [(attr_enum_value) = 88];
  optional uint32 priority_flow_control_tx = 89 [(attr_enum_value) = 89];
  optional uint32 meta_data = 90 [(attr_enum_value) = 90];
  repeated uint64 egress_block_port_list = 91 [(attr_enum_value) = 91];
  optional uint64 hw_profile_id = 92 [(attr_enum_value) = 92];
  optional bool eee_enable = 93 [(attr_enum_value) = 93];
  optional uint32 eee_idle_time = 94 [(attr_enum_value) = 94];
  optional uint32 eee_wake_time = 95 [(attr_enum_value) = 95];
  repeated uint64 port_pool_list = 96 [(attr_enum_value) = 96];
  optional uint64 isolation_group = 97 [(attr_enum_value) = 97];
  optional bool pkt_tx_enable = 98 [(attr_enum_value) = 98];
  repeated uint64 tam_object = 99 [(attr_enum_value) = 99];
  repeated uint32 serdes_preemphasis = 100 [(attr_enum_value) = 100];
  repeated uint32 serdes_idriver = 101 [(attr_enum_value) = 101];
  repeated uint32 serdes_ipredriver = 102 [(attr_enum_value) = 102];
  optional bool link_training_enable = 103 [(attr_enum_value) = 103];
  optional PortPtpMode ptp_mode = 104 [(attr_enum_value) = 104];
  optional PortInterfaceType interface_type = 105 [(attr_enum_value) = 105];
  repeated PortInterfaceType advertised_interface_type = 106
      [(attr_enum_value) = 106];
  optional uint64 reference_clock = 107 [(attr_enum_value) = 107];
  optional uint32 prbs_polynomial = 108 [(attr_enum_value) = 108];
  optional uint64 port_serdes_id = 109 [(attr_enum_value) = 109];
  optional PortLinkTrainingFailureStatus link_training_failure_status = 110
      [(attr_enum_value) = 110];
  optional PortLinkTrainingRxStatus link_training_rx_status = 111
      [(attr_enum_value) = 111];
  optional PortPrbsConfig prbs_config = 112 [(attr_enum_value) = 112];
  optional bool prbs_lock_status = 113 [(attr_enum_value) = 113];
  optional bool prbs_lock_loss_status = 114 [(attr_enum_value) = 114];
  optional PortPrbsRxStatus prbs_rx_status = 115 [(attr_enum_value) = 115];
  optional PRBS_RXState prbs_rx_state = 116 [(attr_enum_value) = 116];
  optional bool auto_neg_status = 117 [(attr_enum_value) = 117];
  optional bool disable_decrement_ttl = 118 [(attr_enum_value) = 118];
  optional uint64 qos_mpls_exp_to_tc_map = 119 [(attr_enum_value) = 119];
  optional uint64 qos_mpls_exp_to_color_map = 120 [(attr_enum_value) = 120];
  optional uint64 qos_tc_and_color_to_mpls_exp_map = 121
      [(attr_enum_value) = 121];
  optional uint32 tpid = 122 [(attr_enum_value) = 122];
  repeated PortErrStatus err_status_list = 123 [(attr_enum_value) = 123];
  optional bool fabric_attached = 124 [(attr_enum_value) = 124];
  optional SwitchType fabric_attached_switch_type = 125
      [(attr_enum_value) = 125];
  optional uint32 fabric_attached_switch_id = 126 [(attr_enum_value) = 126];
  optional uint32 fabric_attached_port_index = 127 [(attr_enum_value) = 127];
  optional FabricPortReachability fabric_reachability = 128
      [(attr_enum_value) = 128];
  optional uint64 system_port = 129 [(attr_enum_value) = 129];
  optional bool auto_neg_fec_mode_override = 130 [(attr_enum_value) = 130];
  optional PortLoopbackMode loopback_mode = 131 [(attr_enum_value) = 131];
  optional PortMdixModeStatus mdix_mode_status = 132 [(attr_enum_value) = 132];
  optional PortMdixModeConfig mdix_mode_config = 133 [(attr_enum_value) = 133];
  optional PortAutoNegConfigMode auto_neg_config_mode = 134
      [(attr_enum_value) = 134];
  optional bool _1000x_sgmii_slave_autodetect = 135 [(attr_enum_value) = 135];
  optional PortModuleType module_type = 136 [(attr_enum_value) = 136];
  optional PortDualMedia dual_media = 137 [(attr_enum_value) = 137];
  optional PortFecModeExtended auto_neg_fec_mode_extended = 138
      [(attr_enum_value) = 138];
  optional uint32 ipg = 139 [(attr_enum_value) = 139];
  optional bool global_flow_control_forward = 140 [(attr_enum_value) = 140];
  optional bool priority_flow_control_forward = 141 [(attr_enum_value) = 141];
  optional uint64 qos_dscp_to_forwarding_class_map = 142
      [(attr_enum_value) = 142];
  optional uint64 qos_mpls_exp_to_forwarding_class_map = 143
      [(attr_enum_value) = 143];
  optional uint64 ipsec_port = 144 [(attr_enum_value) = 144];
  optional Uint32Range pfc_tc_dld_interval_range = 145
      [(attr_enum_value) = 145];
  repeated UintMap pfc_tc_dld_interval = 146 [(attr_enum_value) = 146];
  optional Uint32Range pfc_tc_dlr_interval_range = 147
      [(attr_enum_value) = 147];
  repeated UintMap pfc_tc_dlr_interval = 148 [(attr_enum_value) = 148];
  optional bool supported_link_training_mode = 149 [(attr_enum_value) = 149];
  repeated PortLaneLatchStatus rx_signal_detect = 150 [(attr_enum_value) = 150];
  repeated PortLaneLatchStatus rx_lock_status = 151 [(attr_enum_value) = 151];
  optional LatchStatus pcs_rx_link_status = 152 [(attr_enum_value) = 152];
  repeated PortLaneLatchStatus fec_alignment_lock = 153
      [(attr_enum_value) = 153];
  optional bool fabric_isolate = 154 [(attr_enum_value) = 154];
  optional uint32 max_fec_symbol_errors_detectable = 155
      [(attr_enum_value) = 155];
}

message PortConnectorAttribute {
  optional uint64 system_side_port_id = 1 [(attr_enum_value) = 1];
  optional uint64 line_side_port_id = 2 [(attr_enum_value) = 2];
  optional uint64 system_side_failover_port_id = 3 [(attr_enum_value) = 3];
  optional uint64 line_side_failover_port_id = 4 [(attr_enum_value) = 4];
  optional PortConnectorFailoverMode failover_mode = 5 [(attr_enum_value) = 5];
}

message PortPoolAttribute {
  optional uint64 port_id = 1 [(attr_enum_value) = 1];
  optional uint64 buffer_pool_id = 2 [(attr_enum_value) = 2];
  optional uint64 qos_wred_profile_id = 3 [(attr_enum_value) = 3];
}

message PortSerdesAttribute {
  optional uint64 port_id = 1 [(attr_enum_value) = 1];
  repeated int32 preemphasis = 2 [(attr_enum_value) = 2];
  repeated int32 idriver = 3 [(attr_enum_value) = 3];
  repeated int32 ipredriver = 4 [(attr_enum_value) = 4];
  repeated int32 tx_fir_pre1 = 5 [(attr_enum_value) = 5];
  repeated int32 tx_fir_pre2 = 6 [(attr_enum_value) = 6];
  repeated int32 tx_fir_pre3 = 7 [(attr_enum_value) = 7];
  repeated int32 tx_fir_main = 8 [(attr_enum_value) = 8];
  repeated int32 tx_fir_post1 = 9 [(attr_enum_value) = 9];
  repeated int32 tx_fir_post2 = 10 [(attr_enum_value) = 10];
  repeated int32 tx_fir_post3 = 11 [(attr_enum_value) = 11];
  repeated int32 tx_fir_attn = 12 [(attr_enum_value) = 12];
}

message QosMapAttribute {
  optional QosMapType type = 1 [(attr_enum_value) = 1];
  repeated QOSMap map_to_value_list = 2 [(attr_enum_value) = 2];
}

message QueueAttribute {
  optional QueueType type = 1 [(attr_enum_value) = 1];
  optional uint64 port = 2 [(attr_enum_value) = 2];
  optional uint32 index = 3 [(attr_enum_value) = 3];
  optional uint64 parent_scheduler_node = 4 [(attr_enum_value) = 4];
  optional uint64 wred_profile_id = 5 [(attr_enum_value) = 5];
  optional uint64 buffer_profile_id = 6 [(attr_enum_value) = 6];
  optional uint64 scheduler_profile_id = 7 [(attr_enum_value) = 7];
  optional bool pause_status = 8 [(attr_enum_value) = 8];
  optional bool enable_pfc_dldr = 9 [(attr_enum_value) = 9];
  optional bool pfc_dlr_init = 10 [(attr_enum_value) = 10];
  repeated uint64 tam_object = 11 [(attr_enum_value) = 11];
  optional PacketAction pfc_dlr_packet_action = 12 [(attr_enum_value) = 12];
  optional QueuePfcContinuousDeadlockState pfc_continuous_deadlock_state = 13
      [(attr_enum_value) = 13];
}

message RouterInterfaceAttribute {
  optional uint64 virtual_router_id = 1 [(attr_enum_value) = 1];
  optional RouterInterfaceType type = 2 [(attr_enum_value) = 2];
  optional uint64 port_id = 3 [(attr_enum_value) = 3];
  optional uint64 vlan_id = 4 [(attr_enum_value) = 4];
  optional uint32 outer_vlan_id = 5 [(attr_enum_value) = 5];
  optional uint32 inner_vlan_id = 6 [(attr_enum_value) = 6];
  optional uint64 bridge_id = 7 [(attr_enum_value) = 7];
  optional bytes src_mac_address = 8 [(attr_enum_value) = 8];
  optional bool admin_v4_state = 9 [(attr_enum_value) = 9];
  optional bool admin_v6_state = 10 [(attr_enum_value) = 10];
  optional uint32 mtu = 11 [(attr_enum_value) = 11];
  optional uint64 ingress_acl = 12 [(attr_enum_value) = 12];
  optional uint64 egress_acl = 13 [(attr_enum_value) = 13];
  optional PacketAction neighbor_miss_packet_action = 14
      [(attr_enum_value) = 14];
  optional bool v4_mcast_enable = 15 [(attr_enum_value) = 15];
  optional bool v6_mcast_enable = 16 [(attr_enum_value) = 16];
  optional PacketAction loopback_packet_action = 17 [(attr_enum_value) = 17];
  optional bool is_virtual = 18 [(attr_enum_value) = 18];
  optional uint32 nat_zone_id = 19 [(attr_enum_value) = 19];
  optional bool disable_decrement_ttl = 20 [(attr_enum_value) = 20];
  optional bool admin_mpls_state = 21 [(attr_enum_value) = 21];
}

message RouteEntryAttribute {
  optional PacketAction packet_action = 1 [(attr_enum_value) = 1];
  optional uint64 user_trap_id = 2 [(attr_enum_value) = 2];
  optional uint64 next_hop_id = 3 [(attr_enum_value) = 3];
  optional uint32 meta_data = 4 [(attr_enum_value) = 4];
  optional IpAddrFamily ip_addr_family = 5 [(attr_enum_value) = 5];
  optional uint64 counter_id = 6 [(attr_enum_value) = 6];
}

message RpfGroupAttribute {
  optional uint32 rpf_interface_count = 1 [(attr_enum_value) = 1];
  repeated uint64 rpf_member_list = 2 [(attr_enum_value) = 2];
}

message RpfGroupMemberAttribute {
  optional uint64 rpf_group_id = 1 [(attr_enum_value) = 1];
  optional uint64 rpf_interface_id = 2 [(attr_enum_value) = 2];
}

message SamplepacketAttribute {
  optional uint32 sample_rate = 1 [(attr_enum_value) = 1];
  optional SamplepacketType type = 2 [(attr_enum_value) = 2];
  optional SamplepacketMode mode = 3 [(attr_enum_value) = 3];
}

message SchedulerAttribute {
  optional SchedulingType scheduling_type = 1 [(attr_enum_value) = 1];
  optional uint32 scheduling_weight = 2 [(attr_enum_value) = 2];
  optional MeterType meter_type = 3 [(attr_enum_value) = 3];
  optional uint64 min_bandwidth_rate = 4 [(attr_enum_value) = 4];
  optional uint64 min_bandwidth_burst_rate = 5 [(attr_enum_value) = 5];
  optional uint64 max_bandwidth_rate = 6 [(attr_enum_value) = 6];
  optional uint64 max_bandwidth_burst_rate = 7 [(attr_enum_value) = 7];
}

message SchedulerGroupAttribute {
  optional uint32 child_count = 1 [(attr_enum_value) = 1];
  repeated uint64 child_list = 2 [(attr_enum_value) = 2];
  optional uint64 port_id = 3 [(attr_enum_value) = 3];
  optional uint32 level = 4 [(attr_enum_value) = 4];
  optional uint32 max_childs = 5 [(attr_enum_value) = 5];
  optional uint64 scheduler_profile_id = 6 [(attr_enum_value) = 6];
  optional uint64 parent_node = 7 [(attr_enum_value) = 7];
}

message Srv6SidlistAttribute {
  optional Srv6SidlistType type = 1 [(attr_enum_value) = 1];
  repeated TLVEntry tlv_list = 2 [(attr_enum_value) = 2];
  repeated bytes segment_list = 3 [(attr_enum_value) = 3];
}

message StpAttribute {
  repeated uint32 vlan_list = 1 [(attr_enum_value) = 1];
  optional uint64 bridge_id = 2 [(attr_enum_value) = 2];
  repeated uint64 port_list = 3 [(attr_enum_value) = 3];
}

message StpPortAttribute {
  optional uint64 stp = 1 [(attr_enum_value) = 1];
  optional uint64 bridge_port = 2 [(attr_enum_value) = 2];
  optional StpPortState state = 3 [(attr_enum_value) = 3];
}

message SwitchAttribute {
  optional uint32 number_of_active_ports = 1 [(attr_enum_value) = 1];
  optional uint32 max_number_of_supported_ports = 2 [(attr_enum_value) = 2];
  repeated uint64 port_list = 3 [(attr_enum_value) = 3];
  optional uint32 port_max_mtu = 4 [(attr_enum_value) = 4];
  optional uint64 cpu_port = 5 [(attr_enum_value) = 5];
  optional uint32 max_virtual_routers = 6 [(attr_enum_value) = 6];
  optional uint32 fdb_table_size = 7 [(attr_enum_value) = 7];
  optional uint32 l3_neighbor_table_size = 8 [(attr_enum_value) = 8];
  optional uint32 l3_route_table_size = 9 [(attr_enum_value) = 9];
  optional uint32 lag_members = 10 [(attr_enum_value) = 10];
  optional uint32 number_of_lags = 11 [(attr_enum_value) = 11];
  optional uint32 ecmp_members = 12 [(attr_enum_value) = 12];
  optional uint32 number_of_ecmp_groups = 13 [(attr_enum_value) = 13];
  optional uint32 number_of_unicast_queues = 14 [(attr_enum_value) = 14];
  optional uint32 number_of_multicast_queues = 15 [(attr_enum_value) = 15];
  optional uint32 number_of_queues = 16 [(attr_enum_value) = 16];
  optional uint32 number_of_cpu_queues = 17 [(attr_enum_value) = 17];
  optional bool on_link_route_supported = 18 [(attr_enum_value) = 18];
  optional SwitchOperStatus oper_status = 19 [(attr_enum_value) = 19];
  optional uint32 max_number_of_temp_sensors = 20 [(attr_enum_value) = 20];
  repeated int32 temp_list = 21 [(attr_enum_value) = 21];
  optional uint32 max_temp = 22 [(attr_enum_value) = 22];
  optional uint32 average_temp = 23 [(attr_enum_value) = 23];
  optional uint32 acl_table_minimum_priority = 24 [(attr_enum_value) = 24];
  optional uint32 acl_table_maximum_priority = 25 [(attr_enum_value) = 25];
  optional uint32 acl_entry_minimum_priority = 26 [(attr_enum_value) = 26];
  optional uint32 acl_entry_maximum_priority = 27 [(attr_enum_value) = 27];
  optional uint32 acl_table_group_minimum_priority = 28
      [(attr_enum_value) = 28];
  optional uint32 acl_table_group_maximum_priority = 29
      [(attr_enum_value) = 29];
  optional Uint32Range fdb_dst_user_meta_data_range = 30
      [(attr_enum_value) = 30];
  optional Uint32Range route_dst_user_meta_data_range = 31
      [(attr_enum_value) = 31];
  optional Uint32Range neighbor_dst_user_meta_data_range = 32
      [(attr_enum_value) = 32];
  optional Uint32Range port_user_meta_data_range = 33 [(attr_enum_value) = 33];
  optional Uint32Range vlan_user_meta_data_range = 34 [(attr_enum_value) = 34];
  optional Uint32Range acl_user_meta_data_range = 35 [(attr_enum_value) = 35];
  optional Uint32Range acl_user_trap_id_range = 36 [(attr_enum_value) = 36];
  optional uint64 default_vlan_id = 37 [(attr_enum_value) = 37];
  optional uint64 default_stp_inst_id = 38 [(attr_enum_value) = 38];
  optional uint32 max_stp_instance = 39 [(attr_enum_value) = 39];
  optional uint64 default_virtual_router_id = 40 [(attr_enum_value) = 40];
  optional uint64 default_override_virtual_router_id = 41
      [(attr_enum_value) = 41];
  optional uint64 default_1q_bridge_id = 42 [(attr_enum_value) = 42];
  optional uint64 ingress_acl = 43 [(attr_enum_value) = 43];
  optional uint64 egress_acl = 44 [(attr_enum_value) = 44];
  optional uint32 qos_max_number_of_traffic_classes = 45
      [(attr_enum_value) = 45];
  optional uint32 qos_max_number_of_scheduler_group_hierarchy_levels = 46
      [(attr_enum_value) = 46];
  repeated uint32 qos_max_number_of_scheduler_groups_per_hierarchy_level = 47
      [(attr_enum_value) = 47];
  optional uint32 qos_max_number_of_childs_per_scheduler_group = 48
      [(attr_enum_value) = 48];
  optional uint64 total_buffer_size = 49 [(attr_enum_value) = 49];
  optional uint32 ingress_buffer_pool_num = 50 [(attr_enum_value) = 50];
  optional uint32 egress_buffer_pool_num = 51 [(attr_enum_value) = 51];
  optional uint32 available_ipv4_route_entry = 52 [(attr_enum_value) = 52];
  optional uint32 available_ipv6_route_entry = 53 [(attr_enum_value) = 53];
  optional uint32 available_ipv4_nexthop_entry = 54 [(attr_enum_value) = 54];
  optional uint32 available_ipv6_nexthop_entry = 55 [(attr_enum_value) = 55];
  optional uint32 available_ipv4_neighbor_entry = 56 [(attr_enum_value) = 56];
  optional uint32 available_ipv6_neighbor_entry = 57 [(attr_enum_value) = 57];
  optional uint32 available_next_hop_group_entry = 58 [(attr_enum_value) = 58];
  optional uint32 available_next_hop_group_member_entry = 59
      [(attr_enum_value) = 59];
  optional uint32 available_fdb_entry = 60 [(attr_enum_value) = 60];
  optional uint32 available_l2mc_entry = 61 [(attr_enum_value) = 61];
  optional uint32 available_ipmc_entry = 62 [(attr_enum_value) = 62];
  optional uint32 available_snat_entry = 63 [(attr_enum_value) = 63];
  optional uint32 available_dnat_entry = 64 [(attr_enum_value) = 64];
  optional uint32 available_double_nat_entry = 65 [(attr_enum_value) = 65];
  repeated ACLResource available_acl_table = 66 [(attr_enum_value) = 66];
  repeated ACLResource available_acl_table_group = 67 [(attr_enum_value) = 67];
  optional uint32 available_my_sid_entry = 68 [(attr_enum_value) = 68];
  optional uint64 default_trap_group = 69 [(attr_enum_value) = 69];
  optional uint64 ecmp_hash = 70 [(attr_enum_value) = 70];
  optional uint64 lag_hash = 71 [(attr_enum_value) = 71];
  optional bool restart_warm = 72 [(attr_enum_value) = 72];
  optional bool warm_recover = 73 [(attr_enum_value) = 73];
  optional SwitchRestartType restart_type = 74 [(attr_enum_value) = 74];
  optional uint32 min_planned_restart_interval = 75 [(attr_enum_value) = 75];
  optional uint64 nv_storage_size = 76 [(attr_enum_value) = 76];
  optional uint32 max_acl_action_count = 77 [(attr_enum_value) = 77];
  optional uint32 max_acl_range_count = 78 [(attr_enum_value) = 78];
  optional ACLCapability acl_capability = 79 [(attr_enum_value) = 79];
  optional SwitchMcastSnoopingCapability mcast_snooping_capability = 80
      [(attr_enum_value) = 80];
  optional SwitchSwitchingMode switching_mode = 81 [(attr_enum_value) = 81];
  optional bool bcast_cpu_flood_enable = 82 [(attr_enum_value) = 82];
  optional bool mcast_cpu_flood_enable = 83 [(attr_enum_value) = 83];
  optional bytes src_mac_address = 84 [(attr_enum_value) = 84];
  optional uint32 max_learned_addresses = 85 [(attr_enum_value) = 85];
  optional uint32 fdb_aging_time = 86 [(attr_enum_value) = 86];
  optional PacketAction fdb_unicast_miss_packet_action = 87
      [(attr_enum_value) = 87];
  optional PacketAction fdb_broadcast_miss_packet_action = 88
      [(attr_enum_value) = 88];
  optional PacketAction fdb_multicast_miss_packet_action = 89
      [(attr_enum_value) = 89];
  optional HashAlgorithm ecmp_default_hash_algorithm = 90
      [(attr_enum_value) = 90];
  optional uint32 ecmp_default_hash_seed = 91 [(attr_enum_value) = 91];
  optional uint32 ecmp_default_hash_offset = 92 [(attr_enum_value) = 92];
  optional bool ecmp_default_symmetric_hash = 93 [(attr_enum_value) = 93];
  optional uint64 ecmp_hash_ipv4 = 94 [(attr_enum_value) = 94];
  optional uint64 ecmp_hash_ipv4_in_ipv4 = 95 [(attr_enum_value) = 95];
  optional uint64 ecmp_hash_ipv6 = 96 [(attr_enum_value) = 96];
  optional HashAlgorithm lag_default_hash_algorithm = 97
      [(attr_enum_value) = 97];
  optional uint32 lag_default_hash_seed = 98 [(attr_enum_value) = 98];
  optional uint32 lag_default_hash_offset = 99 [(attr_enum_value) = 99];
  optional bool lag_default_symmetric_hash = 100 [(attr_enum_value) = 100];
  optional uint64 lag_hash_ipv4 = 101 [(attr_enum_value) = 101];
  optional uint64 lag_hash_ipv4_in_ipv4 = 102 [(attr_enum_value) = 102];
  optional uint64 lag_hash_ipv6 = 103 [(attr_enum_value) = 103];
  optional uint32 counter_refresh_interval = 104 [(attr_enum_value) = 104];
  optional uint32 qos_default_tc = 105 [(attr_enum_value) = 105];
  optional uint64 qos_dot1p_to_tc_map = 106 [(attr_enum_value) = 106];
  optional uint64 qos_dot1p_to_color_map = 107 [(attr_enum_value) = 107];
  optional uint64 qos_dscp_to_tc_map = 108 [(attr_enum_value) = 108];
  optional uint64 qos_dscp_to_color_map = 109 [(attr_enum_value) = 109];
  optional uint64 qos_tc_to_queue_map = 110 [(attr_enum_value) = 110];
  optional uint64 qos_tc_and_color_to_dot1p_map = 111 [(attr_enum_value) = 111];
  optional uint64 qos_tc_and_color_to_dscp_map = 112 [(attr_enum_value) = 112];
  optional bool switch_shell_enable = 113 [(attr_enum_value) = 113];
  optional uint32 switch_profile_id = 114 [(attr_enum_value) = 114];
  repeated int32 switch_hardware_info = 115 [(attr_enum_value) = 115];
  repeated int32 firmware_path_name = 116 [(attr_enum_value) = 116];
  optional bool init_switch = 117 [(attr_enum_value) = 117];
  optional bool fast_api_enable = 118 [(attr_enum_value) = 123];
  optional uint32 mirror_tc = 119 [(attr_enum_value) = 124];
  optional ACLCapability acl_stage_ingress = 120 [(attr_enum_value) = 125];
  optional ACLCapability acl_stage_egress = 121 [(attr_enum_value) = 126];
  optional uint32 srv6_max_sid_depth = 122 [(attr_enum_value) = 127];
  repeated TlvType srv6_tlv_type = 123 [(attr_enum_value) = 128];
  optional uint32 qos_num_lossless_queues = 124 [(attr_enum_value) = 129];
  optional PacketAction pfc_dlr_packet_action = 125 [(attr_enum_value) = 131];
  optional Uint32Range pfc_tc_dld_interval_range = 126
      [(attr_enum_value) = 132];
  repeated UintMap pfc_tc_dld_interval = 127 [(attr_enum_value) = 133];
  optional Uint32Range pfc_tc_dlr_interval_range = 128
      [(attr_enum_value) = 134];
  repeated UintMap pfc_tc_dlr_interval = 129 [(attr_enum_value) = 135];
  repeated ObjectType supported_protected_object_type = 130
      [(attr_enum_value) = 136];
  optional uint32 tpid_outer_vlan = 131 [(attr_enum_value) = 137];
  optional uint32 tpid_inner_vlan = 132 [(attr_enum_value) = 138];
  optional bool crc_check_enable = 133 [(attr_enum_value) = 139];
  optional bool crc_recalculation_enable = 134 [(attr_enum_value) = 140];
  optional uint32 number_of_bfd_session = 135 [(attr_enum_value) = 142];
  optional uint32 max_bfd_session = 136 [(attr_enum_value) = 143];
  repeated BfdSessionOffloadType supported_ipv4_bfd_session_offload_type = 137
      [(attr_enum_value) = 144];
  repeated BfdSessionOffloadType supported_ipv6_bfd_session_offload_type = 138
      [(attr_enum_value) = 145];
  optional uint32 min_bfd_rx = 139 [(attr_enum_value) = 146];
  optional uint32 min_bfd_tx = 140 [(attr_enum_value) = 147];
  optional bool ecn_ect_threshold_enable = 141 [(attr_enum_value) = 148];
  optional bytes vxlan_default_router_mac = 142 [(attr_enum_value) = 149];
  optional uint32 vxlan_default_port = 143 [(attr_enum_value) = 150];
  optional uint32 max_mirror_session = 144 [(attr_enum_value) = 151];
  optional uint32 max_sampled_mirror_session = 145 [(attr_enum_value) = 152];
  repeated StatsMode supported_extended_stats_mode = 146
      [(attr_enum_value) = 153];
  optional bool uninit_data_plane_on_removal = 147 [(attr_enum_value) = 154];
  repeated uint64 tam_object_id = 148 [(attr_enum_value) = 155];
  repeated ObjectType supported_object_type_list = 149
      [(attr_enum_value) = 157];
  optional bool pre_shutdown = 150 [(attr_enum_value) = 158];
  optional uint64 nat_zone_counter_object_id = 151 [(attr_enum_value) = 159];
  optional bool nat_enable = 152 [(attr_enum_value) = 160];
  optional SwitchHardwareAccessBus hardware_access_bus = 153
      [(attr_enum_value) = 161];
  optional uint64 platfrom_context = 154 [(attr_enum_value) = 162];
  optional bool firmware_download_broadcast = 155 [(attr_enum_value) = 165];
  optional SwitchFirmwareLoadMethod firmware_load_method = 156
      [(attr_enum_value) = 166];
  optional SwitchFirmwareLoadType firmware_load_type = 157
      [(attr_enum_value) = 167];
  optional bool firmware_download_execute = 158 [(attr_enum_value) = 168];
  optional bool firmware_broadcast_stop = 159 [(attr_enum_value) = 169];
  optional bool firmware_verify_and_init_switch = 160 [(attr_enum_value) = 170];
  optional bool firmware_status = 161 [(attr_enum_value) = 171];
  optional uint32 firmware_major_version = 162 [(attr_enum_value) = 172];
  optional uint32 firmware_minor_version = 163 [(attr_enum_value) = 173];
  repeated uint64 port_connector_list = 164 [(attr_enum_value) = 174];
  optional bool propogate_port_state_from_line_to_system_port_support = 165
      [(attr_enum_value) = 175];
  optional SwitchType type = 166 [(attr_enum_value) = 176];
  repeated uint64 macsec_object_list = 167 [(attr_enum_value) = 177];
  optional uint64 qos_mpls_exp_to_tc_map = 168 [(attr_enum_value) = 178];
  optional uint64 qos_mpls_exp_to_color_map = 169 [(attr_enum_value) = 179];
  optional uint64 qos_tc_and_color_to_mpls_exp_map = 170
      [(attr_enum_value) = 180];
  optional uint32 switch_id = 171 [(attr_enum_value) = 181];
  optional uint32 max_system_cores = 172 [(attr_enum_value) = 182];
  repeated SystemPortConfig system_port_config_list = 173
      [(attr_enum_value) = 183];
  optional uint32 number_of_system_ports = 174 [(attr_enum_value) = 184];
  repeated uint64 system_port_list = 175 [(attr_enum_value) = 185];
  optional uint32 number_of_fabric_ports = 176 [(attr_enum_value) = 186];
  repeated uint64 fabric_port_list = 177 [(attr_enum_value) = 187];
  optional uint32 packet_dma_memory_pool_size = 178 [(attr_enum_value) = 188];
  optional SwitchFailoverConfigMode failover_config_mode = 179
      [(attr_enum_value) = 189];
  optional bool supported_failover_mode = 180 [(attr_enum_value) = 190];
  repeated uint64 tunnel_objects_list = 181 [(attr_enum_value) = 191];
  optional uint32 packet_available_dma_memory_pool_size = 182
      [(attr_enum_value) = 192];
  optional uint64 pre_ingress_acl = 183 [(attr_enum_value) = 193];
  optional uint32 available_snapt_entry = 184 [(attr_enum_value) = 194];
  optional uint32 available_dnapt_entry = 185 [(attr_enum_value) = 195];
  optional uint32 available_double_napt_entry = 186 [(attr_enum_value) = 196];
  repeated uint32 slave_mdio_addr_list = 187 [(attr_enum_value) = 197];
  optional uint32 my_mac_table_minimum_priority = 188 [(attr_enum_value) = 198];
  optional uint32 my_mac_table_maximum_priority = 189 [(attr_enum_value) = 199];
  repeated uint64 my_mac_list = 190 [(attr_enum_value) = 200];
  optional uint32 installed_my_mac_entries = 191 [(attr_enum_value) = 201];
  optional uint32 available_my_mac_entries = 192 [(attr_enum_value) = 202];
  optional uint32 max_number_of_forwarding_classes = 193
      [(attr_enum_value) = 203];
  optional uint64 qos_dscp_to_forwarding_class_map = 194
      [(attr_enum_value) = 204];
  optional uint64 qos_mpls_exp_to_forwarding_class_map = 195
      [(attr_enum_value) = 205];
  optional uint64 ipsec_object_id = 196 [(attr_enum_value) = 206];
  optional uint32 ipsec_sa_tag_tpid = 197 [(attr_enum_value) = 207];
  optional uint32 max_ecmp_member_count = 198 [(attr_enum_value) = 210];
  optional uint32 ecmp_member_count = 199 [(attr_enum_value) = 211];
}

message SwitchTunnelAttribute {
  optional TunnelType tunnel_type = 1 [(attr_enum_value) = 1];
  optional PacketAction loopback_packet_action = 2 [(attr_enum_value) = 2];
  optional TunnelEncapEcnMode tunnel_encap_ecn_mode = 3 [(attr_enum_value) = 3];
  repeated uint64 encap_mappers = 4 [(attr_enum_value) = 4];
  optional TunnelDecapEcnMode tunnel_decap_ecn_mode = 5 [(attr_enum_value) = 5];
  repeated uint64 decap_mappers = 6 [(attr_enum_value) = 6];
  optional TunnelVxlanUdpSportMode tunnel_vxlan_udp_sport_mode = 7
      [(attr_enum_value) = 7];
  optional uint32 vxlan_udp_sport = 8 [(attr_enum_value) = 8];
  optional uint32 vxlan_udp_sport_mask = 9 [(attr_enum_value) = 9];
  optional uint64 encap_qos_tc_and_color_to_dscp_map = 10
      [(attr_enum_value) = 10];
  optional uint64 encap_qos_tc_to_queue_map = 11 [(attr_enum_value) = 11];
  optional uint64 decap_qos_dscp_to_tc_map = 12 [(attr_enum_value) = 12];
  optional uint64 decap_qos_tc_to_priority_group_map = 13
      [(attr_enum_value) = 13];
}

message SystemPortAttribute {
  optional SystemPortType type = 1 [(attr_enum_value) = 1];
  optional uint32 qos_number_of_voqs = 2 [(attr_enum_value) = 2];
  repeated uint64 qos_voq_list = 3 [(attr_enum_value) = 3];
  optional uint64 port = 4 [(attr_enum_value) = 4];
  optional bool admin_state = 5 [(attr_enum_value) = 5];
  optional SystemPortConfig config_info = 6 [(attr_enum_value) = 6];
  optional uint64 qos_tc_to_queue_map = 7 [(attr_enum_value) = 7];
}

message TableBitmapClassificationEntryAttribute {
  optional TableBitmapClassificationEntryAction action = 1
      [(attr_enum_value) = 1];
  optional uint64 router_interface_key = 2 [(attr_enum_value) = 2];
  optional bool is_default = 3 [(attr_enum_value) = 3];
  optional uint32 in_rif_metadata = 4 [(attr_enum_value) = 4];
}

message TableBitmapRouterEntryAttribute {
  optional TableBitmapRouterEntryAction action = 1 [(attr_enum_value) = 1];
  optional uint32 priority = 2 [(attr_enum_value) = 2];
  optional uint32 in_rif_metadata_key = 3 [(attr_enum_value) = 3];
  optional uint32 in_rif_metadata_mask = 4 [(attr_enum_value) = 4];
  optional IpPrefix dst_ip_key = 5 [(attr_enum_value) = 5];
  optional uint32 tunnel_index = 6 [(attr_enum_value) = 6];
  optional uint64 next_hop = 7 [(attr_enum_value) = 7];
  optional uint64 router_interface = 8 [(attr_enum_value) = 8];
  optional uint64 trap_id = 9 [(attr_enum_value) = 9];
}

message TableMetaTunnelEntryAttribute {
  optional TableMetaTunnelEntryAction action = 1 [(attr_enum_value) = 1];
  optional uint32 metadata_key = 2 [(attr_enum_value) = 2];
  optional bool is_default = 3 [(attr_enum_value) = 3];
  optional uint64 tunnel_id = 4 [(attr_enum_value) = 4];
  optional bytes underlay_dip = 5 [(attr_enum_value) = 5];
}

message TamAttribute {
  repeated uint64 telemetry_objects_list = 1 [(attr_enum_value) = 1];
  repeated uint64 event_objects_list = 2 [(attr_enum_value) = 2];
  repeated uint64 int_objects_list = 3 [(attr_enum_value) = 3];
  repeated TamBindPointType tam_bind_point_type_list = 4
      [(attr_enum_value) = 4];
}

message TamCollectorAttribute {
  optional bytes src_ip = 1 [(attr_enum_value) = 1];
  optional bytes dst_ip = 2 [(attr_enum_value) = 2];
  optional bool localhost = 3 [(attr_enum_value) = 3];
  optional uint64 virtual_router_id = 4 [(attr_enum_value) = 4];
  optional uint32 truncate_size = 5 [(attr_enum_value) = 5];
  optional uint64 transport = 6 [(attr_enum_value) = 6];
  optional uint32 dscp_value = 7 [(attr_enum_value) = 7];
}

message TamEventAttribute {
  optional TamEventType type = 1 [(attr_enum_value) = 1];
  repeated uint64 action_list = 2 [(attr_enum_value) = 2];
  repeated uint64 collector_list = 3 [(attr_enum_value) = 3];
  optional uint64 threshold = 4 [(attr_enum_value) = 4];
  optional uint32 dscp_value = 5 [(attr_enum_value) = 5];
}

message TamEventActionAttribute {
  optional uint64 report_type = 1 [(attr_enum_value) = 1];
  optional uint32 qos_action_type = 2 [(attr_enum_value) = 2];
}

message TamEventThresholdAttribute {
  optional uint32 high_watermark = 1 [(attr_enum_value) = 1];
  optional uint32 low_watermark = 2 [(attr_enum_value) = 2];
  optional uint32 latency = 3 [(attr_enum_value) = 3];
  optional uint32 rate = 4 [(attr_enum_value) = 4];
  optional uint32 abs_value = 5 [(attr_enum_value) = 5];
  optional TamEventThresholdUnit unit = 6 [(attr_enum_value) = 6];
}

message TamIntAttribute {
  optional TamIntType type = 1 [(attr_enum_value) = 1];
  optional uint32 device_id = 2 [(attr_enum_value) = 2];
  optional uint32 ioam_trace_type = 3 [(attr_enum_value) = 3];
  optional TamIntPresenceType int_presence_type = 4 [(attr_enum_value) = 4];
  optional uint32 int_presence_pb1 = 5 [(attr_enum_value) = 5];
  optional uint32 int_presence_pb2 = 6 [(attr_enum_value) = 6];
  optional uint32 int_presence_dscp_value = 7 [(attr_enum_value) = 7];
  optional bool inline = 8 [(attr_enum_value) = 8];
  optional uint32 int_presence_l3_protocol = 9 [(attr_enum_value) = 9];
  optional uint32 trace_vector = 10 [(attr_enum_value) = 10];
  optional uint32 action_vector = 11 [(attr_enum_value) = 11];
  optional uint32 p4_int_instruction_bitmap = 12 [(attr_enum_value) = 12];
  optional bool metadata_fragment_enable = 13 [(attr_enum_value) = 13];
  optional bool metadata_checksum_enable = 14 [(attr_enum_value) = 14];
  optional bool report_all_packets = 15 [(attr_enum_value) = 15];
  optional uint32 flow_liveness_period = 16 [(attr_enum_value) = 16];
  optional uint32 latency_sensitivity = 17 [(attr_enum_value) = 17];
  optional uint64 acl_group = 18 [(attr_enum_value) = 18];
  optional uint32 max_hop_count = 19 [(attr_enum_value) = 19];
  optional uint32 max_length = 20 [(attr_enum_value) = 20];
  optional uint32 name_space_id = 21 [(attr_enum_value) = 21];
  optional bool name_space_id_global = 22 [(attr_enum_value) = 22];
  optional uint64 ingress_samplepacket_enable = 23 [(attr_enum_value) = 23];
  repeated uint64 collector_list = 24 [(attr_enum_value) = 24];
  optional uint64 math_func = 25 [(attr_enum_value) = 25];
  optional uint64 report_id = 26 [(attr_enum_value) = 26];
}

message TamMathFuncAttribute {
  optional TamTelMathFuncType tam_tel_math_func_type = 1
      [(attr_enum_value) = 1];
}

message TamReportAttribute {
  optional TamReportType type = 1 [(attr_enum_value) = 1];
  optional uint32 histogram_number_of_bins = 2 [(attr_enum_value) = 2];
  repeated uint32 histogram_bin_boundary = 3 [(attr_enum_value) = 3];
  optional uint32 quota = 4 [(attr_enum_value) = 4];
  optional TamReportMode report_mode = 5 [(attr_enum_value) = 5];
  optional uint32 report_interval = 6 [(attr_enum_value) = 6];
  optional uint32 enterprise_number = 7 [(attr_enum_value) = 7];
  optional uint32 template_report_interval = 8 [(attr_enum_value) = 8];
}

message TamTelemetryAttribute {
  repeated uint64 tam_type_list = 1 [(attr_enum_value) = 1];
  repeated uint64 collector_list = 2 [(attr_enum_value) = 2];
  optional TamReportingUnit tam_reporting_unit = 3 [(attr_enum_value) = 3];
  optional uint32 reporting_interval = 4 [(attr_enum_value) = 4];
}

message TamTelTypeAttribute {
  optional TamTelemetryType tam_telemetry_type = 1 [(attr_enum_value) = 1];
  optional uint32 int_switch_identifier = 2 [(attr_enum_value) = 2];
  optional bool switch_enable_port_stats = 3 [(attr_enum_value) = 3];
  optional bool switch_enable_port_stats_ingress = 4 [(attr_enum_value) = 4];
  optional bool switch_enable_port_stats_egress = 5 [(attr_enum_value) = 5];
  optional bool switch_enable_virtual_queue_stats = 6 [(attr_enum_value) = 6];
  optional bool switch_enable_output_queue_stats = 7 [(attr_enum_value) = 7];
  optional bool switch_enable_mmu_stats = 8 [(attr_enum_value) = 8];
  optional bool switch_enable_fabric_stats = 9 [(attr_enum_value) = 9];
  optional bool switch_enable_filter_stats = 10 [(attr_enum_value) = 10];
  optional bool switch_enable_resource_utilization_stats = 11
      [(attr_enum_value) = 11];
  optional bool fabric_q = 12 [(attr_enum_value) = 12];
  optional bool ne_enable = 13 [(attr_enum_value) = 13];
  optional uint32 dscp_value = 14 [(attr_enum_value) = 14];
  optional uint64 math_func = 15 [(attr_enum_value) = 15];
  optional uint64 report_id = 16 [(attr_enum_value) = 16];
}

message TamTransportAttribute {
  optional TamTransportType transport_type = 1 [(attr_enum_value) = 1];
  optional uint32 src_port = 2 [(attr_enum_value) = 2];
  optional uint32 dst_port = 3 [(attr_enum_value) = 3];
  optional TamTransportAuthType transport_auth_type = 4 [(attr_enum_value) = 4];
  optional uint32 mtu = 5 [(attr_enum_value) = 5];
}

message TunnelAttribute {
  optional TunnelType type = 1 [(attr_enum_value) = 1];
  optional uint64 underlay_interface = 2 [(attr_enum_value) = 2];
  optional uint64 overlay_interface = 3 [(attr_enum_value) = 3];
  optional TunnelPeerMode peer_mode = 4 [(attr_enum_value) = 4];
  optional bytes encap_src_ip = 5 [(attr_enum_value) = 5];
  optional bytes encap_dst_ip = 6 [(attr_enum_value) = 6];
  optional TunnelTtlMode encap_ttl_mode = 7 [(attr_enum_value) = 7];
  optional uint32 encap_ttl_val = 8 [(attr_enum_value) = 8];
  optional TunnelDscpMode encap_dscp_mode = 9 [(attr_enum_value) = 9];
  optional uint32 encap_dscp_val = 10 [(attr_enum_value) = 10];
  optional bool encap_gre_key_valid = 11 [(attr_enum_value) = 11];
  optional uint32 encap_gre_key = 12 [(attr_enum_value) = 12];
  optional TunnelEncapEcnMode encap_ecn_mode = 13 [(attr_enum_value) = 13];
  repeated uint64 encap_mappers = 14 [(attr_enum_value) = 14];
  optional TunnelDecapEcnMode decap_ecn_mode = 15 [(attr_enum_value) = 15];
  repeated uint64 decap_mappers = 16 [(attr_enum_value) = 16];
  optional TunnelTtlMode decap_ttl_mode = 17 [(attr_enum_value) = 17];
  optional TunnelDscpMode decap_dscp_mode = 18 [(attr_enum_value) = 18];
  repeated uint64 term_table_entry_list = 19 [(attr_enum_value) = 19];
  optional PacketAction loopback_packet_action = 20 [(attr_enum_value) = 20];
  optional TunnelVxlanUdpSportMode vxlan_udp_sport_mode = 21
      [(attr_enum_value) = 21];
  optional uint32 vxlan_udp_sport = 22 [(attr_enum_value) = 22];
  optional uint32 vxlan_udp_sport_mask = 23 [(attr_enum_value) = 23];
  optional uint32 sa_index = 24 [(attr_enum_value) = 24];
  repeated uint64 ipsec_sa_port_list = 25 [(attr_enum_value) = 25];
  optional uint64 encap_qos_tc_and_color_to_dscp_map = 26
      [(attr_enum_value) = 26];
  optional uint64 encap_qos_tc_to_queue_map = 27 [(attr_enum_value) = 27];
  optional uint64 decap_qos_dscp_to_tc_map = 28 [(attr_enum_value) = 28];
  optional uint64 decap_qos_tc_to_priority_group_map = 29
      [(attr_enum_value) = 29];
  optional bool vxlan_udp_sport_security = 30 [(attr_enum_value) = 30];
}

message TunnelMapAttribute {
  optional TunnelMapType type = 1 [(attr_enum_value) = 1];
  repeated uint64 entry_list = 2 [(attr_enum_value) = 2];
}

message TunnelMapEntryAttribute {
  optional TunnelMapType tunnel_map_type = 1 [(attr_enum_value) = 1];
  optional uint64 tunnel_map = 2 [(attr_enum_value) = 2];
  optional uint32 oecn_key = 3 [(attr_enum_value) = 3];
  optional uint32 oecn_value = 4 [(attr_enum_value) = 4];
  optional uint32 uecn_key = 5 [(attr_enum_value) = 5];
  optional uint32 uecn_value = 6 [(attr_enum_value) = 6];
  optional uint32 vlan_id_key = 7 [(attr_enum_value) = 7];
  optional uint32 vlan_id_value = 8 [(attr_enum_value) = 8];
  optional uint32 vni_id_key = 9 [(attr_enum_value) = 9];
  optional uint32 vni_id_value = 10 [(attr_enum_value) = 10];
  optional uint64 bridge_id_key = 11 [(attr_enum_value) = 11];
  optional uint64 bridge_id_value = 12 [(attr_enum_value) = 12];
  optional uint64 virtual_router_id_key = 13 [(attr_enum_value) = 13];
  optional uint64 virtual_router_id_value = 14 [(attr_enum_value) = 14];
  optional uint32 vsid_id_key = 15 [(attr_enum_value) = 15];
  optional uint32 vsid_id_value = 16 [(attr_enum_value) = 16];
}

message TunnelTermTableEntryAttribute {
  optional uint64 vr_id = 1 [(attr_enum_value) = 1];
  optional TunnelTermTableEntryType type = 2 [(attr_enum_value) = 2];
  optional bytes dst_ip = 3 [(attr_enum_value) = 3];
  optional bytes dst_ip_mask = 4 [(attr_enum_value) = 4];
  optional bytes src_ip = 5 [(attr_enum_value) = 5];
  optional bytes src_ip_mask = 6 [(attr_enum_value) = 6];
  optional TunnelType tunnel_type = 7 [(attr_enum_value) = 7];
  optional uint64 action_tunnel_id = 8 [(attr_enum_value) = 8];
  optional IpAddrFamily ip_addr_family = 9 [(attr_enum_value) = 9];
  optional bool ipsec_verified = 10 [(attr_enum_value) = 10];
}

message UdfAttribute {
  optional uint64 match_id = 1 [(attr_enum_value) = 1];
  optional uint64 group_id = 2 [(attr_enum_value) = 2];
  optional UdfBase base = 3 [(attr_enum_value) = 3];
  optional uint32 offset = 4 [(attr_enum_value) = 4];
  repeated uint32 hash_mask = 5 [(attr_enum_value) = 5];
}

message UdfGroupAttribute {
  repeated uint64 udf_list = 1 [(attr_enum_value) = 1];
  optional UdfGroupType type = 2 [(attr_enum_value) = 2];
  optional uint32 length = 3 [(attr_enum_value) = 3];
}

message UdfMatchAttribute {
  optional AclFieldData l2_type = 1 [(attr_enum_value) = 1];
  optional AclFieldData l3_type = 2 [(attr_enum_value) = 2];
  optional AclFieldData gre_type = 3 [(attr_enum_value) = 3];
  optional uint32 priority = 4 [(attr_enum_value) = 4];
}

message VirtualRouterAttribute {
  optional bool admin_v4_state = 1 [(attr_enum_value) = 1];
  optional bool admin_v6_state = 2 [(attr_enum_value) = 2];
  optional bytes src_mac_address = 3 [(attr_enum_value) = 3];
  optional PacketAction violation_ttl1_packet_action = 4
      [(attr_enum_value) = 4];
  optional PacketAction violation_ip_options_packet_action = 5
      [(attr_enum_value) = 5];
  optional PacketAction unknown_l3_multicast_packet_action = 6
      [(attr_enum_value) = 6];
  optional bytes label = 7 [(attr_enum_value) = 7];
}

message VlanAttribute {
  optional uint32 vlan_id = 1 [(attr_enum_value) = 1];
  repeated uint64 member_list = 2 [(attr_enum_value) = 2];
  optional uint32 max_learned_addresses = 3 [(attr_enum_value) = 3];
  optional uint64 stp_instance = 4 [(attr_enum_value) = 4];
  optional bool learn_disable = 5 [(attr_enum_value) = 5];
  optional VlanMcastLookupKeyType ipv4_mcast_lookup_key_type = 6
      [(attr_enum_value) = 6];
  optional VlanMcastLookupKeyType ipv6_mcast_lookup_key_type = 7
      [(attr_enum_value) = 7];
  optional uint64 unknown_non_ip_mcast_output_group_id = 8
      [(attr_enum_value) = 8];
  optional uint64 unknown_ipv4_mcast_output_group_id = 9
      [(attr_enum_value) = 9];
  optional uint64 unknown_ipv6_mcast_output_group_id = 10
      [(attr_enum_value) = 10];
  optional uint64 unknown_linklocal_mcast_output_group_id = 11
      [(attr_enum_value) = 11];
  optional uint64 ingress_acl = 12 [(attr_enum_value) = 12];
  optional uint64 egress_acl = 13 [(attr_enum_value) = 13];
  optional uint32 meta_data = 14 [(attr_enum_value) = 14];
  optional VlanFloodControlType unknown_unicast_flood_control_type = 15
      [(attr_enum_value) = 15];
  optional uint64 unknown_unicast_flood_group = 16 [(attr_enum_value) = 16];
  optional VlanFloodControlType unknown_multicast_flood_control_type = 17
      [(attr_enum_value) = 17];
  optional uint64 unknown_multicast_flood_group = 18 [(attr_enum_value) = 18];
  optional VlanFloodControlType broadcast_flood_control_type = 19
      [(attr_enum_value) = 19];
  optional uint64 broadcast_flood_group = 20 [(attr_enum_value) = 20];
  optional bool custom_igmp_snooping_enable = 21 [(attr_enum_value) = 21];
  repeated uint64 tam_object = 22 [(attr_enum_value) = 22];
}

message VlanMemberAttribute {
  optional uint64 vlan_id = 1 [(attr_enum_value) = 1];
  optional uint64 bridge_port_id = 2 [(attr_enum_value) = 2];
  optional VlanTaggingMode vlan_tagging_mode = 3 [(attr_enum_value) = 3];
}

message WredAttribute {
  optional bool green_enable = 1 [(attr_enum_value) = 1];
  optional uint32 green_min_threshold = 2 [(attr_enum_value) = 2];
  optional uint32 green_max_threshold = 3 [(attr_enum_value) = 3];
  optional uint32 green_drop_probability = 4 [(attr_enum_value) = 4];
  optional bool yellow_enable = 5 [(attr_enum_value) = 5];
  optional uint32 yellow_min_threshold = 6 [(attr_enum_value) = 6];
  optional uint32 yellow_max_threshold = 7 [(attr_enum_value) = 7];
  optional uint32 yellow_drop_probability = 8 [(attr_enum_value) = 8];
  optional bool red_enable = 9 [(attr_enum_value) = 9];
  optional uint32 red_min_threshold = 10 [(attr_enum_value) = 10];
  optional uint32 red_max_threshold = 11 [(attr_enum_value) = 11];
  optional uint32 red_drop_probability = 12 [(attr_enum_value) = 12];
  optional uint32 weight = 13 [(attr_enum_value) = 13];
  optional EcnMarkMode ecn_mark_mode = 14 [(attr_enum_value) = 14];
  optional uint32 ecn_green_min_threshold = 15 [(attr_enum_value) = 15];
  optional uint32 ecn_green_max_threshold = 16 [(attr_enum_value) = 16];
  optional uint32 ecn_green_mark_probability = 17 [(attr_enum_value) = 17];
  optional uint32 ecn_yellow_min_threshold = 18 [(attr_enum_value) = 18];
  optional uint32 ecn_yellow_max_threshold = 19 [(attr_enum_value) = 19];
  optional uint32 ecn_yellow_mark_probability = 20 [(attr_enum_value) = 20];
  optional uint32 ecn_red_min_threshold = 21 [(attr_enum_value) = 21];
  optional uint32 ecn_red_max_threshold = 22 [(attr_enum_value) = 22];
  optional uint32 ecn_red_mark_probability = 23 [(attr_enum_value) = 23];
  optional uint32 ecn_color_unaware_min_threshold = 24 [(attr_enum_value) = 24];
  optional uint32 ecn_color_unaware_max_threshold = 25 [(attr_enum_value) = 25];
  optional uint32 ecn_color_unaware_mark_probability = 26
      [(attr_enum_value) = 26];
}
