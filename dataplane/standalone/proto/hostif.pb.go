// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/standalone/proto/hostif.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HostifAttr int32

const (
	HostifAttr_HOSTIF_ATTR_UNSPECIFIED          HostifAttr = 0
	HostifAttr_HOSTIF_ATTR_TYPE                 HostifAttr = 1
	HostifAttr_HOSTIF_ATTR_OBJ_ID               HostifAttr = 2
	HostifAttr_HOSTIF_ATTR_NAME                 HostifAttr = 3
	HostifAttr_HOSTIF_ATTR_OPER_STATUS          HostifAttr = 4
	HostifAttr_HOSTIF_ATTR_QUEUE                HostifAttr = 5
	HostifAttr_HOSTIF_ATTR_VLAN_TAG             HostifAttr = 6
	HostifAttr_HOSTIF_ATTR_GENETLINK_MCGRP_NAME HostifAttr = 7
)

// Enum value maps for HostifAttr.
var (
	HostifAttr_name = map[int32]string{
		0: "HOSTIF_ATTR_UNSPECIFIED",
		1: "HOSTIF_ATTR_TYPE",
		2: "HOSTIF_ATTR_OBJ_ID",
		3: "HOSTIF_ATTR_NAME",
		4: "HOSTIF_ATTR_OPER_STATUS",
		5: "HOSTIF_ATTR_QUEUE",
		6: "HOSTIF_ATTR_VLAN_TAG",
		7: "HOSTIF_ATTR_GENETLINK_MCGRP_NAME",
	}
	HostifAttr_value = map[string]int32{
		"HOSTIF_ATTR_UNSPECIFIED":          0,
		"HOSTIF_ATTR_TYPE":                 1,
		"HOSTIF_ATTR_OBJ_ID":               2,
		"HOSTIF_ATTR_NAME":                 3,
		"HOSTIF_ATTR_OPER_STATUS":          4,
		"HOSTIF_ATTR_QUEUE":                5,
		"HOSTIF_ATTR_VLAN_TAG":             6,
		"HOSTIF_ATTR_GENETLINK_MCGRP_NAME": 7,
	}
)

func (x HostifAttr) Enum() *HostifAttr {
	p := new(HostifAttr)
	*p = x
	return p
}

func (x HostifAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostifAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_hostif_proto_enumTypes[0].Descriptor()
}

func (HostifAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_hostif_proto_enumTypes[0]
}

func (x HostifAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostifAttr.Descriptor instead.
func (HostifAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{0}
}

type HostifTableEntryAttr int32

const (
	HostifTableEntryAttr_HOSTIF_TABLE_ENTRY_ATTR_UNSPECIFIED  HostifTableEntryAttr = 0
	HostifTableEntryAttr_HOSTIF_TABLE_ENTRY_ATTR_TYPE         HostifTableEntryAttr = 1
	HostifTableEntryAttr_HOSTIF_TABLE_ENTRY_ATTR_OBJ_ID       HostifTableEntryAttr = 2
	HostifTableEntryAttr_HOSTIF_TABLE_ENTRY_ATTR_TRAP_ID      HostifTableEntryAttr = 3
	HostifTableEntryAttr_HOSTIF_TABLE_ENTRY_ATTR_CHANNEL_TYPE HostifTableEntryAttr = 4
	HostifTableEntryAttr_HOSTIF_TABLE_ENTRY_ATTR_HOST_IF      HostifTableEntryAttr = 5
)

// Enum value maps for HostifTableEntryAttr.
var (
	HostifTableEntryAttr_name = map[int32]string{
		0: "HOSTIF_TABLE_ENTRY_ATTR_UNSPECIFIED",
		1: "HOSTIF_TABLE_ENTRY_ATTR_TYPE",
		2: "HOSTIF_TABLE_ENTRY_ATTR_OBJ_ID",
		3: "HOSTIF_TABLE_ENTRY_ATTR_TRAP_ID",
		4: "HOSTIF_TABLE_ENTRY_ATTR_CHANNEL_TYPE",
		5: "HOSTIF_TABLE_ENTRY_ATTR_HOST_IF",
	}
	HostifTableEntryAttr_value = map[string]int32{
		"HOSTIF_TABLE_ENTRY_ATTR_UNSPECIFIED":  0,
		"HOSTIF_TABLE_ENTRY_ATTR_TYPE":         1,
		"HOSTIF_TABLE_ENTRY_ATTR_OBJ_ID":       2,
		"HOSTIF_TABLE_ENTRY_ATTR_TRAP_ID":      3,
		"HOSTIF_TABLE_ENTRY_ATTR_CHANNEL_TYPE": 4,
		"HOSTIF_TABLE_ENTRY_ATTR_HOST_IF":      5,
	}
)

func (x HostifTableEntryAttr) Enum() *HostifTableEntryAttr {
	p := new(HostifTableEntryAttr)
	*p = x
	return p
}

func (x HostifTableEntryAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostifTableEntryAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_hostif_proto_enumTypes[1].Descriptor()
}

func (HostifTableEntryAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_hostif_proto_enumTypes[1]
}

func (x HostifTableEntryAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostifTableEntryAttr.Descriptor instead.
func (HostifTableEntryAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{1}
}

type HostifTrapGroupAttr int32

const (
	HostifTrapGroupAttr_HOSTIF_TRAP_GROUP_ATTR_UNSPECIFIED  HostifTrapGroupAttr = 0
	HostifTrapGroupAttr_HOSTIF_TRAP_GROUP_ATTR_ADMIN_STATE  HostifTrapGroupAttr = 1
	HostifTrapGroupAttr_HOSTIF_TRAP_GROUP_ATTR_QUEUE        HostifTrapGroupAttr = 2
	HostifTrapGroupAttr_HOSTIF_TRAP_GROUP_ATTR_POLICER      HostifTrapGroupAttr = 3
	HostifTrapGroupAttr_HOSTIF_TRAP_GROUP_ATTR_OBJECT_STAGE HostifTrapGroupAttr = 4
)

// Enum value maps for HostifTrapGroupAttr.
var (
	HostifTrapGroupAttr_name = map[int32]string{
		0: "HOSTIF_TRAP_GROUP_ATTR_UNSPECIFIED",
		1: "HOSTIF_TRAP_GROUP_ATTR_ADMIN_STATE",
		2: "HOSTIF_TRAP_GROUP_ATTR_QUEUE",
		3: "HOSTIF_TRAP_GROUP_ATTR_POLICER",
		4: "HOSTIF_TRAP_GROUP_ATTR_OBJECT_STAGE",
	}
	HostifTrapGroupAttr_value = map[string]int32{
		"HOSTIF_TRAP_GROUP_ATTR_UNSPECIFIED":  0,
		"HOSTIF_TRAP_GROUP_ATTR_ADMIN_STATE":  1,
		"HOSTIF_TRAP_GROUP_ATTR_QUEUE":        2,
		"HOSTIF_TRAP_GROUP_ATTR_POLICER":      3,
		"HOSTIF_TRAP_GROUP_ATTR_OBJECT_STAGE": 4,
	}
)

func (x HostifTrapGroupAttr) Enum() *HostifTrapGroupAttr {
	p := new(HostifTrapGroupAttr)
	*p = x
	return p
}

func (x HostifTrapGroupAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostifTrapGroupAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_hostif_proto_enumTypes[2].Descriptor()
}

func (HostifTrapGroupAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_hostif_proto_enumTypes[2]
}

func (x HostifTrapGroupAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostifTrapGroupAttr.Descriptor instead.
func (HostifTrapGroupAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{2}
}

type HostifTrapAttr int32

const (
	HostifTrapAttr_HOSTIF_TRAP_ATTR_UNSPECIFIED       HostifTrapAttr = 0
	HostifTrapAttr_HOSTIF_TRAP_ATTR_TRAP_TYPE         HostifTrapAttr = 1
	HostifTrapAttr_HOSTIF_TRAP_ATTR_PACKET_ACTION     HostifTrapAttr = 2
	HostifTrapAttr_HOSTIF_TRAP_ATTR_TRAP_PRIORITY     HostifTrapAttr = 3
	HostifTrapAttr_HOSTIF_TRAP_ATTR_EXCLUDE_PORT_LIST HostifTrapAttr = 4
	HostifTrapAttr_HOSTIF_TRAP_ATTR_TRAP_GROUP        HostifTrapAttr = 5
	HostifTrapAttr_HOSTIF_TRAP_ATTR_MIRROR_SESSION    HostifTrapAttr = 6
	HostifTrapAttr_HOSTIF_TRAP_ATTR_COUNTER_ID        HostifTrapAttr = 7
)

// Enum value maps for HostifTrapAttr.
var (
	HostifTrapAttr_name = map[int32]string{
		0: "HOSTIF_TRAP_ATTR_UNSPECIFIED",
		1: "HOSTIF_TRAP_ATTR_TRAP_TYPE",
		2: "HOSTIF_TRAP_ATTR_PACKET_ACTION",
		3: "HOSTIF_TRAP_ATTR_TRAP_PRIORITY",
		4: "HOSTIF_TRAP_ATTR_EXCLUDE_PORT_LIST",
		5: "HOSTIF_TRAP_ATTR_TRAP_GROUP",
		6: "HOSTIF_TRAP_ATTR_MIRROR_SESSION",
		7: "HOSTIF_TRAP_ATTR_COUNTER_ID",
	}
	HostifTrapAttr_value = map[string]int32{
		"HOSTIF_TRAP_ATTR_UNSPECIFIED":       0,
		"HOSTIF_TRAP_ATTR_TRAP_TYPE":         1,
		"HOSTIF_TRAP_ATTR_PACKET_ACTION":     2,
		"HOSTIF_TRAP_ATTR_TRAP_PRIORITY":     3,
		"HOSTIF_TRAP_ATTR_EXCLUDE_PORT_LIST": 4,
		"HOSTIF_TRAP_ATTR_TRAP_GROUP":        5,
		"HOSTIF_TRAP_ATTR_MIRROR_SESSION":    6,
		"HOSTIF_TRAP_ATTR_COUNTER_ID":        7,
	}
)

func (x HostifTrapAttr) Enum() *HostifTrapAttr {
	p := new(HostifTrapAttr)
	*p = x
	return p
}

func (x HostifTrapAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostifTrapAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_hostif_proto_enumTypes[3].Descriptor()
}

func (HostifTrapAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_hostif_proto_enumTypes[3]
}

func (x HostifTrapAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostifTrapAttr.Descriptor instead.
func (HostifTrapAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{3}
}

type HostifUserDefinedTrapAttr int32

const (
	HostifUserDefinedTrapAttr_HOSTIF_USER_DEFINED_TRAP_ATTR_UNSPECIFIED   HostifUserDefinedTrapAttr = 0
	HostifUserDefinedTrapAttr_HOSTIF_USER_DEFINED_TRAP_ATTR_TYPE          HostifUserDefinedTrapAttr = 1
	HostifUserDefinedTrapAttr_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_PRIORITY HostifUserDefinedTrapAttr = 2
	HostifUserDefinedTrapAttr_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_GROUP    HostifUserDefinedTrapAttr = 3
)

// Enum value maps for HostifUserDefinedTrapAttr.
var (
	HostifUserDefinedTrapAttr_name = map[int32]string{
		0: "HOSTIF_USER_DEFINED_TRAP_ATTR_UNSPECIFIED",
		1: "HOSTIF_USER_DEFINED_TRAP_ATTR_TYPE",
		2: "HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_PRIORITY",
		3: "HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_GROUP",
	}
	HostifUserDefinedTrapAttr_value = map[string]int32{
		"HOSTIF_USER_DEFINED_TRAP_ATTR_UNSPECIFIED":   0,
		"HOSTIF_USER_DEFINED_TRAP_ATTR_TYPE":          1,
		"HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_PRIORITY": 2,
		"HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_GROUP":    3,
	}
)

func (x HostifUserDefinedTrapAttr) Enum() *HostifUserDefinedTrapAttr {
	p := new(HostifUserDefinedTrapAttr)
	*p = x
	return p
}

func (x HostifUserDefinedTrapAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostifUserDefinedTrapAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_standalone_proto_hostif_proto_enumTypes[4].Descriptor()
}

func (HostifUserDefinedTrapAttr) Type() protoreflect.EnumType {
	return &file_dataplane_standalone_proto_hostif_proto_enumTypes[4]
}

func (x HostifUserDefinedTrapAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostifUserDefinedTrapAttr.Descriptor instead.
func (HostifUserDefinedTrapAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{4}
}

type CreateHostifRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch             uint64         `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type               *HostifType    `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.HostifType,oneof" json:"type,omitempty"`
	ObjId              *uint64        `protobuf:"varint,3,opt,name=obj_id,json=objId,proto3,oneof" json:"obj_id,omitempty"`
	Name               []byte         `protobuf:"bytes,4,opt,name=name,proto3,oneof" json:"name,omitempty"`
	OperStatus         *bool          `protobuf:"varint,5,opt,name=oper_status,json=operStatus,proto3,oneof" json:"oper_status,omitempty"`
	Queue              *uint32        `protobuf:"varint,6,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	VlanTag            *HostifVlanTag `protobuf:"varint,7,opt,name=vlan_tag,json=vlanTag,proto3,enum=lemming.dataplane.sai.HostifVlanTag,oneof" json:"vlan_tag,omitempty"`
	GenetlinkMcgrpName []byte         `protobuf:"bytes,8,opt,name=genetlink_mcgrp_name,json=genetlinkMcgrpName,proto3,oneof" json:"genetlink_mcgrp_name,omitempty"`
}

func (x *CreateHostifRequest) Reset() {
	*x = CreateHostifRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostifRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostifRequest) ProtoMessage() {}

func (x *CreateHostifRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostifRequest.ProtoReflect.Descriptor instead.
func (*CreateHostifRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{0}
}

func (x *CreateHostifRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateHostifRequest) GetType() HostifType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return HostifType_HOSTIF_TYPE_UNSPECIFIED
}

func (x *CreateHostifRequest) GetObjId() uint64 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *CreateHostifRequest) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateHostifRequest) GetOperStatus() bool {
	if x != nil && x.OperStatus != nil {
		return *x.OperStatus
	}
	return false
}

func (x *CreateHostifRequest) GetQueue() uint32 {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return 0
}

func (x *CreateHostifRequest) GetVlanTag() HostifVlanTag {
	if x != nil && x.VlanTag != nil {
		return *x.VlanTag
	}
	return HostifVlanTag_HOSTIF_VLAN_TAG_UNSPECIFIED
}

func (x *CreateHostifRequest) GetGenetlinkMcgrpName() []byte {
	if x != nil {
		return x.GenetlinkMcgrpName
	}
	return nil
}

type CreateHostifResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateHostifResponse) Reset() {
	*x = CreateHostifResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostifResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostifResponse) ProtoMessage() {}

func (x *CreateHostifResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostifResponse.ProtoReflect.Descriptor instead.
func (*CreateHostifResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{1}
}

func (x *CreateHostifResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveHostifRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveHostifRequest) Reset() {
	*x = RemoveHostifRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHostifRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHostifRequest) ProtoMessage() {}

func (x *RemoveHostifRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHostifRequest.ProtoReflect.Descriptor instead.
func (*RemoveHostifRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveHostifRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveHostifResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveHostifResponse) Reset() {
	*x = RemoveHostifResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHostifResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHostifResponse) ProtoMessage() {}

func (x *RemoveHostifResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHostifResponse.ProtoReflect.Descriptor instead.
func (*RemoveHostifResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{3}
}

type SetHostifAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64         `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	OperStatus *bool          `protobuf:"varint,2,opt,name=oper_status,json=operStatus,proto3,oneof" json:"oper_status,omitempty"`
	Queue      *uint32        `protobuf:"varint,3,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	VlanTag    *HostifVlanTag `protobuf:"varint,4,opt,name=vlan_tag,json=vlanTag,proto3,enum=lemming.dataplane.sai.HostifVlanTag,oneof" json:"vlan_tag,omitempty"`
}

func (x *SetHostifAttributeRequest) Reset() {
	*x = SetHostifAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHostifAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHostifAttributeRequest) ProtoMessage() {}

func (x *SetHostifAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHostifAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetHostifAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{4}
}

func (x *SetHostifAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetHostifAttributeRequest) GetOperStatus() bool {
	if x != nil && x.OperStatus != nil {
		return *x.OperStatus
	}
	return false
}

func (x *SetHostifAttributeRequest) GetQueue() uint32 {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return 0
}

func (x *SetHostifAttributeRequest) GetVlanTag() HostifVlanTag {
	if x != nil && x.VlanTag != nil {
		return *x.VlanTag
	}
	return HostifVlanTag_HOSTIF_VLAN_TAG_UNSPECIFIED
}

type SetHostifAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetHostifAttributeResponse) Reset() {
	*x = SetHostifAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHostifAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHostifAttributeResponse) ProtoMessage() {}

func (x *SetHostifAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHostifAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetHostifAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{5}
}

type GetHostifAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []HostifAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.HostifAttr" json:"attr_type,omitempty"`
}

func (x *GetHostifAttributeRequest) Reset() {
	*x = GetHostifAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostifAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostifAttributeRequest) ProtoMessage() {}

func (x *GetHostifAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostifAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetHostifAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{6}
}

func (x *GetHostifAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetHostifAttributeRequest) GetAttrType() []HostifAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetHostifAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *HostifAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetHostifAttributeResponse) Reset() {
	*x = GetHostifAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostifAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostifAttributeResponse) ProtoMessage() {}

func (x *GetHostifAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostifAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetHostifAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{7}
}

func (x *GetHostifAttributeResponse) GetAttr() *HostifAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateHostifTableEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch      uint64                       `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type        *HostifTableEntryType        `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.HostifTableEntryType,oneof" json:"type,omitempty"`
	ObjId       *uint64                      `protobuf:"varint,3,opt,name=obj_id,json=objId,proto3,oneof" json:"obj_id,omitempty"`
	TrapId      *uint64                      `protobuf:"varint,4,opt,name=trap_id,json=trapId,proto3,oneof" json:"trap_id,omitempty"`
	ChannelType *HostifTableEntryChannelType `protobuf:"varint,5,opt,name=channel_type,json=channelType,proto3,enum=lemming.dataplane.sai.HostifTableEntryChannelType,oneof" json:"channel_type,omitempty"`
	HostIf      *uint64                      `protobuf:"varint,6,opt,name=host_if,json=hostIf,proto3,oneof" json:"host_if,omitempty"`
}

func (x *CreateHostifTableEntryRequest) Reset() {
	*x = CreateHostifTableEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostifTableEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostifTableEntryRequest) ProtoMessage() {}

func (x *CreateHostifTableEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostifTableEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateHostifTableEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{8}
}

func (x *CreateHostifTableEntryRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateHostifTableEntryRequest) GetType() HostifTableEntryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return HostifTableEntryType_HOSTIF_TABLE_ENTRY_TYPE_UNSPECIFIED
}

func (x *CreateHostifTableEntryRequest) GetObjId() uint64 {
	if x != nil && x.ObjId != nil {
		return *x.ObjId
	}
	return 0
}

func (x *CreateHostifTableEntryRequest) GetTrapId() uint64 {
	if x != nil && x.TrapId != nil {
		return *x.TrapId
	}
	return 0
}

func (x *CreateHostifTableEntryRequest) GetChannelType() HostifTableEntryChannelType {
	if x != nil && x.ChannelType != nil {
		return *x.ChannelType
	}
	return HostifTableEntryChannelType_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_UNSPECIFIED
}

func (x *CreateHostifTableEntryRequest) GetHostIf() uint64 {
	if x != nil && x.HostIf != nil {
		return *x.HostIf
	}
	return 0
}

type CreateHostifTableEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateHostifTableEntryResponse) Reset() {
	*x = CreateHostifTableEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostifTableEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostifTableEntryResponse) ProtoMessage() {}

func (x *CreateHostifTableEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostifTableEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateHostifTableEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{9}
}

func (x *CreateHostifTableEntryResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveHostifTableEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveHostifTableEntryRequest) Reset() {
	*x = RemoveHostifTableEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHostifTableEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHostifTableEntryRequest) ProtoMessage() {}

func (x *RemoveHostifTableEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHostifTableEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveHostifTableEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveHostifTableEntryRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveHostifTableEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveHostifTableEntryResponse) Reset() {
	*x = RemoveHostifTableEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHostifTableEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHostifTableEntryResponse) ProtoMessage() {}

func (x *RemoveHostifTableEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHostifTableEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveHostifTableEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{11}
}

type GetHostifTableEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []HostifTableEntryAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.HostifTableEntryAttr" json:"attr_type,omitempty"`
}

func (x *GetHostifTableEntryAttributeRequest) Reset() {
	*x = GetHostifTableEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostifTableEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostifTableEntryAttributeRequest) ProtoMessage() {}

func (x *GetHostifTableEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostifTableEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetHostifTableEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{12}
}

func (x *GetHostifTableEntryAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetHostifTableEntryAttributeRequest) GetAttrType() []HostifTableEntryAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetHostifTableEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *HostifTableEntryAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetHostifTableEntryAttributeResponse) Reset() {
	*x = GetHostifTableEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostifTableEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostifTableEntryAttributeResponse) ProtoMessage() {}

func (x *GetHostifTableEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostifTableEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetHostifTableEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{13}
}

func (x *GetHostifTableEntryAttributeResponse) GetAttr() *HostifTableEntryAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateHostifTrapGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch      uint64       `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	AdminState  *bool        `protobuf:"varint,2,opt,name=admin_state,json=adminState,proto3,oneof" json:"admin_state,omitempty"`
	Queue       *uint32      `protobuf:"varint,3,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Policer     *uint64      `protobuf:"varint,4,opt,name=policer,proto3,oneof" json:"policer,omitempty"`
	ObjectStage *ObjectStage `protobuf:"varint,5,opt,name=object_stage,json=objectStage,proto3,enum=lemming.dataplane.sai.ObjectStage,oneof" json:"object_stage,omitempty"`
}

func (x *CreateHostifTrapGroupRequest) Reset() {
	*x = CreateHostifTrapGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostifTrapGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostifTrapGroupRequest) ProtoMessage() {}

func (x *CreateHostifTrapGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostifTrapGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateHostifTrapGroupRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{14}
}

func (x *CreateHostifTrapGroupRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateHostifTrapGroupRequest) GetAdminState() bool {
	if x != nil && x.AdminState != nil {
		return *x.AdminState
	}
	return false
}

func (x *CreateHostifTrapGroupRequest) GetQueue() uint32 {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return 0
}

func (x *CreateHostifTrapGroupRequest) GetPolicer() uint64 {
	if x != nil && x.Policer != nil {
		return *x.Policer
	}
	return 0
}

func (x *CreateHostifTrapGroupRequest) GetObjectStage() ObjectStage {
	if x != nil && x.ObjectStage != nil {
		return *x.ObjectStage
	}
	return ObjectStage_OBJECT_STAGE_UNSPECIFIED
}

type CreateHostifTrapGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateHostifTrapGroupResponse) Reset() {
	*x = CreateHostifTrapGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostifTrapGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostifTrapGroupResponse) ProtoMessage() {}

func (x *CreateHostifTrapGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostifTrapGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateHostifTrapGroupResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{15}
}

func (x *CreateHostifTrapGroupResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveHostifTrapGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveHostifTrapGroupRequest) Reset() {
	*x = RemoveHostifTrapGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHostifTrapGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHostifTrapGroupRequest) ProtoMessage() {}

func (x *RemoveHostifTrapGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHostifTrapGroupRequest.ProtoReflect.Descriptor instead.
func (*RemoveHostifTrapGroupRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveHostifTrapGroupRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveHostifTrapGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveHostifTrapGroupResponse) Reset() {
	*x = RemoveHostifTrapGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHostifTrapGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHostifTrapGroupResponse) ProtoMessage() {}

func (x *RemoveHostifTrapGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHostifTrapGroupResponse.ProtoReflect.Descriptor instead.
func (*RemoveHostifTrapGroupResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{17}
}

type SetHostifTrapGroupAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AdminState *bool   `protobuf:"varint,2,opt,name=admin_state,json=adminState,proto3,oneof" json:"admin_state,omitempty"`
	Queue      *uint32 `protobuf:"varint,3,opt,name=queue,proto3,oneof" json:"queue,omitempty"`
	Policer    *uint64 `protobuf:"varint,4,opt,name=policer,proto3,oneof" json:"policer,omitempty"`
}

func (x *SetHostifTrapGroupAttributeRequest) Reset() {
	*x = SetHostifTrapGroupAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHostifTrapGroupAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHostifTrapGroupAttributeRequest) ProtoMessage() {}

func (x *SetHostifTrapGroupAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHostifTrapGroupAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetHostifTrapGroupAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{18}
}

func (x *SetHostifTrapGroupAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetHostifTrapGroupAttributeRequest) GetAdminState() bool {
	if x != nil && x.AdminState != nil {
		return *x.AdminState
	}
	return false
}

func (x *SetHostifTrapGroupAttributeRequest) GetQueue() uint32 {
	if x != nil && x.Queue != nil {
		return *x.Queue
	}
	return 0
}

func (x *SetHostifTrapGroupAttributeRequest) GetPolicer() uint64 {
	if x != nil && x.Policer != nil {
		return *x.Policer
	}
	return 0
}

type SetHostifTrapGroupAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetHostifTrapGroupAttributeResponse) Reset() {
	*x = SetHostifTrapGroupAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHostifTrapGroupAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHostifTrapGroupAttributeResponse) ProtoMessage() {}

func (x *SetHostifTrapGroupAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHostifTrapGroupAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetHostifTrapGroupAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{19}
}

type GetHostifTrapGroupAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64                `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []HostifTrapGroupAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.HostifTrapGroupAttr" json:"attr_type,omitempty"`
}

func (x *GetHostifTrapGroupAttributeRequest) Reset() {
	*x = GetHostifTrapGroupAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostifTrapGroupAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostifTrapGroupAttributeRequest) ProtoMessage() {}

func (x *GetHostifTrapGroupAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostifTrapGroupAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetHostifTrapGroupAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{20}
}

func (x *GetHostifTrapGroupAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetHostifTrapGroupAttributeRequest) GetAttrType() []HostifTrapGroupAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetHostifTrapGroupAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *HostifTrapGroupAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetHostifTrapGroupAttributeResponse) Reset() {
	*x = GetHostifTrapGroupAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostifTrapGroupAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostifTrapGroupAttributeResponse) ProtoMessage() {}

func (x *GetHostifTrapGroupAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostifTrapGroupAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetHostifTrapGroupAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{21}
}

func (x *GetHostifTrapGroupAttributeResponse) GetAttr() *HostifTrapGroupAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateHostifTrapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch          uint64          `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	TrapType        *HostifTrapType `protobuf:"varint,2,opt,name=trap_type,json=trapType,proto3,enum=lemming.dataplane.sai.HostifTrapType,oneof" json:"trap_type,omitempty"`
	PacketAction    *PacketAction   `protobuf:"varint,3,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"packet_action,omitempty"`
	TrapPriority    *uint32         `protobuf:"varint,4,opt,name=trap_priority,json=trapPriority,proto3,oneof" json:"trap_priority,omitempty"`
	ExcludePortList []uint64        `protobuf:"varint,5,rep,packed,name=exclude_port_list,json=excludePortList,proto3" json:"exclude_port_list,omitempty"`
	TrapGroup       *uint64         `protobuf:"varint,6,opt,name=trap_group,json=trapGroup,proto3,oneof" json:"trap_group,omitempty"`
	MirrorSession   []uint64        `protobuf:"varint,7,rep,packed,name=mirror_session,json=mirrorSession,proto3" json:"mirror_session,omitempty"`
	CounterId       *uint64         `protobuf:"varint,8,opt,name=counter_id,json=counterId,proto3,oneof" json:"counter_id,omitempty"`
}

func (x *CreateHostifTrapRequest) Reset() {
	*x = CreateHostifTrapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostifTrapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostifTrapRequest) ProtoMessage() {}

func (x *CreateHostifTrapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostifTrapRequest.ProtoReflect.Descriptor instead.
func (*CreateHostifTrapRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{22}
}

func (x *CreateHostifTrapRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateHostifTrapRequest) GetTrapType() HostifTrapType {
	if x != nil && x.TrapType != nil {
		return *x.TrapType
	}
	return HostifTrapType_HOSTIF_TRAP_TYPE_UNSPECIFIED
}

func (x *CreateHostifTrapRequest) GetPacketAction() PacketAction {
	if x != nil && x.PacketAction != nil {
		return *x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateHostifTrapRequest) GetTrapPriority() uint32 {
	if x != nil && x.TrapPriority != nil {
		return *x.TrapPriority
	}
	return 0
}

func (x *CreateHostifTrapRequest) GetExcludePortList() []uint64 {
	if x != nil {
		return x.ExcludePortList
	}
	return nil
}

func (x *CreateHostifTrapRequest) GetTrapGroup() uint64 {
	if x != nil && x.TrapGroup != nil {
		return *x.TrapGroup
	}
	return 0
}

func (x *CreateHostifTrapRequest) GetMirrorSession() []uint64 {
	if x != nil {
		return x.MirrorSession
	}
	return nil
}

func (x *CreateHostifTrapRequest) GetCounterId() uint64 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

type CreateHostifTrapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateHostifTrapResponse) Reset() {
	*x = CreateHostifTrapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostifTrapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostifTrapResponse) ProtoMessage() {}

func (x *CreateHostifTrapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostifTrapResponse.ProtoReflect.Descriptor instead.
func (*CreateHostifTrapResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{23}
}

func (x *CreateHostifTrapResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveHostifTrapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveHostifTrapRequest) Reset() {
	*x = RemoveHostifTrapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHostifTrapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHostifTrapRequest) ProtoMessage() {}

func (x *RemoveHostifTrapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHostifTrapRequest.ProtoReflect.Descriptor instead.
func (*RemoveHostifTrapRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{24}
}

func (x *RemoveHostifTrapRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveHostifTrapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveHostifTrapResponse) Reset() {
	*x = RemoveHostifTrapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHostifTrapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHostifTrapResponse) ProtoMessage() {}

func (x *RemoveHostifTrapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHostifTrapResponse.ProtoReflect.Descriptor instead.
func (*RemoveHostifTrapResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{25}
}

type SetHostifTrapAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid             uint64        `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	PacketAction    *PacketAction `protobuf:"varint,2,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"packet_action,omitempty"`
	TrapPriority    *uint32       `protobuf:"varint,3,opt,name=trap_priority,json=trapPriority,proto3,oneof" json:"trap_priority,omitempty"`
	ExcludePortList []uint64      `protobuf:"varint,4,rep,packed,name=exclude_port_list,json=excludePortList,proto3" json:"exclude_port_list,omitempty"`
	TrapGroup       *uint64       `protobuf:"varint,5,opt,name=trap_group,json=trapGroup,proto3,oneof" json:"trap_group,omitempty"`
	MirrorSession   []uint64      `protobuf:"varint,6,rep,packed,name=mirror_session,json=mirrorSession,proto3" json:"mirror_session,omitempty"`
	CounterId       *uint64       `protobuf:"varint,7,opt,name=counter_id,json=counterId,proto3,oneof" json:"counter_id,omitempty"`
}

func (x *SetHostifTrapAttributeRequest) Reset() {
	*x = SetHostifTrapAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHostifTrapAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHostifTrapAttributeRequest) ProtoMessage() {}

func (x *SetHostifTrapAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHostifTrapAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetHostifTrapAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{26}
}

func (x *SetHostifTrapAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetHostifTrapAttributeRequest) GetPacketAction() PacketAction {
	if x != nil && x.PacketAction != nil {
		return *x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetHostifTrapAttributeRequest) GetTrapPriority() uint32 {
	if x != nil && x.TrapPriority != nil {
		return *x.TrapPriority
	}
	return 0
}

func (x *SetHostifTrapAttributeRequest) GetExcludePortList() []uint64 {
	if x != nil {
		return x.ExcludePortList
	}
	return nil
}

func (x *SetHostifTrapAttributeRequest) GetTrapGroup() uint64 {
	if x != nil && x.TrapGroup != nil {
		return *x.TrapGroup
	}
	return 0
}

func (x *SetHostifTrapAttributeRequest) GetMirrorSession() []uint64 {
	if x != nil {
		return x.MirrorSession
	}
	return nil
}

func (x *SetHostifTrapAttributeRequest) GetCounterId() uint64 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

type SetHostifTrapAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetHostifTrapAttributeResponse) Reset() {
	*x = SetHostifTrapAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHostifTrapAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHostifTrapAttributeResponse) ProtoMessage() {}

func (x *SetHostifTrapAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHostifTrapAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetHostifTrapAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{27}
}

type GetHostifTrapAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64           `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []HostifTrapAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.HostifTrapAttr" json:"attr_type,omitempty"`
}

func (x *GetHostifTrapAttributeRequest) Reset() {
	*x = GetHostifTrapAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostifTrapAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostifTrapAttributeRequest) ProtoMessage() {}

func (x *GetHostifTrapAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostifTrapAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetHostifTrapAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{28}
}

func (x *GetHostifTrapAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetHostifTrapAttributeRequest) GetAttrType() []HostifTrapAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetHostifTrapAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *HostifTrapAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetHostifTrapAttributeResponse) Reset() {
	*x = GetHostifTrapAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostifTrapAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostifTrapAttributeResponse) ProtoMessage() {}

func (x *GetHostifTrapAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostifTrapAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetHostifTrapAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{29}
}

func (x *GetHostifTrapAttributeResponse) GetAttr() *HostifTrapAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateHostifUserDefinedTrapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch       uint64                     `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type         *HostifUserDefinedTrapType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.HostifUserDefinedTrapType,oneof" json:"type,omitempty"`
	TrapPriority *uint32                    `protobuf:"varint,3,opt,name=trap_priority,json=trapPriority,proto3,oneof" json:"trap_priority,omitempty"`
	TrapGroup    *uint64                    `protobuf:"varint,4,opt,name=trap_group,json=trapGroup,proto3,oneof" json:"trap_group,omitempty"`
}

func (x *CreateHostifUserDefinedTrapRequest) Reset() {
	*x = CreateHostifUserDefinedTrapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostifUserDefinedTrapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostifUserDefinedTrapRequest) ProtoMessage() {}

func (x *CreateHostifUserDefinedTrapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostifUserDefinedTrapRequest.ProtoReflect.Descriptor instead.
func (*CreateHostifUserDefinedTrapRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{30}
}

func (x *CreateHostifUserDefinedTrapRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateHostifUserDefinedTrapRequest) GetType() HostifUserDefinedTrapType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return HostifUserDefinedTrapType_HOSTIF_USER_DEFINED_TRAP_TYPE_UNSPECIFIED
}

func (x *CreateHostifUserDefinedTrapRequest) GetTrapPriority() uint32 {
	if x != nil && x.TrapPriority != nil {
		return *x.TrapPriority
	}
	return 0
}

func (x *CreateHostifUserDefinedTrapRequest) GetTrapGroup() uint64 {
	if x != nil && x.TrapGroup != nil {
		return *x.TrapGroup
	}
	return 0
}

type CreateHostifUserDefinedTrapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateHostifUserDefinedTrapResponse) Reset() {
	*x = CreateHostifUserDefinedTrapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHostifUserDefinedTrapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHostifUserDefinedTrapResponse) ProtoMessage() {}

func (x *CreateHostifUserDefinedTrapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHostifUserDefinedTrapResponse.ProtoReflect.Descriptor instead.
func (*CreateHostifUserDefinedTrapResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{31}
}

func (x *CreateHostifUserDefinedTrapResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveHostifUserDefinedTrapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveHostifUserDefinedTrapRequest) Reset() {
	*x = RemoveHostifUserDefinedTrapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHostifUserDefinedTrapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHostifUserDefinedTrapRequest) ProtoMessage() {}

func (x *RemoveHostifUserDefinedTrapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHostifUserDefinedTrapRequest.ProtoReflect.Descriptor instead.
func (*RemoveHostifUserDefinedTrapRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{32}
}

func (x *RemoveHostifUserDefinedTrapRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveHostifUserDefinedTrapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveHostifUserDefinedTrapResponse) Reset() {
	*x = RemoveHostifUserDefinedTrapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveHostifUserDefinedTrapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHostifUserDefinedTrapResponse) ProtoMessage() {}

func (x *RemoveHostifUserDefinedTrapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHostifUserDefinedTrapResponse.ProtoReflect.Descriptor instead.
func (*RemoveHostifUserDefinedTrapResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{33}
}

type SetHostifUserDefinedTrapAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid          uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	TrapPriority *uint32 `protobuf:"varint,2,opt,name=trap_priority,json=trapPriority,proto3,oneof" json:"trap_priority,omitempty"`
	TrapGroup    *uint64 `protobuf:"varint,3,opt,name=trap_group,json=trapGroup,proto3,oneof" json:"trap_group,omitempty"`
}

func (x *SetHostifUserDefinedTrapAttributeRequest) Reset() {
	*x = SetHostifUserDefinedTrapAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHostifUserDefinedTrapAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHostifUserDefinedTrapAttributeRequest) ProtoMessage() {}

func (x *SetHostifUserDefinedTrapAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHostifUserDefinedTrapAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetHostifUserDefinedTrapAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{34}
}

func (x *SetHostifUserDefinedTrapAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetHostifUserDefinedTrapAttributeRequest) GetTrapPriority() uint32 {
	if x != nil && x.TrapPriority != nil {
		return *x.TrapPriority
	}
	return 0
}

func (x *SetHostifUserDefinedTrapAttributeRequest) GetTrapGroup() uint64 {
	if x != nil && x.TrapGroup != nil {
		return *x.TrapGroup
	}
	return 0
}

type SetHostifUserDefinedTrapAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetHostifUserDefinedTrapAttributeResponse) Reset() {
	*x = SetHostifUserDefinedTrapAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHostifUserDefinedTrapAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHostifUserDefinedTrapAttributeResponse) ProtoMessage() {}

func (x *SetHostifUserDefinedTrapAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHostifUserDefinedTrapAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetHostifUserDefinedTrapAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{35}
}

type GetHostifUserDefinedTrapAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64                      `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []HostifUserDefinedTrapAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.HostifUserDefinedTrapAttr" json:"attr_type,omitempty"`
}

func (x *GetHostifUserDefinedTrapAttributeRequest) Reset() {
	*x = GetHostifUserDefinedTrapAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostifUserDefinedTrapAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostifUserDefinedTrapAttributeRequest) ProtoMessage() {}

func (x *GetHostifUserDefinedTrapAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostifUserDefinedTrapAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetHostifUserDefinedTrapAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{36}
}

func (x *GetHostifUserDefinedTrapAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetHostifUserDefinedTrapAttributeRequest) GetAttrType() []HostifUserDefinedTrapAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetHostifUserDefinedTrapAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *HostifUserDefinedTrapAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetHostifUserDefinedTrapAttributeResponse) Reset() {
	*x = GetHostifUserDefinedTrapAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHostifUserDefinedTrapAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHostifUserDefinedTrapAttributeResponse) ProtoMessage() {}

func (x *GetHostifUserDefinedTrapAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_standalone_proto_hostif_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHostifUserDefinedTrapAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetHostifUserDefinedTrapAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_standalone_proto_hostif_proto_rawDescGZIP(), []int{37}
}

func (x *GetHostifUserDefinedTrapAttributeResponse) GetAttr() *HostifUserDefinedTrapAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_standalone_proto_hostif_proto protoreflect.FileDescriptor

var file_dataplane_standalone_proto_hostif_proto_rawDesc = []byte{
	0x0a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x68, 0x6f, 0x73,
	0x74, 0x69, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x1a, 0x27, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x03, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x02, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x03, 0x48, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x08, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x56, 0x6c, 0x61, 0x6e, 0x54, 0x61,
	0x67, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x05, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x54,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6d, 0x63, 0x67, 0x72, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x06, 0x52, 0x12, 0x67, 0x65, 0x6e,
	0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x63, 0x67, 0x72, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x0e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x63, 0x67, 0x72, 0x70,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x69, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x27, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xed, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x05, 0x48, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,
	0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x56, 0x6c,
	0x61, 0x6e, 0x54, 0x61, 0x67, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x02, 0x52, 0x07, 0x76,
	0x6c, 0x61, 0x6e, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x67,
	0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3e, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x41,
	0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x92, 0x03, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x4a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x05, 0x6f, 0x62, 0x6a, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x06, 0x74, 0x72, 0x61, 0x70, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x06,
	0x68, 0x6f, 0x73, 0x74, 0x49, 0x66, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x24, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x62, 0x6a,
	0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x66, 0x22, 0x32, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x22, 0x31, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x48, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69,
	0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6c, 0x0a, 0x24, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xb7, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x2a, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x02, 0x48, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x50, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x04, 0x48, 0x03, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x12, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x22, 0x31, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69,
	0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x02, 0x48, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x72, 0x22, 0x25, 0x0a, 0x23, 0x53, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x7f, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x47, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x6a, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x8e, 0x04, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x4d, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x72, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x53, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x02, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x03, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x04, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05,
	0x48, 0x03, 0x52, 0x09, 0x74, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x52, 0x0d,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x23, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x2c, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x17, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x52, 0x0f,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x02, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x52, 0x0d, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07,
	0x48, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54,
	0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69,
	0x66, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x97, 0x02,
	0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x4f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x09, 0x74, 0x72, 0x61, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x39, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x72, 0x61,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x37, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x22, 0x36, 0x0a, 0x22, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb7, 0x01, 0x0a, 0x28, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2e,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x00, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x01, 0x52, 0x09, 0x74, 0x72, 0x61, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x61,
	0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x72, 0x61, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2b, 0x0a, 0x29, 0x53, 0x65, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x76, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69,
	0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0xe1, 0x01, 0x0a,
	0x0a, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x17, 0x48,
	0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x42,
	0x4a, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x05,
	0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x46, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x54, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x4d, 0x43, 0x47, 0x52, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x07,
	0x2a, 0xf9, 0x01, 0x0a, 0x14, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x4f, 0x42, 0x4a, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x28, 0x0a,
	0x24, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x4f, 0x53, 0x54, 0x49,
	0x46, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x49, 0x46, 0x10, 0x05, 0x2a, 0xd4, 0x01, 0x0a,
	0x13, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x26, 0x0a, 0x22, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54,
	0x52, 0x41, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22,
	0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54,
	0x52, 0x41, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46,
	0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x52, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x4f,
	0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x47,
	0x45, 0x10, 0x04, 0x2a, 0xa9, 0x02, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72,
	0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46,
	0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x41,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e,
	0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x03,
	0x12, 0x26, 0x0a, 0x22, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x4f, 0x53, 0x54,
	0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x41,
	0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x4f, 0x53,
	0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x49,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1f,
	0x0a, 0x1b, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x2a,
	0xd1, 0x01, 0x0a, 0x19, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2d, 0x0a,
	0x29, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22,
	0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x01, 0x12, 0x2f, 0x0a, 0x2b, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x50,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x48, 0x4f, 0x53, 0x54, 0x49, 0x46, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41,
	0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x03, 0x32, 0xd2, 0x14, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x12, 0x69,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x12, 0x2a,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0c, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69,
	0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87,
	0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x3a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69,
	0x66, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84,
	0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54,
	0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a,
	0x1b, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72,
	0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74,
	0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72,
	0x61, 0x70, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72,
	0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a,
	0x16, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54,
	0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x96, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69,
	0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70,
	0x12, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x12, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01,
	0x0a, 0x21, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x3f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_standalone_proto_hostif_proto_rawDescOnce sync.Once
	file_dataplane_standalone_proto_hostif_proto_rawDescData = file_dataplane_standalone_proto_hostif_proto_rawDesc
)

func file_dataplane_standalone_proto_hostif_proto_rawDescGZIP() []byte {
	file_dataplane_standalone_proto_hostif_proto_rawDescOnce.Do(func() {
		file_dataplane_standalone_proto_hostif_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_standalone_proto_hostif_proto_rawDescData)
	})
	return file_dataplane_standalone_proto_hostif_proto_rawDescData
}

var file_dataplane_standalone_proto_hostif_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_dataplane_standalone_proto_hostif_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_dataplane_standalone_proto_hostif_proto_goTypes = []interface{}{
	(HostifAttr)(0),                                   // 0: lemming.dataplane.sai.HostifAttr
	(HostifTableEntryAttr)(0),                         // 1: lemming.dataplane.sai.HostifTableEntryAttr
	(HostifTrapGroupAttr)(0),                          // 2: lemming.dataplane.sai.HostifTrapGroupAttr
	(HostifTrapAttr)(0),                               // 3: lemming.dataplane.sai.HostifTrapAttr
	(HostifUserDefinedTrapAttr)(0),                    // 4: lemming.dataplane.sai.HostifUserDefinedTrapAttr
	(*CreateHostifRequest)(nil),                       // 5: lemming.dataplane.sai.CreateHostifRequest
	(*CreateHostifResponse)(nil),                      // 6: lemming.dataplane.sai.CreateHostifResponse
	(*RemoveHostifRequest)(nil),                       // 7: lemming.dataplane.sai.RemoveHostifRequest
	(*RemoveHostifResponse)(nil),                      // 8: lemming.dataplane.sai.RemoveHostifResponse
	(*SetHostifAttributeRequest)(nil),                 // 9: lemming.dataplane.sai.SetHostifAttributeRequest
	(*SetHostifAttributeResponse)(nil),                // 10: lemming.dataplane.sai.SetHostifAttributeResponse
	(*GetHostifAttributeRequest)(nil),                 // 11: lemming.dataplane.sai.GetHostifAttributeRequest
	(*GetHostifAttributeResponse)(nil),                // 12: lemming.dataplane.sai.GetHostifAttributeResponse
	(*CreateHostifTableEntryRequest)(nil),             // 13: lemming.dataplane.sai.CreateHostifTableEntryRequest
	(*CreateHostifTableEntryResponse)(nil),            // 14: lemming.dataplane.sai.CreateHostifTableEntryResponse
	(*RemoveHostifTableEntryRequest)(nil),             // 15: lemming.dataplane.sai.RemoveHostifTableEntryRequest
	(*RemoveHostifTableEntryResponse)(nil),            // 16: lemming.dataplane.sai.RemoveHostifTableEntryResponse
	(*GetHostifTableEntryAttributeRequest)(nil),       // 17: lemming.dataplane.sai.GetHostifTableEntryAttributeRequest
	(*GetHostifTableEntryAttributeResponse)(nil),      // 18: lemming.dataplane.sai.GetHostifTableEntryAttributeResponse
	(*CreateHostifTrapGroupRequest)(nil),              // 19: lemming.dataplane.sai.CreateHostifTrapGroupRequest
	(*CreateHostifTrapGroupResponse)(nil),             // 20: lemming.dataplane.sai.CreateHostifTrapGroupResponse
	(*RemoveHostifTrapGroupRequest)(nil),              // 21: lemming.dataplane.sai.RemoveHostifTrapGroupRequest
	(*RemoveHostifTrapGroupResponse)(nil),             // 22: lemming.dataplane.sai.RemoveHostifTrapGroupResponse
	(*SetHostifTrapGroupAttributeRequest)(nil),        // 23: lemming.dataplane.sai.SetHostifTrapGroupAttributeRequest
	(*SetHostifTrapGroupAttributeResponse)(nil),       // 24: lemming.dataplane.sai.SetHostifTrapGroupAttributeResponse
	(*GetHostifTrapGroupAttributeRequest)(nil),        // 25: lemming.dataplane.sai.GetHostifTrapGroupAttributeRequest
	(*GetHostifTrapGroupAttributeResponse)(nil),       // 26: lemming.dataplane.sai.GetHostifTrapGroupAttributeResponse
	(*CreateHostifTrapRequest)(nil),                   // 27: lemming.dataplane.sai.CreateHostifTrapRequest
	(*CreateHostifTrapResponse)(nil),                  // 28: lemming.dataplane.sai.CreateHostifTrapResponse
	(*RemoveHostifTrapRequest)(nil),                   // 29: lemming.dataplane.sai.RemoveHostifTrapRequest
	(*RemoveHostifTrapResponse)(nil),                  // 30: lemming.dataplane.sai.RemoveHostifTrapResponse
	(*SetHostifTrapAttributeRequest)(nil),             // 31: lemming.dataplane.sai.SetHostifTrapAttributeRequest
	(*SetHostifTrapAttributeResponse)(nil),            // 32: lemming.dataplane.sai.SetHostifTrapAttributeResponse
	(*GetHostifTrapAttributeRequest)(nil),             // 33: lemming.dataplane.sai.GetHostifTrapAttributeRequest
	(*GetHostifTrapAttributeResponse)(nil),            // 34: lemming.dataplane.sai.GetHostifTrapAttributeResponse
	(*CreateHostifUserDefinedTrapRequest)(nil),        // 35: lemming.dataplane.sai.CreateHostifUserDefinedTrapRequest
	(*CreateHostifUserDefinedTrapResponse)(nil),       // 36: lemming.dataplane.sai.CreateHostifUserDefinedTrapResponse
	(*RemoveHostifUserDefinedTrapRequest)(nil),        // 37: lemming.dataplane.sai.RemoveHostifUserDefinedTrapRequest
	(*RemoveHostifUserDefinedTrapResponse)(nil),       // 38: lemming.dataplane.sai.RemoveHostifUserDefinedTrapResponse
	(*SetHostifUserDefinedTrapAttributeRequest)(nil),  // 39: lemming.dataplane.sai.SetHostifUserDefinedTrapAttributeRequest
	(*SetHostifUserDefinedTrapAttributeResponse)(nil), // 40: lemming.dataplane.sai.SetHostifUserDefinedTrapAttributeResponse
	(*GetHostifUserDefinedTrapAttributeRequest)(nil),  // 41: lemming.dataplane.sai.GetHostifUserDefinedTrapAttributeRequest
	(*GetHostifUserDefinedTrapAttributeResponse)(nil), // 42: lemming.dataplane.sai.GetHostifUserDefinedTrapAttributeResponse
	(HostifType)(0),                                   // 43: lemming.dataplane.sai.HostifType
	(HostifVlanTag)(0),                                // 44: lemming.dataplane.sai.HostifVlanTag
	(*HostifAttribute)(nil),                           // 45: lemming.dataplane.sai.HostifAttribute
	(HostifTableEntryType)(0),                         // 46: lemming.dataplane.sai.HostifTableEntryType
	(HostifTableEntryChannelType)(0),                  // 47: lemming.dataplane.sai.HostifTableEntryChannelType
	(*HostifTableEntryAttribute)(nil),                 // 48: lemming.dataplane.sai.HostifTableEntryAttribute
	(ObjectStage)(0),                                  // 49: lemming.dataplane.sai.ObjectStage
	(*HostifTrapGroupAttribute)(nil),                  // 50: lemming.dataplane.sai.HostifTrapGroupAttribute
	(HostifTrapType)(0),                               // 51: lemming.dataplane.sai.HostifTrapType
	(PacketAction)(0),                                 // 52: lemming.dataplane.sai.PacketAction
	(*HostifTrapAttribute)(nil),                       // 53: lemming.dataplane.sai.HostifTrapAttribute
	(HostifUserDefinedTrapType)(0),                    // 54: lemming.dataplane.sai.HostifUserDefinedTrapType
	(*HostifUserDefinedTrapAttribute)(nil),            // 55: lemming.dataplane.sai.HostifUserDefinedTrapAttribute
}
var file_dataplane_standalone_proto_hostif_proto_depIdxs = []int32{
	43, // 0: lemming.dataplane.sai.CreateHostifRequest.type:type_name -> lemming.dataplane.sai.HostifType
	44, // 1: lemming.dataplane.sai.CreateHostifRequest.vlan_tag:type_name -> lemming.dataplane.sai.HostifVlanTag
	44, // 2: lemming.dataplane.sai.SetHostifAttributeRequest.vlan_tag:type_name -> lemming.dataplane.sai.HostifVlanTag
	0,  // 3: lemming.dataplane.sai.GetHostifAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.HostifAttr
	45, // 4: lemming.dataplane.sai.GetHostifAttributeResponse.attr:type_name -> lemming.dataplane.sai.HostifAttribute
	46, // 5: lemming.dataplane.sai.CreateHostifTableEntryRequest.type:type_name -> lemming.dataplane.sai.HostifTableEntryType
	47, // 6: lemming.dataplane.sai.CreateHostifTableEntryRequest.channel_type:type_name -> lemming.dataplane.sai.HostifTableEntryChannelType
	1,  // 7: lemming.dataplane.sai.GetHostifTableEntryAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.HostifTableEntryAttr
	48, // 8: lemming.dataplane.sai.GetHostifTableEntryAttributeResponse.attr:type_name -> lemming.dataplane.sai.HostifTableEntryAttribute
	49, // 9: lemming.dataplane.sai.CreateHostifTrapGroupRequest.object_stage:type_name -> lemming.dataplane.sai.ObjectStage
	2,  // 10: lemming.dataplane.sai.GetHostifTrapGroupAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.HostifTrapGroupAttr
	50, // 11: lemming.dataplane.sai.GetHostifTrapGroupAttributeResponse.attr:type_name -> lemming.dataplane.sai.HostifTrapGroupAttribute
	51, // 12: lemming.dataplane.sai.CreateHostifTrapRequest.trap_type:type_name -> lemming.dataplane.sai.HostifTrapType
	52, // 13: lemming.dataplane.sai.CreateHostifTrapRequest.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	52, // 14: lemming.dataplane.sai.SetHostifTrapAttributeRequest.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	3,  // 15: lemming.dataplane.sai.GetHostifTrapAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.HostifTrapAttr
	53, // 16: lemming.dataplane.sai.GetHostifTrapAttributeResponse.attr:type_name -> lemming.dataplane.sai.HostifTrapAttribute
	54, // 17: lemming.dataplane.sai.CreateHostifUserDefinedTrapRequest.type:type_name -> lemming.dataplane.sai.HostifUserDefinedTrapType
	4,  // 18: lemming.dataplane.sai.GetHostifUserDefinedTrapAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.HostifUserDefinedTrapAttr
	55, // 19: lemming.dataplane.sai.GetHostifUserDefinedTrapAttributeResponse.attr:type_name -> lemming.dataplane.sai.HostifUserDefinedTrapAttribute
	5,  // 20: lemming.dataplane.sai.Hostif.CreateHostif:input_type -> lemming.dataplane.sai.CreateHostifRequest
	7,  // 21: lemming.dataplane.sai.Hostif.RemoveHostif:input_type -> lemming.dataplane.sai.RemoveHostifRequest
	9,  // 22: lemming.dataplane.sai.Hostif.SetHostifAttribute:input_type -> lemming.dataplane.sai.SetHostifAttributeRequest
	11, // 23: lemming.dataplane.sai.Hostif.GetHostifAttribute:input_type -> lemming.dataplane.sai.GetHostifAttributeRequest
	13, // 24: lemming.dataplane.sai.Hostif.CreateHostifTableEntry:input_type -> lemming.dataplane.sai.CreateHostifTableEntryRequest
	15, // 25: lemming.dataplane.sai.Hostif.RemoveHostifTableEntry:input_type -> lemming.dataplane.sai.RemoveHostifTableEntryRequest
	17, // 26: lemming.dataplane.sai.Hostif.GetHostifTableEntryAttribute:input_type -> lemming.dataplane.sai.GetHostifTableEntryAttributeRequest
	19, // 27: lemming.dataplane.sai.Hostif.CreateHostifTrapGroup:input_type -> lemming.dataplane.sai.CreateHostifTrapGroupRequest
	21, // 28: lemming.dataplane.sai.Hostif.RemoveHostifTrapGroup:input_type -> lemming.dataplane.sai.RemoveHostifTrapGroupRequest
	23, // 29: lemming.dataplane.sai.Hostif.SetHostifTrapGroupAttribute:input_type -> lemming.dataplane.sai.SetHostifTrapGroupAttributeRequest
	25, // 30: lemming.dataplane.sai.Hostif.GetHostifTrapGroupAttribute:input_type -> lemming.dataplane.sai.GetHostifTrapGroupAttributeRequest
	27, // 31: lemming.dataplane.sai.Hostif.CreateHostifTrap:input_type -> lemming.dataplane.sai.CreateHostifTrapRequest
	29, // 32: lemming.dataplane.sai.Hostif.RemoveHostifTrap:input_type -> lemming.dataplane.sai.RemoveHostifTrapRequest
	31, // 33: lemming.dataplane.sai.Hostif.SetHostifTrapAttribute:input_type -> lemming.dataplane.sai.SetHostifTrapAttributeRequest
	33, // 34: lemming.dataplane.sai.Hostif.GetHostifTrapAttribute:input_type -> lemming.dataplane.sai.GetHostifTrapAttributeRequest
	35, // 35: lemming.dataplane.sai.Hostif.CreateHostifUserDefinedTrap:input_type -> lemming.dataplane.sai.CreateHostifUserDefinedTrapRequest
	37, // 36: lemming.dataplane.sai.Hostif.RemoveHostifUserDefinedTrap:input_type -> lemming.dataplane.sai.RemoveHostifUserDefinedTrapRequest
	39, // 37: lemming.dataplane.sai.Hostif.SetHostifUserDefinedTrapAttribute:input_type -> lemming.dataplane.sai.SetHostifUserDefinedTrapAttributeRequest
	41, // 38: lemming.dataplane.sai.Hostif.GetHostifUserDefinedTrapAttribute:input_type -> lemming.dataplane.sai.GetHostifUserDefinedTrapAttributeRequest
	6,  // 39: lemming.dataplane.sai.Hostif.CreateHostif:output_type -> lemming.dataplane.sai.CreateHostifResponse
	8,  // 40: lemming.dataplane.sai.Hostif.RemoveHostif:output_type -> lemming.dataplane.sai.RemoveHostifResponse
	10, // 41: lemming.dataplane.sai.Hostif.SetHostifAttribute:output_type -> lemming.dataplane.sai.SetHostifAttributeResponse
	12, // 42: lemming.dataplane.sai.Hostif.GetHostifAttribute:output_type -> lemming.dataplane.sai.GetHostifAttributeResponse
	14, // 43: lemming.dataplane.sai.Hostif.CreateHostifTableEntry:output_type -> lemming.dataplane.sai.CreateHostifTableEntryResponse
	16, // 44: lemming.dataplane.sai.Hostif.RemoveHostifTableEntry:output_type -> lemming.dataplane.sai.RemoveHostifTableEntryResponse
	18, // 45: lemming.dataplane.sai.Hostif.GetHostifTableEntryAttribute:output_type -> lemming.dataplane.sai.GetHostifTableEntryAttributeResponse
	20, // 46: lemming.dataplane.sai.Hostif.CreateHostifTrapGroup:output_type -> lemming.dataplane.sai.CreateHostifTrapGroupResponse
	22, // 47: lemming.dataplane.sai.Hostif.RemoveHostifTrapGroup:output_type -> lemming.dataplane.sai.RemoveHostifTrapGroupResponse
	24, // 48: lemming.dataplane.sai.Hostif.SetHostifTrapGroupAttribute:output_type -> lemming.dataplane.sai.SetHostifTrapGroupAttributeResponse
	26, // 49: lemming.dataplane.sai.Hostif.GetHostifTrapGroupAttribute:output_type -> lemming.dataplane.sai.GetHostifTrapGroupAttributeResponse
	28, // 50: lemming.dataplane.sai.Hostif.CreateHostifTrap:output_type -> lemming.dataplane.sai.CreateHostifTrapResponse
	30, // 51: lemming.dataplane.sai.Hostif.RemoveHostifTrap:output_type -> lemming.dataplane.sai.RemoveHostifTrapResponse
	32, // 52: lemming.dataplane.sai.Hostif.SetHostifTrapAttribute:output_type -> lemming.dataplane.sai.SetHostifTrapAttributeResponse
	34, // 53: lemming.dataplane.sai.Hostif.GetHostifTrapAttribute:output_type -> lemming.dataplane.sai.GetHostifTrapAttributeResponse
	36, // 54: lemming.dataplane.sai.Hostif.CreateHostifUserDefinedTrap:output_type -> lemming.dataplane.sai.CreateHostifUserDefinedTrapResponse
	38, // 55: lemming.dataplane.sai.Hostif.RemoveHostifUserDefinedTrap:output_type -> lemming.dataplane.sai.RemoveHostifUserDefinedTrapResponse
	40, // 56: lemming.dataplane.sai.Hostif.SetHostifUserDefinedTrapAttribute:output_type -> lemming.dataplane.sai.SetHostifUserDefinedTrapAttributeResponse
	42, // 57: lemming.dataplane.sai.Hostif.GetHostifUserDefinedTrapAttribute:output_type -> lemming.dataplane.sai.GetHostifUserDefinedTrapAttributeResponse
	39, // [39:58] is the sub-list for method output_type
	20, // [20:39] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_dataplane_standalone_proto_hostif_proto_init() }
func file_dataplane_standalone_proto_hostif_proto_init() {
	if File_dataplane_standalone_proto_hostif_proto != nil {
		return
	}
	file_dataplane_standalone_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_standalone_proto_hostif_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostifRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostifResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHostifRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHostifResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHostifAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHostifAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostifAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostifAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostifTableEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostifTableEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHostifTableEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHostifTableEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostifTableEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostifTableEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostifTrapGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostifTrapGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHostifTrapGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHostifTrapGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHostifTrapGroupAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHostifTrapGroupAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostifTrapGroupAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostifTrapGroupAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostifTrapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostifTrapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHostifTrapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHostifTrapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHostifTrapAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHostifTrapAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostifTrapAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostifTrapAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostifUserDefinedTrapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHostifUserDefinedTrapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHostifUserDefinedTrapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveHostifUserDefinedTrapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHostifUserDefinedTrapAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHostifUserDefinedTrapAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostifUserDefinedTrapAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_standalone_proto_hostif_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHostifUserDefinedTrapAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_standalone_proto_hostif_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_hostif_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_hostif_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_hostif_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_hostif_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_hostif_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_hostif_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_hostif_proto_msgTypes[30].OneofWrappers = []interface{}{}
	file_dataplane_standalone_proto_hostif_proto_msgTypes[34].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_standalone_proto_hostif_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_standalone_proto_hostif_proto_goTypes,
		DependencyIndexes: file_dataplane_standalone_proto_hostif_proto_depIdxs,
		EnumInfos:         file_dataplane_standalone_proto_hostif_proto_enumTypes,
		MessageInfos:      file_dataplane_standalone_proto_hostif_proto_msgTypes,
	}.Build()
	File_dataplane_standalone_proto_hostif_proto = out.File
	file_dataplane_standalone_proto_hostif_proto_rawDesc = nil
	file_dataplane_standalone_proto_hostif_proto_goTypes = nil
	file_dataplane_standalone_proto_hostif_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HostifClient is the client API for Hostif service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostifClient interface {
	CreateHostif(ctx context.Context, in *CreateHostifRequest, opts ...grpc.CallOption) (*CreateHostifResponse, error)
	RemoveHostif(ctx context.Context, in *RemoveHostifRequest, opts ...grpc.CallOption) (*RemoveHostifResponse, error)
	SetHostifAttribute(ctx context.Context, in *SetHostifAttributeRequest, opts ...grpc.CallOption) (*SetHostifAttributeResponse, error)
	GetHostifAttribute(ctx context.Context, in *GetHostifAttributeRequest, opts ...grpc.CallOption) (*GetHostifAttributeResponse, error)
	CreateHostifTableEntry(ctx context.Context, in *CreateHostifTableEntryRequest, opts ...grpc.CallOption) (*CreateHostifTableEntryResponse, error)
	RemoveHostifTableEntry(ctx context.Context, in *RemoveHostifTableEntryRequest, opts ...grpc.CallOption) (*RemoveHostifTableEntryResponse, error)
	GetHostifTableEntryAttribute(ctx context.Context, in *GetHostifTableEntryAttributeRequest, opts ...grpc.CallOption) (*GetHostifTableEntryAttributeResponse, error)
	CreateHostifTrapGroup(ctx context.Context, in *CreateHostifTrapGroupRequest, opts ...grpc.CallOption) (*CreateHostifTrapGroupResponse, error)
	RemoveHostifTrapGroup(ctx context.Context, in *RemoveHostifTrapGroupRequest, opts ...grpc.CallOption) (*RemoveHostifTrapGroupResponse, error)
	SetHostifTrapGroupAttribute(ctx context.Context, in *SetHostifTrapGroupAttributeRequest, opts ...grpc.CallOption) (*SetHostifTrapGroupAttributeResponse, error)
	GetHostifTrapGroupAttribute(ctx context.Context, in *GetHostifTrapGroupAttributeRequest, opts ...grpc.CallOption) (*GetHostifTrapGroupAttributeResponse, error)
	CreateHostifTrap(ctx context.Context, in *CreateHostifTrapRequest, opts ...grpc.CallOption) (*CreateHostifTrapResponse, error)
	RemoveHostifTrap(ctx context.Context, in *RemoveHostifTrapRequest, opts ...grpc.CallOption) (*RemoveHostifTrapResponse, error)
	SetHostifTrapAttribute(ctx context.Context, in *SetHostifTrapAttributeRequest, opts ...grpc.CallOption) (*SetHostifTrapAttributeResponse, error)
	GetHostifTrapAttribute(ctx context.Context, in *GetHostifTrapAttributeRequest, opts ...grpc.CallOption) (*GetHostifTrapAttributeResponse, error)
	CreateHostifUserDefinedTrap(ctx context.Context, in *CreateHostifUserDefinedTrapRequest, opts ...grpc.CallOption) (*CreateHostifUserDefinedTrapResponse, error)
	RemoveHostifUserDefinedTrap(ctx context.Context, in *RemoveHostifUserDefinedTrapRequest, opts ...grpc.CallOption) (*RemoveHostifUserDefinedTrapResponse, error)
	SetHostifUserDefinedTrapAttribute(ctx context.Context, in *SetHostifUserDefinedTrapAttributeRequest, opts ...grpc.CallOption) (*SetHostifUserDefinedTrapAttributeResponse, error)
	GetHostifUserDefinedTrapAttribute(ctx context.Context, in *GetHostifUserDefinedTrapAttributeRequest, opts ...grpc.CallOption) (*GetHostifUserDefinedTrapAttributeResponse, error)
}

type hostifClient struct {
	cc grpc.ClientConnInterface
}

func NewHostifClient(cc grpc.ClientConnInterface) HostifClient {
	return &hostifClient{cc}
}

func (c *hostifClient) CreateHostif(ctx context.Context, in *CreateHostifRequest, opts ...grpc.CallOption) (*CreateHostifResponse, error) {
	out := new(CreateHostifResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/CreateHostif", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) RemoveHostif(ctx context.Context, in *RemoveHostifRequest, opts ...grpc.CallOption) (*RemoveHostifResponse, error) {
	out := new(RemoveHostifResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/RemoveHostif", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) SetHostifAttribute(ctx context.Context, in *SetHostifAttributeRequest, opts ...grpc.CallOption) (*SetHostifAttributeResponse, error) {
	out := new(SetHostifAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/SetHostifAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) GetHostifAttribute(ctx context.Context, in *GetHostifAttributeRequest, opts ...grpc.CallOption) (*GetHostifAttributeResponse, error) {
	out := new(GetHostifAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/GetHostifAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) CreateHostifTableEntry(ctx context.Context, in *CreateHostifTableEntryRequest, opts ...grpc.CallOption) (*CreateHostifTableEntryResponse, error) {
	out := new(CreateHostifTableEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/CreateHostifTableEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) RemoveHostifTableEntry(ctx context.Context, in *RemoveHostifTableEntryRequest, opts ...grpc.CallOption) (*RemoveHostifTableEntryResponse, error) {
	out := new(RemoveHostifTableEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/RemoveHostifTableEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) GetHostifTableEntryAttribute(ctx context.Context, in *GetHostifTableEntryAttributeRequest, opts ...grpc.CallOption) (*GetHostifTableEntryAttributeResponse, error) {
	out := new(GetHostifTableEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/GetHostifTableEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) CreateHostifTrapGroup(ctx context.Context, in *CreateHostifTrapGroupRequest, opts ...grpc.CallOption) (*CreateHostifTrapGroupResponse, error) {
	out := new(CreateHostifTrapGroupResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/CreateHostifTrapGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) RemoveHostifTrapGroup(ctx context.Context, in *RemoveHostifTrapGroupRequest, opts ...grpc.CallOption) (*RemoveHostifTrapGroupResponse, error) {
	out := new(RemoveHostifTrapGroupResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/RemoveHostifTrapGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) SetHostifTrapGroupAttribute(ctx context.Context, in *SetHostifTrapGroupAttributeRequest, opts ...grpc.CallOption) (*SetHostifTrapGroupAttributeResponse, error) {
	out := new(SetHostifTrapGroupAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/SetHostifTrapGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) GetHostifTrapGroupAttribute(ctx context.Context, in *GetHostifTrapGroupAttributeRequest, opts ...grpc.CallOption) (*GetHostifTrapGroupAttributeResponse, error) {
	out := new(GetHostifTrapGroupAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/GetHostifTrapGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) CreateHostifTrap(ctx context.Context, in *CreateHostifTrapRequest, opts ...grpc.CallOption) (*CreateHostifTrapResponse, error) {
	out := new(CreateHostifTrapResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/CreateHostifTrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) RemoveHostifTrap(ctx context.Context, in *RemoveHostifTrapRequest, opts ...grpc.CallOption) (*RemoveHostifTrapResponse, error) {
	out := new(RemoveHostifTrapResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/RemoveHostifTrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) SetHostifTrapAttribute(ctx context.Context, in *SetHostifTrapAttributeRequest, opts ...grpc.CallOption) (*SetHostifTrapAttributeResponse, error) {
	out := new(SetHostifTrapAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/SetHostifTrapAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) GetHostifTrapAttribute(ctx context.Context, in *GetHostifTrapAttributeRequest, opts ...grpc.CallOption) (*GetHostifTrapAttributeResponse, error) {
	out := new(GetHostifTrapAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/GetHostifTrapAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) CreateHostifUserDefinedTrap(ctx context.Context, in *CreateHostifUserDefinedTrapRequest, opts ...grpc.CallOption) (*CreateHostifUserDefinedTrapResponse, error) {
	out := new(CreateHostifUserDefinedTrapResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/CreateHostifUserDefinedTrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) RemoveHostifUserDefinedTrap(ctx context.Context, in *RemoveHostifUserDefinedTrapRequest, opts ...grpc.CallOption) (*RemoveHostifUserDefinedTrapResponse, error) {
	out := new(RemoveHostifUserDefinedTrapResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/RemoveHostifUserDefinedTrap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) SetHostifUserDefinedTrapAttribute(ctx context.Context, in *SetHostifUserDefinedTrapAttributeRequest, opts ...grpc.CallOption) (*SetHostifUserDefinedTrapAttributeResponse, error) {
	out := new(SetHostifUserDefinedTrapAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/SetHostifUserDefinedTrapAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) GetHostifUserDefinedTrapAttribute(ctx context.Context, in *GetHostifUserDefinedTrapAttributeRequest, opts ...grpc.CallOption) (*GetHostifUserDefinedTrapAttributeResponse, error) {
	out := new(GetHostifUserDefinedTrapAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Hostif/GetHostifUserDefinedTrapAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostifServer is the server API for Hostif service.
type HostifServer interface {
	CreateHostif(context.Context, *CreateHostifRequest) (*CreateHostifResponse, error)
	RemoveHostif(context.Context, *RemoveHostifRequest) (*RemoveHostifResponse, error)
	SetHostifAttribute(context.Context, *SetHostifAttributeRequest) (*SetHostifAttributeResponse, error)
	GetHostifAttribute(context.Context, *GetHostifAttributeRequest) (*GetHostifAttributeResponse, error)
	CreateHostifTableEntry(context.Context, *CreateHostifTableEntryRequest) (*CreateHostifTableEntryResponse, error)
	RemoveHostifTableEntry(context.Context, *RemoveHostifTableEntryRequest) (*RemoveHostifTableEntryResponse, error)
	GetHostifTableEntryAttribute(context.Context, *GetHostifTableEntryAttributeRequest) (*GetHostifTableEntryAttributeResponse, error)
	CreateHostifTrapGroup(context.Context, *CreateHostifTrapGroupRequest) (*CreateHostifTrapGroupResponse, error)
	RemoveHostifTrapGroup(context.Context, *RemoveHostifTrapGroupRequest) (*RemoveHostifTrapGroupResponse, error)
	SetHostifTrapGroupAttribute(context.Context, *SetHostifTrapGroupAttributeRequest) (*SetHostifTrapGroupAttributeResponse, error)
	GetHostifTrapGroupAttribute(context.Context, *GetHostifTrapGroupAttributeRequest) (*GetHostifTrapGroupAttributeResponse, error)
	CreateHostifTrap(context.Context, *CreateHostifTrapRequest) (*CreateHostifTrapResponse, error)
	RemoveHostifTrap(context.Context, *RemoveHostifTrapRequest) (*RemoveHostifTrapResponse, error)
	SetHostifTrapAttribute(context.Context, *SetHostifTrapAttributeRequest) (*SetHostifTrapAttributeResponse, error)
	GetHostifTrapAttribute(context.Context, *GetHostifTrapAttributeRequest) (*GetHostifTrapAttributeResponse, error)
	CreateHostifUserDefinedTrap(context.Context, *CreateHostifUserDefinedTrapRequest) (*CreateHostifUserDefinedTrapResponse, error)
	RemoveHostifUserDefinedTrap(context.Context, *RemoveHostifUserDefinedTrapRequest) (*RemoveHostifUserDefinedTrapResponse, error)
	SetHostifUserDefinedTrapAttribute(context.Context, *SetHostifUserDefinedTrapAttributeRequest) (*SetHostifUserDefinedTrapAttributeResponse, error)
	GetHostifUserDefinedTrapAttribute(context.Context, *GetHostifUserDefinedTrapAttributeRequest) (*GetHostifUserDefinedTrapAttributeResponse, error)
}

// UnimplementedHostifServer can be embedded to have forward compatible implementations.
type UnimplementedHostifServer struct {
}

func (*UnimplementedHostifServer) CreateHostif(context.Context, *CreateHostifRequest) (*CreateHostifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostif not implemented")
}
func (*UnimplementedHostifServer) RemoveHostif(context.Context, *RemoveHostifRequest) (*RemoveHostifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHostif not implemented")
}
func (*UnimplementedHostifServer) SetHostifAttribute(context.Context, *SetHostifAttributeRequest) (*SetHostifAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostifAttribute not implemented")
}
func (*UnimplementedHostifServer) GetHostifAttribute(context.Context, *GetHostifAttributeRequest) (*GetHostifAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostifAttribute not implemented")
}
func (*UnimplementedHostifServer) CreateHostifTableEntry(context.Context, *CreateHostifTableEntryRequest) (*CreateHostifTableEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostifTableEntry not implemented")
}
func (*UnimplementedHostifServer) RemoveHostifTableEntry(context.Context, *RemoveHostifTableEntryRequest) (*RemoveHostifTableEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHostifTableEntry not implemented")
}
func (*UnimplementedHostifServer) GetHostifTableEntryAttribute(context.Context, *GetHostifTableEntryAttributeRequest) (*GetHostifTableEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostifTableEntryAttribute not implemented")
}
func (*UnimplementedHostifServer) CreateHostifTrapGroup(context.Context, *CreateHostifTrapGroupRequest) (*CreateHostifTrapGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostifTrapGroup not implemented")
}
func (*UnimplementedHostifServer) RemoveHostifTrapGroup(context.Context, *RemoveHostifTrapGroupRequest) (*RemoveHostifTrapGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHostifTrapGroup not implemented")
}
func (*UnimplementedHostifServer) SetHostifTrapGroupAttribute(context.Context, *SetHostifTrapGroupAttributeRequest) (*SetHostifTrapGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostifTrapGroupAttribute not implemented")
}
func (*UnimplementedHostifServer) GetHostifTrapGroupAttribute(context.Context, *GetHostifTrapGroupAttributeRequest) (*GetHostifTrapGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostifTrapGroupAttribute not implemented")
}
func (*UnimplementedHostifServer) CreateHostifTrap(context.Context, *CreateHostifTrapRequest) (*CreateHostifTrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostifTrap not implemented")
}
func (*UnimplementedHostifServer) RemoveHostifTrap(context.Context, *RemoveHostifTrapRequest) (*RemoveHostifTrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHostifTrap not implemented")
}
func (*UnimplementedHostifServer) SetHostifTrapAttribute(context.Context, *SetHostifTrapAttributeRequest) (*SetHostifTrapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostifTrapAttribute not implemented")
}
func (*UnimplementedHostifServer) GetHostifTrapAttribute(context.Context, *GetHostifTrapAttributeRequest) (*GetHostifTrapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostifTrapAttribute not implemented")
}
func (*UnimplementedHostifServer) CreateHostifUserDefinedTrap(context.Context, *CreateHostifUserDefinedTrapRequest) (*CreateHostifUserDefinedTrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostifUserDefinedTrap not implemented")
}
func (*UnimplementedHostifServer) RemoveHostifUserDefinedTrap(context.Context, *RemoveHostifUserDefinedTrapRequest) (*RemoveHostifUserDefinedTrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHostifUserDefinedTrap not implemented")
}
func (*UnimplementedHostifServer) SetHostifUserDefinedTrapAttribute(context.Context, *SetHostifUserDefinedTrapAttributeRequest) (*SetHostifUserDefinedTrapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostifUserDefinedTrapAttribute not implemented")
}
func (*UnimplementedHostifServer) GetHostifUserDefinedTrapAttribute(context.Context, *GetHostifUserDefinedTrapAttributeRequest) (*GetHostifUserDefinedTrapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostifUserDefinedTrapAttribute not implemented")
}

func RegisterHostifServer(s *grpc.Server, srv HostifServer) {
	s.RegisterService(&_Hostif_serviceDesc, srv)
}

func _Hostif_CreateHostif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).CreateHostif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/CreateHostif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).CreateHostif(ctx, req.(*CreateHostifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_RemoveHostif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHostifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).RemoveHostif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/RemoveHostif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).RemoveHostif(ctx, req.(*RemoveHostifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_SetHostifAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHostifAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).SetHostifAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/SetHostifAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).SetHostifAttribute(ctx, req.(*SetHostifAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_GetHostifAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostifAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).GetHostifAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/GetHostifAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).GetHostifAttribute(ctx, req.(*GetHostifAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_CreateHostifTableEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostifTableEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).CreateHostifTableEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/CreateHostifTableEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).CreateHostifTableEntry(ctx, req.(*CreateHostifTableEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_RemoveHostifTableEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHostifTableEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).RemoveHostifTableEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/RemoveHostifTableEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).RemoveHostifTableEntry(ctx, req.(*RemoveHostifTableEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_GetHostifTableEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostifTableEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).GetHostifTableEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/GetHostifTableEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).GetHostifTableEntryAttribute(ctx, req.(*GetHostifTableEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_CreateHostifTrapGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostifTrapGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).CreateHostifTrapGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/CreateHostifTrapGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).CreateHostifTrapGroup(ctx, req.(*CreateHostifTrapGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_RemoveHostifTrapGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHostifTrapGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).RemoveHostifTrapGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/RemoveHostifTrapGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).RemoveHostifTrapGroup(ctx, req.(*RemoveHostifTrapGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_SetHostifTrapGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHostifTrapGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).SetHostifTrapGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/SetHostifTrapGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).SetHostifTrapGroupAttribute(ctx, req.(*SetHostifTrapGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_GetHostifTrapGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostifTrapGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).GetHostifTrapGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/GetHostifTrapGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).GetHostifTrapGroupAttribute(ctx, req.(*GetHostifTrapGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_CreateHostifTrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostifTrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).CreateHostifTrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/CreateHostifTrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).CreateHostifTrap(ctx, req.(*CreateHostifTrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_RemoveHostifTrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHostifTrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).RemoveHostifTrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/RemoveHostifTrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).RemoveHostifTrap(ctx, req.(*RemoveHostifTrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_SetHostifTrapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHostifTrapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).SetHostifTrapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/SetHostifTrapAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).SetHostifTrapAttribute(ctx, req.(*SetHostifTrapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_GetHostifTrapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostifTrapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).GetHostifTrapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/GetHostifTrapAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).GetHostifTrapAttribute(ctx, req.(*GetHostifTrapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_CreateHostifUserDefinedTrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostifUserDefinedTrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).CreateHostifUserDefinedTrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/CreateHostifUserDefinedTrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).CreateHostifUserDefinedTrap(ctx, req.(*CreateHostifUserDefinedTrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_RemoveHostifUserDefinedTrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHostifUserDefinedTrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).RemoveHostifUserDefinedTrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/RemoveHostifUserDefinedTrap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).RemoveHostifUserDefinedTrap(ctx, req.(*RemoveHostifUserDefinedTrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_SetHostifUserDefinedTrapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHostifUserDefinedTrapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).SetHostifUserDefinedTrapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/SetHostifUserDefinedTrapAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).SetHostifUserDefinedTrapAttribute(ctx, req.(*SetHostifUserDefinedTrapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_GetHostifUserDefinedTrapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostifUserDefinedTrapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).GetHostifUserDefinedTrapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Hostif/GetHostifUserDefinedTrapAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).GetHostifUserDefinedTrapAttribute(ctx, req.(*GetHostifUserDefinedTrapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hostif_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Hostif",
	HandlerType: (*HostifServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHostif",
			Handler:    _Hostif_CreateHostif_Handler,
		},
		{
			MethodName: "RemoveHostif",
			Handler:    _Hostif_RemoveHostif_Handler,
		},
		{
			MethodName: "SetHostifAttribute",
			Handler:    _Hostif_SetHostifAttribute_Handler,
		},
		{
			MethodName: "GetHostifAttribute",
			Handler:    _Hostif_GetHostifAttribute_Handler,
		},
		{
			MethodName: "CreateHostifTableEntry",
			Handler:    _Hostif_CreateHostifTableEntry_Handler,
		},
		{
			MethodName: "RemoveHostifTableEntry",
			Handler:    _Hostif_RemoveHostifTableEntry_Handler,
		},
		{
			MethodName: "GetHostifTableEntryAttribute",
			Handler:    _Hostif_GetHostifTableEntryAttribute_Handler,
		},
		{
			MethodName: "CreateHostifTrapGroup",
			Handler:    _Hostif_CreateHostifTrapGroup_Handler,
		},
		{
			MethodName: "RemoveHostifTrapGroup",
			Handler:    _Hostif_RemoveHostifTrapGroup_Handler,
		},
		{
			MethodName: "SetHostifTrapGroupAttribute",
			Handler:    _Hostif_SetHostifTrapGroupAttribute_Handler,
		},
		{
			MethodName: "GetHostifTrapGroupAttribute",
			Handler:    _Hostif_GetHostifTrapGroupAttribute_Handler,
		},
		{
			MethodName: "CreateHostifTrap",
			Handler:    _Hostif_CreateHostifTrap_Handler,
		},
		{
			MethodName: "RemoveHostifTrap",
			Handler:    _Hostif_RemoveHostifTrap_Handler,
		},
		{
			MethodName: "SetHostifTrapAttribute",
			Handler:    _Hostif_SetHostifTrapAttribute_Handler,
		},
		{
			MethodName: "GetHostifTrapAttribute",
			Handler:    _Hostif_GetHostifTrapAttribute_Handler,
		},
		{
			MethodName: "CreateHostifUserDefinedTrap",
			Handler:    _Hostif_CreateHostifUserDefinedTrap_Handler,
		},
		{
			MethodName: "RemoveHostifUserDefinedTrap",
			Handler:    _Hostif_RemoveHostifUserDefinedTrap_Handler,
		},
		{
			MethodName: "SetHostifUserDefinedTrapAttribute",
			Handler:    _Hostif_SetHostifUserDefinedTrapAttribute_Handler,
		},
		{
			MethodName: "GetHostifUserDefinedTrapAttribute",
			Handler:    _Hostif_GetHostifUserDefinedTrapAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/standalone/proto/hostif.proto",
}
