// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/packetio/packetio.proto

package packetio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PacketIO_HostPortControl_FullMethodName = "/lucius.dataplane.packetio.PacketIO/HostPortControl"
	PacketIO_CPUPacketStream_FullMethodName = "/lucius.dataplane.packetio.PacketIO/CPUPacketStream"
)

// PacketIOClient is the client API for PacketIO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PacketIOClient interface {
	HostPortControl(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HostPortControlRequest, HostPortControlMessage], error)
	CPUPacketStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PacketIn, PacketOut], error)
}

type packetIOClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketIOClient(cc grpc.ClientConnInterface) PacketIOClient {
	return &packetIOClient{cc}
}

func (c *packetIOClient) HostPortControl(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HostPortControlRequest, HostPortControlMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PacketIO_ServiceDesc.Streams[0], PacketIO_HostPortControl_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HostPortControlRequest, HostPortControlMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PacketIO_HostPortControlClient = grpc.BidiStreamingClient[HostPortControlRequest, HostPortControlMessage]

func (c *packetIOClient) CPUPacketStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PacketIn, PacketOut], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PacketIO_ServiceDesc.Streams[1], PacketIO_CPUPacketStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PacketIn, PacketOut]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PacketIO_CPUPacketStreamClient = grpc.BidiStreamingClient[PacketIn, PacketOut]

// PacketIOServer is the server API for PacketIO service.
// All implementations should embed UnimplementedPacketIOServer
// for forward compatibility.
type PacketIOServer interface {
	HostPortControl(grpc.BidiStreamingServer[HostPortControlRequest, HostPortControlMessage]) error
	CPUPacketStream(grpc.BidiStreamingServer[PacketIn, PacketOut]) error
}

// UnimplementedPacketIOServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPacketIOServer struct{}

func (UnimplementedPacketIOServer) HostPortControl(grpc.BidiStreamingServer[HostPortControlRequest, HostPortControlMessage]) error {
	return status.Errorf(codes.Unimplemented, "method HostPortControl not implemented")
}
func (UnimplementedPacketIOServer) CPUPacketStream(grpc.BidiStreamingServer[PacketIn, PacketOut]) error {
	return status.Errorf(codes.Unimplemented, "method CPUPacketStream not implemented")
}
func (UnimplementedPacketIOServer) testEmbeddedByValue() {}

// UnsafePacketIOServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PacketIOServer will
// result in compilation errors.
type UnsafePacketIOServer interface {
	mustEmbedUnimplementedPacketIOServer()
}

func RegisterPacketIOServer(s grpc.ServiceRegistrar, srv PacketIOServer) {
	// If the following call pancis, it indicates UnimplementedPacketIOServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PacketIO_ServiceDesc, srv)
}

func _PacketIO_HostPortControl_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PacketIOServer).HostPortControl(&grpc.GenericServerStream[HostPortControlRequest, HostPortControlMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PacketIO_HostPortControlServer = grpc.BidiStreamingServer[HostPortControlRequest, HostPortControlMessage]

func _PacketIO_CPUPacketStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PacketIOServer).CPUPacketStream(&grpc.GenericServerStream[PacketIn, PacketOut]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PacketIO_CPUPacketStreamServer = grpc.BidiStreamingServer[PacketIn, PacketOut]

// PacketIO_ServiceDesc is the grpc.ServiceDesc for PacketIO service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PacketIO_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lucius.dataplane.packetio.PacketIO",
	HandlerType: (*PacketIOServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HostPortControl",
			Handler:       _PacketIO_HostPortControl_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CPUPacketStream",
			Handler:       _PacketIO_CPUPacketStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dataplane/proto/packetio/packetio.proto",
}
