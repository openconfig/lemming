// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/proto/debug_counter.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DebugCounterAttr int32

const (
	DebugCounterAttr_DEBUG_COUNTER_ATTR_UNSPECIFIED          DebugCounterAttr = 0
	DebugCounterAttr_DEBUG_COUNTER_ATTR_INDEX                DebugCounterAttr = 1
	DebugCounterAttr_DEBUG_COUNTER_ATTR_TYPE                 DebugCounterAttr = 2
	DebugCounterAttr_DEBUG_COUNTER_ATTR_BIND_METHOD          DebugCounterAttr = 3
	DebugCounterAttr_DEBUG_COUNTER_ATTR_IN_DROP_REASON_LIST  DebugCounterAttr = 4
	DebugCounterAttr_DEBUG_COUNTER_ATTR_OUT_DROP_REASON_LIST DebugCounterAttr = 5
)

// Enum value maps for DebugCounterAttr.
var (
	DebugCounterAttr_name = map[int32]string{
		0: "DEBUG_COUNTER_ATTR_UNSPECIFIED",
		1: "DEBUG_COUNTER_ATTR_INDEX",
		2: "DEBUG_COUNTER_ATTR_TYPE",
		3: "DEBUG_COUNTER_ATTR_BIND_METHOD",
		4: "DEBUG_COUNTER_ATTR_IN_DROP_REASON_LIST",
		5: "DEBUG_COUNTER_ATTR_OUT_DROP_REASON_LIST",
	}
	DebugCounterAttr_value = map[string]int32{
		"DEBUG_COUNTER_ATTR_UNSPECIFIED":          0,
		"DEBUG_COUNTER_ATTR_INDEX":                1,
		"DEBUG_COUNTER_ATTR_TYPE":                 2,
		"DEBUG_COUNTER_ATTR_BIND_METHOD":          3,
		"DEBUG_COUNTER_ATTR_IN_DROP_REASON_LIST":  4,
		"DEBUG_COUNTER_ATTR_OUT_DROP_REASON_LIST": 5,
	}
)

func (x DebugCounterAttr) Enum() *DebugCounterAttr {
	p := new(DebugCounterAttr)
	*p = x
	return p
}

func (x DebugCounterAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugCounterAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_debug_counter_proto_enumTypes[0].Descriptor()
}

func (DebugCounterAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_debug_counter_proto_enumTypes[0]
}

func (x DebugCounterAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebugCounterAttr.Descriptor instead.
func (DebugCounterAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_debug_counter_proto_rawDescGZIP(), []int{0}
}

type CreateDebugCounterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch            uint64                  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type              *DebugCounterType       `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.DebugCounterType,oneof" json:"type,omitempty"`
	BindMethod        *DebugCounterBindMethod `protobuf:"varint,3,opt,name=bind_method,json=bindMethod,proto3,enum=lemming.dataplane.sai.DebugCounterBindMethod,oneof" json:"bind_method,omitempty"`
	InDropReasonList  []InDropReason          `protobuf:"varint,4,rep,packed,name=in_drop_reason_list,json=inDropReasonList,proto3,enum=lemming.dataplane.sai.InDropReason" json:"in_drop_reason_list,omitempty"`
	OutDropReasonList []OutDropReason         `protobuf:"varint,5,rep,packed,name=out_drop_reason_list,json=outDropReasonList,proto3,enum=lemming.dataplane.sai.OutDropReason" json:"out_drop_reason_list,omitempty"`
}

func (x *CreateDebugCounterRequest) Reset() {
	*x = CreateDebugCounterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_debug_counter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDebugCounterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebugCounterRequest) ProtoMessage() {}

func (x *CreateDebugCounterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_debug_counter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebugCounterRequest.ProtoReflect.Descriptor instead.
func (*CreateDebugCounterRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_debug_counter_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDebugCounterRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateDebugCounterRequest) GetType() DebugCounterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DebugCounterType_DEBUG_COUNTER_TYPE_UNSPECIFIED
}

func (x *CreateDebugCounterRequest) GetBindMethod() DebugCounterBindMethod {
	if x != nil && x.BindMethod != nil {
		return *x.BindMethod
	}
	return DebugCounterBindMethod_DEBUG_COUNTER_BIND_METHOD_UNSPECIFIED
}

func (x *CreateDebugCounterRequest) GetInDropReasonList() []InDropReason {
	if x != nil {
		return x.InDropReasonList
	}
	return nil
}

func (x *CreateDebugCounterRequest) GetOutDropReasonList() []OutDropReason {
	if x != nil {
		return x.OutDropReasonList
	}
	return nil
}

type CreateDebugCounterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateDebugCounterResponse) Reset() {
	*x = CreateDebugCounterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_debug_counter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDebugCounterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDebugCounterResponse) ProtoMessage() {}

func (x *CreateDebugCounterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_debug_counter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDebugCounterResponse.ProtoReflect.Descriptor instead.
func (*CreateDebugCounterResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_debug_counter_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDebugCounterResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveDebugCounterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveDebugCounterRequest) Reset() {
	*x = RemoveDebugCounterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_debug_counter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDebugCounterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDebugCounterRequest) ProtoMessage() {}

func (x *RemoveDebugCounterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_debug_counter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDebugCounterRequest.ProtoReflect.Descriptor instead.
func (*RemoveDebugCounterRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_debug_counter_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveDebugCounterRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveDebugCounterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveDebugCounterResponse) Reset() {
	*x = RemoveDebugCounterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_debug_counter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDebugCounterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDebugCounterResponse) ProtoMessage() {}

func (x *RemoveDebugCounterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_debug_counter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDebugCounterResponse.ProtoReflect.Descriptor instead.
func (*RemoveDebugCounterResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_debug_counter_proto_rawDescGZIP(), []int{3}
}

type SetDebugCounterAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid               uint64          `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	InDropReasonList  []InDropReason  `protobuf:"varint,2,rep,packed,name=in_drop_reason_list,json=inDropReasonList,proto3,enum=lemming.dataplane.sai.InDropReason" json:"in_drop_reason_list,omitempty"`
	OutDropReasonList []OutDropReason `protobuf:"varint,3,rep,packed,name=out_drop_reason_list,json=outDropReasonList,proto3,enum=lemming.dataplane.sai.OutDropReason" json:"out_drop_reason_list,omitempty"`
}

func (x *SetDebugCounterAttributeRequest) Reset() {
	*x = SetDebugCounterAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_debug_counter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDebugCounterAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDebugCounterAttributeRequest) ProtoMessage() {}

func (x *SetDebugCounterAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_debug_counter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDebugCounterAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetDebugCounterAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_debug_counter_proto_rawDescGZIP(), []int{4}
}

func (x *SetDebugCounterAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetDebugCounterAttributeRequest) GetInDropReasonList() []InDropReason {
	if x != nil {
		return x.InDropReasonList
	}
	return nil
}

func (x *SetDebugCounterAttributeRequest) GetOutDropReasonList() []OutDropReason {
	if x != nil {
		return x.OutDropReasonList
	}
	return nil
}

type SetDebugCounterAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetDebugCounterAttributeResponse) Reset() {
	*x = SetDebugCounterAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_debug_counter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDebugCounterAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDebugCounterAttributeResponse) ProtoMessage() {}

func (x *SetDebugCounterAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_debug_counter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDebugCounterAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetDebugCounterAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_debug_counter_proto_rawDescGZIP(), []int{5}
}

type GetDebugCounterAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64             `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []DebugCounterAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.DebugCounterAttr" json:"attr_type,omitempty"`
}

func (x *GetDebugCounterAttributeRequest) Reset() {
	*x = GetDebugCounterAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_debug_counter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDebugCounterAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebugCounterAttributeRequest) ProtoMessage() {}

func (x *GetDebugCounterAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_debug_counter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebugCounterAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetDebugCounterAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_debug_counter_proto_rawDescGZIP(), []int{6}
}

func (x *GetDebugCounterAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetDebugCounterAttributeRequest) GetAttrType() []DebugCounterAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetDebugCounterAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *DebugCounterAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetDebugCounterAttributeResponse) Reset() {
	*x = GetDebugCounterAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_debug_counter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDebugCounterAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDebugCounterAttributeResponse) ProtoMessage() {}

func (x *GetDebugCounterAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_debug_counter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDebugCounterAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetDebugCounterAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_debug_counter_proto_rawDescGZIP(), []int{7}
}

func (x *GetDebugCounterAttributeResponse) GetAttr() *DebugCounterAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_proto_debug_counter_proto protoreflect.FileDescriptor

var file_dataplane_proto_debug_counter_proto_rawDesc = []byte{
	0x0a, 0x23, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x1c, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x03, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x00, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x03, 0x48, 0x01, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x44,
	0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5b, 0x0a,
	0x14, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x56,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x2e, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x13,
	0x69, 0x6e, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x49, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4f, 0x75, 0x74,
	0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05,
	0x52, 0x11, 0x6f, 0x75, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x64, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0xee, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x22, 0x0a,
	0x1e, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x01, 0x12,
	0x1b, 0x0a, 0x17, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x03,
	0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27,
	0x44, 0x45, 0x42, 0x55, 0x47, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x05, 0x32, 0xa8, 0x04, 0x0a, 0x0c, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x7b, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x30, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x12, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62,
	0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_dataplane_proto_debug_counter_proto_rawDescOnce sync.Once
	file_dataplane_proto_debug_counter_proto_rawDescData = file_dataplane_proto_debug_counter_proto_rawDesc
)

func file_dataplane_proto_debug_counter_proto_rawDescGZIP() []byte {
	file_dataplane_proto_debug_counter_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_debug_counter_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_debug_counter_proto_rawDescData)
	})
	return file_dataplane_proto_debug_counter_proto_rawDescData
}

var file_dataplane_proto_debug_counter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_proto_debug_counter_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dataplane_proto_debug_counter_proto_goTypes = []interface{}{
	(DebugCounterAttr)(0),                    // 0: lemming.dataplane.sai.DebugCounterAttr
	(*CreateDebugCounterRequest)(nil),        // 1: lemming.dataplane.sai.CreateDebugCounterRequest
	(*CreateDebugCounterResponse)(nil),       // 2: lemming.dataplane.sai.CreateDebugCounterResponse
	(*RemoveDebugCounterRequest)(nil),        // 3: lemming.dataplane.sai.RemoveDebugCounterRequest
	(*RemoveDebugCounterResponse)(nil),       // 4: lemming.dataplane.sai.RemoveDebugCounterResponse
	(*SetDebugCounterAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetDebugCounterAttributeRequest
	(*SetDebugCounterAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetDebugCounterAttributeResponse
	(*GetDebugCounterAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetDebugCounterAttributeRequest
	(*GetDebugCounterAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetDebugCounterAttributeResponse
	(DebugCounterType)(0),                    // 9: lemming.dataplane.sai.DebugCounterType
	(DebugCounterBindMethod)(0),              // 10: lemming.dataplane.sai.DebugCounterBindMethod
	(InDropReason)(0),                        // 11: lemming.dataplane.sai.InDropReason
	(OutDropReason)(0),                       // 12: lemming.dataplane.sai.OutDropReason
	(*DebugCounterAttribute)(nil),            // 13: lemming.dataplane.sai.DebugCounterAttribute
}
var file_dataplane_proto_debug_counter_proto_depIdxs = []int32{
	9,  // 0: lemming.dataplane.sai.CreateDebugCounterRequest.type:type_name -> lemming.dataplane.sai.DebugCounterType
	10, // 1: lemming.dataplane.sai.CreateDebugCounterRequest.bind_method:type_name -> lemming.dataplane.sai.DebugCounterBindMethod
	11, // 2: lemming.dataplane.sai.CreateDebugCounterRequest.in_drop_reason_list:type_name -> lemming.dataplane.sai.InDropReason
	12, // 3: lemming.dataplane.sai.CreateDebugCounterRequest.out_drop_reason_list:type_name -> lemming.dataplane.sai.OutDropReason
	11, // 4: lemming.dataplane.sai.SetDebugCounterAttributeRequest.in_drop_reason_list:type_name -> lemming.dataplane.sai.InDropReason
	12, // 5: lemming.dataplane.sai.SetDebugCounterAttributeRequest.out_drop_reason_list:type_name -> lemming.dataplane.sai.OutDropReason
	0,  // 6: lemming.dataplane.sai.GetDebugCounterAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.DebugCounterAttr
	13, // 7: lemming.dataplane.sai.GetDebugCounterAttributeResponse.attr:type_name -> lemming.dataplane.sai.DebugCounterAttribute
	1,  // 8: lemming.dataplane.sai.DebugCounter.CreateDebugCounter:input_type -> lemming.dataplane.sai.CreateDebugCounterRequest
	3,  // 9: lemming.dataplane.sai.DebugCounter.RemoveDebugCounter:input_type -> lemming.dataplane.sai.RemoveDebugCounterRequest
	5,  // 10: lemming.dataplane.sai.DebugCounter.SetDebugCounterAttribute:input_type -> lemming.dataplane.sai.SetDebugCounterAttributeRequest
	7,  // 11: lemming.dataplane.sai.DebugCounter.GetDebugCounterAttribute:input_type -> lemming.dataplane.sai.GetDebugCounterAttributeRequest
	2,  // 12: lemming.dataplane.sai.DebugCounter.CreateDebugCounter:output_type -> lemming.dataplane.sai.CreateDebugCounterResponse
	4,  // 13: lemming.dataplane.sai.DebugCounter.RemoveDebugCounter:output_type -> lemming.dataplane.sai.RemoveDebugCounterResponse
	6,  // 14: lemming.dataplane.sai.DebugCounter.SetDebugCounterAttribute:output_type -> lemming.dataplane.sai.SetDebugCounterAttributeResponse
	8,  // 15: lemming.dataplane.sai.DebugCounter.GetDebugCounterAttribute:output_type -> lemming.dataplane.sai.GetDebugCounterAttributeResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_dataplane_proto_debug_counter_proto_init() }
func file_dataplane_proto_debug_counter_proto_init() {
	if File_dataplane_proto_debug_counter_proto != nil {
		return
	}
	file_dataplane_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_debug_counter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDebugCounterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_debug_counter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDebugCounterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_debug_counter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDebugCounterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_debug_counter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDebugCounterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_debug_counter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDebugCounterAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_debug_counter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDebugCounterAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_debug_counter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDebugCounterAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_debug_counter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDebugCounterAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_debug_counter_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_debug_counter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_debug_counter_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_debug_counter_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_debug_counter_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_debug_counter_proto_msgTypes,
	}.Build()
	File_dataplane_proto_debug_counter_proto = out.File
	file_dataplane_proto_debug_counter_proto_rawDesc = nil
	file_dataplane_proto_debug_counter_proto_goTypes = nil
	file_dataplane_proto_debug_counter_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DebugCounterClient is the client API for DebugCounter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugCounterClient interface {
	CreateDebugCounter(ctx context.Context, in *CreateDebugCounterRequest, opts ...grpc.CallOption) (*CreateDebugCounterResponse, error)
	RemoveDebugCounter(ctx context.Context, in *RemoveDebugCounterRequest, opts ...grpc.CallOption) (*RemoveDebugCounterResponse, error)
	SetDebugCounterAttribute(ctx context.Context, in *SetDebugCounterAttributeRequest, opts ...grpc.CallOption) (*SetDebugCounterAttributeResponse, error)
	GetDebugCounterAttribute(ctx context.Context, in *GetDebugCounterAttributeRequest, opts ...grpc.CallOption) (*GetDebugCounterAttributeResponse, error)
}

type debugCounterClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugCounterClient(cc grpc.ClientConnInterface) DebugCounterClient {
	return &debugCounterClient{cc}
}

func (c *debugCounterClient) CreateDebugCounter(ctx context.Context, in *CreateDebugCounterRequest, opts ...grpc.CallOption) (*CreateDebugCounterResponse, error) {
	out := new(CreateDebugCounterResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.DebugCounter/CreateDebugCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugCounterClient) RemoveDebugCounter(ctx context.Context, in *RemoveDebugCounterRequest, opts ...grpc.CallOption) (*RemoveDebugCounterResponse, error) {
	out := new(RemoveDebugCounterResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.DebugCounter/RemoveDebugCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugCounterClient) SetDebugCounterAttribute(ctx context.Context, in *SetDebugCounterAttributeRequest, opts ...grpc.CallOption) (*SetDebugCounterAttributeResponse, error) {
	out := new(SetDebugCounterAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.DebugCounter/SetDebugCounterAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugCounterClient) GetDebugCounterAttribute(ctx context.Context, in *GetDebugCounterAttributeRequest, opts ...grpc.CallOption) (*GetDebugCounterAttributeResponse, error) {
	out := new(GetDebugCounterAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.DebugCounter/GetDebugCounterAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugCounterServer is the server API for DebugCounter service.
type DebugCounterServer interface {
	CreateDebugCounter(context.Context, *CreateDebugCounterRequest) (*CreateDebugCounterResponse, error)
	RemoveDebugCounter(context.Context, *RemoveDebugCounterRequest) (*RemoveDebugCounterResponse, error)
	SetDebugCounterAttribute(context.Context, *SetDebugCounterAttributeRequest) (*SetDebugCounterAttributeResponse, error)
	GetDebugCounterAttribute(context.Context, *GetDebugCounterAttributeRequest) (*GetDebugCounterAttributeResponse, error)
}

// UnimplementedDebugCounterServer can be embedded to have forward compatible implementations.
type UnimplementedDebugCounterServer struct {
}

func (*UnimplementedDebugCounterServer) CreateDebugCounter(context.Context, *CreateDebugCounterRequest) (*CreateDebugCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDebugCounter not implemented")
}
func (*UnimplementedDebugCounterServer) RemoveDebugCounter(context.Context, *RemoveDebugCounterRequest) (*RemoveDebugCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDebugCounter not implemented")
}
func (*UnimplementedDebugCounterServer) SetDebugCounterAttribute(context.Context, *SetDebugCounterAttributeRequest) (*SetDebugCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDebugCounterAttribute not implemented")
}
func (*UnimplementedDebugCounterServer) GetDebugCounterAttribute(context.Context, *GetDebugCounterAttributeRequest) (*GetDebugCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebugCounterAttribute not implemented")
}

func RegisterDebugCounterServer(s *grpc.Server, srv DebugCounterServer) {
	s.RegisterService(&_DebugCounter_serviceDesc, srv)
}

func _DebugCounter_CreateDebugCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebugCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugCounterServer).CreateDebugCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.DebugCounter/CreateDebugCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugCounterServer).CreateDebugCounter(ctx, req.(*CreateDebugCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugCounter_RemoveDebugCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDebugCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugCounterServer).RemoveDebugCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.DebugCounter/RemoveDebugCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugCounterServer).RemoveDebugCounter(ctx, req.(*RemoveDebugCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugCounter_SetDebugCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDebugCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugCounterServer).SetDebugCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.DebugCounter/SetDebugCounterAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugCounterServer).SetDebugCounterAttribute(ctx, req.(*SetDebugCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugCounter_GetDebugCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDebugCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugCounterServer).GetDebugCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.DebugCounter/GetDebugCounterAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugCounterServer).GetDebugCounterAttribute(ctx, req.(*GetDebugCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebugCounter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.DebugCounter",
	HandlerType: (*DebugCounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDebugCounter",
			Handler:    _DebugCounter_CreateDebugCounter_Handler,
		},
		{
			MethodName: "RemoveDebugCounter",
			Handler:    _DebugCounter_RemoveDebugCounter_Handler,
		},
		{
			MethodName: "SetDebugCounterAttribute",
			Handler:    _DebugCounter_SetDebugCounterAttribute_Handler,
		},
		{
			MethodName: "GetDebugCounterAttribute",
			Handler:    _DebugCounter_GetDebugCounterAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/debug_counter.proto",
}
