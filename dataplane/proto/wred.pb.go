// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/proto/wred.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WredAttr int32

const (
	WredAttr_WRED_ATTR_UNSPECIFIED                        WredAttr = 0
	WredAttr_WRED_ATTR_GREEN_ENABLE                       WredAttr = 1
	WredAttr_WRED_ATTR_GREEN_MIN_THRESHOLD                WredAttr = 2
	WredAttr_WRED_ATTR_GREEN_MAX_THRESHOLD                WredAttr = 3
	WredAttr_WRED_ATTR_GREEN_DROP_PROBABILITY             WredAttr = 4
	WredAttr_WRED_ATTR_YELLOW_ENABLE                      WredAttr = 5
	WredAttr_WRED_ATTR_YELLOW_MIN_THRESHOLD               WredAttr = 6
	WredAttr_WRED_ATTR_YELLOW_MAX_THRESHOLD               WredAttr = 7
	WredAttr_WRED_ATTR_YELLOW_DROP_PROBABILITY            WredAttr = 8
	WredAttr_WRED_ATTR_RED_ENABLE                         WredAttr = 9
	WredAttr_WRED_ATTR_RED_MIN_THRESHOLD                  WredAttr = 10
	WredAttr_WRED_ATTR_RED_MAX_THRESHOLD                  WredAttr = 11
	WredAttr_WRED_ATTR_RED_DROP_PROBABILITY               WredAttr = 12
	WredAttr_WRED_ATTR_WEIGHT                             WredAttr = 13
	WredAttr_WRED_ATTR_ECN_MARK_MODE                      WredAttr = 14
	WredAttr_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD            WredAttr = 15
	WredAttr_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD            WredAttr = 16
	WredAttr_WRED_ATTR_ECN_GREEN_MARK_PROBABILITY         WredAttr = 17
	WredAttr_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD           WredAttr = 18
	WredAttr_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD           WredAttr = 19
	WredAttr_WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY        WredAttr = 20
	WredAttr_WRED_ATTR_ECN_RED_MIN_THRESHOLD              WredAttr = 21
	WredAttr_WRED_ATTR_ECN_RED_MAX_THRESHOLD              WredAttr = 22
	WredAttr_WRED_ATTR_ECN_RED_MARK_PROBABILITY           WredAttr = 23
	WredAttr_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD    WredAttr = 24
	WredAttr_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD    WredAttr = 25
	WredAttr_WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY WredAttr = 26
)

// Enum value maps for WredAttr.
var (
	WredAttr_name = map[int32]string{
		0:  "WRED_ATTR_UNSPECIFIED",
		1:  "WRED_ATTR_GREEN_ENABLE",
		2:  "WRED_ATTR_GREEN_MIN_THRESHOLD",
		3:  "WRED_ATTR_GREEN_MAX_THRESHOLD",
		4:  "WRED_ATTR_GREEN_DROP_PROBABILITY",
		5:  "WRED_ATTR_YELLOW_ENABLE",
		6:  "WRED_ATTR_YELLOW_MIN_THRESHOLD",
		7:  "WRED_ATTR_YELLOW_MAX_THRESHOLD",
		8:  "WRED_ATTR_YELLOW_DROP_PROBABILITY",
		9:  "WRED_ATTR_RED_ENABLE",
		10: "WRED_ATTR_RED_MIN_THRESHOLD",
		11: "WRED_ATTR_RED_MAX_THRESHOLD",
		12: "WRED_ATTR_RED_DROP_PROBABILITY",
		13: "WRED_ATTR_WEIGHT",
		14: "WRED_ATTR_ECN_MARK_MODE",
		15: "WRED_ATTR_ECN_GREEN_MIN_THRESHOLD",
		16: "WRED_ATTR_ECN_GREEN_MAX_THRESHOLD",
		17: "WRED_ATTR_ECN_GREEN_MARK_PROBABILITY",
		18: "WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD",
		19: "WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD",
		20: "WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY",
		21: "WRED_ATTR_ECN_RED_MIN_THRESHOLD",
		22: "WRED_ATTR_ECN_RED_MAX_THRESHOLD",
		23: "WRED_ATTR_ECN_RED_MARK_PROBABILITY",
		24: "WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD",
		25: "WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD",
		26: "WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY",
	}
	WredAttr_value = map[string]int32{
		"WRED_ATTR_UNSPECIFIED":                        0,
		"WRED_ATTR_GREEN_ENABLE":                       1,
		"WRED_ATTR_GREEN_MIN_THRESHOLD":                2,
		"WRED_ATTR_GREEN_MAX_THRESHOLD":                3,
		"WRED_ATTR_GREEN_DROP_PROBABILITY":             4,
		"WRED_ATTR_YELLOW_ENABLE":                      5,
		"WRED_ATTR_YELLOW_MIN_THRESHOLD":               6,
		"WRED_ATTR_YELLOW_MAX_THRESHOLD":               7,
		"WRED_ATTR_YELLOW_DROP_PROBABILITY":            8,
		"WRED_ATTR_RED_ENABLE":                         9,
		"WRED_ATTR_RED_MIN_THRESHOLD":                  10,
		"WRED_ATTR_RED_MAX_THRESHOLD":                  11,
		"WRED_ATTR_RED_DROP_PROBABILITY":               12,
		"WRED_ATTR_WEIGHT":                             13,
		"WRED_ATTR_ECN_MARK_MODE":                      14,
		"WRED_ATTR_ECN_GREEN_MIN_THRESHOLD":            15,
		"WRED_ATTR_ECN_GREEN_MAX_THRESHOLD":            16,
		"WRED_ATTR_ECN_GREEN_MARK_PROBABILITY":         17,
		"WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD":           18,
		"WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD":           19,
		"WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY":        20,
		"WRED_ATTR_ECN_RED_MIN_THRESHOLD":              21,
		"WRED_ATTR_ECN_RED_MAX_THRESHOLD":              22,
		"WRED_ATTR_ECN_RED_MARK_PROBABILITY":           23,
		"WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD":    24,
		"WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD":    25,
		"WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY": 26,
	}
)

func (x WredAttr) Enum() *WredAttr {
	p := new(WredAttr)
	*p = x
	return p
}

func (x WredAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WredAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_wred_proto_enumTypes[0].Descriptor()
}

func (WredAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_wred_proto_enumTypes[0]
}

func (x WredAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WredAttr.Descriptor instead.
func (WredAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_wred_proto_rawDescGZIP(), []int{0}
}

type CreateWredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                         uint64       `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	GreenEnable                    *bool        `protobuf:"varint,2,opt,name=green_enable,json=greenEnable,proto3,oneof" json:"green_enable,omitempty"`
	GreenMinThreshold              *uint32      `protobuf:"varint,3,opt,name=green_min_threshold,json=greenMinThreshold,proto3,oneof" json:"green_min_threshold,omitempty"`
	GreenMaxThreshold              *uint32      `protobuf:"varint,4,opt,name=green_max_threshold,json=greenMaxThreshold,proto3,oneof" json:"green_max_threshold,omitempty"`
	GreenDropProbability           *uint32      `protobuf:"varint,5,opt,name=green_drop_probability,json=greenDropProbability,proto3,oneof" json:"green_drop_probability,omitempty"`
	YellowEnable                   *bool        `protobuf:"varint,6,opt,name=yellow_enable,json=yellowEnable,proto3,oneof" json:"yellow_enable,omitempty"`
	YellowMinThreshold             *uint32      `protobuf:"varint,7,opt,name=yellow_min_threshold,json=yellowMinThreshold,proto3,oneof" json:"yellow_min_threshold,omitempty"`
	YellowMaxThreshold             *uint32      `protobuf:"varint,8,opt,name=yellow_max_threshold,json=yellowMaxThreshold,proto3,oneof" json:"yellow_max_threshold,omitempty"`
	YellowDropProbability          *uint32      `protobuf:"varint,9,opt,name=yellow_drop_probability,json=yellowDropProbability,proto3,oneof" json:"yellow_drop_probability,omitempty"`
	RedEnable                      *bool        `protobuf:"varint,10,opt,name=red_enable,json=redEnable,proto3,oneof" json:"red_enable,omitempty"`
	RedMinThreshold                *uint32      `protobuf:"varint,11,opt,name=red_min_threshold,json=redMinThreshold,proto3,oneof" json:"red_min_threshold,omitempty"`
	RedMaxThreshold                *uint32      `protobuf:"varint,12,opt,name=red_max_threshold,json=redMaxThreshold,proto3,oneof" json:"red_max_threshold,omitempty"`
	RedDropProbability             *uint32      `protobuf:"varint,13,opt,name=red_drop_probability,json=redDropProbability,proto3,oneof" json:"red_drop_probability,omitempty"`
	Weight                         *uint32      `protobuf:"varint,14,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	EcnMarkMode                    *EcnMarkMode `protobuf:"varint,15,opt,name=ecn_mark_mode,json=ecnMarkMode,proto3,enum=lemming.dataplane.sai.EcnMarkMode,oneof" json:"ecn_mark_mode,omitempty"`
	EcnGreenMinThreshold           *uint32      `protobuf:"varint,16,opt,name=ecn_green_min_threshold,json=ecnGreenMinThreshold,proto3,oneof" json:"ecn_green_min_threshold,omitempty"`
	EcnGreenMaxThreshold           *uint32      `protobuf:"varint,17,opt,name=ecn_green_max_threshold,json=ecnGreenMaxThreshold,proto3,oneof" json:"ecn_green_max_threshold,omitempty"`
	EcnGreenMarkProbability        *uint32      `protobuf:"varint,18,opt,name=ecn_green_mark_probability,json=ecnGreenMarkProbability,proto3,oneof" json:"ecn_green_mark_probability,omitempty"`
	EcnYellowMinThreshold          *uint32      `protobuf:"varint,19,opt,name=ecn_yellow_min_threshold,json=ecnYellowMinThreshold,proto3,oneof" json:"ecn_yellow_min_threshold,omitempty"`
	EcnYellowMaxThreshold          *uint32      `protobuf:"varint,20,opt,name=ecn_yellow_max_threshold,json=ecnYellowMaxThreshold,proto3,oneof" json:"ecn_yellow_max_threshold,omitempty"`
	EcnYellowMarkProbability       *uint32      `protobuf:"varint,21,opt,name=ecn_yellow_mark_probability,json=ecnYellowMarkProbability,proto3,oneof" json:"ecn_yellow_mark_probability,omitempty"`
	EcnRedMinThreshold             *uint32      `protobuf:"varint,22,opt,name=ecn_red_min_threshold,json=ecnRedMinThreshold,proto3,oneof" json:"ecn_red_min_threshold,omitempty"`
	EcnRedMaxThreshold             *uint32      `protobuf:"varint,23,opt,name=ecn_red_max_threshold,json=ecnRedMaxThreshold,proto3,oneof" json:"ecn_red_max_threshold,omitempty"`
	EcnRedMarkProbability          *uint32      `protobuf:"varint,24,opt,name=ecn_red_mark_probability,json=ecnRedMarkProbability,proto3,oneof" json:"ecn_red_mark_probability,omitempty"`
	EcnColorUnawareMinThreshold    *uint32      `protobuf:"varint,25,opt,name=ecn_color_unaware_min_threshold,json=ecnColorUnawareMinThreshold,proto3,oneof" json:"ecn_color_unaware_min_threshold,omitempty"`
	EcnColorUnawareMaxThreshold    *uint32      `protobuf:"varint,26,opt,name=ecn_color_unaware_max_threshold,json=ecnColorUnawareMaxThreshold,proto3,oneof" json:"ecn_color_unaware_max_threshold,omitempty"`
	EcnColorUnawareMarkProbability *uint32      `protobuf:"varint,27,opt,name=ecn_color_unaware_mark_probability,json=ecnColorUnawareMarkProbability,proto3,oneof" json:"ecn_color_unaware_mark_probability,omitempty"`
}

func (x *CreateWredRequest) Reset() {
	*x = CreateWredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_wred_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWredRequest) ProtoMessage() {}

func (x *CreateWredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_wred_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWredRequest.ProtoReflect.Descriptor instead.
func (*CreateWredRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_wred_proto_rawDescGZIP(), []int{0}
}

func (x *CreateWredRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateWredRequest) GetGreenEnable() bool {
	if x != nil && x.GreenEnable != nil {
		return *x.GreenEnable
	}
	return false
}

func (x *CreateWredRequest) GetGreenMinThreshold() uint32 {
	if x != nil && x.GreenMinThreshold != nil {
		return *x.GreenMinThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetGreenMaxThreshold() uint32 {
	if x != nil && x.GreenMaxThreshold != nil {
		return *x.GreenMaxThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetGreenDropProbability() uint32 {
	if x != nil && x.GreenDropProbability != nil {
		return *x.GreenDropProbability
	}
	return 0
}

func (x *CreateWredRequest) GetYellowEnable() bool {
	if x != nil && x.YellowEnable != nil {
		return *x.YellowEnable
	}
	return false
}

func (x *CreateWredRequest) GetYellowMinThreshold() uint32 {
	if x != nil && x.YellowMinThreshold != nil {
		return *x.YellowMinThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetYellowMaxThreshold() uint32 {
	if x != nil && x.YellowMaxThreshold != nil {
		return *x.YellowMaxThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetYellowDropProbability() uint32 {
	if x != nil && x.YellowDropProbability != nil {
		return *x.YellowDropProbability
	}
	return 0
}

func (x *CreateWredRequest) GetRedEnable() bool {
	if x != nil && x.RedEnable != nil {
		return *x.RedEnable
	}
	return false
}

func (x *CreateWredRequest) GetRedMinThreshold() uint32 {
	if x != nil && x.RedMinThreshold != nil {
		return *x.RedMinThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetRedMaxThreshold() uint32 {
	if x != nil && x.RedMaxThreshold != nil {
		return *x.RedMaxThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetRedDropProbability() uint32 {
	if x != nil && x.RedDropProbability != nil {
		return *x.RedDropProbability
	}
	return 0
}

func (x *CreateWredRequest) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *CreateWredRequest) GetEcnMarkMode() EcnMarkMode {
	if x != nil && x.EcnMarkMode != nil {
		return *x.EcnMarkMode
	}
	return EcnMarkMode_ECN_MARK_MODE_UNSPECIFIED
}

func (x *CreateWredRequest) GetEcnGreenMinThreshold() uint32 {
	if x != nil && x.EcnGreenMinThreshold != nil {
		return *x.EcnGreenMinThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetEcnGreenMaxThreshold() uint32 {
	if x != nil && x.EcnGreenMaxThreshold != nil {
		return *x.EcnGreenMaxThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetEcnGreenMarkProbability() uint32 {
	if x != nil && x.EcnGreenMarkProbability != nil {
		return *x.EcnGreenMarkProbability
	}
	return 0
}

func (x *CreateWredRequest) GetEcnYellowMinThreshold() uint32 {
	if x != nil && x.EcnYellowMinThreshold != nil {
		return *x.EcnYellowMinThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetEcnYellowMaxThreshold() uint32 {
	if x != nil && x.EcnYellowMaxThreshold != nil {
		return *x.EcnYellowMaxThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetEcnYellowMarkProbability() uint32 {
	if x != nil && x.EcnYellowMarkProbability != nil {
		return *x.EcnYellowMarkProbability
	}
	return 0
}

func (x *CreateWredRequest) GetEcnRedMinThreshold() uint32 {
	if x != nil && x.EcnRedMinThreshold != nil {
		return *x.EcnRedMinThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetEcnRedMaxThreshold() uint32 {
	if x != nil && x.EcnRedMaxThreshold != nil {
		return *x.EcnRedMaxThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetEcnRedMarkProbability() uint32 {
	if x != nil && x.EcnRedMarkProbability != nil {
		return *x.EcnRedMarkProbability
	}
	return 0
}

func (x *CreateWredRequest) GetEcnColorUnawareMinThreshold() uint32 {
	if x != nil && x.EcnColorUnawareMinThreshold != nil {
		return *x.EcnColorUnawareMinThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetEcnColorUnawareMaxThreshold() uint32 {
	if x != nil && x.EcnColorUnawareMaxThreshold != nil {
		return *x.EcnColorUnawareMaxThreshold
	}
	return 0
}

func (x *CreateWredRequest) GetEcnColorUnawareMarkProbability() uint32 {
	if x != nil && x.EcnColorUnawareMarkProbability != nil {
		return *x.EcnColorUnawareMarkProbability
	}
	return 0
}

type CreateWredResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateWredResponse) Reset() {
	*x = CreateWredResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_wred_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWredResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWredResponse) ProtoMessage() {}

func (x *CreateWredResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_wred_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWredResponse.ProtoReflect.Descriptor instead.
func (*CreateWredResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_wred_proto_rawDescGZIP(), []int{1}
}

func (x *CreateWredResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveWredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveWredRequest) Reset() {
	*x = RemoveWredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_wred_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveWredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveWredRequest) ProtoMessage() {}

func (x *RemoveWredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_wred_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveWredRequest.ProtoReflect.Descriptor instead.
func (*RemoveWredRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_wred_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveWredRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveWredResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveWredResponse) Reset() {
	*x = RemoveWredResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_wred_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveWredResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveWredResponse) ProtoMessage() {}

func (x *RemoveWredResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_wred_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveWredResponse.ProtoReflect.Descriptor instead.
func (*RemoveWredResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_wred_proto_rawDescGZIP(), []int{3}
}

type SetWredAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                            uint64       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	GreenEnable                    *bool        `protobuf:"varint,2,opt,name=green_enable,json=greenEnable,proto3,oneof" json:"green_enable,omitempty"`
	GreenMinThreshold              *uint32      `protobuf:"varint,3,opt,name=green_min_threshold,json=greenMinThreshold,proto3,oneof" json:"green_min_threshold,omitempty"`
	GreenMaxThreshold              *uint32      `protobuf:"varint,4,opt,name=green_max_threshold,json=greenMaxThreshold,proto3,oneof" json:"green_max_threshold,omitempty"`
	GreenDropProbability           *uint32      `protobuf:"varint,5,opt,name=green_drop_probability,json=greenDropProbability,proto3,oneof" json:"green_drop_probability,omitempty"`
	YellowEnable                   *bool        `protobuf:"varint,6,opt,name=yellow_enable,json=yellowEnable,proto3,oneof" json:"yellow_enable,omitempty"`
	YellowMinThreshold             *uint32      `protobuf:"varint,7,opt,name=yellow_min_threshold,json=yellowMinThreshold,proto3,oneof" json:"yellow_min_threshold,omitempty"`
	YellowMaxThreshold             *uint32      `protobuf:"varint,8,opt,name=yellow_max_threshold,json=yellowMaxThreshold,proto3,oneof" json:"yellow_max_threshold,omitempty"`
	YellowDropProbability          *uint32      `protobuf:"varint,9,opt,name=yellow_drop_probability,json=yellowDropProbability,proto3,oneof" json:"yellow_drop_probability,omitempty"`
	RedEnable                      *bool        `protobuf:"varint,10,opt,name=red_enable,json=redEnable,proto3,oneof" json:"red_enable,omitempty"`
	RedMinThreshold                *uint32      `protobuf:"varint,11,opt,name=red_min_threshold,json=redMinThreshold,proto3,oneof" json:"red_min_threshold,omitempty"`
	RedMaxThreshold                *uint32      `protobuf:"varint,12,opt,name=red_max_threshold,json=redMaxThreshold,proto3,oneof" json:"red_max_threshold,omitempty"`
	RedDropProbability             *uint32      `protobuf:"varint,13,opt,name=red_drop_probability,json=redDropProbability,proto3,oneof" json:"red_drop_probability,omitempty"`
	Weight                         *uint32      `protobuf:"varint,14,opt,name=weight,proto3,oneof" json:"weight,omitempty"`
	EcnMarkMode                    *EcnMarkMode `protobuf:"varint,15,opt,name=ecn_mark_mode,json=ecnMarkMode,proto3,enum=lemming.dataplane.sai.EcnMarkMode,oneof" json:"ecn_mark_mode,omitempty"`
	EcnGreenMinThreshold           *uint32      `protobuf:"varint,16,opt,name=ecn_green_min_threshold,json=ecnGreenMinThreshold,proto3,oneof" json:"ecn_green_min_threshold,omitempty"`
	EcnGreenMaxThreshold           *uint32      `protobuf:"varint,17,opt,name=ecn_green_max_threshold,json=ecnGreenMaxThreshold,proto3,oneof" json:"ecn_green_max_threshold,omitempty"`
	EcnGreenMarkProbability        *uint32      `protobuf:"varint,18,opt,name=ecn_green_mark_probability,json=ecnGreenMarkProbability,proto3,oneof" json:"ecn_green_mark_probability,omitempty"`
	EcnYellowMinThreshold          *uint32      `protobuf:"varint,19,opt,name=ecn_yellow_min_threshold,json=ecnYellowMinThreshold,proto3,oneof" json:"ecn_yellow_min_threshold,omitempty"`
	EcnYellowMaxThreshold          *uint32      `protobuf:"varint,20,opt,name=ecn_yellow_max_threshold,json=ecnYellowMaxThreshold,proto3,oneof" json:"ecn_yellow_max_threshold,omitempty"`
	EcnYellowMarkProbability       *uint32      `protobuf:"varint,21,opt,name=ecn_yellow_mark_probability,json=ecnYellowMarkProbability,proto3,oneof" json:"ecn_yellow_mark_probability,omitempty"`
	EcnRedMinThreshold             *uint32      `protobuf:"varint,22,opt,name=ecn_red_min_threshold,json=ecnRedMinThreshold,proto3,oneof" json:"ecn_red_min_threshold,omitempty"`
	EcnRedMaxThreshold             *uint32      `protobuf:"varint,23,opt,name=ecn_red_max_threshold,json=ecnRedMaxThreshold,proto3,oneof" json:"ecn_red_max_threshold,omitempty"`
	EcnRedMarkProbability          *uint32      `protobuf:"varint,24,opt,name=ecn_red_mark_probability,json=ecnRedMarkProbability,proto3,oneof" json:"ecn_red_mark_probability,omitempty"`
	EcnColorUnawareMinThreshold    *uint32      `protobuf:"varint,25,opt,name=ecn_color_unaware_min_threshold,json=ecnColorUnawareMinThreshold,proto3,oneof" json:"ecn_color_unaware_min_threshold,omitempty"`
	EcnColorUnawareMaxThreshold    *uint32      `protobuf:"varint,26,opt,name=ecn_color_unaware_max_threshold,json=ecnColorUnawareMaxThreshold,proto3,oneof" json:"ecn_color_unaware_max_threshold,omitempty"`
	EcnColorUnawareMarkProbability *uint32      `protobuf:"varint,27,opt,name=ecn_color_unaware_mark_probability,json=ecnColorUnawareMarkProbability,proto3,oneof" json:"ecn_color_unaware_mark_probability,omitempty"`
}

func (x *SetWredAttributeRequest) Reset() {
	*x = SetWredAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_wred_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWredAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWredAttributeRequest) ProtoMessage() {}

func (x *SetWredAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_wred_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWredAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetWredAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_wred_proto_rawDescGZIP(), []int{4}
}

func (x *SetWredAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetWredAttributeRequest) GetGreenEnable() bool {
	if x != nil && x.GreenEnable != nil {
		return *x.GreenEnable
	}
	return false
}

func (x *SetWredAttributeRequest) GetGreenMinThreshold() uint32 {
	if x != nil && x.GreenMinThreshold != nil {
		return *x.GreenMinThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetGreenMaxThreshold() uint32 {
	if x != nil && x.GreenMaxThreshold != nil {
		return *x.GreenMaxThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetGreenDropProbability() uint32 {
	if x != nil && x.GreenDropProbability != nil {
		return *x.GreenDropProbability
	}
	return 0
}

func (x *SetWredAttributeRequest) GetYellowEnable() bool {
	if x != nil && x.YellowEnable != nil {
		return *x.YellowEnable
	}
	return false
}

func (x *SetWredAttributeRequest) GetYellowMinThreshold() uint32 {
	if x != nil && x.YellowMinThreshold != nil {
		return *x.YellowMinThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetYellowMaxThreshold() uint32 {
	if x != nil && x.YellowMaxThreshold != nil {
		return *x.YellowMaxThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetYellowDropProbability() uint32 {
	if x != nil && x.YellowDropProbability != nil {
		return *x.YellowDropProbability
	}
	return 0
}

func (x *SetWredAttributeRequest) GetRedEnable() bool {
	if x != nil && x.RedEnable != nil {
		return *x.RedEnable
	}
	return false
}

func (x *SetWredAttributeRequest) GetRedMinThreshold() uint32 {
	if x != nil && x.RedMinThreshold != nil {
		return *x.RedMinThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetRedMaxThreshold() uint32 {
	if x != nil && x.RedMaxThreshold != nil {
		return *x.RedMaxThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetRedDropProbability() uint32 {
	if x != nil && x.RedDropProbability != nil {
		return *x.RedDropProbability
	}
	return 0
}

func (x *SetWredAttributeRequest) GetWeight() uint32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *SetWredAttributeRequest) GetEcnMarkMode() EcnMarkMode {
	if x != nil && x.EcnMarkMode != nil {
		return *x.EcnMarkMode
	}
	return EcnMarkMode_ECN_MARK_MODE_UNSPECIFIED
}

func (x *SetWredAttributeRequest) GetEcnGreenMinThreshold() uint32 {
	if x != nil && x.EcnGreenMinThreshold != nil {
		return *x.EcnGreenMinThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetEcnGreenMaxThreshold() uint32 {
	if x != nil && x.EcnGreenMaxThreshold != nil {
		return *x.EcnGreenMaxThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetEcnGreenMarkProbability() uint32 {
	if x != nil && x.EcnGreenMarkProbability != nil {
		return *x.EcnGreenMarkProbability
	}
	return 0
}

func (x *SetWredAttributeRequest) GetEcnYellowMinThreshold() uint32 {
	if x != nil && x.EcnYellowMinThreshold != nil {
		return *x.EcnYellowMinThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetEcnYellowMaxThreshold() uint32 {
	if x != nil && x.EcnYellowMaxThreshold != nil {
		return *x.EcnYellowMaxThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetEcnYellowMarkProbability() uint32 {
	if x != nil && x.EcnYellowMarkProbability != nil {
		return *x.EcnYellowMarkProbability
	}
	return 0
}

func (x *SetWredAttributeRequest) GetEcnRedMinThreshold() uint32 {
	if x != nil && x.EcnRedMinThreshold != nil {
		return *x.EcnRedMinThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetEcnRedMaxThreshold() uint32 {
	if x != nil && x.EcnRedMaxThreshold != nil {
		return *x.EcnRedMaxThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetEcnRedMarkProbability() uint32 {
	if x != nil && x.EcnRedMarkProbability != nil {
		return *x.EcnRedMarkProbability
	}
	return 0
}

func (x *SetWredAttributeRequest) GetEcnColorUnawareMinThreshold() uint32 {
	if x != nil && x.EcnColorUnawareMinThreshold != nil {
		return *x.EcnColorUnawareMinThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetEcnColorUnawareMaxThreshold() uint32 {
	if x != nil && x.EcnColorUnawareMaxThreshold != nil {
		return *x.EcnColorUnawareMaxThreshold
	}
	return 0
}

func (x *SetWredAttributeRequest) GetEcnColorUnawareMarkProbability() uint32 {
	if x != nil && x.EcnColorUnawareMarkProbability != nil {
		return *x.EcnColorUnawareMarkProbability
	}
	return 0
}

type SetWredAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetWredAttributeResponse) Reset() {
	*x = SetWredAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_wred_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetWredAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetWredAttributeResponse) ProtoMessage() {}

func (x *SetWredAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_wred_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetWredAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetWredAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_wred_proto_rawDescGZIP(), []int{5}
}

type GetWredAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []WredAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.WredAttr" json:"attr_type,omitempty"`
}

func (x *GetWredAttributeRequest) Reset() {
	*x = GetWredAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_wred_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWredAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWredAttributeRequest) ProtoMessage() {}

func (x *GetWredAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_wred_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWredAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetWredAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_wred_proto_rawDescGZIP(), []int{6}
}

func (x *GetWredAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetWredAttributeRequest) GetAttrType() []WredAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetWredAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *WredAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetWredAttributeResponse) Reset() {
	*x = GetWredAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_wred_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWredAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWredAttributeResponse) ProtoMessage() {}

func (x *GetWredAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_wred_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWredAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetWredAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_wred_proto_rawDescGZIP(), []int{7}
}

func (x *GetWredAttributeResponse) GetAttr() *WredAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_proto_wred_proto protoreflect.FileDescriptor

var file_dataplane_proto_wred_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x77, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x1a, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc3, 0x12, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x2c, 0x0a, 0x0c, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x13, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02,
	0x48, 0x01, 0x52, 0x11, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x13, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x11, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x16, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x14, 0x67, 0x72, 0x65,
	0x65, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x05, 0x48, 0x04, 0x52, 0x0c, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x05, 0x52, 0x12, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x06, 0x52, 0x12, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4d,
	0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x41,
	0x0a, 0x17, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x07, 0x52, 0x15, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x44,
	0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0a, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x08, 0x52, 0x09, 0x72,
	0x65, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x0b, 0x48, 0x0a, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x14, 0x72, 0x65, 0x64,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x0b, 0x52,
	0x12, 0x72, 0x65, 0x64, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x0c, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0d, 0x65, 0x63, 0x6e,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x45, 0x63, 0x6e, 0x4d, 0x61, 0x72, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48, 0x0d, 0x52, 0x0b, 0x65, 0x63,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x17,
	0x65, 0x63, 0x6e, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x0f, 0x48, 0x0e, 0x52, 0x14, 0x65, 0x63, 0x6e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x4d,
	0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x17, 0x65, 0x63, 0x6e, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x10, 0x48, 0x0f, 0x52, 0x14, 0x65, 0x63, 0x6e, 0x47, 0x72, 0x65, 0x65,
	0x6e, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x46, 0x0a, 0x1a, 0x65, 0x63, 0x6e, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x11, 0x48, 0x10, 0x52, 0x17, 0x65, 0x63,
	0x6e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x65, 0x63, 0x6e, 0x5f,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x12,
	0x48, 0x11, 0x52, 0x15, 0x65, 0x63, 0x6e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x6e,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18,
	0x65, 0x63, 0x6e, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x13, 0x48, 0x12, 0x52, 0x15, 0x65, 0x63, 0x6e, 0x59, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x1b, 0x65, 0x63, 0x6e, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48, 0x13, 0x52, 0x18, 0x65,
	0x63, 0x6e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x15, 0x65, 0x63,
	0x6e, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x15, 0x48,
	0x14, 0x52, 0x12, 0x65, 0x63, 0x6e, 0x52, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x15, 0x65, 0x63, 0x6e, 0x5f,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x16, 0x48, 0x15, 0x52,
	0x12, 0x65, 0x63, 0x6e, 0x52, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x65, 0x63, 0x6e, 0x5f, 0x72, 0x65,
	0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x17, 0x48, 0x16,
	0x52, 0x15, 0x65, 0x63, 0x6e, 0x52, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x1f, 0x65, 0x63,
	0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x18, 0x48, 0x17, 0x52, 0x1b, 0x65, 0x63, 0x6e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x1f, 0x65,
	0x63, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x19, 0x48, 0x18, 0x52, 0x1b, 0x65, 0x63,
	0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x78,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x22,
	0x65, 0x63, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x1a, 0x48, 0x19,
	0x52, 0x1e, 0x65, 0x63, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x61, 0x77, 0x61, 0x72,
	0x65, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x14, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x79, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65,
	0x63, 0x6e, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x65, 0x63, 0x6e, 0x5f,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x63, 0x6e, 0x5f,
	0x72, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x65, 0x63, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x65, 0x63, 0x6e,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x22, 0x0a, 0x20,
	0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x42, 0x25, 0x0a, 0x23, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x75,
	0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x26, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x25, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x57, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x12, 0x0a,
	0x17, 0x53, 0x65, 0x74, 0x57, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0c, 0x67, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x13, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x11, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x13, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x11, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x4d,
	0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x16, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x14, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x72, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x0d, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x04, 0x52, 0x0c,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x14, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x06, 0x48, 0x05, 0x52, 0x12, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x6e,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x14,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07,
	0x48, 0x06, 0x52, 0x12, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x17, 0x79, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08,
	0x48, 0x07, 0x52, 0x15, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a,
	0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x08, 0x52, 0x09, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x4d, 0x69,
	0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x11, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48, 0x0a,
	0x52, 0x0f, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x0b, 0x52, 0x12, 0x72, 0x65, 0x64, 0x44,
	0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x0c, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x0d, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x45, 0x63, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48, 0x0d, 0x52, 0x0b, 0x65, 0x63, 0x6e, 0x4d, 0x61, 0x72, 0x6b,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x17, 0x65, 0x63, 0x6e, 0x5f, 0x67,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48, 0x0e,
	0x52, 0x14, 0x65, 0x63, 0x6e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x17, 0x65, 0x63, 0x6e,
	0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x10,
	0x48, 0x0f, 0x52, 0x14, 0x65, 0x63, 0x6e, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x4d, 0x61, 0x78, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x65,
	0x63, 0x6e, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x11, 0x48, 0x10, 0x52, 0x17, 0x65, 0x63, 0x6e, 0x47, 0x72, 0x65, 0x65,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x65, 0x63, 0x6e, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x12, 0x48, 0x11, 0x52, 0x15, 0x65,
	0x63, 0x6e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x65, 0x63, 0x6e, 0x5f, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x13, 0x48,
	0x12, 0x52, 0x15, 0x65, 0x63, 0x6e, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x78, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1b, 0x65,
	0x63, 0x6e, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x14, 0x48, 0x13, 0x52, 0x18, 0x65, 0x63, 0x6e, 0x59, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x15, 0x65, 0x63, 0x6e, 0x5f, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x15, 0x48, 0x14, 0x52, 0x12, 0x65, 0x63,
	0x6e, 0x52, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x15, 0x65, 0x63, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x16, 0x48, 0x15, 0x52, 0x12, 0x65, 0x63, 0x6e, 0x52,
	0x65, 0x64, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x18, 0x65, 0x63, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x17, 0x48, 0x16, 0x52, 0x15, 0x65, 0x63, 0x6e,
	0x52, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x1f, 0x65, 0x63, 0x6e, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x18, 0x48, 0x17, 0x52, 0x1b, 0x65, 0x63, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x55, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x1f, 0x65, 0x63, 0x6e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x19, 0x48, 0x18, 0x52, 0x1b, 0x65, 0x63, 0x6e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x55, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x22, 0x65, 0x63, 0x6e, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x1a, 0x48, 0x19, 0x52, 0x1e, 0x65, 0x63, 0x6e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65,
	0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x63,
	0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x65, 0x63, 0x6e, 0x5f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x65, 0x63, 0x6e, 0x5f,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42,
	0x1b, 0x0a, 0x19, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x1e, 0x0a, 0x1c,
	0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x22, 0x0a,
	0x20, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x75, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x1a, 0x0a, 0x18,
	0x53, 0x65, 0x74, 0x57, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57,
	0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x57, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x57, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0xe1, 0x07, 0x0a, 0x08, 0x57, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47,
	0x52, 0x45, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e,
	0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x47, 0x52,
	0x45, 0x45, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c,
	0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x42,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x52, 0x45,
	0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x54,
	0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x52,
	0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x07, 0x12, 0x25,
	0x0a, 0x21, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x59, 0x45, 0x4c, 0x4c,
	0x4f, 0x57, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x09, 0x12,
	0x1f, 0x0a, 0x1b, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x44,
	0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x0a,
	0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45,
	0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10,
	0x0b, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52,
	0x45, 0x44, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c,
	0x49, 0x54, 0x59, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0d, 0x12, 0x1b, 0x0a, 0x17, 0x57,
	0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0e, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x52, 0x45, 0x44,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f,
	0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x0f, 0x12,
	0x25, 0x0a, 0x21, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4e,
	0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53,
	0x48, 0x4f, 0x4c, 0x44, 0x10, 0x10, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x11,
	0x12, 0x26, 0x0a, 0x22, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43,
	0x4e, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x52,
	0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x12, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x52, 0x45, 0x44,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x13,
	0x12, 0x29, 0x0a, 0x25, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43,
	0x4e, 0x5f, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x50, 0x52,
	0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x14, 0x12, 0x23, 0x0a, 0x1f, 0x57,
	0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x52, 0x45, 0x44,
	0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x15,
	0x12, 0x23, 0x0a, 0x1f, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43,
	0x4e, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48,
	0x4f, 0x4c, 0x44, 0x10, 0x16, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x52, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f,
	0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x17, 0x12, 0x2d, 0x0a,
	0x29, 0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x43,
	0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x49, 0x4e,
	0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x18, 0x12, 0x2d, 0x0a, 0x29,
	0x57, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x19, 0x12, 0x30, 0x0a, 0x2c, 0x57,
	0x52, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x43, 0x4f, 0x4c,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f,
	0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x1a, 0x32, 0xbe, 0x03,
	0x0a, 0x04, 0x57, 0x72, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x72, 0x65, 0x64, 0x12, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0a, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x72, 0x65, 0x64, 0x12, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x57, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x57, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74,
	0x57, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74,
	0x57, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x72,
	0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x72, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b,
	0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_proto_wred_proto_rawDescOnce sync.Once
	file_dataplane_proto_wred_proto_rawDescData = file_dataplane_proto_wred_proto_rawDesc
)

func file_dataplane_proto_wred_proto_rawDescGZIP() []byte {
	file_dataplane_proto_wred_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_wred_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_wred_proto_rawDescData)
	})
	return file_dataplane_proto_wred_proto_rawDescData
}

var file_dataplane_proto_wred_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_proto_wred_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dataplane_proto_wred_proto_goTypes = []interface{}{
	(WredAttr)(0),                    // 0: lemming.dataplane.sai.WredAttr
	(*CreateWredRequest)(nil),        // 1: lemming.dataplane.sai.CreateWredRequest
	(*CreateWredResponse)(nil),       // 2: lemming.dataplane.sai.CreateWredResponse
	(*RemoveWredRequest)(nil),        // 3: lemming.dataplane.sai.RemoveWredRequest
	(*RemoveWredResponse)(nil),       // 4: lemming.dataplane.sai.RemoveWredResponse
	(*SetWredAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetWredAttributeRequest
	(*SetWredAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetWredAttributeResponse
	(*GetWredAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetWredAttributeRequest
	(*GetWredAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetWredAttributeResponse
	(EcnMarkMode)(0),                 // 9: lemming.dataplane.sai.EcnMarkMode
	(*WredAttribute)(nil),            // 10: lemming.dataplane.sai.WredAttribute
}
var file_dataplane_proto_wred_proto_depIdxs = []int32{
	9,  // 0: lemming.dataplane.sai.CreateWredRequest.ecn_mark_mode:type_name -> lemming.dataplane.sai.EcnMarkMode
	9,  // 1: lemming.dataplane.sai.SetWredAttributeRequest.ecn_mark_mode:type_name -> lemming.dataplane.sai.EcnMarkMode
	0,  // 2: lemming.dataplane.sai.GetWredAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.WredAttr
	10, // 3: lemming.dataplane.sai.GetWredAttributeResponse.attr:type_name -> lemming.dataplane.sai.WredAttribute
	1,  // 4: lemming.dataplane.sai.Wred.CreateWred:input_type -> lemming.dataplane.sai.CreateWredRequest
	3,  // 5: lemming.dataplane.sai.Wred.RemoveWred:input_type -> lemming.dataplane.sai.RemoveWredRequest
	5,  // 6: lemming.dataplane.sai.Wred.SetWredAttribute:input_type -> lemming.dataplane.sai.SetWredAttributeRequest
	7,  // 7: lemming.dataplane.sai.Wred.GetWredAttribute:input_type -> lemming.dataplane.sai.GetWredAttributeRequest
	2,  // 8: lemming.dataplane.sai.Wred.CreateWred:output_type -> lemming.dataplane.sai.CreateWredResponse
	4,  // 9: lemming.dataplane.sai.Wred.RemoveWred:output_type -> lemming.dataplane.sai.RemoveWredResponse
	6,  // 10: lemming.dataplane.sai.Wred.SetWredAttribute:output_type -> lemming.dataplane.sai.SetWredAttributeResponse
	8,  // 11: lemming.dataplane.sai.Wred.GetWredAttribute:output_type -> lemming.dataplane.sai.GetWredAttributeResponse
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_dataplane_proto_wred_proto_init() }
func file_dataplane_proto_wred_proto_init() {
	if File_dataplane_proto_wred_proto != nil {
		return
	}
	file_dataplane_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_wred_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_wred_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWredResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_wred_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveWredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_wred_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveWredResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_wred_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWredAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_wred_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetWredAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_wred_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWredAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_wred_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWredAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_wred_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_proto_wred_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_wred_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_wred_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_wred_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_wred_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_wred_proto_msgTypes,
	}.Build()
	File_dataplane_proto_wred_proto = out.File
	file_dataplane_proto_wred_proto_rawDesc = nil
	file_dataplane_proto_wred_proto_goTypes = nil
	file_dataplane_proto_wred_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WredClient is the client API for Wred service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WredClient interface {
	CreateWred(ctx context.Context, in *CreateWredRequest, opts ...grpc.CallOption) (*CreateWredResponse, error)
	RemoveWred(ctx context.Context, in *RemoveWredRequest, opts ...grpc.CallOption) (*RemoveWredResponse, error)
	SetWredAttribute(ctx context.Context, in *SetWredAttributeRequest, opts ...grpc.CallOption) (*SetWredAttributeResponse, error)
	GetWredAttribute(ctx context.Context, in *GetWredAttributeRequest, opts ...grpc.CallOption) (*GetWredAttributeResponse, error)
}

type wredClient struct {
	cc grpc.ClientConnInterface
}

func NewWredClient(cc grpc.ClientConnInterface) WredClient {
	return &wredClient{cc}
}

func (c *wredClient) CreateWred(ctx context.Context, in *CreateWredRequest, opts ...grpc.CallOption) (*CreateWredResponse, error) {
	out := new(CreateWredResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Wred/CreateWred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wredClient) RemoveWred(ctx context.Context, in *RemoveWredRequest, opts ...grpc.CallOption) (*RemoveWredResponse, error) {
	out := new(RemoveWredResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Wred/RemoveWred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wredClient) SetWredAttribute(ctx context.Context, in *SetWredAttributeRequest, opts ...grpc.CallOption) (*SetWredAttributeResponse, error) {
	out := new(SetWredAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Wred/SetWredAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wredClient) GetWredAttribute(ctx context.Context, in *GetWredAttributeRequest, opts ...grpc.CallOption) (*GetWredAttributeResponse, error) {
	out := new(GetWredAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Wred/GetWredAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WredServer is the server API for Wred service.
type WredServer interface {
	CreateWred(context.Context, *CreateWredRequest) (*CreateWredResponse, error)
	RemoveWred(context.Context, *RemoveWredRequest) (*RemoveWredResponse, error)
	SetWredAttribute(context.Context, *SetWredAttributeRequest) (*SetWredAttributeResponse, error)
	GetWredAttribute(context.Context, *GetWredAttributeRequest) (*GetWredAttributeResponse, error)
}

// UnimplementedWredServer can be embedded to have forward compatible implementations.
type UnimplementedWredServer struct {
}

func (*UnimplementedWredServer) CreateWred(context.Context, *CreateWredRequest) (*CreateWredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWred not implemented")
}
func (*UnimplementedWredServer) RemoveWred(context.Context, *RemoveWredRequest) (*RemoveWredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWred not implemented")
}
func (*UnimplementedWredServer) SetWredAttribute(context.Context, *SetWredAttributeRequest) (*SetWredAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWredAttribute not implemented")
}
func (*UnimplementedWredServer) GetWredAttribute(context.Context, *GetWredAttributeRequest) (*GetWredAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWredAttribute not implemented")
}

func RegisterWredServer(s *grpc.Server, srv WredServer) {
	s.RegisterService(&_Wred_serviceDesc, srv)
}

func _Wred_CreateWred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WredServer).CreateWred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Wred/CreateWred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WredServer).CreateWred(ctx, req.(*CreateWredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wred_RemoveWred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WredServer).RemoveWred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Wred/RemoveWred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WredServer).RemoveWred(ctx, req.(*RemoveWredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wred_SetWredAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWredAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WredServer).SetWredAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Wred/SetWredAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WredServer).SetWredAttribute(ctx, req.(*SetWredAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wred_GetWredAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWredAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WredServer).GetWredAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Wred/GetWredAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WredServer).GetWredAttribute(ctx, req.(*GetWredAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wred_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Wred",
	HandlerType: (*WredServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWred",
			Handler:    _Wred_CreateWred_Handler,
		},
		{
			MethodName: "RemoveWred",
			Handler:    _Wred_RemoveWred_Handler,
		},
		{
			MethodName: "SetWredAttribute",
			Handler:    _Wred_SetWredAttribute_Handler,
		},
		{
			MethodName: "GetWredAttribute",
			Handler:    _Wred_GetWredAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/wred.proto",
}
