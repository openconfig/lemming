// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/proto/next_hop.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NextHopAttr int32

const (
	NextHopAttr_NEXT_HOP_ATTR_UNSPECIFIED                      NextHopAttr = 0
	NextHopAttr_NEXT_HOP_ATTR_TYPE                             NextHopAttr = 1
	NextHopAttr_NEXT_HOP_ATTR_IP                               NextHopAttr = 2
	NextHopAttr_NEXT_HOP_ATTR_ROUTER_INTERFACE_ID              NextHopAttr = 3
	NextHopAttr_NEXT_HOP_ATTR_TUNNEL_ID                        NextHopAttr = 4
	NextHopAttr_NEXT_HOP_ATTR_TUNNEL_VNI                       NextHopAttr = 5
	NextHopAttr_NEXT_HOP_ATTR_TUNNEL_MAC                       NextHopAttr = 6
	NextHopAttr_NEXT_HOP_ATTR_SRV6_SIDLIST_ID                  NextHopAttr = 7
	NextHopAttr_NEXT_HOP_ATTR_LABELSTACK                       NextHopAttr = 8
	NextHopAttr_NEXT_HOP_ATTR_COUNTER_ID                       NextHopAttr = 9
	NextHopAttr_NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL            NextHopAttr = 10
	NextHopAttr_NEXT_HOP_ATTR_OUTSEG_TYPE                      NextHopAttr = 11
	NextHopAttr_NEXT_HOP_ATTR_OUTSEG_TTL_MODE                  NextHopAttr = 12
	NextHopAttr_NEXT_HOP_ATTR_OUTSEG_TTL_VALUE                 NextHopAttr = 13
	NextHopAttr_NEXT_HOP_ATTR_OUTSEG_EXP_MODE                  NextHopAttr = 14
	NextHopAttr_NEXT_HOP_ATTR_OUTSEG_EXP_VALUE                 NextHopAttr = 15
	NextHopAttr_NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP NextHopAttr = 16
)

// Enum value maps for NextHopAttr.
var (
	NextHopAttr_name = map[int32]string{
		0:  "NEXT_HOP_ATTR_UNSPECIFIED",
		1:  "NEXT_HOP_ATTR_TYPE",
		2:  "NEXT_HOP_ATTR_IP",
		3:  "NEXT_HOP_ATTR_ROUTER_INTERFACE_ID",
		4:  "NEXT_HOP_ATTR_TUNNEL_ID",
		5:  "NEXT_HOP_ATTR_TUNNEL_VNI",
		6:  "NEXT_HOP_ATTR_TUNNEL_MAC",
		7:  "NEXT_HOP_ATTR_SRV6_SIDLIST_ID",
		8:  "NEXT_HOP_ATTR_LABELSTACK",
		9:  "NEXT_HOP_ATTR_COUNTER_ID",
		10: "NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL",
		11: "NEXT_HOP_ATTR_OUTSEG_TYPE",
		12: "NEXT_HOP_ATTR_OUTSEG_TTL_MODE",
		13: "NEXT_HOP_ATTR_OUTSEG_TTL_VALUE",
		14: "NEXT_HOP_ATTR_OUTSEG_EXP_MODE",
		15: "NEXT_HOP_ATTR_OUTSEG_EXP_VALUE",
		16: "NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP",
	}
	NextHopAttr_value = map[string]int32{
		"NEXT_HOP_ATTR_UNSPECIFIED":                      0,
		"NEXT_HOP_ATTR_TYPE":                             1,
		"NEXT_HOP_ATTR_IP":                               2,
		"NEXT_HOP_ATTR_ROUTER_INTERFACE_ID":              3,
		"NEXT_HOP_ATTR_TUNNEL_ID":                        4,
		"NEXT_HOP_ATTR_TUNNEL_VNI":                       5,
		"NEXT_HOP_ATTR_TUNNEL_MAC":                       6,
		"NEXT_HOP_ATTR_SRV6_SIDLIST_ID":                  7,
		"NEXT_HOP_ATTR_LABELSTACK":                       8,
		"NEXT_HOP_ATTR_COUNTER_ID":                       9,
		"NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL":            10,
		"NEXT_HOP_ATTR_OUTSEG_TYPE":                      11,
		"NEXT_HOP_ATTR_OUTSEG_TTL_MODE":                  12,
		"NEXT_HOP_ATTR_OUTSEG_TTL_VALUE":                 13,
		"NEXT_HOP_ATTR_OUTSEG_EXP_MODE":                  14,
		"NEXT_HOP_ATTR_OUTSEG_EXP_VALUE":                 15,
		"NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP": 16,
	}
)

func (x NextHopAttr) Enum() *NextHopAttr {
	p := new(NextHopAttr)
	*p = x
	return p
}

func (x NextHopAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHopAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_next_hop_proto_enumTypes[0].Descriptor()
}

func (NextHopAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_next_hop_proto_enumTypes[0]
}

func (x NextHopAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHopAttr.Descriptor instead.
func (NextHopAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_next_hop_proto_rawDescGZIP(), []int{0}
}

type CreateNextHopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                    uint64         `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type                      *NextHopType   `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.NextHopType,oneof" json:"type,omitempty"`
	Ip                        []byte         `protobuf:"bytes,3,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
	RouterInterfaceId         *uint64        `protobuf:"varint,4,opt,name=router_interface_id,json=routerInterfaceId,proto3,oneof" json:"router_interface_id,omitempty"`
	TunnelId                  *uint64        `protobuf:"varint,5,opt,name=tunnel_id,json=tunnelId,proto3,oneof" json:"tunnel_id,omitempty"`
	TunnelVni                 *uint32        `protobuf:"varint,6,opt,name=tunnel_vni,json=tunnelVni,proto3,oneof" json:"tunnel_vni,omitempty"`
	TunnelMac                 []byte         `protobuf:"bytes,7,opt,name=tunnel_mac,json=tunnelMac,proto3,oneof" json:"tunnel_mac,omitempty"`
	Srv6SidlistId             *uint64        `protobuf:"varint,8,opt,name=srv6_sidlist_id,json=srv6SidlistId,proto3,oneof" json:"srv6_sidlist_id,omitempty"`
	Labelstack                []uint32       `protobuf:"varint,9,rep,packed,name=labelstack,proto3" json:"labelstack,omitempty"`
	CounterId                 *uint64        `protobuf:"varint,10,opt,name=counter_id,json=counterId,proto3,oneof" json:"counter_id,omitempty"`
	DisableDecrementTtl       *bool          `protobuf:"varint,11,opt,name=disable_decrement_ttl,json=disableDecrementTtl,proto3,oneof" json:"disable_decrement_ttl,omitempty"`
	OutsegType                *OutsegType    `protobuf:"varint,12,opt,name=outseg_type,json=outsegType,proto3,enum=lemming.dataplane.sai.OutsegType,oneof" json:"outseg_type,omitempty"`
	OutsegTtlMode             *OutsegTtlMode `protobuf:"varint,13,opt,name=outseg_ttl_mode,json=outsegTtlMode,proto3,enum=lemming.dataplane.sai.OutsegTtlMode,oneof" json:"outseg_ttl_mode,omitempty"`
	OutsegTtlValue            *uint32        `protobuf:"varint,14,opt,name=outseg_ttl_value,json=outsegTtlValue,proto3,oneof" json:"outseg_ttl_value,omitempty"`
	OutsegExpMode             *OutsegExpMode `protobuf:"varint,15,opt,name=outseg_exp_mode,json=outsegExpMode,proto3,enum=lemming.dataplane.sai.OutsegExpMode,oneof" json:"outseg_exp_mode,omitempty"`
	OutsegExpValue            *uint32        `protobuf:"varint,16,opt,name=outseg_exp_value,json=outsegExpValue,proto3,oneof" json:"outseg_exp_value,omitempty"`
	QosTcAndColorToMplsExpMap *uint64        `protobuf:"varint,17,opt,name=qos_tc_and_color_to_mpls_exp_map,json=qosTcAndColorToMplsExpMap,proto3,oneof" json:"qos_tc_and_color_to_mpls_exp_map,omitempty"`
}

func (x *CreateNextHopRequest) Reset() {
	*x = CreateNextHopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_next_hop_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNextHopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopRequest) ProtoMessage() {}

func (x *CreateNextHopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_next_hop_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopRequest.ProtoReflect.Descriptor instead.
func (*CreateNextHopRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_next_hop_proto_rawDescGZIP(), []int{0}
}

func (x *CreateNextHopRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateNextHopRequest) GetType() NextHopType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return NextHopType_NEXT_HOP_TYPE_UNSPECIFIED
}

func (x *CreateNextHopRequest) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *CreateNextHopRequest) GetRouterInterfaceId() uint64 {
	if x != nil && x.RouterInterfaceId != nil {
		return *x.RouterInterfaceId
	}
	return 0
}

func (x *CreateNextHopRequest) GetTunnelId() uint64 {
	if x != nil && x.TunnelId != nil {
		return *x.TunnelId
	}
	return 0
}

func (x *CreateNextHopRequest) GetTunnelVni() uint32 {
	if x != nil && x.TunnelVni != nil {
		return *x.TunnelVni
	}
	return 0
}

func (x *CreateNextHopRequest) GetTunnelMac() []byte {
	if x != nil {
		return x.TunnelMac
	}
	return nil
}

func (x *CreateNextHopRequest) GetSrv6SidlistId() uint64 {
	if x != nil && x.Srv6SidlistId != nil {
		return *x.Srv6SidlistId
	}
	return 0
}

func (x *CreateNextHopRequest) GetLabelstack() []uint32 {
	if x != nil {
		return x.Labelstack
	}
	return nil
}

func (x *CreateNextHopRequest) GetCounterId() uint64 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

func (x *CreateNextHopRequest) GetDisableDecrementTtl() bool {
	if x != nil && x.DisableDecrementTtl != nil {
		return *x.DisableDecrementTtl
	}
	return false
}

func (x *CreateNextHopRequest) GetOutsegType() OutsegType {
	if x != nil && x.OutsegType != nil {
		return *x.OutsegType
	}
	return OutsegType_OUTSEG_TYPE_UNSPECIFIED
}

func (x *CreateNextHopRequest) GetOutsegTtlMode() OutsegTtlMode {
	if x != nil && x.OutsegTtlMode != nil {
		return *x.OutsegTtlMode
	}
	return OutsegTtlMode_OUTSEG_TTL_MODE_UNSPECIFIED
}

func (x *CreateNextHopRequest) GetOutsegTtlValue() uint32 {
	if x != nil && x.OutsegTtlValue != nil {
		return *x.OutsegTtlValue
	}
	return 0
}

func (x *CreateNextHopRequest) GetOutsegExpMode() OutsegExpMode {
	if x != nil && x.OutsegExpMode != nil {
		return *x.OutsegExpMode
	}
	return OutsegExpMode_OUTSEG_EXP_MODE_UNSPECIFIED
}

func (x *CreateNextHopRequest) GetOutsegExpValue() uint32 {
	if x != nil && x.OutsegExpValue != nil {
		return *x.OutsegExpValue
	}
	return 0
}

func (x *CreateNextHopRequest) GetQosTcAndColorToMplsExpMap() uint64 {
	if x != nil && x.QosTcAndColorToMplsExpMap != nil {
		return *x.QosTcAndColorToMplsExpMap
	}
	return 0
}

type CreateNextHopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateNextHopResponse) Reset() {
	*x = CreateNextHopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_next_hop_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNextHopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopResponse) ProtoMessage() {}

func (x *CreateNextHopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_next_hop_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopResponse.ProtoReflect.Descriptor instead.
func (*CreateNextHopResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_next_hop_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNextHopResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveNextHopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveNextHopRequest) Reset() {
	*x = RemoveNextHopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_next_hop_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNextHopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNextHopRequest) ProtoMessage() {}

func (x *RemoveNextHopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_next_hop_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNextHopRequest.ProtoReflect.Descriptor instead.
func (*RemoveNextHopRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_next_hop_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveNextHopRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveNextHopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveNextHopResponse) Reset() {
	*x = RemoveNextHopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_next_hop_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveNextHopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveNextHopResponse) ProtoMessage() {}

func (x *RemoveNextHopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_next_hop_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveNextHopResponse.ProtoReflect.Descriptor instead.
func (*RemoveNextHopResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_next_hop_proto_rawDescGZIP(), []int{3}
}

type SetNextHopAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                       uint64         `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	TunnelVni                 *uint32        `protobuf:"varint,2,opt,name=tunnel_vni,json=tunnelVni,proto3,oneof" json:"tunnel_vni,omitempty"`
	TunnelMac                 []byte         `protobuf:"bytes,3,opt,name=tunnel_mac,json=tunnelMac,proto3,oneof" json:"tunnel_mac,omitempty"`
	CounterId                 *uint64        `protobuf:"varint,4,opt,name=counter_id,json=counterId,proto3,oneof" json:"counter_id,omitempty"`
	DisableDecrementTtl       *bool          `protobuf:"varint,5,opt,name=disable_decrement_ttl,json=disableDecrementTtl,proto3,oneof" json:"disable_decrement_ttl,omitempty"`
	OutsegType                *OutsegType    `protobuf:"varint,6,opt,name=outseg_type,json=outsegType,proto3,enum=lemming.dataplane.sai.OutsegType,oneof" json:"outseg_type,omitempty"`
	OutsegTtlMode             *OutsegTtlMode `protobuf:"varint,7,opt,name=outseg_ttl_mode,json=outsegTtlMode,proto3,enum=lemming.dataplane.sai.OutsegTtlMode,oneof" json:"outseg_ttl_mode,omitempty"`
	OutsegTtlValue            *uint32        `protobuf:"varint,8,opt,name=outseg_ttl_value,json=outsegTtlValue,proto3,oneof" json:"outseg_ttl_value,omitempty"`
	OutsegExpMode             *OutsegExpMode `protobuf:"varint,9,opt,name=outseg_exp_mode,json=outsegExpMode,proto3,enum=lemming.dataplane.sai.OutsegExpMode,oneof" json:"outseg_exp_mode,omitempty"`
	OutsegExpValue            *uint32        `protobuf:"varint,10,opt,name=outseg_exp_value,json=outsegExpValue,proto3,oneof" json:"outseg_exp_value,omitempty"`
	QosTcAndColorToMplsExpMap *uint64        `protobuf:"varint,11,opt,name=qos_tc_and_color_to_mpls_exp_map,json=qosTcAndColorToMplsExpMap,proto3,oneof" json:"qos_tc_and_color_to_mpls_exp_map,omitempty"`
}

func (x *SetNextHopAttributeRequest) Reset() {
	*x = SetNextHopAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_next_hop_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNextHopAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNextHopAttributeRequest) ProtoMessage() {}

func (x *SetNextHopAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_next_hop_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNextHopAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetNextHopAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_next_hop_proto_rawDescGZIP(), []int{4}
}

func (x *SetNextHopAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetNextHopAttributeRequest) GetTunnelVni() uint32 {
	if x != nil && x.TunnelVni != nil {
		return *x.TunnelVni
	}
	return 0
}

func (x *SetNextHopAttributeRequest) GetTunnelMac() []byte {
	if x != nil {
		return x.TunnelMac
	}
	return nil
}

func (x *SetNextHopAttributeRequest) GetCounterId() uint64 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

func (x *SetNextHopAttributeRequest) GetDisableDecrementTtl() bool {
	if x != nil && x.DisableDecrementTtl != nil {
		return *x.DisableDecrementTtl
	}
	return false
}

func (x *SetNextHopAttributeRequest) GetOutsegType() OutsegType {
	if x != nil && x.OutsegType != nil {
		return *x.OutsegType
	}
	return OutsegType_OUTSEG_TYPE_UNSPECIFIED
}

func (x *SetNextHopAttributeRequest) GetOutsegTtlMode() OutsegTtlMode {
	if x != nil && x.OutsegTtlMode != nil {
		return *x.OutsegTtlMode
	}
	return OutsegTtlMode_OUTSEG_TTL_MODE_UNSPECIFIED
}

func (x *SetNextHopAttributeRequest) GetOutsegTtlValue() uint32 {
	if x != nil && x.OutsegTtlValue != nil {
		return *x.OutsegTtlValue
	}
	return 0
}

func (x *SetNextHopAttributeRequest) GetOutsegExpMode() OutsegExpMode {
	if x != nil && x.OutsegExpMode != nil {
		return *x.OutsegExpMode
	}
	return OutsegExpMode_OUTSEG_EXP_MODE_UNSPECIFIED
}

func (x *SetNextHopAttributeRequest) GetOutsegExpValue() uint32 {
	if x != nil && x.OutsegExpValue != nil {
		return *x.OutsegExpValue
	}
	return 0
}

func (x *SetNextHopAttributeRequest) GetQosTcAndColorToMplsExpMap() uint64 {
	if x != nil && x.QosTcAndColorToMplsExpMap != nil {
		return *x.QosTcAndColorToMplsExpMap
	}
	return 0
}

type SetNextHopAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNextHopAttributeResponse) Reset() {
	*x = SetNextHopAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_next_hop_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNextHopAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNextHopAttributeResponse) ProtoMessage() {}

func (x *SetNextHopAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_next_hop_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNextHopAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetNextHopAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_next_hop_proto_rawDescGZIP(), []int{5}
}

type GetNextHopAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64        `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []NextHopAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.NextHopAttr" json:"attr_type,omitempty"`
}

func (x *GetNextHopAttributeRequest) Reset() {
	*x = GetNextHopAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_next_hop_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextHopAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextHopAttributeRequest) ProtoMessage() {}

func (x *GetNextHopAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_next_hop_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextHopAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetNextHopAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_next_hop_proto_rawDescGZIP(), []int{6}
}

func (x *GetNextHopAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetNextHopAttributeRequest) GetAttrType() []NextHopAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetNextHopAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *NextHopAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetNextHopAttributeResponse) Reset() {
	*x = GetNextHopAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_next_hop_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextHopAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextHopAttributeResponse) ProtoMessage() {}

func (x *GetNextHopAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_next_hop_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextHopAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetNextHopAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_next_hop_proto_rawDescGZIP(), []int{7}
}

func (x *GetNextHopAttributeResponse) GetAttr() *NextHopAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateNextHopsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reqs []*CreateNextHopRequest `protobuf:"bytes,1,rep,name=reqs,proto3" json:"reqs,omitempty"`
}

func (x *CreateNextHopsRequest) Reset() {
	*x = CreateNextHopsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_next_hop_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNextHopsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopsRequest) ProtoMessage() {}

func (x *CreateNextHopsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_next_hop_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopsRequest.ProtoReflect.Descriptor instead.
func (*CreateNextHopsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_next_hop_proto_rawDescGZIP(), []int{8}
}

func (x *CreateNextHopsRequest) GetReqs() []*CreateNextHopRequest {
	if x != nil {
		return x.Reqs
	}
	return nil
}

type CreateNextHopsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resps []*CreateNextHopResponse `protobuf:"bytes,1,rep,name=resps,proto3" json:"resps,omitempty"`
}

func (x *CreateNextHopsResponse) Reset() {
	*x = CreateNextHopsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_next_hop_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNextHopsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNextHopsResponse) ProtoMessage() {}

func (x *CreateNextHopsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_next_hop_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNextHopsResponse.ProtoReflect.Descriptor instead.
func (*CreateNextHopsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_next_hop_proto_rawDescGZIP(), []int{9}
}

func (x *CreateNextHopsResponse) GetResps() []*CreateNextHopResponse {
	if x != nil {
		return x.Resps
	}
	return nil
}

var File_dataplane_proto_next_hop_proto protoreflect.FileDescriptor

var file_dataplane_proto_next_hop_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x09, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x02, 0x69,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x48, 0x03, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x76, 0x6e, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x05, 0x48, 0x04, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x6e, 0x69, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x05, 0x52, 0x09, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0f, 0x73,
	0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x06, 0x52, 0x0d, 0x73, 0x72,
	0x76, 0x36, 0x53, 0x69, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x07,
	0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x0a, 0x48, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a,
	0x0b, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x65,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48, 0x09, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x73, 0x65, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0f,
	0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4f, 0x75,
	0x74, 0x73, 0x65, 0x67, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x0c, 0x48, 0x0a, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x54, 0x74, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f,
	0x74, 0x74, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x0b, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x54,
	0x74, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0f, 0x6f, 0x75,
	0x74, 0x73, 0x65, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x73,
	0x65, 0x67, 0x45, 0x78, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0e, 0x48,
	0x0c, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x45, 0x78, 0x70, 0x4d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x65, 0x78,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x0f, 0x48, 0x0d, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x45, 0x78, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x20, 0x71, 0x6f, 0x73, 0x5f,
	0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x10, 0x48, 0x0e, 0x52, 0x19, 0x71, 0x6f, 0x73, 0x54,
	0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x4d, 0x70, 0x6c, 0x73, 0x45,
	0x78, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x05, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x76, 0x6e, 0x69, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d,
	0x61, 0x63, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x72, 0x76, 0x36, 0x5f, 0x73, 0x69, 0x64, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x74,
	0x74, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x75, 0x74,
	0x73, 0x65, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65,
	0x78, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x22, 0x29, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x22, 0x28, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf4, 0x06, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x6e, 0x69, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x48, 0x01, 0x52, 0x09, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x09, 0x48, 0x02, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48, 0x03, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x74, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x4d, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x4f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b,
	0x48, 0x04, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x57, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x74, 0x74, 0x6c, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x05, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67,
	0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x6f, 0x75,
	0x74, 0x73, 0x65, 0x67, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x06, 0x52, 0x0e, 0x6f, 0x75,
	0x74, 0x73, 0x65, 0x67, 0x54, 0x74, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x57, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x4f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x45, 0x78, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x0e, 0x48, 0x07, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x45, 0x78,
	0x70, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x73,
	0x65, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0f, 0x48, 0x08, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x73,
	0x65, 0x67, 0x45, 0x78, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a,
	0x20, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x10, 0x48, 0x09, 0x52,
	0x19, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f,
	0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x6e, 0x69, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x74, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f,
	0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x75, 0x74,
	0x73, 0x65, 0x67, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x65, 0x67, 0x5f, 0x65, 0x78, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74,
	0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x22, 0x1d, 0x0a, 0x1b, 0x53,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x74,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x58, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x04, 0x72, 0x65, 0x71, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x72, 0x65, 0x71,
	0x73, 0x22, 0x5c, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x72,
	0x65, 0x73, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x72, 0x65, 0x73, 0x70, 0x73, 0x2a,
	0xc3, 0x04, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48,
	0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x49,
	0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x56, 0x4e, 0x49, 0x10, 0x05, 0x12, 0x1c,
	0x0a, 0x18, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x43, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x52,
	0x56, 0x36, 0x5f, 0x53, 0x49, 0x44, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x12,
	0x1c, 0x0a, 0x18, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x08, 0x12, 0x1c, 0x0a,
	0x18, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x4e,
	0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x54, 0x4c, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x0b, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x45, 0x47, 0x5f, 0x54, 0x54, 0x4c, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0c, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48,
	0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x45, 0x47, 0x5f, 0x54,
	0x54, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x55, 0x54, 0x53,
	0x45, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0e, 0x12, 0x22, 0x0a,
	0x1e, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f,
	0x55, 0x54, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x0f, 0x12, 0x32, 0x0a, 0x2e, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x54, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f,
	0x4d, 0x41, 0x50, 0x10, 0x10, 0x32, 0xd6, 0x04, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x12, 0x6c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x12, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6c, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x12, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x53, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x12,
	0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b,
	0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_proto_next_hop_proto_rawDescOnce sync.Once
	file_dataplane_proto_next_hop_proto_rawDescData = file_dataplane_proto_next_hop_proto_rawDesc
)

func file_dataplane_proto_next_hop_proto_rawDescGZIP() []byte {
	file_dataplane_proto_next_hop_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_next_hop_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_next_hop_proto_rawDescData)
	})
	return file_dataplane_proto_next_hop_proto_rawDescData
}

var file_dataplane_proto_next_hop_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_proto_next_hop_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_dataplane_proto_next_hop_proto_goTypes = []interface{}{
	(NextHopAttr)(0),                    // 0: lemming.dataplane.sai.NextHopAttr
	(*CreateNextHopRequest)(nil),        // 1: lemming.dataplane.sai.CreateNextHopRequest
	(*CreateNextHopResponse)(nil),       // 2: lemming.dataplane.sai.CreateNextHopResponse
	(*RemoveNextHopRequest)(nil),        // 3: lemming.dataplane.sai.RemoveNextHopRequest
	(*RemoveNextHopResponse)(nil),       // 4: lemming.dataplane.sai.RemoveNextHopResponse
	(*SetNextHopAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetNextHopAttributeRequest
	(*SetNextHopAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetNextHopAttributeResponse
	(*GetNextHopAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetNextHopAttributeRequest
	(*GetNextHopAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetNextHopAttributeResponse
	(*CreateNextHopsRequest)(nil),       // 9: lemming.dataplane.sai.CreateNextHopsRequest
	(*CreateNextHopsResponse)(nil),      // 10: lemming.dataplane.sai.CreateNextHopsResponse
	(NextHopType)(0),                    // 11: lemming.dataplane.sai.NextHopType
	(OutsegType)(0),                     // 12: lemming.dataplane.sai.OutsegType
	(OutsegTtlMode)(0),                  // 13: lemming.dataplane.sai.OutsegTtlMode
	(OutsegExpMode)(0),                  // 14: lemming.dataplane.sai.OutsegExpMode
	(*NextHopAttribute)(nil),            // 15: lemming.dataplane.sai.NextHopAttribute
}
var file_dataplane_proto_next_hop_proto_depIdxs = []int32{
	11, // 0: lemming.dataplane.sai.CreateNextHopRequest.type:type_name -> lemming.dataplane.sai.NextHopType
	12, // 1: lemming.dataplane.sai.CreateNextHopRequest.outseg_type:type_name -> lemming.dataplane.sai.OutsegType
	13, // 2: lemming.dataplane.sai.CreateNextHopRequest.outseg_ttl_mode:type_name -> lemming.dataplane.sai.OutsegTtlMode
	14, // 3: lemming.dataplane.sai.CreateNextHopRequest.outseg_exp_mode:type_name -> lemming.dataplane.sai.OutsegExpMode
	12, // 4: lemming.dataplane.sai.SetNextHopAttributeRequest.outseg_type:type_name -> lemming.dataplane.sai.OutsegType
	13, // 5: lemming.dataplane.sai.SetNextHopAttributeRequest.outseg_ttl_mode:type_name -> lemming.dataplane.sai.OutsegTtlMode
	14, // 6: lemming.dataplane.sai.SetNextHopAttributeRequest.outseg_exp_mode:type_name -> lemming.dataplane.sai.OutsegExpMode
	0,  // 7: lemming.dataplane.sai.GetNextHopAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.NextHopAttr
	15, // 8: lemming.dataplane.sai.GetNextHopAttributeResponse.attr:type_name -> lemming.dataplane.sai.NextHopAttribute
	1,  // 9: lemming.dataplane.sai.CreateNextHopsRequest.reqs:type_name -> lemming.dataplane.sai.CreateNextHopRequest
	2,  // 10: lemming.dataplane.sai.CreateNextHopsResponse.resps:type_name -> lemming.dataplane.sai.CreateNextHopResponse
	1,  // 11: lemming.dataplane.sai.NextHop.CreateNextHop:input_type -> lemming.dataplane.sai.CreateNextHopRequest
	3,  // 12: lemming.dataplane.sai.NextHop.RemoveNextHop:input_type -> lemming.dataplane.sai.RemoveNextHopRequest
	5,  // 13: lemming.dataplane.sai.NextHop.SetNextHopAttribute:input_type -> lemming.dataplane.sai.SetNextHopAttributeRequest
	7,  // 14: lemming.dataplane.sai.NextHop.GetNextHopAttribute:input_type -> lemming.dataplane.sai.GetNextHopAttributeRequest
	9,  // 15: lemming.dataplane.sai.NextHop.CreateNextHops:input_type -> lemming.dataplane.sai.CreateNextHopsRequest
	2,  // 16: lemming.dataplane.sai.NextHop.CreateNextHop:output_type -> lemming.dataplane.sai.CreateNextHopResponse
	4,  // 17: lemming.dataplane.sai.NextHop.RemoveNextHop:output_type -> lemming.dataplane.sai.RemoveNextHopResponse
	6,  // 18: lemming.dataplane.sai.NextHop.SetNextHopAttribute:output_type -> lemming.dataplane.sai.SetNextHopAttributeResponse
	8,  // 19: lemming.dataplane.sai.NextHop.GetNextHopAttribute:output_type -> lemming.dataplane.sai.GetNextHopAttributeResponse
	10, // 20: lemming.dataplane.sai.NextHop.CreateNextHops:output_type -> lemming.dataplane.sai.CreateNextHopsResponse
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_dataplane_proto_next_hop_proto_init() }
func file_dataplane_proto_next_hop_proto_init() {
	if File_dataplane_proto_next_hop_proto != nil {
		return
	}
	file_dataplane_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_next_hop_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNextHopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_next_hop_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNextHopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_next_hop_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNextHopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_next_hop_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveNextHopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_next_hop_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNextHopAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_next_hop_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNextHopAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_next_hop_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextHopAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_next_hop_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextHopAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_next_hop_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNextHopsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_next_hop_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNextHopsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_next_hop_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_proto_next_hop_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_next_hop_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_next_hop_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_next_hop_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_next_hop_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_next_hop_proto_msgTypes,
	}.Build()
	File_dataplane_proto_next_hop_proto = out.File
	file_dataplane_proto_next_hop_proto_rawDesc = nil
	file_dataplane_proto_next_hop_proto_goTypes = nil
	file_dataplane_proto_next_hop_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NextHopClient is the client API for NextHop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NextHopClient interface {
	CreateNextHop(ctx context.Context, in *CreateNextHopRequest, opts ...grpc.CallOption) (*CreateNextHopResponse, error)
	RemoveNextHop(ctx context.Context, in *RemoveNextHopRequest, opts ...grpc.CallOption) (*RemoveNextHopResponse, error)
	SetNextHopAttribute(ctx context.Context, in *SetNextHopAttributeRequest, opts ...grpc.CallOption) (*SetNextHopAttributeResponse, error)
	GetNextHopAttribute(ctx context.Context, in *GetNextHopAttributeRequest, opts ...grpc.CallOption) (*GetNextHopAttributeResponse, error)
	CreateNextHops(ctx context.Context, in *CreateNextHopsRequest, opts ...grpc.CallOption) (*CreateNextHopsResponse, error)
}

type nextHopClient struct {
	cc grpc.ClientConnInterface
}

func NewNextHopClient(cc grpc.ClientConnInterface) NextHopClient {
	return &nextHopClient{cc}
}

func (c *nextHopClient) CreateNextHop(ctx context.Context, in *CreateNextHopRequest, opts ...grpc.CallOption) (*CreateNextHopResponse, error) {
	out := new(CreateNextHopResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHop/CreateNextHop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopClient) RemoveNextHop(ctx context.Context, in *RemoveNextHopRequest, opts ...grpc.CallOption) (*RemoveNextHopResponse, error) {
	out := new(RemoveNextHopResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHop/RemoveNextHop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopClient) SetNextHopAttribute(ctx context.Context, in *SetNextHopAttributeRequest, opts ...grpc.CallOption) (*SetNextHopAttributeResponse, error) {
	out := new(SetNextHopAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHop/SetNextHopAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopClient) GetNextHopAttribute(ctx context.Context, in *GetNextHopAttributeRequest, opts ...grpc.CallOption) (*GetNextHopAttributeResponse, error) {
	out := new(GetNextHopAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHop/GetNextHopAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopClient) CreateNextHops(ctx context.Context, in *CreateNextHopsRequest, opts ...grpc.CallOption) (*CreateNextHopsResponse, error) {
	out := new(CreateNextHopsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.NextHop/CreateNextHops", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NextHopServer is the server API for NextHop service.
type NextHopServer interface {
	CreateNextHop(context.Context, *CreateNextHopRequest) (*CreateNextHopResponse, error)
	RemoveNextHop(context.Context, *RemoveNextHopRequest) (*RemoveNextHopResponse, error)
	SetNextHopAttribute(context.Context, *SetNextHopAttributeRequest) (*SetNextHopAttributeResponse, error)
	GetNextHopAttribute(context.Context, *GetNextHopAttributeRequest) (*GetNextHopAttributeResponse, error)
	CreateNextHops(context.Context, *CreateNextHopsRequest) (*CreateNextHopsResponse, error)
}

// UnimplementedNextHopServer can be embedded to have forward compatible implementations.
type UnimplementedNextHopServer struct {
}

func (*UnimplementedNextHopServer) CreateNextHop(context.Context, *CreateNextHopRequest) (*CreateNextHopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHop not implemented")
}
func (*UnimplementedNextHopServer) RemoveNextHop(context.Context, *RemoveNextHopRequest) (*RemoveNextHopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNextHop not implemented")
}
func (*UnimplementedNextHopServer) SetNextHopAttribute(context.Context, *SetNextHopAttributeRequest) (*SetNextHopAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextHopAttribute not implemented")
}
func (*UnimplementedNextHopServer) GetNextHopAttribute(context.Context, *GetNextHopAttributeRequest) (*GetNextHopAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHopAttribute not implemented")
}
func (*UnimplementedNextHopServer) CreateNextHops(context.Context, *CreateNextHopsRequest) (*CreateNextHopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHops not implemented")
}

func RegisterNextHopServer(s *grpc.Server, srv NextHopServer) {
	s.RegisterService(&_NextHop_serviceDesc, srv)
}

func _NextHop_CreateNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopServer).CreateNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHop/CreateNextHop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopServer).CreateNextHop(ctx, req.(*CreateNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHop_RemoveNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopServer).RemoveNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHop/RemoveNextHop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopServer).RemoveNextHop(ctx, req.(*RemoveNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHop_SetNextHopAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNextHopAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopServer).SetNextHopAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHop/SetNextHopAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopServer).SetNextHopAttribute(ctx, req.(*SetNextHopAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHop_GetNextHopAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopServer).GetNextHopAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHop/GetNextHopAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopServer).GetNextHopAttribute(ctx, req.(*GetNextHopAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHop_CreateNextHops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopServer).CreateNextHops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.NextHop/CreateNextHops",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopServer).CreateNextHops(ctx, req.(*CreateNextHopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NextHop_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.NextHop",
	HandlerType: (*NextHopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNextHop",
			Handler:    _NextHop_CreateNextHop_Handler,
		},
		{
			MethodName: "RemoveNextHop",
			Handler:    _NextHop_RemoveNextHop_Handler,
		},
		{
			MethodName: "SetNextHopAttribute",
			Handler:    _NextHop_SetNextHopAttribute_Handler,
		},
		{
			MethodName: "GetNextHopAttribute",
			Handler:    _NextHop_GetNextHopAttribute_Handler,
		},
		{
			MethodName: "CreateNextHops",
			Handler:    _NextHop_CreateNextHops_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/next_hop.proto",
}
