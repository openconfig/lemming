// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/proto/switch.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SwitchAttr int32

const (
	SwitchAttr_SWITCH_ATTR_UNSPECIFIED                                            SwitchAttr = 0
	SwitchAttr_SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS                                 SwitchAttr = 1
	SwitchAttr_SWITCH_ATTR_MAX_NUMBER_OF_SUPPORTED_PORTS                          SwitchAttr = 2
	SwitchAttr_SWITCH_ATTR_PORT_LIST                                              SwitchAttr = 3
	SwitchAttr_SWITCH_ATTR_PORT_MAX_MTU                                           SwitchAttr = 4
	SwitchAttr_SWITCH_ATTR_CPU_PORT                                               SwitchAttr = 5
	SwitchAttr_SWITCH_ATTR_MAX_VIRTUAL_ROUTERS                                    SwitchAttr = 6
	SwitchAttr_SWITCH_ATTR_FDB_TABLE_SIZE                                         SwitchAttr = 7
	SwitchAttr_SWITCH_ATTR_L3_NEIGHBOR_TABLE_SIZE                                 SwitchAttr = 8
	SwitchAttr_SWITCH_ATTR_L3_ROUTE_TABLE_SIZE                                    SwitchAttr = 9
	SwitchAttr_SWITCH_ATTR_LAG_MEMBERS                                            SwitchAttr = 10
	SwitchAttr_SWITCH_ATTR_NUMBER_OF_LAGS                                         SwitchAttr = 11
	SwitchAttr_SWITCH_ATTR_ECMP_MEMBERS                                           SwitchAttr = 12
	SwitchAttr_SWITCH_ATTR_NUMBER_OF_ECMP_GROUPS                                  SwitchAttr = 13
	SwitchAttr_SWITCH_ATTR_NUMBER_OF_UNICAST_QUEUES                               SwitchAttr = 14
	SwitchAttr_SWITCH_ATTR_NUMBER_OF_MULTICAST_QUEUES                             SwitchAttr = 15
	SwitchAttr_SWITCH_ATTR_NUMBER_OF_QUEUES                                       SwitchAttr = 16
	SwitchAttr_SWITCH_ATTR_NUMBER_OF_CPU_QUEUES                                   SwitchAttr = 17
	SwitchAttr_SWITCH_ATTR_ON_LINK_ROUTE_SUPPORTED                                SwitchAttr = 18
	SwitchAttr_SWITCH_ATTR_OPER_STATUS                                            SwitchAttr = 19
	SwitchAttr_SWITCH_ATTR_MAX_NUMBER_OF_TEMP_SENSORS                             SwitchAttr = 20
	SwitchAttr_SWITCH_ATTR_TEMP_LIST                                              SwitchAttr = 21
	SwitchAttr_SWITCH_ATTR_MAX_TEMP                                               SwitchAttr = 22
	SwitchAttr_SWITCH_ATTR_AVERAGE_TEMP                                           SwitchAttr = 23
	SwitchAttr_SWITCH_ATTR_ACL_TABLE_MINIMUM_PRIORITY                             SwitchAttr = 24
	SwitchAttr_SWITCH_ATTR_ACL_TABLE_MAXIMUM_PRIORITY                             SwitchAttr = 25
	SwitchAttr_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY                             SwitchAttr = 26
	SwitchAttr_SWITCH_ATTR_ACL_ENTRY_MAXIMUM_PRIORITY                             SwitchAttr = 27
	SwitchAttr_SWITCH_ATTR_ACL_TABLE_GROUP_MINIMUM_PRIORITY                       SwitchAttr = 28
	SwitchAttr_SWITCH_ATTR_ACL_TABLE_GROUP_MAXIMUM_PRIORITY                       SwitchAttr = 29
	SwitchAttr_SWITCH_ATTR_FDB_DST_USER_META_DATA_RANGE                           SwitchAttr = 30
	SwitchAttr_SWITCH_ATTR_ROUTE_DST_USER_META_DATA_RANGE                         SwitchAttr = 31
	SwitchAttr_SWITCH_ATTR_NEIGHBOR_DST_USER_META_DATA_RANGE                      SwitchAttr = 32
	SwitchAttr_SWITCH_ATTR_PORT_USER_META_DATA_RANGE                              SwitchAttr = 33
	SwitchAttr_SWITCH_ATTR_VLAN_USER_META_DATA_RANGE                              SwitchAttr = 34
	SwitchAttr_SWITCH_ATTR_ACL_USER_META_DATA_RANGE                               SwitchAttr = 35
	SwitchAttr_SWITCH_ATTR_ACL_USER_TRAP_ID_RANGE                                 SwitchAttr = 36
	SwitchAttr_SWITCH_ATTR_DEFAULT_VLAN_ID                                        SwitchAttr = 37
	SwitchAttr_SWITCH_ATTR_DEFAULT_STP_INST_ID                                    SwitchAttr = 38
	SwitchAttr_SWITCH_ATTR_MAX_STP_INSTANCE                                       SwitchAttr = 39
	SwitchAttr_SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID                              SwitchAttr = 40
	SwitchAttr_SWITCH_ATTR_DEFAULT_OVERRIDE_VIRTUAL_ROUTER_ID                     SwitchAttr = 41
	SwitchAttr_SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID                                   SwitchAttr = 42
	SwitchAttr_SWITCH_ATTR_INGRESS_ACL                                            SwitchAttr = 43
	SwitchAttr_SWITCH_ATTR_EGRESS_ACL                                             SwitchAttr = 44
	SwitchAttr_SWITCH_ATTR_QOS_MAX_NUMBER_OF_TRAFFIC_CLASSES                      SwitchAttr = 45
	SwitchAttr_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUP_HIERARCHY_LEVELS     SwitchAttr = 46
	SwitchAttr_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUPS_PER_HIERARCHY_LEVEL SwitchAttr = 47
	SwitchAttr_SWITCH_ATTR_QOS_MAX_NUMBER_OF_CHILDS_PER_SCHEDULER_GROUP           SwitchAttr = 48
	SwitchAttr_SWITCH_ATTR_TOTAL_BUFFER_SIZE                                      SwitchAttr = 49
	SwitchAttr_SWITCH_ATTR_INGRESS_BUFFER_POOL_NUM                                SwitchAttr = 50
	SwitchAttr_SWITCH_ATTR_EGRESS_BUFFER_POOL_NUM                                 SwitchAttr = 51
	SwitchAttr_SWITCH_ATTR_AVAILABLE_IPV4_ROUTE_ENTRY                             SwitchAttr = 52
	SwitchAttr_SWITCH_ATTR_AVAILABLE_IPV6_ROUTE_ENTRY                             SwitchAttr = 53
	SwitchAttr_SWITCH_ATTR_AVAILABLE_IPV4_NEXTHOP_ENTRY                           SwitchAttr = 54
	SwitchAttr_SWITCH_ATTR_AVAILABLE_IPV6_NEXTHOP_ENTRY                           SwitchAttr = 55
	SwitchAttr_SWITCH_ATTR_AVAILABLE_IPV4_NEIGHBOR_ENTRY                          SwitchAttr = 56
	SwitchAttr_SWITCH_ATTR_AVAILABLE_IPV6_NEIGHBOR_ENTRY                          SwitchAttr = 57
	SwitchAttr_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_ENTRY                         SwitchAttr = 58
	SwitchAttr_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_MEMBER_ENTRY                  SwitchAttr = 59
	SwitchAttr_SWITCH_ATTR_AVAILABLE_FDB_ENTRY                                    SwitchAttr = 60
	SwitchAttr_SWITCH_ATTR_AVAILABLE_L2MC_ENTRY                                   SwitchAttr = 61
	SwitchAttr_SWITCH_ATTR_AVAILABLE_IPMC_ENTRY                                   SwitchAttr = 62
	SwitchAttr_SWITCH_ATTR_AVAILABLE_SNAT_ENTRY                                   SwitchAttr = 63
	SwitchAttr_SWITCH_ATTR_AVAILABLE_DNAT_ENTRY                                   SwitchAttr = 64
	SwitchAttr_SWITCH_ATTR_AVAILABLE_DOUBLE_NAT_ENTRY                             SwitchAttr = 65
	SwitchAttr_SWITCH_ATTR_AVAILABLE_ACL_TABLE                                    SwitchAttr = 66
	SwitchAttr_SWITCH_ATTR_AVAILABLE_ACL_TABLE_GROUP                              SwitchAttr = 67
	SwitchAttr_SWITCH_ATTR_AVAILABLE_MY_SID_ENTRY                                 SwitchAttr = 68
	SwitchAttr_SWITCH_ATTR_DEFAULT_TRAP_GROUP                                     SwitchAttr = 69
	SwitchAttr_SWITCH_ATTR_ECMP_HASH                                              SwitchAttr = 70
	SwitchAttr_SWITCH_ATTR_LAG_HASH                                               SwitchAttr = 71
	SwitchAttr_SWITCH_ATTR_RESTART_WARM                                           SwitchAttr = 72
	SwitchAttr_SWITCH_ATTR_WARM_RECOVER                                           SwitchAttr = 73
	SwitchAttr_SWITCH_ATTR_RESTART_TYPE                                           SwitchAttr = 74
	SwitchAttr_SWITCH_ATTR_MIN_PLANNED_RESTART_INTERVAL                           SwitchAttr = 75
	SwitchAttr_SWITCH_ATTR_NV_STORAGE_SIZE                                        SwitchAttr = 76
	SwitchAttr_SWITCH_ATTR_MAX_ACL_ACTION_COUNT                                   SwitchAttr = 77
	SwitchAttr_SWITCH_ATTR_MAX_ACL_RANGE_COUNT                                    SwitchAttr = 78
	SwitchAttr_SWITCH_ATTR_ACL_CAPABILITY                                         SwitchAttr = 79
	SwitchAttr_SWITCH_ATTR_MCAST_SNOOPING_CAPABILITY                              SwitchAttr = 80
	SwitchAttr_SWITCH_ATTR_SWITCHING_MODE                                         SwitchAttr = 81
	SwitchAttr_SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE                                 SwitchAttr = 82
	SwitchAttr_SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE                                 SwitchAttr = 83
	SwitchAttr_SWITCH_ATTR_SRC_MAC_ADDRESS                                        SwitchAttr = 84
	SwitchAttr_SWITCH_ATTR_MAX_LEARNED_ADDRESSES                                  SwitchAttr = 85
	SwitchAttr_SWITCH_ATTR_FDB_AGING_TIME                                         SwitchAttr = 86
	SwitchAttr_SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION                         SwitchAttr = 87
	SwitchAttr_SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION                       SwitchAttr = 88
	SwitchAttr_SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION                       SwitchAttr = 89
	SwitchAttr_SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM                            SwitchAttr = 90
	SwitchAttr_SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED                                 SwitchAttr = 91
	SwitchAttr_SWITCH_ATTR_ECMP_DEFAULT_HASH_OFFSET                               SwitchAttr = 92
	SwitchAttr_SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH                            SwitchAttr = 93
	SwitchAttr_SWITCH_ATTR_ECMP_HASH_IPV4                                         SwitchAttr = 94
	SwitchAttr_SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4                                 SwitchAttr = 95
	SwitchAttr_SWITCH_ATTR_ECMP_HASH_IPV6                                         SwitchAttr = 96
	SwitchAttr_SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM                             SwitchAttr = 97
	SwitchAttr_SWITCH_ATTR_LAG_DEFAULT_HASH_SEED                                  SwitchAttr = 98
	SwitchAttr_SWITCH_ATTR_LAG_DEFAULT_HASH_OFFSET                                SwitchAttr = 99
	SwitchAttr_SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH                             SwitchAttr = 100
	SwitchAttr_SWITCH_ATTR_LAG_HASH_IPV4                                          SwitchAttr = 101
	SwitchAttr_SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4                                  SwitchAttr = 102
	SwitchAttr_SWITCH_ATTR_LAG_HASH_IPV6                                          SwitchAttr = 103
	SwitchAttr_SWITCH_ATTR_COUNTER_REFRESH_INTERVAL                               SwitchAttr = 104
	SwitchAttr_SWITCH_ATTR_QOS_DEFAULT_TC                                         SwitchAttr = 105
	SwitchAttr_SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP                                    SwitchAttr = 106
	SwitchAttr_SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP                                 SwitchAttr = 107
	SwitchAttr_SWITCH_ATTR_QOS_DSCP_TO_TC_MAP                                     SwitchAttr = 108
	SwitchAttr_SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP                                  SwitchAttr = 109
	SwitchAttr_SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP                                    SwitchAttr = 110
	SwitchAttr_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP                          SwitchAttr = 111
	SwitchAttr_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP                           SwitchAttr = 112
	SwitchAttr_SWITCH_ATTR_SWITCH_SHELL_ENABLE                                    SwitchAttr = 113
	SwitchAttr_SWITCH_ATTR_SWITCH_PROFILE_ID                                      SwitchAttr = 114
	SwitchAttr_SWITCH_ATTR_SWITCH_HARDWARE_INFO                                   SwitchAttr = 115
	SwitchAttr_SWITCH_ATTR_FIRMWARE_PATH_NAME                                     SwitchAttr = 116
	SwitchAttr_SWITCH_ATTR_INIT_SWITCH                                            SwitchAttr = 117
	SwitchAttr_SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY                             SwitchAttr = 118
	SwitchAttr_SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY                         SwitchAttr = 119
	SwitchAttr_SWITCH_ATTR_FDB_EVENT_NOTIFY                                       SwitchAttr = 120
	SwitchAttr_SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY                               SwitchAttr = 121
	SwitchAttr_SWITCH_ATTR_PACKET_EVENT_NOTIFY                                    SwitchAttr = 122
	SwitchAttr_SWITCH_ATTR_FAST_API_ENABLE                                        SwitchAttr = 123
	SwitchAttr_SWITCH_ATTR_MIRROR_TC                                              SwitchAttr = 124
	SwitchAttr_SWITCH_ATTR_ACL_STAGE_INGRESS                                      SwitchAttr = 125
	SwitchAttr_SWITCH_ATTR_ACL_STAGE_EGRESS                                       SwitchAttr = 126
	SwitchAttr_SWITCH_ATTR_SRV6_MAX_SID_DEPTH                                     SwitchAttr = 127
	SwitchAttr_SWITCH_ATTR_SRV6_TLV_TYPE                                          SwitchAttr = 128
	SwitchAttr_SWITCH_ATTR_QOS_NUM_LOSSLESS_QUEUES                                SwitchAttr = 129
	SwitchAttr_SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY                              SwitchAttr = 130
	SwitchAttr_SWITCH_ATTR_PFC_DLR_PACKET_ACTION                                  SwitchAttr = 131
	SwitchAttr_SWITCH_ATTR_PFC_TC_DLD_INTERVAL_RANGE                              SwitchAttr = 132
	SwitchAttr_SWITCH_ATTR_PFC_TC_DLD_INTERVAL                                    SwitchAttr = 133
	SwitchAttr_SWITCH_ATTR_PFC_TC_DLR_INTERVAL_RANGE                              SwitchAttr = 134
	SwitchAttr_SWITCH_ATTR_PFC_TC_DLR_INTERVAL                                    SwitchAttr = 135
	SwitchAttr_SWITCH_ATTR_SUPPORTED_PROTECTED_OBJECT_TYPE                        SwitchAttr = 136
	SwitchAttr_SWITCH_ATTR_TPID_OUTER_VLAN                                        SwitchAttr = 137
	SwitchAttr_SWITCH_ATTR_TPID_INNER_VLAN                                        SwitchAttr = 138
	SwitchAttr_SWITCH_ATTR_CRC_CHECK_ENABLE                                       SwitchAttr = 139
	SwitchAttr_SWITCH_ATTR_CRC_RECALCULATION_ENABLE                               SwitchAttr = 140
	SwitchAttr_SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY                        SwitchAttr = 141
	SwitchAttr_SWITCH_ATTR_NUMBER_OF_BFD_SESSION                                  SwitchAttr = 142
	SwitchAttr_SWITCH_ATTR_MAX_BFD_SESSION                                        SwitchAttr = 143
	SwitchAttr_SWITCH_ATTR_SUPPORTED_IPV4_BFD_SESSION_OFFLOAD_TYPE                SwitchAttr = 144
	SwitchAttr_SWITCH_ATTR_SUPPORTED_IPV6_BFD_SESSION_OFFLOAD_TYPE                SwitchAttr = 145
	SwitchAttr_SWITCH_ATTR_MIN_BFD_RX                                             SwitchAttr = 146
	SwitchAttr_SWITCH_ATTR_MIN_BFD_TX                                             SwitchAttr = 147
	SwitchAttr_SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE                               SwitchAttr = 148
	SwitchAttr_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC                               SwitchAttr = 149
	SwitchAttr_SWITCH_ATTR_VXLAN_DEFAULT_PORT                                     SwitchAttr = 150
	SwitchAttr_SWITCH_ATTR_MAX_MIRROR_SESSION                                     SwitchAttr = 151
	SwitchAttr_SWITCH_ATTR_MAX_SAMPLED_MIRROR_SESSION                             SwitchAttr = 152
	SwitchAttr_SWITCH_ATTR_SUPPORTED_EXTENDED_STATS_MODE                          SwitchAttr = 153
	SwitchAttr_SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL                           SwitchAttr = 154
	SwitchAttr_SWITCH_ATTR_TAM_OBJECT_ID                                          SwitchAttr = 155
	SwitchAttr_SWITCH_ATTR_TAM_EVENT_NOTIFY                                       SwitchAttr = 156
	SwitchAttr_SWITCH_ATTR_SUPPORTED_OBJECT_TYPE_LIST                             SwitchAttr = 157
	SwitchAttr_SWITCH_ATTR_PRE_SHUTDOWN                                           SwitchAttr = 158
	SwitchAttr_SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID                             SwitchAttr = 159
	SwitchAttr_SWITCH_ATTR_NAT_ENABLE                                             SwitchAttr = 160
	SwitchAttr_SWITCH_ATTR_HARDWARE_ACCESS_BUS                                    SwitchAttr = 161
	SwitchAttr_SWITCH_ATTR_PLATFROM_CONTEXT                                       SwitchAttr = 162
	SwitchAttr_SWITCH_ATTR_REGISTER_READ                                          SwitchAttr = 163
	SwitchAttr_SWITCH_ATTR_REGISTER_WRITE                                         SwitchAttr = 164
	SwitchAttr_SWITCH_ATTR_FIRMWARE_DOWNLOAD_BROADCAST                            SwitchAttr = 165
	SwitchAttr_SWITCH_ATTR_FIRMWARE_LOAD_METHOD                                   SwitchAttr = 166
	SwitchAttr_SWITCH_ATTR_FIRMWARE_LOAD_TYPE                                     SwitchAttr = 167
	SwitchAttr_SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE                              SwitchAttr = 168
	SwitchAttr_SWITCH_ATTR_FIRMWARE_BROADCAST_STOP                                SwitchAttr = 169
	SwitchAttr_SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH                        SwitchAttr = 170
	SwitchAttr_SWITCH_ATTR_FIRMWARE_STATUS                                        SwitchAttr = 171
	SwitchAttr_SWITCH_ATTR_FIRMWARE_MAJOR_VERSION                                 SwitchAttr = 172
	SwitchAttr_SWITCH_ATTR_FIRMWARE_MINOR_VERSION                                 SwitchAttr = 173
	SwitchAttr_SWITCH_ATTR_PORT_CONNECTOR_LIST                                    SwitchAttr = 174
	SwitchAttr_SWITCH_ATTR_PROPOGATE_PORT_STATE_FROM_LINE_TO_SYSTEM_PORT_SUPPORT  SwitchAttr = 175
	SwitchAttr_SWITCH_ATTR_TYPE                                                   SwitchAttr = 176
	SwitchAttr_SWITCH_ATTR_MACSEC_OBJECT_LIST                                     SwitchAttr = 177
	SwitchAttr_SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP                                 SwitchAttr = 178
	SwitchAttr_SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP                              SwitchAttr = 179
	SwitchAttr_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP                       SwitchAttr = 180
	SwitchAttr_SWITCH_ATTR_SWITCH_ID                                              SwitchAttr = 181
	SwitchAttr_SWITCH_ATTR_MAX_SYSTEM_CORES                                       SwitchAttr = 182
	SwitchAttr_SWITCH_ATTR_SYSTEM_PORT_CONFIG_LIST                                SwitchAttr = 183
	SwitchAttr_SWITCH_ATTR_NUMBER_OF_SYSTEM_PORTS                                 SwitchAttr = 184
	SwitchAttr_SWITCH_ATTR_SYSTEM_PORT_LIST                                       SwitchAttr = 185
	SwitchAttr_SWITCH_ATTR_NUMBER_OF_FABRIC_PORTS                                 SwitchAttr = 186
	SwitchAttr_SWITCH_ATTR_FABRIC_PORT_LIST                                       SwitchAttr = 187
	SwitchAttr_SWITCH_ATTR_PACKET_DMA_MEMORY_POOL_SIZE                            SwitchAttr = 188
	SwitchAttr_SWITCH_ATTR_FAILOVER_CONFIG_MODE                                   SwitchAttr = 189
	SwitchAttr_SWITCH_ATTR_SUPPORTED_FAILOVER_MODE                                SwitchAttr = 190
	SwitchAttr_SWITCH_ATTR_TUNNEL_OBJECTS_LIST                                    SwitchAttr = 191
	SwitchAttr_SWITCH_ATTR_PACKET_AVAILABLE_DMA_MEMORY_POOL_SIZE                  SwitchAttr = 192
	SwitchAttr_SWITCH_ATTR_PRE_INGRESS_ACL                                        SwitchAttr = 193
	SwitchAttr_SWITCH_ATTR_AVAILABLE_SNAPT_ENTRY                                  SwitchAttr = 194
	SwitchAttr_SWITCH_ATTR_AVAILABLE_DNAPT_ENTRY                                  SwitchAttr = 195
	SwitchAttr_SWITCH_ATTR_AVAILABLE_DOUBLE_NAPT_ENTRY                            SwitchAttr = 196
	SwitchAttr_SWITCH_ATTR_SLAVE_MDIO_ADDR_LIST                                   SwitchAttr = 197
	SwitchAttr_SWITCH_ATTR_MY_MAC_TABLE_MINIMUM_PRIORITY                          SwitchAttr = 198
	SwitchAttr_SWITCH_ATTR_MY_MAC_TABLE_MAXIMUM_PRIORITY                          SwitchAttr = 199
	SwitchAttr_SWITCH_ATTR_MY_MAC_LIST                                            SwitchAttr = 200
	SwitchAttr_SWITCH_ATTR_INSTALLED_MY_MAC_ENTRIES                               SwitchAttr = 201
	SwitchAttr_SWITCH_ATTR_AVAILABLE_MY_MAC_ENTRIES                               SwitchAttr = 202
	SwitchAttr_SWITCH_ATTR_MAX_NUMBER_OF_FORWARDING_CLASSES                       SwitchAttr = 203
	SwitchAttr_SWITCH_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP                       SwitchAttr = 204
	SwitchAttr_SWITCH_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP                   SwitchAttr = 205
	SwitchAttr_SWITCH_ATTR_IPSEC_OBJECT_ID                                        SwitchAttr = 206
	SwitchAttr_SWITCH_ATTR_IPSEC_SA_TAG_TPID                                      SwitchAttr = 207
	SwitchAttr_SWITCH_ATTR_IPSEC_SA_STATUS_CHANGE_NOTIFY                          SwitchAttr = 208
	SwitchAttr_SWITCH_ATTR_NAT_EVENT_NOTIFY                                       SwitchAttr = 209
	SwitchAttr_SWITCH_ATTR_MAX_ECMP_MEMBER_COUNT                                  SwitchAttr = 210
	SwitchAttr_SWITCH_ATTR_ECMP_MEMBER_COUNT                                      SwitchAttr = 211
)

// Enum value maps for SwitchAttr.
var (
	SwitchAttr_name = map[int32]string{
		0:   "SWITCH_ATTR_UNSPECIFIED",
		1:   "SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS",
		2:   "SWITCH_ATTR_MAX_NUMBER_OF_SUPPORTED_PORTS",
		3:   "SWITCH_ATTR_PORT_LIST",
		4:   "SWITCH_ATTR_PORT_MAX_MTU",
		5:   "SWITCH_ATTR_CPU_PORT",
		6:   "SWITCH_ATTR_MAX_VIRTUAL_ROUTERS",
		7:   "SWITCH_ATTR_FDB_TABLE_SIZE",
		8:   "SWITCH_ATTR_L3_NEIGHBOR_TABLE_SIZE",
		9:   "SWITCH_ATTR_L3_ROUTE_TABLE_SIZE",
		10:  "SWITCH_ATTR_LAG_MEMBERS",
		11:  "SWITCH_ATTR_NUMBER_OF_LAGS",
		12:  "SWITCH_ATTR_ECMP_MEMBERS",
		13:  "SWITCH_ATTR_NUMBER_OF_ECMP_GROUPS",
		14:  "SWITCH_ATTR_NUMBER_OF_UNICAST_QUEUES",
		15:  "SWITCH_ATTR_NUMBER_OF_MULTICAST_QUEUES",
		16:  "SWITCH_ATTR_NUMBER_OF_QUEUES",
		17:  "SWITCH_ATTR_NUMBER_OF_CPU_QUEUES",
		18:  "SWITCH_ATTR_ON_LINK_ROUTE_SUPPORTED",
		19:  "SWITCH_ATTR_OPER_STATUS",
		20:  "SWITCH_ATTR_MAX_NUMBER_OF_TEMP_SENSORS",
		21:  "SWITCH_ATTR_TEMP_LIST",
		22:  "SWITCH_ATTR_MAX_TEMP",
		23:  "SWITCH_ATTR_AVERAGE_TEMP",
		24:  "SWITCH_ATTR_ACL_TABLE_MINIMUM_PRIORITY",
		25:  "SWITCH_ATTR_ACL_TABLE_MAXIMUM_PRIORITY",
		26:  "SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY",
		27:  "SWITCH_ATTR_ACL_ENTRY_MAXIMUM_PRIORITY",
		28:  "SWITCH_ATTR_ACL_TABLE_GROUP_MINIMUM_PRIORITY",
		29:  "SWITCH_ATTR_ACL_TABLE_GROUP_MAXIMUM_PRIORITY",
		30:  "SWITCH_ATTR_FDB_DST_USER_META_DATA_RANGE",
		31:  "SWITCH_ATTR_ROUTE_DST_USER_META_DATA_RANGE",
		32:  "SWITCH_ATTR_NEIGHBOR_DST_USER_META_DATA_RANGE",
		33:  "SWITCH_ATTR_PORT_USER_META_DATA_RANGE",
		34:  "SWITCH_ATTR_VLAN_USER_META_DATA_RANGE",
		35:  "SWITCH_ATTR_ACL_USER_META_DATA_RANGE",
		36:  "SWITCH_ATTR_ACL_USER_TRAP_ID_RANGE",
		37:  "SWITCH_ATTR_DEFAULT_VLAN_ID",
		38:  "SWITCH_ATTR_DEFAULT_STP_INST_ID",
		39:  "SWITCH_ATTR_MAX_STP_INSTANCE",
		40:  "SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID",
		41:  "SWITCH_ATTR_DEFAULT_OVERRIDE_VIRTUAL_ROUTER_ID",
		42:  "SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID",
		43:  "SWITCH_ATTR_INGRESS_ACL",
		44:  "SWITCH_ATTR_EGRESS_ACL",
		45:  "SWITCH_ATTR_QOS_MAX_NUMBER_OF_TRAFFIC_CLASSES",
		46:  "SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUP_HIERARCHY_LEVELS",
		47:  "SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUPS_PER_HIERARCHY_LEVEL",
		48:  "SWITCH_ATTR_QOS_MAX_NUMBER_OF_CHILDS_PER_SCHEDULER_GROUP",
		49:  "SWITCH_ATTR_TOTAL_BUFFER_SIZE",
		50:  "SWITCH_ATTR_INGRESS_BUFFER_POOL_NUM",
		51:  "SWITCH_ATTR_EGRESS_BUFFER_POOL_NUM",
		52:  "SWITCH_ATTR_AVAILABLE_IPV4_ROUTE_ENTRY",
		53:  "SWITCH_ATTR_AVAILABLE_IPV6_ROUTE_ENTRY",
		54:  "SWITCH_ATTR_AVAILABLE_IPV4_NEXTHOP_ENTRY",
		55:  "SWITCH_ATTR_AVAILABLE_IPV6_NEXTHOP_ENTRY",
		56:  "SWITCH_ATTR_AVAILABLE_IPV4_NEIGHBOR_ENTRY",
		57:  "SWITCH_ATTR_AVAILABLE_IPV6_NEIGHBOR_ENTRY",
		58:  "SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_ENTRY",
		59:  "SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_MEMBER_ENTRY",
		60:  "SWITCH_ATTR_AVAILABLE_FDB_ENTRY",
		61:  "SWITCH_ATTR_AVAILABLE_L2MC_ENTRY",
		62:  "SWITCH_ATTR_AVAILABLE_IPMC_ENTRY",
		63:  "SWITCH_ATTR_AVAILABLE_SNAT_ENTRY",
		64:  "SWITCH_ATTR_AVAILABLE_DNAT_ENTRY",
		65:  "SWITCH_ATTR_AVAILABLE_DOUBLE_NAT_ENTRY",
		66:  "SWITCH_ATTR_AVAILABLE_ACL_TABLE",
		67:  "SWITCH_ATTR_AVAILABLE_ACL_TABLE_GROUP",
		68:  "SWITCH_ATTR_AVAILABLE_MY_SID_ENTRY",
		69:  "SWITCH_ATTR_DEFAULT_TRAP_GROUP",
		70:  "SWITCH_ATTR_ECMP_HASH",
		71:  "SWITCH_ATTR_LAG_HASH",
		72:  "SWITCH_ATTR_RESTART_WARM",
		73:  "SWITCH_ATTR_WARM_RECOVER",
		74:  "SWITCH_ATTR_RESTART_TYPE",
		75:  "SWITCH_ATTR_MIN_PLANNED_RESTART_INTERVAL",
		76:  "SWITCH_ATTR_NV_STORAGE_SIZE",
		77:  "SWITCH_ATTR_MAX_ACL_ACTION_COUNT",
		78:  "SWITCH_ATTR_MAX_ACL_RANGE_COUNT",
		79:  "SWITCH_ATTR_ACL_CAPABILITY",
		80:  "SWITCH_ATTR_MCAST_SNOOPING_CAPABILITY",
		81:  "SWITCH_ATTR_SWITCHING_MODE",
		82:  "SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE",
		83:  "SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE",
		84:  "SWITCH_ATTR_SRC_MAC_ADDRESS",
		85:  "SWITCH_ATTR_MAX_LEARNED_ADDRESSES",
		86:  "SWITCH_ATTR_FDB_AGING_TIME",
		87:  "SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION",
		88:  "SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION",
		89:  "SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION",
		90:  "SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM",
		91:  "SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED",
		92:  "SWITCH_ATTR_ECMP_DEFAULT_HASH_OFFSET",
		93:  "SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH",
		94:  "SWITCH_ATTR_ECMP_HASH_IPV4",
		95:  "SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4",
		96:  "SWITCH_ATTR_ECMP_HASH_IPV6",
		97:  "SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM",
		98:  "SWITCH_ATTR_LAG_DEFAULT_HASH_SEED",
		99:  "SWITCH_ATTR_LAG_DEFAULT_HASH_OFFSET",
		100: "SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH",
		101: "SWITCH_ATTR_LAG_HASH_IPV4",
		102: "SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4",
		103: "SWITCH_ATTR_LAG_HASH_IPV6",
		104: "SWITCH_ATTR_COUNTER_REFRESH_INTERVAL",
		105: "SWITCH_ATTR_QOS_DEFAULT_TC",
		106: "SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP",
		107: "SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP",
		108: "SWITCH_ATTR_QOS_DSCP_TO_TC_MAP",
		109: "SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP",
		110: "SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP",
		111: "SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP",
		112: "SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP",
		113: "SWITCH_ATTR_SWITCH_SHELL_ENABLE",
		114: "SWITCH_ATTR_SWITCH_PROFILE_ID",
		115: "SWITCH_ATTR_SWITCH_HARDWARE_INFO",
		116: "SWITCH_ATTR_FIRMWARE_PATH_NAME",
		117: "SWITCH_ATTR_INIT_SWITCH",
		118: "SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY",
		119: "SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY",
		120: "SWITCH_ATTR_FDB_EVENT_NOTIFY",
		121: "SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY",
		122: "SWITCH_ATTR_PACKET_EVENT_NOTIFY",
		123: "SWITCH_ATTR_FAST_API_ENABLE",
		124: "SWITCH_ATTR_MIRROR_TC",
		125: "SWITCH_ATTR_ACL_STAGE_INGRESS",
		126: "SWITCH_ATTR_ACL_STAGE_EGRESS",
		127: "SWITCH_ATTR_SRV6_MAX_SID_DEPTH",
		128: "SWITCH_ATTR_SRV6_TLV_TYPE",
		129: "SWITCH_ATTR_QOS_NUM_LOSSLESS_QUEUES",
		130: "SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY",
		131: "SWITCH_ATTR_PFC_DLR_PACKET_ACTION",
		132: "SWITCH_ATTR_PFC_TC_DLD_INTERVAL_RANGE",
		133: "SWITCH_ATTR_PFC_TC_DLD_INTERVAL",
		134: "SWITCH_ATTR_PFC_TC_DLR_INTERVAL_RANGE",
		135: "SWITCH_ATTR_PFC_TC_DLR_INTERVAL",
		136: "SWITCH_ATTR_SUPPORTED_PROTECTED_OBJECT_TYPE",
		137: "SWITCH_ATTR_TPID_OUTER_VLAN",
		138: "SWITCH_ATTR_TPID_INNER_VLAN",
		139: "SWITCH_ATTR_CRC_CHECK_ENABLE",
		140: "SWITCH_ATTR_CRC_RECALCULATION_ENABLE",
		141: "SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY",
		142: "SWITCH_ATTR_NUMBER_OF_BFD_SESSION",
		143: "SWITCH_ATTR_MAX_BFD_SESSION",
		144: "SWITCH_ATTR_SUPPORTED_IPV4_BFD_SESSION_OFFLOAD_TYPE",
		145: "SWITCH_ATTR_SUPPORTED_IPV6_BFD_SESSION_OFFLOAD_TYPE",
		146: "SWITCH_ATTR_MIN_BFD_RX",
		147: "SWITCH_ATTR_MIN_BFD_TX",
		148: "SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE",
		149: "SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC",
		150: "SWITCH_ATTR_VXLAN_DEFAULT_PORT",
		151: "SWITCH_ATTR_MAX_MIRROR_SESSION",
		152: "SWITCH_ATTR_MAX_SAMPLED_MIRROR_SESSION",
		153: "SWITCH_ATTR_SUPPORTED_EXTENDED_STATS_MODE",
		154: "SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL",
		155: "SWITCH_ATTR_TAM_OBJECT_ID",
		156: "SWITCH_ATTR_TAM_EVENT_NOTIFY",
		157: "SWITCH_ATTR_SUPPORTED_OBJECT_TYPE_LIST",
		158: "SWITCH_ATTR_PRE_SHUTDOWN",
		159: "SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID",
		160: "SWITCH_ATTR_NAT_ENABLE",
		161: "SWITCH_ATTR_HARDWARE_ACCESS_BUS",
		162: "SWITCH_ATTR_PLATFROM_CONTEXT",
		163: "SWITCH_ATTR_REGISTER_READ",
		164: "SWITCH_ATTR_REGISTER_WRITE",
		165: "SWITCH_ATTR_FIRMWARE_DOWNLOAD_BROADCAST",
		166: "SWITCH_ATTR_FIRMWARE_LOAD_METHOD",
		167: "SWITCH_ATTR_FIRMWARE_LOAD_TYPE",
		168: "SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE",
		169: "SWITCH_ATTR_FIRMWARE_BROADCAST_STOP",
		170: "SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH",
		171: "SWITCH_ATTR_FIRMWARE_STATUS",
		172: "SWITCH_ATTR_FIRMWARE_MAJOR_VERSION",
		173: "SWITCH_ATTR_FIRMWARE_MINOR_VERSION",
		174: "SWITCH_ATTR_PORT_CONNECTOR_LIST",
		175: "SWITCH_ATTR_PROPOGATE_PORT_STATE_FROM_LINE_TO_SYSTEM_PORT_SUPPORT",
		176: "SWITCH_ATTR_TYPE",
		177: "SWITCH_ATTR_MACSEC_OBJECT_LIST",
		178: "SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP",
		179: "SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP",
		180: "SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP",
		181: "SWITCH_ATTR_SWITCH_ID",
		182: "SWITCH_ATTR_MAX_SYSTEM_CORES",
		183: "SWITCH_ATTR_SYSTEM_PORT_CONFIG_LIST",
		184: "SWITCH_ATTR_NUMBER_OF_SYSTEM_PORTS",
		185: "SWITCH_ATTR_SYSTEM_PORT_LIST",
		186: "SWITCH_ATTR_NUMBER_OF_FABRIC_PORTS",
		187: "SWITCH_ATTR_FABRIC_PORT_LIST",
		188: "SWITCH_ATTR_PACKET_DMA_MEMORY_POOL_SIZE",
		189: "SWITCH_ATTR_FAILOVER_CONFIG_MODE",
		190: "SWITCH_ATTR_SUPPORTED_FAILOVER_MODE",
		191: "SWITCH_ATTR_TUNNEL_OBJECTS_LIST",
		192: "SWITCH_ATTR_PACKET_AVAILABLE_DMA_MEMORY_POOL_SIZE",
		193: "SWITCH_ATTR_PRE_INGRESS_ACL",
		194: "SWITCH_ATTR_AVAILABLE_SNAPT_ENTRY",
		195: "SWITCH_ATTR_AVAILABLE_DNAPT_ENTRY",
		196: "SWITCH_ATTR_AVAILABLE_DOUBLE_NAPT_ENTRY",
		197: "SWITCH_ATTR_SLAVE_MDIO_ADDR_LIST",
		198: "SWITCH_ATTR_MY_MAC_TABLE_MINIMUM_PRIORITY",
		199: "SWITCH_ATTR_MY_MAC_TABLE_MAXIMUM_PRIORITY",
		200: "SWITCH_ATTR_MY_MAC_LIST",
		201: "SWITCH_ATTR_INSTALLED_MY_MAC_ENTRIES",
		202: "SWITCH_ATTR_AVAILABLE_MY_MAC_ENTRIES",
		203: "SWITCH_ATTR_MAX_NUMBER_OF_FORWARDING_CLASSES",
		204: "SWITCH_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP",
		205: "SWITCH_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP",
		206: "SWITCH_ATTR_IPSEC_OBJECT_ID",
		207: "SWITCH_ATTR_IPSEC_SA_TAG_TPID",
		208: "SWITCH_ATTR_IPSEC_SA_STATUS_CHANGE_NOTIFY",
		209: "SWITCH_ATTR_NAT_EVENT_NOTIFY",
		210: "SWITCH_ATTR_MAX_ECMP_MEMBER_COUNT",
		211: "SWITCH_ATTR_ECMP_MEMBER_COUNT",
	}
	SwitchAttr_value = map[string]int32{
		"SWITCH_ATTR_UNSPECIFIED":                                            0,
		"SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS":                                 1,
		"SWITCH_ATTR_MAX_NUMBER_OF_SUPPORTED_PORTS":                          2,
		"SWITCH_ATTR_PORT_LIST":                                              3,
		"SWITCH_ATTR_PORT_MAX_MTU":                                           4,
		"SWITCH_ATTR_CPU_PORT":                                               5,
		"SWITCH_ATTR_MAX_VIRTUAL_ROUTERS":                                    6,
		"SWITCH_ATTR_FDB_TABLE_SIZE":                                         7,
		"SWITCH_ATTR_L3_NEIGHBOR_TABLE_SIZE":                                 8,
		"SWITCH_ATTR_L3_ROUTE_TABLE_SIZE":                                    9,
		"SWITCH_ATTR_LAG_MEMBERS":                                            10,
		"SWITCH_ATTR_NUMBER_OF_LAGS":                                         11,
		"SWITCH_ATTR_ECMP_MEMBERS":                                           12,
		"SWITCH_ATTR_NUMBER_OF_ECMP_GROUPS":                                  13,
		"SWITCH_ATTR_NUMBER_OF_UNICAST_QUEUES":                               14,
		"SWITCH_ATTR_NUMBER_OF_MULTICAST_QUEUES":                             15,
		"SWITCH_ATTR_NUMBER_OF_QUEUES":                                       16,
		"SWITCH_ATTR_NUMBER_OF_CPU_QUEUES":                                   17,
		"SWITCH_ATTR_ON_LINK_ROUTE_SUPPORTED":                                18,
		"SWITCH_ATTR_OPER_STATUS":                                            19,
		"SWITCH_ATTR_MAX_NUMBER_OF_TEMP_SENSORS":                             20,
		"SWITCH_ATTR_TEMP_LIST":                                              21,
		"SWITCH_ATTR_MAX_TEMP":                                               22,
		"SWITCH_ATTR_AVERAGE_TEMP":                                           23,
		"SWITCH_ATTR_ACL_TABLE_MINIMUM_PRIORITY":                             24,
		"SWITCH_ATTR_ACL_TABLE_MAXIMUM_PRIORITY":                             25,
		"SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY":                             26,
		"SWITCH_ATTR_ACL_ENTRY_MAXIMUM_PRIORITY":                             27,
		"SWITCH_ATTR_ACL_TABLE_GROUP_MINIMUM_PRIORITY":                       28,
		"SWITCH_ATTR_ACL_TABLE_GROUP_MAXIMUM_PRIORITY":                       29,
		"SWITCH_ATTR_FDB_DST_USER_META_DATA_RANGE":                           30,
		"SWITCH_ATTR_ROUTE_DST_USER_META_DATA_RANGE":                         31,
		"SWITCH_ATTR_NEIGHBOR_DST_USER_META_DATA_RANGE":                      32,
		"SWITCH_ATTR_PORT_USER_META_DATA_RANGE":                              33,
		"SWITCH_ATTR_VLAN_USER_META_DATA_RANGE":                              34,
		"SWITCH_ATTR_ACL_USER_META_DATA_RANGE":                               35,
		"SWITCH_ATTR_ACL_USER_TRAP_ID_RANGE":                                 36,
		"SWITCH_ATTR_DEFAULT_VLAN_ID":                                        37,
		"SWITCH_ATTR_DEFAULT_STP_INST_ID":                                    38,
		"SWITCH_ATTR_MAX_STP_INSTANCE":                                       39,
		"SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID":                              40,
		"SWITCH_ATTR_DEFAULT_OVERRIDE_VIRTUAL_ROUTER_ID":                     41,
		"SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID":                                   42,
		"SWITCH_ATTR_INGRESS_ACL":                                            43,
		"SWITCH_ATTR_EGRESS_ACL":                                             44,
		"SWITCH_ATTR_QOS_MAX_NUMBER_OF_TRAFFIC_CLASSES":                      45,
		"SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUP_HIERARCHY_LEVELS":     46,
		"SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUPS_PER_HIERARCHY_LEVEL": 47,
		"SWITCH_ATTR_QOS_MAX_NUMBER_OF_CHILDS_PER_SCHEDULER_GROUP":           48,
		"SWITCH_ATTR_TOTAL_BUFFER_SIZE":                                      49,
		"SWITCH_ATTR_INGRESS_BUFFER_POOL_NUM":                                50,
		"SWITCH_ATTR_EGRESS_BUFFER_POOL_NUM":                                 51,
		"SWITCH_ATTR_AVAILABLE_IPV4_ROUTE_ENTRY":                             52,
		"SWITCH_ATTR_AVAILABLE_IPV6_ROUTE_ENTRY":                             53,
		"SWITCH_ATTR_AVAILABLE_IPV4_NEXTHOP_ENTRY":                           54,
		"SWITCH_ATTR_AVAILABLE_IPV6_NEXTHOP_ENTRY":                           55,
		"SWITCH_ATTR_AVAILABLE_IPV4_NEIGHBOR_ENTRY":                          56,
		"SWITCH_ATTR_AVAILABLE_IPV6_NEIGHBOR_ENTRY":                          57,
		"SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_ENTRY":                         58,
		"SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_MEMBER_ENTRY":                  59,
		"SWITCH_ATTR_AVAILABLE_FDB_ENTRY":                                    60,
		"SWITCH_ATTR_AVAILABLE_L2MC_ENTRY":                                   61,
		"SWITCH_ATTR_AVAILABLE_IPMC_ENTRY":                                   62,
		"SWITCH_ATTR_AVAILABLE_SNAT_ENTRY":                                   63,
		"SWITCH_ATTR_AVAILABLE_DNAT_ENTRY":                                   64,
		"SWITCH_ATTR_AVAILABLE_DOUBLE_NAT_ENTRY":                             65,
		"SWITCH_ATTR_AVAILABLE_ACL_TABLE":                                    66,
		"SWITCH_ATTR_AVAILABLE_ACL_TABLE_GROUP":                              67,
		"SWITCH_ATTR_AVAILABLE_MY_SID_ENTRY":                                 68,
		"SWITCH_ATTR_DEFAULT_TRAP_GROUP":                                     69,
		"SWITCH_ATTR_ECMP_HASH":                                              70,
		"SWITCH_ATTR_LAG_HASH":                                               71,
		"SWITCH_ATTR_RESTART_WARM":                                           72,
		"SWITCH_ATTR_WARM_RECOVER":                                           73,
		"SWITCH_ATTR_RESTART_TYPE":                                           74,
		"SWITCH_ATTR_MIN_PLANNED_RESTART_INTERVAL":                           75,
		"SWITCH_ATTR_NV_STORAGE_SIZE":                                        76,
		"SWITCH_ATTR_MAX_ACL_ACTION_COUNT":                                   77,
		"SWITCH_ATTR_MAX_ACL_RANGE_COUNT":                                    78,
		"SWITCH_ATTR_ACL_CAPABILITY":                                         79,
		"SWITCH_ATTR_MCAST_SNOOPING_CAPABILITY":                              80,
		"SWITCH_ATTR_SWITCHING_MODE":                                         81,
		"SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE":                                 82,
		"SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE":                                 83,
		"SWITCH_ATTR_SRC_MAC_ADDRESS":                                        84,
		"SWITCH_ATTR_MAX_LEARNED_ADDRESSES":                                  85,
		"SWITCH_ATTR_FDB_AGING_TIME":                                         86,
		"SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION":                         87,
		"SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION":                       88,
		"SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION":                       89,
		"SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM":                            90,
		"SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED":                                 91,
		"SWITCH_ATTR_ECMP_DEFAULT_HASH_OFFSET":                               92,
		"SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH":                            93,
		"SWITCH_ATTR_ECMP_HASH_IPV4":                                         94,
		"SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4":                                 95,
		"SWITCH_ATTR_ECMP_HASH_IPV6":                                         96,
		"SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM":                             97,
		"SWITCH_ATTR_LAG_DEFAULT_HASH_SEED":                                  98,
		"SWITCH_ATTR_LAG_DEFAULT_HASH_OFFSET":                                99,
		"SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH":                             100,
		"SWITCH_ATTR_LAG_HASH_IPV4":                                          101,
		"SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4":                                  102,
		"SWITCH_ATTR_LAG_HASH_IPV6":                                          103,
		"SWITCH_ATTR_COUNTER_REFRESH_INTERVAL":                               104,
		"SWITCH_ATTR_QOS_DEFAULT_TC":                                         105,
		"SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP":                                    106,
		"SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP":                                 107,
		"SWITCH_ATTR_QOS_DSCP_TO_TC_MAP":                                     108,
		"SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP":                                  109,
		"SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP":                                    110,
		"SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP":                          111,
		"SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP":                           112,
		"SWITCH_ATTR_SWITCH_SHELL_ENABLE":                                    113,
		"SWITCH_ATTR_SWITCH_PROFILE_ID":                                      114,
		"SWITCH_ATTR_SWITCH_HARDWARE_INFO":                                   115,
		"SWITCH_ATTR_FIRMWARE_PATH_NAME":                                     116,
		"SWITCH_ATTR_INIT_SWITCH":                                            117,
		"SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY":                             118,
		"SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY":                         119,
		"SWITCH_ATTR_FDB_EVENT_NOTIFY":                                       120,
		"SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY":                               121,
		"SWITCH_ATTR_PACKET_EVENT_NOTIFY":                                    122,
		"SWITCH_ATTR_FAST_API_ENABLE":                                        123,
		"SWITCH_ATTR_MIRROR_TC":                                              124,
		"SWITCH_ATTR_ACL_STAGE_INGRESS":                                      125,
		"SWITCH_ATTR_ACL_STAGE_EGRESS":                                       126,
		"SWITCH_ATTR_SRV6_MAX_SID_DEPTH":                                     127,
		"SWITCH_ATTR_SRV6_TLV_TYPE":                                          128,
		"SWITCH_ATTR_QOS_NUM_LOSSLESS_QUEUES":                                129,
		"SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY":                              130,
		"SWITCH_ATTR_PFC_DLR_PACKET_ACTION":                                  131,
		"SWITCH_ATTR_PFC_TC_DLD_INTERVAL_RANGE":                              132,
		"SWITCH_ATTR_PFC_TC_DLD_INTERVAL":                                    133,
		"SWITCH_ATTR_PFC_TC_DLR_INTERVAL_RANGE":                              134,
		"SWITCH_ATTR_PFC_TC_DLR_INTERVAL":                                    135,
		"SWITCH_ATTR_SUPPORTED_PROTECTED_OBJECT_TYPE":                        136,
		"SWITCH_ATTR_TPID_OUTER_VLAN":                                        137,
		"SWITCH_ATTR_TPID_INNER_VLAN":                                        138,
		"SWITCH_ATTR_CRC_CHECK_ENABLE":                                       139,
		"SWITCH_ATTR_CRC_RECALCULATION_ENABLE":                               140,
		"SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY":                        141,
		"SWITCH_ATTR_NUMBER_OF_BFD_SESSION":                                  142,
		"SWITCH_ATTR_MAX_BFD_SESSION":                                        143,
		"SWITCH_ATTR_SUPPORTED_IPV4_BFD_SESSION_OFFLOAD_TYPE":                144,
		"SWITCH_ATTR_SUPPORTED_IPV6_BFD_SESSION_OFFLOAD_TYPE":                145,
		"SWITCH_ATTR_MIN_BFD_RX":                                             146,
		"SWITCH_ATTR_MIN_BFD_TX":                                             147,
		"SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE":                               148,
		"SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC":                               149,
		"SWITCH_ATTR_VXLAN_DEFAULT_PORT":                                     150,
		"SWITCH_ATTR_MAX_MIRROR_SESSION":                                     151,
		"SWITCH_ATTR_MAX_SAMPLED_MIRROR_SESSION":                             152,
		"SWITCH_ATTR_SUPPORTED_EXTENDED_STATS_MODE":                          153,
		"SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL":                           154,
		"SWITCH_ATTR_TAM_OBJECT_ID":                                          155,
		"SWITCH_ATTR_TAM_EVENT_NOTIFY":                                       156,
		"SWITCH_ATTR_SUPPORTED_OBJECT_TYPE_LIST":                             157,
		"SWITCH_ATTR_PRE_SHUTDOWN":                                           158,
		"SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID":                             159,
		"SWITCH_ATTR_NAT_ENABLE":                                             160,
		"SWITCH_ATTR_HARDWARE_ACCESS_BUS":                                    161,
		"SWITCH_ATTR_PLATFROM_CONTEXT":                                       162,
		"SWITCH_ATTR_REGISTER_READ":                                          163,
		"SWITCH_ATTR_REGISTER_WRITE":                                         164,
		"SWITCH_ATTR_FIRMWARE_DOWNLOAD_BROADCAST":                            165,
		"SWITCH_ATTR_FIRMWARE_LOAD_METHOD":                                   166,
		"SWITCH_ATTR_FIRMWARE_LOAD_TYPE":                                     167,
		"SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE":                              168,
		"SWITCH_ATTR_FIRMWARE_BROADCAST_STOP":                                169,
		"SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH":                        170,
		"SWITCH_ATTR_FIRMWARE_STATUS":                                        171,
		"SWITCH_ATTR_FIRMWARE_MAJOR_VERSION":                                 172,
		"SWITCH_ATTR_FIRMWARE_MINOR_VERSION":                                 173,
		"SWITCH_ATTR_PORT_CONNECTOR_LIST":                                    174,
		"SWITCH_ATTR_PROPOGATE_PORT_STATE_FROM_LINE_TO_SYSTEM_PORT_SUPPORT":  175,
		"SWITCH_ATTR_TYPE":                                                   176,
		"SWITCH_ATTR_MACSEC_OBJECT_LIST":                                     177,
		"SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP":                                 178,
		"SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP":                              179,
		"SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP":                       180,
		"SWITCH_ATTR_SWITCH_ID":                                              181,
		"SWITCH_ATTR_MAX_SYSTEM_CORES":                                       182,
		"SWITCH_ATTR_SYSTEM_PORT_CONFIG_LIST":                                183,
		"SWITCH_ATTR_NUMBER_OF_SYSTEM_PORTS":                                 184,
		"SWITCH_ATTR_SYSTEM_PORT_LIST":                                       185,
		"SWITCH_ATTR_NUMBER_OF_FABRIC_PORTS":                                 186,
		"SWITCH_ATTR_FABRIC_PORT_LIST":                                       187,
		"SWITCH_ATTR_PACKET_DMA_MEMORY_POOL_SIZE":                            188,
		"SWITCH_ATTR_FAILOVER_CONFIG_MODE":                                   189,
		"SWITCH_ATTR_SUPPORTED_FAILOVER_MODE":                                190,
		"SWITCH_ATTR_TUNNEL_OBJECTS_LIST":                                    191,
		"SWITCH_ATTR_PACKET_AVAILABLE_DMA_MEMORY_POOL_SIZE":                  192,
		"SWITCH_ATTR_PRE_INGRESS_ACL":                                        193,
		"SWITCH_ATTR_AVAILABLE_SNAPT_ENTRY":                                  194,
		"SWITCH_ATTR_AVAILABLE_DNAPT_ENTRY":                                  195,
		"SWITCH_ATTR_AVAILABLE_DOUBLE_NAPT_ENTRY":                            196,
		"SWITCH_ATTR_SLAVE_MDIO_ADDR_LIST":                                   197,
		"SWITCH_ATTR_MY_MAC_TABLE_MINIMUM_PRIORITY":                          198,
		"SWITCH_ATTR_MY_MAC_TABLE_MAXIMUM_PRIORITY":                          199,
		"SWITCH_ATTR_MY_MAC_LIST":                                            200,
		"SWITCH_ATTR_INSTALLED_MY_MAC_ENTRIES":                               201,
		"SWITCH_ATTR_AVAILABLE_MY_MAC_ENTRIES":                               202,
		"SWITCH_ATTR_MAX_NUMBER_OF_FORWARDING_CLASSES":                       203,
		"SWITCH_ATTR_QOS_DSCP_TO_FORWARDING_CLASS_MAP":                       204,
		"SWITCH_ATTR_QOS_MPLS_EXP_TO_FORWARDING_CLASS_MAP":                   205,
		"SWITCH_ATTR_IPSEC_OBJECT_ID":                                        206,
		"SWITCH_ATTR_IPSEC_SA_TAG_TPID":                                      207,
		"SWITCH_ATTR_IPSEC_SA_STATUS_CHANGE_NOTIFY":                          208,
		"SWITCH_ATTR_NAT_EVENT_NOTIFY":                                       209,
		"SWITCH_ATTR_MAX_ECMP_MEMBER_COUNT":                                  210,
		"SWITCH_ATTR_ECMP_MEMBER_COUNT":                                      211,
	}
)

func (x SwitchAttr) Enum() *SwitchAttr {
	p := new(SwitchAttr)
	*p = x
	return p
}

func (x SwitchAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_switch_proto_enumTypes[0].Descriptor()
}

func (SwitchAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_switch_proto_enumTypes[0]
}

func (x SwitchAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchAttr.Descriptor instead.
func (SwitchAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{0}
}

type SwitchTunnelAttr int32

const (
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_UNSPECIFIED                        SwitchTunnelAttr = 0
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_TUNNEL_TYPE                        SwitchTunnelAttr = 1
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION             SwitchTunnelAttr = 2
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_TUNNEL_ENCAP_ECN_MODE              SwitchTunnelAttr = 3
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_ENCAP_MAPPERS                      SwitchTunnelAttr = 4
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_TUNNEL_DECAP_ECN_MODE              SwitchTunnelAttr = 5
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_DECAP_MAPPERS                      SwitchTunnelAttr = 6
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_TUNNEL_VXLAN_UDP_SPORT_MODE        SwitchTunnelAttr = 7
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT                    SwitchTunnelAttr = 8
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK               SwitchTunnelAttr = 9
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP SwitchTunnelAttr = 10
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP          SwitchTunnelAttr = 11
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP           SwitchTunnelAttr = 12
	SwitchTunnelAttr_SWITCH_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP SwitchTunnelAttr = 13
)

// Enum value maps for SwitchTunnelAttr.
var (
	SwitchTunnelAttr_name = map[int32]string{
		0:  "SWITCH_TUNNEL_ATTR_UNSPECIFIED",
		1:  "SWITCH_TUNNEL_ATTR_TUNNEL_TYPE",
		2:  "SWITCH_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION",
		3:  "SWITCH_TUNNEL_ATTR_TUNNEL_ENCAP_ECN_MODE",
		4:  "SWITCH_TUNNEL_ATTR_ENCAP_MAPPERS",
		5:  "SWITCH_TUNNEL_ATTR_TUNNEL_DECAP_ECN_MODE",
		6:  "SWITCH_TUNNEL_ATTR_DECAP_MAPPERS",
		7:  "SWITCH_TUNNEL_ATTR_TUNNEL_VXLAN_UDP_SPORT_MODE",
		8:  "SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT",
		9:  "SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK",
		10: "SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP",
		11: "SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP",
		12: "SWITCH_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP",
		13: "SWITCH_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP",
	}
	SwitchTunnelAttr_value = map[string]int32{
		"SWITCH_TUNNEL_ATTR_UNSPECIFIED":                        0,
		"SWITCH_TUNNEL_ATTR_TUNNEL_TYPE":                        1,
		"SWITCH_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION":             2,
		"SWITCH_TUNNEL_ATTR_TUNNEL_ENCAP_ECN_MODE":              3,
		"SWITCH_TUNNEL_ATTR_ENCAP_MAPPERS":                      4,
		"SWITCH_TUNNEL_ATTR_TUNNEL_DECAP_ECN_MODE":              5,
		"SWITCH_TUNNEL_ATTR_DECAP_MAPPERS":                      6,
		"SWITCH_TUNNEL_ATTR_TUNNEL_VXLAN_UDP_SPORT_MODE":        7,
		"SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT":                    8,
		"SWITCH_TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK":               9,
		"SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP": 10,
		"SWITCH_TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP":          11,
		"SWITCH_TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP":           12,
		"SWITCH_TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP": 13,
	}
)

func (x SwitchTunnelAttr) Enum() *SwitchTunnelAttr {
	p := new(SwitchTunnelAttr)
	*p = x
	return p
}

func (x SwitchTunnelAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwitchTunnelAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_switch_proto_enumTypes[1].Descriptor()
}

func (SwitchTunnelAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_switch_proto_enumTypes[1]
}

func (x SwitchTunnelAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwitchTunnelAttr.Descriptor instead.
func (SwitchTunnelAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{1}
}

type CreateSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngressAcl                     *uint64                   `protobuf:"varint,1,opt,name=ingress_acl,json=ingressAcl,proto3,oneof" json:"ingress_acl,omitempty"`
	EgressAcl                      *uint64                   `protobuf:"varint,2,opt,name=egress_acl,json=egressAcl,proto3,oneof" json:"egress_acl,omitempty"`
	RestartWarm                    *bool                     `protobuf:"varint,3,opt,name=restart_warm,json=restartWarm,proto3,oneof" json:"restart_warm,omitempty"`
	WarmRecover                    *bool                     `protobuf:"varint,4,opt,name=warm_recover,json=warmRecover,proto3,oneof" json:"warm_recover,omitempty"`
	SwitchingMode                  *SwitchSwitchingMode      `protobuf:"varint,5,opt,name=switching_mode,json=switchingMode,proto3,enum=lemming.dataplane.sai.SwitchSwitchingMode,oneof" json:"switching_mode,omitempty"`
	BcastCpuFloodEnable            *bool                     `protobuf:"varint,6,opt,name=bcast_cpu_flood_enable,json=bcastCpuFloodEnable,proto3,oneof" json:"bcast_cpu_flood_enable,omitempty"`
	McastCpuFloodEnable            *bool                     `protobuf:"varint,7,opt,name=mcast_cpu_flood_enable,json=mcastCpuFloodEnable,proto3,oneof" json:"mcast_cpu_flood_enable,omitempty"`
	SrcMacAddress                  []byte                    `protobuf:"bytes,8,opt,name=src_mac_address,json=srcMacAddress,proto3,oneof" json:"src_mac_address,omitempty"`
	MaxLearnedAddresses            *uint32                   `protobuf:"varint,9,opt,name=max_learned_addresses,json=maxLearnedAddresses,proto3,oneof" json:"max_learned_addresses,omitempty"`
	FdbAgingTime                   *uint32                   `protobuf:"varint,10,opt,name=fdb_aging_time,json=fdbAgingTime,proto3,oneof" json:"fdb_aging_time,omitempty"`
	FdbUnicastMissPacketAction     *PacketAction             `protobuf:"varint,11,opt,name=fdb_unicast_miss_packet_action,json=fdbUnicastMissPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"fdb_unicast_miss_packet_action,omitempty"`
	FdbBroadcastMissPacketAction   *PacketAction             `protobuf:"varint,12,opt,name=fdb_broadcast_miss_packet_action,json=fdbBroadcastMissPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"fdb_broadcast_miss_packet_action,omitempty"`
	FdbMulticastMissPacketAction   *PacketAction             `protobuf:"varint,13,opt,name=fdb_multicast_miss_packet_action,json=fdbMulticastMissPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"fdb_multicast_miss_packet_action,omitempty"`
	EcmpDefaultHashAlgorithm       *HashAlgorithm            `protobuf:"varint,14,opt,name=ecmp_default_hash_algorithm,json=ecmpDefaultHashAlgorithm,proto3,enum=lemming.dataplane.sai.HashAlgorithm,oneof" json:"ecmp_default_hash_algorithm,omitempty"`
	EcmpDefaultHashSeed            *uint32                   `protobuf:"varint,15,opt,name=ecmp_default_hash_seed,json=ecmpDefaultHashSeed,proto3,oneof" json:"ecmp_default_hash_seed,omitempty"`
	EcmpDefaultHashOffset          *uint32                   `protobuf:"varint,16,opt,name=ecmp_default_hash_offset,json=ecmpDefaultHashOffset,proto3,oneof" json:"ecmp_default_hash_offset,omitempty"`
	EcmpDefaultSymmetricHash       *bool                     `protobuf:"varint,17,opt,name=ecmp_default_symmetric_hash,json=ecmpDefaultSymmetricHash,proto3,oneof" json:"ecmp_default_symmetric_hash,omitempty"`
	EcmpHashIpv4                   *uint64                   `protobuf:"varint,18,opt,name=ecmp_hash_ipv4,json=ecmpHashIpv4,proto3,oneof" json:"ecmp_hash_ipv4,omitempty"`
	EcmpHashIpv4InIpv4             *uint64                   `protobuf:"varint,19,opt,name=ecmp_hash_ipv4_in_ipv4,json=ecmpHashIpv4InIpv4,proto3,oneof" json:"ecmp_hash_ipv4_in_ipv4,omitempty"`
	EcmpHashIpv6                   *uint64                   `protobuf:"varint,20,opt,name=ecmp_hash_ipv6,json=ecmpHashIpv6,proto3,oneof" json:"ecmp_hash_ipv6,omitempty"`
	LagDefaultHashAlgorithm        *HashAlgorithm            `protobuf:"varint,21,opt,name=lag_default_hash_algorithm,json=lagDefaultHashAlgorithm,proto3,enum=lemming.dataplane.sai.HashAlgorithm,oneof" json:"lag_default_hash_algorithm,omitempty"`
	LagDefaultHashSeed             *uint32                   `protobuf:"varint,22,opt,name=lag_default_hash_seed,json=lagDefaultHashSeed,proto3,oneof" json:"lag_default_hash_seed,omitempty"`
	LagDefaultHashOffset           *uint32                   `protobuf:"varint,23,opt,name=lag_default_hash_offset,json=lagDefaultHashOffset,proto3,oneof" json:"lag_default_hash_offset,omitempty"`
	LagDefaultSymmetricHash        *bool                     `protobuf:"varint,24,opt,name=lag_default_symmetric_hash,json=lagDefaultSymmetricHash,proto3,oneof" json:"lag_default_symmetric_hash,omitempty"`
	LagHashIpv4                    *uint64                   `protobuf:"varint,25,opt,name=lag_hash_ipv4,json=lagHashIpv4,proto3,oneof" json:"lag_hash_ipv4,omitempty"`
	LagHashIpv4InIpv4              *uint64                   `protobuf:"varint,26,opt,name=lag_hash_ipv4_in_ipv4,json=lagHashIpv4InIpv4,proto3,oneof" json:"lag_hash_ipv4_in_ipv4,omitempty"`
	LagHashIpv6                    *uint64                   `protobuf:"varint,27,opt,name=lag_hash_ipv6,json=lagHashIpv6,proto3,oneof" json:"lag_hash_ipv6,omitempty"`
	CounterRefreshInterval         *uint32                   `protobuf:"varint,28,opt,name=counter_refresh_interval,json=counterRefreshInterval,proto3,oneof" json:"counter_refresh_interval,omitempty"`
	QosDefaultTc                   *uint32                   `protobuf:"varint,29,opt,name=qos_default_tc,json=qosDefaultTc,proto3,oneof" json:"qos_default_tc,omitempty"`
	QosDot1PToTcMap                *uint64                   `protobuf:"varint,30,opt,name=qos_dot1p_to_tc_map,json=qosDot1pToTcMap,proto3,oneof" json:"qos_dot1p_to_tc_map,omitempty"`
	QosDot1PToColorMap             *uint64                   `protobuf:"varint,31,opt,name=qos_dot1p_to_color_map,json=qosDot1pToColorMap,proto3,oneof" json:"qos_dot1p_to_color_map,omitempty"`
	QosDscpToTcMap                 *uint64                   `protobuf:"varint,32,opt,name=qos_dscp_to_tc_map,json=qosDscpToTcMap,proto3,oneof" json:"qos_dscp_to_tc_map,omitempty"`
	QosDscpToColorMap              *uint64                   `protobuf:"varint,33,opt,name=qos_dscp_to_color_map,json=qosDscpToColorMap,proto3,oneof" json:"qos_dscp_to_color_map,omitempty"`
	QosTcToQueueMap                *uint64                   `protobuf:"varint,34,opt,name=qos_tc_to_queue_map,json=qosTcToQueueMap,proto3,oneof" json:"qos_tc_to_queue_map,omitempty"`
	QosTcAndColorToDot1PMap        *uint64                   `protobuf:"varint,35,opt,name=qos_tc_and_color_to_dot1p_map,json=qosTcAndColorToDot1pMap,proto3,oneof" json:"qos_tc_and_color_to_dot1p_map,omitempty"`
	QosTcAndColorToDscpMap         *uint64                   `protobuf:"varint,36,opt,name=qos_tc_and_color_to_dscp_map,json=qosTcAndColorToDscpMap,proto3,oneof" json:"qos_tc_and_color_to_dscp_map,omitempty"`
	SwitchShellEnable              *bool                     `protobuf:"varint,37,opt,name=switch_shell_enable,json=switchShellEnable,proto3,oneof" json:"switch_shell_enable,omitempty"`
	SwitchProfileId                *uint32                   `protobuf:"varint,38,opt,name=switch_profile_id,json=switchProfileId,proto3,oneof" json:"switch_profile_id,omitempty"`
	SwitchHardwareInfo             []int32                   `protobuf:"varint,39,rep,packed,name=switch_hardware_info,json=switchHardwareInfo,proto3" json:"switch_hardware_info,omitempty"`
	FirmwarePathName               []int32                   `protobuf:"varint,40,rep,packed,name=firmware_path_name,json=firmwarePathName,proto3" json:"firmware_path_name,omitempty"`
	InitSwitch                     *bool                     `protobuf:"varint,41,opt,name=init_switch,json=initSwitch,proto3,oneof" json:"init_switch,omitempty"`
	FastApiEnable                  *bool                     `protobuf:"varint,42,opt,name=fast_api_enable,json=fastApiEnable,proto3,oneof" json:"fast_api_enable,omitempty"`
	MirrorTc                       *uint32                   `protobuf:"varint,43,opt,name=mirror_tc,json=mirrorTc,proto3,oneof" json:"mirror_tc,omitempty"`
	PfcDlrPacketAction             *PacketAction             `protobuf:"varint,44,opt,name=pfc_dlr_packet_action,json=pfcDlrPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"pfc_dlr_packet_action,omitempty"`
	PfcTcDldInterval               []*UintMap                `protobuf:"bytes,45,rep,name=pfc_tc_dld_interval,json=pfcTcDldInterval,proto3" json:"pfc_tc_dld_interval,omitempty"`
	PfcTcDlrInterval               []*UintMap                `protobuf:"bytes,46,rep,name=pfc_tc_dlr_interval,json=pfcTcDlrInterval,proto3" json:"pfc_tc_dlr_interval,omitempty"`
	TpidOuterVlan                  *uint32                   `protobuf:"varint,47,opt,name=tpid_outer_vlan,json=tpidOuterVlan,proto3,oneof" json:"tpid_outer_vlan,omitempty"`
	TpidInnerVlan                  *uint32                   `protobuf:"varint,48,opt,name=tpid_inner_vlan,json=tpidInnerVlan,proto3,oneof" json:"tpid_inner_vlan,omitempty"`
	CrcCheckEnable                 *bool                     `protobuf:"varint,49,opt,name=crc_check_enable,json=crcCheckEnable,proto3,oneof" json:"crc_check_enable,omitempty"`
	CrcRecalculationEnable         *bool                     `protobuf:"varint,50,opt,name=crc_recalculation_enable,json=crcRecalculationEnable,proto3,oneof" json:"crc_recalculation_enable,omitempty"`
	EcnEctThresholdEnable          *bool                     `protobuf:"varint,51,opt,name=ecn_ect_threshold_enable,json=ecnEctThresholdEnable,proto3,oneof" json:"ecn_ect_threshold_enable,omitempty"`
	VxlanDefaultRouterMac          []byte                    `protobuf:"bytes,52,opt,name=vxlan_default_router_mac,json=vxlanDefaultRouterMac,proto3,oneof" json:"vxlan_default_router_mac,omitempty"`
	VxlanDefaultPort               *uint32                   `protobuf:"varint,53,opt,name=vxlan_default_port,json=vxlanDefaultPort,proto3,oneof" json:"vxlan_default_port,omitempty"`
	UninitDataPlaneOnRemoval       *bool                     `protobuf:"varint,54,opt,name=uninit_data_plane_on_removal,json=uninitDataPlaneOnRemoval,proto3,oneof" json:"uninit_data_plane_on_removal,omitempty"`
	TamObjectId                    []uint64                  `protobuf:"varint,55,rep,packed,name=tam_object_id,json=tamObjectId,proto3" json:"tam_object_id,omitempty"`
	PreShutdown                    *bool                     `protobuf:"varint,56,opt,name=pre_shutdown,json=preShutdown,proto3,oneof" json:"pre_shutdown,omitempty"`
	NatZoneCounterObjectId         *uint64                   `protobuf:"varint,57,opt,name=nat_zone_counter_object_id,json=natZoneCounterObjectId,proto3,oneof" json:"nat_zone_counter_object_id,omitempty"`
	NatEnable                      *bool                     `protobuf:"varint,58,opt,name=nat_enable,json=natEnable,proto3,oneof" json:"nat_enable,omitempty"`
	HardwareAccessBus              *SwitchHardwareAccessBus  `protobuf:"varint,59,opt,name=hardware_access_bus,json=hardwareAccessBus,proto3,enum=lemming.dataplane.sai.SwitchHardwareAccessBus,oneof" json:"hardware_access_bus,omitempty"`
	PlatfromContext                *uint64                   `protobuf:"varint,60,opt,name=platfrom_context,json=platfromContext,proto3,oneof" json:"platfrom_context,omitempty"`
	FirmwareDownloadBroadcast      *bool                     `protobuf:"varint,61,opt,name=firmware_download_broadcast,json=firmwareDownloadBroadcast,proto3,oneof" json:"firmware_download_broadcast,omitempty"`
	FirmwareLoadMethod             *SwitchFirmwareLoadMethod `protobuf:"varint,62,opt,name=firmware_load_method,json=firmwareLoadMethod,proto3,enum=lemming.dataplane.sai.SwitchFirmwareLoadMethod,oneof" json:"firmware_load_method,omitempty"`
	FirmwareLoadType               *SwitchFirmwareLoadType   `protobuf:"varint,63,opt,name=firmware_load_type,json=firmwareLoadType,proto3,enum=lemming.dataplane.sai.SwitchFirmwareLoadType,oneof" json:"firmware_load_type,omitempty"`
	FirmwareDownloadExecute        *bool                     `protobuf:"varint,64,opt,name=firmware_download_execute,json=firmwareDownloadExecute,proto3,oneof" json:"firmware_download_execute,omitempty"`
	FirmwareBroadcastStop          *bool                     `protobuf:"varint,65,opt,name=firmware_broadcast_stop,json=firmwareBroadcastStop,proto3,oneof" json:"firmware_broadcast_stop,omitempty"`
	FirmwareVerifyAndInitSwitch    *bool                     `protobuf:"varint,66,opt,name=firmware_verify_and_init_switch,json=firmwareVerifyAndInitSwitch,proto3,oneof" json:"firmware_verify_and_init_switch,omitempty"`
	Type                           *SwitchType               `protobuf:"varint,67,opt,name=type,proto3,enum=lemming.dataplane.sai.SwitchType,oneof" json:"type,omitempty"`
	MacsecObjectList               []uint64                  `protobuf:"varint,68,rep,packed,name=macsec_object_list,json=macsecObjectList,proto3" json:"macsec_object_list,omitempty"`
	QosMplsExpToTcMap              *uint64                   `protobuf:"varint,69,opt,name=qos_mpls_exp_to_tc_map,json=qosMplsExpToTcMap,proto3,oneof" json:"qos_mpls_exp_to_tc_map,omitempty"`
	QosMplsExpToColorMap           *uint64                   `protobuf:"varint,70,opt,name=qos_mpls_exp_to_color_map,json=qosMplsExpToColorMap,proto3,oneof" json:"qos_mpls_exp_to_color_map,omitempty"`
	QosTcAndColorToMplsExpMap      *uint64                   `protobuf:"varint,71,opt,name=qos_tc_and_color_to_mpls_exp_map,json=qosTcAndColorToMplsExpMap,proto3,oneof" json:"qos_tc_and_color_to_mpls_exp_map,omitempty"`
	SwitchId                       *uint32                   `protobuf:"varint,72,opt,name=switch_id,json=switchId,proto3,oneof" json:"switch_id,omitempty"`
	MaxSystemCores                 *uint32                   `protobuf:"varint,73,opt,name=max_system_cores,json=maxSystemCores,proto3,oneof" json:"max_system_cores,omitempty"`
	SystemPortConfigList           []*SystemPortConfig       `protobuf:"bytes,74,rep,name=system_port_config_list,json=systemPortConfigList,proto3" json:"system_port_config_list,omitempty"`
	FailoverConfigMode             *SwitchFailoverConfigMode `protobuf:"varint,75,opt,name=failover_config_mode,json=failoverConfigMode,proto3,enum=lemming.dataplane.sai.SwitchFailoverConfigMode,oneof" json:"failover_config_mode,omitempty"`
	TunnelObjectsList              []uint64                  `protobuf:"varint,76,rep,packed,name=tunnel_objects_list,json=tunnelObjectsList,proto3" json:"tunnel_objects_list,omitempty"`
	PreIngressAcl                  *uint64                   `protobuf:"varint,77,opt,name=pre_ingress_acl,json=preIngressAcl,proto3,oneof" json:"pre_ingress_acl,omitempty"`
	SlaveMdioAddrList              []uint32                  `protobuf:"varint,78,rep,packed,name=slave_mdio_addr_list,json=slaveMdioAddrList,proto3" json:"slave_mdio_addr_list,omitempty"`
	QosDscpToForwardingClassMap    *uint64                   `protobuf:"varint,79,opt,name=qos_dscp_to_forwarding_class_map,json=qosDscpToForwardingClassMap,proto3,oneof" json:"qos_dscp_to_forwarding_class_map,omitempty"`
	QosMplsExpToForwardingClassMap *uint64                   `protobuf:"varint,80,opt,name=qos_mpls_exp_to_forwarding_class_map,json=qosMplsExpToForwardingClassMap,proto3,oneof" json:"qos_mpls_exp_to_forwarding_class_map,omitempty"`
	IpsecObjectId                  *uint64                   `protobuf:"varint,81,opt,name=ipsec_object_id,json=ipsecObjectId,proto3,oneof" json:"ipsec_object_id,omitempty"`
	IpsecSaTagTpid                 *uint32                   `protobuf:"varint,82,opt,name=ipsec_sa_tag_tpid,json=ipsecSaTagTpid,proto3,oneof" json:"ipsec_sa_tag_tpid,omitempty"`
	EcmpMemberCount                *uint32                   `protobuf:"varint,83,opt,name=ecmp_member_count,json=ecmpMemberCount,proto3,oneof" json:"ecmp_member_count,omitempty"`
}

func (x *CreateSwitchRequest) Reset() {
	*x = CreateSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSwitchRequest) ProtoMessage() {}

func (x *CreateSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSwitchRequest.ProtoReflect.Descriptor instead.
func (*CreateSwitchRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSwitchRequest) GetIngressAcl() uint64 {
	if x != nil && x.IngressAcl != nil {
		return *x.IngressAcl
	}
	return 0
}

func (x *CreateSwitchRequest) GetEgressAcl() uint64 {
	if x != nil && x.EgressAcl != nil {
		return *x.EgressAcl
	}
	return 0
}

func (x *CreateSwitchRequest) GetRestartWarm() bool {
	if x != nil && x.RestartWarm != nil {
		return *x.RestartWarm
	}
	return false
}

func (x *CreateSwitchRequest) GetWarmRecover() bool {
	if x != nil && x.WarmRecover != nil {
		return *x.WarmRecover
	}
	return false
}

func (x *CreateSwitchRequest) GetSwitchingMode() SwitchSwitchingMode {
	if x != nil && x.SwitchingMode != nil {
		return *x.SwitchingMode
	}
	return SwitchSwitchingMode_SWITCH_SWITCHING_MODE_UNSPECIFIED
}

func (x *CreateSwitchRequest) GetBcastCpuFloodEnable() bool {
	if x != nil && x.BcastCpuFloodEnable != nil {
		return *x.BcastCpuFloodEnable
	}
	return false
}

func (x *CreateSwitchRequest) GetMcastCpuFloodEnable() bool {
	if x != nil && x.McastCpuFloodEnable != nil {
		return *x.McastCpuFloodEnable
	}
	return false
}

func (x *CreateSwitchRequest) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *CreateSwitchRequest) GetMaxLearnedAddresses() uint32 {
	if x != nil && x.MaxLearnedAddresses != nil {
		return *x.MaxLearnedAddresses
	}
	return 0
}

func (x *CreateSwitchRequest) GetFdbAgingTime() uint32 {
	if x != nil && x.FdbAgingTime != nil {
		return *x.FdbAgingTime
	}
	return 0
}

func (x *CreateSwitchRequest) GetFdbUnicastMissPacketAction() PacketAction {
	if x != nil && x.FdbUnicastMissPacketAction != nil {
		return *x.FdbUnicastMissPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateSwitchRequest) GetFdbBroadcastMissPacketAction() PacketAction {
	if x != nil && x.FdbBroadcastMissPacketAction != nil {
		return *x.FdbBroadcastMissPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateSwitchRequest) GetFdbMulticastMissPacketAction() PacketAction {
	if x != nil && x.FdbMulticastMissPacketAction != nil {
		return *x.FdbMulticastMissPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateSwitchRequest) GetEcmpDefaultHashAlgorithm() HashAlgorithm {
	if x != nil && x.EcmpDefaultHashAlgorithm != nil {
		return *x.EcmpDefaultHashAlgorithm
	}
	return HashAlgorithm_HASH_ALGORITHM_UNSPECIFIED
}

func (x *CreateSwitchRequest) GetEcmpDefaultHashSeed() uint32 {
	if x != nil && x.EcmpDefaultHashSeed != nil {
		return *x.EcmpDefaultHashSeed
	}
	return 0
}

func (x *CreateSwitchRequest) GetEcmpDefaultHashOffset() uint32 {
	if x != nil && x.EcmpDefaultHashOffset != nil {
		return *x.EcmpDefaultHashOffset
	}
	return 0
}

func (x *CreateSwitchRequest) GetEcmpDefaultSymmetricHash() bool {
	if x != nil && x.EcmpDefaultSymmetricHash != nil {
		return *x.EcmpDefaultSymmetricHash
	}
	return false
}

func (x *CreateSwitchRequest) GetEcmpHashIpv4() uint64 {
	if x != nil && x.EcmpHashIpv4 != nil {
		return *x.EcmpHashIpv4
	}
	return 0
}

func (x *CreateSwitchRequest) GetEcmpHashIpv4InIpv4() uint64 {
	if x != nil && x.EcmpHashIpv4InIpv4 != nil {
		return *x.EcmpHashIpv4InIpv4
	}
	return 0
}

func (x *CreateSwitchRequest) GetEcmpHashIpv6() uint64 {
	if x != nil && x.EcmpHashIpv6 != nil {
		return *x.EcmpHashIpv6
	}
	return 0
}

func (x *CreateSwitchRequest) GetLagDefaultHashAlgorithm() HashAlgorithm {
	if x != nil && x.LagDefaultHashAlgorithm != nil {
		return *x.LagDefaultHashAlgorithm
	}
	return HashAlgorithm_HASH_ALGORITHM_UNSPECIFIED
}

func (x *CreateSwitchRequest) GetLagDefaultHashSeed() uint32 {
	if x != nil && x.LagDefaultHashSeed != nil {
		return *x.LagDefaultHashSeed
	}
	return 0
}

func (x *CreateSwitchRequest) GetLagDefaultHashOffset() uint32 {
	if x != nil && x.LagDefaultHashOffset != nil {
		return *x.LagDefaultHashOffset
	}
	return 0
}

func (x *CreateSwitchRequest) GetLagDefaultSymmetricHash() bool {
	if x != nil && x.LagDefaultSymmetricHash != nil {
		return *x.LagDefaultSymmetricHash
	}
	return false
}

func (x *CreateSwitchRequest) GetLagHashIpv4() uint64 {
	if x != nil && x.LagHashIpv4 != nil {
		return *x.LagHashIpv4
	}
	return 0
}

func (x *CreateSwitchRequest) GetLagHashIpv4InIpv4() uint64 {
	if x != nil && x.LagHashIpv4InIpv4 != nil {
		return *x.LagHashIpv4InIpv4
	}
	return 0
}

func (x *CreateSwitchRequest) GetLagHashIpv6() uint64 {
	if x != nil && x.LagHashIpv6 != nil {
		return *x.LagHashIpv6
	}
	return 0
}

func (x *CreateSwitchRequest) GetCounterRefreshInterval() uint32 {
	if x != nil && x.CounterRefreshInterval != nil {
		return *x.CounterRefreshInterval
	}
	return 0
}

func (x *CreateSwitchRequest) GetQosDefaultTc() uint32 {
	if x != nil && x.QosDefaultTc != nil {
		return *x.QosDefaultTc
	}
	return 0
}

func (x *CreateSwitchRequest) GetQosDot1PToTcMap() uint64 {
	if x != nil && x.QosDot1PToTcMap != nil {
		return *x.QosDot1PToTcMap
	}
	return 0
}

func (x *CreateSwitchRequest) GetQosDot1PToColorMap() uint64 {
	if x != nil && x.QosDot1PToColorMap != nil {
		return *x.QosDot1PToColorMap
	}
	return 0
}

func (x *CreateSwitchRequest) GetQosDscpToTcMap() uint64 {
	if x != nil && x.QosDscpToTcMap != nil {
		return *x.QosDscpToTcMap
	}
	return 0
}

func (x *CreateSwitchRequest) GetQosDscpToColorMap() uint64 {
	if x != nil && x.QosDscpToColorMap != nil {
		return *x.QosDscpToColorMap
	}
	return 0
}

func (x *CreateSwitchRequest) GetQosTcToQueueMap() uint64 {
	if x != nil && x.QosTcToQueueMap != nil {
		return *x.QosTcToQueueMap
	}
	return 0
}

func (x *CreateSwitchRequest) GetQosTcAndColorToDot1PMap() uint64 {
	if x != nil && x.QosTcAndColorToDot1PMap != nil {
		return *x.QosTcAndColorToDot1PMap
	}
	return 0
}

func (x *CreateSwitchRequest) GetQosTcAndColorToDscpMap() uint64 {
	if x != nil && x.QosTcAndColorToDscpMap != nil {
		return *x.QosTcAndColorToDscpMap
	}
	return 0
}

func (x *CreateSwitchRequest) GetSwitchShellEnable() bool {
	if x != nil && x.SwitchShellEnable != nil {
		return *x.SwitchShellEnable
	}
	return false
}

func (x *CreateSwitchRequest) GetSwitchProfileId() uint32 {
	if x != nil && x.SwitchProfileId != nil {
		return *x.SwitchProfileId
	}
	return 0
}

func (x *CreateSwitchRequest) GetSwitchHardwareInfo() []int32 {
	if x != nil {
		return x.SwitchHardwareInfo
	}
	return nil
}

func (x *CreateSwitchRequest) GetFirmwarePathName() []int32 {
	if x != nil {
		return x.FirmwarePathName
	}
	return nil
}

func (x *CreateSwitchRequest) GetInitSwitch() bool {
	if x != nil && x.InitSwitch != nil {
		return *x.InitSwitch
	}
	return false
}

func (x *CreateSwitchRequest) GetFastApiEnable() bool {
	if x != nil && x.FastApiEnable != nil {
		return *x.FastApiEnable
	}
	return false
}

func (x *CreateSwitchRequest) GetMirrorTc() uint32 {
	if x != nil && x.MirrorTc != nil {
		return *x.MirrorTc
	}
	return 0
}

func (x *CreateSwitchRequest) GetPfcDlrPacketAction() PacketAction {
	if x != nil && x.PfcDlrPacketAction != nil {
		return *x.PfcDlrPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateSwitchRequest) GetPfcTcDldInterval() []*UintMap {
	if x != nil {
		return x.PfcTcDldInterval
	}
	return nil
}

func (x *CreateSwitchRequest) GetPfcTcDlrInterval() []*UintMap {
	if x != nil {
		return x.PfcTcDlrInterval
	}
	return nil
}

func (x *CreateSwitchRequest) GetTpidOuterVlan() uint32 {
	if x != nil && x.TpidOuterVlan != nil {
		return *x.TpidOuterVlan
	}
	return 0
}

func (x *CreateSwitchRequest) GetTpidInnerVlan() uint32 {
	if x != nil && x.TpidInnerVlan != nil {
		return *x.TpidInnerVlan
	}
	return 0
}

func (x *CreateSwitchRequest) GetCrcCheckEnable() bool {
	if x != nil && x.CrcCheckEnable != nil {
		return *x.CrcCheckEnable
	}
	return false
}

func (x *CreateSwitchRequest) GetCrcRecalculationEnable() bool {
	if x != nil && x.CrcRecalculationEnable != nil {
		return *x.CrcRecalculationEnable
	}
	return false
}

func (x *CreateSwitchRequest) GetEcnEctThresholdEnable() bool {
	if x != nil && x.EcnEctThresholdEnable != nil {
		return *x.EcnEctThresholdEnable
	}
	return false
}

func (x *CreateSwitchRequest) GetVxlanDefaultRouterMac() []byte {
	if x != nil {
		return x.VxlanDefaultRouterMac
	}
	return nil
}

func (x *CreateSwitchRequest) GetVxlanDefaultPort() uint32 {
	if x != nil && x.VxlanDefaultPort != nil {
		return *x.VxlanDefaultPort
	}
	return 0
}

func (x *CreateSwitchRequest) GetUninitDataPlaneOnRemoval() bool {
	if x != nil && x.UninitDataPlaneOnRemoval != nil {
		return *x.UninitDataPlaneOnRemoval
	}
	return false
}

func (x *CreateSwitchRequest) GetTamObjectId() []uint64 {
	if x != nil {
		return x.TamObjectId
	}
	return nil
}

func (x *CreateSwitchRequest) GetPreShutdown() bool {
	if x != nil && x.PreShutdown != nil {
		return *x.PreShutdown
	}
	return false
}

func (x *CreateSwitchRequest) GetNatZoneCounterObjectId() uint64 {
	if x != nil && x.NatZoneCounterObjectId != nil {
		return *x.NatZoneCounterObjectId
	}
	return 0
}

func (x *CreateSwitchRequest) GetNatEnable() bool {
	if x != nil && x.NatEnable != nil {
		return *x.NatEnable
	}
	return false
}

func (x *CreateSwitchRequest) GetHardwareAccessBus() SwitchHardwareAccessBus {
	if x != nil && x.HardwareAccessBus != nil {
		return *x.HardwareAccessBus
	}
	return SwitchHardwareAccessBus_SWITCH_HARDWARE_ACCESS_BUS_UNSPECIFIED
}

func (x *CreateSwitchRequest) GetPlatfromContext() uint64 {
	if x != nil && x.PlatfromContext != nil {
		return *x.PlatfromContext
	}
	return 0
}

func (x *CreateSwitchRequest) GetFirmwareDownloadBroadcast() bool {
	if x != nil && x.FirmwareDownloadBroadcast != nil {
		return *x.FirmwareDownloadBroadcast
	}
	return false
}

func (x *CreateSwitchRequest) GetFirmwareLoadMethod() SwitchFirmwareLoadMethod {
	if x != nil && x.FirmwareLoadMethod != nil {
		return *x.FirmwareLoadMethod
	}
	return SwitchFirmwareLoadMethod_SWITCH_FIRMWARE_LOAD_METHOD_UNSPECIFIED
}

func (x *CreateSwitchRequest) GetFirmwareLoadType() SwitchFirmwareLoadType {
	if x != nil && x.FirmwareLoadType != nil {
		return *x.FirmwareLoadType
	}
	return SwitchFirmwareLoadType_SWITCH_FIRMWARE_LOAD_TYPE_UNSPECIFIED
}

func (x *CreateSwitchRequest) GetFirmwareDownloadExecute() bool {
	if x != nil && x.FirmwareDownloadExecute != nil {
		return *x.FirmwareDownloadExecute
	}
	return false
}

func (x *CreateSwitchRequest) GetFirmwareBroadcastStop() bool {
	if x != nil && x.FirmwareBroadcastStop != nil {
		return *x.FirmwareBroadcastStop
	}
	return false
}

func (x *CreateSwitchRequest) GetFirmwareVerifyAndInitSwitch() bool {
	if x != nil && x.FirmwareVerifyAndInitSwitch != nil {
		return *x.FirmwareVerifyAndInitSwitch
	}
	return false
}

func (x *CreateSwitchRequest) GetType() SwitchType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SwitchType_SWITCH_TYPE_UNSPECIFIED
}

func (x *CreateSwitchRequest) GetMacsecObjectList() []uint64 {
	if x != nil {
		return x.MacsecObjectList
	}
	return nil
}

func (x *CreateSwitchRequest) GetQosMplsExpToTcMap() uint64 {
	if x != nil && x.QosMplsExpToTcMap != nil {
		return *x.QosMplsExpToTcMap
	}
	return 0
}

func (x *CreateSwitchRequest) GetQosMplsExpToColorMap() uint64 {
	if x != nil && x.QosMplsExpToColorMap != nil {
		return *x.QosMplsExpToColorMap
	}
	return 0
}

func (x *CreateSwitchRequest) GetQosTcAndColorToMplsExpMap() uint64 {
	if x != nil && x.QosTcAndColorToMplsExpMap != nil {
		return *x.QosTcAndColorToMplsExpMap
	}
	return 0
}

func (x *CreateSwitchRequest) GetSwitchId() uint32 {
	if x != nil && x.SwitchId != nil {
		return *x.SwitchId
	}
	return 0
}

func (x *CreateSwitchRequest) GetMaxSystemCores() uint32 {
	if x != nil && x.MaxSystemCores != nil {
		return *x.MaxSystemCores
	}
	return 0
}

func (x *CreateSwitchRequest) GetSystemPortConfigList() []*SystemPortConfig {
	if x != nil {
		return x.SystemPortConfigList
	}
	return nil
}

func (x *CreateSwitchRequest) GetFailoverConfigMode() SwitchFailoverConfigMode {
	if x != nil && x.FailoverConfigMode != nil {
		return *x.FailoverConfigMode
	}
	return SwitchFailoverConfigMode_SWITCH_FAILOVER_CONFIG_MODE_UNSPECIFIED
}

func (x *CreateSwitchRequest) GetTunnelObjectsList() []uint64 {
	if x != nil {
		return x.TunnelObjectsList
	}
	return nil
}

func (x *CreateSwitchRequest) GetPreIngressAcl() uint64 {
	if x != nil && x.PreIngressAcl != nil {
		return *x.PreIngressAcl
	}
	return 0
}

func (x *CreateSwitchRequest) GetSlaveMdioAddrList() []uint32 {
	if x != nil {
		return x.SlaveMdioAddrList
	}
	return nil
}

func (x *CreateSwitchRequest) GetQosDscpToForwardingClassMap() uint64 {
	if x != nil && x.QosDscpToForwardingClassMap != nil {
		return *x.QosDscpToForwardingClassMap
	}
	return 0
}

func (x *CreateSwitchRequest) GetQosMplsExpToForwardingClassMap() uint64 {
	if x != nil && x.QosMplsExpToForwardingClassMap != nil {
		return *x.QosMplsExpToForwardingClassMap
	}
	return 0
}

func (x *CreateSwitchRequest) GetIpsecObjectId() uint64 {
	if x != nil && x.IpsecObjectId != nil {
		return *x.IpsecObjectId
	}
	return 0
}

func (x *CreateSwitchRequest) GetIpsecSaTagTpid() uint32 {
	if x != nil && x.IpsecSaTagTpid != nil {
		return *x.IpsecSaTagTpid
	}
	return 0
}

func (x *CreateSwitchRequest) GetEcmpMemberCount() uint32 {
	if x != nil && x.EcmpMemberCount != nil {
		return *x.EcmpMemberCount
	}
	return 0
}

type CreateSwitchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateSwitchResponse) Reset() {
	*x = CreateSwitchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSwitchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSwitchResponse) ProtoMessage() {}

func (x *CreateSwitchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSwitchResponse.ProtoReflect.Descriptor instead.
func (*CreateSwitchResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSwitchResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveSwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveSwitchRequest) Reset() {
	*x = RemoveSwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSwitchRequest) ProtoMessage() {}

func (x *RemoveSwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSwitchRequest.ProtoReflect.Descriptor instead.
func (*RemoveSwitchRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveSwitchRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveSwitchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSwitchResponse) Reset() {
	*x = RemoveSwitchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSwitchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSwitchResponse) ProtoMessage() {}

func (x *RemoveSwitchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSwitchResponse.ProtoReflect.Descriptor instead.
func (*RemoveSwitchResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{3}
}

type SetSwitchAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                            uint64                    `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	IngressAcl                     *uint64                   `protobuf:"varint,2,opt,name=ingress_acl,json=ingressAcl,proto3,oneof" json:"ingress_acl,omitempty"`
	EgressAcl                      *uint64                   `protobuf:"varint,3,opt,name=egress_acl,json=egressAcl,proto3,oneof" json:"egress_acl,omitempty"`
	RestartWarm                    *bool                     `protobuf:"varint,4,opt,name=restart_warm,json=restartWarm,proto3,oneof" json:"restart_warm,omitempty"`
	WarmRecover                    *bool                     `protobuf:"varint,5,opt,name=warm_recover,json=warmRecover,proto3,oneof" json:"warm_recover,omitempty"`
	SwitchingMode                  *SwitchSwitchingMode      `protobuf:"varint,6,opt,name=switching_mode,json=switchingMode,proto3,enum=lemming.dataplane.sai.SwitchSwitchingMode,oneof" json:"switching_mode,omitempty"`
	BcastCpuFloodEnable            *bool                     `protobuf:"varint,7,opt,name=bcast_cpu_flood_enable,json=bcastCpuFloodEnable,proto3,oneof" json:"bcast_cpu_flood_enable,omitempty"`
	McastCpuFloodEnable            *bool                     `protobuf:"varint,8,opt,name=mcast_cpu_flood_enable,json=mcastCpuFloodEnable,proto3,oneof" json:"mcast_cpu_flood_enable,omitempty"`
	SrcMacAddress                  []byte                    `protobuf:"bytes,9,opt,name=src_mac_address,json=srcMacAddress,proto3,oneof" json:"src_mac_address,omitempty"`
	MaxLearnedAddresses            *uint32                   `protobuf:"varint,10,opt,name=max_learned_addresses,json=maxLearnedAddresses,proto3,oneof" json:"max_learned_addresses,omitempty"`
	FdbAgingTime                   *uint32                   `protobuf:"varint,11,opt,name=fdb_aging_time,json=fdbAgingTime,proto3,oneof" json:"fdb_aging_time,omitempty"`
	FdbUnicastMissPacketAction     *PacketAction             `protobuf:"varint,12,opt,name=fdb_unicast_miss_packet_action,json=fdbUnicastMissPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"fdb_unicast_miss_packet_action,omitempty"`
	FdbBroadcastMissPacketAction   *PacketAction             `protobuf:"varint,13,opt,name=fdb_broadcast_miss_packet_action,json=fdbBroadcastMissPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"fdb_broadcast_miss_packet_action,omitempty"`
	FdbMulticastMissPacketAction   *PacketAction             `protobuf:"varint,14,opt,name=fdb_multicast_miss_packet_action,json=fdbMulticastMissPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"fdb_multicast_miss_packet_action,omitempty"`
	EcmpDefaultHashAlgorithm       *HashAlgorithm            `protobuf:"varint,15,opt,name=ecmp_default_hash_algorithm,json=ecmpDefaultHashAlgorithm,proto3,enum=lemming.dataplane.sai.HashAlgorithm,oneof" json:"ecmp_default_hash_algorithm,omitempty"`
	EcmpDefaultHashSeed            *uint32                   `protobuf:"varint,16,opt,name=ecmp_default_hash_seed,json=ecmpDefaultHashSeed,proto3,oneof" json:"ecmp_default_hash_seed,omitempty"`
	EcmpDefaultHashOffset          *uint32                   `protobuf:"varint,17,opt,name=ecmp_default_hash_offset,json=ecmpDefaultHashOffset,proto3,oneof" json:"ecmp_default_hash_offset,omitempty"`
	EcmpDefaultSymmetricHash       *bool                     `protobuf:"varint,18,opt,name=ecmp_default_symmetric_hash,json=ecmpDefaultSymmetricHash,proto3,oneof" json:"ecmp_default_symmetric_hash,omitempty"`
	EcmpHashIpv4                   *uint64                   `protobuf:"varint,19,opt,name=ecmp_hash_ipv4,json=ecmpHashIpv4,proto3,oneof" json:"ecmp_hash_ipv4,omitempty"`
	EcmpHashIpv4InIpv4             *uint64                   `protobuf:"varint,20,opt,name=ecmp_hash_ipv4_in_ipv4,json=ecmpHashIpv4InIpv4,proto3,oneof" json:"ecmp_hash_ipv4_in_ipv4,omitempty"`
	EcmpHashIpv6                   *uint64                   `protobuf:"varint,21,opt,name=ecmp_hash_ipv6,json=ecmpHashIpv6,proto3,oneof" json:"ecmp_hash_ipv6,omitempty"`
	LagDefaultHashAlgorithm        *HashAlgorithm            `protobuf:"varint,22,opt,name=lag_default_hash_algorithm,json=lagDefaultHashAlgorithm,proto3,enum=lemming.dataplane.sai.HashAlgorithm,oneof" json:"lag_default_hash_algorithm,omitempty"`
	LagDefaultHashSeed             *uint32                   `protobuf:"varint,23,opt,name=lag_default_hash_seed,json=lagDefaultHashSeed,proto3,oneof" json:"lag_default_hash_seed,omitempty"`
	LagDefaultHashOffset           *uint32                   `protobuf:"varint,24,opt,name=lag_default_hash_offset,json=lagDefaultHashOffset,proto3,oneof" json:"lag_default_hash_offset,omitempty"`
	LagDefaultSymmetricHash        *bool                     `protobuf:"varint,25,opt,name=lag_default_symmetric_hash,json=lagDefaultSymmetricHash,proto3,oneof" json:"lag_default_symmetric_hash,omitempty"`
	LagHashIpv4                    *uint64                   `protobuf:"varint,26,opt,name=lag_hash_ipv4,json=lagHashIpv4,proto3,oneof" json:"lag_hash_ipv4,omitempty"`
	LagHashIpv4InIpv4              *uint64                   `protobuf:"varint,27,opt,name=lag_hash_ipv4_in_ipv4,json=lagHashIpv4InIpv4,proto3,oneof" json:"lag_hash_ipv4_in_ipv4,omitempty"`
	LagHashIpv6                    *uint64                   `protobuf:"varint,28,opt,name=lag_hash_ipv6,json=lagHashIpv6,proto3,oneof" json:"lag_hash_ipv6,omitempty"`
	CounterRefreshInterval         *uint32                   `protobuf:"varint,29,opt,name=counter_refresh_interval,json=counterRefreshInterval,proto3,oneof" json:"counter_refresh_interval,omitempty"`
	QosDefaultTc                   *uint32                   `protobuf:"varint,30,opt,name=qos_default_tc,json=qosDefaultTc,proto3,oneof" json:"qos_default_tc,omitempty"`
	QosDot1PToTcMap                *uint64                   `protobuf:"varint,31,opt,name=qos_dot1p_to_tc_map,json=qosDot1pToTcMap,proto3,oneof" json:"qos_dot1p_to_tc_map,omitempty"`
	QosDot1PToColorMap             *uint64                   `protobuf:"varint,32,opt,name=qos_dot1p_to_color_map,json=qosDot1pToColorMap,proto3,oneof" json:"qos_dot1p_to_color_map,omitempty"`
	QosDscpToTcMap                 *uint64                   `protobuf:"varint,33,opt,name=qos_dscp_to_tc_map,json=qosDscpToTcMap,proto3,oneof" json:"qos_dscp_to_tc_map,omitempty"`
	QosDscpToColorMap              *uint64                   `protobuf:"varint,34,opt,name=qos_dscp_to_color_map,json=qosDscpToColorMap,proto3,oneof" json:"qos_dscp_to_color_map,omitempty"`
	QosTcToQueueMap                *uint64                   `protobuf:"varint,35,opt,name=qos_tc_to_queue_map,json=qosTcToQueueMap,proto3,oneof" json:"qos_tc_to_queue_map,omitempty"`
	QosTcAndColorToDot1PMap        *uint64                   `protobuf:"varint,36,opt,name=qos_tc_and_color_to_dot1p_map,json=qosTcAndColorToDot1pMap,proto3,oneof" json:"qos_tc_and_color_to_dot1p_map,omitempty"`
	QosTcAndColorToDscpMap         *uint64                   `protobuf:"varint,37,opt,name=qos_tc_and_color_to_dscp_map,json=qosTcAndColorToDscpMap,proto3,oneof" json:"qos_tc_and_color_to_dscp_map,omitempty"`
	SwitchShellEnable              *bool                     `protobuf:"varint,38,opt,name=switch_shell_enable,json=switchShellEnable,proto3,oneof" json:"switch_shell_enable,omitempty"`
	FastApiEnable                  *bool                     `protobuf:"varint,39,opt,name=fast_api_enable,json=fastApiEnable,proto3,oneof" json:"fast_api_enable,omitempty"`
	MirrorTc                       *uint32                   `protobuf:"varint,40,opt,name=mirror_tc,json=mirrorTc,proto3,oneof" json:"mirror_tc,omitempty"`
	PfcDlrPacketAction             *PacketAction             `protobuf:"varint,41,opt,name=pfc_dlr_packet_action,json=pfcDlrPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"pfc_dlr_packet_action,omitempty"`
	PfcTcDldInterval               []*UintMap                `protobuf:"bytes,42,rep,name=pfc_tc_dld_interval,json=pfcTcDldInterval,proto3" json:"pfc_tc_dld_interval,omitempty"`
	PfcTcDlrInterval               []*UintMap                `protobuf:"bytes,43,rep,name=pfc_tc_dlr_interval,json=pfcTcDlrInterval,proto3" json:"pfc_tc_dlr_interval,omitempty"`
	TpidOuterVlan                  *uint32                   `protobuf:"varint,44,opt,name=tpid_outer_vlan,json=tpidOuterVlan,proto3,oneof" json:"tpid_outer_vlan,omitempty"`
	TpidInnerVlan                  *uint32                   `protobuf:"varint,45,opt,name=tpid_inner_vlan,json=tpidInnerVlan,proto3,oneof" json:"tpid_inner_vlan,omitempty"`
	CrcCheckEnable                 *bool                     `protobuf:"varint,46,opt,name=crc_check_enable,json=crcCheckEnable,proto3,oneof" json:"crc_check_enable,omitempty"`
	CrcRecalculationEnable         *bool                     `protobuf:"varint,47,opt,name=crc_recalculation_enable,json=crcRecalculationEnable,proto3,oneof" json:"crc_recalculation_enable,omitempty"`
	EcnEctThresholdEnable          *bool                     `protobuf:"varint,48,opt,name=ecn_ect_threshold_enable,json=ecnEctThresholdEnable,proto3,oneof" json:"ecn_ect_threshold_enable,omitempty"`
	VxlanDefaultRouterMac          []byte                    `protobuf:"bytes,49,opt,name=vxlan_default_router_mac,json=vxlanDefaultRouterMac,proto3,oneof" json:"vxlan_default_router_mac,omitempty"`
	VxlanDefaultPort               *uint32                   `protobuf:"varint,50,opt,name=vxlan_default_port,json=vxlanDefaultPort,proto3,oneof" json:"vxlan_default_port,omitempty"`
	UninitDataPlaneOnRemoval       *bool                     `protobuf:"varint,51,opt,name=uninit_data_plane_on_removal,json=uninitDataPlaneOnRemoval,proto3,oneof" json:"uninit_data_plane_on_removal,omitempty"`
	TamObjectId                    []uint64                  `protobuf:"varint,52,rep,packed,name=tam_object_id,json=tamObjectId,proto3" json:"tam_object_id,omitempty"`
	PreShutdown                    *bool                     `protobuf:"varint,53,opt,name=pre_shutdown,json=preShutdown,proto3,oneof" json:"pre_shutdown,omitempty"`
	NatZoneCounterObjectId         *uint64                   `protobuf:"varint,54,opt,name=nat_zone_counter_object_id,json=natZoneCounterObjectId,proto3,oneof" json:"nat_zone_counter_object_id,omitempty"`
	NatEnable                      *bool                     `protobuf:"varint,55,opt,name=nat_enable,json=natEnable,proto3,oneof" json:"nat_enable,omitempty"`
	FirmwareDownloadExecute        *bool                     `protobuf:"varint,56,opt,name=firmware_download_execute,json=firmwareDownloadExecute,proto3,oneof" json:"firmware_download_execute,omitempty"`
	FirmwareBroadcastStop          *bool                     `protobuf:"varint,57,opt,name=firmware_broadcast_stop,json=firmwareBroadcastStop,proto3,oneof" json:"firmware_broadcast_stop,omitempty"`
	FirmwareVerifyAndInitSwitch    *bool                     `protobuf:"varint,58,opt,name=firmware_verify_and_init_switch,json=firmwareVerifyAndInitSwitch,proto3,oneof" json:"firmware_verify_and_init_switch,omitempty"`
	MacsecObjectList               []uint64                  `protobuf:"varint,59,rep,packed,name=macsec_object_list,json=macsecObjectList,proto3" json:"macsec_object_list,omitempty"`
	QosMplsExpToTcMap              *uint64                   `protobuf:"varint,60,opt,name=qos_mpls_exp_to_tc_map,json=qosMplsExpToTcMap,proto3,oneof" json:"qos_mpls_exp_to_tc_map,omitempty"`
	QosMplsExpToColorMap           *uint64                   `protobuf:"varint,61,opt,name=qos_mpls_exp_to_color_map,json=qosMplsExpToColorMap,proto3,oneof" json:"qos_mpls_exp_to_color_map,omitempty"`
	QosTcAndColorToMplsExpMap      *uint64                   `protobuf:"varint,62,opt,name=qos_tc_and_color_to_mpls_exp_map,json=qosTcAndColorToMplsExpMap,proto3,oneof" json:"qos_tc_and_color_to_mpls_exp_map,omitempty"`
	FailoverConfigMode             *SwitchFailoverConfigMode `protobuf:"varint,63,opt,name=failover_config_mode,json=failoverConfigMode,proto3,enum=lemming.dataplane.sai.SwitchFailoverConfigMode,oneof" json:"failover_config_mode,omitempty"`
	TunnelObjectsList              []uint64                  `protobuf:"varint,64,rep,packed,name=tunnel_objects_list,json=tunnelObjectsList,proto3" json:"tunnel_objects_list,omitempty"`
	PreIngressAcl                  *uint64                   `protobuf:"varint,65,opt,name=pre_ingress_acl,json=preIngressAcl,proto3,oneof" json:"pre_ingress_acl,omitempty"`
	QosDscpToForwardingClassMap    *uint64                   `protobuf:"varint,66,opt,name=qos_dscp_to_forwarding_class_map,json=qosDscpToForwardingClassMap,proto3,oneof" json:"qos_dscp_to_forwarding_class_map,omitempty"`
	QosMplsExpToForwardingClassMap *uint64                   `protobuf:"varint,67,opt,name=qos_mpls_exp_to_forwarding_class_map,json=qosMplsExpToForwardingClassMap,proto3,oneof" json:"qos_mpls_exp_to_forwarding_class_map,omitempty"`
	IpsecObjectId                  *uint64                   `protobuf:"varint,68,opt,name=ipsec_object_id,json=ipsecObjectId,proto3,oneof" json:"ipsec_object_id,omitempty"`
	IpsecSaTagTpid                 *uint32                   `protobuf:"varint,69,opt,name=ipsec_sa_tag_tpid,json=ipsecSaTagTpid,proto3,oneof" json:"ipsec_sa_tag_tpid,omitempty"`
	EcmpMemberCount                *uint32                   `protobuf:"varint,70,opt,name=ecmp_member_count,json=ecmpMemberCount,proto3,oneof" json:"ecmp_member_count,omitempty"`
}

func (x *SetSwitchAttributeRequest) Reset() {
	*x = SetSwitchAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSwitchAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSwitchAttributeRequest) ProtoMessage() {}

func (x *SetSwitchAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSwitchAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetSwitchAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{4}
}

func (x *SetSwitchAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetIngressAcl() uint64 {
	if x != nil && x.IngressAcl != nil {
		return *x.IngressAcl
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetEgressAcl() uint64 {
	if x != nil && x.EgressAcl != nil {
		return *x.EgressAcl
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetRestartWarm() bool {
	if x != nil && x.RestartWarm != nil {
		return *x.RestartWarm
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetWarmRecover() bool {
	if x != nil && x.WarmRecover != nil {
		return *x.WarmRecover
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetSwitchingMode() SwitchSwitchingMode {
	if x != nil && x.SwitchingMode != nil {
		return *x.SwitchingMode
	}
	return SwitchSwitchingMode_SWITCH_SWITCHING_MODE_UNSPECIFIED
}

func (x *SetSwitchAttributeRequest) GetBcastCpuFloodEnable() bool {
	if x != nil && x.BcastCpuFloodEnable != nil {
		return *x.BcastCpuFloodEnable
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetMcastCpuFloodEnable() bool {
	if x != nil && x.McastCpuFloodEnable != nil {
		return *x.McastCpuFloodEnable
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *SetSwitchAttributeRequest) GetMaxLearnedAddresses() uint32 {
	if x != nil && x.MaxLearnedAddresses != nil {
		return *x.MaxLearnedAddresses
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetFdbAgingTime() uint32 {
	if x != nil && x.FdbAgingTime != nil {
		return *x.FdbAgingTime
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetFdbUnicastMissPacketAction() PacketAction {
	if x != nil && x.FdbUnicastMissPacketAction != nil {
		return *x.FdbUnicastMissPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetSwitchAttributeRequest) GetFdbBroadcastMissPacketAction() PacketAction {
	if x != nil && x.FdbBroadcastMissPacketAction != nil {
		return *x.FdbBroadcastMissPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetSwitchAttributeRequest) GetFdbMulticastMissPacketAction() PacketAction {
	if x != nil && x.FdbMulticastMissPacketAction != nil {
		return *x.FdbMulticastMissPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetSwitchAttributeRequest) GetEcmpDefaultHashAlgorithm() HashAlgorithm {
	if x != nil && x.EcmpDefaultHashAlgorithm != nil {
		return *x.EcmpDefaultHashAlgorithm
	}
	return HashAlgorithm_HASH_ALGORITHM_UNSPECIFIED
}

func (x *SetSwitchAttributeRequest) GetEcmpDefaultHashSeed() uint32 {
	if x != nil && x.EcmpDefaultHashSeed != nil {
		return *x.EcmpDefaultHashSeed
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetEcmpDefaultHashOffset() uint32 {
	if x != nil && x.EcmpDefaultHashOffset != nil {
		return *x.EcmpDefaultHashOffset
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetEcmpDefaultSymmetricHash() bool {
	if x != nil && x.EcmpDefaultSymmetricHash != nil {
		return *x.EcmpDefaultSymmetricHash
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetEcmpHashIpv4() uint64 {
	if x != nil && x.EcmpHashIpv4 != nil {
		return *x.EcmpHashIpv4
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetEcmpHashIpv4InIpv4() uint64 {
	if x != nil && x.EcmpHashIpv4InIpv4 != nil {
		return *x.EcmpHashIpv4InIpv4
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetEcmpHashIpv6() uint64 {
	if x != nil && x.EcmpHashIpv6 != nil {
		return *x.EcmpHashIpv6
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetLagDefaultHashAlgorithm() HashAlgorithm {
	if x != nil && x.LagDefaultHashAlgorithm != nil {
		return *x.LagDefaultHashAlgorithm
	}
	return HashAlgorithm_HASH_ALGORITHM_UNSPECIFIED
}

func (x *SetSwitchAttributeRequest) GetLagDefaultHashSeed() uint32 {
	if x != nil && x.LagDefaultHashSeed != nil {
		return *x.LagDefaultHashSeed
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetLagDefaultHashOffset() uint32 {
	if x != nil && x.LagDefaultHashOffset != nil {
		return *x.LagDefaultHashOffset
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetLagDefaultSymmetricHash() bool {
	if x != nil && x.LagDefaultSymmetricHash != nil {
		return *x.LagDefaultSymmetricHash
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetLagHashIpv4() uint64 {
	if x != nil && x.LagHashIpv4 != nil {
		return *x.LagHashIpv4
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetLagHashIpv4InIpv4() uint64 {
	if x != nil && x.LagHashIpv4InIpv4 != nil {
		return *x.LagHashIpv4InIpv4
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetLagHashIpv6() uint64 {
	if x != nil && x.LagHashIpv6 != nil {
		return *x.LagHashIpv6
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetCounterRefreshInterval() uint32 {
	if x != nil && x.CounterRefreshInterval != nil {
		return *x.CounterRefreshInterval
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetQosDefaultTc() uint32 {
	if x != nil && x.QosDefaultTc != nil {
		return *x.QosDefaultTc
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetQosDot1PToTcMap() uint64 {
	if x != nil && x.QosDot1PToTcMap != nil {
		return *x.QosDot1PToTcMap
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetQosDot1PToColorMap() uint64 {
	if x != nil && x.QosDot1PToColorMap != nil {
		return *x.QosDot1PToColorMap
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetQosDscpToTcMap() uint64 {
	if x != nil && x.QosDscpToTcMap != nil {
		return *x.QosDscpToTcMap
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetQosDscpToColorMap() uint64 {
	if x != nil && x.QosDscpToColorMap != nil {
		return *x.QosDscpToColorMap
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetQosTcToQueueMap() uint64 {
	if x != nil && x.QosTcToQueueMap != nil {
		return *x.QosTcToQueueMap
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetQosTcAndColorToDot1PMap() uint64 {
	if x != nil && x.QosTcAndColorToDot1PMap != nil {
		return *x.QosTcAndColorToDot1PMap
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetQosTcAndColorToDscpMap() uint64 {
	if x != nil && x.QosTcAndColorToDscpMap != nil {
		return *x.QosTcAndColorToDscpMap
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetSwitchShellEnable() bool {
	if x != nil && x.SwitchShellEnable != nil {
		return *x.SwitchShellEnable
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetFastApiEnable() bool {
	if x != nil && x.FastApiEnable != nil {
		return *x.FastApiEnable
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetMirrorTc() uint32 {
	if x != nil && x.MirrorTc != nil {
		return *x.MirrorTc
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetPfcDlrPacketAction() PacketAction {
	if x != nil && x.PfcDlrPacketAction != nil {
		return *x.PfcDlrPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetSwitchAttributeRequest) GetPfcTcDldInterval() []*UintMap {
	if x != nil {
		return x.PfcTcDldInterval
	}
	return nil
}

func (x *SetSwitchAttributeRequest) GetPfcTcDlrInterval() []*UintMap {
	if x != nil {
		return x.PfcTcDlrInterval
	}
	return nil
}

func (x *SetSwitchAttributeRequest) GetTpidOuterVlan() uint32 {
	if x != nil && x.TpidOuterVlan != nil {
		return *x.TpidOuterVlan
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetTpidInnerVlan() uint32 {
	if x != nil && x.TpidInnerVlan != nil {
		return *x.TpidInnerVlan
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetCrcCheckEnable() bool {
	if x != nil && x.CrcCheckEnable != nil {
		return *x.CrcCheckEnable
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetCrcRecalculationEnable() bool {
	if x != nil && x.CrcRecalculationEnable != nil {
		return *x.CrcRecalculationEnable
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetEcnEctThresholdEnable() bool {
	if x != nil && x.EcnEctThresholdEnable != nil {
		return *x.EcnEctThresholdEnable
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetVxlanDefaultRouterMac() []byte {
	if x != nil {
		return x.VxlanDefaultRouterMac
	}
	return nil
}

func (x *SetSwitchAttributeRequest) GetVxlanDefaultPort() uint32 {
	if x != nil && x.VxlanDefaultPort != nil {
		return *x.VxlanDefaultPort
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetUninitDataPlaneOnRemoval() bool {
	if x != nil && x.UninitDataPlaneOnRemoval != nil {
		return *x.UninitDataPlaneOnRemoval
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetTamObjectId() []uint64 {
	if x != nil {
		return x.TamObjectId
	}
	return nil
}

func (x *SetSwitchAttributeRequest) GetPreShutdown() bool {
	if x != nil && x.PreShutdown != nil {
		return *x.PreShutdown
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetNatZoneCounterObjectId() uint64 {
	if x != nil && x.NatZoneCounterObjectId != nil {
		return *x.NatZoneCounterObjectId
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetNatEnable() bool {
	if x != nil && x.NatEnable != nil {
		return *x.NatEnable
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetFirmwareDownloadExecute() bool {
	if x != nil && x.FirmwareDownloadExecute != nil {
		return *x.FirmwareDownloadExecute
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetFirmwareBroadcastStop() bool {
	if x != nil && x.FirmwareBroadcastStop != nil {
		return *x.FirmwareBroadcastStop
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetFirmwareVerifyAndInitSwitch() bool {
	if x != nil && x.FirmwareVerifyAndInitSwitch != nil {
		return *x.FirmwareVerifyAndInitSwitch
	}
	return false
}

func (x *SetSwitchAttributeRequest) GetMacsecObjectList() []uint64 {
	if x != nil {
		return x.MacsecObjectList
	}
	return nil
}

func (x *SetSwitchAttributeRequest) GetQosMplsExpToTcMap() uint64 {
	if x != nil && x.QosMplsExpToTcMap != nil {
		return *x.QosMplsExpToTcMap
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetQosMplsExpToColorMap() uint64 {
	if x != nil && x.QosMplsExpToColorMap != nil {
		return *x.QosMplsExpToColorMap
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetQosTcAndColorToMplsExpMap() uint64 {
	if x != nil && x.QosTcAndColorToMplsExpMap != nil {
		return *x.QosTcAndColorToMplsExpMap
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetFailoverConfigMode() SwitchFailoverConfigMode {
	if x != nil && x.FailoverConfigMode != nil {
		return *x.FailoverConfigMode
	}
	return SwitchFailoverConfigMode_SWITCH_FAILOVER_CONFIG_MODE_UNSPECIFIED
}

func (x *SetSwitchAttributeRequest) GetTunnelObjectsList() []uint64 {
	if x != nil {
		return x.TunnelObjectsList
	}
	return nil
}

func (x *SetSwitchAttributeRequest) GetPreIngressAcl() uint64 {
	if x != nil && x.PreIngressAcl != nil {
		return *x.PreIngressAcl
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetQosDscpToForwardingClassMap() uint64 {
	if x != nil && x.QosDscpToForwardingClassMap != nil {
		return *x.QosDscpToForwardingClassMap
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetQosMplsExpToForwardingClassMap() uint64 {
	if x != nil && x.QosMplsExpToForwardingClassMap != nil {
		return *x.QosMplsExpToForwardingClassMap
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetIpsecObjectId() uint64 {
	if x != nil && x.IpsecObjectId != nil {
		return *x.IpsecObjectId
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetIpsecSaTagTpid() uint32 {
	if x != nil && x.IpsecSaTagTpid != nil {
		return *x.IpsecSaTagTpid
	}
	return 0
}

func (x *SetSwitchAttributeRequest) GetEcmpMemberCount() uint32 {
	if x != nil && x.EcmpMemberCount != nil {
		return *x.EcmpMemberCount
	}
	return 0
}

type SetSwitchAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSwitchAttributeResponse) Reset() {
	*x = SetSwitchAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSwitchAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSwitchAttributeResponse) ProtoMessage() {}

func (x *SetSwitchAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSwitchAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetSwitchAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{5}
}

type SwitchStateChangeNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SwitchStateChangeNotificationRequest) Reset() {
	*x = SwitchStateChangeNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchStateChangeNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchStateChangeNotificationRequest) ProtoMessage() {}

func (x *SwitchStateChangeNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchStateChangeNotificationRequest.ProtoReflect.Descriptor instead.
func (*SwitchStateChangeNotificationRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{6}
}

type SwitchStateChangeNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId         uint64           `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	SwitchOperStatus SwitchOperStatus `protobuf:"varint,2,opt,name=switch_oper_status,json=switchOperStatus,proto3,enum=lemming.dataplane.sai.SwitchOperStatus" json:"switch_oper_status,omitempty"`
}

func (x *SwitchStateChangeNotificationResponse) Reset() {
	*x = SwitchStateChangeNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchStateChangeNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchStateChangeNotificationResponse) ProtoMessage() {}

func (x *SwitchStateChangeNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchStateChangeNotificationResponse.ProtoReflect.Descriptor instead.
func (*SwitchStateChangeNotificationResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{7}
}

func (x *SwitchStateChangeNotificationResponse) GetSwitchId() uint64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *SwitchStateChangeNotificationResponse) GetSwitchOperStatus() SwitchOperStatus {
	if x != nil {
		return x.SwitchOperStatus
	}
	return SwitchOperStatus_SWITCH_OPER_STATUS_UNSPECIFIED
}

type SwitchShutdownRequestNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SwitchShutdownRequestNotificationRequest) Reset() {
	*x = SwitchShutdownRequestNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchShutdownRequestNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchShutdownRequestNotificationRequest) ProtoMessage() {}

func (x *SwitchShutdownRequestNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchShutdownRequestNotificationRequest.ProtoReflect.Descriptor instead.
func (*SwitchShutdownRequestNotificationRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{8}
}

type SwitchShutdownRequestNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId uint64 `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
}

func (x *SwitchShutdownRequestNotificationResponse) Reset() {
	*x = SwitchShutdownRequestNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchShutdownRequestNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchShutdownRequestNotificationResponse) ProtoMessage() {}

func (x *SwitchShutdownRequestNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchShutdownRequestNotificationResponse.ProtoReflect.Descriptor instead.
func (*SwitchShutdownRequestNotificationResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{9}
}

func (x *SwitchShutdownRequestNotificationResponse) GetSwitchId() uint64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

type FdbEventNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FdbEventNotificationRequest) Reset() {
	*x = FdbEventNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FdbEventNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FdbEventNotificationRequest) ProtoMessage() {}

func (x *FdbEventNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FdbEventNotificationRequest.ProtoReflect.Descriptor instead.
func (*FdbEventNotificationRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{10}
}

type FdbEventNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FdbEventNotificationData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FdbEventNotificationResponse) Reset() {
	*x = FdbEventNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FdbEventNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FdbEventNotificationResponse) ProtoMessage() {}

func (x *FdbEventNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FdbEventNotificationResponse.ProtoReflect.Descriptor instead.
func (*FdbEventNotificationResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{11}
}

func (x *FdbEventNotificationResponse) GetData() []*FdbEventNotificationData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PortStateChangeNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PortStateChangeNotificationRequest) Reset() {
	*x = PortStateChangeNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStateChangeNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStateChangeNotificationRequest) ProtoMessage() {}

func (x *PortStateChangeNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStateChangeNotificationRequest.ProtoReflect.Descriptor instead.
func (*PortStateChangeNotificationRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{12}
}

type PortStateChangeNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*PortOperStatusNotification `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PortStateChangeNotificationResponse) Reset() {
	*x = PortStateChangeNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStateChangeNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStateChangeNotificationResponse) ProtoMessage() {}

func (x *PortStateChangeNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStateChangeNotificationResponse.ProtoReflect.Descriptor instead.
func (*PortStateChangeNotificationResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{13}
}

func (x *PortStateChangeNotificationResponse) GetData() []*PortOperStatusNotification {
	if x != nil {
		return x.Data
	}
	return nil
}

type PacketEventNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PacketEventNotificationRequest) Reset() {
	*x = PacketEventNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketEventNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketEventNotificationRequest) ProtoMessage() {}

func (x *PacketEventNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketEventNotificationRequest.ProtoReflect.Descriptor instead.
func (*PacketEventNotificationRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{14}
}

type PacketEventNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwitchId uint64                   `protobuf:"varint,1,opt,name=switch_id,json=switchId,proto3" json:"switch_id,omitempty"`
	Buffer   []byte                   `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer,omitempty"`
	Attrs    []*HostifPacketAttribute `protobuf:"bytes,3,rep,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *PacketEventNotificationResponse) Reset() {
	*x = PacketEventNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PacketEventNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketEventNotificationResponse) ProtoMessage() {}

func (x *PacketEventNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketEventNotificationResponse.ProtoReflect.Descriptor instead.
func (*PacketEventNotificationResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{15}
}

func (x *PacketEventNotificationResponse) GetSwitchId() uint64 {
	if x != nil {
		return x.SwitchId
	}
	return 0
}

func (x *PacketEventNotificationResponse) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *PacketEventNotificationResponse) GetAttrs() []*HostifPacketAttribute {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type QueuePfcDeadlockNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueuePfcDeadlockNotificationRequest) Reset() {
	*x = QueuePfcDeadlockNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuePfcDeadlockNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePfcDeadlockNotificationRequest) ProtoMessage() {}

func (x *QueuePfcDeadlockNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePfcDeadlockNotificationRequest.ProtoReflect.Descriptor instead.
func (*QueuePfcDeadlockNotificationRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{16}
}

type QueuePfcDeadlockNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*QueueDeadlockNotificationData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *QueuePfcDeadlockNotificationResponse) Reset() {
	*x = QueuePfcDeadlockNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuePfcDeadlockNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePfcDeadlockNotificationResponse) ProtoMessage() {}

func (x *QueuePfcDeadlockNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePfcDeadlockNotificationResponse.ProtoReflect.Descriptor instead.
func (*QueuePfcDeadlockNotificationResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{17}
}

func (x *QueuePfcDeadlockNotificationResponse) GetData() []*QueueDeadlockNotificationData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BfdSessionStateChangeNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BfdSessionStateChangeNotificationRequest) Reset() {
	*x = BfdSessionStateChangeNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BfdSessionStateChangeNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfdSessionStateChangeNotificationRequest) ProtoMessage() {}

func (x *BfdSessionStateChangeNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfdSessionStateChangeNotificationRequest.ProtoReflect.Descriptor instead.
func (*BfdSessionStateChangeNotificationRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{18}
}

type BfdSessionStateChangeNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*BfdSessionStateChangeNotificationData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BfdSessionStateChangeNotificationResponse) Reset() {
	*x = BfdSessionStateChangeNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BfdSessionStateChangeNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BfdSessionStateChangeNotificationResponse) ProtoMessage() {}

func (x *BfdSessionStateChangeNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BfdSessionStateChangeNotificationResponse.ProtoReflect.Descriptor instead.
func (*BfdSessionStateChangeNotificationResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{19}
}

func (x *BfdSessionStateChangeNotificationResponse) GetData() []*BfdSessionStateChangeNotificationData {
	if x != nil {
		return x.Data
	}
	return nil
}

type TamEventNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TamEventNotificationRequest) Reset() {
	*x = TamEventNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamEventNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamEventNotificationRequest) ProtoMessage() {}

func (x *TamEventNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamEventNotificationRequest.ProtoReflect.Descriptor instead.
func (*TamEventNotificationRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{20}
}

type TamEventNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TamEventId uint64                     `protobuf:"varint,1,opt,name=tam_event_id,json=tamEventId,proto3" json:"tam_event_id,omitempty"`
	Buffer     []byte                     `protobuf:"bytes,2,opt,name=buffer,proto3" json:"buffer,omitempty"`
	Attrs      []*TamEventActionAttribute `protobuf:"bytes,3,rep,name=attrs,proto3" json:"attrs,omitempty"`
}

func (x *TamEventNotificationResponse) Reset() {
	*x = TamEventNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TamEventNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TamEventNotificationResponse) ProtoMessage() {}

func (x *TamEventNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TamEventNotificationResponse.ProtoReflect.Descriptor instead.
func (*TamEventNotificationResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{21}
}

func (x *TamEventNotificationResponse) GetTamEventId() uint64 {
	if x != nil {
		return x.TamEventId
	}
	return 0
}

func (x *TamEventNotificationResponse) GetBuffer() []byte {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *TamEventNotificationResponse) GetAttrs() []*TamEventActionAttribute {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type IpsecSaStatusChangeNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IpsecSaStatusChangeNotificationRequest) Reset() {
	*x = IpsecSaStatusChangeNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecSaStatusChangeNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecSaStatusChangeNotificationRequest) ProtoMessage() {}

func (x *IpsecSaStatusChangeNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecSaStatusChangeNotificationRequest.ProtoReflect.Descriptor instead.
func (*IpsecSaStatusChangeNotificationRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{22}
}

type IpsecSaStatusNotificationDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*IpsecSaStatusNotificationData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *IpsecSaStatusNotificationDataResponse) Reset() {
	*x = IpsecSaStatusNotificationDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecSaStatusNotificationDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecSaStatusNotificationDataResponse) ProtoMessage() {}

func (x *IpsecSaStatusNotificationDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecSaStatusNotificationDataResponse.ProtoReflect.Descriptor instead.
func (*IpsecSaStatusNotificationDataResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{23}
}

func (x *IpsecSaStatusNotificationDataResponse) GetData() []*IpsecSaStatusNotificationData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSwitchAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []SwitchAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.SwitchAttr" json:"attr_type,omitempty"`
}

func (x *GetSwitchAttributeRequest) Reset() {
	*x = GetSwitchAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchAttributeRequest) ProtoMessage() {}

func (x *GetSwitchAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetSwitchAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{24}
}

func (x *GetSwitchAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetSwitchAttributeRequest) GetAttrType() []SwitchAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetSwitchAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *SwitchAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetSwitchAttributeResponse) Reset() {
	*x = GetSwitchAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchAttributeResponse) ProtoMessage() {}

func (x *GetSwitchAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetSwitchAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{25}
}

func (x *GetSwitchAttributeResponse) GetAttr() *SwitchAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type GetSwitchStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CounterIds []SwitchStat `protobuf:"varint,2,rep,packed,name=counter_ids,json=counterIds,proto3,enum=lemming.dataplane.sai.SwitchStat" json:"counter_ids,omitempty"`
}

func (x *GetSwitchStatsRequest) Reset() {
	*x = GetSwitchStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchStatsRequest) ProtoMessage() {}

func (x *GetSwitchStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchStatsRequest.ProtoReflect.Descriptor instead.
func (*GetSwitchStatsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{26}
}

func (x *GetSwitchStatsRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetSwitchStatsRequest) GetCounterIds() []SwitchStat {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

type GetSwitchStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *GetSwitchStatsResponse) Reset() {
	*x = GetSwitchStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchStatsResponse) ProtoMessage() {}

func (x *GetSwitchStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchStatsResponse.ProtoReflect.Descriptor instead.
func (*GetSwitchStatsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{27}
}

func (x *GetSwitchStatsResponse) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type CreateSwitchTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                       uint64                   `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	TunnelType                   *TunnelType              `protobuf:"varint,2,opt,name=tunnel_type,json=tunnelType,proto3,enum=lemming.dataplane.sai.TunnelType,oneof" json:"tunnel_type,omitempty"`
	LoopbackPacketAction         *PacketAction            `protobuf:"varint,3,opt,name=loopback_packet_action,json=loopbackPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"loopback_packet_action,omitempty"`
	TunnelEncapEcnMode           *TunnelEncapEcnMode      `protobuf:"varint,4,opt,name=tunnel_encap_ecn_mode,json=tunnelEncapEcnMode,proto3,enum=lemming.dataplane.sai.TunnelEncapEcnMode,oneof" json:"tunnel_encap_ecn_mode,omitempty"`
	EncapMappers                 []uint64                 `protobuf:"varint,5,rep,packed,name=encap_mappers,json=encapMappers,proto3" json:"encap_mappers,omitempty"`
	TunnelDecapEcnMode           *TunnelDecapEcnMode      `protobuf:"varint,6,opt,name=tunnel_decap_ecn_mode,json=tunnelDecapEcnMode,proto3,enum=lemming.dataplane.sai.TunnelDecapEcnMode,oneof" json:"tunnel_decap_ecn_mode,omitempty"`
	DecapMappers                 []uint64                 `protobuf:"varint,7,rep,packed,name=decap_mappers,json=decapMappers,proto3" json:"decap_mappers,omitempty"`
	TunnelVxlanUdpSportMode      *TunnelVxlanUdpSportMode `protobuf:"varint,8,opt,name=tunnel_vxlan_udp_sport_mode,json=tunnelVxlanUdpSportMode,proto3,enum=lemming.dataplane.sai.TunnelVxlanUdpSportMode,oneof" json:"tunnel_vxlan_udp_sport_mode,omitempty"`
	VxlanUdpSport                *uint32                  `protobuf:"varint,9,opt,name=vxlan_udp_sport,json=vxlanUdpSport,proto3,oneof" json:"vxlan_udp_sport,omitempty"`
	VxlanUdpSportMask            *uint32                  `protobuf:"varint,10,opt,name=vxlan_udp_sport_mask,json=vxlanUdpSportMask,proto3,oneof" json:"vxlan_udp_sport_mask,omitempty"`
	EncapQosTcAndColorToDscpMap  *uint64                  `protobuf:"varint,11,opt,name=encap_qos_tc_and_color_to_dscp_map,json=encapQosTcAndColorToDscpMap,proto3,oneof" json:"encap_qos_tc_and_color_to_dscp_map,omitempty"`
	EncapQosTcToQueueMap         *uint64                  `protobuf:"varint,12,opt,name=encap_qos_tc_to_queue_map,json=encapQosTcToQueueMap,proto3,oneof" json:"encap_qos_tc_to_queue_map,omitempty"`
	DecapQosDscpToTcMap          *uint64                  `protobuf:"varint,13,opt,name=decap_qos_dscp_to_tc_map,json=decapQosDscpToTcMap,proto3,oneof" json:"decap_qos_dscp_to_tc_map,omitempty"`
	DecapQosTcToPriorityGroupMap *uint64                  `protobuf:"varint,14,opt,name=decap_qos_tc_to_priority_group_map,json=decapQosTcToPriorityGroupMap,proto3,oneof" json:"decap_qos_tc_to_priority_group_map,omitempty"`
}

func (x *CreateSwitchTunnelRequest) Reset() {
	*x = CreateSwitchTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSwitchTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSwitchTunnelRequest) ProtoMessage() {}

func (x *CreateSwitchTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSwitchTunnelRequest.ProtoReflect.Descriptor instead.
func (*CreateSwitchTunnelRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{28}
}

func (x *CreateSwitchTunnelRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateSwitchTunnelRequest) GetTunnelType() TunnelType {
	if x != nil && x.TunnelType != nil {
		return *x.TunnelType
	}
	return TunnelType_TUNNEL_TYPE_UNSPECIFIED
}

func (x *CreateSwitchTunnelRequest) GetLoopbackPacketAction() PacketAction {
	if x != nil && x.LoopbackPacketAction != nil {
		return *x.LoopbackPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateSwitchTunnelRequest) GetTunnelEncapEcnMode() TunnelEncapEcnMode {
	if x != nil && x.TunnelEncapEcnMode != nil {
		return *x.TunnelEncapEcnMode
	}
	return TunnelEncapEcnMode_TUNNEL_ENCAP_ECN_MODE_UNSPECIFIED
}

func (x *CreateSwitchTunnelRequest) GetEncapMappers() []uint64 {
	if x != nil {
		return x.EncapMappers
	}
	return nil
}

func (x *CreateSwitchTunnelRequest) GetTunnelDecapEcnMode() TunnelDecapEcnMode {
	if x != nil && x.TunnelDecapEcnMode != nil {
		return *x.TunnelDecapEcnMode
	}
	return TunnelDecapEcnMode_TUNNEL_DECAP_ECN_MODE_UNSPECIFIED
}

func (x *CreateSwitchTunnelRequest) GetDecapMappers() []uint64 {
	if x != nil {
		return x.DecapMappers
	}
	return nil
}

func (x *CreateSwitchTunnelRequest) GetTunnelVxlanUdpSportMode() TunnelVxlanUdpSportMode {
	if x != nil && x.TunnelVxlanUdpSportMode != nil {
		return *x.TunnelVxlanUdpSportMode
	}
	return TunnelVxlanUdpSportMode_TUNNEL_VXLAN_UDP_SPORT_MODE_UNSPECIFIED
}

func (x *CreateSwitchTunnelRequest) GetVxlanUdpSport() uint32 {
	if x != nil && x.VxlanUdpSport != nil {
		return *x.VxlanUdpSport
	}
	return 0
}

func (x *CreateSwitchTunnelRequest) GetVxlanUdpSportMask() uint32 {
	if x != nil && x.VxlanUdpSportMask != nil {
		return *x.VxlanUdpSportMask
	}
	return 0
}

func (x *CreateSwitchTunnelRequest) GetEncapQosTcAndColorToDscpMap() uint64 {
	if x != nil && x.EncapQosTcAndColorToDscpMap != nil {
		return *x.EncapQosTcAndColorToDscpMap
	}
	return 0
}

func (x *CreateSwitchTunnelRequest) GetEncapQosTcToQueueMap() uint64 {
	if x != nil && x.EncapQosTcToQueueMap != nil {
		return *x.EncapQosTcToQueueMap
	}
	return 0
}

func (x *CreateSwitchTunnelRequest) GetDecapQosDscpToTcMap() uint64 {
	if x != nil && x.DecapQosDscpToTcMap != nil {
		return *x.DecapQosDscpToTcMap
	}
	return 0
}

func (x *CreateSwitchTunnelRequest) GetDecapQosTcToPriorityGroupMap() uint64 {
	if x != nil && x.DecapQosTcToPriorityGroupMap != nil {
		return *x.DecapQosTcToPriorityGroupMap
	}
	return 0
}

type CreateSwitchTunnelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateSwitchTunnelResponse) Reset() {
	*x = CreateSwitchTunnelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSwitchTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSwitchTunnelResponse) ProtoMessage() {}

func (x *CreateSwitchTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSwitchTunnelResponse.ProtoReflect.Descriptor instead.
func (*CreateSwitchTunnelResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{29}
}

func (x *CreateSwitchTunnelResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveSwitchTunnelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveSwitchTunnelRequest) Reset() {
	*x = RemoveSwitchTunnelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSwitchTunnelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSwitchTunnelRequest) ProtoMessage() {}

func (x *RemoveSwitchTunnelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSwitchTunnelRequest.ProtoReflect.Descriptor instead.
func (*RemoveSwitchTunnelRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{30}
}

func (x *RemoveSwitchTunnelRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveSwitchTunnelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSwitchTunnelResponse) Reset() {
	*x = RemoveSwitchTunnelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSwitchTunnelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSwitchTunnelResponse) ProtoMessage() {}

func (x *RemoveSwitchTunnelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSwitchTunnelResponse.ProtoReflect.Descriptor instead.
func (*RemoveSwitchTunnelResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{31}
}

type SetSwitchTunnelAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                          uint64                   `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	LoopbackPacketAction         *PacketAction            `protobuf:"varint,2,opt,name=loopback_packet_action,json=loopbackPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"loopback_packet_action,omitempty"`
	TunnelVxlanUdpSportMode      *TunnelVxlanUdpSportMode `protobuf:"varint,3,opt,name=tunnel_vxlan_udp_sport_mode,json=tunnelVxlanUdpSportMode,proto3,enum=lemming.dataplane.sai.TunnelVxlanUdpSportMode,oneof" json:"tunnel_vxlan_udp_sport_mode,omitempty"`
	VxlanUdpSport                *uint32                  `protobuf:"varint,4,opt,name=vxlan_udp_sport,json=vxlanUdpSport,proto3,oneof" json:"vxlan_udp_sport,omitempty"`
	VxlanUdpSportMask            *uint32                  `protobuf:"varint,5,opt,name=vxlan_udp_sport_mask,json=vxlanUdpSportMask,proto3,oneof" json:"vxlan_udp_sport_mask,omitempty"`
	EncapQosTcAndColorToDscpMap  *uint64                  `protobuf:"varint,6,opt,name=encap_qos_tc_and_color_to_dscp_map,json=encapQosTcAndColorToDscpMap,proto3,oneof" json:"encap_qos_tc_and_color_to_dscp_map,omitempty"`
	EncapQosTcToQueueMap         *uint64                  `protobuf:"varint,7,opt,name=encap_qos_tc_to_queue_map,json=encapQosTcToQueueMap,proto3,oneof" json:"encap_qos_tc_to_queue_map,omitempty"`
	DecapQosDscpToTcMap          *uint64                  `protobuf:"varint,8,opt,name=decap_qos_dscp_to_tc_map,json=decapQosDscpToTcMap,proto3,oneof" json:"decap_qos_dscp_to_tc_map,omitempty"`
	DecapQosTcToPriorityGroupMap *uint64                  `protobuf:"varint,9,opt,name=decap_qos_tc_to_priority_group_map,json=decapQosTcToPriorityGroupMap,proto3,oneof" json:"decap_qos_tc_to_priority_group_map,omitempty"`
}

func (x *SetSwitchTunnelAttributeRequest) Reset() {
	*x = SetSwitchTunnelAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSwitchTunnelAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSwitchTunnelAttributeRequest) ProtoMessage() {}

func (x *SetSwitchTunnelAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSwitchTunnelAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetSwitchTunnelAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{32}
}

func (x *SetSwitchTunnelAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetSwitchTunnelAttributeRequest) GetLoopbackPacketAction() PacketAction {
	if x != nil && x.LoopbackPacketAction != nil {
		return *x.LoopbackPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetSwitchTunnelAttributeRequest) GetTunnelVxlanUdpSportMode() TunnelVxlanUdpSportMode {
	if x != nil && x.TunnelVxlanUdpSportMode != nil {
		return *x.TunnelVxlanUdpSportMode
	}
	return TunnelVxlanUdpSportMode_TUNNEL_VXLAN_UDP_SPORT_MODE_UNSPECIFIED
}

func (x *SetSwitchTunnelAttributeRequest) GetVxlanUdpSport() uint32 {
	if x != nil && x.VxlanUdpSport != nil {
		return *x.VxlanUdpSport
	}
	return 0
}

func (x *SetSwitchTunnelAttributeRequest) GetVxlanUdpSportMask() uint32 {
	if x != nil && x.VxlanUdpSportMask != nil {
		return *x.VxlanUdpSportMask
	}
	return 0
}

func (x *SetSwitchTunnelAttributeRequest) GetEncapQosTcAndColorToDscpMap() uint64 {
	if x != nil && x.EncapQosTcAndColorToDscpMap != nil {
		return *x.EncapQosTcAndColorToDscpMap
	}
	return 0
}

func (x *SetSwitchTunnelAttributeRequest) GetEncapQosTcToQueueMap() uint64 {
	if x != nil && x.EncapQosTcToQueueMap != nil {
		return *x.EncapQosTcToQueueMap
	}
	return 0
}

func (x *SetSwitchTunnelAttributeRequest) GetDecapQosDscpToTcMap() uint64 {
	if x != nil && x.DecapQosDscpToTcMap != nil {
		return *x.DecapQosDscpToTcMap
	}
	return 0
}

func (x *SetSwitchTunnelAttributeRequest) GetDecapQosTcToPriorityGroupMap() uint64 {
	if x != nil && x.DecapQosTcToPriorityGroupMap != nil {
		return *x.DecapQosTcToPriorityGroupMap
	}
	return 0
}

type SetSwitchTunnelAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSwitchTunnelAttributeResponse) Reset() {
	*x = SetSwitchTunnelAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSwitchTunnelAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSwitchTunnelAttributeResponse) ProtoMessage() {}

func (x *SetSwitchTunnelAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSwitchTunnelAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetSwitchTunnelAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{33}
}

type GetSwitchTunnelAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64             `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []SwitchTunnelAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.SwitchTunnelAttr" json:"attr_type,omitempty"`
}

func (x *GetSwitchTunnelAttributeRequest) Reset() {
	*x = GetSwitchTunnelAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchTunnelAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchTunnelAttributeRequest) ProtoMessage() {}

func (x *GetSwitchTunnelAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchTunnelAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetSwitchTunnelAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{34}
}

func (x *GetSwitchTunnelAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetSwitchTunnelAttributeRequest) GetAttrType() []SwitchTunnelAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetSwitchTunnelAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *SwitchTunnelAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetSwitchTunnelAttributeResponse) Reset() {
	*x = GetSwitchTunnelAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_switch_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSwitchTunnelAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSwitchTunnelAttributeResponse) ProtoMessage() {}

func (x *GetSwitchTunnelAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_switch_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSwitchTunnelAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetSwitchTunnelAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_switch_proto_rawDescGZIP(), []int{35}
}

func (x *GetSwitchTunnelAttributeResponse) GetAttr() *SwitchTunnelAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_proto_switch_proto protoreflect.FileDescriptor

var file_dataplane_proto_switch_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x98, 0x3a, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x0b, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x2b, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x41, 0x63, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x2c, 0x48, 0x01, 0x52, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x61, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x48, 0x48, 0x02, 0x52,
	0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x49, 0x48, 0x03, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a,
	0x0e, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x51, 0x48, 0x04, 0x52, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x16, 0x62,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x52, 0x48, 0x05, 0x52, 0x13, 0x62, 0x63, 0x61, 0x73, 0x74, 0x43, 0x70, 0x75, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x16, 0x6d,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x53, 0x48, 0x06, 0x52, 0x13, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x43, 0x70, 0x75, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0f, 0x73,
	0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x54, 0x48, 0x07, 0x52, 0x0d, 0x73, 0x72,
	0x63, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x55, 0x48, 0x08, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x0e, 0x66, 0x64, 0x62, 0x5f, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x56, 0x48, 0x09, 0x52, 0x0c, 0x66,
	0x64, 0x62, 0x41, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x72,
	0x0a, 0x1e, 0x66, 0x64, 0x62, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x57, 0x48, 0x0a, 0x52, 0x1a, 0x66, 0x64, 0x62, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d,
	0x69, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x76, 0x0a, 0x20, 0x66, 0x64, 0x62, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x58, 0x48, 0x0b, 0x52, 0x1c, 0x66, 0x64, 0x62, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x20, 0x66, 0x64,
	0x62, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x59, 0x48,
	0x0c, 0x52, 0x1c, 0x66, 0x64, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d,
	0x69, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x6e, 0x0a, 0x1b, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x5a, 0x48, 0x0d, 0x52, 0x18, 0x65, 0x63, 0x6d, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x16, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x5b, 0x48, 0x0e, 0x52, 0x13, 0x65, 0x63, 0x6d, 0x70,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x18, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x5c, 0x48, 0x0f, 0x52, 0x15, 0x65, 0x63,
	0x6d, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1b, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x5d, 0x48, 0x10, 0x52, 0x18, 0x65, 0x63, 0x6d, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x0e, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70,
	0x76, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x5e, 0x48, 0x11,
	0x52, 0x0c, 0x65, 0x63, 0x6d, 0x70, 0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x16, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x5f, 0x48, 0x12, 0x52, 0x12, 0x65, 0x63, 0x6d, 0x70, 0x48,
	0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x0e, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x60, 0x48, 0x13,
	0x52, 0x0c, 0x65, 0x63, 0x6d, 0x70, 0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x36, 0x88, 0x01,
	0x01, 0x12, 0x6c, 0x0a, 0x1a, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x61, 0x48, 0x14, 0x52, 0x17, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x15, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x62, 0x48, 0x15, 0x52, 0x12, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x17, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x63, 0x48, 0x16, 0x52, 0x14, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x46, 0x0a, 0x1a, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x64, 0x48, 0x17, 0x52, 0x17, 0x6c, 0x61, 0x67,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x6c, 0x61, 0x67, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x65, 0x48, 0x18, 0x52, 0x0b, 0x6c, 0x61, 0x67, 0x48, 0x61, 0x73, 0x68, 0x49,
	0x70, 0x76, 0x34, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x15, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x66, 0x48, 0x19, 0x52, 0x11, 0x6c,
	0x61, 0x67, 0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x49, 0x70, 0x76, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x67,
	0x48, 0x1a, 0x52, 0x0b, 0x6c, 0x61, 0x67, 0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x36, 0x88,
	0x01, 0x01, 0x12, 0x43, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x68, 0x48, 0x1b, 0x52, 0x16, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x71, 0x6f, 0x73, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x69, 0x48, 0x1c, 0x52, 0x0c, 0x71, 0x6f, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x63, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f,
	0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x6a, 0x48, 0x1d, 0x52, 0x0f, 0x71,
	0x6f, 0x73, 0x44, 0x6f, 0x74, 0x31, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x16, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x6b, 0x48, 0x1e, 0x52, 0x12, 0x71, 0x6f, 0x73, 0x44, 0x6f,
	0x74, 0x31, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x12, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x6c, 0x48, 0x1f, 0x52, 0x0e, 0x71, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x54,
	0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x15, 0x71, 0x6f, 0x73, 0x5f, 0x64,
	0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x6d, 0x48, 0x20, 0x52, 0x11,
	0x71, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74,
	0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x6e, 0x48, 0x21, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x54, 0x63,
	0x54, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a,
	0x1d, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x6f, 0x48, 0x22, 0x52, 0x17, 0x71, 0x6f,
	0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x44, 0x6f, 0x74,
	0x31, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1c, 0x71, 0x6f, 0x73, 0x5f,
	0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x70, 0x48, 0x23, 0x52, 0x16, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x68, 0x65, 0x6c,
	0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x71, 0x48, 0x24, 0x52, 0x11, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x72, 0x48, 0x25, 0x52,
	0x0f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x27, 0x20, 0x03, 0x28,
	0x05, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x73, 0x52, 0x12, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x12, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x28, 0x20, 0x03, 0x28, 0x05, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x74, 0x52, 0x10, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x75, 0x48, 0x26, 0x52, 0x0a, 0x69, 0x6e,
	0x69, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0f, 0x66,
	0x61, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x7b, 0x48, 0x27, 0x52, 0x0d, 0x66, 0x61,
	0x73, 0x74, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x09, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x63, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x7c, 0x48, 0x28, 0x52, 0x08, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x63, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x15, 0x70, 0x66, 0x63, 0x5f, 0x64, 0x6c,
	0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x83,
	0x01, 0x48, 0x29, 0x52, 0x12, 0x70, 0x66, 0x63, 0x44, 0x6c, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x13, 0x70, 0x66,
	0x63, 0x5f, 0x74, 0x63, 0x5f, 0x64, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x85, 0x01, 0x52, 0x10,
	0x70, 0x66, 0x63, 0x54, 0x63, 0x44, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x54, 0x0a, 0x13, 0x70, 0x66, 0x63, 0x5f, 0x74, 0x63, 0x5f, 0x64, 0x6c, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x05, 0x80,
	0xb5, 0x18, 0x87, 0x01, 0x52, 0x10, 0x70, 0x66, 0x63, 0x54, 0x63, 0x44, 0x6c, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x05, 0x80, 0xb5, 0x18, 0x89, 0x01, 0x48, 0x2a, 0x52, 0x0d, 0x74, 0x70, 0x69, 0x64, 0x4f, 0x75,
	0x74, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x70,
	0x69, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x8a, 0x01, 0x48, 0x2b, 0x52, 0x0d, 0x74, 0x70,
	0x69, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x10, 0x63, 0x72, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x8b, 0x01, 0x48,
	0x2c, 0x52, 0x0e, 0x63, 0x72, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x18, 0x63, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x8c, 0x01, 0x48, 0x2d, 0x52,
	0x16, 0x63, 0x72, 0x63, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x18, 0x65, 0x63,
	0x6e, 0x5f, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5,
	0x18, 0x94, 0x01, 0x48, 0x2e, 0x52, 0x15, 0x65, 0x63, 0x6e, 0x45, 0x63, 0x74, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x43, 0x0a, 0x18, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x95, 0x01, 0x48, 0x2f, 0x52, 0x15, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x61,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x12, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x05, 0x80, 0xb5, 0x18, 0x96, 0x01, 0x48, 0x30, 0x52, 0x10, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a,
	0x0a, 0x1c, 0x75, 0x6e, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x9a, 0x01, 0x48, 0x31, 0x52, 0x18, 0x75,
	0x6e, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4f, 0x6e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x61,
	0x6d, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x03, 0x28,
	0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x9b, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x6d, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18,
	0x9e, 0x01, 0x48, 0x32, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x6e, 0x61, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x9f, 0x01, 0x48,
	0x33, 0x52, 0x16, 0x6e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0a,
	0x6e, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x05, 0x80, 0xb5, 0x18, 0xa0, 0x01, 0x48, 0x34, 0x52, 0x09, 0x6e, 0x61, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x13, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x62, 0x75, 0x73, 0x18, 0x3b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x42, 0x75, 0x73, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xa1, 0x01, 0x48, 0x35, 0x52, 0x11, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80,
	0xb5, 0x18, 0xa2, 0x01, 0x48, 0x36, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x72, 0x6f, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x1b, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x05, 0x80, 0xb5, 0x18, 0xa5, 0x01, 0x48, 0x37, 0x52, 0x19, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6d, 0x0a, 0x14, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xa6, 0x01, 0x48, 0x38, 0x52, 0x12,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x05, 0x80, 0xb5, 0x18, 0xa7, 0x01, 0x48, 0x39, 0x52, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x19, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xa8, 0x01, 0x48, 0x3a, 0x52, 0x17, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xa9, 0x01, 0x48, 0x3b,
	0x52, 0x15, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x1f, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x6e,
	0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xaa, 0x01, 0x48, 0x3c, 0x52, 0x1b, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x6e, 0x64, 0x49,
	0x6e, 0x69, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x42, 0x05, 0x80,
	0xb5, 0x18, 0xb0, 0x01, 0x48, 0x3d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x12, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x44, 0x20, 0x03, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18,
	0xb1, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x16, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xb2, 0x01, 0x48, 0x3e, 0x52, 0x11, 0x71,
	0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x19, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xb3, 0x01, 0x48, 0x3f, 0x52,
	0x14, 0x71, 0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x20, 0x71, 0x6f, 0x73, 0x5f,
	0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xb4, 0x01, 0x48, 0x40, 0x52, 0x19, 0x71, 0x6f, 0x73,
	0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x4d, 0x70, 0x6c, 0x73,
	0x45, 0x78, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x09, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x80, 0xb5,
	0x18, 0xb5, 0x01, 0x48, 0x41, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x80, 0xb5,
	0x18, 0xb6, 0x01, 0x48, 0x42, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x17, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x4a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xb7, 0x01, 0x52, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x6d, 0x0a, 0x14, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x05,
	0x80, 0xb5, 0x18, 0xbd, 0x01, 0x48, 0x43, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x13, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x4c, 0x20, 0x03, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18,
	0xbf, 0x01, 0x52, 0x11, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05,
	0x80, 0xb5, 0x18, 0xc1, 0x01, 0x48, 0x44, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x73, 0x6c, 0x61,
	0x76, 0x65, 0x5f, 0x6d, 0x64, 0x69, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x4e, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xc5, 0x01, 0x52, 0x11,
	0x73, 0x6c, 0x61, 0x76, 0x65, 0x4d, 0x64, 0x69, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x51, 0x0a, 0x20, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18,
	0xcc, 0x01, 0x48, 0x45, 0x52, 0x1b, 0x71, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x24, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xcd, 0x01, 0x48, 0x46, 0x52, 0x1e, 0x71, 0x6f, 0x73,
	0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x0f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xce, 0x01, 0x48, 0x47,
	0x52, 0x0d, 0x69, 0x70, 0x73, 0x65, 0x63, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x61, 0x5f, 0x74,
	0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x80,
	0xb5, 0x18, 0xcf, 0x01, 0x48, 0x48, 0x52, 0x0e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x54,
	0x61, 0x67, 0x54, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x11, 0x65, 0x63, 0x6d,
	0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xd3, 0x01, 0x48, 0x49, 0x52, 0x0f, 0x65,
	0x63, 0x6d, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x22, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72, 0x6d,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x62, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x64, 0x62, 0x5f, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x66, 0x64, 0x62, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x66, 0x64, 0x62, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x66,
	0x64, 0x62, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x1e, 0x0a, 0x1c, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65,
	0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x65, 0x63, 0x6d, 0x70,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x63, 0x6d, 0x70,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x65,
	0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6c, 0x61, 0x67,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x61, 0x67, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65,
	0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x1d, 0x0a,
	0x1b, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61, 0x67,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x6f, 0x73, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71,
	0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d,
	0x61, 0x70, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70,
	0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63,
	0x5f, 0x6d, 0x61, 0x70, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63,
	0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74,
	0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64,
	0x6f, 0x74, 0x31, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f,
	0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x61, 0x73, 0x74,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x63, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x70, 0x66,
	0x63, 0x5f, 0x64, 0x6c, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x70, 0x69, 0x64,
	0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x63, 0x72, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x76,
	0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x1f,
	0x0a, 0x1d, 0x5f, 0x75, 0x6e, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x62, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1c, 0x0a,
	0x1a, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x23, 0x0a, 0x21, 0x5f,
	0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x61, 0x70,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x70, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c,
	0x42, 0x23, 0x0a, 0x21, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x73, 0x61, 0x5f,
	0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x63, 0x6d,
	0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x28,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x31, 0x0a, 0x19, 0x53, 0x65,
	0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x2b, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x63, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x61, 0x63, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x2c, 0x48,
	0x01, 0x52, 0x09, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x48, 0x48, 0x02, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x57, 0x61, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0c, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x49, 0x48, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x6d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0e, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x51, 0x48, 0x04, 0x52, 0x0d, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x16, 0x62, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x52, 0x48,
	0x05, 0x52, 0x13, 0x62, 0x63, 0x61, 0x73, 0x74, 0x43, 0x70, 0x75, 0x46, 0x6c, 0x6f, 0x6f, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x16, 0x6d, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x53, 0x48,
	0x06, 0x52, 0x13, 0x6d, 0x63, 0x61, 0x73, 0x74, 0x43, 0x70, 0x75, 0x46, 0x6c, 0x6f, 0x6f, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0f, 0x73, 0x72, 0x63,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x54, 0x48, 0x07, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4d,
	0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x15,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x55, 0x48, 0x08, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x66,
	0x64, 0x62, 0x5f, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x56, 0x48, 0x09, 0x52, 0x0c, 0x66, 0x64, 0x62,
	0x41, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x72, 0x0a, 0x1e,
	0x66, 0x64, 0x62, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x57, 0x48,
	0x0a, 0x52, 0x1a, 0x66, 0x64, 0x62, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x73,
	0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x76, 0x0a, 0x20, 0x66, 0x64, 0x62, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x58, 0x48, 0x0b, 0x52, 0x1c, 0x66, 0x64, 0x62, 0x42, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x76, 0x0a, 0x20, 0x66, 0x64, 0x62, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x59, 0x48, 0x0c, 0x52,
	0x1c, 0x66, 0x64, 0x62, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x73,
	0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x6e, 0x0a, 0x1b, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x5a, 0x48, 0x0d, 0x52, 0x18, 0x65, 0x63, 0x6d, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x16, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x5b, 0x48, 0x0e, 0x52, 0x13, 0x65, 0x63, 0x6d, 0x70, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x42, 0x0a, 0x18, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x5c, 0x48, 0x0f, 0x52, 0x15, 0x65, 0x63, 0x6d, 0x70,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1b, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x5d, 0x48,
	0x10, 0x52, 0x18, 0x65, 0x63, 0x6d, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x79,
	0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x0e, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x5e, 0x48, 0x11, 0x52, 0x0c,
	0x65, 0x63, 0x6d, 0x70, 0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x16, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x5f, 0x48, 0x12, 0x52, 0x12, 0x65, 0x63, 0x6d, 0x70, 0x48, 0x61, 0x73,
	0x68, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x0e, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x60, 0x48, 0x13, 0x52, 0x0c,
	0x65, 0x63, 0x6d, 0x70, 0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x36, 0x88, 0x01, 0x01, 0x12,
	0x6c, 0x0a, 0x1a, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x61, 0x48,
	0x14, 0x52, 0x17, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a,
	0x15, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x62, 0x48, 0x15, 0x52, 0x12, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x17, 0x6c,
	0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x63, 0x48, 0x16, 0x52, 0x14, 0x6c, 0x61, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x1a, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x64, 0x48, 0x17, 0x52, 0x17, 0x6c, 0x61, 0x67, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x61,
	0x73, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x65, 0x48, 0x18, 0x52, 0x0b, 0x6c, 0x61, 0x67, 0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76,
	0x34, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x15, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x66, 0x48, 0x19, 0x52, 0x11, 0x6c, 0x61, 0x67,
	0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x34, 0x49, 0x6e, 0x49, 0x70, 0x76, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70,
	0x76, 0x36, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x67, 0x48, 0x1a,
	0x52, 0x0b, 0x6c, 0x61, 0x67, 0x48, 0x61, 0x73, 0x68, 0x49, 0x70, 0x76, 0x36, 0x88, 0x01, 0x01,
	0x12, 0x43, 0x0a, 0x18, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x68, 0x48, 0x1b, 0x52, 0x16, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0e, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x63, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x69, 0x48, 0x1c, 0x52, 0x0c, 0x71, 0x6f, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x63, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x6f,
	0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x6a, 0x48, 0x1d, 0x52, 0x0f, 0x71, 0x6f, 0x73,
	0x44, 0x6f, 0x74, 0x31, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x16, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x6b, 0x48, 0x1e, 0x52, 0x12, 0x71, 0x6f, 0x73, 0x44, 0x6f, 0x74, 0x31,
	0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x12, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x6c,
	0x48, 0x1f, 0x52, 0x0e, 0x71, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d,
	0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x15, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63,
	0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x6d, 0x48, 0x20, 0x52, 0x11, 0x71, 0x6f,
	0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x13, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x6e, 0x48, 0x21, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x54, 0x6f,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x1d, 0x71,
	0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x6f, 0x48, 0x22, 0x52, 0x17, 0x71, 0x6f, 0x73, 0x54,
	0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x44, 0x6f, 0x74, 0x31, 0x70,
	0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1c, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x73,
	0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x70, 0x48, 0x23, 0x52, 0x16, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x71, 0x48, 0x24, 0x52, 0x11, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0f, 0x66, 0x61,
	0x73, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x7b, 0x48, 0x25, 0x52, 0x0d, 0x66, 0x61, 0x73,
	0x74, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x09, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x63, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x7c, 0x48, 0x26, 0x52, 0x08, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x63, 0x88, 0x01, 0x01, 0x12, 0x62, 0x0a, 0x15, 0x70, 0x66, 0x63, 0x5f, 0x64, 0x6c, 0x72,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x83, 0x01,
	0x48, 0x27, 0x52, 0x12, 0x70, 0x66, 0x63, 0x44, 0x6c, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x13, 0x70, 0x66, 0x63,
	0x5f, 0x74, 0x63, 0x5f, 0x64, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x85, 0x01, 0x52, 0x10, 0x70,
	0x66, 0x63, 0x54, 0x63, 0x44, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x54, 0x0a, 0x13, 0x70, 0x66, 0x63, 0x5f, 0x74, 0x63, 0x5f, 0x64, 0x6c, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x05, 0x80, 0xb5,
	0x18, 0x87, 0x01, 0x52, 0x10, 0x70, 0x66, 0x63, 0x54, 0x63, 0x44, 0x6c, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05,
	0x80, 0xb5, 0x18, 0x89, 0x01, 0x48, 0x28, 0x52, 0x0d, 0x74, 0x70, 0x69, 0x64, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x70, 0x69,
	0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x8a, 0x01, 0x48, 0x29, 0x52, 0x0d, 0x74, 0x70, 0x69,
	0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x10, 0x63, 0x72, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x8b, 0x01, 0x48, 0x2a,
	0x52, 0x0e, 0x63, 0x72, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x18, 0x63, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x8c, 0x01, 0x48, 0x2b, 0x52, 0x16,
	0x63, 0x72, 0x63, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x18, 0x65, 0x63, 0x6e,
	0x5f, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18,
	0x94, 0x01, 0x48, 0x2c, 0x52, 0x15, 0x65, 0x63, 0x6e, 0x45, 0x63, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x18, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x05, 0x80, 0xb5, 0x18, 0x95, 0x01, 0x48, 0x2d, 0x52, 0x15, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x63,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x12, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x05, 0x80, 0xb5, 0x18, 0x96, 0x01, 0x48, 0x2e, 0x52, 0x10, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,
	0x1c, 0x75, 0x6e, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x9a, 0x01, 0x48, 0x2f, 0x52, 0x18, 0x75, 0x6e,
	0x69, 0x6e, 0x69, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x4f, 0x6e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x74, 0x61, 0x6d,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x05, 0x80, 0xb5, 0x18, 0x9b, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x9e,
	0x01, 0x48, 0x30, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x6e, 0x61, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0x9f, 0x01, 0x48, 0x31,
	0x52, 0x16, 0x6e, 0x61, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0a, 0x6e,
	0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x05, 0x80, 0xb5, 0x18, 0xa0, 0x01, 0x48, 0x32, 0x52, 0x09, 0x6e, 0x61, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x19, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xa8, 0x01,
	0x48, 0x33, 0x52, 0x17, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x17, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x05, 0x80, 0xb5, 0x18, 0xa9, 0x01, 0x48, 0x34, 0x52, 0x15, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x88,
	0x01, 0x01, 0x12, 0x50, 0x0a, 0x1f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x05, 0x80, 0xb5, 0x18,
	0xaa, 0x01, 0x48, 0x35, 0x52, 0x1b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x05, 0x80, 0xb5, 0x18, 0xb1, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x16, 0x71, 0x6f, 0x73,
	0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xb2, 0x01,
	0x48, 0x36, 0x52, 0x11, 0x71, 0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f,
	0x54, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x19, 0x71, 0x6f, 0x73, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18,
	0xb3, 0x01, 0x48, 0x37, 0x52, 0x14, 0x71, 0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70,
	0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a,
	0x20, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xb4, 0x01, 0x48, 0x38,
	0x52, 0x19, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54,
	0x6f, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x6d,
	0x0a, 0x14, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x05, 0x80,
	0xb5, 0x18, 0xbd, 0x01, 0x48, 0x39, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x13, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x40, 0x20, 0x03, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xbf,
	0x01, 0x52, 0x11, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x41, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80,
	0xb5, 0x18, 0xc1, 0x01, 0x48, 0x3a, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x20, 0x71, 0x6f, 0x73, 0x5f,
	0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xcc, 0x01, 0x48, 0x3b, 0x52, 0x1b, 0x71, 0x6f, 0x73,
	0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x24, 0x71,
	0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x43, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xcd, 0x01,
	0x48, 0x3c, 0x52, 0x1e, 0x71, 0x6f, 0x73, 0x4d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54, 0x6f,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d,
	0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x04, 0x42, 0x05,
	0x80, 0xb5, 0x18, 0xce, 0x01, 0x48, 0x3d, 0x52, 0x0d, 0x69, 0x70, 0x73, 0x65, 0x63, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x11, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x5f, 0x73, 0x61, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x45,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x80, 0xb5, 0x18, 0xcf, 0x01, 0x48, 0x3e, 0x52, 0x0e, 0x69,
	0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x54, 0x61, 0x67, 0x54, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x11, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x80, 0xb5, 0x18,
	0xd3, 0x01, 0x48, 0x3f, 0x52, 0x0f, 0x65, 0x63, 0x6d, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x77, 0x61, 0x72,
	0x6d, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x62, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6d, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x64, 0x62, 0x5f, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x21, 0x0a, 0x1f, 0x5f, 0x66, 0x64, 0x62, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x66, 0x64, 0x62, 0x5f, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x23, 0x0a, 0x21, 0x5f,
	0x66, 0x64, 0x62, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x65, 0x63, 0x6d, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x65, 0x63, 0x6d,
	0x70, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x63, 0x6d,
	0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x65, 0x63, 0x6d, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x69,
	0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x63, 0x6d, 0x70, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6c, 0x61,
	0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x61, 0x67,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x65,
	0x65, 0x64, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73,
	0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x61,
	0x67, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x63, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x71, 0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f,
	0x6d, 0x61, 0x70, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31,
	0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74,
	0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73,
	0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x71, 0x6f, 0x73, 0x5f,
	0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x6f, 0x74, 0x31, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x71, 0x6f,
	0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x74, 0x63, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x70, 0x66, 0x63, 0x5f, 0x64, 0x6c, 0x72,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x72, 0x63, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f,
	0x63, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x65, 0x63, 0x6e,
	0x5f, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x63, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x75, 0x6e,
	0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70,
	0x72, 0x65, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x1d, 0x0a, 0x1b, 0x5f,
	0x6e, 0x61, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e,
	0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x71, 0x6f, 0x73, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d,
	0x61, 0x70, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70,
	0x42, 0x23, 0x0a, 0x21, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78,
	0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x63, 0x6c, 0x42, 0x23, 0x0a, 0x21, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f,
	0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x71, 0x6f, 0x73, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x73,
	0x61, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65,
	0x63, 0x6d, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x0a, 0x24, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x25, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x55, 0x0a,
	0x12, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x10, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x2a, 0x0a, 0x28, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x48, 0x0a, 0x29, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x46, 0x64,
	0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x63, 0x0a, 0x1c, 0x46, 0x64, 0x62,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x46, 0x64, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x24,
	0x0a, 0x22, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x23, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x20, 0x0a, 0x1e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x1f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x42, 0x0a,
	0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x66, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72,
	0x73, 0x22, 0x25, 0x0a, 0x23, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x66, 0x63, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x70, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x50, 0x66, 0x63, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2a, 0x0a, 0x28, 0x42, 0x66,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x29, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1d, 0x0a, 0x1b, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x1c, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x61, 0x6d, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x44, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05,
	0x61, 0x74, 0x74, 0x72, 0x73, 0x22, 0x28, 0x0a, 0x26, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x71, 0x0a, 0x25, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49,
	0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x6d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x58, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x6d, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xe2, 0x0a, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x4d, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x64, 0x0a, 0x16, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48, 0x01, 0x52, 0x14,
	0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x67, 0x0a, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x02, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x52, 0x0c, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x15, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x63, 0x6e, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x63, 0x61, 0x70, 0x45, 0x63,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x48, 0x03, 0x52, 0x12, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x63, 0x61, 0x70, 0x45, 0x63, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x06, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12,
	0x77, 0x0a, 0x1b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f,
	0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x04, 0x52, 0x17, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0f, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x08, 0x48, 0x05, 0x52, 0x0d, 0x76, 0x78, 0x6c, 0x61, 0x6e,
	0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x14, 0x76,
	0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48,
	0x06, 0x52, 0x11, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74,
	0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x22, 0x65, 0x6e, 0x63, 0x61, 0x70,
	0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0a, 0x48, 0x07, 0x52, 0x1b, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x51, 0x6f, 0x73, 0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54,
	0x6f, 0x44, 0x73, 0x63, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x19, 0x65,
	0x6e, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x0b, 0x48, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x51, 0x6f, 0x73,
	0x54, 0x63, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x18, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63,
	0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0c, 0x48, 0x09, 0x52, 0x13, 0x64, 0x65, 0x63, 0x61, 0x70,
	0x51, 0x6f, 0x73, 0x44, 0x73, 0x63, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x53, 0x0a, 0x22, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74,
	0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x0d, 0x48, 0x0a, 0x52, 0x1c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x51, 0x6f, 0x73, 0x54,
	0x63, 0x54, 0x6f, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x3a, 0x04, 0x88, 0xb5, 0x18, 0x60, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x63,
	0x61, 0x70, 0x5f, 0x65, 0x63, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70,
	0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x65, 0x6e, 0x63,
	0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63,
	0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70,
	0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x64,
	0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x61,
	0x70, 0x22, 0x2e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x22, 0x2d, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1,
	0x07, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x12, 0x64, 0x0a, 0x16, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x02, 0x48,
	0x00, 0x52, 0x14, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x77, 0x0a, 0x1b, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x78,
	0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x07, 0x48, 0x01, 0x52, 0x17, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56,
	0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70,
	0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x08, 0x48, 0x02, 0x52, 0x0d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x14, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f,
	0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x09, 0x48, 0x03, 0x52, 0x11, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x55, 0x64, 0x70, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x88,
	0x01, 0x01, 0x12, 0x52, 0x0a, 0x22, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f,
	0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0x80, 0xb5, 0x18, 0x0a, 0x48, 0x04, 0x52, 0x1b, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x51, 0x6f, 0x73,
	0x54, 0x63, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x6f, 0x44, 0x73, 0x63, 0x70,
	0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x19, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f,
	0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0b, 0x48,
	0x05, 0x52, 0x14, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x51, 0x6f, 0x73, 0x54, 0x63, 0x54, 0x6f, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x18, 0x64, 0x65,
	0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x0c, 0x48, 0x06, 0x52, 0x13, 0x64, 0x65, 0x63, 0x61, 0x70, 0x51, 0x6f, 0x73, 0x44, 0x73,
	0x63, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x22,
	0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d,
	0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x0d, 0x48, 0x07,
	0x52, 0x1c, 0x64, 0x65, 0x63, 0x61, 0x70, 0x51, 0x6f, 0x73, 0x54, 0x63, 0x54, 0x6f, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x88, 0x01,
	0x01, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1e, 0x0a, 0x1c,
	0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64,
	0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x65, 0x6e,
	0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x6d, 0x61, 0x70,
	0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74,
	0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x1b,
	0x0a, 0x19, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x73, 0x63,
	0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x25, 0x0a, 0x23, 0x5f,
	0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d,
	0x61, 0x70, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x64, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0x94, 0x42, 0x0a, 0x0a, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x54,
	0x55, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x05, 0x12, 0x23, 0x0a,
	0x1f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x53,
	0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45,
	0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4c, 0x33, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x08, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x33, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x09, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c,
	0x41, 0x47, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x4c, 0x41, 0x47, 0x53, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4d, 0x50,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x53, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10,
	0x0d, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x53, 0x10, 0x0e, 0x12, 0x2a, 0x0a, 0x26, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46,
	0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x53, 0x10, 0x10, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x4f, 0x46, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x53, 0x10, 0x11, 0x12,
	0x27, 0x0a, 0x23, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x13, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x4f, 0x46, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x53, 0x10,
	0x14, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x54, 0x45, 0x4d, 0x50, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x45,
	0x4d, 0x50, 0x10, 0x17, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x18,
	0x12, 0x2a, 0x0a, 0x26, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55,
	0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x19, 0x12, 0x2a, 0x0a, 0x26,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x4c, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x50, 0x52,
	0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x1a, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x10, 0x1b, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x49, 0x54, 0x59, 0x10, 0x1c, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x50, 0x52,
	0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x1d, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x44, 0x53, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x1e, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x44, 0x53, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x1f, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x44,
	0x53, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x20, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x21, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x22, 0x12,
	0x28, 0x0a, 0x24, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41,
	0x43, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x23, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x24, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44,
	0x10, 0x25, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x49, 0x4e,
	0x53, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x26, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x53, 0x54, 0x50, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x27, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x10, 0x28, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x52, 0x49, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x29, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x31, 0x51, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x2a, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x4c, 0x10, 0x2b, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x41, 0x43, 0x4c, 0x10, 0x2c, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x45, 0x53, 0x10, 0x2d, 0x12, 0x42, 0x0a, 0x3e, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41,
	0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x48, 0x49, 0x45, 0x52,
	0x41, 0x52, 0x43, 0x48, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x53, 0x10, 0x2e, 0x12, 0x46,
	0x0a, 0x42, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f,
	0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53,
	0x5f, 0x50, 0x45, 0x52, 0x5f, 0x48, 0x49, 0x45, 0x52, 0x41, 0x52, 0x43, 0x48, 0x59, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x10, 0x2f, 0x12, 0x3c, 0x0a, 0x38, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x53, 0x5f, 0x50,
	0x45, 0x52, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x30, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52,
	0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x31, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x32,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x33, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x10, 0x34, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x35,
	0x12, 0x2c, 0x0a, 0x28, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4e,
	0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x36, 0x12, 0x2c,
	0x0a, 0x28, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4e, 0x45, 0x58,
	0x54, 0x48, 0x4f, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x37, 0x12, 0x2d, 0x0a, 0x29,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48,
	0x42, 0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x38, 0x12, 0x2d, 0x0a, 0x29, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42,
	0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x39, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x3a, 0x12, 0x35, 0x0a, 0x31, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10,
	0x3b, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x10, 0x3c, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x4c, 0x32, 0x4d, 0x43, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x3d, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x50, 0x4d, 0x43, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x10, 0x3e, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x54,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x3f, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x44, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x40, 0x12, 0x2a,
	0x0a, 0x26, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x4e,
	0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x41, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x42, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x43, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x59, 0x5f, 0x53, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x10, 0x44, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x45, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10,
	0x46, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x4c, 0x41, 0x47, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x47, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x57, 0x41, 0x52, 0x4d, 0x10, 0x48, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x49, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x4a, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41,
	0x4c, 0x10, 0x4b, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4e, 0x56, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x10, 0x4c, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x4d, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x41, 0x43,
	0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x4e, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41,
	0x43, 0x4c, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x4f, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d,
	0x43, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x4e, 0x4f, 0x4f, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x50, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x51, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x42, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x43, 0x50, 0x55, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x52, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4d, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x43, 0x50, 0x55, 0x5f, 0x46, 0x4c, 0x4f, 0x4f,
	0x44, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x53, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x4d, 0x41,
	0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x54, 0x12, 0x25, 0x0a, 0x21, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c,
	0x45, 0x41, 0x52, 0x4e, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53,
	0x10, 0x55, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x56, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x57, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x58, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x59, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48,
	0x4d, 0x10, 0x5a, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x10, 0x5b, 0x12, 0x28, 0x0a, 0x24, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4f, 0x46, 0x46,
	0x53, 0x45, 0x54, 0x10, 0x5c, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x10, 0x5d, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x10, 0x5e, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34,
	0x5f, 0x49, 0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x5f, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x60, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x41, 0x47, 0x5f, 0x44, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52,
	0x49, 0x54, 0x48, 0x4d, 0x10, 0x61, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x41, 0x47, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x53, 0x45, 0x45, 0x44, 0x10, 0x62, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x41, 0x47,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4f, 0x46,
	0x46, 0x53, 0x45, 0x54, 0x10, 0x63, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x41, 0x47, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x10, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4c, 0x41, 0x47, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10,
	0x65, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x4c, 0x41, 0x47, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x49,
	0x4e, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x66, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x41, 0x47, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x67, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x52,
	0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10,
	0x68, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x54, 0x43, 0x10,
	0x69, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x43,
	0x5f, 0x4d, 0x41, 0x50, 0x10, 0x6a, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x50, 0x5f,
	0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x6b, 0x12, 0x22,
	0x0a, 0x1e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f,
	0x53, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x43, 0x5f, 0x4d, 0x41, 0x50,
	0x10, 0x6c, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f,
	0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x6d, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x54, 0x43, 0x5f,
	0x54, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x6e, 0x12, 0x2d,
	0x0a, 0x29, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f,
	0x53, 0x5f, 0x54, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x54,
	0x4f, 0x5f, 0x44, 0x4f, 0x54, 0x31, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x6f, 0x12, 0x2c, 0x0a,
	0x28, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53,
	0x5f, 0x54, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x54, 0x4f,
	0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x70, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x71,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49,
	0x44, 0x10, 0x72, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41,
	0x52, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x74, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x75, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x10, 0x76, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x48, 0x55,
	0x54, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x10, 0x77, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x78, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59,
	0x10, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x7a, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x41, 0x50, 0x49, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x7b, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54,
	0x43, 0x10, 0x7c, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x7d, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f,
	0x45, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x7e, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x52, 0x56, 0x36, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x53, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x10, 0x7f, 0x12, 0x1e, 0x0a, 0x19,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x52, 0x56, 0x36,
	0x5f, 0x54, 0x4c, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x80, 0x01, 0x12, 0x28, 0x0a, 0x23,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f,
	0x4e, 0x55, 0x4d, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x53, 0x10, 0x81, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x50, 0x46, 0x43, 0x5f,
	0x44, 0x45, 0x41, 0x44, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10,
	0x82, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x44, 0x4c, 0x52, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x83, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x54, 0x43,
	0x5f, 0x44, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x84, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x54, 0x43, 0x5f, 0x44, 0x4c, 0x44,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x85, 0x01, 0x12, 0x2a, 0x0a, 0x25,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x46, 0x43, 0x5f,
	0x54, 0x43, 0x5f, 0x44, 0x4c, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x86, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x46, 0x43, 0x5f, 0x54, 0x43, 0x5f, 0x44,
	0x4c, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0x87, 0x01, 0x12, 0x30,
	0x0a, 0x2b, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x88, 0x01,
	0x12, 0x20, 0x0a, 0x1b, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x54, 0x50, 0x49, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10,
	0x89, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x56, 0x4c, 0x41,
	0x4e, 0x10, 0x8a, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x43, 0x52, 0x43, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x8b, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x52, 0x43, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c,
	0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x8c, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46,
	0x59, 0x10, 0x8d, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x46,
	0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x8e, 0x01, 0x12, 0x20, 0x0a, 0x1b,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x8f, 0x01, 0x12, 0x38,
	0x0a, 0x33, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x42, 0x46, 0x44,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x90, 0x01, 0x12, 0x38, 0x0a, 0x33, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x91, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x52, 0x58, 0x10, 0x92, 0x01, 0x12,
	0x1b, 0x0a, 0x16, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d,
	0x49, 0x4e, 0x5f, 0x42, 0x46, 0x44, 0x5f, 0x54, 0x58, 0x10, 0x93, 0x01, 0x12, 0x29, 0x0a, 0x24,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4e, 0x5f,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x94, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x43, 0x10,
	0x95, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x96, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x97, 0x01, 0x12, 0x2b, 0x0a, 0x26,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x98, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x99, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x9a, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x9b, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x41, 0x4d, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x9c, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x9d, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x53, 0x48, 0x55, 0x54,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x9e, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x41, 0x54, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49,
	0x44, 0x10, 0x9f, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x4e, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xa0,
	0x01, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x42, 0x55, 0x53, 0x10, 0xa1, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0xa2, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xa3, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xa4, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57,
	0x41, 0x52, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x52, 0x4f,
	0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0xa5, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0xa6, 0x01,
	0x12, 0x23, 0x0a, 0x1e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0xa7, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x10, 0xa8,
	0x01, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0xa9, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57,
	0x41, 0x52, 0x45, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x59, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0xaa, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x49, 0x52,
	0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xab, 0x01, 0x12,
	0x27, 0x0a, 0x22, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46,
	0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xac, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45,
	0x5f, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xad,
	0x01, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0xae, 0x01, 0x12, 0x46, 0x0a, 0x41, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x47, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0xaf, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0xb0, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xb1, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x54, 0x43, 0x5f, 0x4d, 0x41,
	0x50, 0x10, 0xb2, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50,
	0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0xb3, 0x01,
	0x12, 0x31, 0x0a, 0x2c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x51, 0x4f, 0x53, 0x5f, 0x54, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52,
	0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x4d, 0x41, 0x50,
	0x10, 0xb4, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x10, 0xb5, 0x01, 0x12,
	0x21, 0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x53, 0x10,
	0xb6, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xb7, 0x01, 0x12, 0x27, 0x0a, 0x22,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x53, 0x10, 0xb8, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xb9, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f,
	0x46, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0xba,
	0x01, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0xbb, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x4d, 0x41, 0x5f, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10,
	0xbc, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xbd, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0xbe, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x53, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xbf, 0x01, 0x12, 0x36, 0x0a, 0x31, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x4d, 0x41, 0x5f, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0xc0,
	0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x50, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x41, 0x43, 0x4c,
	0x10, 0xc1, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0xc2, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x4e, 0x41, 0x50, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x10, 0xc3, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x4f, 0x55,
	0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x50, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0xc4,
	0x01, 0x12, 0x25, 0x0a, 0x20, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x53, 0x4c, 0x41, 0x56, 0x45, 0x5f, 0x4d, 0x44, 0x49, 0x4f, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xc5, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x59, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0xc6, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x59, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x5f, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0xc7, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x59, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0xc8, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x5f,
	0x4d, 0x59, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53, 0x10, 0xc9,
	0x01, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x59, 0x5f, 0x4d, 0x41,
	0x43, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53, 0x10, 0xca, 0x01, 0x12, 0x31, 0x0a, 0x2c,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x45, 0x53, 0x10, 0xcb, 0x01, 0x12,
	0x31, 0x0a, 0x2c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51,
	0x4f, 0x53, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x10,
	0xcc, 0x01, 0x12, 0x35, 0x0a, 0x30, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x54,
	0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0xcd, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x5f, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x10, 0xce, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43,
	0x5f, 0x53, 0x41, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x50, 0x49, 0x44, 0x10, 0xcf, 0x01, 0x12,
	0x2e, 0x0a, 0x29, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49,
	0x50, 0x53, 0x45, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xd0, 0x01, 0x12,
	0x21, 0x0a, 0x1c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e,
	0x41, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10,
	0xd1, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xd2, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x43, 0x4d, 0x50, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xd3, 0x01, 0x2a, 0x93,
	0x05, 0x0a, 0x10, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x57, 0x49, 0x54, 0x43,
	0x48, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x57,
	0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x45, 0x43,
	0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45,
	0x4e, 0x43, 0x41, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x45, 0x52, 0x53, 0x10, 0x04, 0x12, 0x2c,
	0x0a, 0x28, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x43, 0x41,
	0x50, 0x5f, 0x45, 0x43, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x05, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x41, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x45, 0x52, 0x53,
	0x10, 0x06, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x58, 0x4c,
	0x41, 0x4e, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x08, 0x12, 0x2b,
	0x0a, 0x27, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x53,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x09, 0x12, 0x39, 0x0a, 0x35, 0x53,
	0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x54, 0x43, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x53, 0x43, 0x50,
	0x5f, 0x4d, 0x41, 0x50, 0x10, 0x0a, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48,
	0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x4e, 0x43,
	0x41, 0x50, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x54, 0x43, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x0b, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x57, 0x49, 0x54,
	0x43, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44,
	0x45, 0x43, 0x41, 0x50, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x54, 0x4f,
	0x5f, 0x54, 0x43, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x0c, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x57, 0x49,
	0x54, 0x43, 0x48, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x44, 0x45, 0x43, 0x41, 0x50, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x54, 0x43, 0x5f, 0x54, 0x4f, 0x5f,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d,
	0x41, 0x50, 0x10, 0x0d, 0x32, 0xd7, 0x13, 0x0a, 0x06, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x69, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0c, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x1d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0xaa, 0x01, 0x0a, 0x21, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x83, 0x01, 0x0a, 0x14, 0x46, 0x64, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x46, 0x64, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46, 0x64, 0x62, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x1b, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x8c, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x9b, 0x01, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x66, 0x63, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50,
	0x66, 0x63, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x66, 0x63, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0xaa,
	0x01, 0x0a, 0x21, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x66, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x66,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x14,
	0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x54, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0xa2, 0x01, 0x0a, 0x1f, 0x49, 0x70, 0x73, 0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70,
	0x73, 0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x73,
	0x65, 0x63, 0x53, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7b, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b,
	0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_proto_switch_proto_rawDescOnce sync.Once
	file_dataplane_proto_switch_proto_rawDescData = file_dataplane_proto_switch_proto_rawDesc
)

func file_dataplane_proto_switch_proto_rawDescGZIP() []byte {
	file_dataplane_proto_switch_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_switch_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_switch_proto_rawDescData)
	})
	return file_dataplane_proto_switch_proto_rawDescData
}

var file_dataplane_proto_switch_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dataplane_proto_switch_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_dataplane_proto_switch_proto_goTypes = []interface{}{
	(SwitchAttr)(0),                                   // 0: lemming.dataplane.sai.SwitchAttr
	(SwitchTunnelAttr)(0),                             // 1: lemming.dataplane.sai.SwitchTunnelAttr
	(*CreateSwitchRequest)(nil),                       // 2: lemming.dataplane.sai.CreateSwitchRequest
	(*CreateSwitchResponse)(nil),                      // 3: lemming.dataplane.sai.CreateSwitchResponse
	(*RemoveSwitchRequest)(nil),                       // 4: lemming.dataplane.sai.RemoveSwitchRequest
	(*RemoveSwitchResponse)(nil),                      // 5: lemming.dataplane.sai.RemoveSwitchResponse
	(*SetSwitchAttributeRequest)(nil),                 // 6: lemming.dataplane.sai.SetSwitchAttributeRequest
	(*SetSwitchAttributeResponse)(nil),                // 7: lemming.dataplane.sai.SetSwitchAttributeResponse
	(*SwitchStateChangeNotificationRequest)(nil),      // 8: lemming.dataplane.sai.SwitchStateChangeNotificationRequest
	(*SwitchStateChangeNotificationResponse)(nil),     // 9: lemming.dataplane.sai.SwitchStateChangeNotificationResponse
	(*SwitchShutdownRequestNotificationRequest)(nil),  // 10: lemming.dataplane.sai.SwitchShutdownRequestNotificationRequest
	(*SwitchShutdownRequestNotificationResponse)(nil), // 11: lemming.dataplane.sai.SwitchShutdownRequestNotificationResponse
	(*FdbEventNotificationRequest)(nil),               // 12: lemming.dataplane.sai.FdbEventNotificationRequest
	(*FdbEventNotificationResponse)(nil),              // 13: lemming.dataplane.sai.FdbEventNotificationResponse
	(*PortStateChangeNotificationRequest)(nil),        // 14: lemming.dataplane.sai.PortStateChangeNotificationRequest
	(*PortStateChangeNotificationResponse)(nil),       // 15: lemming.dataplane.sai.PortStateChangeNotificationResponse
	(*PacketEventNotificationRequest)(nil),            // 16: lemming.dataplane.sai.PacketEventNotificationRequest
	(*PacketEventNotificationResponse)(nil),           // 17: lemming.dataplane.sai.PacketEventNotificationResponse
	(*QueuePfcDeadlockNotificationRequest)(nil),       // 18: lemming.dataplane.sai.QueuePfcDeadlockNotificationRequest
	(*QueuePfcDeadlockNotificationResponse)(nil),      // 19: lemming.dataplane.sai.QueuePfcDeadlockNotificationResponse
	(*BfdSessionStateChangeNotificationRequest)(nil),  // 20: lemming.dataplane.sai.BfdSessionStateChangeNotificationRequest
	(*BfdSessionStateChangeNotificationResponse)(nil), // 21: lemming.dataplane.sai.BfdSessionStateChangeNotificationResponse
	(*TamEventNotificationRequest)(nil),               // 22: lemming.dataplane.sai.TamEventNotificationRequest
	(*TamEventNotificationResponse)(nil),              // 23: lemming.dataplane.sai.TamEventNotificationResponse
	(*IpsecSaStatusChangeNotificationRequest)(nil),    // 24: lemming.dataplane.sai.IpsecSaStatusChangeNotificationRequest
	(*IpsecSaStatusNotificationDataResponse)(nil),     // 25: lemming.dataplane.sai.IpsecSaStatusNotificationDataResponse
	(*GetSwitchAttributeRequest)(nil),                 // 26: lemming.dataplane.sai.GetSwitchAttributeRequest
	(*GetSwitchAttributeResponse)(nil),                // 27: lemming.dataplane.sai.GetSwitchAttributeResponse
	(*GetSwitchStatsRequest)(nil),                     // 28: lemming.dataplane.sai.GetSwitchStatsRequest
	(*GetSwitchStatsResponse)(nil),                    // 29: lemming.dataplane.sai.GetSwitchStatsResponse
	(*CreateSwitchTunnelRequest)(nil),                 // 30: lemming.dataplane.sai.CreateSwitchTunnelRequest
	(*CreateSwitchTunnelResponse)(nil),                // 31: lemming.dataplane.sai.CreateSwitchTunnelResponse
	(*RemoveSwitchTunnelRequest)(nil),                 // 32: lemming.dataplane.sai.RemoveSwitchTunnelRequest
	(*RemoveSwitchTunnelResponse)(nil),                // 33: lemming.dataplane.sai.RemoveSwitchTunnelResponse
	(*SetSwitchTunnelAttributeRequest)(nil),           // 34: lemming.dataplane.sai.SetSwitchTunnelAttributeRequest
	(*SetSwitchTunnelAttributeResponse)(nil),          // 35: lemming.dataplane.sai.SetSwitchTunnelAttributeResponse
	(*GetSwitchTunnelAttributeRequest)(nil),           // 36: lemming.dataplane.sai.GetSwitchTunnelAttributeRequest
	(*GetSwitchTunnelAttributeResponse)(nil),          // 37: lemming.dataplane.sai.GetSwitchTunnelAttributeResponse
	(SwitchSwitchingMode)(0),                          // 38: lemming.dataplane.sai.SwitchSwitchingMode
	(PacketAction)(0),                                 // 39: lemming.dataplane.sai.PacketAction
	(HashAlgorithm)(0),                                // 40: lemming.dataplane.sai.HashAlgorithm
	(*UintMap)(nil),                                   // 41: lemming.dataplane.sai.UintMap
	(SwitchHardwareAccessBus)(0),                      // 42: lemming.dataplane.sai.SwitchHardwareAccessBus
	(SwitchFirmwareLoadMethod)(0),                     // 43: lemming.dataplane.sai.SwitchFirmwareLoadMethod
	(SwitchFirmwareLoadType)(0),                       // 44: lemming.dataplane.sai.SwitchFirmwareLoadType
	(SwitchType)(0),                                   // 45: lemming.dataplane.sai.SwitchType
	(*SystemPortConfig)(nil),                          // 46: lemming.dataplane.sai.SystemPortConfig
	(SwitchFailoverConfigMode)(0),                     // 47: lemming.dataplane.sai.SwitchFailoverConfigMode
	(SwitchOperStatus)(0),                             // 48: lemming.dataplane.sai.SwitchOperStatus
	(*FdbEventNotificationData)(nil),                  // 49: lemming.dataplane.sai.FdbEventNotificationData
	(*PortOperStatusNotification)(nil),                // 50: lemming.dataplane.sai.PortOperStatusNotification
	(*HostifPacketAttribute)(nil),                     // 51: lemming.dataplane.sai.HostifPacketAttribute
	(*QueueDeadlockNotificationData)(nil),             // 52: lemming.dataplane.sai.QueueDeadlockNotificationData
	(*BfdSessionStateChangeNotificationData)(nil),     // 53: lemming.dataplane.sai.BfdSessionStateChangeNotificationData
	(*TamEventActionAttribute)(nil),                   // 54: lemming.dataplane.sai.TamEventActionAttribute
	(*IpsecSaStatusNotificationData)(nil),             // 55: lemming.dataplane.sai.IpsecSaStatusNotificationData
	(*SwitchAttribute)(nil),                           // 56: lemming.dataplane.sai.SwitchAttribute
	(SwitchStat)(0),                                   // 57: lemming.dataplane.sai.SwitchStat
	(TunnelType)(0),                                   // 58: lemming.dataplane.sai.TunnelType
	(TunnelEncapEcnMode)(0),                           // 59: lemming.dataplane.sai.TunnelEncapEcnMode
	(TunnelDecapEcnMode)(0),                           // 60: lemming.dataplane.sai.TunnelDecapEcnMode
	(TunnelVxlanUdpSportMode)(0),                      // 61: lemming.dataplane.sai.TunnelVxlanUdpSportMode
	(*SwitchTunnelAttribute)(nil),                     // 62: lemming.dataplane.sai.SwitchTunnelAttribute
}
var file_dataplane_proto_switch_proto_depIdxs = []int32{
	38, // 0: lemming.dataplane.sai.CreateSwitchRequest.switching_mode:type_name -> lemming.dataplane.sai.SwitchSwitchingMode
	39, // 1: lemming.dataplane.sai.CreateSwitchRequest.fdb_unicast_miss_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	39, // 2: lemming.dataplane.sai.CreateSwitchRequest.fdb_broadcast_miss_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	39, // 3: lemming.dataplane.sai.CreateSwitchRequest.fdb_multicast_miss_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	40, // 4: lemming.dataplane.sai.CreateSwitchRequest.ecmp_default_hash_algorithm:type_name -> lemming.dataplane.sai.HashAlgorithm
	40, // 5: lemming.dataplane.sai.CreateSwitchRequest.lag_default_hash_algorithm:type_name -> lemming.dataplane.sai.HashAlgorithm
	39, // 6: lemming.dataplane.sai.CreateSwitchRequest.pfc_dlr_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	41, // 7: lemming.dataplane.sai.CreateSwitchRequest.pfc_tc_dld_interval:type_name -> lemming.dataplane.sai.UintMap
	41, // 8: lemming.dataplane.sai.CreateSwitchRequest.pfc_tc_dlr_interval:type_name -> lemming.dataplane.sai.UintMap
	42, // 9: lemming.dataplane.sai.CreateSwitchRequest.hardware_access_bus:type_name -> lemming.dataplane.sai.SwitchHardwareAccessBus
	43, // 10: lemming.dataplane.sai.CreateSwitchRequest.firmware_load_method:type_name -> lemming.dataplane.sai.SwitchFirmwareLoadMethod
	44, // 11: lemming.dataplane.sai.CreateSwitchRequest.firmware_load_type:type_name -> lemming.dataplane.sai.SwitchFirmwareLoadType
	45, // 12: lemming.dataplane.sai.CreateSwitchRequest.type:type_name -> lemming.dataplane.sai.SwitchType
	46, // 13: lemming.dataplane.sai.CreateSwitchRequest.system_port_config_list:type_name -> lemming.dataplane.sai.SystemPortConfig
	47, // 14: lemming.dataplane.sai.CreateSwitchRequest.failover_config_mode:type_name -> lemming.dataplane.sai.SwitchFailoverConfigMode
	38, // 15: lemming.dataplane.sai.SetSwitchAttributeRequest.switching_mode:type_name -> lemming.dataplane.sai.SwitchSwitchingMode
	39, // 16: lemming.dataplane.sai.SetSwitchAttributeRequest.fdb_unicast_miss_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	39, // 17: lemming.dataplane.sai.SetSwitchAttributeRequest.fdb_broadcast_miss_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	39, // 18: lemming.dataplane.sai.SetSwitchAttributeRequest.fdb_multicast_miss_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	40, // 19: lemming.dataplane.sai.SetSwitchAttributeRequest.ecmp_default_hash_algorithm:type_name -> lemming.dataplane.sai.HashAlgorithm
	40, // 20: lemming.dataplane.sai.SetSwitchAttributeRequest.lag_default_hash_algorithm:type_name -> lemming.dataplane.sai.HashAlgorithm
	39, // 21: lemming.dataplane.sai.SetSwitchAttributeRequest.pfc_dlr_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	41, // 22: lemming.dataplane.sai.SetSwitchAttributeRequest.pfc_tc_dld_interval:type_name -> lemming.dataplane.sai.UintMap
	41, // 23: lemming.dataplane.sai.SetSwitchAttributeRequest.pfc_tc_dlr_interval:type_name -> lemming.dataplane.sai.UintMap
	47, // 24: lemming.dataplane.sai.SetSwitchAttributeRequest.failover_config_mode:type_name -> lemming.dataplane.sai.SwitchFailoverConfigMode
	48, // 25: lemming.dataplane.sai.SwitchStateChangeNotificationResponse.switch_oper_status:type_name -> lemming.dataplane.sai.SwitchOperStatus
	49, // 26: lemming.dataplane.sai.FdbEventNotificationResponse.data:type_name -> lemming.dataplane.sai.FdbEventNotificationData
	50, // 27: lemming.dataplane.sai.PortStateChangeNotificationResponse.data:type_name -> lemming.dataplane.sai.PortOperStatusNotification
	51, // 28: lemming.dataplane.sai.PacketEventNotificationResponse.attrs:type_name -> lemming.dataplane.sai.HostifPacketAttribute
	52, // 29: lemming.dataplane.sai.QueuePfcDeadlockNotificationResponse.data:type_name -> lemming.dataplane.sai.QueueDeadlockNotificationData
	53, // 30: lemming.dataplane.sai.BfdSessionStateChangeNotificationResponse.data:type_name -> lemming.dataplane.sai.BfdSessionStateChangeNotificationData
	54, // 31: lemming.dataplane.sai.TamEventNotificationResponse.attrs:type_name -> lemming.dataplane.sai.TamEventActionAttribute
	55, // 32: lemming.dataplane.sai.IpsecSaStatusNotificationDataResponse.data:type_name -> lemming.dataplane.sai.IpsecSaStatusNotificationData
	0,  // 33: lemming.dataplane.sai.GetSwitchAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.SwitchAttr
	56, // 34: lemming.dataplane.sai.GetSwitchAttributeResponse.attr:type_name -> lemming.dataplane.sai.SwitchAttribute
	57, // 35: lemming.dataplane.sai.GetSwitchStatsRequest.counter_ids:type_name -> lemming.dataplane.sai.SwitchStat
	58, // 36: lemming.dataplane.sai.CreateSwitchTunnelRequest.tunnel_type:type_name -> lemming.dataplane.sai.TunnelType
	39, // 37: lemming.dataplane.sai.CreateSwitchTunnelRequest.loopback_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	59, // 38: lemming.dataplane.sai.CreateSwitchTunnelRequest.tunnel_encap_ecn_mode:type_name -> lemming.dataplane.sai.TunnelEncapEcnMode
	60, // 39: lemming.dataplane.sai.CreateSwitchTunnelRequest.tunnel_decap_ecn_mode:type_name -> lemming.dataplane.sai.TunnelDecapEcnMode
	61, // 40: lemming.dataplane.sai.CreateSwitchTunnelRequest.tunnel_vxlan_udp_sport_mode:type_name -> lemming.dataplane.sai.TunnelVxlanUdpSportMode
	39, // 41: lemming.dataplane.sai.SetSwitchTunnelAttributeRequest.loopback_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	61, // 42: lemming.dataplane.sai.SetSwitchTunnelAttributeRequest.tunnel_vxlan_udp_sport_mode:type_name -> lemming.dataplane.sai.TunnelVxlanUdpSportMode
	1,  // 43: lemming.dataplane.sai.GetSwitchTunnelAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.SwitchTunnelAttr
	62, // 44: lemming.dataplane.sai.GetSwitchTunnelAttributeResponse.attr:type_name -> lemming.dataplane.sai.SwitchTunnelAttribute
	2,  // 45: lemming.dataplane.sai.Switch.CreateSwitch:input_type -> lemming.dataplane.sai.CreateSwitchRequest
	4,  // 46: lemming.dataplane.sai.Switch.RemoveSwitch:input_type -> lemming.dataplane.sai.RemoveSwitchRequest
	6,  // 47: lemming.dataplane.sai.Switch.SetSwitchAttribute:input_type -> lemming.dataplane.sai.SetSwitchAttributeRequest
	8,  // 48: lemming.dataplane.sai.Switch.SwitchStateChangeNotification:input_type -> lemming.dataplane.sai.SwitchStateChangeNotificationRequest
	10, // 49: lemming.dataplane.sai.Switch.SwitchShutdownRequestNotification:input_type -> lemming.dataplane.sai.SwitchShutdownRequestNotificationRequest
	12, // 50: lemming.dataplane.sai.Switch.FdbEventNotification:input_type -> lemming.dataplane.sai.FdbEventNotificationRequest
	14, // 51: lemming.dataplane.sai.Switch.PortStateChangeNotification:input_type -> lemming.dataplane.sai.PortStateChangeNotificationRequest
	16, // 52: lemming.dataplane.sai.Switch.PacketEventNotification:input_type -> lemming.dataplane.sai.PacketEventNotificationRequest
	18, // 53: lemming.dataplane.sai.Switch.QueuePfcDeadlockNotification:input_type -> lemming.dataplane.sai.QueuePfcDeadlockNotificationRequest
	20, // 54: lemming.dataplane.sai.Switch.BfdSessionStateChangeNotification:input_type -> lemming.dataplane.sai.BfdSessionStateChangeNotificationRequest
	22, // 55: lemming.dataplane.sai.Switch.TamEventNotification:input_type -> lemming.dataplane.sai.TamEventNotificationRequest
	24, // 56: lemming.dataplane.sai.Switch.IpsecSaStatusChangeNotification:input_type -> lemming.dataplane.sai.IpsecSaStatusChangeNotificationRequest
	26, // 57: lemming.dataplane.sai.Switch.GetSwitchAttribute:input_type -> lemming.dataplane.sai.GetSwitchAttributeRequest
	28, // 58: lemming.dataplane.sai.Switch.GetSwitchStats:input_type -> lemming.dataplane.sai.GetSwitchStatsRequest
	30, // 59: lemming.dataplane.sai.Switch.CreateSwitchTunnel:input_type -> lemming.dataplane.sai.CreateSwitchTunnelRequest
	32, // 60: lemming.dataplane.sai.Switch.RemoveSwitchTunnel:input_type -> lemming.dataplane.sai.RemoveSwitchTunnelRequest
	34, // 61: lemming.dataplane.sai.Switch.SetSwitchTunnelAttribute:input_type -> lemming.dataplane.sai.SetSwitchTunnelAttributeRequest
	36, // 62: lemming.dataplane.sai.Switch.GetSwitchTunnelAttribute:input_type -> lemming.dataplane.sai.GetSwitchTunnelAttributeRequest
	3,  // 63: lemming.dataplane.sai.Switch.CreateSwitch:output_type -> lemming.dataplane.sai.CreateSwitchResponse
	5,  // 64: lemming.dataplane.sai.Switch.RemoveSwitch:output_type -> lemming.dataplane.sai.RemoveSwitchResponse
	7,  // 65: lemming.dataplane.sai.Switch.SetSwitchAttribute:output_type -> lemming.dataplane.sai.SetSwitchAttributeResponse
	9,  // 66: lemming.dataplane.sai.Switch.SwitchStateChangeNotification:output_type -> lemming.dataplane.sai.SwitchStateChangeNotificationResponse
	11, // 67: lemming.dataplane.sai.Switch.SwitchShutdownRequestNotification:output_type -> lemming.dataplane.sai.SwitchShutdownRequestNotificationResponse
	13, // 68: lemming.dataplane.sai.Switch.FdbEventNotification:output_type -> lemming.dataplane.sai.FdbEventNotificationResponse
	15, // 69: lemming.dataplane.sai.Switch.PortStateChangeNotification:output_type -> lemming.dataplane.sai.PortStateChangeNotificationResponse
	17, // 70: lemming.dataplane.sai.Switch.PacketEventNotification:output_type -> lemming.dataplane.sai.PacketEventNotificationResponse
	19, // 71: lemming.dataplane.sai.Switch.QueuePfcDeadlockNotification:output_type -> lemming.dataplane.sai.QueuePfcDeadlockNotificationResponse
	21, // 72: lemming.dataplane.sai.Switch.BfdSessionStateChangeNotification:output_type -> lemming.dataplane.sai.BfdSessionStateChangeNotificationResponse
	23, // 73: lemming.dataplane.sai.Switch.TamEventNotification:output_type -> lemming.dataplane.sai.TamEventNotificationResponse
	25, // 74: lemming.dataplane.sai.Switch.IpsecSaStatusChangeNotification:output_type -> lemming.dataplane.sai.IpsecSaStatusNotificationDataResponse
	27, // 75: lemming.dataplane.sai.Switch.GetSwitchAttribute:output_type -> lemming.dataplane.sai.GetSwitchAttributeResponse
	29, // 76: lemming.dataplane.sai.Switch.GetSwitchStats:output_type -> lemming.dataplane.sai.GetSwitchStatsResponse
	31, // 77: lemming.dataplane.sai.Switch.CreateSwitchTunnel:output_type -> lemming.dataplane.sai.CreateSwitchTunnelResponse
	33, // 78: lemming.dataplane.sai.Switch.RemoveSwitchTunnel:output_type -> lemming.dataplane.sai.RemoveSwitchTunnelResponse
	35, // 79: lemming.dataplane.sai.Switch.SetSwitchTunnelAttribute:output_type -> lemming.dataplane.sai.SetSwitchTunnelAttributeResponse
	37, // 80: lemming.dataplane.sai.Switch.GetSwitchTunnelAttribute:output_type -> lemming.dataplane.sai.GetSwitchTunnelAttributeResponse
	63, // [63:81] is the sub-list for method output_type
	45, // [45:63] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_dataplane_proto_switch_proto_init() }
func file_dataplane_proto_switch_proto_init() {
	if File_dataplane_proto_switch_proto != nil {
		return
	}
	file_dataplane_proto_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_switch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSwitchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSwitchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSwitchAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSwitchAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchStateChangeNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchStateChangeNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchShutdownRequestNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchShutdownRequestNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FdbEventNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FdbEventNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortStateChangeNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortStateChangeNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketEventNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PacketEventNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuePfcDeadlockNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuePfcDeadlockNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BfdSessionStateChangeNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BfdSessionStateChangeNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamEventNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TamEventNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecSaStatusChangeNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecSaStatusNotificationDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSwitchTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSwitchTunnelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSwitchTunnelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSwitchTunnelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSwitchTunnelAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSwitchTunnelAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchTunnelAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_switch_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSwitchTunnelAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_switch_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_proto_switch_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dataplane_proto_switch_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_dataplane_proto_switch_proto_msgTypes[32].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_switch_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_switch_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_switch_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_switch_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_switch_proto_msgTypes,
	}.Build()
	File_dataplane_proto_switch_proto = out.File
	file_dataplane_proto_switch_proto_rawDesc = nil
	file_dataplane_proto_switch_proto_goTypes = nil
	file_dataplane_proto_switch_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SwitchClient is the client API for Switch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SwitchClient interface {
	CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*CreateSwitchResponse, error)
	RemoveSwitch(ctx context.Context, in *RemoveSwitchRequest, opts ...grpc.CallOption) (*RemoveSwitchResponse, error)
	SetSwitchAttribute(ctx context.Context, in *SetSwitchAttributeRequest, opts ...grpc.CallOption) (*SetSwitchAttributeResponse, error)
	SwitchStateChangeNotification(ctx context.Context, in *SwitchStateChangeNotificationRequest, opts ...grpc.CallOption) (Switch_SwitchStateChangeNotificationClient, error)
	SwitchShutdownRequestNotification(ctx context.Context, in *SwitchShutdownRequestNotificationRequest, opts ...grpc.CallOption) (Switch_SwitchShutdownRequestNotificationClient, error)
	FdbEventNotification(ctx context.Context, in *FdbEventNotificationRequest, opts ...grpc.CallOption) (Switch_FdbEventNotificationClient, error)
	PortStateChangeNotification(ctx context.Context, in *PortStateChangeNotificationRequest, opts ...grpc.CallOption) (Switch_PortStateChangeNotificationClient, error)
	PacketEventNotification(ctx context.Context, in *PacketEventNotificationRequest, opts ...grpc.CallOption) (Switch_PacketEventNotificationClient, error)
	QueuePfcDeadlockNotification(ctx context.Context, in *QueuePfcDeadlockNotificationRequest, opts ...grpc.CallOption) (Switch_QueuePfcDeadlockNotificationClient, error)
	BfdSessionStateChangeNotification(ctx context.Context, in *BfdSessionStateChangeNotificationRequest, opts ...grpc.CallOption) (Switch_BfdSessionStateChangeNotificationClient, error)
	TamEventNotification(ctx context.Context, in *TamEventNotificationRequest, opts ...grpc.CallOption) (Switch_TamEventNotificationClient, error)
	IpsecSaStatusChangeNotification(ctx context.Context, in *IpsecSaStatusChangeNotificationRequest, opts ...grpc.CallOption) (Switch_IpsecSaStatusChangeNotificationClient, error)
	GetSwitchAttribute(ctx context.Context, in *GetSwitchAttributeRequest, opts ...grpc.CallOption) (*GetSwitchAttributeResponse, error)
	GetSwitchStats(ctx context.Context, in *GetSwitchStatsRequest, opts ...grpc.CallOption) (*GetSwitchStatsResponse, error)
	CreateSwitchTunnel(ctx context.Context, in *CreateSwitchTunnelRequest, opts ...grpc.CallOption) (*CreateSwitchTunnelResponse, error)
	RemoveSwitchTunnel(ctx context.Context, in *RemoveSwitchTunnelRequest, opts ...grpc.CallOption) (*RemoveSwitchTunnelResponse, error)
	SetSwitchTunnelAttribute(ctx context.Context, in *SetSwitchTunnelAttributeRequest, opts ...grpc.CallOption) (*SetSwitchTunnelAttributeResponse, error)
	GetSwitchTunnelAttribute(ctx context.Context, in *GetSwitchTunnelAttributeRequest, opts ...grpc.CallOption) (*GetSwitchTunnelAttributeResponse, error)
}

type switchClient struct {
	cc grpc.ClientConnInterface
}

func NewSwitchClient(cc grpc.ClientConnInterface) SwitchClient {
	return &switchClient{cc}
}

func (c *switchClient) CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*CreateSwitchResponse, error) {
	out := new(CreateSwitchResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Switch/CreateSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) RemoveSwitch(ctx context.Context, in *RemoveSwitchRequest, opts ...grpc.CallOption) (*RemoveSwitchResponse, error) {
	out := new(RemoveSwitchResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Switch/RemoveSwitch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) SetSwitchAttribute(ctx context.Context, in *SetSwitchAttributeRequest, opts ...grpc.CallOption) (*SetSwitchAttributeResponse, error) {
	out := new(SetSwitchAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Switch/SetSwitchAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) SwitchStateChangeNotification(ctx context.Context, in *SwitchStateChangeNotificationRequest, opts ...grpc.CallOption) (Switch_SwitchStateChangeNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Switch_serviceDesc.Streams[0], "/lemming.dataplane.sai.Switch/SwitchStateChangeNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &switchSwitchStateChangeNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Switch_SwitchStateChangeNotificationClient interface {
	Recv() (*SwitchStateChangeNotificationResponse, error)
	grpc.ClientStream
}

type switchSwitchStateChangeNotificationClient struct {
	grpc.ClientStream
}

func (x *switchSwitchStateChangeNotificationClient) Recv() (*SwitchStateChangeNotificationResponse, error) {
	m := new(SwitchStateChangeNotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *switchClient) SwitchShutdownRequestNotification(ctx context.Context, in *SwitchShutdownRequestNotificationRequest, opts ...grpc.CallOption) (Switch_SwitchShutdownRequestNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Switch_serviceDesc.Streams[1], "/lemming.dataplane.sai.Switch/SwitchShutdownRequestNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &switchSwitchShutdownRequestNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Switch_SwitchShutdownRequestNotificationClient interface {
	Recv() (*SwitchShutdownRequestNotificationResponse, error)
	grpc.ClientStream
}

type switchSwitchShutdownRequestNotificationClient struct {
	grpc.ClientStream
}

func (x *switchSwitchShutdownRequestNotificationClient) Recv() (*SwitchShutdownRequestNotificationResponse, error) {
	m := new(SwitchShutdownRequestNotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *switchClient) FdbEventNotification(ctx context.Context, in *FdbEventNotificationRequest, opts ...grpc.CallOption) (Switch_FdbEventNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Switch_serviceDesc.Streams[2], "/lemming.dataplane.sai.Switch/FdbEventNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &switchFdbEventNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Switch_FdbEventNotificationClient interface {
	Recv() (*FdbEventNotificationResponse, error)
	grpc.ClientStream
}

type switchFdbEventNotificationClient struct {
	grpc.ClientStream
}

func (x *switchFdbEventNotificationClient) Recv() (*FdbEventNotificationResponse, error) {
	m := new(FdbEventNotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *switchClient) PortStateChangeNotification(ctx context.Context, in *PortStateChangeNotificationRequest, opts ...grpc.CallOption) (Switch_PortStateChangeNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Switch_serviceDesc.Streams[3], "/lemming.dataplane.sai.Switch/PortStateChangeNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &switchPortStateChangeNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Switch_PortStateChangeNotificationClient interface {
	Recv() (*PortStateChangeNotificationResponse, error)
	grpc.ClientStream
}

type switchPortStateChangeNotificationClient struct {
	grpc.ClientStream
}

func (x *switchPortStateChangeNotificationClient) Recv() (*PortStateChangeNotificationResponse, error) {
	m := new(PortStateChangeNotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *switchClient) PacketEventNotification(ctx context.Context, in *PacketEventNotificationRequest, opts ...grpc.CallOption) (Switch_PacketEventNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Switch_serviceDesc.Streams[4], "/lemming.dataplane.sai.Switch/PacketEventNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &switchPacketEventNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Switch_PacketEventNotificationClient interface {
	Recv() (*PacketEventNotificationResponse, error)
	grpc.ClientStream
}

type switchPacketEventNotificationClient struct {
	grpc.ClientStream
}

func (x *switchPacketEventNotificationClient) Recv() (*PacketEventNotificationResponse, error) {
	m := new(PacketEventNotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *switchClient) QueuePfcDeadlockNotification(ctx context.Context, in *QueuePfcDeadlockNotificationRequest, opts ...grpc.CallOption) (Switch_QueuePfcDeadlockNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Switch_serviceDesc.Streams[5], "/lemming.dataplane.sai.Switch/QueuePfcDeadlockNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &switchQueuePfcDeadlockNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Switch_QueuePfcDeadlockNotificationClient interface {
	Recv() (*QueuePfcDeadlockNotificationResponse, error)
	grpc.ClientStream
}

type switchQueuePfcDeadlockNotificationClient struct {
	grpc.ClientStream
}

func (x *switchQueuePfcDeadlockNotificationClient) Recv() (*QueuePfcDeadlockNotificationResponse, error) {
	m := new(QueuePfcDeadlockNotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *switchClient) BfdSessionStateChangeNotification(ctx context.Context, in *BfdSessionStateChangeNotificationRequest, opts ...grpc.CallOption) (Switch_BfdSessionStateChangeNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Switch_serviceDesc.Streams[6], "/lemming.dataplane.sai.Switch/BfdSessionStateChangeNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &switchBfdSessionStateChangeNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Switch_BfdSessionStateChangeNotificationClient interface {
	Recv() (*BfdSessionStateChangeNotificationResponse, error)
	grpc.ClientStream
}

type switchBfdSessionStateChangeNotificationClient struct {
	grpc.ClientStream
}

func (x *switchBfdSessionStateChangeNotificationClient) Recv() (*BfdSessionStateChangeNotificationResponse, error) {
	m := new(BfdSessionStateChangeNotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *switchClient) TamEventNotification(ctx context.Context, in *TamEventNotificationRequest, opts ...grpc.CallOption) (Switch_TamEventNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Switch_serviceDesc.Streams[7], "/lemming.dataplane.sai.Switch/TamEventNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &switchTamEventNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Switch_TamEventNotificationClient interface {
	Recv() (*TamEventNotificationResponse, error)
	grpc.ClientStream
}

type switchTamEventNotificationClient struct {
	grpc.ClientStream
}

func (x *switchTamEventNotificationClient) Recv() (*TamEventNotificationResponse, error) {
	m := new(TamEventNotificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *switchClient) IpsecSaStatusChangeNotification(ctx context.Context, in *IpsecSaStatusChangeNotificationRequest, opts ...grpc.CallOption) (Switch_IpsecSaStatusChangeNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Switch_serviceDesc.Streams[8], "/lemming.dataplane.sai.Switch/IpsecSaStatusChangeNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &switchIpsecSaStatusChangeNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Switch_IpsecSaStatusChangeNotificationClient interface {
	Recv() (*IpsecSaStatusNotificationDataResponse, error)
	grpc.ClientStream
}

type switchIpsecSaStatusChangeNotificationClient struct {
	grpc.ClientStream
}

func (x *switchIpsecSaStatusChangeNotificationClient) Recv() (*IpsecSaStatusNotificationDataResponse, error) {
	m := new(IpsecSaStatusNotificationDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *switchClient) GetSwitchAttribute(ctx context.Context, in *GetSwitchAttributeRequest, opts ...grpc.CallOption) (*GetSwitchAttributeResponse, error) {
	out := new(GetSwitchAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Switch/GetSwitchAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) GetSwitchStats(ctx context.Context, in *GetSwitchStatsRequest, opts ...grpc.CallOption) (*GetSwitchStatsResponse, error) {
	out := new(GetSwitchStatsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Switch/GetSwitchStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) CreateSwitchTunnel(ctx context.Context, in *CreateSwitchTunnelRequest, opts ...grpc.CallOption) (*CreateSwitchTunnelResponse, error) {
	out := new(CreateSwitchTunnelResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Switch/CreateSwitchTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) RemoveSwitchTunnel(ctx context.Context, in *RemoveSwitchTunnelRequest, opts ...grpc.CallOption) (*RemoveSwitchTunnelResponse, error) {
	out := new(RemoveSwitchTunnelResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Switch/RemoveSwitchTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) SetSwitchTunnelAttribute(ctx context.Context, in *SetSwitchTunnelAttributeRequest, opts ...grpc.CallOption) (*SetSwitchTunnelAttributeResponse, error) {
	out := new(SetSwitchTunnelAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Switch/SetSwitchTunnelAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) GetSwitchTunnelAttribute(ctx context.Context, in *GetSwitchTunnelAttributeRequest, opts ...grpc.CallOption) (*GetSwitchTunnelAttributeResponse, error) {
	out := new(GetSwitchTunnelAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Switch/GetSwitchTunnelAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwitchServer is the server API for Switch service.
type SwitchServer interface {
	CreateSwitch(context.Context, *CreateSwitchRequest) (*CreateSwitchResponse, error)
	RemoveSwitch(context.Context, *RemoveSwitchRequest) (*RemoveSwitchResponse, error)
	SetSwitchAttribute(context.Context, *SetSwitchAttributeRequest) (*SetSwitchAttributeResponse, error)
	SwitchStateChangeNotification(*SwitchStateChangeNotificationRequest, Switch_SwitchStateChangeNotificationServer) error
	SwitchShutdownRequestNotification(*SwitchShutdownRequestNotificationRequest, Switch_SwitchShutdownRequestNotificationServer) error
	FdbEventNotification(*FdbEventNotificationRequest, Switch_FdbEventNotificationServer) error
	PortStateChangeNotification(*PortStateChangeNotificationRequest, Switch_PortStateChangeNotificationServer) error
	PacketEventNotification(*PacketEventNotificationRequest, Switch_PacketEventNotificationServer) error
	QueuePfcDeadlockNotification(*QueuePfcDeadlockNotificationRequest, Switch_QueuePfcDeadlockNotificationServer) error
	BfdSessionStateChangeNotification(*BfdSessionStateChangeNotificationRequest, Switch_BfdSessionStateChangeNotificationServer) error
	TamEventNotification(*TamEventNotificationRequest, Switch_TamEventNotificationServer) error
	IpsecSaStatusChangeNotification(*IpsecSaStatusChangeNotificationRequest, Switch_IpsecSaStatusChangeNotificationServer) error
	GetSwitchAttribute(context.Context, *GetSwitchAttributeRequest) (*GetSwitchAttributeResponse, error)
	GetSwitchStats(context.Context, *GetSwitchStatsRequest) (*GetSwitchStatsResponse, error)
	CreateSwitchTunnel(context.Context, *CreateSwitchTunnelRequest) (*CreateSwitchTunnelResponse, error)
	RemoveSwitchTunnel(context.Context, *RemoveSwitchTunnelRequest) (*RemoveSwitchTunnelResponse, error)
	SetSwitchTunnelAttribute(context.Context, *SetSwitchTunnelAttributeRequest) (*SetSwitchTunnelAttributeResponse, error)
	GetSwitchTunnelAttribute(context.Context, *GetSwitchTunnelAttributeRequest) (*GetSwitchTunnelAttributeResponse, error)
}

// UnimplementedSwitchServer can be embedded to have forward compatible implementations.
type UnimplementedSwitchServer struct {
}

func (*UnimplementedSwitchServer) CreateSwitch(context.Context, *CreateSwitchRequest) (*CreateSwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwitch not implemented")
}
func (*UnimplementedSwitchServer) RemoveSwitch(context.Context, *RemoveSwitchRequest) (*RemoveSwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSwitch not implemented")
}
func (*UnimplementedSwitchServer) SetSwitchAttribute(context.Context, *SetSwitchAttributeRequest) (*SetSwitchAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSwitchAttribute not implemented")
}
func (*UnimplementedSwitchServer) SwitchStateChangeNotification(*SwitchStateChangeNotificationRequest, Switch_SwitchStateChangeNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method SwitchStateChangeNotification not implemented")
}
func (*UnimplementedSwitchServer) SwitchShutdownRequestNotification(*SwitchShutdownRequestNotificationRequest, Switch_SwitchShutdownRequestNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method SwitchShutdownRequestNotification not implemented")
}
func (*UnimplementedSwitchServer) FdbEventNotification(*FdbEventNotificationRequest, Switch_FdbEventNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method FdbEventNotification not implemented")
}
func (*UnimplementedSwitchServer) PortStateChangeNotification(*PortStateChangeNotificationRequest, Switch_PortStateChangeNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method PortStateChangeNotification not implemented")
}
func (*UnimplementedSwitchServer) PacketEventNotification(*PacketEventNotificationRequest, Switch_PacketEventNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method PacketEventNotification not implemented")
}
func (*UnimplementedSwitchServer) QueuePfcDeadlockNotification(*QueuePfcDeadlockNotificationRequest, Switch_QueuePfcDeadlockNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method QueuePfcDeadlockNotification not implemented")
}
func (*UnimplementedSwitchServer) BfdSessionStateChangeNotification(*BfdSessionStateChangeNotificationRequest, Switch_BfdSessionStateChangeNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method BfdSessionStateChangeNotification not implemented")
}
func (*UnimplementedSwitchServer) TamEventNotification(*TamEventNotificationRequest, Switch_TamEventNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method TamEventNotification not implemented")
}
func (*UnimplementedSwitchServer) IpsecSaStatusChangeNotification(*IpsecSaStatusChangeNotificationRequest, Switch_IpsecSaStatusChangeNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method IpsecSaStatusChangeNotification not implemented")
}
func (*UnimplementedSwitchServer) GetSwitchAttribute(context.Context, *GetSwitchAttributeRequest) (*GetSwitchAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchAttribute not implemented")
}
func (*UnimplementedSwitchServer) GetSwitchStats(context.Context, *GetSwitchStatsRequest) (*GetSwitchStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchStats not implemented")
}
func (*UnimplementedSwitchServer) CreateSwitchTunnel(context.Context, *CreateSwitchTunnelRequest) (*CreateSwitchTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwitchTunnel not implemented")
}
func (*UnimplementedSwitchServer) RemoveSwitchTunnel(context.Context, *RemoveSwitchTunnelRequest) (*RemoveSwitchTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSwitchTunnel not implemented")
}
func (*UnimplementedSwitchServer) SetSwitchTunnelAttribute(context.Context, *SetSwitchTunnelAttributeRequest) (*SetSwitchTunnelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSwitchTunnelAttribute not implemented")
}
func (*UnimplementedSwitchServer) GetSwitchTunnelAttribute(context.Context, *GetSwitchTunnelAttributeRequest) (*GetSwitchTunnelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchTunnelAttribute not implemented")
}

func RegisterSwitchServer(s *grpc.Server, srv SwitchServer) {
	s.RegisterService(&_Switch_serviceDesc, srv)
}

func _Switch_CreateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).CreateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Switch/CreateSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).CreateSwitch(ctx, req.(*CreateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_RemoveSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).RemoveSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Switch/RemoveSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).RemoveSwitch(ctx, req.(*RemoveSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_SetSwitchAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSwitchAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).SetSwitchAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Switch/SetSwitchAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).SetSwitchAttribute(ctx, req.(*SetSwitchAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_SwitchStateChangeNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SwitchStateChangeNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).SwitchStateChangeNotification(m, &switchSwitchStateChangeNotificationServer{stream})
}

type Switch_SwitchStateChangeNotificationServer interface {
	Send(*SwitchStateChangeNotificationResponse) error
	grpc.ServerStream
}

type switchSwitchStateChangeNotificationServer struct {
	grpc.ServerStream
}

func (x *switchSwitchStateChangeNotificationServer) Send(m *SwitchStateChangeNotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Switch_SwitchShutdownRequestNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SwitchShutdownRequestNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).SwitchShutdownRequestNotification(m, &switchSwitchShutdownRequestNotificationServer{stream})
}

type Switch_SwitchShutdownRequestNotificationServer interface {
	Send(*SwitchShutdownRequestNotificationResponse) error
	grpc.ServerStream
}

type switchSwitchShutdownRequestNotificationServer struct {
	grpc.ServerStream
}

func (x *switchSwitchShutdownRequestNotificationServer) Send(m *SwitchShutdownRequestNotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Switch_FdbEventNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FdbEventNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).FdbEventNotification(m, &switchFdbEventNotificationServer{stream})
}

type Switch_FdbEventNotificationServer interface {
	Send(*FdbEventNotificationResponse) error
	grpc.ServerStream
}

type switchFdbEventNotificationServer struct {
	grpc.ServerStream
}

func (x *switchFdbEventNotificationServer) Send(m *FdbEventNotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Switch_PortStateChangeNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PortStateChangeNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).PortStateChangeNotification(m, &switchPortStateChangeNotificationServer{stream})
}

type Switch_PortStateChangeNotificationServer interface {
	Send(*PortStateChangeNotificationResponse) error
	grpc.ServerStream
}

type switchPortStateChangeNotificationServer struct {
	grpc.ServerStream
}

func (x *switchPortStateChangeNotificationServer) Send(m *PortStateChangeNotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Switch_PacketEventNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PacketEventNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).PacketEventNotification(m, &switchPacketEventNotificationServer{stream})
}

type Switch_PacketEventNotificationServer interface {
	Send(*PacketEventNotificationResponse) error
	grpc.ServerStream
}

type switchPacketEventNotificationServer struct {
	grpc.ServerStream
}

func (x *switchPacketEventNotificationServer) Send(m *PacketEventNotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Switch_QueuePfcDeadlockNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueuePfcDeadlockNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).QueuePfcDeadlockNotification(m, &switchQueuePfcDeadlockNotificationServer{stream})
}

type Switch_QueuePfcDeadlockNotificationServer interface {
	Send(*QueuePfcDeadlockNotificationResponse) error
	grpc.ServerStream
}

type switchQueuePfcDeadlockNotificationServer struct {
	grpc.ServerStream
}

func (x *switchQueuePfcDeadlockNotificationServer) Send(m *QueuePfcDeadlockNotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Switch_BfdSessionStateChangeNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BfdSessionStateChangeNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).BfdSessionStateChangeNotification(m, &switchBfdSessionStateChangeNotificationServer{stream})
}

type Switch_BfdSessionStateChangeNotificationServer interface {
	Send(*BfdSessionStateChangeNotificationResponse) error
	grpc.ServerStream
}

type switchBfdSessionStateChangeNotificationServer struct {
	grpc.ServerStream
}

func (x *switchBfdSessionStateChangeNotificationServer) Send(m *BfdSessionStateChangeNotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Switch_TamEventNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TamEventNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).TamEventNotification(m, &switchTamEventNotificationServer{stream})
}

type Switch_TamEventNotificationServer interface {
	Send(*TamEventNotificationResponse) error
	grpc.ServerStream
}

type switchTamEventNotificationServer struct {
	grpc.ServerStream
}

func (x *switchTamEventNotificationServer) Send(m *TamEventNotificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Switch_IpsecSaStatusChangeNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IpsecSaStatusChangeNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).IpsecSaStatusChangeNotification(m, &switchIpsecSaStatusChangeNotificationServer{stream})
}

type Switch_IpsecSaStatusChangeNotificationServer interface {
	Send(*IpsecSaStatusNotificationDataResponse) error
	grpc.ServerStream
}

type switchIpsecSaStatusChangeNotificationServer struct {
	grpc.ServerStream
}

func (x *switchIpsecSaStatusChangeNotificationServer) Send(m *IpsecSaStatusNotificationDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Switch_GetSwitchAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).GetSwitchAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Switch/GetSwitchAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).GetSwitchAttribute(ctx, req.(*GetSwitchAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_GetSwitchStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).GetSwitchStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Switch/GetSwitchStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).GetSwitchStats(ctx, req.(*GetSwitchStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_CreateSwitchTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwitchTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).CreateSwitchTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Switch/CreateSwitchTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).CreateSwitchTunnel(ctx, req.(*CreateSwitchTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_RemoveSwitchTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSwitchTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).RemoveSwitchTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Switch/RemoveSwitchTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).RemoveSwitchTunnel(ctx, req.(*RemoveSwitchTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_SetSwitchTunnelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSwitchTunnelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).SetSwitchTunnelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Switch/SetSwitchTunnelAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).SetSwitchTunnelAttribute(ctx, req.(*SetSwitchTunnelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_GetSwitchTunnelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchTunnelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).GetSwitchTunnelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Switch/GetSwitchTunnelAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).GetSwitchTunnelAttribute(ctx, req.(*GetSwitchTunnelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Switch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Switch",
	HandlerType: (*SwitchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSwitch",
			Handler:    _Switch_CreateSwitch_Handler,
		},
		{
			MethodName: "RemoveSwitch",
			Handler:    _Switch_RemoveSwitch_Handler,
		},
		{
			MethodName: "SetSwitchAttribute",
			Handler:    _Switch_SetSwitchAttribute_Handler,
		},
		{
			MethodName: "GetSwitchAttribute",
			Handler:    _Switch_GetSwitchAttribute_Handler,
		},
		{
			MethodName: "GetSwitchStats",
			Handler:    _Switch_GetSwitchStats_Handler,
		},
		{
			MethodName: "CreateSwitchTunnel",
			Handler:    _Switch_CreateSwitchTunnel_Handler,
		},
		{
			MethodName: "RemoveSwitchTunnel",
			Handler:    _Switch_RemoveSwitchTunnel_Handler,
		},
		{
			MethodName: "SetSwitchTunnelAttribute",
			Handler:    _Switch_SetSwitchTunnelAttribute_Handler,
		},
		{
			MethodName: "GetSwitchTunnelAttribute",
			Handler:    _Switch_GetSwitchTunnelAttribute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SwitchStateChangeNotification",
			Handler:       _Switch_SwitchStateChangeNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SwitchShutdownRequestNotification",
			Handler:       _Switch_SwitchShutdownRequestNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FdbEventNotification",
			Handler:       _Switch_FdbEventNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PortStateChangeNotification",
			Handler:       _Switch_PortStateChangeNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PacketEventNotification",
			Handler:       _Switch_PacketEventNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueuePfcDeadlockNotification",
			Handler:       _Switch_QueuePfcDeadlockNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BfdSessionStateChangeNotification",
			Handler:       _Switch_BfdSessionStateChangeNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TamEventNotification",
			Handler:       _Switch_TamEventNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IpsecSaStatusChangeNotification",
			Handler:       _Switch_IpsecSaStatusChangeNotification_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dataplane/proto/switch.proto",
}
