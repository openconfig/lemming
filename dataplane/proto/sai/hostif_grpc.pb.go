// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/hostif.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Hostif_CreateHostif_FullMethodName                      = "/lemming.dataplane.sai.Hostif/CreateHostif"
	Hostif_RemoveHostif_FullMethodName                      = "/lemming.dataplane.sai.Hostif/RemoveHostif"
	Hostif_SetHostifAttribute_FullMethodName                = "/lemming.dataplane.sai.Hostif/SetHostifAttribute"
	Hostif_GetHostifAttribute_FullMethodName                = "/lemming.dataplane.sai.Hostif/GetHostifAttribute"
	Hostif_CreateHostifTableEntry_FullMethodName            = "/lemming.dataplane.sai.Hostif/CreateHostifTableEntry"
	Hostif_RemoveHostifTableEntry_FullMethodName            = "/lemming.dataplane.sai.Hostif/RemoveHostifTableEntry"
	Hostif_GetHostifTableEntryAttribute_FullMethodName      = "/lemming.dataplane.sai.Hostif/GetHostifTableEntryAttribute"
	Hostif_CreateHostifTrapGroup_FullMethodName             = "/lemming.dataplane.sai.Hostif/CreateHostifTrapGroup"
	Hostif_RemoveHostifTrapGroup_FullMethodName             = "/lemming.dataplane.sai.Hostif/RemoveHostifTrapGroup"
	Hostif_SetHostifTrapGroupAttribute_FullMethodName       = "/lemming.dataplane.sai.Hostif/SetHostifTrapGroupAttribute"
	Hostif_GetHostifTrapGroupAttribute_FullMethodName       = "/lemming.dataplane.sai.Hostif/GetHostifTrapGroupAttribute"
	Hostif_CreateHostifTrap_FullMethodName                  = "/lemming.dataplane.sai.Hostif/CreateHostifTrap"
	Hostif_RemoveHostifTrap_FullMethodName                  = "/lemming.dataplane.sai.Hostif/RemoveHostifTrap"
	Hostif_SetHostifTrapAttribute_FullMethodName            = "/lemming.dataplane.sai.Hostif/SetHostifTrapAttribute"
	Hostif_GetHostifTrapAttribute_FullMethodName            = "/lemming.dataplane.sai.Hostif/GetHostifTrapAttribute"
	Hostif_CreateHostifUserDefinedTrap_FullMethodName       = "/lemming.dataplane.sai.Hostif/CreateHostifUserDefinedTrap"
	Hostif_RemoveHostifUserDefinedTrap_FullMethodName       = "/lemming.dataplane.sai.Hostif/RemoveHostifUserDefinedTrap"
	Hostif_SetHostifUserDefinedTrapAttribute_FullMethodName = "/lemming.dataplane.sai.Hostif/SetHostifUserDefinedTrapAttribute"
	Hostif_GetHostifUserDefinedTrapAttribute_FullMethodName = "/lemming.dataplane.sai.Hostif/GetHostifUserDefinedTrapAttribute"
)

// HostifClient is the client API for Hostif service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostifClient interface {
	CreateHostif(ctx context.Context, in *CreateHostifRequest, opts ...grpc.CallOption) (*CreateHostifResponse, error)
	RemoveHostif(ctx context.Context, in *RemoveHostifRequest, opts ...grpc.CallOption) (*RemoveHostifResponse, error)
	SetHostifAttribute(ctx context.Context, in *SetHostifAttributeRequest, opts ...grpc.CallOption) (*SetHostifAttributeResponse, error)
	GetHostifAttribute(ctx context.Context, in *GetHostifAttributeRequest, opts ...grpc.CallOption) (*GetHostifAttributeResponse, error)
	CreateHostifTableEntry(ctx context.Context, in *CreateHostifTableEntryRequest, opts ...grpc.CallOption) (*CreateHostifTableEntryResponse, error)
	RemoveHostifTableEntry(ctx context.Context, in *RemoveHostifTableEntryRequest, opts ...grpc.CallOption) (*RemoveHostifTableEntryResponse, error)
	GetHostifTableEntryAttribute(ctx context.Context, in *GetHostifTableEntryAttributeRequest, opts ...grpc.CallOption) (*GetHostifTableEntryAttributeResponse, error)
	CreateHostifTrapGroup(ctx context.Context, in *CreateHostifTrapGroupRequest, opts ...grpc.CallOption) (*CreateHostifTrapGroupResponse, error)
	RemoveHostifTrapGroup(ctx context.Context, in *RemoveHostifTrapGroupRequest, opts ...grpc.CallOption) (*RemoveHostifTrapGroupResponse, error)
	SetHostifTrapGroupAttribute(ctx context.Context, in *SetHostifTrapGroupAttributeRequest, opts ...grpc.CallOption) (*SetHostifTrapGroupAttributeResponse, error)
	GetHostifTrapGroupAttribute(ctx context.Context, in *GetHostifTrapGroupAttributeRequest, opts ...grpc.CallOption) (*GetHostifTrapGroupAttributeResponse, error)
	CreateHostifTrap(ctx context.Context, in *CreateHostifTrapRequest, opts ...grpc.CallOption) (*CreateHostifTrapResponse, error)
	RemoveHostifTrap(ctx context.Context, in *RemoveHostifTrapRequest, opts ...grpc.CallOption) (*RemoveHostifTrapResponse, error)
	SetHostifTrapAttribute(ctx context.Context, in *SetHostifTrapAttributeRequest, opts ...grpc.CallOption) (*SetHostifTrapAttributeResponse, error)
	GetHostifTrapAttribute(ctx context.Context, in *GetHostifTrapAttributeRequest, opts ...grpc.CallOption) (*GetHostifTrapAttributeResponse, error)
	CreateHostifUserDefinedTrap(ctx context.Context, in *CreateHostifUserDefinedTrapRequest, opts ...grpc.CallOption) (*CreateHostifUserDefinedTrapResponse, error)
	RemoveHostifUserDefinedTrap(ctx context.Context, in *RemoveHostifUserDefinedTrapRequest, opts ...grpc.CallOption) (*RemoveHostifUserDefinedTrapResponse, error)
	SetHostifUserDefinedTrapAttribute(ctx context.Context, in *SetHostifUserDefinedTrapAttributeRequest, opts ...grpc.CallOption) (*SetHostifUserDefinedTrapAttributeResponse, error)
	GetHostifUserDefinedTrapAttribute(ctx context.Context, in *GetHostifUserDefinedTrapAttributeRequest, opts ...grpc.CallOption) (*GetHostifUserDefinedTrapAttributeResponse, error)
}

type hostifClient struct {
	cc grpc.ClientConnInterface
}

func NewHostifClient(cc grpc.ClientConnInterface) HostifClient {
	return &hostifClient{cc}
}

func (c *hostifClient) CreateHostif(ctx context.Context, in *CreateHostifRequest, opts ...grpc.CallOption) (*CreateHostifResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHostifResponse)
	err := c.cc.Invoke(ctx, Hostif_CreateHostif_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) RemoveHostif(ctx context.Context, in *RemoveHostifRequest, opts ...grpc.CallOption) (*RemoveHostifResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveHostifResponse)
	err := c.cc.Invoke(ctx, Hostif_RemoveHostif_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) SetHostifAttribute(ctx context.Context, in *SetHostifAttributeRequest, opts ...grpc.CallOption) (*SetHostifAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetHostifAttributeResponse)
	err := c.cc.Invoke(ctx, Hostif_SetHostifAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) GetHostifAttribute(ctx context.Context, in *GetHostifAttributeRequest, opts ...grpc.CallOption) (*GetHostifAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHostifAttributeResponse)
	err := c.cc.Invoke(ctx, Hostif_GetHostifAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) CreateHostifTableEntry(ctx context.Context, in *CreateHostifTableEntryRequest, opts ...grpc.CallOption) (*CreateHostifTableEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHostifTableEntryResponse)
	err := c.cc.Invoke(ctx, Hostif_CreateHostifTableEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) RemoveHostifTableEntry(ctx context.Context, in *RemoveHostifTableEntryRequest, opts ...grpc.CallOption) (*RemoveHostifTableEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveHostifTableEntryResponse)
	err := c.cc.Invoke(ctx, Hostif_RemoveHostifTableEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) GetHostifTableEntryAttribute(ctx context.Context, in *GetHostifTableEntryAttributeRequest, opts ...grpc.CallOption) (*GetHostifTableEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHostifTableEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Hostif_GetHostifTableEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) CreateHostifTrapGroup(ctx context.Context, in *CreateHostifTrapGroupRequest, opts ...grpc.CallOption) (*CreateHostifTrapGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHostifTrapGroupResponse)
	err := c.cc.Invoke(ctx, Hostif_CreateHostifTrapGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) RemoveHostifTrapGroup(ctx context.Context, in *RemoveHostifTrapGroupRequest, opts ...grpc.CallOption) (*RemoveHostifTrapGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveHostifTrapGroupResponse)
	err := c.cc.Invoke(ctx, Hostif_RemoveHostifTrapGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) SetHostifTrapGroupAttribute(ctx context.Context, in *SetHostifTrapGroupAttributeRequest, opts ...grpc.CallOption) (*SetHostifTrapGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetHostifTrapGroupAttributeResponse)
	err := c.cc.Invoke(ctx, Hostif_SetHostifTrapGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) GetHostifTrapGroupAttribute(ctx context.Context, in *GetHostifTrapGroupAttributeRequest, opts ...grpc.CallOption) (*GetHostifTrapGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHostifTrapGroupAttributeResponse)
	err := c.cc.Invoke(ctx, Hostif_GetHostifTrapGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) CreateHostifTrap(ctx context.Context, in *CreateHostifTrapRequest, opts ...grpc.CallOption) (*CreateHostifTrapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHostifTrapResponse)
	err := c.cc.Invoke(ctx, Hostif_CreateHostifTrap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) RemoveHostifTrap(ctx context.Context, in *RemoveHostifTrapRequest, opts ...grpc.CallOption) (*RemoveHostifTrapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveHostifTrapResponse)
	err := c.cc.Invoke(ctx, Hostif_RemoveHostifTrap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) SetHostifTrapAttribute(ctx context.Context, in *SetHostifTrapAttributeRequest, opts ...grpc.CallOption) (*SetHostifTrapAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetHostifTrapAttributeResponse)
	err := c.cc.Invoke(ctx, Hostif_SetHostifTrapAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) GetHostifTrapAttribute(ctx context.Context, in *GetHostifTrapAttributeRequest, opts ...grpc.CallOption) (*GetHostifTrapAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHostifTrapAttributeResponse)
	err := c.cc.Invoke(ctx, Hostif_GetHostifTrapAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) CreateHostifUserDefinedTrap(ctx context.Context, in *CreateHostifUserDefinedTrapRequest, opts ...grpc.CallOption) (*CreateHostifUserDefinedTrapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHostifUserDefinedTrapResponse)
	err := c.cc.Invoke(ctx, Hostif_CreateHostifUserDefinedTrap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) RemoveHostifUserDefinedTrap(ctx context.Context, in *RemoveHostifUserDefinedTrapRequest, opts ...grpc.CallOption) (*RemoveHostifUserDefinedTrapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveHostifUserDefinedTrapResponse)
	err := c.cc.Invoke(ctx, Hostif_RemoveHostifUserDefinedTrap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) SetHostifUserDefinedTrapAttribute(ctx context.Context, in *SetHostifUserDefinedTrapAttributeRequest, opts ...grpc.CallOption) (*SetHostifUserDefinedTrapAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetHostifUserDefinedTrapAttributeResponse)
	err := c.cc.Invoke(ctx, Hostif_SetHostifUserDefinedTrapAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostifClient) GetHostifUserDefinedTrapAttribute(ctx context.Context, in *GetHostifUserDefinedTrapAttributeRequest, opts ...grpc.CallOption) (*GetHostifUserDefinedTrapAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHostifUserDefinedTrapAttributeResponse)
	err := c.cc.Invoke(ctx, Hostif_GetHostifUserDefinedTrapAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostifServer is the server API for Hostif service.
// All implementations should embed UnimplementedHostifServer
// for forward compatibility.
type HostifServer interface {
	CreateHostif(context.Context, *CreateHostifRequest) (*CreateHostifResponse, error)
	RemoveHostif(context.Context, *RemoveHostifRequest) (*RemoveHostifResponse, error)
	SetHostifAttribute(context.Context, *SetHostifAttributeRequest) (*SetHostifAttributeResponse, error)
	GetHostifAttribute(context.Context, *GetHostifAttributeRequest) (*GetHostifAttributeResponse, error)
	CreateHostifTableEntry(context.Context, *CreateHostifTableEntryRequest) (*CreateHostifTableEntryResponse, error)
	RemoveHostifTableEntry(context.Context, *RemoveHostifTableEntryRequest) (*RemoveHostifTableEntryResponse, error)
	GetHostifTableEntryAttribute(context.Context, *GetHostifTableEntryAttributeRequest) (*GetHostifTableEntryAttributeResponse, error)
	CreateHostifTrapGroup(context.Context, *CreateHostifTrapGroupRequest) (*CreateHostifTrapGroupResponse, error)
	RemoveHostifTrapGroup(context.Context, *RemoveHostifTrapGroupRequest) (*RemoveHostifTrapGroupResponse, error)
	SetHostifTrapGroupAttribute(context.Context, *SetHostifTrapGroupAttributeRequest) (*SetHostifTrapGroupAttributeResponse, error)
	GetHostifTrapGroupAttribute(context.Context, *GetHostifTrapGroupAttributeRequest) (*GetHostifTrapGroupAttributeResponse, error)
	CreateHostifTrap(context.Context, *CreateHostifTrapRequest) (*CreateHostifTrapResponse, error)
	RemoveHostifTrap(context.Context, *RemoveHostifTrapRequest) (*RemoveHostifTrapResponse, error)
	SetHostifTrapAttribute(context.Context, *SetHostifTrapAttributeRequest) (*SetHostifTrapAttributeResponse, error)
	GetHostifTrapAttribute(context.Context, *GetHostifTrapAttributeRequest) (*GetHostifTrapAttributeResponse, error)
	CreateHostifUserDefinedTrap(context.Context, *CreateHostifUserDefinedTrapRequest) (*CreateHostifUserDefinedTrapResponse, error)
	RemoveHostifUserDefinedTrap(context.Context, *RemoveHostifUserDefinedTrapRequest) (*RemoveHostifUserDefinedTrapResponse, error)
	SetHostifUserDefinedTrapAttribute(context.Context, *SetHostifUserDefinedTrapAttributeRequest) (*SetHostifUserDefinedTrapAttributeResponse, error)
	GetHostifUserDefinedTrapAttribute(context.Context, *GetHostifUserDefinedTrapAttributeRequest) (*GetHostifUserDefinedTrapAttributeResponse, error)
}

// UnimplementedHostifServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostifServer struct{}

func (UnimplementedHostifServer) CreateHostif(context.Context, *CreateHostifRequest) (*CreateHostifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostif not implemented")
}
func (UnimplementedHostifServer) RemoveHostif(context.Context, *RemoveHostifRequest) (*RemoveHostifResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHostif not implemented")
}
func (UnimplementedHostifServer) SetHostifAttribute(context.Context, *SetHostifAttributeRequest) (*SetHostifAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostifAttribute not implemented")
}
func (UnimplementedHostifServer) GetHostifAttribute(context.Context, *GetHostifAttributeRequest) (*GetHostifAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostifAttribute not implemented")
}
func (UnimplementedHostifServer) CreateHostifTableEntry(context.Context, *CreateHostifTableEntryRequest) (*CreateHostifTableEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostifTableEntry not implemented")
}
func (UnimplementedHostifServer) RemoveHostifTableEntry(context.Context, *RemoveHostifTableEntryRequest) (*RemoveHostifTableEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHostifTableEntry not implemented")
}
func (UnimplementedHostifServer) GetHostifTableEntryAttribute(context.Context, *GetHostifTableEntryAttributeRequest) (*GetHostifTableEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostifTableEntryAttribute not implemented")
}
func (UnimplementedHostifServer) CreateHostifTrapGroup(context.Context, *CreateHostifTrapGroupRequest) (*CreateHostifTrapGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostifTrapGroup not implemented")
}
func (UnimplementedHostifServer) RemoveHostifTrapGroup(context.Context, *RemoveHostifTrapGroupRequest) (*RemoveHostifTrapGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHostifTrapGroup not implemented")
}
func (UnimplementedHostifServer) SetHostifTrapGroupAttribute(context.Context, *SetHostifTrapGroupAttributeRequest) (*SetHostifTrapGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostifTrapGroupAttribute not implemented")
}
func (UnimplementedHostifServer) GetHostifTrapGroupAttribute(context.Context, *GetHostifTrapGroupAttributeRequest) (*GetHostifTrapGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostifTrapGroupAttribute not implemented")
}
func (UnimplementedHostifServer) CreateHostifTrap(context.Context, *CreateHostifTrapRequest) (*CreateHostifTrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostifTrap not implemented")
}
func (UnimplementedHostifServer) RemoveHostifTrap(context.Context, *RemoveHostifTrapRequest) (*RemoveHostifTrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHostifTrap not implemented")
}
func (UnimplementedHostifServer) SetHostifTrapAttribute(context.Context, *SetHostifTrapAttributeRequest) (*SetHostifTrapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostifTrapAttribute not implemented")
}
func (UnimplementedHostifServer) GetHostifTrapAttribute(context.Context, *GetHostifTrapAttributeRequest) (*GetHostifTrapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostifTrapAttribute not implemented")
}
func (UnimplementedHostifServer) CreateHostifUserDefinedTrap(context.Context, *CreateHostifUserDefinedTrapRequest) (*CreateHostifUserDefinedTrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostifUserDefinedTrap not implemented")
}
func (UnimplementedHostifServer) RemoveHostifUserDefinedTrap(context.Context, *RemoveHostifUserDefinedTrapRequest) (*RemoveHostifUserDefinedTrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHostifUserDefinedTrap not implemented")
}
func (UnimplementedHostifServer) SetHostifUserDefinedTrapAttribute(context.Context, *SetHostifUserDefinedTrapAttributeRequest) (*SetHostifUserDefinedTrapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostifUserDefinedTrapAttribute not implemented")
}
func (UnimplementedHostifServer) GetHostifUserDefinedTrapAttribute(context.Context, *GetHostifUserDefinedTrapAttributeRequest) (*GetHostifUserDefinedTrapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostifUserDefinedTrapAttribute not implemented")
}
func (UnimplementedHostifServer) testEmbeddedByValue() {}

// UnsafeHostifServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostifServer will
// result in compilation errors.
type UnsafeHostifServer interface {
	mustEmbedUnimplementedHostifServer()
}

func RegisterHostifServer(s grpc.ServiceRegistrar, srv HostifServer) {
	// If the following call pancis, it indicates UnimplementedHostifServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Hostif_ServiceDesc, srv)
}

func _Hostif_CreateHostif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).CreateHostif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_CreateHostif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).CreateHostif(ctx, req.(*CreateHostifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_RemoveHostif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHostifRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).RemoveHostif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_RemoveHostif_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).RemoveHostif(ctx, req.(*RemoveHostifRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_SetHostifAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHostifAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).SetHostifAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_SetHostifAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).SetHostifAttribute(ctx, req.(*SetHostifAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_GetHostifAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostifAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).GetHostifAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_GetHostifAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).GetHostifAttribute(ctx, req.(*GetHostifAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_CreateHostifTableEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostifTableEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).CreateHostifTableEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_CreateHostifTableEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).CreateHostifTableEntry(ctx, req.(*CreateHostifTableEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_RemoveHostifTableEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHostifTableEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).RemoveHostifTableEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_RemoveHostifTableEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).RemoveHostifTableEntry(ctx, req.(*RemoveHostifTableEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_GetHostifTableEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostifTableEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).GetHostifTableEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_GetHostifTableEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).GetHostifTableEntryAttribute(ctx, req.(*GetHostifTableEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_CreateHostifTrapGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostifTrapGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).CreateHostifTrapGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_CreateHostifTrapGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).CreateHostifTrapGroup(ctx, req.(*CreateHostifTrapGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_RemoveHostifTrapGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHostifTrapGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).RemoveHostifTrapGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_RemoveHostifTrapGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).RemoveHostifTrapGroup(ctx, req.(*RemoveHostifTrapGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_SetHostifTrapGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHostifTrapGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).SetHostifTrapGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_SetHostifTrapGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).SetHostifTrapGroupAttribute(ctx, req.(*SetHostifTrapGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_GetHostifTrapGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostifTrapGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).GetHostifTrapGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_GetHostifTrapGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).GetHostifTrapGroupAttribute(ctx, req.(*GetHostifTrapGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_CreateHostifTrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostifTrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).CreateHostifTrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_CreateHostifTrap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).CreateHostifTrap(ctx, req.(*CreateHostifTrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_RemoveHostifTrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHostifTrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).RemoveHostifTrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_RemoveHostifTrap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).RemoveHostifTrap(ctx, req.(*RemoveHostifTrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_SetHostifTrapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHostifTrapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).SetHostifTrapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_SetHostifTrapAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).SetHostifTrapAttribute(ctx, req.(*SetHostifTrapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_GetHostifTrapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostifTrapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).GetHostifTrapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_GetHostifTrapAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).GetHostifTrapAttribute(ctx, req.(*GetHostifTrapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_CreateHostifUserDefinedTrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostifUserDefinedTrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).CreateHostifUserDefinedTrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_CreateHostifUserDefinedTrap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).CreateHostifUserDefinedTrap(ctx, req.(*CreateHostifUserDefinedTrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_RemoveHostifUserDefinedTrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHostifUserDefinedTrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).RemoveHostifUserDefinedTrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_RemoveHostifUserDefinedTrap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).RemoveHostifUserDefinedTrap(ctx, req.(*RemoveHostifUserDefinedTrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_SetHostifUserDefinedTrapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHostifUserDefinedTrapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).SetHostifUserDefinedTrapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_SetHostifUserDefinedTrapAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).SetHostifUserDefinedTrapAttribute(ctx, req.(*SetHostifUserDefinedTrapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostif_GetHostifUserDefinedTrapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostifUserDefinedTrapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostifServer).GetHostifUserDefinedTrapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostif_GetHostifUserDefinedTrapAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostifServer).GetHostifUserDefinedTrapAttribute(ctx, req.(*GetHostifUserDefinedTrapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hostif_ServiceDesc is the grpc.ServiceDesc for Hostif service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hostif_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Hostif",
	HandlerType: (*HostifServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHostif",
			Handler:    _Hostif_CreateHostif_Handler,
		},
		{
			MethodName: "RemoveHostif",
			Handler:    _Hostif_RemoveHostif_Handler,
		},
		{
			MethodName: "SetHostifAttribute",
			Handler:    _Hostif_SetHostifAttribute_Handler,
		},
		{
			MethodName: "GetHostifAttribute",
			Handler:    _Hostif_GetHostifAttribute_Handler,
		},
		{
			MethodName: "CreateHostifTableEntry",
			Handler:    _Hostif_CreateHostifTableEntry_Handler,
		},
		{
			MethodName: "RemoveHostifTableEntry",
			Handler:    _Hostif_RemoveHostifTableEntry_Handler,
		},
		{
			MethodName: "GetHostifTableEntryAttribute",
			Handler:    _Hostif_GetHostifTableEntryAttribute_Handler,
		},
		{
			MethodName: "CreateHostifTrapGroup",
			Handler:    _Hostif_CreateHostifTrapGroup_Handler,
		},
		{
			MethodName: "RemoveHostifTrapGroup",
			Handler:    _Hostif_RemoveHostifTrapGroup_Handler,
		},
		{
			MethodName: "SetHostifTrapGroupAttribute",
			Handler:    _Hostif_SetHostifTrapGroupAttribute_Handler,
		},
		{
			MethodName: "GetHostifTrapGroupAttribute",
			Handler:    _Hostif_GetHostifTrapGroupAttribute_Handler,
		},
		{
			MethodName: "CreateHostifTrap",
			Handler:    _Hostif_CreateHostifTrap_Handler,
		},
		{
			MethodName: "RemoveHostifTrap",
			Handler:    _Hostif_RemoveHostifTrap_Handler,
		},
		{
			MethodName: "SetHostifTrapAttribute",
			Handler:    _Hostif_SetHostifTrapAttribute_Handler,
		},
		{
			MethodName: "GetHostifTrapAttribute",
			Handler:    _Hostif_GetHostifTrapAttribute_Handler,
		},
		{
			MethodName: "CreateHostifUserDefinedTrap",
			Handler:    _Hostif_CreateHostifUserDefinedTrap_Handler,
		},
		{
			MethodName: "RemoveHostifUserDefinedTrap",
			Handler:    _Hostif_RemoveHostifUserDefinedTrap_Handler,
		},
		{
			MethodName: "SetHostifUserDefinedTrapAttribute",
			Handler:    _Hostif_SetHostifUserDefinedTrapAttribute_Handler,
		},
		{
			MethodName: "GetHostifUserDefinedTrapAttribute",
			Handler:    _Hostif_GetHostifUserDefinedTrapAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/hostif.proto",
}
