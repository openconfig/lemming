// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/qos_map.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QosMap_CreateQosMap_FullMethodName       = "/lemming.dataplane.sai.QosMap/CreateQosMap"
	QosMap_RemoveQosMap_FullMethodName       = "/lemming.dataplane.sai.QosMap/RemoveQosMap"
	QosMap_SetQosMapAttribute_FullMethodName = "/lemming.dataplane.sai.QosMap/SetQosMapAttribute"
	QosMap_GetQosMapAttribute_FullMethodName = "/lemming.dataplane.sai.QosMap/GetQosMapAttribute"
)

// QosMapClient is the client API for QosMap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QosMapClient interface {
	CreateQosMap(ctx context.Context, in *CreateQosMapRequest, opts ...grpc.CallOption) (*CreateQosMapResponse, error)
	RemoveQosMap(ctx context.Context, in *RemoveQosMapRequest, opts ...grpc.CallOption) (*RemoveQosMapResponse, error)
	SetQosMapAttribute(ctx context.Context, in *SetQosMapAttributeRequest, opts ...grpc.CallOption) (*SetQosMapAttributeResponse, error)
	GetQosMapAttribute(ctx context.Context, in *GetQosMapAttributeRequest, opts ...grpc.CallOption) (*GetQosMapAttributeResponse, error)
}

type qosMapClient struct {
	cc grpc.ClientConnInterface
}

func NewQosMapClient(cc grpc.ClientConnInterface) QosMapClient {
	return &qosMapClient{cc}
}

func (c *qosMapClient) CreateQosMap(ctx context.Context, in *CreateQosMapRequest, opts ...grpc.CallOption) (*CreateQosMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQosMapResponse)
	err := c.cc.Invoke(ctx, QosMap_CreateQosMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qosMapClient) RemoveQosMap(ctx context.Context, in *RemoveQosMapRequest, opts ...grpc.CallOption) (*RemoveQosMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveQosMapResponse)
	err := c.cc.Invoke(ctx, QosMap_RemoveQosMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qosMapClient) SetQosMapAttribute(ctx context.Context, in *SetQosMapAttributeRequest, opts ...grpc.CallOption) (*SetQosMapAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetQosMapAttributeResponse)
	err := c.cc.Invoke(ctx, QosMap_SetQosMapAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qosMapClient) GetQosMapAttribute(ctx context.Context, in *GetQosMapAttributeRequest, opts ...grpc.CallOption) (*GetQosMapAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQosMapAttributeResponse)
	err := c.cc.Invoke(ctx, QosMap_GetQosMapAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QosMapServer is the server API for QosMap service.
// All implementations should embed UnimplementedQosMapServer
// for forward compatibility.
type QosMapServer interface {
	CreateQosMap(context.Context, *CreateQosMapRequest) (*CreateQosMapResponse, error)
	RemoveQosMap(context.Context, *RemoveQosMapRequest) (*RemoveQosMapResponse, error)
	SetQosMapAttribute(context.Context, *SetQosMapAttributeRequest) (*SetQosMapAttributeResponse, error)
	GetQosMapAttribute(context.Context, *GetQosMapAttributeRequest) (*GetQosMapAttributeResponse, error)
}

// UnimplementedQosMapServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQosMapServer struct{}

func (UnimplementedQosMapServer) CreateQosMap(context.Context, *CreateQosMapRequest) (*CreateQosMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQosMap not implemented")
}
func (UnimplementedQosMapServer) RemoveQosMap(context.Context, *RemoveQosMapRequest) (*RemoveQosMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveQosMap not implemented")
}
func (UnimplementedQosMapServer) SetQosMapAttribute(context.Context, *SetQosMapAttributeRequest) (*SetQosMapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQosMapAttribute not implemented")
}
func (UnimplementedQosMapServer) GetQosMapAttribute(context.Context, *GetQosMapAttributeRequest) (*GetQosMapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQosMapAttribute not implemented")
}
func (UnimplementedQosMapServer) testEmbeddedByValue() {}

// UnsafeQosMapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QosMapServer will
// result in compilation errors.
type UnsafeQosMapServer interface {
	mustEmbedUnimplementedQosMapServer()
}

func RegisterQosMapServer(s grpc.ServiceRegistrar, srv QosMapServer) {
	// If the following call pancis, it indicates UnimplementedQosMapServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QosMap_ServiceDesc, srv)
}

func _QosMap_CreateQosMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQosMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QosMapServer).CreateQosMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QosMap_CreateQosMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QosMapServer).CreateQosMap(ctx, req.(*CreateQosMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QosMap_RemoveQosMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveQosMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QosMapServer).RemoveQosMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QosMap_RemoveQosMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QosMapServer).RemoveQosMap(ctx, req.(*RemoveQosMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QosMap_SetQosMapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetQosMapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QosMapServer).SetQosMapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QosMap_SetQosMapAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QosMapServer).SetQosMapAttribute(ctx, req.(*SetQosMapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QosMap_GetQosMapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQosMapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QosMapServer).GetQosMapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QosMap_GetQosMapAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QosMapServer).GetQosMapAttribute(ctx, req.(*GetQosMapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QosMap_ServiceDesc is the grpc.ServiceDesc for QosMap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QosMap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.QosMap",
	HandlerType: (*QosMapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQosMap",
			Handler:    _QosMap_CreateQosMap_Handler,
		},
		{
			MethodName: "RemoveQosMap",
			Handler:    _QosMap_RemoveQosMap_Handler,
		},
		{
			MethodName: "SetQosMapAttribute",
			Handler:    _QosMap_SetQosMapAttribute_Handler,
		},
		{
			MethodName: "GetQosMapAttribute",
			Handler:    _QosMap_GetQosMapAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/qos_map.proto",
}
