// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/ipmc.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ipmc_CreateIpmcEntry_FullMethodName       = "/lemming.dataplane.sai.Ipmc/CreateIpmcEntry"
	Ipmc_RemoveIpmcEntry_FullMethodName       = "/lemming.dataplane.sai.Ipmc/RemoveIpmcEntry"
	Ipmc_SetIpmcEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Ipmc/SetIpmcEntryAttribute"
	Ipmc_GetIpmcEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Ipmc/GetIpmcEntryAttribute"
)

// IpmcClient is the client API for Ipmc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpmcClient interface {
	CreateIpmcEntry(ctx context.Context, in *CreateIpmcEntryRequest, opts ...grpc.CallOption) (*CreateIpmcEntryResponse, error)
	RemoveIpmcEntry(ctx context.Context, in *RemoveIpmcEntryRequest, opts ...grpc.CallOption) (*RemoveIpmcEntryResponse, error)
	SetIpmcEntryAttribute(ctx context.Context, in *SetIpmcEntryAttributeRequest, opts ...grpc.CallOption) (*SetIpmcEntryAttributeResponse, error)
	GetIpmcEntryAttribute(ctx context.Context, in *GetIpmcEntryAttributeRequest, opts ...grpc.CallOption) (*GetIpmcEntryAttributeResponse, error)
}

type ipmcClient struct {
	cc grpc.ClientConnInterface
}

func NewIpmcClient(cc grpc.ClientConnInterface) IpmcClient {
	return &ipmcClient{cc}
}

func (c *ipmcClient) CreateIpmcEntry(ctx context.Context, in *CreateIpmcEntryRequest, opts ...grpc.CallOption) (*CreateIpmcEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIpmcEntryResponse)
	err := c.cc.Invoke(ctx, Ipmc_CreateIpmcEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipmcClient) RemoveIpmcEntry(ctx context.Context, in *RemoveIpmcEntryRequest, opts ...grpc.CallOption) (*RemoveIpmcEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveIpmcEntryResponse)
	err := c.cc.Invoke(ctx, Ipmc_RemoveIpmcEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipmcClient) SetIpmcEntryAttribute(ctx context.Context, in *SetIpmcEntryAttributeRequest, opts ...grpc.CallOption) (*SetIpmcEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetIpmcEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Ipmc_SetIpmcEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipmcClient) GetIpmcEntryAttribute(ctx context.Context, in *GetIpmcEntryAttributeRequest, opts ...grpc.CallOption) (*GetIpmcEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIpmcEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Ipmc_GetIpmcEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpmcServer is the server API for Ipmc service.
// All implementations should embed UnimplementedIpmcServer
// for forward compatibility.
type IpmcServer interface {
	CreateIpmcEntry(context.Context, *CreateIpmcEntryRequest) (*CreateIpmcEntryResponse, error)
	RemoveIpmcEntry(context.Context, *RemoveIpmcEntryRequest) (*RemoveIpmcEntryResponse, error)
	SetIpmcEntryAttribute(context.Context, *SetIpmcEntryAttributeRequest) (*SetIpmcEntryAttributeResponse, error)
	GetIpmcEntryAttribute(context.Context, *GetIpmcEntryAttributeRequest) (*GetIpmcEntryAttributeResponse, error)
}

// UnimplementedIpmcServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIpmcServer struct{}

func (UnimplementedIpmcServer) CreateIpmcEntry(context.Context, *CreateIpmcEntryRequest) (*CreateIpmcEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpmcEntry not implemented")
}
func (UnimplementedIpmcServer) RemoveIpmcEntry(context.Context, *RemoveIpmcEntryRequest) (*RemoveIpmcEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIpmcEntry not implemented")
}
func (UnimplementedIpmcServer) SetIpmcEntryAttribute(context.Context, *SetIpmcEntryAttributeRequest) (*SetIpmcEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIpmcEntryAttribute not implemented")
}
func (UnimplementedIpmcServer) GetIpmcEntryAttribute(context.Context, *GetIpmcEntryAttributeRequest) (*GetIpmcEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpmcEntryAttribute not implemented")
}
func (UnimplementedIpmcServer) testEmbeddedByValue() {}

// UnsafeIpmcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpmcServer will
// result in compilation errors.
type UnsafeIpmcServer interface {
	mustEmbedUnimplementedIpmcServer()
}

func RegisterIpmcServer(s grpc.ServiceRegistrar, srv IpmcServer) {
	// If the following call pancis, it indicates UnimplementedIpmcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ipmc_ServiceDesc, srv)
}

func _Ipmc_CreateIpmcEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpmcEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpmcServer).CreateIpmcEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipmc_CreateIpmcEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpmcServer).CreateIpmcEntry(ctx, req.(*CreateIpmcEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipmc_RemoveIpmcEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIpmcEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpmcServer).RemoveIpmcEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipmc_RemoveIpmcEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpmcServer).RemoveIpmcEntry(ctx, req.(*RemoveIpmcEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipmc_SetIpmcEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIpmcEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpmcServer).SetIpmcEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipmc_SetIpmcEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpmcServer).SetIpmcEntryAttribute(ctx, req.(*SetIpmcEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipmc_GetIpmcEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpmcEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpmcServer).GetIpmcEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipmc_GetIpmcEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpmcServer).GetIpmcEntryAttribute(ctx, req.(*GetIpmcEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ipmc_ServiceDesc is the grpc.ServiceDesc for Ipmc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ipmc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Ipmc",
	HandlerType: (*IpmcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIpmcEntry",
			Handler:    _Ipmc_CreateIpmcEntry_Handler,
		},
		{
			MethodName: "RemoveIpmcEntry",
			Handler:    _Ipmc_RemoveIpmcEntry_Handler,
		},
		{
			MethodName: "SetIpmcEntryAttribute",
			Handler:    _Ipmc_SetIpmcEntryAttribute_Handler,
		},
		{
			MethodName: "GetIpmcEntryAttribute",
			Handler:    _Ipmc_GetIpmcEntryAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/ipmc.proto",
}
