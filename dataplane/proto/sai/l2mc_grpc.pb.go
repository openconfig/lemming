// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/l2mc.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	L2Mc_CreateL2McEntry_FullMethodName       = "/lemming.dataplane.sai.L2mc/CreateL2mcEntry"
	L2Mc_RemoveL2McEntry_FullMethodName       = "/lemming.dataplane.sai.L2mc/RemoveL2mcEntry"
	L2Mc_SetL2McEntryAttribute_FullMethodName = "/lemming.dataplane.sai.L2mc/SetL2mcEntryAttribute"
	L2Mc_GetL2McEntryAttribute_FullMethodName = "/lemming.dataplane.sai.L2mc/GetL2mcEntryAttribute"
)

// L2McClient is the client API for L2Mc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type L2McClient interface {
	CreateL2McEntry(ctx context.Context, in *CreateL2McEntryRequest, opts ...grpc.CallOption) (*CreateL2McEntryResponse, error)
	RemoveL2McEntry(ctx context.Context, in *RemoveL2McEntryRequest, opts ...grpc.CallOption) (*RemoveL2McEntryResponse, error)
	SetL2McEntryAttribute(ctx context.Context, in *SetL2McEntryAttributeRequest, opts ...grpc.CallOption) (*SetL2McEntryAttributeResponse, error)
	GetL2McEntryAttribute(ctx context.Context, in *GetL2McEntryAttributeRequest, opts ...grpc.CallOption) (*GetL2McEntryAttributeResponse, error)
}

type l2McClient struct {
	cc grpc.ClientConnInterface
}

func NewL2McClient(cc grpc.ClientConnInterface) L2McClient {
	return &l2McClient{cc}
}

func (c *l2McClient) CreateL2McEntry(ctx context.Context, in *CreateL2McEntryRequest, opts ...grpc.CallOption) (*CreateL2McEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateL2McEntryResponse)
	err := c.cc.Invoke(ctx, L2Mc_CreateL2McEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2McClient) RemoveL2McEntry(ctx context.Context, in *RemoveL2McEntryRequest, opts ...grpc.CallOption) (*RemoveL2McEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveL2McEntryResponse)
	err := c.cc.Invoke(ctx, L2Mc_RemoveL2McEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2McClient) SetL2McEntryAttribute(ctx context.Context, in *SetL2McEntryAttributeRequest, opts ...grpc.CallOption) (*SetL2McEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetL2McEntryAttributeResponse)
	err := c.cc.Invoke(ctx, L2Mc_SetL2McEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2McClient) GetL2McEntryAttribute(ctx context.Context, in *GetL2McEntryAttributeRequest, opts ...grpc.CallOption) (*GetL2McEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetL2McEntryAttributeResponse)
	err := c.cc.Invoke(ctx, L2Mc_GetL2McEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// L2McServer is the server API for L2Mc service.
// All implementations should embed UnimplementedL2McServer
// for forward compatibility.
type L2McServer interface {
	CreateL2McEntry(context.Context, *CreateL2McEntryRequest) (*CreateL2McEntryResponse, error)
	RemoveL2McEntry(context.Context, *RemoveL2McEntryRequest) (*RemoveL2McEntryResponse, error)
	SetL2McEntryAttribute(context.Context, *SetL2McEntryAttributeRequest) (*SetL2McEntryAttributeResponse, error)
	GetL2McEntryAttribute(context.Context, *GetL2McEntryAttributeRequest) (*GetL2McEntryAttributeResponse, error)
}

// UnimplementedL2McServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedL2McServer struct{}

func (UnimplementedL2McServer) CreateL2McEntry(context.Context, *CreateL2McEntryRequest) (*CreateL2McEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateL2McEntry not implemented")
}
func (UnimplementedL2McServer) RemoveL2McEntry(context.Context, *RemoveL2McEntryRequest) (*RemoveL2McEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveL2McEntry not implemented")
}
func (UnimplementedL2McServer) SetL2McEntryAttribute(context.Context, *SetL2McEntryAttributeRequest) (*SetL2McEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetL2McEntryAttribute not implemented")
}
func (UnimplementedL2McServer) GetL2McEntryAttribute(context.Context, *GetL2McEntryAttributeRequest) (*GetL2McEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetL2McEntryAttribute not implemented")
}
func (UnimplementedL2McServer) testEmbeddedByValue() {}

// UnsafeL2McServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to L2McServer will
// result in compilation errors.
type UnsafeL2McServer interface {
	mustEmbedUnimplementedL2McServer()
}

func RegisterL2McServer(s grpc.ServiceRegistrar, srv L2McServer) {
	// If the following call pancis, it indicates UnimplementedL2McServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&L2Mc_ServiceDesc, srv)
}

func _L2Mc_CreateL2McEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateL2McEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2McServer).CreateL2McEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2Mc_CreateL2McEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2McServer).CreateL2McEntry(ctx, req.(*CreateL2McEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2Mc_RemoveL2McEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveL2McEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2McServer).RemoveL2McEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2Mc_RemoveL2McEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2McServer).RemoveL2McEntry(ctx, req.(*RemoveL2McEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2Mc_SetL2McEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetL2McEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2McServer).SetL2McEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2Mc_SetL2McEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2McServer).SetL2McEntryAttribute(ctx, req.(*SetL2McEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2Mc_GetL2McEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetL2McEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2McServer).GetL2McEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2Mc_GetL2McEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2McServer).GetL2McEntryAttribute(ctx, req.(*GetL2McEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// L2Mc_ServiceDesc is the grpc.ServiceDesc for L2Mc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var L2Mc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.L2mc",
	HandlerType: (*L2McServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateL2mcEntry",
			Handler:    _L2Mc_CreateL2McEntry_Handler,
		},
		{
			MethodName: "RemoveL2mcEntry",
			Handler:    _L2Mc_RemoveL2McEntry_Handler,
		},
		{
			MethodName: "SetL2mcEntryAttribute",
			Handler:    _L2Mc_SetL2McEntryAttribute_Handler,
		},
		{
			MethodName: "GetL2mcEntryAttribute",
			Handler:    _L2Mc_GetL2McEntryAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/l2mc.proto",
}
