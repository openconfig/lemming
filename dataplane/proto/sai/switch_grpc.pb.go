// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/switch.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Switch_CreateSwitch_FullMethodName                      = "/lemming.dataplane.sai.Switch/CreateSwitch"
	Switch_RemoveSwitch_FullMethodName                      = "/lemming.dataplane.sai.Switch/RemoveSwitch"
	Switch_SetSwitchAttribute_FullMethodName                = "/lemming.dataplane.sai.Switch/SetSwitchAttribute"
	Switch_SwitchStateChangeNotification_FullMethodName     = "/lemming.dataplane.sai.Switch/SwitchStateChangeNotification"
	Switch_SwitchShutdownRequestNotification_FullMethodName = "/lemming.dataplane.sai.Switch/SwitchShutdownRequestNotification"
	Switch_FdbEventNotification_FullMethodName              = "/lemming.dataplane.sai.Switch/FdbEventNotification"
	Switch_PortStateChangeNotification_FullMethodName       = "/lemming.dataplane.sai.Switch/PortStateChangeNotification"
	Switch_PacketEventNotification_FullMethodName           = "/lemming.dataplane.sai.Switch/PacketEventNotification"
	Switch_QueuePfcDeadlockNotification_FullMethodName      = "/lemming.dataplane.sai.Switch/QueuePfcDeadlockNotification"
	Switch_BfdSessionStateChangeNotification_FullMethodName = "/lemming.dataplane.sai.Switch/BfdSessionStateChangeNotification"
	Switch_TamEventNotification_FullMethodName              = "/lemming.dataplane.sai.Switch/TamEventNotification"
	Switch_IpsecSaStatusChangeNotification_FullMethodName   = "/lemming.dataplane.sai.Switch/IpsecSaStatusChangeNotification"
	Switch_GetSwitchAttribute_FullMethodName                = "/lemming.dataplane.sai.Switch/GetSwitchAttribute"
	Switch_GetSwitchStats_FullMethodName                    = "/lemming.dataplane.sai.Switch/GetSwitchStats"
	Switch_CreateSwitchTunnel_FullMethodName                = "/lemming.dataplane.sai.Switch/CreateSwitchTunnel"
	Switch_RemoveSwitchTunnel_FullMethodName                = "/lemming.dataplane.sai.Switch/RemoveSwitchTunnel"
	Switch_SetSwitchTunnelAttribute_FullMethodName          = "/lemming.dataplane.sai.Switch/SetSwitchTunnelAttribute"
	Switch_GetSwitchTunnelAttribute_FullMethodName          = "/lemming.dataplane.sai.Switch/GetSwitchTunnelAttribute"
)

// SwitchClient is the client API for Switch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwitchClient interface {
	CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*CreateSwitchResponse, error)
	RemoveSwitch(ctx context.Context, in *RemoveSwitchRequest, opts ...grpc.CallOption) (*RemoveSwitchResponse, error)
	SetSwitchAttribute(ctx context.Context, in *SetSwitchAttributeRequest, opts ...grpc.CallOption) (*SetSwitchAttributeResponse, error)
	SwitchStateChangeNotification(ctx context.Context, in *SwitchStateChangeNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SwitchStateChangeNotificationResponse], error)
	SwitchShutdownRequestNotification(ctx context.Context, in *SwitchShutdownRequestNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SwitchShutdownRequestNotificationResponse], error)
	FdbEventNotification(ctx context.Context, in *FdbEventNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FdbEventNotificationResponse], error)
	PortStateChangeNotification(ctx context.Context, in *PortStateChangeNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PortStateChangeNotificationResponse], error)
	PacketEventNotification(ctx context.Context, in *PacketEventNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PacketEventNotificationResponse], error)
	QueuePfcDeadlockNotification(ctx context.Context, in *QueuePfcDeadlockNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueuePfcDeadlockNotificationResponse], error)
	BfdSessionStateChangeNotification(ctx context.Context, in *BfdSessionStateChangeNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BfdSessionStateChangeNotificationResponse], error)
	TamEventNotification(ctx context.Context, in *TamEventNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TamEventNotificationResponse], error)
	IpsecSaStatusChangeNotification(ctx context.Context, in *IpsecSaStatusChangeNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IpsecSaStatusNotificationDataResponse], error)
	GetSwitchAttribute(ctx context.Context, in *GetSwitchAttributeRequest, opts ...grpc.CallOption) (*GetSwitchAttributeResponse, error)
	GetSwitchStats(ctx context.Context, in *GetSwitchStatsRequest, opts ...grpc.CallOption) (*GetSwitchStatsResponse, error)
	CreateSwitchTunnel(ctx context.Context, in *CreateSwitchTunnelRequest, opts ...grpc.CallOption) (*CreateSwitchTunnelResponse, error)
	RemoveSwitchTunnel(ctx context.Context, in *RemoveSwitchTunnelRequest, opts ...grpc.CallOption) (*RemoveSwitchTunnelResponse, error)
	SetSwitchTunnelAttribute(ctx context.Context, in *SetSwitchTunnelAttributeRequest, opts ...grpc.CallOption) (*SetSwitchTunnelAttributeResponse, error)
	GetSwitchTunnelAttribute(ctx context.Context, in *GetSwitchTunnelAttributeRequest, opts ...grpc.CallOption) (*GetSwitchTunnelAttributeResponse, error)
}

type switchClient struct {
	cc grpc.ClientConnInterface
}

func NewSwitchClient(cc grpc.ClientConnInterface) SwitchClient {
	return &switchClient{cc}
}

func (c *switchClient) CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*CreateSwitchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSwitchResponse)
	err := c.cc.Invoke(ctx, Switch_CreateSwitch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) RemoveSwitch(ctx context.Context, in *RemoveSwitchRequest, opts ...grpc.CallOption) (*RemoveSwitchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSwitchResponse)
	err := c.cc.Invoke(ctx, Switch_RemoveSwitch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) SetSwitchAttribute(ctx context.Context, in *SetSwitchAttributeRequest, opts ...grpc.CallOption) (*SetSwitchAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSwitchAttributeResponse)
	err := c.cc.Invoke(ctx, Switch_SetSwitchAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) SwitchStateChangeNotification(ctx context.Context, in *SwitchStateChangeNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SwitchStateChangeNotificationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Switch_ServiceDesc.Streams[0], Switch_SwitchStateChangeNotification_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SwitchStateChangeNotificationRequest, SwitchStateChangeNotificationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_SwitchStateChangeNotificationClient = grpc.ServerStreamingClient[SwitchStateChangeNotificationResponse]

func (c *switchClient) SwitchShutdownRequestNotification(ctx context.Context, in *SwitchShutdownRequestNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SwitchShutdownRequestNotificationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Switch_ServiceDesc.Streams[1], Switch_SwitchShutdownRequestNotification_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SwitchShutdownRequestNotificationRequest, SwitchShutdownRequestNotificationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_SwitchShutdownRequestNotificationClient = grpc.ServerStreamingClient[SwitchShutdownRequestNotificationResponse]

func (c *switchClient) FdbEventNotification(ctx context.Context, in *FdbEventNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FdbEventNotificationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Switch_ServiceDesc.Streams[2], Switch_FdbEventNotification_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FdbEventNotificationRequest, FdbEventNotificationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_FdbEventNotificationClient = grpc.ServerStreamingClient[FdbEventNotificationResponse]

func (c *switchClient) PortStateChangeNotification(ctx context.Context, in *PortStateChangeNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PortStateChangeNotificationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Switch_ServiceDesc.Streams[3], Switch_PortStateChangeNotification_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PortStateChangeNotificationRequest, PortStateChangeNotificationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_PortStateChangeNotificationClient = grpc.ServerStreamingClient[PortStateChangeNotificationResponse]

func (c *switchClient) PacketEventNotification(ctx context.Context, in *PacketEventNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PacketEventNotificationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Switch_ServiceDesc.Streams[4], Switch_PacketEventNotification_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PacketEventNotificationRequest, PacketEventNotificationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_PacketEventNotificationClient = grpc.ServerStreamingClient[PacketEventNotificationResponse]

func (c *switchClient) QueuePfcDeadlockNotification(ctx context.Context, in *QueuePfcDeadlockNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[QueuePfcDeadlockNotificationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Switch_ServiceDesc.Streams[5], Switch_QueuePfcDeadlockNotification_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[QueuePfcDeadlockNotificationRequest, QueuePfcDeadlockNotificationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_QueuePfcDeadlockNotificationClient = grpc.ServerStreamingClient[QueuePfcDeadlockNotificationResponse]

func (c *switchClient) BfdSessionStateChangeNotification(ctx context.Context, in *BfdSessionStateChangeNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BfdSessionStateChangeNotificationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Switch_ServiceDesc.Streams[6], Switch_BfdSessionStateChangeNotification_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BfdSessionStateChangeNotificationRequest, BfdSessionStateChangeNotificationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_BfdSessionStateChangeNotificationClient = grpc.ServerStreamingClient[BfdSessionStateChangeNotificationResponse]

func (c *switchClient) TamEventNotification(ctx context.Context, in *TamEventNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TamEventNotificationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Switch_ServiceDesc.Streams[7], Switch_TamEventNotification_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TamEventNotificationRequest, TamEventNotificationResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_TamEventNotificationClient = grpc.ServerStreamingClient[TamEventNotificationResponse]

func (c *switchClient) IpsecSaStatusChangeNotification(ctx context.Context, in *IpsecSaStatusChangeNotificationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IpsecSaStatusNotificationDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Switch_ServiceDesc.Streams[8], Switch_IpsecSaStatusChangeNotification_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IpsecSaStatusChangeNotificationRequest, IpsecSaStatusNotificationDataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_IpsecSaStatusChangeNotificationClient = grpc.ServerStreamingClient[IpsecSaStatusNotificationDataResponse]

func (c *switchClient) GetSwitchAttribute(ctx context.Context, in *GetSwitchAttributeRequest, opts ...grpc.CallOption) (*GetSwitchAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSwitchAttributeResponse)
	err := c.cc.Invoke(ctx, Switch_GetSwitchAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) GetSwitchStats(ctx context.Context, in *GetSwitchStatsRequest, opts ...grpc.CallOption) (*GetSwitchStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSwitchStatsResponse)
	err := c.cc.Invoke(ctx, Switch_GetSwitchStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) CreateSwitchTunnel(ctx context.Context, in *CreateSwitchTunnelRequest, opts ...grpc.CallOption) (*CreateSwitchTunnelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSwitchTunnelResponse)
	err := c.cc.Invoke(ctx, Switch_CreateSwitchTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) RemoveSwitchTunnel(ctx context.Context, in *RemoveSwitchTunnelRequest, opts ...grpc.CallOption) (*RemoveSwitchTunnelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSwitchTunnelResponse)
	err := c.cc.Invoke(ctx, Switch_RemoveSwitchTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) SetSwitchTunnelAttribute(ctx context.Context, in *SetSwitchTunnelAttributeRequest, opts ...grpc.CallOption) (*SetSwitchTunnelAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSwitchTunnelAttributeResponse)
	err := c.cc.Invoke(ctx, Switch_SetSwitchTunnelAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchClient) GetSwitchTunnelAttribute(ctx context.Context, in *GetSwitchTunnelAttributeRequest, opts ...grpc.CallOption) (*GetSwitchTunnelAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSwitchTunnelAttributeResponse)
	err := c.cc.Invoke(ctx, Switch_GetSwitchTunnelAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwitchServer is the server API for Switch service.
// All implementations should embed UnimplementedSwitchServer
// for forward compatibility.
type SwitchServer interface {
	CreateSwitch(context.Context, *CreateSwitchRequest) (*CreateSwitchResponse, error)
	RemoveSwitch(context.Context, *RemoveSwitchRequest) (*RemoveSwitchResponse, error)
	SetSwitchAttribute(context.Context, *SetSwitchAttributeRequest) (*SetSwitchAttributeResponse, error)
	SwitchStateChangeNotification(*SwitchStateChangeNotificationRequest, grpc.ServerStreamingServer[SwitchStateChangeNotificationResponse]) error
	SwitchShutdownRequestNotification(*SwitchShutdownRequestNotificationRequest, grpc.ServerStreamingServer[SwitchShutdownRequestNotificationResponse]) error
	FdbEventNotification(*FdbEventNotificationRequest, grpc.ServerStreamingServer[FdbEventNotificationResponse]) error
	PortStateChangeNotification(*PortStateChangeNotificationRequest, grpc.ServerStreamingServer[PortStateChangeNotificationResponse]) error
	PacketEventNotification(*PacketEventNotificationRequest, grpc.ServerStreamingServer[PacketEventNotificationResponse]) error
	QueuePfcDeadlockNotification(*QueuePfcDeadlockNotificationRequest, grpc.ServerStreamingServer[QueuePfcDeadlockNotificationResponse]) error
	BfdSessionStateChangeNotification(*BfdSessionStateChangeNotificationRequest, grpc.ServerStreamingServer[BfdSessionStateChangeNotificationResponse]) error
	TamEventNotification(*TamEventNotificationRequest, grpc.ServerStreamingServer[TamEventNotificationResponse]) error
	IpsecSaStatusChangeNotification(*IpsecSaStatusChangeNotificationRequest, grpc.ServerStreamingServer[IpsecSaStatusNotificationDataResponse]) error
	GetSwitchAttribute(context.Context, *GetSwitchAttributeRequest) (*GetSwitchAttributeResponse, error)
	GetSwitchStats(context.Context, *GetSwitchStatsRequest) (*GetSwitchStatsResponse, error)
	CreateSwitchTunnel(context.Context, *CreateSwitchTunnelRequest) (*CreateSwitchTunnelResponse, error)
	RemoveSwitchTunnel(context.Context, *RemoveSwitchTunnelRequest) (*RemoveSwitchTunnelResponse, error)
	SetSwitchTunnelAttribute(context.Context, *SetSwitchTunnelAttributeRequest) (*SetSwitchTunnelAttributeResponse, error)
	GetSwitchTunnelAttribute(context.Context, *GetSwitchTunnelAttributeRequest) (*GetSwitchTunnelAttributeResponse, error)
}

// UnimplementedSwitchServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSwitchServer struct{}

func (UnimplementedSwitchServer) CreateSwitch(context.Context, *CreateSwitchRequest) (*CreateSwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwitch not implemented")
}
func (UnimplementedSwitchServer) RemoveSwitch(context.Context, *RemoveSwitchRequest) (*RemoveSwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSwitch not implemented")
}
func (UnimplementedSwitchServer) SetSwitchAttribute(context.Context, *SetSwitchAttributeRequest) (*SetSwitchAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSwitchAttribute not implemented")
}
func (UnimplementedSwitchServer) SwitchStateChangeNotification(*SwitchStateChangeNotificationRequest, grpc.ServerStreamingServer[SwitchStateChangeNotificationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SwitchStateChangeNotification not implemented")
}
func (UnimplementedSwitchServer) SwitchShutdownRequestNotification(*SwitchShutdownRequestNotificationRequest, grpc.ServerStreamingServer[SwitchShutdownRequestNotificationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SwitchShutdownRequestNotification not implemented")
}
func (UnimplementedSwitchServer) FdbEventNotification(*FdbEventNotificationRequest, grpc.ServerStreamingServer[FdbEventNotificationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FdbEventNotification not implemented")
}
func (UnimplementedSwitchServer) PortStateChangeNotification(*PortStateChangeNotificationRequest, grpc.ServerStreamingServer[PortStateChangeNotificationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PortStateChangeNotification not implemented")
}
func (UnimplementedSwitchServer) PacketEventNotification(*PacketEventNotificationRequest, grpc.ServerStreamingServer[PacketEventNotificationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PacketEventNotification not implemented")
}
func (UnimplementedSwitchServer) QueuePfcDeadlockNotification(*QueuePfcDeadlockNotificationRequest, grpc.ServerStreamingServer[QueuePfcDeadlockNotificationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method QueuePfcDeadlockNotification not implemented")
}
func (UnimplementedSwitchServer) BfdSessionStateChangeNotification(*BfdSessionStateChangeNotificationRequest, grpc.ServerStreamingServer[BfdSessionStateChangeNotificationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BfdSessionStateChangeNotification not implemented")
}
func (UnimplementedSwitchServer) TamEventNotification(*TamEventNotificationRequest, grpc.ServerStreamingServer[TamEventNotificationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TamEventNotification not implemented")
}
func (UnimplementedSwitchServer) IpsecSaStatusChangeNotification(*IpsecSaStatusChangeNotificationRequest, grpc.ServerStreamingServer[IpsecSaStatusNotificationDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method IpsecSaStatusChangeNotification not implemented")
}
func (UnimplementedSwitchServer) GetSwitchAttribute(context.Context, *GetSwitchAttributeRequest) (*GetSwitchAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchAttribute not implemented")
}
func (UnimplementedSwitchServer) GetSwitchStats(context.Context, *GetSwitchStatsRequest) (*GetSwitchStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchStats not implemented")
}
func (UnimplementedSwitchServer) CreateSwitchTunnel(context.Context, *CreateSwitchTunnelRequest) (*CreateSwitchTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwitchTunnel not implemented")
}
func (UnimplementedSwitchServer) RemoveSwitchTunnel(context.Context, *RemoveSwitchTunnelRequest) (*RemoveSwitchTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSwitchTunnel not implemented")
}
func (UnimplementedSwitchServer) SetSwitchTunnelAttribute(context.Context, *SetSwitchTunnelAttributeRequest) (*SetSwitchTunnelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSwitchTunnelAttribute not implemented")
}
func (UnimplementedSwitchServer) GetSwitchTunnelAttribute(context.Context, *GetSwitchTunnelAttributeRequest) (*GetSwitchTunnelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSwitchTunnelAttribute not implemented")
}
func (UnimplementedSwitchServer) testEmbeddedByValue() {}

// UnsafeSwitchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwitchServer will
// result in compilation errors.
type UnsafeSwitchServer interface {
	mustEmbedUnimplementedSwitchServer()
}

func RegisterSwitchServer(s grpc.ServiceRegistrar, srv SwitchServer) {
	// If the following call pancis, it indicates UnimplementedSwitchServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Switch_ServiceDesc, srv)
}

func _Switch_CreateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).CreateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Switch_CreateSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).CreateSwitch(ctx, req.(*CreateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_RemoveSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).RemoveSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Switch_RemoveSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).RemoveSwitch(ctx, req.(*RemoveSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_SetSwitchAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSwitchAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).SetSwitchAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Switch_SetSwitchAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).SetSwitchAttribute(ctx, req.(*SetSwitchAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_SwitchStateChangeNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SwitchStateChangeNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).SwitchStateChangeNotification(m, &grpc.GenericServerStream[SwitchStateChangeNotificationRequest, SwitchStateChangeNotificationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_SwitchStateChangeNotificationServer = grpc.ServerStreamingServer[SwitchStateChangeNotificationResponse]

func _Switch_SwitchShutdownRequestNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SwitchShutdownRequestNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).SwitchShutdownRequestNotification(m, &grpc.GenericServerStream[SwitchShutdownRequestNotificationRequest, SwitchShutdownRequestNotificationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_SwitchShutdownRequestNotificationServer = grpc.ServerStreamingServer[SwitchShutdownRequestNotificationResponse]

func _Switch_FdbEventNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FdbEventNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).FdbEventNotification(m, &grpc.GenericServerStream[FdbEventNotificationRequest, FdbEventNotificationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_FdbEventNotificationServer = grpc.ServerStreamingServer[FdbEventNotificationResponse]

func _Switch_PortStateChangeNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PortStateChangeNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).PortStateChangeNotification(m, &grpc.GenericServerStream[PortStateChangeNotificationRequest, PortStateChangeNotificationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_PortStateChangeNotificationServer = grpc.ServerStreamingServer[PortStateChangeNotificationResponse]

func _Switch_PacketEventNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PacketEventNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).PacketEventNotification(m, &grpc.GenericServerStream[PacketEventNotificationRequest, PacketEventNotificationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_PacketEventNotificationServer = grpc.ServerStreamingServer[PacketEventNotificationResponse]

func _Switch_QueuePfcDeadlockNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueuePfcDeadlockNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).QueuePfcDeadlockNotification(m, &grpc.GenericServerStream[QueuePfcDeadlockNotificationRequest, QueuePfcDeadlockNotificationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_QueuePfcDeadlockNotificationServer = grpc.ServerStreamingServer[QueuePfcDeadlockNotificationResponse]

func _Switch_BfdSessionStateChangeNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BfdSessionStateChangeNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).BfdSessionStateChangeNotification(m, &grpc.GenericServerStream[BfdSessionStateChangeNotificationRequest, BfdSessionStateChangeNotificationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_BfdSessionStateChangeNotificationServer = grpc.ServerStreamingServer[BfdSessionStateChangeNotificationResponse]

func _Switch_TamEventNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TamEventNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).TamEventNotification(m, &grpc.GenericServerStream[TamEventNotificationRequest, TamEventNotificationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_TamEventNotificationServer = grpc.ServerStreamingServer[TamEventNotificationResponse]

func _Switch_IpsecSaStatusChangeNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IpsecSaStatusChangeNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServer).IpsecSaStatusChangeNotification(m, &grpc.GenericServerStream[IpsecSaStatusChangeNotificationRequest, IpsecSaStatusNotificationDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Switch_IpsecSaStatusChangeNotificationServer = grpc.ServerStreamingServer[IpsecSaStatusNotificationDataResponse]

func _Switch_GetSwitchAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).GetSwitchAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Switch_GetSwitchAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).GetSwitchAttribute(ctx, req.(*GetSwitchAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_GetSwitchStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).GetSwitchStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Switch_GetSwitchStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).GetSwitchStats(ctx, req.(*GetSwitchStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_CreateSwitchTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwitchTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).CreateSwitchTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Switch_CreateSwitchTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).CreateSwitchTunnel(ctx, req.(*CreateSwitchTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_RemoveSwitchTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSwitchTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).RemoveSwitchTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Switch_RemoveSwitchTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).RemoveSwitchTunnel(ctx, req.(*RemoveSwitchTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_SetSwitchTunnelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSwitchTunnelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).SetSwitchTunnelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Switch_SetSwitchTunnelAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).SetSwitchTunnelAttribute(ctx, req.(*SetSwitchTunnelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Switch_GetSwitchTunnelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSwitchTunnelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServer).GetSwitchTunnelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Switch_GetSwitchTunnelAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServer).GetSwitchTunnelAttribute(ctx, req.(*GetSwitchTunnelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Switch_ServiceDesc is the grpc.ServiceDesc for Switch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Switch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Switch",
	HandlerType: (*SwitchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSwitch",
			Handler:    _Switch_CreateSwitch_Handler,
		},
		{
			MethodName: "RemoveSwitch",
			Handler:    _Switch_RemoveSwitch_Handler,
		},
		{
			MethodName: "SetSwitchAttribute",
			Handler:    _Switch_SetSwitchAttribute_Handler,
		},
		{
			MethodName: "GetSwitchAttribute",
			Handler:    _Switch_GetSwitchAttribute_Handler,
		},
		{
			MethodName: "GetSwitchStats",
			Handler:    _Switch_GetSwitchStats_Handler,
		},
		{
			MethodName: "CreateSwitchTunnel",
			Handler:    _Switch_CreateSwitchTunnel_Handler,
		},
		{
			MethodName: "RemoveSwitchTunnel",
			Handler:    _Switch_RemoveSwitchTunnel_Handler,
		},
		{
			MethodName: "SetSwitchTunnelAttribute",
			Handler:    _Switch_SetSwitchTunnelAttribute_Handler,
		},
		{
			MethodName: "GetSwitchTunnelAttribute",
			Handler:    _Switch_GetSwitchTunnelAttribute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SwitchStateChangeNotification",
			Handler:       _Switch_SwitchStateChangeNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SwitchShutdownRequestNotification",
			Handler:       _Switch_SwitchShutdownRequestNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FdbEventNotification",
			Handler:       _Switch_FdbEventNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PortStateChangeNotification",
			Handler:       _Switch_PortStateChangeNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PacketEventNotification",
			Handler:       _Switch_PacketEventNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueuePfcDeadlockNotification",
			Handler:       _Switch_QueuePfcDeadlockNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BfdSessionStateChangeNotification",
			Handler:       _Switch_BfdSessionStateChangeNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TamEventNotification",
			Handler:       _Switch_TamEventNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "IpsecSaStatusChangeNotification",
			Handler:       _Switch_IpsecSaStatusChangeNotification_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dataplane/proto/sai/switch.proto",
}
