// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/next_hop_group.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NextHopGroup_CreateNextHopGroup_FullMethodName             = "/lemming.dataplane.sai.NextHopGroup/CreateNextHopGroup"
	NextHopGroup_RemoveNextHopGroup_FullMethodName             = "/lemming.dataplane.sai.NextHopGroup/RemoveNextHopGroup"
	NextHopGroup_SetNextHopGroupAttribute_FullMethodName       = "/lemming.dataplane.sai.NextHopGroup/SetNextHopGroupAttribute"
	NextHopGroup_GetNextHopGroupAttribute_FullMethodName       = "/lemming.dataplane.sai.NextHopGroup/GetNextHopGroupAttribute"
	NextHopGroup_CreateNextHopGroupMember_FullMethodName       = "/lemming.dataplane.sai.NextHopGroup/CreateNextHopGroupMember"
	NextHopGroup_RemoveNextHopGroupMember_FullMethodName       = "/lemming.dataplane.sai.NextHopGroup/RemoveNextHopGroupMember"
	NextHopGroup_SetNextHopGroupMemberAttribute_FullMethodName = "/lemming.dataplane.sai.NextHopGroup/SetNextHopGroupMemberAttribute"
	NextHopGroup_GetNextHopGroupMemberAttribute_FullMethodName = "/lemming.dataplane.sai.NextHopGroup/GetNextHopGroupMemberAttribute"
	NextHopGroup_CreateNextHopGroupMembers_FullMethodName      = "/lemming.dataplane.sai.NextHopGroup/CreateNextHopGroupMembers"
	NextHopGroup_RemoveNextHopGroupMembers_FullMethodName      = "/lemming.dataplane.sai.NextHopGroup/RemoveNextHopGroupMembers"
	NextHopGroup_CreateNextHopGroupMap_FullMethodName          = "/lemming.dataplane.sai.NextHopGroup/CreateNextHopGroupMap"
	NextHopGroup_RemoveNextHopGroupMap_FullMethodName          = "/lemming.dataplane.sai.NextHopGroup/RemoveNextHopGroupMap"
	NextHopGroup_SetNextHopGroupMapAttribute_FullMethodName    = "/lemming.dataplane.sai.NextHopGroup/SetNextHopGroupMapAttribute"
	NextHopGroup_GetNextHopGroupMapAttribute_FullMethodName    = "/lemming.dataplane.sai.NextHopGroup/GetNextHopGroupMapAttribute"
	NextHopGroup_CreateNextHopGroups_FullMethodName            = "/lemming.dataplane.sai.NextHopGroup/CreateNextHopGroups"
	NextHopGroup_RemoveNextHopGroups_FullMethodName            = "/lemming.dataplane.sai.NextHopGroup/RemoveNextHopGroups"
)

// NextHopGroupClient is the client API for NextHopGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NextHopGroupClient interface {
	CreateNextHopGroup(ctx context.Context, in *CreateNextHopGroupRequest, opts ...grpc.CallOption) (*CreateNextHopGroupResponse, error)
	RemoveNextHopGroup(ctx context.Context, in *RemoveNextHopGroupRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupResponse, error)
	SetNextHopGroupAttribute(ctx context.Context, in *SetNextHopGroupAttributeRequest, opts ...grpc.CallOption) (*SetNextHopGroupAttributeResponse, error)
	GetNextHopGroupAttribute(ctx context.Context, in *GetNextHopGroupAttributeRequest, opts ...grpc.CallOption) (*GetNextHopGroupAttributeResponse, error)
	CreateNextHopGroupMember(ctx context.Context, in *CreateNextHopGroupMemberRequest, opts ...grpc.CallOption) (*CreateNextHopGroupMemberResponse, error)
	RemoveNextHopGroupMember(ctx context.Context, in *RemoveNextHopGroupMemberRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupMemberResponse, error)
	SetNextHopGroupMemberAttribute(ctx context.Context, in *SetNextHopGroupMemberAttributeRequest, opts ...grpc.CallOption) (*SetNextHopGroupMemberAttributeResponse, error)
	GetNextHopGroupMemberAttribute(ctx context.Context, in *GetNextHopGroupMemberAttributeRequest, opts ...grpc.CallOption) (*GetNextHopGroupMemberAttributeResponse, error)
	CreateNextHopGroupMembers(ctx context.Context, in *CreateNextHopGroupMembersRequest, opts ...grpc.CallOption) (*CreateNextHopGroupMembersResponse, error)
	RemoveNextHopGroupMembers(ctx context.Context, in *RemoveNextHopGroupMembersRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupMembersResponse, error)
	CreateNextHopGroupMap(ctx context.Context, in *CreateNextHopGroupMapRequest, opts ...grpc.CallOption) (*CreateNextHopGroupMapResponse, error)
	RemoveNextHopGroupMap(ctx context.Context, in *RemoveNextHopGroupMapRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupMapResponse, error)
	SetNextHopGroupMapAttribute(ctx context.Context, in *SetNextHopGroupMapAttributeRequest, opts ...grpc.CallOption) (*SetNextHopGroupMapAttributeResponse, error)
	GetNextHopGroupMapAttribute(ctx context.Context, in *GetNextHopGroupMapAttributeRequest, opts ...grpc.CallOption) (*GetNextHopGroupMapAttributeResponse, error)
	CreateNextHopGroups(ctx context.Context, in *CreateNextHopGroupsRequest, opts ...grpc.CallOption) (*CreateNextHopGroupsResponse, error)
	RemoveNextHopGroups(ctx context.Context, in *RemoveNextHopGroupsRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupsResponse, error)
}

type nextHopGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewNextHopGroupClient(cc grpc.ClientConnInterface) NextHopGroupClient {
	return &nextHopGroupClient{cc}
}

func (c *nextHopGroupClient) CreateNextHopGroup(ctx context.Context, in *CreateNextHopGroupRequest, opts ...grpc.CallOption) (*CreateNextHopGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNextHopGroupResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_CreateNextHopGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) RemoveNextHopGroup(ctx context.Context, in *RemoveNextHopGroupRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNextHopGroupResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_RemoveNextHopGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) SetNextHopGroupAttribute(ctx context.Context, in *SetNextHopGroupAttributeRequest, opts ...grpc.CallOption) (*SetNextHopGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNextHopGroupAttributeResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_SetNextHopGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) GetNextHopGroupAttribute(ctx context.Context, in *GetNextHopGroupAttributeRequest, opts ...grpc.CallOption) (*GetNextHopGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNextHopGroupAttributeResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_GetNextHopGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) CreateNextHopGroupMember(ctx context.Context, in *CreateNextHopGroupMemberRequest, opts ...grpc.CallOption) (*CreateNextHopGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNextHopGroupMemberResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_CreateNextHopGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) RemoveNextHopGroupMember(ctx context.Context, in *RemoveNextHopGroupMemberRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNextHopGroupMemberResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_RemoveNextHopGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) SetNextHopGroupMemberAttribute(ctx context.Context, in *SetNextHopGroupMemberAttributeRequest, opts ...grpc.CallOption) (*SetNextHopGroupMemberAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNextHopGroupMemberAttributeResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_SetNextHopGroupMemberAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) GetNextHopGroupMemberAttribute(ctx context.Context, in *GetNextHopGroupMemberAttributeRequest, opts ...grpc.CallOption) (*GetNextHopGroupMemberAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNextHopGroupMemberAttributeResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_GetNextHopGroupMemberAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) CreateNextHopGroupMembers(ctx context.Context, in *CreateNextHopGroupMembersRequest, opts ...grpc.CallOption) (*CreateNextHopGroupMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNextHopGroupMembersResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_CreateNextHopGroupMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) RemoveNextHopGroupMembers(ctx context.Context, in *RemoveNextHopGroupMembersRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNextHopGroupMembersResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_RemoveNextHopGroupMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) CreateNextHopGroupMap(ctx context.Context, in *CreateNextHopGroupMapRequest, opts ...grpc.CallOption) (*CreateNextHopGroupMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNextHopGroupMapResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_CreateNextHopGroupMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) RemoveNextHopGroupMap(ctx context.Context, in *RemoveNextHopGroupMapRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNextHopGroupMapResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_RemoveNextHopGroupMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) SetNextHopGroupMapAttribute(ctx context.Context, in *SetNextHopGroupMapAttributeRequest, opts ...grpc.CallOption) (*SetNextHopGroupMapAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNextHopGroupMapAttributeResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_SetNextHopGroupMapAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) GetNextHopGroupMapAttribute(ctx context.Context, in *GetNextHopGroupMapAttributeRequest, opts ...grpc.CallOption) (*GetNextHopGroupMapAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNextHopGroupMapAttributeResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_GetNextHopGroupMapAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) CreateNextHopGroups(ctx context.Context, in *CreateNextHopGroupsRequest, opts ...grpc.CallOption) (*CreateNextHopGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNextHopGroupsResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_CreateNextHopGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopGroupClient) RemoveNextHopGroups(ctx context.Context, in *RemoveNextHopGroupsRequest, opts ...grpc.CallOption) (*RemoveNextHopGroupsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNextHopGroupsResponse)
	err := c.cc.Invoke(ctx, NextHopGroup_RemoveNextHopGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NextHopGroupServer is the server API for NextHopGroup service.
// All implementations should embed UnimplementedNextHopGroupServer
// for forward compatibility.
type NextHopGroupServer interface {
	CreateNextHopGroup(context.Context, *CreateNextHopGroupRequest) (*CreateNextHopGroupResponse, error)
	RemoveNextHopGroup(context.Context, *RemoveNextHopGroupRequest) (*RemoveNextHopGroupResponse, error)
	SetNextHopGroupAttribute(context.Context, *SetNextHopGroupAttributeRequest) (*SetNextHopGroupAttributeResponse, error)
	GetNextHopGroupAttribute(context.Context, *GetNextHopGroupAttributeRequest) (*GetNextHopGroupAttributeResponse, error)
	CreateNextHopGroupMember(context.Context, *CreateNextHopGroupMemberRequest) (*CreateNextHopGroupMemberResponse, error)
	RemoveNextHopGroupMember(context.Context, *RemoveNextHopGroupMemberRequest) (*RemoveNextHopGroupMemberResponse, error)
	SetNextHopGroupMemberAttribute(context.Context, *SetNextHopGroupMemberAttributeRequest) (*SetNextHopGroupMemberAttributeResponse, error)
	GetNextHopGroupMemberAttribute(context.Context, *GetNextHopGroupMemberAttributeRequest) (*GetNextHopGroupMemberAttributeResponse, error)
	CreateNextHopGroupMembers(context.Context, *CreateNextHopGroupMembersRequest) (*CreateNextHopGroupMembersResponse, error)
	RemoveNextHopGroupMembers(context.Context, *RemoveNextHopGroupMembersRequest) (*RemoveNextHopGroupMembersResponse, error)
	CreateNextHopGroupMap(context.Context, *CreateNextHopGroupMapRequest) (*CreateNextHopGroupMapResponse, error)
	RemoveNextHopGroupMap(context.Context, *RemoveNextHopGroupMapRequest) (*RemoveNextHopGroupMapResponse, error)
	SetNextHopGroupMapAttribute(context.Context, *SetNextHopGroupMapAttributeRequest) (*SetNextHopGroupMapAttributeResponse, error)
	GetNextHopGroupMapAttribute(context.Context, *GetNextHopGroupMapAttributeRequest) (*GetNextHopGroupMapAttributeResponse, error)
	CreateNextHopGroups(context.Context, *CreateNextHopGroupsRequest) (*CreateNextHopGroupsResponse, error)
	RemoveNextHopGroups(context.Context, *RemoveNextHopGroupsRequest) (*RemoveNextHopGroupsResponse, error)
}

// UnimplementedNextHopGroupServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNextHopGroupServer struct{}

func (UnimplementedNextHopGroupServer) CreateNextHopGroup(context.Context, *CreateNextHopGroupRequest) (*CreateNextHopGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHopGroup not implemented")
}
func (UnimplementedNextHopGroupServer) RemoveNextHopGroup(context.Context, *RemoveNextHopGroupRequest) (*RemoveNextHopGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNextHopGroup not implemented")
}
func (UnimplementedNextHopGroupServer) SetNextHopGroupAttribute(context.Context, *SetNextHopGroupAttributeRequest) (*SetNextHopGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextHopGroupAttribute not implemented")
}
func (UnimplementedNextHopGroupServer) GetNextHopGroupAttribute(context.Context, *GetNextHopGroupAttributeRequest) (*GetNextHopGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHopGroupAttribute not implemented")
}
func (UnimplementedNextHopGroupServer) CreateNextHopGroupMember(context.Context, *CreateNextHopGroupMemberRequest) (*CreateNextHopGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHopGroupMember not implemented")
}
func (UnimplementedNextHopGroupServer) RemoveNextHopGroupMember(context.Context, *RemoveNextHopGroupMemberRequest) (*RemoveNextHopGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNextHopGroupMember not implemented")
}
func (UnimplementedNextHopGroupServer) SetNextHopGroupMemberAttribute(context.Context, *SetNextHopGroupMemberAttributeRequest) (*SetNextHopGroupMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextHopGroupMemberAttribute not implemented")
}
func (UnimplementedNextHopGroupServer) GetNextHopGroupMemberAttribute(context.Context, *GetNextHopGroupMemberAttributeRequest) (*GetNextHopGroupMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHopGroupMemberAttribute not implemented")
}
func (UnimplementedNextHopGroupServer) CreateNextHopGroupMembers(context.Context, *CreateNextHopGroupMembersRequest) (*CreateNextHopGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHopGroupMembers not implemented")
}
func (UnimplementedNextHopGroupServer) RemoveNextHopGroupMembers(context.Context, *RemoveNextHopGroupMembersRequest) (*RemoveNextHopGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNextHopGroupMembers not implemented")
}
func (UnimplementedNextHopGroupServer) CreateNextHopGroupMap(context.Context, *CreateNextHopGroupMapRequest) (*CreateNextHopGroupMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHopGroupMap not implemented")
}
func (UnimplementedNextHopGroupServer) RemoveNextHopGroupMap(context.Context, *RemoveNextHopGroupMapRequest) (*RemoveNextHopGroupMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNextHopGroupMap not implemented")
}
func (UnimplementedNextHopGroupServer) SetNextHopGroupMapAttribute(context.Context, *SetNextHopGroupMapAttributeRequest) (*SetNextHopGroupMapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextHopGroupMapAttribute not implemented")
}
func (UnimplementedNextHopGroupServer) GetNextHopGroupMapAttribute(context.Context, *GetNextHopGroupMapAttributeRequest) (*GetNextHopGroupMapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHopGroupMapAttribute not implemented")
}
func (UnimplementedNextHopGroupServer) CreateNextHopGroups(context.Context, *CreateNextHopGroupsRequest) (*CreateNextHopGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHopGroups not implemented")
}
func (UnimplementedNextHopGroupServer) RemoveNextHopGroups(context.Context, *RemoveNextHopGroupsRequest) (*RemoveNextHopGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNextHopGroups not implemented")
}
func (UnimplementedNextHopGroupServer) testEmbeddedByValue() {}

// UnsafeNextHopGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NextHopGroupServer will
// result in compilation errors.
type UnsafeNextHopGroupServer interface {
	mustEmbedUnimplementedNextHopGroupServer()
}

func RegisterNextHopGroupServer(s grpc.ServiceRegistrar, srv NextHopGroupServer) {
	// If the following call pancis, it indicates UnimplementedNextHopGroupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NextHopGroup_ServiceDesc, srv)
}

func _NextHopGroup_CreateNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).CreateNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_CreateNextHopGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).CreateNextHopGroup(ctx, req.(*CreateNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_RemoveNextHopGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).RemoveNextHopGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_RemoveNextHopGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).RemoveNextHopGroup(ctx, req.(*RemoveNextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_SetNextHopGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNextHopGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).SetNextHopGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_SetNextHopGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).SetNextHopGroupAttribute(ctx, req.(*SetNextHopGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_GetNextHopGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).GetNextHopGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_GetNextHopGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).GetNextHopGroupAttribute(ctx, req.(*GetNextHopGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_CreateNextHopGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).CreateNextHopGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_CreateNextHopGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).CreateNextHopGroupMember(ctx, req.(*CreateNextHopGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_RemoveNextHopGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNextHopGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).RemoveNextHopGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_RemoveNextHopGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).RemoveNextHopGroupMember(ctx, req.(*RemoveNextHopGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_SetNextHopGroupMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNextHopGroupMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).SetNextHopGroupMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_SetNextHopGroupMemberAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).SetNextHopGroupMemberAttribute(ctx, req.(*SetNextHopGroupMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_GetNextHopGroupMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopGroupMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).GetNextHopGroupMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_GetNextHopGroupMemberAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).GetNextHopGroupMemberAttribute(ctx, req.(*GetNextHopGroupMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_CreateNextHopGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).CreateNextHopGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_CreateNextHopGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).CreateNextHopGroupMembers(ctx, req.(*CreateNextHopGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_RemoveNextHopGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNextHopGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).RemoveNextHopGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_RemoveNextHopGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).RemoveNextHopGroupMembers(ctx, req.(*RemoveNextHopGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_CreateNextHopGroupMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopGroupMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).CreateNextHopGroupMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_CreateNextHopGroupMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).CreateNextHopGroupMap(ctx, req.(*CreateNextHopGroupMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_RemoveNextHopGroupMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNextHopGroupMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).RemoveNextHopGroupMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_RemoveNextHopGroupMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).RemoveNextHopGroupMap(ctx, req.(*RemoveNextHopGroupMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_SetNextHopGroupMapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNextHopGroupMapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).SetNextHopGroupMapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_SetNextHopGroupMapAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).SetNextHopGroupMapAttribute(ctx, req.(*SetNextHopGroupMapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_GetNextHopGroupMapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopGroupMapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).GetNextHopGroupMapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_GetNextHopGroupMapAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).GetNextHopGroupMapAttribute(ctx, req.(*GetNextHopGroupMapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_CreateNextHopGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).CreateNextHopGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_CreateNextHopGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).CreateNextHopGroups(ctx, req.(*CreateNextHopGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHopGroup_RemoveNextHopGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNextHopGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopGroupServer).RemoveNextHopGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHopGroup_RemoveNextHopGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopGroupServer).RemoveNextHopGroups(ctx, req.(*RemoveNextHopGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NextHopGroup_ServiceDesc is the grpc.ServiceDesc for NextHopGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NextHopGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.NextHopGroup",
	HandlerType: (*NextHopGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNextHopGroup",
			Handler:    _NextHopGroup_CreateNextHopGroup_Handler,
		},
		{
			MethodName: "RemoveNextHopGroup",
			Handler:    _NextHopGroup_RemoveNextHopGroup_Handler,
		},
		{
			MethodName: "SetNextHopGroupAttribute",
			Handler:    _NextHopGroup_SetNextHopGroupAttribute_Handler,
		},
		{
			MethodName: "GetNextHopGroupAttribute",
			Handler:    _NextHopGroup_GetNextHopGroupAttribute_Handler,
		},
		{
			MethodName: "CreateNextHopGroupMember",
			Handler:    _NextHopGroup_CreateNextHopGroupMember_Handler,
		},
		{
			MethodName: "RemoveNextHopGroupMember",
			Handler:    _NextHopGroup_RemoveNextHopGroupMember_Handler,
		},
		{
			MethodName: "SetNextHopGroupMemberAttribute",
			Handler:    _NextHopGroup_SetNextHopGroupMemberAttribute_Handler,
		},
		{
			MethodName: "GetNextHopGroupMemberAttribute",
			Handler:    _NextHopGroup_GetNextHopGroupMemberAttribute_Handler,
		},
		{
			MethodName: "CreateNextHopGroupMembers",
			Handler:    _NextHopGroup_CreateNextHopGroupMembers_Handler,
		},
		{
			MethodName: "RemoveNextHopGroupMembers",
			Handler:    _NextHopGroup_RemoveNextHopGroupMembers_Handler,
		},
		{
			MethodName: "CreateNextHopGroupMap",
			Handler:    _NextHopGroup_CreateNextHopGroupMap_Handler,
		},
		{
			MethodName: "RemoveNextHopGroupMap",
			Handler:    _NextHopGroup_RemoveNextHopGroupMap_Handler,
		},
		{
			MethodName: "SetNextHopGroupMapAttribute",
			Handler:    _NextHopGroup_SetNextHopGroupMapAttribute_Handler,
		},
		{
			MethodName: "GetNextHopGroupMapAttribute",
			Handler:    _NextHopGroup_GetNextHopGroupMapAttribute_Handler,
		},
		{
			MethodName: "CreateNextHopGroups",
			Handler:    _NextHopGroup_CreateNextHopGroups_Handler,
		},
		{
			MethodName: "RemoveNextHopGroups",
			Handler:    _NextHopGroup_RemoveNextHopGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/next_hop_group.proto",
}
