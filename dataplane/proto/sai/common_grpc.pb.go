// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/common.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Entrypoint_ObjectTypeQuery_FullMethodName = "/lemming.dataplane.sai.Entrypoint/ObjectTypeQuery"
	Entrypoint_Initialize_FullMethodName      = "/lemming.dataplane.sai.Entrypoint/Initialize"
	Entrypoint_Uninitialize_FullMethodName    = "/lemming.dataplane.sai.Entrypoint/Uninitialize"
)

// EntrypointClient is the client API for Entrypoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntrypointClient interface {
	ObjectTypeQuery(ctx context.Context, in *ObjectTypeQueryRequest, opts ...grpc.CallOption) (*ObjectTypeQueryResponse, error)
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error)
	Uninitialize(ctx context.Context, in *UninitializeRequest, opts ...grpc.CallOption) (*UninitializeResponse, error)
}

type entrypointClient struct {
	cc grpc.ClientConnInterface
}

func NewEntrypointClient(cc grpc.ClientConnInterface) EntrypointClient {
	return &entrypointClient{cc}
}

func (c *entrypointClient) ObjectTypeQuery(ctx context.Context, in *ObjectTypeQueryRequest, opts ...grpc.CallOption) (*ObjectTypeQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObjectTypeQueryResponse)
	err := c.cc.Invoke(ctx, Entrypoint_ObjectTypeQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entrypointClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*InitializeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitializeResponse)
	err := c.cc.Invoke(ctx, Entrypoint_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entrypointClient) Uninitialize(ctx context.Context, in *UninitializeRequest, opts ...grpc.CallOption) (*UninitializeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UninitializeResponse)
	err := c.cc.Invoke(ctx, Entrypoint_Uninitialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntrypointServer is the server API for Entrypoint service.
// All implementations should embed UnimplementedEntrypointServer
// for forward compatibility.
type EntrypointServer interface {
	ObjectTypeQuery(context.Context, *ObjectTypeQueryRequest) (*ObjectTypeQueryResponse, error)
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	Uninitialize(context.Context, *UninitializeRequest) (*UninitializeResponse, error)
}

// UnimplementedEntrypointServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEntrypointServer struct{}

func (UnimplementedEntrypointServer) ObjectTypeQuery(context.Context, *ObjectTypeQueryRequest) (*ObjectTypeQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectTypeQuery not implemented")
}
func (UnimplementedEntrypointServer) Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedEntrypointServer) Uninitialize(context.Context, *UninitializeRequest) (*UninitializeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uninitialize not implemented")
}
func (UnimplementedEntrypointServer) testEmbeddedByValue() {}

// UnsafeEntrypointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntrypointServer will
// result in compilation errors.
type UnsafeEntrypointServer interface {
	mustEmbedUnimplementedEntrypointServer()
}

func RegisterEntrypointServer(s grpc.ServiceRegistrar, srv EntrypointServer) {
	// If the following call pancis, it indicates UnimplementedEntrypointServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Entrypoint_ServiceDesc, srv)
}

func _Entrypoint_ObjectTypeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectTypeQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntrypointServer).ObjectTypeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entrypoint_ObjectTypeQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntrypointServer).ObjectTypeQuery(ctx, req.(*ObjectTypeQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entrypoint_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntrypointServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entrypoint_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntrypointServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entrypoint_Uninitialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UninitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntrypointServer).Uninitialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Entrypoint_Uninitialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntrypointServer).Uninitialize(ctx, req.(*UninitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Entrypoint_ServiceDesc is the grpc.ServiceDesc for Entrypoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entrypoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Entrypoint",
	HandlerType: (*EntrypointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ObjectTypeQuery",
			Handler:    _Entrypoint_ObjectTypeQuery_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _Entrypoint_Initialize_Handler,
		},
		{
			MethodName: "Uninitialize",
			Handler:    _Entrypoint_Uninitialize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/common.proto",
}
