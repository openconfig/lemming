// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/mcast_fdb.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	McastFdb_CreateMcastFdbEntry_FullMethodName       = "/lemming.dataplane.sai.McastFdb/CreateMcastFdbEntry"
	McastFdb_RemoveMcastFdbEntry_FullMethodName       = "/lemming.dataplane.sai.McastFdb/RemoveMcastFdbEntry"
	McastFdb_SetMcastFdbEntryAttribute_FullMethodName = "/lemming.dataplane.sai.McastFdb/SetMcastFdbEntryAttribute"
	McastFdb_GetMcastFdbEntryAttribute_FullMethodName = "/lemming.dataplane.sai.McastFdb/GetMcastFdbEntryAttribute"
)

// McastFdbClient is the client API for McastFdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McastFdbClient interface {
	CreateMcastFdbEntry(ctx context.Context, in *CreateMcastFdbEntryRequest, opts ...grpc.CallOption) (*CreateMcastFdbEntryResponse, error)
	RemoveMcastFdbEntry(ctx context.Context, in *RemoveMcastFdbEntryRequest, opts ...grpc.CallOption) (*RemoveMcastFdbEntryResponse, error)
	SetMcastFdbEntryAttribute(ctx context.Context, in *SetMcastFdbEntryAttributeRequest, opts ...grpc.CallOption) (*SetMcastFdbEntryAttributeResponse, error)
	GetMcastFdbEntryAttribute(ctx context.Context, in *GetMcastFdbEntryAttributeRequest, opts ...grpc.CallOption) (*GetMcastFdbEntryAttributeResponse, error)
}

type mcastFdbClient struct {
	cc grpc.ClientConnInterface
}

func NewMcastFdbClient(cc grpc.ClientConnInterface) McastFdbClient {
	return &mcastFdbClient{cc}
}

func (c *mcastFdbClient) CreateMcastFdbEntry(ctx context.Context, in *CreateMcastFdbEntryRequest, opts ...grpc.CallOption) (*CreateMcastFdbEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMcastFdbEntryResponse)
	err := c.cc.Invoke(ctx, McastFdb_CreateMcastFdbEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcastFdbClient) RemoveMcastFdbEntry(ctx context.Context, in *RemoveMcastFdbEntryRequest, opts ...grpc.CallOption) (*RemoveMcastFdbEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMcastFdbEntryResponse)
	err := c.cc.Invoke(ctx, McastFdb_RemoveMcastFdbEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcastFdbClient) SetMcastFdbEntryAttribute(ctx context.Context, in *SetMcastFdbEntryAttributeRequest, opts ...grpc.CallOption) (*SetMcastFdbEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMcastFdbEntryAttributeResponse)
	err := c.cc.Invoke(ctx, McastFdb_SetMcastFdbEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcastFdbClient) GetMcastFdbEntryAttribute(ctx context.Context, in *GetMcastFdbEntryAttributeRequest, opts ...grpc.CallOption) (*GetMcastFdbEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMcastFdbEntryAttributeResponse)
	err := c.cc.Invoke(ctx, McastFdb_GetMcastFdbEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// McastFdbServer is the server API for McastFdb service.
// All implementations should embed UnimplementedMcastFdbServer
// for forward compatibility.
type McastFdbServer interface {
	CreateMcastFdbEntry(context.Context, *CreateMcastFdbEntryRequest) (*CreateMcastFdbEntryResponse, error)
	RemoveMcastFdbEntry(context.Context, *RemoveMcastFdbEntryRequest) (*RemoveMcastFdbEntryResponse, error)
	SetMcastFdbEntryAttribute(context.Context, *SetMcastFdbEntryAttributeRequest) (*SetMcastFdbEntryAttributeResponse, error)
	GetMcastFdbEntryAttribute(context.Context, *GetMcastFdbEntryAttributeRequest) (*GetMcastFdbEntryAttributeResponse, error)
}

// UnimplementedMcastFdbServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMcastFdbServer struct{}

func (UnimplementedMcastFdbServer) CreateMcastFdbEntry(context.Context, *CreateMcastFdbEntryRequest) (*CreateMcastFdbEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMcastFdbEntry not implemented")
}
func (UnimplementedMcastFdbServer) RemoveMcastFdbEntry(context.Context, *RemoveMcastFdbEntryRequest) (*RemoveMcastFdbEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMcastFdbEntry not implemented")
}
func (UnimplementedMcastFdbServer) SetMcastFdbEntryAttribute(context.Context, *SetMcastFdbEntryAttributeRequest) (*SetMcastFdbEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMcastFdbEntryAttribute not implemented")
}
func (UnimplementedMcastFdbServer) GetMcastFdbEntryAttribute(context.Context, *GetMcastFdbEntryAttributeRequest) (*GetMcastFdbEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMcastFdbEntryAttribute not implemented")
}
func (UnimplementedMcastFdbServer) testEmbeddedByValue() {}

// UnsafeMcastFdbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McastFdbServer will
// result in compilation errors.
type UnsafeMcastFdbServer interface {
	mustEmbedUnimplementedMcastFdbServer()
}

func RegisterMcastFdbServer(s grpc.ServiceRegistrar, srv McastFdbServer) {
	// If the following call pancis, it indicates UnimplementedMcastFdbServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&McastFdb_ServiceDesc, srv)
}

func _McastFdb_CreateMcastFdbEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMcastFdbEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McastFdbServer).CreateMcastFdbEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McastFdb_CreateMcastFdbEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McastFdbServer).CreateMcastFdbEntry(ctx, req.(*CreateMcastFdbEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McastFdb_RemoveMcastFdbEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMcastFdbEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McastFdbServer).RemoveMcastFdbEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McastFdb_RemoveMcastFdbEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McastFdbServer).RemoveMcastFdbEntry(ctx, req.(*RemoveMcastFdbEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McastFdb_SetMcastFdbEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMcastFdbEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McastFdbServer).SetMcastFdbEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McastFdb_SetMcastFdbEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McastFdbServer).SetMcastFdbEntryAttribute(ctx, req.(*SetMcastFdbEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McastFdb_GetMcastFdbEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMcastFdbEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McastFdbServer).GetMcastFdbEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McastFdb_GetMcastFdbEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McastFdbServer).GetMcastFdbEntryAttribute(ctx, req.(*GetMcastFdbEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// McastFdb_ServiceDesc is the grpc.ServiceDesc for McastFdb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var McastFdb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.McastFdb",
	HandlerType: (*McastFdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMcastFdbEntry",
			Handler:    _McastFdb_CreateMcastFdbEntry_Handler,
		},
		{
			MethodName: "RemoveMcastFdbEntry",
			Handler:    _McastFdb_RemoveMcastFdbEntry_Handler,
		},
		{
			MethodName: "SetMcastFdbEntryAttribute",
			Handler:    _McastFdb_SetMcastFdbEntryAttribute_Handler,
		},
		{
			MethodName: "GetMcastFdbEntryAttribute",
			Handler:    _McastFdb_GetMcastFdbEntryAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/mcast_fdb.proto",
}
