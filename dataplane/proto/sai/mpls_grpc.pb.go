// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/mpls.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Mpls_CreateInsegEntry_FullMethodName       = "/lemming.dataplane.sai.Mpls/CreateInsegEntry"
	Mpls_RemoveInsegEntry_FullMethodName       = "/lemming.dataplane.sai.Mpls/RemoveInsegEntry"
	Mpls_SetInsegEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Mpls/SetInsegEntryAttribute"
	Mpls_GetInsegEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Mpls/GetInsegEntryAttribute"
	Mpls_CreateInsegEntries_FullMethodName     = "/lemming.dataplane.sai.Mpls/CreateInsegEntries"
	Mpls_RemoveInsegEntries_FullMethodName     = "/lemming.dataplane.sai.Mpls/RemoveInsegEntries"
)

// MplsClient is the client API for Mpls service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MplsClient interface {
	CreateInsegEntry(ctx context.Context, in *CreateInsegEntryRequest, opts ...grpc.CallOption) (*CreateInsegEntryResponse, error)
	RemoveInsegEntry(ctx context.Context, in *RemoveInsegEntryRequest, opts ...grpc.CallOption) (*RemoveInsegEntryResponse, error)
	SetInsegEntryAttribute(ctx context.Context, in *SetInsegEntryAttributeRequest, opts ...grpc.CallOption) (*SetInsegEntryAttributeResponse, error)
	GetInsegEntryAttribute(ctx context.Context, in *GetInsegEntryAttributeRequest, opts ...grpc.CallOption) (*GetInsegEntryAttributeResponse, error)
	CreateInsegEntries(ctx context.Context, in *CreateInsegEntriesRequest, opts ...grpc.CallOption) (*CreateInsegEntriesResponse, error)
	RemoveInsegEntries(ctx context.Context, in *RemoveInsegEntriesRequest, opts ...grpc.CallOption) (*RemoveInsegEntriesResponse, error)
}

type mplsClient struct {
	cc grpc.ClientConnInterface
}

func NewMplsClient(cc grpc.ClientConnInterface) MplsClient {
	return &mplsClient{cc}
}

func (c *mplsClient) CreateInsegEntry(ctx context.Context, in *CreateInsegEntryRequest, opts ...grpc.CallOption) (*CreateInsegEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInsegEntryResponse)
	err := c.cc.Invoke(ctx, Mpls_CreateInsegEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsClient) RemoveInsegEntry(ctx context.Context, in *RemoveInsegEntryRequest, opts ...grpc.CallOption) (*RemoveInsegEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveInsegEntryResponse)
	err := c.cc.Invoke(ctx, Mpls_RemoveInsegEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsClient) SetInsegEntryAttribute(ctx context.Context, in *SetInsegEntryAttributeRequest, opts ...grpc.CallOption) (*SetInsegEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetInsegEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Mpls_SetInsegEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsClient) GetInsegEntryAttribute(ctx context.Context, in *GetInsegEntryAttributeRequest, opts ...grpc.CallOption) (*GetInsegEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInsegEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Mpls_GetInsegEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsClient) CreateInsegEntries(ctx context.Context, in *CreateInsegEntriesRequest, opts ...grpc.CallOption) (*CreateInsegEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInsegEntriesResponse)
	err := c.cc.Invoke(ctx, Mpls_CreateInsegEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsClient) RemoveInsegEntries(ctx context.Context, in *RemoveInsegEntriesRequest, opts ...grpc.CallOption) (*RemoveInsegEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveInsegEntriesResponse)
	err := c.cc.Invoke(ctx, Mpls_RemoveInsegEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MplsServer is the server API for Mpls service.
// All implementations should embed UnimplementedMplsServer
// for forward compatibility.
type MplsServer interface {
	CreateInsegEntry(context.Context, *CreateInsegEntryRequest) (*CreateInsegEntryResponse, error)
	RemoveInsegEntry(context.Context, *RemoveInsegEntryRequest) (*RemoveInsegEntryResponse, error)
	SetInsegEntryAttribute(context.Context, *SetInsegEntryAttributeRequest) (*SetInsegEntryAttributeResponse, error)
	GetInsegEntryAttribute(context.Context, *GetInsegEntryAttributeRequest) (*GetInsegEntryAttributeResponse, error)
	CreateInsegEntries(context.Context, *CreateInsegEntriesRequest) (*CreateInsegEntriesResponse, error)
	RemoveInsegEntries(context.Context, *RemoveInsegEntriesRequest) (*RemoveInsegEntriesResponse, error)
}

// UnimplementedMplsServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMplsServer struct{}

func (UnimplementedMplsServer) CreateInsegEntry(context.Context, *CreateInsegEntryRequest) (*CreateInsegEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInsegEntry not implemented")
}
func (UnimplementedMplsServer) RemoveInsegEntry(context.Context, *RemoveInsegEntryRequest) (*RemoveInsegEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInsegEntry not implemented")
}
func (UnimplementedMplsServer) SetInsegEntryAttribute(context.Context, *SetInsegEntryAttributeRequest) (*SetInsegEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInsegEntryAttribute not implemented")
}
func (UnimplementedMplsServer) GetInsegEntryAttribute(context.Context, *GetInsegEntryAttributeRequest) (*GetInsegEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInsegEntryAttribute not implemented")
}
func (UnimplementedMplsServer) CreateInsegEntries(context.Context, *CreateInsegEntriesRequest) (*CreateInsegEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInsegEntries not implemented")
}
func (UnimplementedMplsServer) RemoveInsegEntries(context.Context, *RemoveInsegEntriesRequest) (*RemoveInsegEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInsegEntries not implemented")
}
func (UnimplementedMplsServer) testEmbeddedByValue() {}

// UnsafeMplsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MplsServer will
// result in compilation errors.
type UnsafeMplsServer interface {
	mustEmbedUnimplementedMplsServer()
}

func RegisterMplsServer(s grpc.ServiceRegistrar, srv MplsServer) {
	// If the following call pancis, it indicates UnimplementedMplsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mpls_ServiceDesc, srv)
}

func _Mpls_CreateInsegEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInsegEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsServer).CreateInsegEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpls_CreateInsegEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsServer).CreateInsegEntry(ctx, req.(*CreateInsegEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpls_RemoveInsegEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInsegEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsServer).RemoveInsegEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpls_RemoveInsegEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsServer).RemoveInsegEntry(ctx, req.(*RemoveInsegEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpls_SetInsegEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInsegEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsServer).SetInsegEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpls_SetInsegEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsServer).SetInsegEntryAttribute(ctx, req.(*SetInsegEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpls_GetInsegEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInsegEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsServer).GetInsegEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpls_GetInsegEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsServer).GetInsegEntryAttribute(ctx, req.(*GetInsegEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpls_CreateInsegEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInsegEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsServer).CreateInsegEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpls_CreateInsegEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsServer).CreateInsegEntries(ctx, req.(*CreateInsegEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpls_RemoveInsegEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInsegEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsServer).RemoveInsegEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mpls_RemoveInsegEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsServer).RemoveInsegEntries(ctx, req.(*RemoveInsegEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mpls_ServiceDesc is the grpc.ServiceDesc for Mpls service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mpls_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Mpls",
	HandlerType: (*MplsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInsegEntry",
			Handler:    _Mpls_CreateInsegEntry_Handler,
		},
		{
			MethodName: "RemoveInsegEntry",
			Handler:    _Mpls_RemoveInsegEntry_Handler,
		},
		{
			MethodName: "SetInsegEntryAttribute",
			Handler:    _Mpls_SetInsegEntryAttribute_Handler,
		},
		{
			MethodName: "GetInsegEntryAttribute",
			Handler:    _Mpls_GetInsegEntryAttribute_Handler,
		},
		{
			MethodName: "CreateInsegEntries",
			Handler:    _Mpls_CreateInsegEntries_Handler,
		},
		{
			MethodName: "RemoveInsegEntries",
			Handler:    _Mpls_RemoveInsegEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/mpls.proto",
}
