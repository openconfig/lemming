// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: dataplane/proto/sai/hash.proto

package sai

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HashAttr int32

const (
	HashAttr_HASH_ATTR_UNSPECIFIED                  HashAttr = 0
	HashAttr_HASH_ATTR_NATIVE_HASH_FIELD_LIST       HashAttr = 1
	HashAttr_HASH_ATTR_UDF_GROUP_LIST               HashAttr = 2
	HashAttr_HASH_ATTR_FINE_GRAINED_HASH_FIELD_LIST HashAttr = 3
)

// Enum value maps for HashAttr.
var (
	HashAttr_name = map[int32]string{
		0: "HASH_ATTR_UNSPECIFIED",
		1: "HASH_ATTR_NATIVE_HASH_FIELD_LIST",
		2: "HASH_ATTR_UDF_GROUP_LIST",
		3: "HASH_ATTR_FINE_GRAINED_HASH_FIELD_LIST",
	}
	HashAttr_value = map[string]int32{
		"HASH_ATTR_UNSPECIFIED":                  0,
		"HASH_ATTR_NATIVE_HASH_FIELD_LIST":       1,
		"HASH_ATTR_UDF_GROUP_LIST":               2,
		"HASH_ATTR_FINE_GRAINED_HASH_FIELD_LIST": 3,
	}
)

func (x HashAttr) Enum() *HashAttr {
	p := new(HashAttr)
	*p = x
	return p
}

func (x HashAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_hash_proto_enumTypes[0].Descriptor()
}

func (HashAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_hash_proto_enumTypes[0]
}

func (x HashAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashAttr.Descriptor instead.
func (HashAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{0}
}

type FineGrainedHashFieldAttr int32

const (
	FineGrainedHashFieldAttr_FINE_GRAINED_HASH_FIELD_ATTR_UNSPECIFIED       FineGrainedHashFieldAttr = 0
	FineGrainedHashFieldAttr_FINE_GRAINED_HASH_FIELD_ATTR_NATIVE_HASH_FIELD FineGrainedHashFieldAttr = 1
	FineGrainedHashFieldAttr_FINE_GRAINED_HASH_FIELD_ATTR_IPV4_MASK         FineGrainedHashFieldAttr = 2
	FineGrainedHashFieldAttr_FINE_GRAINED_HASH_FIELD_ATTR_IPV6_MASK         FineGrainedHashFieldAttr = 3
	FineGrainedHashFieldAttr_FINE_GRAINED_HASH_FIELD_ATTR_SEQUENCE_ID       FineGrainedHashFieldAttr = 4
)

// Enum value maps for FineGrainedHashFieldAttr.
var (
	FineGrainedHashFieldAttr_name = map[int32]string{
		0: "FINE_GRAINED_HASH_FIELD_ATTR_UNSPECIFIED",
		1: "FINE_GRAINED_HASH_FIELD_ATTR_NATIVE_HASH_FIELD",
		2: "FINE_GRAINED_HASH_FIELD_ATTR_IPV4_MASK",
		3: "FINE_GRAINED_HASH_FIELD_ATTR_IPV6_MASK",
		4: "FINE_GRAINED_HASH_FIELD_ATTR_SEQUENCE_ID",
	}
	FineGrainedHashFieldAttr_value = map[string]int32{
		"FINE_GRAINED_HASH_FIELD_ATTR_UNSPECIFIED":       0,
		"FINE_GRAINED_HASH_FIELD_ATTR_NATIVE_HASH_FIELD": 1,
		"FINE_GRAINED_HASH_FIELD_ATTR_IPV4_MASK":         2,
		"FINE_GRAINED_HASH_FIELD_ATTR_IPV6_MASK":         3,
		"FINE_GRAINED_HASH_FIELD_ATTR_SEQUENCE_ID":       4,
	}
)

func (x FineGrainedHashFieldAttr) Enum() *FineGrainedHashFieldAttr {
	p := new(FineGrainedHashFieldAttr)
	*p = x
	return p
}

func (x FineGrainedHashFieldAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FineGrainedHashFieldAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_hash_proto_enumTypes[1].Descriptor()
}

func (FineGrainedHashFieldAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_hash_proto_enumTypes[1]
}

func (x FineGrainedHashFieldAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FineGrainedHashFieldAttr.Descriptor instead.
func (FineGrainedHashFieldAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{1}
}

type CreateHashRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Switch                   uint64                 `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	NativeHashFieldList      []NativeHashField      `protobuf:"varint,2,rep,packed,name=native_hash_field_list,json=nativeHashFieldList,proto3,enum=lemming.dataplane.sai.NativeHashField" json:"native_hash_field_list,omitempty"`
	UdfGroupList             []uint64               `protobuf:"varint,3,rep,packed,name=udf_group_list,json=udfGroupList,proto3" json:"udf_group_list,omitempty"`
	FineGrainedHashFieldList []uint64               `protobuf:"varint,4,rep,packed,name=fine_grained_hash_field_list,json=fineGrainedHashFieldList,proto3" json:"fine_grained_hash_field_list,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CreateHashRequest) Reset() {
	*x = CreateHashRequest{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHashRequest) ProtoMessage() {}

func (x *CreateHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHashRequest.ProtoReflect.Descriptor instead.
func (*CreateHashRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{0}
}

func (x *CreateHashRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateHashRequest) GetNativeHashFieldList() []NativeHashField {
	if x != nil {
		return x.NativeHashFieldList
	}
	return nil
}

func (x *CreateHashRequest) GetUdfGroupList() []uint64 {
	if x != nil {
		return x.UdfGroupList
	}
	return nil
}

func (x *CreateHashRequest) GetFineGrainedHashFieldList() []uint64 {
	if x != nil {
		return x.FineGrainedHashFieldList
	}
	return nil
}

type CreateHashResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateHashResponse) Reset() {
	*x = CreateHashResponse{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHashResponse) ProtoMessage() {}

func (x *CreateHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHashResponse.ProtoReflect.Descriptor instead.
func (*CreateHashResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{1}
}

func (x *CreateHashResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveHashRequest) Reset() {
	*x = RemoveHashRequest{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHashRequest) ProtoMessage() {}

func (x *RemoveHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHashRequest.ProtoReflect.Descriptor instead.
func (*RemoveHashRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveHashRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveHashResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveHashResponse) Reset() {
	*x = RemoveHashResponse{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveHashResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveHashResponse) ProtoMessage() {}

func (x *RemoveHashResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveHashResponse.ProtoReflect.Descriptor instead.
func (*RemoveHashResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{3}
}

type SetHashAttributeRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	Oid                      uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	NativeHashFieldList      []NativeHashField      `protobuf:"varint,2,rep,packed,name=native_hash_field_list,json=nativeHashFieldList,proto3,enum=lemming.dataplane.sai.NativeHashField" json:"native_hash_field_list,omitempty"`
	UdfGroupList             []uint64               `protobuf:"varint,3,rep,packed,name=udf_group_list,json=udfGroupList,proto3" json:"udf_group_list,omitempty"`
	FineGrainedHashFieldList []uint64               `protobuf:"varint,4,rep,packed,name=fine_grained_hash_field_list,json=fineGrainedHashFieldList,proto3" json:"fine_grained_hash_field_list,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *SetHashAttributeRequest) Reset() {
	*x = SetHashAttributeRequest{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetHashAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHashAttributeRequest) ProtoMessage() {}

func (x *SetHashAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHashAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetHashAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{4}
}

func (x *SetHashAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetHashAttributeRequest) GetNativeHashFieldList() []NativeHashField {
	if x != nil {
		return x.NativeHashFieldList
	}
	return nil
}

func (x *SetHashAttributeRequest) GetUdfGroupList() []uint64 {
	if x != nil {
		return x.UdfGroupList
	}
	return nil
}

func (x *SetHashAttributeRequest) GetFineGrainedHashFieldList() []uint64 {
	if x != nil {
		return x.FineGrainedHashFieldList
	}
	return nil
}

type SetHashAttributeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetHashAttributeResponse) Reset() {
	*x = SetHashAttributeResponse{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetHashAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHashAttributeResponse) ProtoMessage() {}

func (x *SetHashAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHashAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetHashAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{5}
}

type GetHashAttributeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType      []HashAttr             `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.HashAttr" json:"attr_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHashAttributeRequest) Reset() {
	*x = GetHashAttributeRequest{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHashAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHashAttributeRequest) ProtoMessage() {}

func (x *GetHashAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHashAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetHashAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{6}
}

func (x *GetHashAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetHashAttributeRequest) GetAttrType() []HashAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetHashAttributeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Attr          *HashAttribute         `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHashAttributeResponse) Reset() {
	*x = GetHashAttributeResponse{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHashAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHashAttributeResponse) ProtoMessage() {}

func (x *GetHashAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHashAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetHashAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{7}
}

func (x *GetHashAttributeResponse) GetAttr() *HashAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateFineGrainedHashFieldRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Switch          uint64                 `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	NativeHashField *NativeHashField       `protobuf:"varint,2,opt,name=native_hash_field,json=nativeHashField,proto3,enum=lemming.dataplane.sai.NativeHashField,oneof" json:"native_hash_field,omitempty"`
	Ipv4Mask        []byte                 `protobuf:"bytes,3,opt,name=ipv4_mask,json=ipv4Mask,proto3,oneof" json:"ipv4_mask,omitempty"`
	Ipv6Mask        []byte                 `protobuf:"bytes,4,opt,name=ipv6_mask,json=ipv6Mask,proto3,oneof" json:"ipv6_mask,omitempty"`
	SequenceId      *uint32                `protobuf:"varint,5,opt,name=sequence_id,json=sequenceId,proto3,oneof" json:"sequence_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateFineGrainedHashFieldRequest) Reset() {
	*x = CreateFineGrainedHashFieldRequest{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFineGrainedHashFieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFineGrainedHashFieldRequest) ProtoMessage() {}

func (x *CreateFineGrainedHashFieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFineGrainedHashFieldRequest.ProtoReflect.Descriptor instead.
func (*CreateFineGrainedHashFieldRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{8}
}

func (x *CreateFineGrainedHashFieldRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateFineGrainedHashFieldRequest) GetNativeHashField() NativeHashField {
	if x != nil && x.NativeHashField != nil {
		return *x.NativeHashField
	}
	return NativeHashField_NATIVE_HASH_FIELD_UNSPECIFIED
}

func (x *CreateFineGrainedHashFieldRequest) GetIpv4Mask() []byte {
	if x != nil {
		return x.Ipv4Mask
	}
	return nil
}

func (x *CreateFineGrainedHashFieldRequest) GetIpv6Mask() []byte {
	if x != nil {
		return x.Ipv6Mask
	}
	return nil
}

func (x *CreateFineGrainedHashFieldRequest) GetSequenceId() uint32 {
	if x != nil && x.SequenceId != nil {
		return *x.SequenceId
	}
	return 0
}

type CreateFineGrainedHashFieldResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFineGrainedHashFieldResponse) Reset() {
	*x = CreateFineGrainedHashFieldResponse{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFineGrainedHashFieldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFineGrainedHashFieldResponse) ProtoMessage() {}

func (x *CreateFineGrainedHashFieldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFineGrainedHashFieldResponse.ProtoReflect.Descriptor instead.
func (*CreateFineGrainedHashFieldResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{9}
}

func (x *CreateFineGrainedHashFieldResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveFineGrainedHashFieldRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveFineGrainedHashFieldRequest) Reset() {
	*x = RemoveFineGrainedHashFieldRequest{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveFineGrainedHashFieldRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFineGrainedHashFieldRequest) ProtoMessage() {}

func (x *RemoveFineGrainedHashFieldRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFineGrainedHashFieldRequest.ProtoReflect.Descriptor instead.
func (*RemoveFineGrainedHashFieldRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveFineGrainedHashFieldRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveFineGrainedHashFieldResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveFineGrainedHashFieldResponse) Reset() {
	*x = RemoveFineGrainedHashFieldResponse{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveFineGrainedHashFieldResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveFineGrainedHashFieldResponse) ProtoMessage() {}

func (x *RemoveFineGrainedHashFieldResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveFineGrainedHashFieldResponse.ProtoReflect.Descriptor instead.
func (*RemoveFineGrainedHashFieldResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{11}
}

type GetFineGrainedHashFieldAttributeRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Oid           uint64                     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType      []FineGrainedHashFieldAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.FineGrainedHashFieldAttr" json:"attr_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFineGrainedHashFieldAttributeRequest) Reset() {
	*x = GetFineGrainedHashFieldAttributeRequest{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFineGrainedHashFieldAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFineGrainedHashFieldAttributeRequest) ProtoMessage() {}

func (x *GetFineGrainedHashFieldAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFineGrainedHashFieldAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetFineGrainedHashFieldAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{12}
}

func (x *GetFineGrainedHashFieldAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetFineGrainedHashFieldAttributeRequest) GetAttrType() []FineGrainedHashFieldAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetFineGrainedHashFieldAttributeResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Attr          *FineGrainedHashFieldAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFineGrainedHashFieldAttributeResponse) Reset() {
	*x = GetFineGrainedHashFieldAttributeResponse{}
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFineGrainedHashFieldAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFineGrainedHashFieldAttributeResponse) ProtoMessage() {}

func (x *GetFineGrainedHashFieldAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_hash_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFineGrainedHashFieldAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetFineGrainedHashFieldAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_hash_proto_rawDescGZIP(), []int{13}
}

func (x *GetFineGrainedHashFieldAttributeResponse) GetAttr() *FineGrainedHashFieldAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_proto_sai_hash_proto protoreflect.FileDescriptor

var file_dataplane_proto_sai_hash_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x02, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x63, 0x0a, 0x16, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x52, 0x13, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0e,
	0x75, 0x64, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x52, 0x0c, 0x75, 0x64,
	0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x1c, 0x66, 0x69,
	0x6e, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x52, 0x18, 0x66, 0x69, 0x6e, 0x65, 0x47, 0x72,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x1d, 0x22, 0x26, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x22, 0x25, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x86, 0x02, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x63, 0x0a,
	0x16, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x52, 0x13, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0e, 0x75, 0x64, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x02, 0x52, 0x0c, 0x75, 0x64, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x1c, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x52, 0x18,
	0x66, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x54, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xe8, 0x02, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x12, 0x5f, 0x0a, 0x11, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00,
	0x52, 0x0f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48,
	0x01, 0x52, 0x08, 0x69, 0x70, 0x76, 0x34, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x02, 0x52, 0x08, 0x69, 0x70, 0x76,
	0x36, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x5f, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x22, 0x36, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x24, 0x0a, 0x22, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x46,
	0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x74, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0x95, 0x01, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x55, 0x44, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x2a,
	0x82, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2c, 0x0a, 0x28,
	0x46, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x48, 0x41, 0x53,
	0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x32, 0x0a, 0x2e, 0x46, 0x49,
	0x4e, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x2a,
	0x0a, 0x26, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x49,
	0x4e, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f,
	0x4d, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x46, 0x49, 0x4e, 0x45, 0x5f, 0x47,
	0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x49, 0x44, 0x10, 0x04, 0x32, 0x92, 0x07, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x63, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e,
	0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xa5, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_dataplane_proto_sai_hash_proto_rawDescOnce sync.Once
	file_dataplane_proto_sai_hash_proto_rawDescData []byte
)

func file_dataplane_proto_sai_hash_proto_rawDescGZIP() []byte {
	file_dataplane_proto_sai_hash_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_sai_hash_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dataplane_proto_sai_hash_proto_rawDesc), len(file_dataplane_proto_sai_hash_proto_rawDesc)))
	})
	return file_dataplane_proto_sai_hash_proto_rawDescData
}

var file_dataplane_proto_sai_hash_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dataplane_proto_sai_hash_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_dataplane_proto_sai_hash_proto_goTypes = []any{
	(HashAttr)(0),                                    // 0: lemming.dataplane.sai.HashAttr
	(FineGrainedHashFieldAttr)(0),                    // 1: lemming.dataplane.sai.FineGrainedHashFieldAttr
	(*CreateHashRequest)(nil),                        // 2: lemming.dataplane.sai.CreateHashRequest
	(*CreateHashResponse)(nil),                       // 3: lemming.dataplane.sai.CreateHashResponse
	(*RemoveHashRequest)(nil),                        // 4: lemming.dataplane.sai.RemoveHashRequest
	(*RemoveHashResponse)(nil),                       // 5: lemming.dataplane.sai.RemoveHashResponse
	(*SetHashAttributeRequest)(nil),                  // 6: lemming.dataplane.sai.SetHashAttributeRequest
	(*SetHashAttributeResponse)(nil),                 // 7: lemming.dataplane.sai.SetHashAttributeResponse
	(*GetHashAttributeRequest)(nil),                  // 8: lemming.dataplane.sai.GetHashAttributeRequest
	(*GetHashAttributeResponse)(nil),                 // 9: lemming.dataplane.sai.GetHashAttributeResponse
	(*CreateFineGrainedHashFieldRequest)(nil),        // 10: lemming.dataplane.sai.CreateFineGrainedHashFieldRequest
	(*CreateFineGrainedHashFieldResponse)(nil),       // 11: lemming.dataplane.sai.CreateFineGrainedHashFieldResponse
	(*RemoveFineGrainedHashFieldRequest)(nil),        // 12: lemming.dataplane.sai.RemoveFineGrainedHashFieldRequest
	(*RemoveFineGrainedHashFieldResponse)(nil),       // 13: lemming.dataplane.sai.RemoveFineGrainedHashFieldResponse
	(*GetFineGrainedHashFieldAttributeRequest)(nil),  // 14: lemming.dataplane.sai.GetFineGrainedHashFieldAttributeRequest
	(*GetFineGrainedHashFieldAttributeResponse)(nil), // 15: lemming.dataplane.sai.GetFineGrainedHashFieldAttributeResponse
	(NativeHashField)(0),                             // 16: lemming.dataplane.sai.NativeHashField
	(*HashAttribute)(nil),                            // 17: lemming.dataplane.sai.HashAttribute
	(*FineGrainedHashFieldAttribute)(nil),            // 18: lemming.dataplane.sai.FineGrainedHashFieldAttribute
}
var file_dataplane_proto_sai_hash_proto_depIdxs = []int32{
	16, // 0: lemming.dataplane.sai.CreateHashRequest.native_hash_field_list:type_name -> lemming.dataplane.sai.NativeHashField
	16, // 1: lemming.dataplane.sai.SetHashAttributeRequest.native_hash_field_list:type_name -> lemming.dataplane.sai.NativeHashField
	0,  // 2: lemming.dataplane.sai.GetHashAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.HashAttr
	17, // 3: lemming.dataplane.sai.GetHashAttributeResponse.attr:type_name -> lemming.dataplane.sai.HashAttribute
	16, // 4: lemming.dataplane.sai.CreateFineGrainedHashFieldRequest.native_hash_field:type_name -> lemming.dataplane.sai.NativeHashField
	1,  // 5: lemming.dataplane.sai.GetFineGrainedHashFieldAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.FineGrainedHashFieldAttr
	18, // 6: lemming.dataplane.sai.GetFineGrainedHashFieldAttributeResponse.attr:type_name -> lemming.dataplane.sai.FineGrainedHashFieldAttribute
	2,  // 7: lemming.dataplane.sai.Hash.CreateHash:input_type -> lemming.dataplane.sai.CreateHashRequest
	4,  // 8: lemming.dataplane.sai.Hash.RemoveHash:input_type -> lemming.dataplane.sai.RemoveHashRequest
	6,  // 9: lemming.dataplane.sai.Hash.SetHashAttribute:input_type -> lemming.dataplane.sai.SetHashAttributeRequest
	8,  // 10: lemming.dataplane.sai.Hash.GetHashAttribute:input_type -> lemming.dataplane.sai.GetHashAttributeRequest
	10, // 11: lemming.dataplane.sai.Hash.CreateFineGrainedHashField:input_type -> lemming.dataplane.sai.CreateFineGrainedHashFieldRequest
	12, // 12: lemming.dataplane.sai.Hash.RemoveFineGrainedHashField:input_type -> lemming.dataplane.sai.RemoveFineGrainedHashFieldRequest
	14, // 13: lemming.dataplane.sai.Hash.GetFineGrainedHashFieldAttribute:input_type -> lemming.dataplane.sai.GetFineGrainedHashFieldAttributeRequest
	3,  // 14: lemming.dataplane.sai.Hash.CreateHash:output_type -> lemming.dataplane.sai.CreateHashResponse
	5,  // 15: lemming.dataplane.sai.Hash.RemoveHash:output_type -> lemming.dataplane.sai.RemoveHashResponse
	7,  // 16: lemming.dataplane.sai.Hash.SetHashAttribute:output_type -> lemming.dataplane.sai.SetHashAttributeResponse
	9,  // 17: lemming.dataplane.sai.Hash.GetHashAttribute:output_type -> lemming.dataplane.sai.GetHashAttributeResponse
	11, // 18: lemming.dataplane.sai.Hash.CreateFineGrainedHashField:output_type -> lemming.dataplane.sai.CreateFineGrainedHashFieldResponse
	13, // 19: lemming.dataplane.sai.Hash.RemoveFineGrainedHashField:output_type -> lemming.dataplane.sai.RemoveFineGrainedHashFieldResponse
	15, // 20: lemming.dataplane.sai.Hash.GetFineGrainedHashFieldAttribute:output_type -> lemming.dataplane.sai.GetFineGrainedHashFieldAttributeResponse
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_dataplane_proto_sai_hash_proto_init() }
func file_dataplane_proto_sai_hash_proto_init() {
	if File_dataplane_proto_sai_hash_proto != nil {
		return
	}
	file_dataplane_proto_sai_common_proto_init()
	file_dataplane_proto_sai_hash_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dataplane_proto_sai_hash_proto_rawDesc), len(file_dataplane_proto_sai_hash_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_sai_hash_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_sai_hash_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_sai_hash_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_sai_hash_proto_msgTypes,
	}.Build()
	File_dataplane_proto_sai_hash_proto = out.File
	file_dataplane_proto_sai_hash_proto_goTypes = nil
	file_dataplane_proto_sai_hash_proto_depIdxs = nil
}
