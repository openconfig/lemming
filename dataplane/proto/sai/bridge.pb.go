// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/proto/sai/bridge.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BridgeAttr int32

const (
	BridgeAttr_BRIDGE_ATTR_UNSPECIFIED                          BridgeAttr = 0
	BridgeAttr_BRIDGE_ATTR_TYPE                                 BridgeAttr = 1
	BridgeAttr_BRIDGE_ATTR_PORT_LIST                            BridgeAttr = 2
	BridgeAttr_BRIDGE_ATTR_MAX_LEARNED_ADDRESSES                BridgeAttr = 3
	BridgeAttr_BRIDGE_ATTR_LEARN_DISABLE                        BridgeAttr = 4
	BridgeAttr_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE   BridgeAttr = 5
	BridgeAttr_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP          BridgeAttr = 6
	BridgeAttr_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE BridgeAttr = 7
	BridgeAttr_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP        BridgeAttr = 8
	BridgeAttr_BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE         BridgeAttr = 9
	BridgeAttr_BRIDGE_ATTR_BROADCAST_FLOOD_GROUP                BridgeAttr = 10
)

// Enum value maps for BridgeAttr.
var (
	BridgeAttr_name = map[int32]string{
		0:  "BRIDGE_ATTR_UNSPECIFIED",
		1:  "BRIDGE_ATTR_TYPE",
		2:  "BRIDGE_ATTR_PORT_LIST",
		3:  "BRIDGE_ATTR_MAX_LEARNED_ADDRESSES",
		4:  "BRIDGE_ATTR_LEARN_DISABLE",
		5:  "BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE",
		6:  "BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP",
		7:  "BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE",
		8:  "BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP",
		9:  "BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE",
		10: "BRIDGE_ATTR_BROADCAST_FLOOD_GROUP",
	}
	BridgeAttr_value = map[string]int32{
		"BRIDGE_ATTR_UNSPECIFIED":                          0,
		"BRIDGE_ATTR_TYPE":                                 1,
		"BRIDGE_ATTR_PORT_LIST":                            2,
		"BRIDGE_ATTR_MAX_LEARNED_ADDRESSES":                3,
		"BRIDGE_ATTR_LEARN_DISABLE":                        4,
		"BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE":   5,
		"BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP":          6,
		"BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE": 7,
		"BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP":        8,
		"BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE":         9,
		"BRIDGE_ATTR_BROADCAST_FLOOD_GROUP":                10,
	}
)

func (x BridgeAttr) Enum() *BridgeAttr {
	p := new(BridgeAttr)
	*p = x
	return p
}

func (x BridgeAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgeAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_bridge_proto_enumTypes[0].Descriptor()
}

func (BridgeAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_bridge_proto_enumTypes[0]
}

func (x BridgeAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgeAttr.Descriptor instead.
func (BridgeAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{0}
}

type BridgePortAttr int32

const (
	BridgePortAttr_BRIDGE_PORT_ATTR_UNSPECIFIED                                BridgePortAttr = 0
	BridgePortAttr_BRIDGE_PORT_ATTR_TYPE                                       BridgePortAttr = 1
	BridgePortAttr_BRIDGE_PORT_ATTR_PORT_ID                                    BridgePortAttr = 2
	BridgePortAttr_BRIDGE_PORT_ATTR_TAGGING_MODE                               BridgePortAttr = 3
	BridgePortAttr_BRIDGE_PORT_ATTR_VLAN_ID                                    BridgePortAttr = 4
	BridgePortAttr_BRIDGE_PORT_ATTR_RIF_ID                                     BridgePortAttr = 5
	BridgePortAttr_BRIDGE_PORT_ATTR_TUNNEL_ID                                  BridgePortAttr = 6
	BridgePortAttr_BRIDGE_PORT_ATTR_BRIDGE_ID                                  BridgePortAttr = 7
	BridgePortAttr_BRIDGE_PORT_ATTR_FDB_LEARNING_MODE                          BridgePortAttr = 8
	BridgePortAttr_BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES                      BridgePortAttr = 9
	BridgePortAttr_BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION BridgePortAttr = 10
	BridgePortAttr_BRIDGE_PORT_ATTR_ADMIN_STATE                                BridgePortAttr = 11
	BridgePortAttr_BRIDGE_PORT_ATTR_INGRESS_FILTERING                          BridgePortAttr = 12
	BridgePortAttr_BRIDGE_PORT_ATTR_EGRESS_FILTERING                           BridgePortAttr = 13
	BridgePortAttr_BRIDGE_PORT_ATTR_ISOLATION_GROUP                            BridgePortAttr = 14
)

// Enum value maps for BridgePortAttr.
var (
	BridgePortAttr_name = map[int32]string{
		0:  "BRIDGE_PORT_ATTR_UNSPECIFIED",
		1:  "BRIDGE_PORT_ATTR_TYPE",
		2:  "BRIDGE_PORT_ATTR_PORT_ID",
		3:  "BRIDGE_PORT_ATTR_TAGGING_MODE",
		4:  "BRIDGE_PORT_ATTR_VLAN_ID",
		5:  "BRIDGE_PORT_ATTR_RIF_ID",
		6:  "BRIDGE_PORT_ATTR_TUNNEL_ID",
		7:  "BRIDGE_PORT_ATTR_BRIDGE_ID",
		8:  "BRIDGE_PORT_ATTR_FDB_LEARNING_MODE",
		9:  "BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES",
		10: "BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION",
		11: "BRIDGE_PORT_ATTR_ADMIN_STATE",
		12: "BRIDGE_PORT_ATTR_INGRESS_FILTERING",
		13: "BRIDGE_PORT_ATTR_EGRESS_FILTERING",
		14: "BRIDGE_PORT_ATTR_ISOLATION_GROUP",
	}
	BridgePortAttr_value = map[string]int32{
		"BRIDGE_PORT_ATTR_UNSPECIFIED":                                0,
		"BRIDGE_PORT_ATTR_TYPE":                                       1,
		"BRIDGE_PORT_ATTR_PORT_ID":                                    2,
		"BRIDGE_PORT_ATTR_TAGGING_MODE":                               3,
		"BRIDGE_PORT_ATTR_VLAN_ID":                                    4,
		"BRIDGE_PORT_ATTR_RIF_ID":                                     5,
		"BRIDGE_PORT_ATTR_TUNNEL_ID":                                  6,
		"BRIDGE_PORT_ATTR_BRIDGE_ID":                                  7,
		"BRIDGE_PORT_ATTR_FDB_LEARNING_MODE":                          8,
		"BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES":                      9,
		"BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION": 10,
		"BRIDGE_PORT_ATTR_ADMIN_STATE":                                11,
		"BRIDGE_PORT_ATTR_INGRESS_FILTERING":                          12,
		"BRIDGE_PORT_ATTR_EGRESS_FILTERING":                           13,
		"BRIDGE_PORT_ATTR_ISOLATION_GROUP":                            14,
	}
)

func (x BridgePortAttr) Enum() *BridgePortAttr {
	p := new(BridgePortAttr)
	*p = x
	return p
}

func (x BridgePortAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgePortAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_bridge_proto_enumTypes[1].Descriptor()
}

func (BridgePortAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_bridge_proto_enumTypes[1]
}

func (x BridgePortAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgePortAttr.Descriptor instead.
func (BridgePortAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{1}
}

type CreateBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                           uint64                  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type                             *BridgeType             `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.BridgeType,oneof" json:"type,omitempty"`
	MaxLearnedAddresses              *uint32                 `protobuf:"varint,3,opt,name=max_learned_addresses,json=maxLearnedAddresses,proto3,oneof" json:"max_learned_addresses,omitempty"`
	LearnDisable                     *bool                   `protobuf:"varint,4,opt,name=learn_disable,json=learnDisable,proto3,oneof" json:"learn_disable,omitempty"`
	UnknownUnicastFloodControlType   *BridgeFloodControlType `protobuf:"varint,5,opt,name=unknown_unicast_flood_control_type,json=unknownUnicastFloodControlType,proto3,enum=lemming.dataplane.sai.BridgeFloodControlType,oneof" json:"unknown_unicast_flood_control_type,omitempty"`
	UnknownUnicastFloodGroup         *uint64                 `protobuf:"varint,6,opt,name=unknown_unicast_flood_group,json=unknownUnicastFloodGroup,proto3,oneof" json:"unknown_unicast_flood_group,omitempty"`
	UnknownMulticastFloodControlType *BridgeFloodControlType `protobuf:"varint,7,opt,name=unknown_multicast_flood_control_type,json=unknownMulticastFloodControlType,proto3,enum=lemming.dataplane.sai.BridgeFloodControlType,oneof" json:"unknown_multicast_flood_control_type,omitempty"`
	UnknownMulticastFloodGroup       *uint64                 `protobuf:"varint,8,opt,name=unknown_multicast_flood_group,json=unknownMulticastFloodGroup,proto3,oneof" json:"unknown_multicast_flood_group,omitempty"`
	BroadcastFloodControlType        *BridgeFloodControlType `protobuf:"varint,9,opt,name=broadcast_flood_control_type,json=broadcastFloodControlType,proto3,enum=lemming.dataplane.sai.BridgeFloodControlType,oneof" json:"broadcast_flood_control_type,omitempty"`
	BroadcastFloodGroup              *uint64                 `protobuf:"varint,10,opt,name=broadcast_flood_group,json=broadcastFloodGroup,proto3,oneof" json:"broadcast_flood_group,omitempty"`
}

func (x *CreateBridgeRequest) Reset() {
	*x = CreateBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBridgeRequest) ProtoMessage() {}

func (x *CreateBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBridgeRequest.ProtoReflect.Descriptor instead.
func (*CreateBridgeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBridgeRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateBridgeRequest) GetType() BridgeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return BridgeType_BRIDGE_TYPE_UNSPECIFIED
}

func (x *CreateBridgeRequest) GetMaxLearnedAddresses() uint32 {
	if x != nil && x.MaxLearnedAddresses != nil {
		return *x.MaxLearnedAddresses
	}
	return 0
}

func (x *CreateBridgeRequest) GetLearnDisable() bool {
	if x != nil && x.LearnDisable != nil {
		return *x.LearnDisable
	}
	return false
}

func (x *CreateBridgeRequest) GetUnknownUnicastFloodControlType() BridgeFloodControlType {
	if x != nil && x.UnknownUnicastFloodControlType != nil {
		return *x.UnknownUnicastFloodControlType
	}
	return BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *CreateBridgeRequest) GetUnknownUnicastFloodGroup() uint64 {
	if x != nil && x.UnknownUnicastFloodGroup != nil {
		return *x.UnknownUnicastFloodGroup
	}
	return 0
}

func (x *CreateBridgeRequest) GetUnknownMulticastFloodControlType() BridgeFloodControlType {
	if x != nil && x.UnknownMulticastFloodControlType != nil {
		return *x.UnknownMulticastFloodControlType
	}
	return BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *CreateBridgeRequest) GetUnknownMulticastFloodGroup() uint64 {
	if x != nil && x.UnknownMulticastFloodGroup != nil {
		return *x.UnknownMulticastFloodGroup
	}
	return 0
}

func (x *CreateBridgeRequest) GetBroadcastFloodControlType() BridgeFloodControlType {
	if x != nil && x.BroadcastFloodControlType != nil {
		return *x.BroadcastFloodControlType
	}
	return BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *CreateBridgeRequest) GetBroadcastFloodGroup() uint64 {
	if x != nil && x.BroadcastFloodGroup != nil {
		return *x.BroadcastFloodGroup
	}
	return 0
}

type CreateBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateBridgeResponse) Reset() {
	*x = CreateBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBridgeResponse) ProtoMessage() {}

func (x *CreateBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBridgeResponse.ProtoReflect.Descriptor instead.
func (*CreateBridgeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBridgeResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveBridgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveBridgeRequest) Reset() {
	*x = RemoveBridgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBridgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBridgeRequest) ProtoMessage() {}

func (x *RemoveBridgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBridgeRequest.ProtoReflect.Descriptor instead.
func (*RemoveBridgeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveBridgeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveBridgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveBridgeResponse) Reset() {
	*x = RemoveBridgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBridgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBridgeResponse) ProtoMessage() {}

func (x *RemoveBridgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBridgeResponse.ProtoReflect.Descriptor instead.
func (*RemoveBridgeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{3}
}

type SetBridgeAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                              uint64                  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	MaxLearnedAddresses              *uint32                 `protobuf:"varint,2,opt,name=max_learned_addresses,json=maxLearnedAddresses,proto3,oneof" json:"max_learned_addresses,omitempty"`
	LearnDisable                     *bool                   `protobuf:"varint,3,opt,name=learn_disable,json=learnDisable,proto3,oneof" json:"learn_disable,omitempty"`
	UnknownUnicastFloodControlType   *BridgeFloodControlType `protobuf:"varint,4,opt,name=unknown_unicast_flood_control_type,json=unknownUnicastFloodControlType,proto3,enum=lemming.dataplane.sai.BridgeFloodControlType,oneof" json:"unknown_unicast_flood_control_type,omitempty"`
	UnknownUnicastFloodGroup         *uint64                 `protobuf:"varint,5,opt,name=unknown_unicast_flood_group,json=unknownUnicastFloodGroup,proto3,oneof" json:"unknown_unicast_flood_group,omitempty"`
	UnknownMulticastFloodControlType *BridgeFloodControlType `protobuf:"varint,6,opt,name=unknown_multicast_flood_control_type,json=unknownMulticastFloodControlType,proto3,enum=lemming.dataplane.sai.BridgeFloodControlType,oneof" json:"unknown_multicast_flood_control_type,omitempty"`
	UnknownMulticastFloodGroup       *uint64                 `protobuf:"varint,7,opt,name=unknown_multicast_flood_group,json=unknownMulticastFloodGroup,proto3,oneof" json:"unknown_multicast_flood_group,omitempty"`
	BroadcastFloodControlType        *BridgeFloodControlType `protobuf:"varint,8,opt,name=broadcast_flood_control_type,json=broadcastFloodControlType,proto3,enum=lemming.dataplane.sai.BridgeFloodControlType,oneof" json:"broadcast_flood_control_type,omitempty"`
	BroadcastFloodGroup              *uint64                 `protobuf:"varint,9,opt,name=broadcast_flood_group,json=broadcastFloodGroup,proto3,oneof" json:"broadcast_flood_group,omitempty"`
}

func (x *SetBridgeAttributeRequest) Reset() {
	*x = SetBridgeAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBridgeAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBridgeAttributeRequest) ProtoMessage() {}

func (x *SetBridgeAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBridgeAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetBridgeAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{4}
}

func (x *SetBridgeAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetBridgeAttributeRequest) GetMaxLearnedAddresses() uint32 {
	if x != nil && x.MaxLearnedAddresses != nil {
		return *x.MaxLearnedAddresses
	}
	return 0
}

func (x *SetBridgeAttributeRequest) GetLearnDisable() bool {
	if x != nil && x.LearnDisable != nil {
		return *x.LearnDisable
	}
	return false
}

func (x *SetBridgeAttributeRequest) GetUnknownUnicastFloodControlType() BridgeFloodControlType {
	if x != nil && x.UnknownUnicastFloodControlType != nil {
		return *x.UnknownUnicastFloodControlType
	}
	return BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *SetBridgeAttributeRequest) GetUnknownUnicastFloodGroup() uint64 {
	if x != nil && x.UnknownUnicastFloodGroup != nil {
		return *x.UnknownUnicastFloodGroup
	}
	return 0
}

func (x *SetBridgeAttributeRequest) GetUnknownMulticastFloodControlType() BridgeFloodControlType {
	if x != nil && x.UnknownMulticastFloodControlType != nil {
		return *x.UnknownMulticastFloodControlType
	}
	return BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *SetBridgeAttributeRequest) GetUnknownMulticastFloodGroup() uint64 {
	if x != nil && x.UnknownMulticastFloodGroup != nil {
		return *x.UnknownMulticastFloodGroup
	}
	return 0
}

func (x *SetBridgeAttributeRequest) GetBroadcastFloodControlType() BridgeFloodControlType {
	if x != nil && x.BroadcastFloodControlType != nil {
		return *x.BroadcastFloodControlType
	}
	return BridgeFloodControlType_BRIDGE_FLOOD_CONTROL_TYPE_UNSPECIFIED
}

func (x *SetBridgeAttributeRequest) GetBroadcastFloodGroup() uint64 {
	if x != nil && x.BroadcastFloodGroup != nil {
		return *x.BroadcastFloodGroup
	}
	return 0
}

type SetBridgeAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBridgeAttributeResponse) Reset() {
	*x = SetBridgeAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBridgeAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBridgeAttributeResponse) ProtoMessage() {}

func (x *SetBridgeAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBridgeAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetBridgeAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{5}
}

type GetBridgeAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []BridgeAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.BridgeAttr" json:"attr_type,omitempty"`
}

func (x *GetBridgeAttributeRequest) Reset() {
	*x = GetBridgeAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgeAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgeAttributeRequest) ProtoMessage() {}

func (x *GetBridgeAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgeAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetBridgeAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{6}
}

func (x *GetBridgeAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetBridgeAttributeRequest) GetAttrType() []BridgeAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetBridgeAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *BridgeAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetBridgeAttributeResponse) Reset() {
	*x = GetBridgeAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgeAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgeAttributeResponse) ProtoMessage() {}

func (x *GetBridgeAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgeAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetBridgeAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{7}
}

func (x *GetBridgeAttributeResponse) GetAttr() *BridgeAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type GetBridgeStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CounterIds []BridgeStat `protobuf:"varint,2,rep,packed,name=counter_ids,json=counterIds,proto3,enum=lemming.dataplane.sai.BridgeStat" json:"counter_ids,omitempty"`
}

func (x *GetBridgeStatsRequest) Reset() {
	*x = GetBridgeStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgeStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgeStatsRequest) ProtoMessage() {}

func (x *GetBridgeStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgeStatsRequest.ProtoReflect.Descriptor instead.
func (*GetBridgeStatsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{8}
}

func (x *GetBridgeStatsRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetBridgeStatsRequest) GetCounterIds() []BridgeStat {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

type GetBridgeStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *GetBridgeStatsResponse) Reset() {
	*x = GetBridgeStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgeStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgeStatsResponse) ProtoMessage() {}

func (x *GetBridgeStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgeStatsResponse.ProtoReflect.Descriptor instead.
func (*GetBridgeStatsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{9}
}

func (x *GetBridgeStatsResponse) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type CreateBridgePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                                uint64                     `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type                                  *BridgePortType            `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.BridgePortType,oneof" json:"type,omitempty"`
	PortId                                *uint64                    `protobuf:"varint,3,opt,name=port_id,json=portId,proto3,oneof" json:"port_id,omitempty"`
	TaggingMode                           *BridgePortTaggingMode     `protobuf:"varint,4,opt,name=tagging_mode,json=taggingMode,proto3,enum=lemming.dataplane.sai.BridgePortTaggingMode,oneof" json:"tagging_mode,omitempty"`
	VlanId                                *uint32                    `protobuf:"varint,5,opt,name=vlan_id,json=vlanId,proto3,oneof" json:"vlan_id,omitempty"`
	RifId                                 *uint64                    `protobuf:"varint,6,opt,name=rif_id,json=rifId,proto3,oneof" json:"rif_id,omitempty"`
	TunnelId                              *uint64                    `protobuf:"varint,7,opt,name=tunnel_id,json=tunnelId,proto3,oneof" json:"tunnel_id,omitempty"`
	BridgeId                              *uint64                    `protobuf:"varint,8,opt,name=bridge_id,json=bridgeId,proto3,oneof" json:"bridge_id,omitempty"`
	FdbLearningMode                       *BridgePortFdbLearningMode `protobuf:"varint,9,opt,name=fdb_learning_mode,json=fdbLearningMode,proto3,enum=lemming.dataplane.sai.BridgePortFdbLearningMode,oneof" json:"fdb_learning_mode,omitempty"`
	MaxLearnedAddresses                   *uint32                    `protobuf:"varint,10,opt,name=max_learned_addresses,json=maxLearnedAddresses,proto3,oneof" json:"max_learned_addresses,omitempty"`
	FdbLearningLimitViolationPacketAction *PacketAction              `protobuf:"varint,11,opt,name=fdb_learning_limit_violation_packet_action,json=fdbLearningLimitViolationPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"fdb_learning_limit_violation_packet_action,omitempty"`
	AdminState                            *bool                      `protobuf:"varint,12,opt,name=admin_state,json=adminState,proto3,oneof" json:"admin_state,omitempty"`
	IngressFiltering                      *bool                      `protobuf:"varint,13,opt,name=ingress_filtering,json=ingressFiltering,proto3,oneof" json:"ingress_filtering,omitempty"`
	EgressFiltering                       *bool                      `protobuf:"varint,14,opt,name=egress_filtering,json=egressFiltering,proto3,oneof" json:"egress_filtering,omitempty"`
	IsolationGroup                        *uint64                    `protobuf:"varint,15,opt,name=isolation_group,json=isolationGroup,proto3,oneof" json:"isolation_group,omitempty"`
}

func (x *CreateBridgePortRequest) Reset() {
	*x = CreateBridgePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBridgePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBridgePortRequest) ProtoMessage() {}

func (x *CreateBridgePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBridgePortRequest.ProtoReflect.Descriptor instead.
func (*CreateBridgePortRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{10}
}

func (x *CreateBridgePortRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateBridgePortRequest) GetType() BridgePortType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return BridgePortType_BRIDGE_PORT_TYPE_UNSPECIFIED
}

func (x *CreateBridgePortRequest) GetPortId() uint64 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

func (x *CreateBridgePortRequest) GetTaggingMode() BridgePortTaggingMode {
	if x != nil && x.TaggingMode != nil {
		return *x.TaggingMode
	}
	return BridgePortTaggingMode_BRIDGE_PORT_TAGGING_MODE_UNSPECIFIED
}

func (x *CreateBridgePortRequest) GetVlanId() uint32 {
	if x != nil && x.VlanId != nil {
		return *x.VlanId
	}
	return 0
}

func (x *CreateBridgePortRequest) GetRifId() uint64 {
	if x != nil && x.RifId != nil {
		return *x.RifId
	}
	return 0
}

func (x *CreateBridgePortRequest) GetTunnelId() uint64 {
	if x != nil && x.TunnelId != nil {
		return *x.TunnelId
	}
	return 0
}

func (x *CreateBridgePortRequest) GetBridgeId() uint64 {
	if x != nil && x.BridgeId != nil {
		return *x.BridgeId
	}
	return 0
}

func (x *CreateBridgePortRequest) GetFdbLearningMode() BridgePortFdbLearningMode {
	if x != nil && x.FdbLearningMode != nil {
		return *x.FdbLearningMode
	}
	return BridgePortFdbLearningMode_BRIDGE_PORT_FDB_LEARNING_MODE_UNSPECIFIED
}

func (x *CreateBridgePortRequest) GetMaxLearnedAddresses() uint32 {
	if x != nil && x.MaxLearnedAddresses != nil {
		return *x.MaxLearnedAddresses
	}
	return 0
}

func (x *CreateBridgePortRequest) GetFdbLearningLimitViolationPacketAction() PacketAction {
	if x != nil && x.FdbLearningLimitViolationPacketAction != nil {
		return *x.FdbLearningLimitViolationPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateBridgePortRequest) GetAdminState() bool {
	if x != nil && x.AdminState != nil {
		return *x.AdminState
	}
	return false
}

func (x *CreateBridgePortRequest) GetIngressFiltering() bool {
	if x != nil && x.IngressFiltering != nil {
		return *x.IngressFiltering
	}
	return false
}

func (x *CreateBridgePortRequest) GetEgressFiltering() bool {
	if x != nil && x.EgressFiltering != nil {
		return *x.EgressFiltering
	}
	return false
}

func (x *CreateBridgePortRequest) GetIsolationGroup() uint64 {
	if x != nil && x.IsolationGroup != nil {
		return *x.IsolationGroup
	}
	return 0
}

type CreateBridgePortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateBridgePortResponse) Reset() {
	*x = CreateBridgePortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBridgePortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBridgePortResponse) ProtoMessage() {}

func (x *CreateBridgePortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBridgePortResponse.ProtoReflect.Descriptor instead.
func (*CreateBridgePortResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{11}
}

func (x *CreateBridgePortResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveBridgePortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveBridgePortRequest) Reset() {
	*x = RemoveBridgePortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBridgePortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBridgePortRequest) ProtoMessage() {}

func (x *RemoveBridgePortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBridgePortRequest.ProtoReflect.Descriptor instead.
func (*RemoveBridgePortRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{12}
}

func (x *RemoveBridgePortRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveBridgePortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveBridgePortResponse) Reset() {
	*x = RemoveBridgePortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBridgePortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBridgePortResponse) ProtoMessage() {}

func (x *RemoveBridgePortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBridgePortResponse.ProtoReflect.Descriptor instead.
func (*RemoveBridgePortResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{13}
}

type SetBridgePortAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                                   uint64                     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	TaggingMode                           *BridgePortTaggingMode     `protobuf:"varint,2,opt,name=tagging_mode,json=taggingMode,proto3,enum=lemming.dataplane.sai.BridgePortTaggingMode,oneof" json:"tagging_mode,omitempty"`
	BridgeId                              *uint64                    `protobuf:"varint,3,opt,name=bridge_id,json=bridgeId,proto3,oneof" json:"bridge_id,omitempty"`
	FdbLearningMode                       *BridgePortFdbLearningMode `protobuf:"varint,4,opt,name=fdb_learning_mode,json=fdbLearningMode,proto3,enum=lemming.dataplane.sai.BridgePortFdbLearningMode,oneof" json:"fdb_learning_mode,omitempty"`
	MaxLearnedAddresses                   *uint32                    `protobuf:"varint,5,opt,name=max_learned_addresses,json=maxLearnedAddresses,proto3,oneof" json:"max_learned_addresses,omitempty"`
	FdbLearningLimitViolationPacketAction *PacketAction              `protobuf:"varint,6,opt,name=fdb_learning_limit_violation_packet_action,json=fdbLearningLimitViolationPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"fdb_learning_limit_violation_packet_action,omitempty"`
	AdminState                            *bool                      `protobuf:"varint,7,opt,name=admin_state,json=adminState,proto3,oneof" json:"admin_state,omitempty"`
	IngressFiltering                      *bool                      `protobuf:"varint,8,opt,name=ingress_filtering,json=ingressFiltering,proto3,oneof" json:"ingress_filtering,omitempty"`
	EgressFiltering                       *bool                      `protobuf:"varint,9,opt,name=egress_filtering,json=egressFiltering,proto3,oneof" json:"egress_filtering,omitempty"`
	IsolationGroup                        *uint64                    `protobuf:"varint,10,opt,name=isolation_group,json=isolationGroup,proto3,oneof" json:"isolation_group,omitempty"`
}

func (x *SetBridgePortAttributeRequest) Reset() {
	*x = SetBridgePortAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBridgePortAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBridgePortAttributeRequest) ProtoMessage() {}

func (x *SetBridgePortAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBridgePortAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetBridgePortAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{14}
}

func (x *SetBridgePortAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetBridgePortAttributeRequest) GetTaggingMode() BridgePortTaggingMode {
	if x != nil && x.TaggingMode != nil {
		return *x.TaggingMode
	}
	return BridgePortTaggingMode_BRIDGE_PORT_TAGGING_MODE_UNSPECIFIED
}

func (x *SetBridgePortAttributeRequest) GetBridgeId() uint64 {
	if x != nil && x.BridgeId != nil {
		return *x.BridgeId
	}
	return 0
}

func (x *SetBridgePortAttributeRequest) GetFdbLearningMode() BridgePortFdbLearningMode {
	if x != nil && x.FdbLearningMode != nil {
		return *x.FdbLearningMode
	}
	return BridgePortFdbLearningMode_BRIDGE_PORT_FDB_LEARNING_MODE_UNSPECIFIED
}

func (x *SetBridgePortAttributeRequest) GetMaxLearnedAddresses() uint32 {
	if x != nil && x.MaxLearnedAddresses != nil {
		return *x.MaxLearnedAddresses
	}
	return 0
}

func (x *SetBridgePortAttributeRequest) GetFdbLearningLimitViolationPacketAction() PacketAction {
	if x != nil && x.FdbLearningLimitViolationPacketAction != nil {
		return *x.FdbLearningLimitViolationPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetBridgePortAttributeRequest) GetAdminState() bool {
	if x != nil && x.AdminState != nil {
		return *x.AdminState
	}
	return false
}

func (x *SetBridgePortAttributeRequest) GetIngressFiltering() bool {
	if x != nil && x.IngressFiltering != nil {
		return *x.IngressFiltering
	}
	return false
}

func (x *SetBridgePortAttributeRequest) GetEgressFiltering() bool {
	if x != nil && x.EgressFiltering != nil {
		return *x.EgressFiltering
	}
	return false
}

func (x *SetBridgePortAttributeRequest) GetIsolationGroup() uint64 {
	if x != nil && x.IsolationGroup != nil {
		return *x.IsolationGroup
	}
	return 0
}

type SetBridgePortAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBridgePortAttributeResponse) Reset() {
	*x = SetBridgePortAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBridgePortAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBridgePortAttributeResponse) ProtoMessage() {}

func (x *SetBridgePortAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBridgePortAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetBridgePortAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{15}
}

type GetBridgePortAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64           `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []BridgePortAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.BridgePortAttr" json:"attr_type,omitempty"`
}

func (x *GetBridgePortAttributeRequest) Reset() {
	*x = GetBridgePortAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgePortAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgePortAttributeRequest) ProtoMessage() {}

func (x *GetBridgePortAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgePortAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetBridgePortAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{16}
}

func (x *GetBridgePortAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetBridgePortAttributeRequest) GetAttrType() []BridgePortAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetBridgePortAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *BridgePortAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetBridgePortAttributeResponse) Reset() {
	*x = GetBridgePortAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgePortAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgePortAttributeResponse) ProtoMessage() {}

func (x *GetBridgePortAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgePortAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetBridgePortAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{17}
}

func (x *GetBridgePortAttributeResponse) GetAttr() *BridgePortAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type GetBridgePortStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64           `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CounterIds []BridgePortStat `protobuf:"varint,2,rep,packed,name=counter_ids,json=counterIds,proto3,enum=lemming.dataplane.sai.BridgePortStat" json:"counter_ids,omitempty"`
}

func (x *GetBridgePortStatsRequest) Reset() {
	*x = GetBridgePortStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgePortStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgePortStatsRequest) ProtoMessage() {}

func (x *GetBridgePortStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgePortStatsRequest.ProtoReflect.Descriptor instead.
func (*GetBridgePortStatsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{18}
}

func (x *GetBridgePortStatsRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetBridgePortStatsRequest) GetCounterIds() []BridgePortStat {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

type GetBridgePortStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *GetBridgePortStatsResponse) Reset() {
	*x = GetBridgePortStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBridgePortStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBridgePortStatsResponse) ProtoMessage() {}

func (x *GetBridgePortStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bridge_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBridgePortStatsResponse.ProtoReflect.Descriptor instead.
func (*GetBridgePortStatsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bridge_proto_rawDescGZIP(), []int{19}
}

func (x *GetBridgePortStatsResponse) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_dataplane_proto_sai_bridge_proto protoreflect.FileDescriptor

var file_dataplane_proto_sai_bridge_proto_rawDesc = []byte{
	0x0a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x08, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x01, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48,
	0x02, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x05, 0x48, 0x03, 0x52, 0x1e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x1b, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x06, 0x48, 0x04, 0x52, 0x18, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x24, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c,
	0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x05, 0x52,
	0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x1d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93,
	0xad, 0x0f, 0x08, 0x48, 0x06, 0x52, 0x1a, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x1c, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f,
	0x09, 0x48, 0x07, 0x52, 0x19, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x15, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0a, 0x48, 0x08, 0x52, 0x13, 0x62, 0x72, 0x6f, 0x61,
	0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88,
	0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x3a, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x25, 0x0a, 0x23, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x27, 0x0a, 0x25, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x20, 0x0a, 0x1e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x28, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x16, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x08, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x00,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x01, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x22, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x05, 0x48, 0x02,
	0x52, 0x1e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x1b, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x06,
	0x48, 0x03, 0x52, 0x18, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x8a, 0x01, 0x0a, 0x24, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x04, 0x52, 0x20, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x1d,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x08, 0x48, 0x05, 0x52, 0x1a, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x46,
	0x6c, 0x6f, 0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x7b, 0x0a, 0x1c,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x09, 0x48, 0x06, 0x52, 0x19, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x15, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0a,
	0x48, 0x07, 0x52, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x46, 0x6c, 0x6f,
	0x6f, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1e, 0x0a,
	0x1c, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x27, 0x0a,
	0x25, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x12, 0x3e, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x58, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x6d, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xba, 0x09, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12,
	0x46, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02,
	0x48, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a,
	0x0c, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x02, 0x52, 0x0b, 0x74, 0x61, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x07, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x04, 0x48, 0x03, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x69, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x05, 0x48, 0x04, 0x52, 0x05, 0x72, 0x69, 0x66,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x06,
	0x48, 0x05, 0x52, 0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x06, 0x52, 0x08, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x11, 0x66, 0x64, 0x62,
	0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x64, 0x62, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x08, 0x48, 0x07,
	0x52, 0x0f, 0x66, 0x64, 0x62, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x09, 0x48, 0x08, 0x52, 0x13, 0x6d,
	0x61, 0x78, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x2a, 0x66, 0x64, 0x62, 0x5f, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0a, 0x48, 0x09, 0x52, 0x25, 0x66, 0x64, 0x62, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0b,
	0x48, 0x0a, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x38, 0x0a, 0x11, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x0c, 0x48, 0x0b, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x10, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0d, 0x48, 0x0c, 0x52,
	0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x0e, 0x48, 0x0d, 0x52, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f,
	0x3b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x69, 0x66, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66,
	0x64, 0x62, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x2d, 0x0a, 0x2b, 0x5f, 0x66,
	0x64, 0x62, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x96, 0x07, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x0c, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x28, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x01, 0x52, 0x08,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x69, 0x0a, 0x11, 0x66,
	0x64, 0x62, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x64, 0x62, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x08,
	0x48, 0x02, 0x52, 0x0f, 0x66, 0x64, 0x62, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x09, 0x48, 0x03, 0x52,
	0x13, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x2a, 0x66, 0x64, 0x62, 0x5f,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0a, 0x48, 0x04, 0x52, 0x25, 0x66, 0x64, 0x62,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x0b, 0x48, 0x05, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x11, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0c, 0x48, 0x06, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x10, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0d, 0x48,
	0x07, 0x52, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0e, 0x48, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x66,
	0x64, 0x62, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x42, 0x2d, 0x0a, 0x2b, 0x5f, 0x66,
	0x64, 0x62, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x60, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x22, 0x75, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x2a, 0xbb, 0x03, 0x0a, 0x0a, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x1b, 0x0a, 0x17, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x25, 0x0a,
	0x21, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58,
	0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x45, 0x53, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x52, 0x49, 0x44, 0x47,
	0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x55,
	0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x10, 0x06, 0x12, 0x34, 0x0a, 0x30, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x2d, 0x0a, 0x29, 0x42, 0x52,
	0x49, 0x44, 0x47, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x4f,
	0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x08, 0x12, 0x2c, 0x0a, 0x28, 0x42, 0x52, 0x49,
	0x44, 0x47, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x09, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x52, 0x49, 0x44, 0x47,
	0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x0a, 0x2a, 0xb5,
	0x04, 0x0a, 0x0e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x54, 0x41, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x52, 0x49, 0x46, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x52,
	0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x52,
	0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x42,
	0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x52,
	0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46,
	0x44, 0x42, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x10, 0x08, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e,
	0x45, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x10, 0x09, 0x12, 0x3f,
	0x0a, 0x3b, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x46, 0x44, 0x42, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12,
	0x20, 0x0a, 0x1c, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x0b, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x25, 0x0a, 0x21, 0x42, 0x52, 0x49,
	0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x45, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0d,
	0x12, 0x24, 0x0a, 0x20, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x0e, 0x32, 0xc8, 0x09, 0x0a, 0x06, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x12, 0x69, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0c,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x42, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x87, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_proto_sai_bridge_proto_rawDescOnce sync.Once
	file_dataplane_proto_sai_bridge_proto_rawDescData = file_dataplane_proto_sai_bridge_proto_rawDesc
)

func file_dataplane_proto_sai_bridge_proto_rawDescGZIP() []byte {
	file_dataplane_proto_sai_bridge_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_sai_bridge_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_sai_bridge_proto_rawDescData)
	})
	return file_dataplane_proto_sai_bridge_proto_rawDescData
}

var file_dataplane_proto_sai_bridge_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dataplane_proto_sai_bridge_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_dataplane_proto_sai_bridge_proto_goTypes = []interface{}{
	(BridgeAttr)(0),                        // 0: lemming.dataplane.sai.BridgeAttr
	(BridgePortAttr)(0),                    // 1: lemming.dataplane.sai.BridgePortAttr
	(*CreateBridgeRequest)(nil),            // 2: lemming.dataplane.sai.CreateBridgeRequest
	(*CreateBridgeResponse)(nil),           // 3: lemming.dataplane.sai.CreateBridgeResponse
	(*RemoveBridgeRequest)(nil),            // 4: lemming.dataplane.sai.RemoveBridgeRequest
	(*RemoveBridgeResponse)(nil),           // 5: lemming.dataplane.sai.RemoveBridgeResponse
	(*SetBridgeAttributeRequest)(nil),      // 6: lemming.dataplane.sai.SetBridgeAttributeRequest
	(*SetBridgeAttributeResponse)(nil),     // 7: lemming.dataplane.sai.SetBridgeAttributeResponse
	(*GetBridgeAttributeRequest)(nil),      // 8: lemming.dataplane.sai.GetBridgeAttributeRequest
	(*GetBridgeAttributeResponse)(nil),     // 9: lemming.dataplane.sai.GetBridgeAttributeResponse
	(*GetBridgeStatsRequest)(nil),          // 10: lemming.dataplane.sai.GetBridgeStatsRequest
	(*GetBridgeStatsResponse)(nil),         // 11: lemming.dataplane.sai.GetBridgeStatsResponse
	(*CreateBridgePortRequest)(nil),        // 12: lemming.dataplane.sai.CreateBridgePortRequest
	(*CreateBridgePortResponse)(nil),       // 13: lemming.dataplane.sai.CreateBridgePortResponse
	(*RemoveBridgePortRequest)(nil),        // 14: lemming.dataplane.sai.RemoveBridgePortRequest
	(*RemoveBridgePortResponse)(nil),       // 15: lemming.dataplane.sai.RemoveBridgePortResponse
	(*SetBridgePortAttributeRequest)(nil),  // 16: lemming.dataplane.sai.SetBridgePortAttributeRequest
	(*SetBridgePortAttributeResponse)(nil), // 17: lemming.dataplane.sai.SetBridgePortAttributeResponse
	(*GetBridgePortAttributeRequest)(nil),  // 18: lemming.dataplane.sai.GetBridgePortAttributeRequest
	(*GetBridgePortAttributeResponse)(nil), // 19: lemming.dataplane.sai.GetBridgePortAttributeResponse
	(*GetBridgePortStatsRequest)(nil),      // 20: lemming.dataplane.sai.GetBridgePortStatsRequest
	(*GetBridgePortStatsResponse)(nil),     // 21: lemming.dataplane.sai.GetBridgePortStatsResponse
	(BridgeType)(0),                        // 22: lemming.dataplane.sai.BridgeType
	(BridgeFloodControlType)(0),            // 23: lemming.dataplane.sai.BridgeFloodControlType
	(*BridgeAttribute)(nil),                // 24: lemming.dataplane.sai.BridgeAttribute
	(BridgeStat)(0),                        // 25: lemming.dataplane.sai.BridgeStat
	(BridgePortType)(0),                    // 26: lemming.dataplane.sai.BridgePortType
	(BridgePortTaggingMode)(0),             // 27: lemming.dataplane.sai.BridgePortTaggingMode
	(BridgePortFdbLearningMode)(0),         // 28: lemming.dataplane.sai.BridgePortFdbLearningMode
	(PacketAction)(0),                      // 29: lemming.dataplane.sai.PacketAction
	(*BridgePortAttribute)(nil),            // 30: lemming.dataplane.sai.BridgePortAttribute
	(BridgePortStat)(0),                    // 31: lemming.dataplane.sai.BridgePortStat
}
var file_dataplane_proto_sai_bridge_proto_depIdxs = []int32{
	22, // 0: lemming.dataplane.sai.CreateBridgeRequest.type:type_name -> lemming.dataplane.sai.BridgeType
	23, // 1: lemming.dataplane.sai.CreateBridgeRequest.unknown_unicast_flood_control_type:type_name -> lemming.dataplane.sai.BridgeFloodControlType
	23, // 2: lemming.dataplane.sai.CreateBridgeRequest.unknown_multicast_flood_control_type:type_name -> lemming.dataplane.sai.BridgeFloodControlType
	23, // 3: lemming.dataplane.sai.CreateBridgeRequest.broadcast_flood_control_type:type_name -> lemming.dataplane.sai.BridgeFloodControlType
	23, // 4: lemming.dataplane.sai.SetBridgeAttributeRequest.unknown_unicast_flood_control_type:type_name -> lemming.dataplane.sai.BridgeFloodControlType
	23, // 5: lemming.dataplane.sai.SetBridgeAttributeRequest.unknown_multicast_flood_control_type:type_name -> lemming.dataplane.sai.BridgeFloodControlType
	23, // 6: lemming.dataplane.sai.SetBridgeAttributeRequest.broadcast_flood_control_type:type_name -> lemming.dataplane.sai.BridgeFloodControlType
	0,  // 7: lemming.dataplane.sai.GetBridgeAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.BridgeAttr
	24, // 8: lemming.dataplane.sai.GetBridgeAttributeResponse.attr:type_name -> lemming.dataplane.sai.BridgeAttribute
	25, // 9: lemming.dataplane.sai.GetBridgeStatsRequest.counter_ids:type_name -> lemming.dataplane.sai.BridgeStat
	26, // 10: lemming.dataplane.sai.CreateBridgePortRequest.type:type_name -> lemming.dataplane.sai.BridgePortType
	27, // 11: lemming.dataplane.sai.CreateBridgePortRequest.tagging_mode:type_name -> lemming.dataplane.sai.BridgePortTaggingMode
	28, // 12: lemming.dataplane.sai.CreateBridgePortRequest.fdb_learning_mode:type_name -> lemming.dataplane.sai.BridgePortFdbLearningMode
	29, // 13: lemming.dataplane.sai.CreateBridgePortRequest.fdb_learning_limit_violation_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	27, // 14: lemming.dataplane.sai.SetBridgePortAttributeRequest.tagging_mode:type_name -> lemming.dataplane.sai.BridgePortTaggingMode
	28, // 15: lemming.dataplane.sai.SetBridgePortAttributeRequest.fdb_learning_mode:type_name -> lemming.dataplane.sai.BridgePortFdbLearningMode
	29, // 16: lemming.dataplane.sai.SetBridgePortAttributeRequest.fdb_learning_limit_violation_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	1,  // 17: lemming.dataplane.sai.GetBridgePortAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.BridgePortAttr
	30, // 18: lemming.dataplane.sai.GetBridgePortAttributeResponse.attr:type_name -> lemming.dataplane.sai.BridgePortAttribute
	31, // 19: lemming.dataplane.sai.GetBridgePortStatsRequest.counter_ids:type_name -> lemming.dataplane.sai.BridgePortStat
	2,  // 20: lemming.dataplane.sai.Bridge.CreateBridge:input_type -> lemming.dataplane.sai.CreateBridgeRequest
	4,  // 21: lemming.dataplane.sai.Bridge.RemoveBridge:input_type -> lemming.dataplane.sai.RemoveBridgeRequest
	6,  // 22: lemming.dataplane.sai.Bridge.SetBridgeAttribute:input_type -> lemming.dataplane.sai.SetBridgeAttributeRequest
	8,  // 23: lemming.dataplane.sai.Bridge.GetBridgeAttribute:input_type -> lemming.dataplane.sai.GetBridgeAttributeRequest
	10, // 24: lemming.dataplane.sai.Bridge.GetBridgeStats:input_type -> lemming.dataplane.sai.GetBridgeStatsRequest
	12, // 25: lemming.dataplane.sai.Bridge.CreateBridgePort:input_type -> lemming.dataplane.sai.CreateBridgePortRequest
	14, // 26: lemming.dataplane.sai.Bridge.RemoveBridgePort:input_type -> lemming.dataplane.sai.RemoveBridgePortRequest
	16, // 27: lemming.dataplane.sai.Bridge.SetBridgePortAttribute:input_type -> lemming.dataplane.sai.SetBridgePortAttributeRequest
	18, // 28: lemming.dataplane.sai.Bridge.GetBridgePortAttribute:input_type -> lemming.dataplane.sai.GetBridgePortAttributeRequest
	20, // 29: lemming.dataplane.sai.Bridge.GetBridgePortStats:input_type -> lemming.dataplane.sai.GetBridgePortStatsRequest
	3,  // 30: lemming.dataplane.sai.Bridge.CreateBridge:output_type -> lemming.dataplane.sai.CreateBridgeResponse
	5,  // 31: lemming.dataplane.sai.Bridge.RemoveBridge:output_type -> lemming.dataplane.sai.RemoveBridgeResponse
	7,  // 32: lemming.dataplane.sai.Bridge.SetBridgeAttribute:output_type -> lemming.dataplane.sai.SetBridgeAttributeResponse
	9,  // 33: lemming.dataplane.sai.Bridge.GetBridgeAttribute:output_type -> lemming.dataplane.sai.GetBridgeAttributeResponse
	11, // 34: lemming.dataplane.sai.Bridge.GetBridgeStats:output_type -> lemming.dataplane.sai.GetBridgeStatsResponse
	13, // 35: lemming.dataplane.sai.Bridge.CreateBridgePort:output_type -> lemming.dataplane.sai.CreateBridgePortResponse
	15, // 36: lemming.dataplane.sai.Bridge.RemoveBridgePort:output_type -> lemming.dataplane.sai.RemoveBridgePortResponse
	17, // 37: lemming.dataplane.sai.Bridge.SetBridgePortAttribute:output_type -> lemming.dataplane.sai.SetBridgePortAttributeResponse
	19, // 38: lemming.dataplane.sai.Bridge.GetBridgePortAttribute:output_type -> lemming.dataplane.sai.GetBridgePortAttributeResponse
	21, // 39: lemming.dataplane.sai.Bridge.GetBridgePortStats:output_type -> lemming.dataplane.sai.GetBridgePortStatsResponse
	30, // [30:40] is the sub-list for method output_type
	20, // [20:30] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_dataplane_proto_sai_bridge_proto_init() }
func file_dataplane_proto_sai_bridge_proto_init() {
	if File_dataplane_proto_sai_bridge_proto != nil {
		return
	}
	file_dataplane_proto_sai_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_sai_bridge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBridgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBridgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBridgeAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBridgeAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgeAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgeAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgeStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgeStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBridgePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBridgePortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBridgePortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBridgePortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBridgePortAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBridgePortAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgePortAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgePortAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgePortStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bridge_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBridgePortStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_sai_bridge_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_proto_sai_bridge_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_dataplane_proto_sai_bridge_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_dataplane_proto_sai_bridge_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_sai_bridge_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_sai_bridge_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_sai_bridge_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_sai_bridge_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_sai_bridge_proto_msgTypes,
	}.Build()
	File_dataplane_proto_sai_bridge_proto = out.File
	file_dataplane_proto_sai_bridge_proto_rawDesc = nil
	file_dataplane_proto_sai_bridge_proto_goTypes = nil
	file_dataplane_proto_sai_bridge_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BridgeClient is the client API for Bridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BridgeClient interface {
	CreateBridge(ctx context.Context, in *CreateBridgeRequest, opts ...grpc.CallOption) (*CreateBridgeResponse, error)
	RemoveBridge(ctx context.Context, in *RemoveBridgeRequest, opts ...grpc.CallOption) (*RemoveBridgeResponse, error)
	SetBridgeAttribute(ctx context.Context, in *SetBridgeAttributeRequest, opts ...grpc.CallOption) (*SetBridgeAttributeResponse, error)
	GetBridgeAttribute(ctx context.Context, in *GetBridgeAttributeRequest, opts ...grpc.CallOption) (*GetBridgeAttributeResponse, error)
	GetBridgeStats(ctx context.Context, in *GetBridgeStatsRequest, opts ...grpc.CallOption) (*GetBridgeStatsResponse, error)
	CreateBridgePort(ctx context.Context, in *CreateBridgePortRequest, opts ...grpc.CallOption) (*CreateBridgePortResponse, error)
	RemoveBridgePort(ctx context.Context, in *RemoveBridgePortRequest, opts ...grpc.CallOption) (*RemoveBridgePortResponse, error)
	SetBridgePortAttribute(ctx context.Context, in *SetBridgePortAttributeRequest, opts ...grpc.CallOption) (*SetBridgePortAttributeResponse, error)
	GetBridgePortAttribute(ctx context.Context, in *GetBridgePortAttributeRequest, opts ...grpc.CallOption) (*GetBridgePortAttributeResponse, error)
	GetBridgePortStats(ctx context.Context, in *GetBridgePortStatsRequest, opts ...grpc.CallOption) (*GetBridgePortStatsResponse, error)
}

type bridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeClient(cc grpc.ClientConnInterface) BridgeClient {
	return &bridgeClient{cc}
}

func (c *bridgeClient) CreateBridge(ctx context.Context, in *CreateBridgeRequest, opts ...grpc.CallOption) (*CreateBridgeResponse, error) {
	out := new(CreateBridgeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bridge/CreateBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) RemoveBridge(ctx context.Context, in *RemoveBridgeRequest, opts ...grpc.CallOption) (*RemoveBridgeResponse, error) {
	out := new(RemoveBridgeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bridge/RemoveBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) SetBridgeAttribute(ctx context.Context, in *SetBridgeAttributeRequest, opts ...grpc.CallOption) (*SetBridgeAttributeResponse, error) {
	out := new(SetBridgeAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bridge/SetBridgeAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) GetBridgeAttribute(ctx context.Context, in *GetBridgeAttributeRequest, opts ...grpc.CallOption) (*GetBridgeAttributeResponse, error) {
	out := new(GetBridgeAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bridge/GetBridgeAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) GetBridgeStats(ctx context.Context, in *GetBridgeStatsRequest, opts ...grpc.CallOption) (*GetBridgeStatsResponse, error) {
	out := new(GetBridgeStatsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bridge/GetBridgeStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) CreateBridgePort(ctx context.Context, in *CreateBridgePortRequest, opts ...grpc.CallOption) (*CreateBridgePortResponse, error) {
	out := new(CreateBridgePortResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bridge/CreateBridgePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) RemoveBridgePort(ctx context.Context, in *RemoveBridgePortRequest, opts ...grpc.CallOption) (*RemoveBridgePortResponse, error) {
	out := new(RemoveBridgePortResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bridge/RemoveBridgePort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) SetBridgePortAttribute(ctx context.Context, in *SetBridgePortAttributeRequest, opts ...grpc.CallOption) (*SetBridgePortAttributeResponse, error) {
	out := new(SetBridgePortAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bridge/SetBridgePortAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) GetBridgePortAttribute(ctx context.Context, in *GetBridgePortAttributeRequest, opts ...grpc.CallOption) (*GetBridgePortAttributeResponse, error) {
	out := new(GetBridgePortAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bridge/GetBridgePortAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) GetBridgePortStats(ctx context.Context, in *GetBridgePortStatsRequest, opts ...grpc.CallOption) (*GetBridgePortStatsResponse, error) {
	out := new(GetBridgePortStatsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bridge/GetBridgePortStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeServer is the server API for Bridge service.
type BridgeServer interface {
	CreateBridge(context.Context, *CreateBridgeRequest) (*CreateBridgeResponse, error)
	RemoveBridge(context.Context, *RemoveBridgeRequest) (*RemoveBridgeResponse, error)
	SetBridgeAttribute(context.Context, *SetBridgeAttributeRequest) (*SetBridgeAttributeResponse, error)
	GetBridgeAttribute(context.Context, *GetBridgeAttributeRequest) (*GetBridgeAttributeResponse, error)
	GetBridgeStats(context.Context, *GetBridgeStatsRequest) (*GetBridgeStatsResponse, error)
	CreateBridgePort(context.Context, *CreateBridgePortRequest) (*CreateBridgePortResponse, error)
	RemoveBridgePort(context.Context, *RemoveBridgePortRequest) (*RemoveBridgePortResponse, error)
	SetBridgePortAttribute(context.Context, *SetBridgePortAttributeRequest) (*SetBridgePortAttributeResponse, error)
	GetBridgePortAttribute(context.Context, *GetBridgePortAttributeRequest) (*GetBridgePortAttributeResponse, error)
	GetBridgePortStats(context.Context, *GetBridgePortStatsRequest) (*GetBridgePortStatsResponse, error)
}

// UnimplementedBridgeServer can be embedded to have forward compatible implementations.
type UnimplementedBridgeServer struct {
}

func (*UnimplementedBridgeServer) CreateBridge(context.Context, *CreateBridgeRequest) (*CreateBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBridge not implemented")
}
func (*UnimplementedBridgeServer) RemoveBridge(context.Context, *RemoveBridgeRequest) (*RemoveBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBridge not implemented")
}
func (*UnimplementedBridgeServer) SetBridgeAttribute(context.Context, *SetBridgeAttributeRequest) (*SetBridgeAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBridgeAttribute not implemented")
}
func (*UnimplementedBridgeServer) GetBridgeAttribute(context.Context, *GetBridgeAttributeRequest) (*GetBridgeAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBridgeAttribute not implemented")
}
func (*UnimplementedBridgeServer) GetBridgeStats(context.Context, *GetBridgeStatsRequest) (*GetBridgeStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBridgeStats not implemented")
}
func (*UnimplementedBridgeServer) CreateBridgePort(context.Context, *CreateBridgePortRequest) (*CreateBridgePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBridgePort not implemented")
}
func (*UnimplementedBridgeServer) RemoveBridgePort(context.Context, *RemoveBridgePortRequest) (*RemoveBridgePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBridgePort not implemented")
}
func (*UnimplementedBridgeServer) SetBridgePortAttribute(context.Context, *SetBridgePortAttributeRequest) (*SetBridgePortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBridgePortAttribute not implemented")
}
func (*UnimplementedBridgeServer) GetBridgePortAttribute(context.Context, *GetBridgePortAttributeRequest) (*GetBridgePortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBridgePortAttribute not implemented")
}
func (*UnimplementedBridgeServer) GetBridgePortStats(context.Context, *GetBridgePortStatsRequest) (*GetBridgePortStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBridgePortStats not implemented")
}

func RegisterBridgeServer(s *grpc.Server, srv BridgeServer) {
	s.RegisterService(&_Bridge_serviceDesc, srv)
}

func _Bridge_CreateBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).CreateBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bridge/CreateBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).CreateBridge(ctx, req.(*CreateBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_RemoveBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).RemoveBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bridge/RemoveBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).RemoveBridge(ctx, req.(*RemoveBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_SetBridgeAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBridgeAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).SetBridgeAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bridge/SetBridgeAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).SetBridgeAttribute(ctx, req.(*SetBridgeAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_GetBridgeAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBridgeAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).GetBridgeAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bridge/GetBridgeAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).GetBridgeAttribute(ctx, req.(*GetBridgeAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_GetBridgeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBridgeStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).GetBridgeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bridge/GetBridgeStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).GetBridgeStats(ctx, req.(*GetBridgeStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_CreateBridgePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBridgePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).CreateBridgePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bridge/CreateBridgePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).CreateBridgePort(ctx, req.(*CreateBridgePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_RemoveBridgePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBridgePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).RemoveBridgePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bridge/RemoveBridgePort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).RemoveBridgePort(ctx, req.(*RemoveBridgePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_SetBridgePortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBridgePortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).SetBridgePortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bridge/SetBridgePortAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).SetBridgePortAttribute(ctx, req.(*SetBridgePortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_GetBridgePortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBridgePortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).GetBridgePortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bridge/GetBridgePortAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).GetBridgePortAttribute(ctx, req.(*GetBridgePortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_GetBridgePortStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBridgePortStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).GetBridgePortStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bridge/GetBridgePortStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).GetBridgePortStats(ctx, req.(*GetBridgePortStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bridge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Bridge",
	HandlerType: (*BridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBridge",
			Handler:    _Bridge_CreateBridge_Handler,
		},
		{
			MethodName: "RemoveBridge",
			Handler:    _Bridge_RemoveBridge_Handler,
		},
		{
			MethodName: "SetBridgeAttribute",
			Handler:    _Bridge_SetBridgeAttribute_Handler,
		},
		{
			MethodName: "GetBridgeAttribute",
			Handler:    _Bridge_GetBridgeAttribute_Handler,
		},
		{
			MethodName: "GetBridgeStats",
			Handler:    _Bridge_GetBridgeStats_Handler,
		},
		{
			MethodName: "CreateBridgePort",
			Handler:    _Bridge_CreateBridgePort_Handler,
		},
		{
			MethodName: "RemoveBridgePort",
			Handler:    _Bridge_RemoveBridgePort_Handler,
		},
		{
			MethodName: "SetBridgePortAttribute",
			Handler:    _Bridge_SetBridgePortAttribute_Handler,
		},
		{
			MethodName: "GetBridgePortAttribute",
			Handler:    _Bridge_GetBridgePortAttribute_Handler,
		},
		{
			MethodName: "GetBridgePortStats",
			Handler:    _Bridge_GetBridgePortStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/bridge.proto",
}
