// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/port.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Port_CreatePort_FullMethodName                = "/lemming.dataplane.sai.Port/CreatePort"
	Port_RemovePort_FullMethodName                = "/lemming.dataplane.sai.Port/RemovePort"
	Port_SetPortAttribute_FullMethodName          = "/lemming.dataplane.sai.Port/SetPortAttribute"
	Port_GetPortAttribute_FullMethodName          = "/lemming.dataplane.sai.Port/GetPortAttribute"
	Port_GetPortStats_FullMethodName              = "/lemming.dataplane.sai.Port/GetPortStats"
	Port_CreatePortPool_FullMethodName            = "/lemming.dataplane.sai.Port/CreatePortPool"
	Port_RemovePortPool_FullMethodName            = "/lemming.dataplane.sai.Port/RemovePortPool"
	Port_SetPortPoolAttribute_FullMethodName      = "/lemming.dataplane.sai.Port/SetPortPoolAttribute"
	Port_GetPortPoolAttribute_FullMethodName      = "/lemming.dataplane.sai.Port/GetPortPoolAttribute"
	Port_GetPortPoolStats_FullMethodName          = "/lemming.dataplane.sai.Port/GetPortPoolStats"
	Port_CreatePortConnector_FullMethodName       = "/lemming.dataplane.sai.Port/CreatePortConnector"
	Port_RemovePortConnector_FullMethodName       = "/lemming.dataplane.sai.Port/RemovePortConnector"
	Port_SetPortConnectorAttribute_FullMethodName = "/lemming.dataplane.sai.Port/SetPortConnectorAttribute"
	Port_GetPortConnectorAttribute_FullMethodName = "/lemming.dataplane.sai.Port/GetPortConnectorAttribute"
	Port_CreatePortSerdes_FullMethodName          = "/lemming.dataplane.sai.Port/CreatePortSerdes"
	Port_RemovePortSerdes_FullMethodName          = "/lemming.dataplane.sai.Port/RemovePortSerdes"
	Port_GetPortSerdesAttribute_FullMethodName    = "/lemming.dataplane.sai.Port/GetPortSerdesAttribute"
	Port_CreatePorts_FullMethodName               = "/lemming.dataplane.sai.Port/CreatePorts"
	Port_RemovePorts_FullMethodName               = "/lemming.dataplane.sai.Port/RemovePorts"
)

// PortClient is the client API for Port service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortClient interface {
	CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*CreatePortResponse, error)
	RemovePort(ctx context.Context, in *RemovePortRequest, opts ...grpc.CallOption) (*RemovePortResponse, error)
	SetPortAttribute(ctx context.Context, in *SetPortAttributeRequest, opts ...grpc.CallOption) (*SetPortAttributeResponse, error)
	GetPortAttribute(ctx context.Context, in *GetPortAttributeRequest, opts ...grpc.CallOption) (*GetPortAttributeResponse, error)
	GetPortStats(ctx context.Context, in *GetPortStatsRequest, opts ...grpc.CallOption) (*GetPortStatsResponse, error)
	CreatePortPool(ctx context.Context, in *CreatePortPoolRequest, opts ...grpc.CallOption) (*CreatePortPoolResponse, error)
	RemovePortPool(ctx context.Context, in *RemovePortPoolRequest, opts ...grpc.CallOption) (*RemovePortPoolResponse, error)
	SetPortPoolAttribute(ctx context.Context, in *SetPortPoolAttributeRequest, opts ...grpc.CallOption) (*SetPortPoolAttributeResponse, error)
	GetPortPoolAttribute(ctx context.Context, in *GetPortPoolAttributeRequest, opts ...grpc.CallOption) (*GetPortPoolAttributeResponse, error)
	GetPortPoolStats(ctx context.Context, in *GetPortPoolStatsRequest, opts ...grpc.CallOption) (*GetPortPoolStatsResponse, error)
	CreatePortConnector(ctx context.Context, in *CreatePortConnectorRequest, opts ...grpc.CallOption) (*CreatePortConnectorResponse, error)
	RemovePortConnector(ctx context.Context, in *RemovePortConnectorRequest, opts ...grpc.CallOption) (*RemovePortConnectorResponse, error)
	SetPortConnectorAttribute(ctx context.Context, in *SetPortConnectorAttributeRequest, opts ...grpc.CallOption) (*SetPortConnectorAttributeResponse, error)
	GetPortConnectorAttribute(ctx context.Context, in *GetPortConnectorAttributeRequest, opts ...grpc.CallOption) (*GetPortConnectorAttributeResponse, error)
	CreatePortSerdes(ctx context.Context, in *CreatePortSerdesRequest, opts ...grpc.CallOption) (*CreatePortSerdesResponse, error)
	RemovePortSerdes(ctx context.Context, in *RemovePortSerdesRequest, opts ...grpc.CallOption) (*RemovePortSerdesResponse, error)
	GetPortSerdesAttribute(ctx context.Context, in *GetPortSerdesAttributeRequest, opts ...grpc.CallOption) (*GetPortSerdesAttributeResponse, error)
	CreatePorts(ctx context.Context, in *CreatePortsRequest, opts ...grpc.CallOption) (*CreatePortsResponse, error)
	RemovePorts(ctx context.Context, in *RemovePortsRequest, opts ...grpc.CallOption) (*RemovePortsResponse, error)
}

type portClient struct {
	cc grpc.ClientConnInterface
}

func NewPortClient(cc grpc.ClientConnInterface) PortClient {
	return &portClient{cc}
}

func (c *portClient) CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*CreatePortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePortResponse)
	err := c.cc.Invoke(ctx, Port_CreatePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) RemovePort(ctx context.Context, in *RemovePortRequest, opts ...grpc.CallOption) (*RemovePortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePortResponse)
	err := c.cc.Invoke(ctx, Port_RemovePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) SetPortAttribute(ctx context.Context, in *SetPortAttributeRequest, opts ...grpc.CallOption) (*SetPortAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPortAttributeResponse)
	err := c.cc.Invoke(ctx, Port_SetPortAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetPortAttribute(ctx context.Context, in *GetPortAttributeRequest, opts ...grpc.CallOption) (*GetPortAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortAttributeResponse)
	err := c.cc.Invoke(ctx, Port_GetPortAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetPortStats(ctx context.Context, in *GetPortStatsRequest, opts ...grpc.CallOption) (*GetPortStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortStatsResponse)
	err := c.cc.Invoke(ctx, Port_GetPortStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) CreatePortPool(ctx context.Context, in *CreatePortPoolRequest, opts ...grpc.CallOption) (*CreatePortPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePortPoolResponse)
	err := c.cc.Invoke(ctx, Port_CreatePortPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) RemovePortPool(ctx context.Context, in *RemovePortPoolRequest, opts ...grpc.CallOption) (*RemovePortPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePortPoolResponse)
	err := c.cc.Invoke(ctx, Port_RemovePortPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) SetPortPoolAttribute(ctx context.Context, in *SetPortPoolAttributeRequest, opts ...grpc.CallOption) (*SetPortPoolAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPortPoolAttributeResponse)
	err := c.cc.Invoke(ctx, Port_SetPortPoolAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetPortPoolAttribute(ctx context.Context, in *GetPortPoolAttributeRequest, opts ...grpc.CallOption) (*GetPortPoolAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortPoolAttributeResponse)
	err := c.cc.Invoke(ctx, Port_GetPortPoolAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetPortPoolStats(ctx context.Context, in *GetPortPoolStatsRequest, opts ...grpc.CallOption) (*GetPortPoolStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortPoolStatsResponse)
	err := c.cc.Invoke(ctx, Port_GetPortPoolStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) CreatePortConnector(ctx context.Context, in *CreatePortConnectorRequest, opts ...grpc.CallOption) (*CreatePortConnectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePortConnectorResponse)
	err := c.cc.Invoke(ctx, Port_CreatePortConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) RemovePortConnector(ctx context.Context, in *RemovePortConnectorRequest, opts ...grpc.CallOption) (*RemovePortConnectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePortConnectorResponse)
	err := c.cc.Invoke(ctx, Port_RemovePortConnector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) SetPortConnectorAttribute(ctx context.Context, in *SetPortConnectorAttributeRequest, opts ...grpc.CallOption) (*SetPortConnectorAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPortConnectorAttributeResponse)
	err := c.cc.Invoke(ctx, Port_SetPortConnectorAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetPortConnectorAttribute(ctx context.Context, in *GetPortConnectorAttributeRequest, opts ...grpc.CallOption) (*GetPortConnectorAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortConnectorAttributeResponse)
	err := c.cc.Invoke(ctx, Port_GetPortConnectorAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) CreatePortSerdes(ctx context.Context, in *CreatePortSerdesRequest, opts ...grpc.CallOption) (*CreatePortSerdesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePortSerdesResponse)
	err := c.cc.Invoke(ctx, Port_CreatePortSerdes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) RemovePortSerdes(ctx context.Context, in *RemovePortSerdesRequest, opts ...grpc.CallOption) (*RemovePortSerdesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePortSerdesResponse)
	err := c.cc.Invoke(ctx, Port_RemovePortSerdes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) GetPortSerdesAttribute(ctx context.Context, in *GetPortSerdesAttributeRequest, opts ...grpc.CallOption) (*GetPortSerdesAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortSerdesAttributeResponse)
	err := c.cc.Invoke(ctx, Port_GetPortSerdesAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) CreatePorts(ctx context.Context, in *CreatePortsRequest, opts ...grpc.CallOption) (*CreatePortsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePortsResponse)
	err := c.cc.Invoke(ctx, Port_CreatePorts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portClient) RemovePorts(ctx context.Context, in *RemovePortsRequest, opts ...grpc.CallOption) (*RemovePortsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePortsResponse)
	err := c.cc.Invoke(ctx, Port_RemovePorts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServer is the server API for Port service.
// All implementations should embed UnimplementedPortServer
// for forward compatibility.
type PortServer interface {
	CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error)
	RemovePort(context.Context, *RemovePortRequest) (*RemovePortResponse, error)
	SetPortAttribute(context.Context, *SetPortAttributeRequest) (*SetPortAttributeResponse, error)
	GetPortAttribute(context.Context, *GetPortAttributeRequest) (*GetPortAttributeResponse, error)
	GetPortStats(context.Context, *GetPortStatsRequest) (*GetPortStatsResponse, error)
	CreatePortPool(context.Context, *CreatePortPoolRequest) (*CreatePortPoolResponse, error)
	RemovePortPool(context.Context, *RemovePortPoolRequest) (*RemovePortPoolResponse, error)
	SetPortPoolAttribute(context.Context, *SetPortPoolAttributeRequest) (*SetPortPoolAttributeResponse, error)
	GetPortPoolAttribute(context.Context, *GetPortPoolAttributeRequest) (*GetPortPoolAttributeResponse, error)
	GetPortPoolStats(context.Context, *GetPortPoolStatsRequest) (*GetPortPoolStatsResponse, error)
	CreatePortConnector(context.Context, *CreatePortConnectorRequest) (*CreatePortConnectorResponse, error)
	RemovePortConnector(context.Context, *RemovePortConnectorRequest) (*RemovePortConnectorResponse, error)
	SetPortConnectorAttribute(context.Context, *SetPortConnectorAttributeRequest) (*SetPortConnectorAttributeResponse, error)
	GetPortConnectorAttribute(context.Context, *GetPortConnectorAttributeRequest) (*GetPortConnectorAttributeResponse, error)
	CreatePortSerdes(context.Context, *CreatePortSerdesRequest) (*CreatePortSerdesResponse, error)
	RemovePortSerdes(context.Context, *RemovePortSerdesRequest) (*RemovePortSerdesResponse, error)
	GetPortSerdesAttribute(context.Context, *GetPortSerdesAttributeRequest) (*GetPortSerdesAttributeResponse, error)
	CreatePorts(context.Context, *CreatePortsRequest) (*CreatePortsResponse, error)
	RemovePorts(context.Context, *RemovePortsRequest) (*RemovePortsResponse, error)
}

// UnimplementedPortServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPortServer struct{}

func (UnimplementedPortServer) CreatePort(context.Context, *CreatePortRequest) (*CreatePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePort not implemented")
}
func (UnimplementedPortServer) RemovePort(context.Context, *RemovePortRequest) (*RemovePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePort not implemented")
}
func (UnimplementedPortServer) SetPortAttribute(context.Context, *SetPortAttributeRequest) (*SetPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPortAttribute not implemented")
}
func (UnimplementedPortServer) GetPortAttribute(context.Context, *GetPortAttributeRequest) (*GetPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortAttribute not implemented")
}
func (UnimplementedPortServer) GetPortStats(context.Context, *GetPortStatsRequest) (*GetPortStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortStats not implemented")
}
func (UnimplementedPortServer) CreatePortPool(context.Context, *CreatePortPoolRequest) (*CreatePortPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortPool not implemented")
}
func (UnimplementedPortServer) RemovePortPool(context.Context, *RemovePortPoolRequest) (*RemovePortPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePortPool not implemented")
}
func (UnimplementedPortServer) SetPortPoolAttribute(context.Context, *SetPortPoolAttributeRequest) (*SetPortPoolAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPortPoolAttribute not implemented")
}
func (UnimplementedPortServer) GetPortPoolAttribute(context.Context, *GetPortPoolAttributeRequest) (*GetPortPoolAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortPoolAttribute not implemented")
}
func (UnimplementedPortServer) GetPortPoolStats(context.Context, *GetPortPoolStatsRequest) (*GetPortPoolStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortPoolStats not implemented")
}
func (UnimplementedPortServer) CreatePortConnector(context.Context, *CreatePortConnectorRequest) (*CreatePortConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortConnector not implemented")
}
func (UnimplementedPortServer) RemovePortConnector(context.Context, *RemovePortConnectorRequest) (*RemovePortConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePortConnector not implemented")
}
func (UnimplementedPortServer) SetPortConnectorAttribute(context.Context, *SetPortConnectorAttributeRequest) (*SetPortConnectorAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPortConnectorAttribute not implemented")
}
func (UnimplementedPortServer) GetPortConnectorAttribute(context.Context, *GetPortConnectorAttributeRequest) (*GetPortConnectorAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortConnectorAttribute not implemented")
}
func (UnimplementedPortServer) CreatePortSerdes(context.Context, *CreatePortSerdesRequest) (*CreatePortSerdesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePortSerdes not implemented")
}
func (UnimplementedPortServer) RemovePortSerdes(context.Context, *RemovePortSerdesRequest) (*RemovePortSerdesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePortSerdes not implemented")
}
func (UnimplementedPortServer) GetPortSerdesAttribute(context.Context, *GetPortSerdesAttributeRequest) (*GetPortSerdesAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortSerdesAttribute not implemented")
}
func (UnimplementedPortServer) CreatePorts(context.Context, *CreatePortsRequest) (*CreatePortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePorts not implemented")
}
func (UnimplementedPortServer) RemovePorts(context.Context, *RemovePortsRequest) (*RemovePortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePorts not implemented")
}
func (UnimplementedPortServer) testEmbeddedByValue() {}

// UnsafePortServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortServer will
// result in compilation errors.
type UnsafePortServer interface {
	mustEmbedUnimplementedPortServer()
}

func RegisterPortServer(s grpc.ServiceRegistrar, srv PortServer) {
	// If the following call pancis, it indicates UnimplementedPortServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Port_ServiceDesc, srv)
}

func _Port_CreatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).CreatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_CreatePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).CreatePort(ctx, req.(*CreatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_RemovePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).RemovePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_RemovePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).RemovePort(ctx, req.(*RemovePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_SetPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).SetPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_SetPortAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).SetPortAttribute(ctx, req.(*SetPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_GetPortAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetPortAttribute(ctx, req.(*GetPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetPortStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetPortStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_GetPortStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetPortStats(ctx, req.(*GetPortStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_CreatePortPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).CreatePortPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_CreatePortPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).CreatePortPool(ctx, req.(*CreatePortPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_RemovePortPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).RemovePortPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_RemovePortPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).RemovePortPool(ctx, req.(*RemovePortPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_SetPortPoolAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPortPoolAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).SetPortPoolAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_SetPortPoolAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).SetPortPoolAttribute(ctx, req.(*SetPortPoolAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetPortPoolAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortPoolAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetPortPoolAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_GetPortPoolAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetPortPoolAttribute(ctx, req.(*GetPortPoolAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetPortPoolStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortPoolStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetPortPoolStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_GetPortPoolStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetPortPoolStats(ctx, req.(*GetPortPoolStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_CreatePortConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).CreatePortConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_CreatePortConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).CreatePortConnector(ctx, req.(*CreatePortConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_RemovePortConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).RemovePortConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_RemovePortConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).RemovePortConnector(ctx, req.(*RemovePortConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_SetPortConnectorAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPortConnectorAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).SetPortConnectorAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_SetPortConnectorAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).SetPortConnectorAttribute(ctx, req.(*SetPortConnectorAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetPortConnectorAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortConnectorAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetPortConnectorAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_GetPortConnectorAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetPortConnectorAttribute(ctx, req.(*GetPortConnectorAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_CreatePortSerdes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortSerdesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).CreatePortSerdes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_CreatePortSerdes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).CreatePortSerdes(ctx, req.(*CreatePortSerdesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_RemovePortSerdes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortSerdesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).RemovePortSerdes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_RemovePortSerdes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).RemovePortSerdes(ctx, req.(*RemovePortSerdesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_GetPortSerdesAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortSerdesAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).GetPortSerdesAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_GetPortSerdesAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).GetPortSerdesAttribute(ctx, req.(*GetPortSerdesAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_CreatePorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).CreatePorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_CreatePorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).CreatePorts(ctx, req.(*CreatePortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Port_RemovePorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServer).RemovePorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Port_RemovePorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServer).RemovePorts(ctx, req.(*RemovePortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Port_ServiceDesc is the grpc.ServiceDesc for Port service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Port_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Port",
	HandlerType: (*PortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePort",
			Handler:    _Port_CreatePort_Handler,
		},
		{
			MethodName: "RemovePort",
			Handler:    _Port_RemovePort_Handler,
		},
		{
			MethodName: "SetPortAttribute",
			Handler:    _Port_SetPortAttribute_Handler,
		},
		{
			MethodName: "GetPortAttribute",
			Handler:    _Port_GetPortAttribute_Handler,
		},
		{
			MethodName: "GetPortStats",
			Handler:    _Port_GetPortStats_Handler,
		},
		{
			MethodName: "CreatePortPool",
			Handler:    _Port_CreatePortPool_Handler,
		},
		{
			MethodName: "RemovePortPool",
			Handler:    _Port_RemovePortPool_Handler,
		},
		{
			MethodName: "SetPortPoolAttribute",
			Handler:    _Port_SetPortPoolAttribute_Handler,
		},
		{
			MethodName: "GetPortPoolAttribute",
			Handler:    _Port_GetPortPoolAttribute_Handler,
		},
		{
			MethodName: "GetPortPoolStats",
			Handler:    _Port_GetPortPoolStats_Handler,
		},
		{
			MethodName: "CreatePortConnector",
			Handler:    _Port_CreatePortConnector_Handler,
		},
		{
			MethodName: "RemovePortConnector",
			Handler:    _Port_RemovePortConnector_Handler,
		},
		{
			MethodName: "SetPortConnectorAttribute",
			Handler:    _Port_SetPortConnectorAttribute_Handler,
		},
		{
			MethodName: "GetPortConnectorAttribute",
			Handler:    _Port_GetPortConnectorAttribute_Handler,
		},
		{
			MethodName: "CreatePortSerdes",
			Handler:    _Port_CreatePortSerdes_Handler,
		},
		{
			MethodName: "RemovePortSerdes",
			Handler:    _Port_RemovePortSerdes_Handler,
		},
		{
			MethodName: "GetPortSerdesAttribute",
			Handler:    _Port_GetPortSerdesAttribute_Handler,
		},
		{
			MethodName: "CreatePorts",
			Handler:    _Port_CreatePorts_Handler,
		},
		{
			MethodName: "RemovePorts",
			Handler:    _Port_RemovePorts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/port.proto",
}
