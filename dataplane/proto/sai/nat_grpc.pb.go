// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/nat.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Nat_CreateNatEntry_FullMethodName             = "/lemming.dataplane.sai.Nat/CreateNatEntry"
	Nat_RemoveNatEntry_FullMethodName             = "/lemming.dataplane.sai.Nat/RemoveNatEntry"
	Nat_SetNatEntryAttribute_FullMethodName       = "/lemming.dataplane.sai.Nat/SetNatEntryAttribute"
	Nat_GetNatEntryAttribute_FullMethodName       = "/lemming.dataplane.sai.Nat/GetNatEntryAttribute"
	Nat_CreateNatEntries_FullMethodName           = "/lemming.dataplane.sai.Nat/CreateNatEntries"
	Nat_RemoveNatEntries_FullMethodName           = "/lemming.dataplane.sai.Nat/RemoveNatEntries"
	Nat_CreateNatZoneCounter_FullMethodName       = "/lemming.dataplane.sai.Nat/CreateNatZoneCounter"
	Nat_RemoveNatZoneCounter_FullMethodName       = "/lemming.dataplane.sai.Nat/RemoveNatZoneCounter"
	Nat_SetNatZoneCounterAttribute_FullMethodName = "/lemming.dataplane.sai.Nat/SetNatZoneCounterAttribute"
	Nat_GetNatZoneCounterAttribute_FullMethodName = "/lemming.dataplane.sai.Nat/GetNatZoneCounterAttribute"
)

// NatClient is the client API for Nat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NatClient interface {
	CreateNatEntry(ctx context.Context, in *CreateNatEntryRequest, opts ...grpc.CallOption) (*CreateNatEntryResponse, error)
	RemoveNatEntry(ctx context.Context, in *RemoveNatEntryRequest, opts ...grpc.CallOption) (*RemoveNatEntryResponse, error)
	SetNatEntryAttribute(ctx context.Context, in *SetNatEntryAttributeRequest, opts ...grpc.CallOption) (*SetNatEntryAttributeResponse, error)
	GetNatEntryAttribute(ctx context.Context, in *GetNatEntryAttributeRequest, opts ...grpc.CallOption) (*GetNatEntryAttributeResponse, error)
	CreateNatEntries(ctx context.Context, in *CreateNatEntriesRequest, opts ...grpc.CallOption) (*CreateNatEntriesResponse, error)
	RemoveNatEntries(ctx context.Context, in *RemoveNatEntriesRequest, opts ...grpc.CallOption) (*RemoveNatEntriesResponse, error)
	CreateNatZoneCounter(ctx context.Context, in *CreateNatZoneCounterRequest, opts ...grpc.CallOption) (*CreateNatZoneCounterResponse, error)
	RemoveNatZoneCounter(ctx context.Context, in *RemoveNatZoneCounterRequest, opts ...grpc.CallOption) (*RemoveNatZoneCounterResponse, error)
	SetNatZoneCounterAttribute(ctx context.Context, in *SetNatZoneCounterAttributeRequest, opts ...grpc.CallOption) (*SetNatZoneCounterAttributeResponse, error)
	GetNatZoneCounterAttribute(ctx context.Context, in *GetNatZoneCounterAttributeRequest, opts ...grpc.CallOption) (*GetNatZoneCounterAttributeResponse, error)
}

type natClient struct {
	cc grpc.ClientConnInterface
}

func NewNatClient(cc grpc.ClientConnInterface) NatClient {
	return &natClient{cc}
}

func (c *natClient) CreateNatEntry(ctx context.Context, in *CreateNatEntryRequest, opts ...grpc.CallOption) (*CreateNatEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNatEntryResponse)
	err := c.cc.Invoke(ctx, Nat_CreateNatEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) RemoveNatEntry(ctx context.Context, in *RemoveNatEntryRequest, opts ...grpc.CallOption) (*RemoveNatEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNatEntryResponse)
	err := c.cc.Invoke(ctx, Nat_RemoveNatEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) SetNatEntryAttribute(ctx context.Context, in *SetNatEntryAttributeRequest, opts ...grpc.CallOption) (*SetNatEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNatEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Nat_SetNatEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) GetNatEntryAttribute(ctx context.Context, in *GetNatEntryAttributeRequest, opts ...grpc.CallOption) (*GetNatEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNatEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Nat_GetNatEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) CreateNatEntries(ctx context.Context, in *CreateNatEntriesRequest, opts ...grpc.CallOption) (*CreateNatEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNatEntriesResponse)
	err := c.cc.Invoke(ctx, Nat_CreateNatEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) RemoveNatEntries(ctx context.Context, in *RemoveNatEntriesRequest, opts ...grpc.CallOption) (*RemoveNatEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNatEntriesResponse)
	err := c.cc.Invoke(ctx, Nat_RemoveNatEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) CreateNatZoneCounter(ctx context.Context, in *CreateNatZoneCounterRequest, opts ...grpc.CallOption) (*CreateNatZoneCounterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNatZoneCounterResponse)
	err := c.cc.Invoke(ctx, Nat_CreateNatZoneCounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) RemoveNatZoneCounter(ctx context.Context, in *RemoveNatZoneCounterRequest, opts ...grpc.CallOption) (*RemoveNatZoneCounterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNatZoneCounterResponse)
	err := c.cc.Invoke(ctx, Nat_RemoveNatZoneCounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) SetNatZoneCounterAttribute(ctx context.Context, in *SetNatZoneCounterAttributeRequest, opts ...grpc.CallOption) (*SetNatZoneCounterAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNatZoneCounterAttributeResponse)
	err := c.cc.Invoke(ctx, Nat_SetNatZoneCounterAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natClient) GetNatZoneCounterAttribute(ctx context.Context, in *GetNatZoneCounterAttributeRequest, opts ...grpc.CallOption) (*GetNatZoneCounterAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNatZoneCounterAttributeResponse)
	err := c.cc.Invoke(ctx, Nat_GetNatZoneCounterAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NatServer is the server API for Nat service.
// All implementations should embed UnimplementedNatServer
// for forward compatibility.
type NatServer interface {
	CreateNatEntry(context.Context, *CreateNatEntryRequest) (*CreateNatEntryResponse, error)
	RemoveNatEntry(context.Context, *RemoveNatEntryRequest) (*RemoveNatEntryResponse, error)
	SetNatEntryAttribute(context.Context, *SetNatEntryAttributeRequest) (*SetNatEntryAttributeResponse, error)
	GetNatEntryAttribute(context.Context, *GetNatEntryAttributeRequest) (*GetNatEntryAttributeResponse, error)
	CreateNatEntries(context.Context, *CreateNatEntriesRequest) (*CreateNatEntriesResponse, error)
	RemoveNatEntries(context.Context, *RemoveNatEntriesRequest) (*RemoveNatEntriesResponse, error)
	CreateNatZoneCounter(context.Context, *CreateNatZoneCounterRequest) (*CreateNatZoneCounterResponse, error)
	RemoveNatZoneCounter(context.Context, *RemoveNatZoneCounterRequest) (*RemoveNatZoneCounterResponse, error)
	SetNatZoneCounterAttribute(context.Context, *SetNatZoneCounterAttributeRequest) (*SetNatZoneCounterAttributeResponse, error)
	GetNatZoneCounterAttribute(context.Context, *GetNatZoneCounterAttributeRequest) (*GetNatZoneCounterAttributeResponse, error)
}

// UnimplementedNatServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNatServer struct{}

func (UnimplementedNatServer) CreateNatEntry(context.Context, *CreateNatEntryRequest) (*CreateNatEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNatEntry not implemented")
}
func (UnimplementedNatServer) RemoveNatEntry(context.Context, *RemoveNatEntryRequest) (*RemoveNatEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNatEntry not implemented")
}
func (UnimplementedNatServer) SetNatEntryAttribute(context.Context, *SetNatEntryAttributeRequest) (*SetNatEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNatEntryAttribute not implemented")
}
func (UnimplementedNatServer) GetNatEntryAttribute(context.Context, *GetNatEntryAttributeRequest) (*GetNatEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNatEntryAttribute not implemented")
}
func (UnimplementedNatServer) CreateNatEntries(context.Context, *CreateNatEntriesRequest) (*CreateNatEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNatEntries not implemented")
}
func (UnimplementedNatServer) RemoveNatEntries(context.Context, *RemoveNatEntriesRequest) (*RemoveNatEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNatEntries not implemented")
}
func (UnimplementedNatServer) CreateNatZoneCounter(context.Context, *CreateNatZoneCounterRequest) (*CreateNatZoneCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNatZoneCounter not implemented")
}
func (UnimplementedNatServer) RemoveNatZoneCounter(context.Context, *RemoveNatZoneCounterRequest) (*RemoveNatZoneCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNatZoneCounter not implemented")
}
func (UnimplementedNatServer) SetNatZoneCounterAttribute(context.Context, *SetNatZoneCounterAttributeRequest) (*SetNatZoneCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNatZoneCounterAttribute not implemented")
}
func (UnimplementedNatServer) GetNatZoneCounterAttribute(context.Context, *GetNatZoneCounterAttributeRequest) (*GetNatZoneCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNatZoneCounterAttribute not implemented")
}
func (UnimplementedNatServer) testEmbeddedByValue() {}

// UnsafeNatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NatServer will
// result in compilation errors.
type UnsafeNatServer interface {
	mustEmbedUnimplementedNatServer()
}

func RegisterNatServer(s grpc.ServiceRegistrar, srv NatServer) {
	// If the following call pancis, it indicates UnimplementedNatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Nat_ServiceDesc, srv)
}

func _Nat_CreateNatEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNatEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).CreateNatEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nat_CreateNatEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).CreateNatEntry(ctx, req.(*CreateNatEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_RemoveNatEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNatEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).RemoveNatEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nat_RemoveNatEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).RemoveNatEntry(ctx, req.(*RemoveNatEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_SetNatEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNatEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).SetNatEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nat_SetNatEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).SetNatEntryAttribute(ctx, req.(*SetNatEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_GetNatEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNatEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).GetNatEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nat_GetNatEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).GetNatEntryAttribute(ctx, req.(*GetNatEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_CreateNatEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNatEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).CreateNatEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nat_CreateNatEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).CreateNatEntries(ctx, req.(*CreateNatEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_RemoveNatEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNatEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).RemoveNatEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nat_RemoveNatEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).RemoveNatEntries(ctx, req.(*RemoveNatEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_CreateNatZoneCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNatZoneCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).CreateNatZoneCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nat_CreateNatZoneCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).CreateNatZoneCounter(ctx, req.(*CreateNatZoneCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_RemoveNatZoneCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNatZoneCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).RemoveNatZoneCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nat_RemoveNatZoneCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).RemoveNatZoneCounter(ctx, req.(*RemoveNatZoneCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_SetNatZoneCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNatZoneCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).SetNatZoneCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nat_SetNatZoneCounterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).SetNatZoneCounterAttribute(ctx, req.(*SetNatZoneCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nat_GetNatZoneCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNatZoneCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatServer).GetNatZoneCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Nat_GetNatZoneCounterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatServer).GetNatZoneCounterAttribute(ctx, req.(*GetNatZoneCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nat_ServiceDesc is the grpc.ServiceDesc for Nat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Nat",
	HandlerType: (*NatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNatEntry",
			Handler:    _Nat_CreateNatEntry_Handler,
		},
		{
			MethodName: "RemoveNatEntry",
			Handler:    _Nat_RemoveNatEntry_Handler,
		},
		{
			MethodName: "SetNatEntryAttribute",
			Handler:    _Nat_SetNatEntryAttribute_Handler,
		},
		{
			MethodName: "GetNatEntryAttribute",
			Handler:    _Nat_GetNatEntryAttribute_Handler,
		},
		{
			MethodName: "CreateNatEntries",
			Handler:    _Nat_CreateNatEntries_Handler,
		},
		{
			MethodName: "RemoveNatEntries",
			Handler:    _Nat_RemoveNatEntries_Handler,
		},
		{
			MethodName: "CreateNatZoneCounter",
			Handler:    _Nat_CreateNatZoneCounter_Handler,
		},
		{
			MethodName: "RemoveNatZoneCounter",
			Handler:    _Nat_RemoveNatZoneCounter_Handler,
		},
		{
			MethodName: "SetNatZoneCounterAttribute",
			Handler:    _Nat_SetNatZoneCounterAttribute_Handler,
		},
		{
			MethodName: "GetNatZoneCounterAttribute",
			Handler:    _Nat_GetNatZoneCounterAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/nat.proto",
}
