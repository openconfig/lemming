// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/mirror.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Mirror_CreateMirrorSession_FullMethodName       = "/lemming.dataplane.sai.Mirror/CreateMirrorSession"
	Mirror_RemoveMirrorSession_FullMethodName       = "/lemming.dataplane.sai.Mirror/RemoveMirrorSession"
	Mirror_SetMirrorSessionAttribute_FullMethodName = "/lemming.dataplane.sai.Mirror/SetMirrorSessionAttribute"
	Mirror_GetMirrorSessionAttribute_FullMethodName = "/lemming.dataplane.sai.Mirror/GetMirrorSessionAttribute"
)

// MirrorClient is the client API for Mirror service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MirrorClient interface {
	CreateMirrorSession(ctx context.Context, in *CreateMirrorSessionRequest, opts ...grpc.CallOption) (*CreateMirrorSessionResponse, error)
	RemoveMirrorSession(ctx context.Context, in *RemoveMirrorSessionRequest, opts ...grpc.CallOption) (*RemoveMirrorSessionResponse, error)
	SetMirrorSessionAttribute(ctx context.Context, in *SetMirrorSessionAttributeRequest, opts ...grpc.CallOption) (*SetMirrorSessionAttributeResponse, error)
	GetMirrorSessionAttribute(ctx context.Context, in *GetMirrorSessionAttributeRequest, opts ...grpc.CallOption) (*GetMirrorSessionAttributeResponse, error)
}

type mirrorClient struct {
	cc grpc.ClientConnInterface
}

func NewMirrorClient(cc grpc.ClientConnInterface) MirrorClient {
	return &mirrorClient{cc}
}

func (c *mirrorClient) CreateMirrorSession(ctx context.Context, in *CreateMirrorSessionRequest, opts ...grpc.CallOption) (*CreateMirrorSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMirrorSessionResponse)
	err := c.cc.Invoke(ctx, Mirror_CreateMirrorSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) RemoveMirrorSession(ctx context.Context, in *RemoveMirrorSessionRequest, opts ...grpc.CallOption) (*RemoveMirrorSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMirrorSessionResponse)
	err := c.cc.Invoke(ctx, Mirror_RemoveMirrorSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) SetMirrorSessionAttribute(ctx context.Context, in *SetMirrorSessionAttributeRequest, opts ...grpc.CallOption) (*SetMirrorSessionAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMirrorSessionAttributeResponse)
	err := c.cc.Invoke(ctx, Mirror_SetMirrorSessionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mirrorClient) GetMirrorSessionAttribute(ctx context.Context, in *GetMirrorSessionAttributeRequest, opts ...grpc.CallOption) (*GetMirrorSessionAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMirrorSessionAttributeResponse)
	err := c.cc.Invoke(ctx, Mirror_GetMirrorSessionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MirrorServer is the server API for Mirror service.
// All implementations should embed UnimplementedMirrorServer
// for forward compatibility.
type MirrorServer interface {
	CreateMirrorSession(context.Context, *CreateMirrorSessionRequest) (*CreateMirrorSessionResponse, error)
	RemoveMirrorSession(context.Context, *RemoveMirrorSessionRequest) (*RemoveMirrorSessionResponse, error)
	SetMirrorSessionAttribute(context.Context, *SetMirrorSessionAttributeRequest) (*SetMirrorSessionAttributeResponse, error)
	GetMirrorSessionAttribute(context.Context, *GetMirrorSessionAttributeRequest) (*GetMirrorSessionAttributeResponse, error)
}

// UnimplementedMirrorServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMirrorServer struct{}

func (UnimplementedMirrorServer) CreateMirrorSession(context.Context, *CreateMirrorSessionRequest) (*CreateMirrorSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMirrorSession not implemented")
}
func (UnimplementedMirrorServer) RemoveMirrorSession(context.Context, *RemoveMirrorSessionRequest) (*RemoveMirrorSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMirrorSession not implemented")
}
func (UnimplementedMirrorServer) SetMirrorSessionAttribute(context.Context, *SetMirrorSessionAttributeRequest) (*SetMirrorSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMirrorSessionAttribute not implemented")
}
func (UnimplementedMirrorServer) GetMirrorSessionAttribute(context.Context, *GetMirrorSessionAttributeRequest) (*GetMirrorSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMirrorSessionAttribute not implemented")
}
func (UnimplementedMirrorServer) testEmbeddedByValue() {}

// UnsafeMirrorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MirrorServer will
// result in compilation errors.
type UnsafeMirrorServer interface {
	mustEmbedUnimplementedMirrorServer()
}

func RegisterMirrorServer(s grpc.ServiceRegistrar, srv MirrorServer) {
	// If the following call pancis, it indicates UnimplementedMirrorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mirror_ServiceDesc, srv)
}

func _Mirror_CreateMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMirrorSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).CreateMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mirror_CreateMirrorSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).CreateMirrorSession(ctx, req.(*CreateMirrorSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_RemoveMirrorSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMirrorSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).RemoveMirrorSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mirror_RemoveMirrorSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).RemoveMirrorSession(ctx, req.(*RemoveMirrorSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_SetMirrorSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMirrorSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).SetMirrorSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mirror_SetMirrorSessionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).SetMirrorSessionAttribute(ctx, req.(*SetMirrorSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mirror_GetMirrorSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMirrorSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).GetMirrorSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mirror_GetMirrorSessionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).GetMirrorSessionAttribute(ctx, req.(*GetMirrorSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mirror_ServiceDesc is the grpc.ServiceDesc for Mirror service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mirror_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Mirror",
	HandlerType: (*MirrorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMirrorSession",
			Handler:    _Mirror_CreateMirrorSession_Handler,
		},
		{
			MethodName: "RemoveMirrorSession",
			Handler:    _Mirror_RemoveMirrorSession_Handler,
		},
		{
			MethodName: "SetMirrorSessionAttribute",
			Handler:    _Mirror_SetMirrorSessionAttribute_Handler,
		},
		{
			MethodName: "GetMirrorSessionAttribute",
			Handler:    _Mirror_GetMirrorSessionAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/mirror.proto",
}
