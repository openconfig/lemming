// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/generic_programmable.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GenericProgrammable_CreateGenericProgrammable_FullMethodName       = "/lemming.dataplane.sai.GenericProgrammable/CreateGenericProgrammable"
	GenericProgrammable_RemoveGenericProgrammable_FullMethodName       = "/lemming.dataplane.sai.GenericProgrammable/RemoveGenericProgrammable"
	GenericProgrammable_SetGenericProgrammableAttribute_FullMethodName = "/lemming.dataplane.sai.GenericProgrammable/SetGenericProgrammableAttribute"
	GenericProgrammable_GetGenericProgrammableAttribute_FullMethodName = "/lemming.dataplane.sai.GenericProgrammable/GetGenericProgrammableAttribute"
)

// GenericProgrammableClient is the client API for GenericProgrammable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenericProgrammableClient interface {
	CreateGenericProgrammable(ctx context.Context, in *CreateGenericProgrammableRequest, opts ...grpc.CallOption) (*CreateGenericProgrammableResponse, error)
	RemoveGenericProgrammable(ctx context.Context, in *RemoveGenericProgrammableRequest, opts ...grpc.CallOption) (*RemoveGenericProgrammableResponse, error)
	SetGenericProgrammableAttribute(ctx context.Context, in *SetGenericProgrammableAttributeRequest, opts ...grpc.CallOption) (*SetGenericProgrammableAttributeResponse, error)
	GetGenericProgrammableAttribute(ctx context.Context, in *GetGenericProgrammableAttributeRequest, opts ...grpc.CallOption) (*GetGenericProgrammableAttributeResponse, error)
}

type genericProgrammableClient struct {
	cc grpc.ClientConnInterface
}

func NewGenericProgrammableClient(cc grpc.ClientConnInterface) GenericProgrammableClient {
	return &genericProgrammableClient{cc}
}

func (c *genericProgrammableClient) CreateGenericProgrammable(ctx context.Context, in *CreateGenericProgrammableRequest, opts ...grpc.CallOption) (*CreateGenericProgrammableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGenericProgrammableResponse)
	err := c.cc.Invoke(ctx, GenericProgrammable_CreateGenericProgrammable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericProgrammableClient) RemoveGenericProgrammable(ctx context.Context, in *RemoveGenericProgrammableRequest, opts ...grpc.CallOption) (*RemoveGenericProgrammableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveGenericProgrammableResponse)
	err := c.cc.Invoke(ctx, GenericProgrammable_RemoveGenericProgrammable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericProgrammableClient) SetGenericProgrammableAttribute(ctx context.Context, in *SetGenericProgrammableAttributeRequest, opts ...grpc.CallOption) (*SetGenericProgrammableAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetGenericProgrammableAttributeResponse)
	err := c.cc.Invoke(ctx, GenericProgrammable_SetGenericProgrammableAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genericProgrammableClient) GetGenericProgrammableAttribute(ctx context.Context, in *GetGenericProgrammableAttributeRequest, opts ...grpc.CallOption) (*GetGenericProgrammableAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGenericProgrammableAttributeResponse)
	err := c.cc.Invoke(ctx, GenericProgrammable_GetGenericProgrammableAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenericProgrammableServer is the server API for GenericProgrammable service.
// All implementations should embed UnimplementedGenericProgrammableServer
// for forward compatibility.
type GenericProgrammableServer interface {
	CreateGenericProgrammable(context.Context, *CreateGenericProgrammableRequest) (*CreateGenericProgrammableResponse, error)
	RemoveGenericProgrammable(context.Context, *RemoveGenericProgrammableRequest) (*RemoveGenericProgrammableResponse, error)
	SetGenericProgrammableAttribute(context.Context, *SetGenericProgrammableAttributeRequest) (*SetGenericProgrammableAttributeResponse, error)
	GetGenericProgrammableAttribute(context.Context, *GetGenericProgrammableAttributeRequest) (*GetGenericProgrammableAttributeResponse, error)
}

// UnimplementedGenericProgrammableServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGenericProgrammableServer struct{}

func (UnimplementedGenericProgrammableServer) CreateGenericProgrammable(context.Context, *CreateGenericProgrammableRequest) (*CreateGenericProgrammableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenericProgrammable not implemented")
}
func (UnimplementedGenericProgrammableServer) RemoveGenericProgrammable(context.Context, *RemoveGenericProgrammableRequest) (*RemoveGenericProgrammableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGenericProgrammable not implemented")
}
func (UnimplementedGenericProgrammableServer) SetGenericProgrammableAttribute(context.Context, *SetGenericProgrammableAttributeRequest) (*SetGenericProgrammableAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGenericProgrammableAttribute not implemented")
}
func (UnimplementedGenericProgrammableServer) GetGenericProgrammableAttribute(context.Context, *GetGenericProgrammableAttributeRequest) (*GetGenericProgrammableAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenericProgrammableAttribute not implemented")
}
func (UnimplementedGenericProgrammableServer) testEmbeddedByValue() {}

// UnsafeGenericProgrammableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenericProgrammableServer will
// result in compilation errors.
type UnsafeGenericProgrammableServer interface {
	mustEmbedUnimplementedGenericProgrammableServer()
}

func RegisterGenericProgrammableServer(s grpc.ServiceRegistrar, srv GenericProgrammableServer) {
	// If the following call pancis, it indicates UnimplementedGenericProgrammableServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GenericProgrammable_ServiceDesc, srv)
}

func _GenericProgrammable_CreateGenericProgrammable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenericProgrammableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericProgrammableServer).CreateGenericProgrammable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenericProgrammable_CreateGenericProgrammable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericProgrammableServer).CreateGenericProgrammable(ctx, req.(*CreateGenericProgrammableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenericProgrammable_RemoveGenericProgrammable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGenericProgrammableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericProgrammableServer).RemoveGenericProgrammable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenericProgrammable_RemoveGenericProgrammable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericProgrammableServer).RemoveGenericProgrammable(ctx, req.(*RemoveGenericProgrammableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenericProgrammable_SetGenericProgrammableAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGenericProgrammableAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericProgrammableServer).SetGenericProgrammableAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenericProgrammable_SetGenericProgrammableAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericProgrammableServer).SetGenericProgrammableAttribute(ctx, req.(*SetGenericProgrammableAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenericProgrammable_GetGenericProgrammableAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenericProgrammableAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericProgrammableServer).GetGenericProgrammableAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenericProgrammable_GetGenericProgrammableAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericProgrammableServer).GetGenericProgrammableAttribute(ctx, req.(*GetGenericProgrammableAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GenericProgrammable_ServiceDesc is the grpc.ServiceDesc for GenericProgrammable service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenericProgrammable_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.GenericProgrammable",
	HandlerType: (*GenericProgrammableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGenericProgrammable",
			Handler:    _GenericProgrammable_CreateGenericProgrammable_Handler,
		},
		{
			MethodName: "RemoveGenericProgrammable",
			Handler:    _GenericProgrammable_RemoveGenericProgrammable_Handler,
		},
		{
			MethodName: "SetGenericProgrammableAttribute",
			Handler:    _GenericProgrammable_SetGenericProgrammableAttribute_Handler,
		},
		{
			MethodName: "GetGenericProgrammableAttribute",
			Handler:    _GenericProgrammable_GetGenericProgrammableAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/generic_programmable.proto",
}
