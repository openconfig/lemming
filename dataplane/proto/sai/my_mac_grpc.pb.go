// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/my_mac.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MyMac_CreateMyMac_FullMethodName       = "/lemming.dataplane.sai.MyMac/CreateMyMac"
	MyMac_RemoveMyMac_FullMethodName       = "/lemming.dataplane.sai.MyMac/RemoveMyMac"
	MyMac_SetMyMacAttribute_FullMethodName = "/lemming.dataplane.sai.MyMac/SetMyMacAttribute"
	MyMac_GetMyMacAttribute_FullMethodName = "/lemming.dataplane.sai.MyMac/GetMyMacAttribute"
)

// MyMacClient is the client API for MyMac service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyMacClient interface {
	CreateMyMac(ctx context.Context, in *CreateMyMacRequest, opts ...grpc.CallOption) (*CreateMyMacResponse, error)
	RemoveMyMac(ctx context.Context, in *RemoveMyMacRequest, opts ...grpc.CallOption) (*RemoveMyMacResponse, error)
	SetMyMacAttribute(ctx context.Context, in *SetMyMacAttributeRequest, opts ...grpc.CallOption) (*SetMyMacAttributeResponse, error)
	GetMyMacAttribute(ctx context.Context, in *GetMyMacAttributeRequest, opts ...grpc.CallOption) (*GetMyMacAttributeResponse, error)
}

type myMacClient struct {
	cc grpc.ClientConnInterface
}

func NewMyMacClient(cc grpc.ClientConnInterface) MyMacClient {
	return &myMacClient{cc}
}

func (c *myMacClient) CreateMyMac(ctx context.Context, in *CreateMyMacRequest, opts ...grpc.CallOption) (*CreateMyMacResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMyMacResponse)
	err := c.cc.Invoke(ctx, MyMac_CreateMyMac_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myMacClient) RemoveMyMac(ctx context.Context, in *RemoveMyMacRequest, opts ...grpc.CallOption) (*RemoveMyMacResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMyMacResponse)
	err := c.cc.Invoke(ctx, MyMac_RemoveMyMac_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myMacClient) SetMyMacAttribute(ctx context.Context, in *SetMyMacAttributeRequest, opts ...grpc.CallOption) (*SetMyMacAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMyMacAttributeResponse)
	err := c.cc.Invoke(ctx, MyMac_SetMyMacAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myMacClient) GetMyMacAttribute(ctx context.Context, in *GetMyMacAttributeRequest, opts ...grpc.CallOption) (*GetMyMacAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMyMacAttributeResponse)
	err := c.cc.Invoke(ctx, MyMac_GetMyMacAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyMacServer is the server API for MyMac service.
// All implementations should embed UnimplementedMyMacServer
// for forward compatibility.
type MyMacServer interface {
	CreateMyMac(context.Context, *CreateMyMacRequest) (*CreateMyMacResponse, error)
	RemoveMyMac(context.Context, *RemoveMyMacRequest) (*RemoveMyMacResponse, error)
	SetMyMacAttribute(context.Context, *SetMyMacAttributeRequest) (*SetMyMacAttributeResponse, error)
	GetMyMacAttribute(context.Context, *GetMyMacAttributeRequest) (*GetMyMacAttributeResponse, error)
}

// UnimplementedMyMacServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMyMacServer struct{}

func (UnimplementedMyMacServer) CreateMyMac(context.Context, *CreateMyMacRequest) (*CreateMyMacResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMyMac not implemented")
}
func (UnimplementedMyMacServer) RemoveMyMac(context.Context, *RemoveMyMacRequest) (*RemoveMyMacResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMyMac not implemented")
}
func (UnimplementedMyMacServer) SetMyMacAttribute(context.Context, *SetMyMacAttributeRequest) (*SetMyMacAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyMacAttribute not implemented")
}
func (UnimplementedMyMacServer) GetMyMacAttribute(context.Context, *GetMyMacAttributeRequest) (*GetMyMacAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyMacAttribute not implemented")
}
func (UnimplementedMyMacServer) testEmbeddedByValue() {}

// UnsafeMyMacServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyMacServer will
// result in compilation errors.
type UnsafeMyMacServer interface {
	mustEmbedUnimplementedMyMacServer()
}

func RegisterMyMacServer(s grpc.ServiceRegistrar, srv MyMacServer) {
	// If the following call pancis, it indicates UnimplementedMyMacServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MyMac_ServiceDesc, srv)
}

func _MyMac_CreateMyMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMyMacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMacServer).CreateMyMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyMac_CreateMyMac_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMacServer).CreateMyMac(ctx, req.(*CreateMyMacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyMac_RemoveMyMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMyMacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMacServer).RemoveMyMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyMac_RemoveMyMac_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMacServer).RemoveMyMac(ctx, req.(*RemoveMyMacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyMac_SetMyMacAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMyMacAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMacServer).SetMyMacAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyMac_SetMyMacAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMacServer).SetMyMacAttribute(ctx, req.(*SetMyMacAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyMac_GetMyMacAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyMacAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyMacServer).GetMyMacAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyMac_GetMyMacAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyMacServer).GetMyMacAttribute(ctx, req.(*GetMyMacAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MyMac_ServiceDesc is the grpc.ServiceDesc for MyMac service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyMac_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.MyMac",
	HandlerType: (*MyMacServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMyMac",
			Handler:    _MyMac_CreateMyMac_Handler,
		},
		{
			MethodName: "RemoveMyMac",
			Handler:    _MyMac_RemoveMyMac_Handler,
		},
		{
			MethodName: "SetMyMacAttribute",
			Handler:    _MyMac_SetMyMacAttribute_Handler,
		},
		{
			MethodName: "GetMyMacAttribute",
			Handler:    _MyMac_GetMyMacAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/my_mac.proto",
}
