// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/lag.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Lag_CreateLag_FullMethodName             = "/lemming.dataplane.sai.Lag/CreateLag"
	Lag_RemoveLag_FullMethodName             = "/lemming.dataplane.sai.Lag/RemoveLag"
	Lag_SetLagAttribute_FullMethodName       = "/lemming.dataplane.sai.Lag/SetLagAttribute"
	Lag_GetLagAttribute_FullMethodName       = "/lemming.dataplane.sai.Lag/GetLagAttribute"
	Lag_CreateLagMember_FullMethodName       = "/lemming.dataplane.sai.Lag/CreateLagMember"
	Lag_RemoveLagMember_FullMethodName       = "/lemming.dataplane.sai.Lag/RemoveLagMember"
	Lag_SetLagMemberAttribute_FullMethodName = "/lemming.dataplane.sai.Lag/SetLagMemberAttribute"
	Lag_GetLagMemberAttribute_FullMethodName = "/lemming.dataplane.sai.Lag/GetLagMemberAttribute"
	Lag_CreateLagMembers_FullMethodName      = "/lemming.dataplane.sai.Lag/CreateLagMembers"
	Lag_RemoveLagMembers_FullMethodName      = "/lemming.dataplane.sai.Lag/RemoveLagMembers"
)

// LagClient is the client API for Lag service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LagClient interface {
	CreateLag(ctx context.Context, in *CreateLagRequest, opts ...grpc.CallOption) (*CreateLagResponse, error)
	RemoveLag(ctx context.Context, in *RemoveLagRequest, opts ...grpc.CallOption) (*RemoveLagResponse, error)
	SetLagAttribute(ctx context.Context, in *SetLagAttributeRequest, opts ...grpc.CallOption) (*SetLagAttributeResponse, error)
	GetLagAttribute(ctx context.Context, in *GetLagAttributeRequest, opts ...grpc.CallOption) (*GetLagAttributeResponse, error)
	CreateLagMember(ctx context.Context, in *CreateLagMemberRequest, opts ...grpc.CallOption) (*CreateLagMemberResponse, error)
	RemoveLagMember(ctx context.Context, in *RemoveLagMemberRequest, opts ...grpc.CallOption) (*RemoveLagMemberResponse, error)
	SetLagMemberAttribute(ctx context.Context, in *SetLagMemberAttributeRequest, opts ...grpc.CallOption) (*SetLagMemberAttributeResponse, error)
	GetLagMemberAttribute(ctx context.Context, in *GetLagMemberAttributeRequest, opts ...grpc.CallOption) (*GetLagMemberAttributeResponse, error)
	CreateLagMembers(ctx context.Context, in *CreateLagMembersRequest, opts ...grpc.CallOption) (*CreateLagMembersResponse, error)
	RemoveLagMembers(ctx context.Context, in *RemoveLagMembersRequest, opts ...grpc.CallOption) (*RemoveLagMembersResponse, error)
}

type lagClient struct {
	cc grpc.ClientConnInterface
}

func NewLagClient(cc grpc.ClientConnInterface) LagClient {
	return &lagClient{cc}
}

func (c *lagClient) CreateLag(ctx context.Context, in *CreateLagRequest, opts ...grpc.CallOption) (*CreateLagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLagResponse)
	err := c.cc.Invoke(ctx, Lag_CreateLag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lagClient) RemoveLag(ctx context.Context, in *RemoveLagRequest, opts ...grpc.CallOption) (*RemoveLagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveLagResponse)
	err := c.cc.Invoke(ctx, Lag_RemoveLag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lagClient) SetLagAttribute(ctx context.Context, in *SetLagAttributeRequest, opts ...grpc.CallOption) (*SetLagAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLagAttributeResponse)
	err := c.cc.Invoke(ctx, Lag_SetLagAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lagClient) GetLagAttribute(ctx context.Context, in *GetLagAttributeRequest, opts ...grpc.CallOption) (*GetLagAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLagAttributeResponse)
	err := c.cc.Invoke(ctx, Lag_GetLagAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lagClient) CreateLagMember(ctx context.Context, in *CreateLagMemberRequest, opts ...grpc.CallOption) (*CreateLagMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLagMemberResponse)
	err := c.cc.Invoke(ctx, Lag_CreateLagMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lagClient) RemoveLagMember(ctx context.Context, in *RemoveLagMemberRequest, opts ...grpc.CallOption) (*RemoveLagMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveLagMemberResponse)
	err := c.cc.Invoke(ctx, Lag_RemoveLagMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lagClient) SetLagMemberAttribute(ctx context.Context, in *SetLagMemberAttributeRequest, opts ...grpc.CallOption) (*SetLagMemberAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLagMemberAttributeResponse)
	err := c.cc.Invoke(ctx, Lag_SetLagMemberAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lagClient) GetLagMemberAttribute(ctx context.Context, in *GetLagMemberAttributeRequest, opts ...grpc.CallOption) (*GetLagMemberAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLagMemberAttributeResponse)
	err := c.cc.Invoke(ctx, Lag_GetLagMemberAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lagClient) CreateLagMembers(ctx context.Context, in *CreateLagMembersRequest, opts ...grpc.CallOption) (*CreateLagMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLagMembersResponse)
	err := c.cc.Invoke(ctx, Lag_CreateLagMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lagClient) RemoveLagMembers(ctx context.Context, in *RemoveLagMembersRequest, opts ...grpc.CallOption) (*RemoveLagMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveLagMembersResponse)
	err := c.cc.Invoke(ctx, Lag_RemoveLagMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LagServer is the server API for Lag service.
// All implementations should embed UnimplementedLagServer
// for forward compatibility.
type LagServer interface {
	CreateLag(context.Context, *CreateLagRequest) (*CreateLagResponse, error)
	RemoveLag(context.Context, *RemoveLagRequest) (*RemoveLagResponse, error)
	SetLagAttribute(context.Context, *SetLagAttributeRequest) (*SetLagAttributeResponse, error)
	GetLagAttribute(context.Context, *GetLagAttributeRequest) (*GetLagAttributeResponse, error)
	CreateLagMember(context.Context, *CreateLagMemberRequest) (*CreateLagMemberResponse, error)
	RemoveLagMember(context.Context, *RemoveLagMemberRequest) (*RemoveLagMemberResponse, error)
	SetLagMemberAttribute(context.Context, *SetLagMemberAttributeRequest) (*SetLagMemberAttributeResponse, error)
	GetLagMemberAttribute(context.Context, *GetLagMemberAttributeRequest) (*GetLagMemberAttributeResponse, error)
	CreateLagMembers(context.Context, *CreateLagMembersRequest) (*CreateLagMembersResponse, error)
	RemoveLagMembers(context.Context, *RemoveLagMembersRequest) (*RemoveLagMembersResponse, error)
}

// UnimplementedLagServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLagServer struct{}

func (UnimplementedLagServer) CreateLag(context.Context, *CreateLagRequest) (*CreateLagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLag not implemented")
}
func (UnimplementedLagServer) RemoveLag(context.Context, *RemoveLagRequest) (*RemoveLagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLag not implemented")
}
func (UnimplementedLagServer) SetLagAttribute(context.Context, *SetLagAttributeRequest) (*SetLagAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLagAttribute not implemented")
}
func (UnimplementedLagServer) GetLagAttribute(context.Context, *GetLagAttributeRequest) (*GetLagAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLagAttribute not implemented")
}
func (UnimplementedLagServer) CreateLagMember(context.Context, *CreateLagMemberRequest) (*CreateLagMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLagMember not implemented")
}
func (UnimplementedLagServer) RemoveLagMember(context.Context, *RemoveLagMemberRequest) (*RemoveLagMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLagMember not implemented")
}
func (UnimplementedLagServer) SetLagMemberAttribute(context.Context, *SetLagMemberAttributeRequest) (*SetLagMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLagMemberAttribute not implemented")
}
func (UnimplementedLagServer) GetLagMemberAttribute(context.Context, *GetLagMemberAttributeRequest) (*GetLagMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLagMemberAttribute not implemented")
}
func (UnimplementedLagServer) CreateLagMembers(context.Context, *CreateLagMembersRequest) (*CreateLagMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLagMembers not implemented")
}
func (UnimplementedLagServer) RemoveLagMembers(context.Context, *RemoveLagMembersRequest) (*RemoveLagMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveLagMembers not implemented")
}
func (UnimplementedLagServer) testEmbeddedByValue() {}

// UnsafeLagServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LagServer will
// result in compilation errors.
type UnsafeLagServer interface {
	mustEmbedUnimplementedLagServer()
}

func RegisterLagServer(s grpc.ServiceRegistrar, srv LagServer) {
	// If the following call pancis, it indicates UnimplementedLagServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Lag_ServiceDesc, srv)
}

func _Lag_CreateLag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LagServer).CreateLag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lag_CreateLag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LagServer).CreateLag(ctx, req.(*CreateLagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lag_RemoveLag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LagServer).RemoveLag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lag_RemoveLag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LagServer).RemoveLag(ctx, req.(*RemoveLagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lag_SetLagAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLagAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LagServer).SetLagAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lag_SetLagAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LagServer).SetLagAttribute(ctx, req.(*SetLagAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lag_GetLagAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLagAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LagServer).GetLagAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lag_GetLagAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LagServer).GetLagAttribute(ctx, req.(*GetLagAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lag_CreateLagMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLagMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LagServer).CreateLagMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lag_CreateLagMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LagServer).CreateLagMember(ctx, req.(*CreateLagMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lag_RemoveLagMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLagMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LagServer).RemoveLagMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lag_RemoveLagMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LagServer).RemoveLagMember(ctx, req.(*RemoveLagMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lag_SetLagMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLagMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LagServer).SetLagMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lag_SetLagMemberAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LagServer).SetLagMemberAttribute(ctx, req.(*SetLagMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lag_GetLagMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLagMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LagServer).GetLagMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lag_GetLagMemberAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LagServer).GetLagMemberAttribute(ctx, req.(*GetLagMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lag_CreateLagMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLagMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LagServer).CreateLagMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lag_CreateLagMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LagServer).CreateLagMembers(ctx, req.(*CreateLagMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lag_RemoveLagMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveLagMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LagServer).RemoveLagMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lag_RemoveLagMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LagServer).RemoveLagMembers(ctx, req.(*RemoveLagMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lag_ServiceDesc is the grpc.ServiceDesc for Lag service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lag_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Lag",
	HandlerType: (*LagServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLag",
			Handler:    _Lag_CreateLag_Handler,
		},
		{
			MethodName: "RemoveLag",
			Handler:    _Lag_RemoveLag_Handler,
		},
		{
			MethodName: "SetLagAttribute",
			Handler:    _Lag_SetLagAttribute_Handler,
		},
		{
			MethodName: "GetLagAttribute",
			Handler:    _Lag_GetLagAttribute_Handler,
		},
		{
			MethodName: "CreateLagMember",
			Handler:    _Lag_CreateLagMember_Handler,
		},
		{
			MethodName: "RemoveLagMember",
			Handler:    _Lag_RemoveLagMember_Handler,
		},
		{
			MethodName: "SetLagMemberAttribute",
			Handler:    _Lag_SetLagMemberAttribute_Handler,
		},
		{
			MethodName: "GetLagMemberAttribute",
			Handler:    _Lag_GetLagMemberAttribute_Handler,
		},
		{
			MethodName: "CreateLagMembers",
			Handler:    _Lag_CreateLagMembers_Handler,
		},
		{
			MethodName: "RemoveLagMembers",
			Handler:    _Lag_RemoveLagMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/lag.proto",
}
