// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/bfd.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bfd_CreateBfdSession_FullMethodName       = "/lemming.dataplane.sai.Bfd/CreateBfdSession"
	Bfd_RemoveBfdSession_FullMethodName       = "/lemming.dataplane.sai.Bfd/RemoveBfdSession"
	Bfd_SetBfdSessionAttribute_FullMethodName = "/lemming.dataplane.sai.Bfd/SetBfdSessionAttribute"
	Bfd_GetBfdSessionAttribute_FullMethodName = "/lemming.dataplane.sai.Bfd/GetBfdSessionAttribute"
	Bfd_GetBfdSessionStats_FullMethodName     = "/lemming.dataplane.sai.Bfd/GetBfdSessionStats"
)

// BfdClient is the client API for Bfd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BfdClient interface {
	CreateBfdSession(ctx context.Context, in *CreateBfdSessionRequest, opts ...grpc.CallOption) (*CreateBfdSessionResponse, error)
	RemoveBfdSession(ctx context.Context, in *RemoveBfdSessionRequest, opts ...grpc.CallOption) (*RemoveBfdSessionResponse, error)
	SetBfdSessionAttribute(ctx context.Context, in *SetBfdSessionAttributeRequest, opts ...grpc.CallOption) (*SetBfdSessionAttributeResponse, error)
	GetBfdSessionAttribute(ctx context.Context, in *GetBfdSessionAttributeRequest, opts ...grpc.CallOption) (*GetBfdSessionAttributeResponse, error)
	GetBfdSessionStats(ctx context.Context, in *GetBfdSessionStatsRequest, opts ...grpc.CallOption) (*GetBfdSessionStatsResponse, error)
}

type bfdClient struct {
	cc grpc.ClientConnInterface
}

func NewBfdClient(cc grpc.ClientConnInterface) BfdClient {
	return &bfdClient{cc}
}

func (c *bfdClient) CreateBfdSession(ctx context.Context, in *CreateBfdSessionRequest, opts ...grpc.CallOption) (*CreateBfdSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBfdSessionResponse)
	err := c.cc.Invoke(ctx, Bfd_CreateBfdSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdClient) RemoveBfdSession(ctx context.Context, in *RemoveBfdSessionRequest, opts ...grpc.CallOption) (*RemoveBfdSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveBfdSessionResponse)
	err := c.cc.Invoke(ctx, Bfd_RemoveBfdSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdClient) SetBfdSessionAttribute(ctx context.Context, in *SetBfdSessionAttributeRequest, opts ...grpc.CallOption) (*SetBfdSessionAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetBfdSessionAttributeResponse)
	err := c.cc.Invoke(ctx, Bfd_SetBfdSessionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdClient) GetBfdSessionAttribute(ctx context.Context, in *GetBfdSessionAttributeRequest, opts ...grpc.CallOption) (*GetBfdSessionAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBfdSessionAttributeResponse)
	err := c.cc.Invoke(ctx, Bfd_GetBfdSessionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdClient) GetBfdSessionStats(ctx context.Context, in *GetBfdSessionStatsRequest, opts ...grpc.CallOption) (*GetBfdSessionStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBfdSessionStatsResponse)
	err := c.cc.Invoke(ctx, Bfd_GetBfdSessionStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BfdServer is the server API for Bfd service.
// All implementations should embed UnimplementedBfdServer
// for forward compatibility.
type BfdServer interface {
	CreateBfdSession(context.Context, *CreateBfdSessionRequest) (*CreateBfdSessionResponse, error)
	RemoveBfdSession(context.Context, *RemoveBfdSessionRequest) (*RemoveBfdSessionResponse, error)
	SetBfdSessionAttribute(context.Context, *SetBfdSessionAttributeRequest) (*SetBfdSessionAttributeResponse, error)
	GetBfdSessionAttribute(context.Context, *GetBfdSessionAttributeRequest) (*GetBfdSessionAttributeResponse, error)
	GetBfdSessionStats(context.Context, *GetBfdSessionStatsRequest) (*GetBfdSessionStatsResponse, error)
}

// UnimplementedBfdServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBfdServer struct{}

func (UnimplementedBfdServer) CreateBfdSession(context.Context, *CreateBfdSessionRequest) (*CreateBfdSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBfdSession not implemented")
}
func (UnimplementedBfdServer) RemoveBfdSession(context.Context, *RemoveBfdSessionRequest) (*RemoveBfdSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBfdSession not implemented")
}
func (UnimplementedBfdServer) SetBfdSessionAttribute(context.Context, *SetBfdSessionAttributeRequest) (*SetBfdSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBfdSessionAttribute not implemented")
}
func (UnimplementedBfdServer) GetBfdSessionAttribute(context.Context, *GetBfdSessionAttributeRequest) (*GetBfdSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBfdSessionAttribute not implemented")
}
func (UnimplementedBfdServer) GetBfdSessionStats(context.Context, *GetBfdSessionStatsRequest) (*GetBfdSessionStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBfdSessionStats not implemented")
}
func (UnimplementedBfdServer) testEmbeddedByValue() {}

// UnsafeBfdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BfdServer will
// result in compilation errors.
type UnsafeBfdServer interface {
	mustEmbedUnimplementedBfdServer()
}

func RegisterBfdServer(s grpc.ServiceRegistrar, srv BfdServer) {
	// If the following call pancis, it indicates UnimplementedBfdServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bfd_ServiceDesc, srv)
}

func _Bfd_CreateBfdSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBfdSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdServer).CreateBfdSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bfd_CreateBfdSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdServer).CreateBfdSession(ctx, req.(*CreateBfdSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bfd_RemoveBfdSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBfdSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdServer).RemoveBfdSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bfd_RemoveBfdSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdServer).RemoveBfdSession(ctx, req.(*RemoveBfdSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bfd_SetBfdSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBfdSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdServer).SetBfdSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bfd_SetBfdSessionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdServer).SetBfdSessionAttribute(ctx, req.(*SetBfdSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bfd_GetBfdSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBfdSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdServer).GetBfdSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bfd_GetBfdSessionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdServer).GetBfdSessionAttribute(ctx, req.(*GetBfdSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bfd_GetBfdSessionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBfdSessionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdServer).GetBfdSessionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bfd_GetBfdSessionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdServer).GetBfdSessionStats(ctx, req.(*GetBfdSessionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bfd_ServiceDesc is the grpc.ServiceDesc for Bfd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bfd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Bfd",
	HandlerType: (*BfdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBfdSession",
			Handler:    _Bfd_CreateBfdSession_Handler,
		},
		{
			MethodName: "RemoveBfdSession",
			Handler:    _Bfd_RemoveBfdSession_Handler,
		},
		{
			MethodName: "SetBfdSessionAttribute",
			Handler:    _Bfd_SetBfdSessionAttribute_Handler,
		},
		{
			MethodName: "GetBfdSessionAttribute",
			Handler:    _Bfd_GetBfdSessionAttribute_Handler,
		},
		{
			MethodName: "GetBfdSessionStats",
			Handler:    _Bfd_GetBfdSessionStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/bfd.proto",
}
