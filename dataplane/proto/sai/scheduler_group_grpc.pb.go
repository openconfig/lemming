// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/scheduler_group.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SchedulerGroup_CreateSchedulerGroup_FullMethodName       = "/lemming.dataplane.sai.SchedulerGroup/CreateSchedulerGroup"
	SchedulerGroup_RemoveSchedulerGroup_FullMethodName       = "/lemming.dataplane.sai.SchedulerGroup/RemoveSchedulerGroup"
	SchedulerGroup_SetSchedulerGroupAttribute_FullMethodName = "/lemming.dataplane.sai.SchedulerGroup/SetSchedulerGroupAttribute"
	SchedulerGroup_GetSchedulerGroupAttribute_FullMethodName = "/lemming.dataplane.sai.SchedulerGroup/GetSchedulerGroupAttribute"
)

// SchedulerGroupClient is the client API for SchedulerGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerGroupClient interface {
	CreateSchedulerGroup(ctx context.Context, in *CreateSchedulerGroupRequest, opts ...grpc.CallOption) (*CreateSchedulerGroupResponse, error)
	RemoveSchedulerGroup(ctx context.Context, in *RemoveSchedulerGroupRequest, opts ...grpc.CallOption) (*RemoveSchedulerGroupResponse, error)
	SetSchedulerGroupAttribute(ctx context.Context, in *SetSchedulerGroupAttributeRequest, opts ...grpc.CallOption) (*SetSchedulerGroupAttributeResponse, error)
	GetSchedulerGroupAttribute(ctx context.Context, in *GetSchedulerGroupAttributeRequest, opts ...grpc.CallOption) (*GetSchedulerGroupAttributeResponse, error)
}

type schedulerGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerGroupClient(cc grpc.ClientConnInterface) SchedulerGroupClient {
	return &schedulerGroupClient{cc}
}

func (c *schedulerGroupClient) CreateSchedulerGroup(ctx context.Context, in *CreateSchedulerGroupRequest, opts ...grpc.CallOption) (*CreateSchedulerGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSchedulerGroupResponse)
	err := c.cc.Invoke(ctx, SchedulerGroup_CreateSchedulerGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerGroupClient) RemoveSchedulerGroup(ctx context.Context, in *RemoveSchedulerGroupRequest, opts ...grpc.CallOption) (*RemoveSchedulerGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSchedulerGroupResponse)
	err := c.cc.Invoke(ctx, SchedulerGroup_RemoveSchedulerGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerGroupClient) SetSchedulerGroupAttribute(ctx context.Context, in *SetSchedulerGroupAttributeRequest, opts ...grpc.CallOption) (*SetSchedulerGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSchedulerGroupAttributeResponse)
	err := c.cc.Invoke(ctx, SchedulerGroup_SetSchedulerGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerGroupClient) GetSchedulerGroupAttribute(ctx context.Context, in *GetSchedulerGroupAttributeRequest, opts ...grpc.CallOption) (*GetSchedulerGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchedulerGroupAttributeResponse)
	err := c.cc.Invoke(ctx, SchedulerGroup_GetSchedulerGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerGroupServer is the server API for SchedulerGroup service.
// All implementations should embed UnimplementedSchedulerGroupServer
// for forward compatibility.
type SchedulerGroupServer interface {
	CreateSchedulerGroup(context.Context, *CreateSchedulerGroupRequest) (*CreateSchedulerGroupResponse, error)
	RemoveSchedulerGroup(context.Context, *RemoveSchedulerGroupRequest) (*RemoveSchedulerGroupResponse, error)
	SetSchedulerGroupAttribute(context.Context, *SetSchedulerGroupAttributeRequest) (*SetSchedulerGroupAttributeResponse, error)
	GetSchedulerGroupAttribute(context.Context, *GetSchedulerGroupAttributeRequest) (*GetSchedulerGroupAttributeResponse, error)
}

// UnimplementedSchedulerGroupServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchedulerGroupServer struct{}

func (UnimplementedSchedulerGroupServer) CreateSchedulerGroup(context.Context, *CreateSchedulerGroupRequest) (*CreateSchedulerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedulerGroup not implemented")
}
func (UnimplementedSchedulerGroupServer) RemoveSchedulerGroup(context.Context, *RemoveSchedulerGroupRequest) (*RemoveSchedulerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSchedulerGroup not implemented")
}
func (UnimplementedSchedulerGroupServer) SetSchedulerGroupAttribute(context.Context, *SetSchedulerGroupAttributeRequest) (*SetSchedulerGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchedulerGroupAttribute not implemented")
}
func (UnimplementedSchedulerGroupServer) GetSchedulerGroupAttribute(context.Context, *GetSchedulerGroupAttributeRequest) (*GetSchedulerGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerGroupAttribute not implemented")
}
func (UnimplementedSchedulerGroupServer) testEmbeddedByValue() {}

// UnsafeSchedulerGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerGroupServer will
// result in compilation errors.
type UnsafeSchedulerGroupServer interface {
	mustEmbedUnimplementedSchedulerGroupServer()
}

func RegisterSchedulerGroupServer(s grpc.ServiceRegistrar, srv SchedulerGroupServer) {
	// If the following call pancis, it indicates UnimplementedSchedulerGroupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SchedulerGroup_ServiceDesc, srv)
}

func _SchedulerGroup_CreateSchedulerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchedulerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerGroupServer).CreateSchedulerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerGroup_CreateSchedulerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerGroupServer).CreateSchedulerGroup(ctx, req.(*CreateSchedulerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerGroup_RemoveSchedulerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSchedulerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerGroupServer).RemoveSchedulerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerGroup_RemoveSchedulerGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerGroupServer).RemoveSchedulerGroup(ctx, req.(*RemoveSchedulerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerGroup_SetSchedulerGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSchedulerGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerGroupServer).SetSchedulerGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerGroup_SetSchedulerGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerGroupServer).SetSchedulerGroupAttribute(ctx, req.(*SetSchedulerGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerGroup_GetSchedulerGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulerGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerGroupServer).GetSchedulerGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerGroup_GetSchedulerGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerGroupServer).GetSchedulerGroupAttribute(ctx, req.(*GetSchedulerGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulerGroup_ServiceDesc is the grpc.ServiceDesc for SchedulerGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulerGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.SchedulerGroup",
	HandlerType: (*SchedulerGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchedulerGroup",
			Handler:    _SchedulerGroup_CreateSchedulerGroup_Handler,
		},
		{
			MethodName: "RemoveSchedulerGroup",
			Handler:    _SchedulerGroup_RemoveSchedulerGroup_Handler,
		},
		{
			MethodName: "SetSchedulerGroupAttribute",
			Handler:    _SchedulerGroup_SetSchedulerGroupAttribute_Handler,
		},
		{
			MethodName: "GetSchedulerGroupAttribute",
			Handler:    _SchedulerGroup_GetSchedulerGroupAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/scheduler_group.proto",
}
