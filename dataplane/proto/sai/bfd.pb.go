// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/proto/sai/bfd.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BfdSessionAttr int32

const (
	BfdSessionAttr_BFD_SESSION_ATTR_UNSPECIFIED            BfdSessionAttr = 0
	BfdSessionAttr_BFD_SESSION_ATTR_TYPE                   BfdSessionAttr = 1
	BfdSessionAttr_BFD_SESSION_ATTR_HW_LOOKUP_VALID        BfdSessionAttr = 2
	BfdSessionAttr_BFD_SESSION_ATTR_VIRTUAL_ROUTER         BfdSessionAttr = 3
	BfdSessionAttr_BFD_SESSION_ATTR_PORT                   BfdSessionAttr = 4
	BfdSessionAttr_BFD_SESSION_ATTR_LOCAL_DISCRIMINATOR    BfdSessionAttr = 5
	BfdSessionAttr_BFD_SESSION_ATTR_REMOTE_DISCRIMINATOR   BfdSessionAttr = 6
	BfdSessionAttr_BFD_SESSION_ATTR_UDP_SRC_PORT           BfdSessionAttr = 7
	BfdSessionAttr_BFD_SESSION_ATTR_TC                     BfdSessionAttr = 8
	BfdSessionAttr_BFD_SESSION_ATTR_VLAN_TPID              BfdSessionAttr = 9
	BfdSessionAttr_BFD_SESSION_ATTR_VLAN_ID                BfdSessionAttr = 10
	BfdSessionAttr_BFD_SESSION_ATTR_VLAN_PRI               BfdSessionAttr = 11
	BfdSessionAttr_BFD_SESSION_ATTR_VLAN_CFI               BfdSessionAttr = 12
	BfdSessionAttr_BFD_SESSION_ATTR_VLAN_HEADER_VALID      BfdSessionAttr = 13
	BfdSessionAttr_BFD_SESSION_ATTR_BFD_ENCAPSULATION_TYPE BfdSessionAttr = 14
	BfdSessionAttr_BFD_SESSION_ATTR_IPHDR_VERSION          BfdSessionAttr = 15
	BfdSessionAttr_BFD_SESSION_ATTR_TOS                    BfdSessionAttr = 16
	BfdSessionAttr_BFD_SESSION_ATTR_TTL                    BfdSessionAttr = 17
	BfdSessionAttr_BFD_SESSION_ATTR_SRC_IP_ADDRESS         BfdSessionAttr = 18
	BfdSessionAttr_BFD_SESSION_ATTR_DST_IP_ADDRESS         BfdSessionAttr = 19
	BfdSessionAttr_BFD_SESSION_ATTR_TUNNEL_TOS             BfdSessionAttr = 20
	BfdSessionAttr_BFD_SESSION_ATTR_TUNNEL_TTL             BfdSessionAttr = 21
	BfdSessionAttr_BFD_SESSION_ATTR_TUNNEL_SRC_IP_ADDRESS  BfdSessionAttr = 22
	BfdSessionAttr_BFD_SESSION_ATTR_TUNNEL_DST_IP_ADDRESS  BfdSessionAttr = 23
	BfdSessionAttr_BFD_SESSION_ATTR_SRC_MAC_ADDRESS        BfdSessionAttr = 24
	BfdSessionAttr_BFD_SESSION_ATTR_DST_MAC_ADDRESS        BfdSessionAttr = 25
	BfdSessionAttr_BFD_SESSION_ATTR_ECHO_ENABLE            BfdSessionAttr = 26
	BfdSessionAttr_BFD_SESSION_ATTR_MULTIHOP               BfdSessionAttr = 27
	BfdSessionAttr_BFD_SESSION_ATTR_CBIT                   BfdSessionAttr = 28
	BfdSessionAttr_BFD_SESSION_ATTR_MIN_TX                 BfdSessionAttr = 29
	BfdSessionAttr_BFD_SESSION_ATTR_MIN_RX                 BfdSessionAttr = 30
	BfdSessionAttr_BFD_SESSION_ATTR_MULTIPLIER             BfdSessionAttr = 31
	BfdSessionAttr_BFD_SESSION_ATTR_REMOTE_MIN_TX          BfdSessionAttr = 32
	BfdSessionAttr_BFD_SESSION_ATTR_REMOTE_MIN_RX          BfdSessionAttr = 33
	BfdSessionAttr_BFD_SESSION_ATTR_STATE                  BfdSessionAttr = 34
	BfdSessionAttr_BFD_SESSION_ATTR_OFFLOAD_TYPE           BfdSessionAttr = 35
	BfdSessionAttr_BFD_SESSION_ATTR_NEGOTIATED_TX          BfdSessionAttr = 36
	BfdSessionAttr_BFD_SESSION_ATTR_NEGOTIATED_RX          BfdSessionAttr = 37
	BfdSessionAttr_BFD_SESSION_ATTR_LOCAL_DIAG             BfdSessionAttr = 38
	BfdSessionAttr_BFD_SESSION_ATTR_REMOTE_DIAG            BfdSessionAttr = 39
	BfdSessionAttr_BFD_SESSION_ATTR_REMOTE_MULTIPLIER      BfdSessionAttr = 40
)

// Enum value maps for BfdSessionAttr.
var (
	BfdSessionAttr_name = map[int32]string{
		0:  "BFD_SESSION_ATTR_UNSPECIFIED",
		1:  "BFD_SESSION_ATTR_TYPE",
		2:  "BFD_SESSION_ATTR_HW_LOOKUP_VALID",
		3:  "BFD_SESSION_ATTR_VIRTUAL_ROUTER",
		4:  "BFD_SESSION_ATTR_PORT",
		5:  "BFD_SESSION_ATTR_LOCAL_DISCRIMINATOR",
		6:  "BFD_SESSION_ATTR_REMOTE_DISCRIMINATOR",
		7:  "BFD_SESSION_ATTR_UDP_SRC_PORT",
		8:  "BFD_SESSION_ATTR_TC",
		9:  "BFD_SESSION_ATTR_VLAN_TPID",
		10: "BFD_SESSION_ATTR_VLAN_ID",
		11: "BFD_SESSION_ATTR_VLAN_PRI",
		12: "BFD_SESSION_ATTR_VLAN_CFI",
		13: "BFD_SESSION_ATTR_VLAN_HEADER_VALID",
		14: "BFD_SESSION_ATTR_BFD_ENCAPSULATION_TYPE",
		15: "BFD_SESSION_ATTR_IPHDR_VERSION",
		16: "BFD_SESSION_ATTR_TOS",
		17: "BFD_SESSION_ATTR_TTL",
		18: "BFD_SESSION_ATTR_SRC_IP_ADDRESS",
		19: "BFD_SESSION_ATTR_DST_IP_ADDRESS",
		20: "BFD_SESSION_ATTR_TUNNEL_TOS",
		21: "BFD_SESSION_ATTR_TUNNEL_TTL",
		22: "BFD_SESSION_ATTR_TUNNEL_SRC_IP_ADDRESS",
		23: "BFD_SESSION_ATTR_TUNNEL_DST_IP_ADDRESS",
		24: "BFD_SESSION_ATTR_SRC_MAC_ADDRESS",
		25: "BFD_SESSION_ATTR_DST_MAC_ADDRESS",
		26: "BFD_SESSION_ATTR_ECHO_ENABLE",
		27: "BFD_SESSION_ATTR_MULTIHOP",
		28: "BFD_SESSION_ATTR_CBIT",
		29: "BFD_SESSION_ATTR_MIN_TX",
		30: "BFD_SESSION_ATTR_MIN_RX",
		31: "BFD_SESSION_ATTR_MULTIPLIER",
		32: "BFD_SESSION_ATTR_REMOTE_MIN_TX",
		33: "BFD_SESSION_ATTR_REMOTE_MIN_RX",
		34: "BFD_SESSION_ATTR_STATE",
		35: "BFD_SESSION_ATTR_OFFLOAD_TYPE",
		36: "BFD_SESSION_ATTR_NEGOTIATED_TX",
		37: "BFD_SESSION_ATTR_NEGOTIATED_RX",
		38: "BFD_SESSION_ATTR_LOCAL_DIAG",
		39: "BFD_SESSION_ATTR_REMOTE_DIAG",
		40: "BFD_SESSION_ATTR_REMOTE_MULTIPLIER",
	}
	BfdSessionAttr_value = map[string]int32{
		"BFD_SESSION_ATTR_UNSPECIFIED":            0,
		"BFD_SESSION_ATTR_TYPE":                   1,
		"BFD_SESSION_ATTR_HW_LOOKUP_VALID":        2,
		"BFD_SESSION_ATTR_VIRTUAL_ROUTER":         3,
		"BFD_SESSION_ATTR_PORT":                   4,
		"BFD_SESSION_ATTR_LOCAL_DISCRIMINATOR":    5,
		"BFD_SESSION_ATTR_REMOTE_DISCRIMINATOR":   6,
		"BFD_SESSION_ATTR_UDP_SRC_PORT":           7,
		"BFD_SESSION_ATTR_TC":                     8,
		"BFD_SESSION_ATTR_VLAN_TPID":              9,
		"BFD_SESSION_ATTR_VLAN_ID":                10,
		"BFD_SESSION_ATTR_VLAN_PRI":               11,
		"BFD_SESSION_ATTR_VLAN_CFI":               12,
		"BFD_SESSION_ATTR_VLAN_HEADER_VALID":      13,
		"BFD_SESSION_ATTR_BFD_ENCAPSULATION_TYPE": 14,
		"BFD_SESSION_ATTR_IPHDR_VERSION":          15,
		"BFD_SESSION_ATTR_TOS":                    16,
		"BFD_SESSION_ATTR_TTL":                    17,
		"BFD_SESSION_ATTR_SRC_IP_ADDRESS":         18,
		"BFD_SESSION_ATTR_DST_IP_ADDRESS":         19,
		"BFD_SESSION_ATTR_TUNNEL_TOS":             20,
		"BFD_SESSION_ATTR_TUNNEL_TTL":             21,
		"BFD_SESSION_ATTR_TUNNEL_SRC_IP_ADDRESS":  22,
		"BFD_SESSION_ATTR_TUNNEL_DST_IP_ADDRESS":  23,
		"BFD_SESSION_ATTR_SRC_MAC_ADDRESS":        24,
		"BFD_SESSION_ATTR_DST_MAC_ADDRESS":        25,
		"BFD_SESSION_ATTR_ECHO_ENABLE":            26,
		"BFD_SESSION_ATTR_MULTIHOP":               27,
		"BFD_SESSION_ATTR_CBIT":                   28,
		"BFD_SESSION_ATTR_MIN_TX":                 29,
		"BFD_SESSION_ATTR_MIN_RX":                 30,
		"BFD_SESSION_ATTR_MULTIPLIER":             31,
		"BFD_SESSION_ATTR_REMOTE_MIN_TX":          32,
		"BFD_SESSION_ATTR_REMOTE_MIN_RX":          33,
		"BFD_SESSION_ATTR_STATE":                  34,
		"BFD_SESSION_ATTR_OFFLOAD_TYPE":           35,
		"BFD_SESSION_ATTR_NEGOTIATED_TX":          36,
		"BFD_SESSION_ATTR_NEGOTIATED_RX":          37,
		"BFD_SESSION_ATTR_LOCAL_DIAG":             38,
		"BFD_SESSION_ATTR_REMOTE_DIAG":            39,
		"BFD_SESSION_ATTR_REMOTE_MULTIPLIER":      40,
	}
)

func (x BfdSessionAttr) Enum() *BfdSessionAttr {
	p := new(BfdSessionAttr)
	*p = x
	return p
}

func (x BfdSessionAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BfdSessionAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_bfd_proto_enumTypes[0].Descriptor()
}

func (BfdSessionAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_bfd_proto_enumTypes[0]
}

func (x BfdSessionAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BfdSessionAttr.Descriptor instead.
func (BfdSessionAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bfd_proto_rawDescGZIP(), []int{0}
}

type CreateBfdSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch               uint64                 `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type                 *BfdSessionType        `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.BfdSessionType,oneof" json:"type,omitempty"`
	HwLookupValid        *bool                  `protobuf:"varint,3,opt,name=hw_lookup_valid,json=hwLookupValid,proto3,oneof" json:"hw_lookup_valid,omitempty"`
	VirtualRouter        *uint64                `protobuf:"varint,4,opt,name=virtual_router,json=virtualRouter,proto3,oneof" json:"virtual_router,omitempty"`
	Port                 *uint64                `protobuf:"varint,5,opt,name=port,proto3,oneof" json:"port,omitempty"`
	LocalDiscriminator   *uint32                `protobuf:"varint,6,opt,name=local_discriminator,json=localDiscriminator,proto3,oneof" json:"local_discriminator,omitempty"`
	RemoteDiscriminator  *uint32                `protobuf:"varint,7,opt,name=remote_discriminator,json=remoteDiscriminator,proto3,oneof" json:"remote_discriminator,omitempty"`
	UdpSrcPort           *uint32                `protobuf:"varint,8,opt,name=udp_src_port,json=udpSrcPort,proto3,oneof" json:"udp_src_port,omitempty"`
	Tc                   *uint32                `protobuf:"varint,9,opt,name=tc,proto3,oneof" json:"tc,omitempty"`
	VlanTpid             *uint32                `protobuf:"varint,10,opt,name=vlan_tpid,json=vlanTpid,proto3,oneof" json:"vlan_tpid,omitempty"`
	VlanId               *uint32                `protobuf:"varint,11,opt,name=vlan_id,json=vlanId,proto3,oneof" json:"vlan_id,omitempty"`
	VlanPri              *uint32                `protobuf:"varint,12,opt,name=vlan_pri,json=vlanPri,proto3,oneof" json:"vlan_pri,omitempty"`
	VlanCfi              *uint32                `protobuf:"varint,13,opt,name=vlan_cfi,json=vlanCfi,proto3,oneof" json:"vlan_cfi,omitempty"`
	VlanHeaderValid      *bool                  `protobuf:"varint,14,opt,name=vlan_header_valid,json=vlanHeaderValid,proto3,oneof" json:"vlan_header_valid,omitempty"`
	BfdEncapsulationType *BfdEncapsulationType  `protobuf:"varint,15,opt,name=bfd_encapsulation_type,json=bfdEncapsulationType,proto3,enum=lemming.dataplane.sai.BfdEncapsulationType,oneof" json:"bfd_encapsulation_type,omitempty"`
	IphdrVersion         *uint32                `protobuf:"varint,16,opt,name=iphdr_version,json=iphdrVersion,proto3,oneof" json:"iphdr_version,omitempty"`
	Tos                  *uint32                `protobuf:"varint,17,opt,name=tos,proto3,oneof" json:"tos,omitempty"`
	Ttl                  *uint32                `protobuf:"varint,18,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
	SrcIpAddress         []byte                 `protobuf:"bytes,19,opt,name=src_ip_address,json=srcIpAddress,proto3,oneof" json:"src_ip_address,omitempty"`
	DstIpAddress         []byte                 `protobuf:"bytes,20,opt,name=dst_ip_address,json=dstIpAddress,proto3,oneof" json:"dst_ip_address,omitempty"`
	TunnelTos            *uint32                `protobuf:"varint,21,opt,name=tunnel_tos,json=tunnelTos,proto3,oneof" json:"tunnel_tos,omitempty"`
	TunnelTtl            *uint32                `protobuf:"varint,22,opt,name=tunnel_ttl,json=tunnelTtl,proto3,oneof" json:"tunnel_ttl,omitempty"`
	TunnelSrcIpAddress   []byte                 `protobuf:"bytes,23,opt,name=tunnel_src_ip_address,json=tunnelSrcIpAddress,proto3,oneof" json:"tunnel_src_ip_address,omitempty"`
	TunnelDstIpAddress   []byte                 `protobuf:"bytes,24,opt,name=tunnel_dst_ip_address,json=tunnelDstIpAddress,proto3,oneof" json:"tunnel_dst_ip_address,omitempty"`
	SrcMacAddress        []byte                 `protobuf:"bytes,25,opt,name=src_mac_address,json=srcMacAddress,proto3,oneof" json:"src_mac_address,omitempty"`
	DstMacAddress        []byte                 `protobuf:"bytes,26,opt,name=dst_mac_address,json=dstMacAddress,proto3,oneof" json:"dst_mac_address,omitempty"`
	EchoEnable           *bool                  `protobuf:"varint,27,opt,name=echo_enable,json=echoEnable,proto3,oneof" json:"echo_enable,omitempty"`
	Multihop             *bool                  `protobuf:"varint,28,opt,name=multihop,proto3,oneof" json:"multihop,omitempty"`
	Cbit                 *bool                  `protobuf:"varint,29,opt,name=cbit,proto3,oneof" json:"cbit,omitempty"`
	MinTx                *uint32                `protobuf:"varint,30,opt,name=min_tx,json=minTx,proto3,oneof" json:"min_tx,omitempty"`
	MinRx                *uint32                `protobuf:"varint,31,opt,name=min_rx,json=minRx,proto3,oneof" json:"min_rx,omitempty"`
	Multiplier           *uint32                `protobuf:"varint,32,opt,name=multiplier,proto3,oneof" json:"multiplier,omitempty"`
	OffloadType          *BfdSessionOffloadType `protobuf:"varint,33,opt,name=offload_type,json=offloadType,proto3,enum=lemming.dataplane.sai.BfdSessionOffloadType,oneof" json:"offload_type,omitempty"`
}

func (x *CreateBfdSessionRequest) Reset() {
	*x = CreateBfdSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBfdSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBfdSessionRequest) ProtoMessage() {}

func (x *CreateBfdSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBfdSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateBfdSessionRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bfd_proto_rawDescGZIP(), []int{0}
}

func (x *CreateBfdSessionRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetType() BfdSessionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return BfdSessionType_BFD_SESSION_TYPE_UNSPECIFIED
}

func (x *CreateBfdSessionRequest) GetHwLookupValid() bool {
	if x != nil && x.HwLookupValid != nil {
		return *x.HwLookupValid
	}
	return false
}

func (x *CreateBfdSessionRequest) GetVirtualRouter() uint64 {
	if x != nil && x.VirtualRouter != nil {
		return *x.VirtualRouter
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetPort() uint64 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetLocalDiscriminator() uint32 {
	if x != nil && x.LocalDiscriminator != nil {
		return *x.LocalDiscriminator
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetRemoteDiscriminator() uint32 {
	if x != nil && x.RemoteDiscriminator != nil {
		return *x.RemoteDiscriminator
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetUdpSrcPort() uint32 {
	if x != nil && x.UdpSrcPort != nil {
		return *x.UdpSrcPort
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetTc() uint32 {
	if x != nil && x.Tc != nil {
		return *x.Tc
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetVlanTpid() uint32 {
	if x != nil && x.VlanTpid != nil {
		return *x.VlanTpid
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetVlanId() uint32 {
	if x != nil && x.VlanId != nil {
		return *x.VlanId
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetVlanPri() uint32 {
	if x != nil && x.VlanPri != nil {
		return *x.VlanPri
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetVlanCfi() uint32 {
	if x != nil && x.VlanCfi != nil {
		return *x.VlanCfi
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetVlanHeaderValid() bool {
	if x != nil && x.VlanHeaderValid != nil {
		return *x.VlanHeaderValid
	}
	return false
}

func (x *CreateBfdSessionRequest) GetBfdEncapsulationType() BfdEncapsulationType {
	if x != nil && x.BfdEncapsulationType != nil {
		return *x.BfdEncapsulationType
	}
	return BfdEncapsulationType_BFD_ENCAPSULATION_TYPE_UNSPECIFIED
}

func (x *CreateBfdSessionRequest) GetIphdrVersion() uint32 {
	if x != nil && x.IphdrVersion != nil {
		return *x.IphdrVersion
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetTos() uint32 {
	if x != nil && x.Tos != nil {
		return *x.Tos
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetTtl() uint32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetSrcIpAddress() []byte {
	if x != nil {
		return x.SrcIpAddress
	}
	return nil
}

func (x *CreateBfdSessionRequest) GetDstIpAddress() []byte {
	if x != nil {
		return x.DstIpAddress
	}
	return nil
}

func (x *CreateBfdSessionRequest) GetTunnelTos() uint32 {
	if x != nil && x.TunnelTos != nil {
		return *x.TunnelTos
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetTunnelTtl() uint32 {
	if x != nil && x.TunnelTtl != nil {
		return *x.TunnelTtl
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetTunnelSrcIpAddress() []byte {
	if x != nil {
		return x.TunnelSrcIpAddress
	}
	return nil
}

func (x *CreateBfdSessionRequest) GetTunnelDstIpAddress() []byte {
	if x != nil {
		return x.TunnelDstIpAddress
	}
	return nil
}

func (x *CreateBfdSessionRequest) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *CreateBfdSessionRequest) GetDstMacAddress() []byte {
	if x != nil {
		return x.DstMacAddress
	}
	return nil
}

func (x *CreateBfdSessionRequest) GetEchoEnable() bool {
	if x != nil && x.EchoEnable != nil {
		return *x.EchoEnable
	}
	return false
}

func (x *CreateBfdSessionRequest) GetMultihop() bool {
	if x != nil && x.Multihop != nil {
		return *x.Multihop
	}
	return false
}

func (x *CreateBfdSessionRequest) GetCbit() bool {
	if x != nil && x.Cbit != nil {
		return *x.Cbit
	}
	return false
}

func (x *CreateBfdSessionRequest) GetMinTx() uint32 {
	if x != nil && x.MinTx != nil {
		return *x.MinTx
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetMinRx() uint32 {
	if x != nil && x.MinRx != nil {
		return *x.MinRx
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetMultiplier() uint32 {
	if x != nil && x.Multiplier != nil {
		return *x.Multiplier
	}
	return 0
}

func (x *CreateBfdSessionRequest) GetOffloadType() BfdSessionOffloadType {
	if x != nil && x.OffloadType != nil {
		return *x.OffloadType
	}
	return BfdSessionOffloadType_BFD_SESSION_OFFLOAD_TYPE_UNSPECIFIED
}

type CreateBfdSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateBfdSessionResponse) Reset() {
	*x = CreateBfdSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBfdSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBfdSessionResponse) ProtoMessage() {}

func (x *CreateBfdSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBfdSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateBfdSessionResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bfd_proto_rawDescGZIP(), []int{1}
}

func (x *CreateBfdSessionResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveBfdSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveBfdSessionRequest) Reset() {
	*x = RemoveBfdSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBfdSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBfdSessionRequest) ProtoMessage() {}

func (x *RemoveBfdSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBfdSessionRequest.ProtoReflect.Descriptor instead.
func (*RemoveBfdSessionRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bfd_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveBfdSessionRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveBfdSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveBfdSessionResponse) Reset() {
	*x = RemoveBfdSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveBfdSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveBfdSessionResponse) ProtoMessage() {}

func (x *RemoveBfdSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveBfdSessionResponse.ProtoReflect.Descriptor instead.
func (*RemoveBfdSessionResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bfd_proto_rawDescGZIP(), []int{3}
}

type SetBfdSessionAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid           uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	VirtualRouter *uint64 `protobuf:"varint,2,opt,name=virtual_router,json=virtualRouter,proto3,oneof" json:"virtual_router,omitempty"`
	Port          *uint64 `protobuf:"varint,3,opt,name=port,proto3,oneof" json:"port,omitempty"`
	Tc            *uint32 `protobuf:"varint,4,opt,name=tc,proto3,oneof" json:"tc,omitempty"`
	VlanTpid      *uint32 `protobuf:"varint,5,opt,name=vlan_tpid,json=vlanTpid,proto3,oneof" json:"vlan_tpid,omitempty"`
	VlanPri       *uint32 `protobuf:"varint,6,opt,name=vlan_pri,json=vlanPri,proto3,oneof" json:"vlan_pri,omitempty"`
	VlanCfi       *uint32 `protobuf:"varint,7,opt,name=vlan_cfi,json=vlanCfi,proto3,oneof" json:"vlan_cfi,omitempty"`
	IphdrVersion  *uint32 `protobuf:"varint,8,opt,name=iphdr_version,json=iphdrVersion,proto3,oneof" json:"iphdr_version,omitempty"`
	Tos           *uint32 `protobuf:"varint,9,opt,name=tos,proto3,oneof" json:"tos,omitempty"`
	Ttl           *uint32 `protobuf:"varint,10,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
	TunnelTos     *uint32 `protobuf:"varint,11,opt,name=tunnel_tos,json=tunnelTos,proto3,oneof" json:"tunnel_tos,omitempty"`
	TunnelTtl     *uint32 `protobuf:"varint,12,opt,name=tunnel_ttl,json=tunnelTtl,proto3,oneof" json:"tunnel_ttl,omitempty"`
	SrcMacAddress []byte  `protobuf:"bytes,13,opt,name=src_mac_address,json=srcMacAddress,proto3,oneof" json:"src_mac_address,omitempty"`
	DstMacAddress []byte  `protobuf:"bytes,14,opt,name=dst_mac_address,json=dstMacAddress,proto3,oneof" json:"dst_mac_address,omitempty"`
	EchoEnable    *bool   `protobuf:"varint,15,opt,name=echo_enable,json=echoEnable,proto3,oneof" json:"echo_enable,omitempty"`
	MinTx         *uint32 `protobuf:"varint,16,opt,name=min_tx,json=minTx,proto3,oneof" json:"min_tx,omitempty"`
	MinRx         *uint32 `protobuf:"varint,17,opt,name=min_rx,json=minRx,proto3,oneof" json:"min_rx,omitempty"`
	Multiplier    *uint32 `protobuf:"varint,18,opt,name=multiplier,proto3,oneof" json:"multiplier,omitempty"`
}

func (x *SetBfdSessionAttributeRequest) Reset() {
	*x = SetBfdSessionAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBfdSessionAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBfdSessionAttributeRequest) ProtoMessage() {}

func (x *SetBfdSessionAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBfdSessionAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetBfdSessionAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bfd_proto_rawDescGZIP(), []int{4}
}

func (x *SetBfdSessionAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetVirtualRouter() uint64 {
	if x != nil && x.VirtualRouter != nil {
		return *x.VirtualRouter
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetPort() uint64 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetTc() uint32 {
	if x != nil && x.Tc != nil {
		return *x.Tc
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetVlanTpid() uint32 {
	if x != nil && x.VlanTpid != nil {
		return *x.VlanTpid
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetVlanPri() uint32 {
	if x != nil && x.VlanPri != nil {
		return *x.VlanPri
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetVlanCfi() uint32 {
	if x != nil && x.VlanCfi != nil {
		return *x.VlanCfi
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetIphdrVersion() uint32 {
	if x != nil && x.IphdrVersion != nil {
		return *x.IphdrVersion
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetTos() uint32 {
	if x != nil && x.Tos != nil {
		return *x.Tos
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetTtl() uint32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetTunnelTos() uint32 {
	if x != nil && x.TunnelTos != nil {
		return *x.TunnelTos
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetTunnelTtl() uint32 {
	if x != nil && x.TunnelTtl != nil {
		return *x.TunnelTtl
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *SetBfdSessionAttributeRequest) GetDstMacAddress() []byte {
	if x != nil {
		return x.DstMacAddress
	}
	return nil
}

func (x *SetBfdSessionAttributeRequest) GetEchoEnable() bool {
	if x != nil && x.EchoEnable != nil {
		return *x.EchoEnable
	}
	return false
}

func (x *SetBfdSessionAttributeRequest) GetMinTx() uint32 {
	if x != nil && x.MinTx != nil {
		return *x.MinTx
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetMinRx() uint32 {
	if x != nil && x.MinRx != nil {
		return *x.MinRx
	}
	return 0
}

func (x *SetBfdSessionAttributeRequest) GetMultiplier() uint32 {
	if x != nil && x.Multiplier != nil {
		return *x.Multiplier
	}
	return 0
}

type SetBfdSessionAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetBfdSessionAttributeResponse) Reset() {
	*x = SetBfdSessionAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBfdSessionAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBfdSessionAttributeResponse) ProtoMessage() {}

func (x *SetBfdSessionAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBfdSessionAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetBfdSessionAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bfd_proto_rawDescGZIP(), []int{5}
}

type GetBfdSessionAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64           `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []BfdSessionAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.BfdSessionAttr" json:"attr_type,omitempty"`
}

func (x *GetBfdSessionAttributeRequest) Reset() {
	*x = GetBfdSessionAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBfdSessionAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBfdSessionAttributeRequest) ProtoMessage() {}

func (x *GetBfdSessionAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBfdSessionAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetBfdSessionAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bfd_proto_rawDescGZIP(), []int{6}
}

func (x *GetBfdSessionAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetBfdSessionAttributeRequest) GetAttrType() []BfdSessionAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetBfdSessionAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *BfdSessionAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetBfdSessionAttributeResponse) Reset() {
	*x = GetBfdSessionAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBfdSessionAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBfdSessionAttributeResponse) ProtoMessage() {}

func (x *GetBfdSessionAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBfdSessionAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetBfdSessionAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bfd_proto_rawDescGZIP(), []int{7}
}

func (x *GetBfdSessionAttributeResponse) GetAttr() *BfdSessionAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type GetBfdSessionStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64           `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CounterIds []BfdSessionStat `protobuf:"varint,2,rep,packed,name=counter_ids,json=counterIds,proto3,enum=lemming.dataplane.sai.BfdSessionStat" json:"counter_ids,omitempty"`
}

func (x *GetBfdSessionStatsRequest) Reset() {
	*x = GetBfdSessionStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBfdSessionStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBfdSessionStatsRequest) ProtoMessage() {}

func (x *GetBfdSessionStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBfdSessionStatsRequest.ProtoReflect.Descriptor instead.
func (*GetBfdSessionStatsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bfd_proto_rawDescGZIP(), []int{8}
}

func (x *GetBfdSessionStatsRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetBfdSessionStatsRequest) GetCounterIds() []BfdSessionStat {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

type GetBfdSessionStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *GetBfdSessionStatsResponse) Reset() {
	*x = GetBfdSessionStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBfdSessionStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBfdSessionStatsResponse) ProtoMessage() {}

func (x *GetBfdSessionStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bfd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBfdSessionStatsResponse.ProtoReflect.Descriptor instead.
func (*GetBfdSessionStatsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bfd_proto_rawDescGZIP(), []int{9}
}

func (x *GetBfdSessionStatsResponse) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_dataplane_proto_sai_bfd_proto protoreflect.FileDescriptor

var file_dataplane_proto_sai_bfd_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x62, 0x66, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x11, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x46, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0f, 0x68, 0x77, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52, 0x0d, 0x68, 0x77, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x02, 0x52, 0x0d, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93,
	0xad, 0x0f, 0x04, 0x48, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93,
	0xad, 0x0f, 0x05, 0x48, 0x04, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63,
	0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x14,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x06, 0x48, 0x05, 0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x69, 0x73, 0x63,
	0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0c,
	0x75, 0x64, 0x70, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x06, 0x52, 0x0a, 0x75, 0x64,
	0x70, 0x53, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x02, 0x74,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x08, 0x48,
	0x07, 0x52, 0x02, 0x74, 0x63, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93,
	0xad, 0x0f, 0x09, 0x48, 0x08, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x54, 0x70, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0a, 0x48, 0x09, 0x52, 0x06, 0x76,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x0b, 0x48, 0x0a, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x66, 0x69, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0c, 0x48, 0x0b, 0x52, 0x07, 0x76, 0x6c,
	0x61, 0x6e, 0x43, 0x66, 0x69, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x11, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0d, 0x48, 0x0c, 0x52, 0x0f, 0x76,
	0x6c, 0x61, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x6e, 0x0a, 0x16, 0x62, 0x66, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x66, 0x64, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0e, 0x48, 0x0d, 0x52, 0x14, 0x62, 0x66, 0x64, 0x45, 0x6e, 0x63,
	0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x0d, 0x69, 0x70, 0x68, 0x64, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0f,
	0x48, 0x0e, 0x52, 0x0c, 0x69, 0x70, 0x68, 0x64, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x10, 0x48, 0x0f, 0x52, 0x03, 0x74, 0x6f, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x11, 0x48, 0x10, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x0e, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f,
	0x12, 0x48, 0x11, 0x52, 0x0c, 0x73, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0e, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x13, 0x48, 0x12, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93,
	0xad, 0x0f, 0x14, 0x48, 0x13, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x74,
	0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x15, 0x48,
	0x14, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x16, 0x48, 0x15, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x72, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x17, 0x48, 0x16, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x73, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x18,
	0x48, 0x17, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x19, 0x48, 0x18, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x4d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0b, 0x65, 0x63, 0x68,
	0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x1a, 0x48, 0x19, 0x52, 0x0a, 0x65, 0x63, 0x68, 0x6f, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x68, 0x6f, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f,
	0x1b, 0x48, 0x1a, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x04, 0x63, 0x62, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x1c, 0x48, 0x1b, 0x52, 0x04, 0x63, 0x62, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x1d, 0x48, 0x1c, 0x52, 0x05, 0x6d, 0x69, 0x6e,
	0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x78, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x1e, 0x48, 0x1d, 0x52,
	0x05, 0x6d, 0x69, 0x6e, 0x52, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0a, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x1f, 0x48, 0x1e, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x23, 0x48, 0x1f, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x46, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x68, 0x77, 0x5f, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x73,
	0x72, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x63, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63,
	0x66, 0x69, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x62, 0x66, 0x64,
	0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x70, 0x68, 0x64, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x6f, 0x73, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x74, 0x74, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x64, 0x73, 0x74,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x74, 0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x64,
	0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68,
	0x6f, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x62, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72,
	0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x2c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x66, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x2b, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xda, 0x07, 0x0a, 0x1d, 0x53, 0x65, 0x74,
	0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x0e,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x00, 0x52, 0x0d,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x02, 0x74, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x08, 0x48, 0x02, 0x52, 0x02, 0x74, 0x63, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x09, 0x48, 0x03, 0x52, 0x08, 0x76, 0x6c, 0x61,
	0x6e, 0x54, 0x70, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x0b, 0x48, 0x04, 0x52, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x50, 0x72, 0x69, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x66, 0x69, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0c, 0x48, 0x05, 0x52, 0x07, 0x76, 0x6c,
	0x61, 0x6e, 0x43, 0x66, 0x69, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0d, 0x69, 0x70, 0x68, 0x64,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0f, 0x48, 0x06, 0x52, 0x0c, 0x69, 0x70, 0x68, 0x64, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x6f,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x10, 0x48,
	0x07, 0x52, 0x03, 0x74, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x03, 0x74, 0x74, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x11, 0x48, 0x08,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x14, 0x48, 0x09, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74,
	0x74, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x15,
	0x48, 0x0a, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x74, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f,
	0x18, 0x48, 0x0b, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0f, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x19, 0x48, 0x0c, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x4d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0b, 0x65, 0x63,
	0x68, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x1a, 0x48, 0x0d, 0x52, 0x0a, 0x65, 0x63, 0x68, 0x6f, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f,
	0x74, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x1d,
	0x48, 0x0e, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x06,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x1e, 0x48, 0x0f, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x52, 0x78, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x1f, 0x48, 0x10, 0x52, 0x0a,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x63,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x74, 0x70, 0x69, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x66, 0x69, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x70, 0x68,
	0x64, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74,
	0x6f, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x74, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x72, 0x63,
	0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x78, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x42, 0x66, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x66,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x60,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72,
	0x22, 0x75, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x42, 0x66, 0x64,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x42, 0x66,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2a, 0x8e, 0x0b,
	0x0a, 0x0e, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x20, 0x0a, 0x1c, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x24, 0x0a,
	0x20, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x48, 0x57, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x46, 0x44, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x52, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x29, 0x0a,
	0x25, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x52, 0x49, 0x4d,
	0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x46, 0x44, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x44, 0x50,
	0x5f, 0x53, 0x52, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x54, 0x43, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x50,
	0x49, 0x44, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x44,
	0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x10,
	0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x43, 0x46, 0x49, 0x10, 0x0c,
	0x12, 0x26, 0x0a, 0x22, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x2b, 0x0a, 0x27, 0x42, 0x46, 0x44, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x42, 0x46, 0x44,
	0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x53, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x0e, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x50, 0x48, 0x44, 0x52, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x46, 0x44,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x4f,
	0x53, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x54, 0x4c, 0x10, 0x11, 0x12, 0x23, 0x0a,
	0x1f, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x12, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x13, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x46, 0x44, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x54, 0x4f, 0x53, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x46, 0x44, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x55, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x54, 0x4c, 0x10, 0x15, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x46, 0x44,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x16, 0x12, 0x2a, 0x0a, 0x26, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x17, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x18, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x46, 0x44, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x53, 0x54, 0x5f,
	0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x19, 0x12, 0x20, 0x0a,
	0x1c, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x45, 0x43, 0x48, 0x4f, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x1a, 0x12,
	0x1d, 0x0a, 0x19, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x48, 0x4f, 0x50, 0x10, 0x1b, 0x12, 0x19,
	0x0a, 0x15, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x43, 0x42, 0x49, 0x54, 0x10, 0x1c, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x46, 0x44,
	0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x49,
	0x4e, 0x5f, 0x54, 0x58, 0x10, 0x1d, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x52,
	0x58, 0x10, 0x1e, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x49,
	0x45, 0x52, 0x10, 0x1f, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x4d, 0x49, 0x4e, 0x5f, 0x54, 0x58, 0x10, 0x20, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x46, 0x44, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x52, 0x58, 0x10, 0x21, 0x12, 0x1a, 0x0a, 0x16,
	0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x22, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x46, 0x44, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4f, 0x46, 0x46,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x23, 0x12, 0x22, 0x0a, 0x1e, 0x42,
	0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x58, 0x10, 0x24, 0x12,
	0x22, 0x0a, 0x1e, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52,
	0x58, 0x10, 0x25, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x49,
	0x41, 0x47, 0x10, 0x26, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x44, 0x49, 0x41, 0x47, 0x10, 0x27, 0x12, 0x26, 0x0a, 0x22, 0x42, 0x46, 0x44, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x10, 0x28, 0x32, 0x84,
	0x05, 0x0a, 0x03, 0x42, 0x66, 0x64, 0x12, 0x75, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a,
	0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x42, 0x66, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x66, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65,
	0x74, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x66, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42,
	0x66, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x30,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x66, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x66, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_dataplane_proto_sai_bfd_proto_rawDescOnce sync.Once
	file_dataplane_proto_sai_bfd_proto_rawDescData = file_dataplane_proto_sai_bfd_proto_rawDesc
)

func file_dataplane_proto_sai_bfd_proto_rawDescGZIP() []byte {
	file_dataplane_proto_sai_bfd_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_sai_bfd_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_sai_bfd_proto_rawDescData)
	})
	return file_dataplane_proto_sai_bfd_proto_rawDescData
}

var file_dataplane_proto_sai_bfd_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_proto_sai_bfd_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_dataplane_proto_sai_bfd_proto_goTypes = []interface{}{
	(BfdSessionAttr)(0),                    // 0: lemming.dataplane.sai.BfdSessionAttr
	(*CreateBfdSessionRequest)(nil),        // 1: lemming.dataplane.sai.CreateBfdSessionRequest
	(*CreateBfdSessionResponse)(nil),       // 2: lemming.dataplane.sai.CreateBfdSessionResponse
	(*RemoveBfdSessionRequest)(nil),        // 3: lemming.dataplane.sai.RemoveBfdSessionRequest
	(*RemoveBfdSessionResponse)(nil),       // 4: lemming.dataplane.sai.RemoveBfdSessionResponse
	(*SetBfdSessionAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetBfdSessionAttributeRequest
	(*SetBfdSessionAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetBfdSessionAttributeResponse
	(*GetBfdSessionAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetBfdSessionAttributeRequest
	(*GetBfdSessionAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetBfdSessionAttributeResponse
	(*GetBfdSessionStatsRequest)(nil),      // 9: lemming.dataplane.sai.GetBfdSessionStatsRequest
	(*GetBfdSessionStatsResponse)(nil),     // 10: lemming.dataplane.sai.GetBfdSessionStatsResponse
	(BfdSessionType)(0),                    // 11: lemming.dataplane.sai.BfdSessionType
	(BfdEncapsulationType)(0),              // 12: lemming.dataplane.sai.BfdEncapsulationType
	(BfdSessionOffloadType)(0),             // 13: lemming.dataplane.sai.BfdSessionOffloadType
	(*BfdSessionAttribute)(nil),            // 14: lemming.dataplane.sai.BfdSessionAttribute
	(BfdSessionStat)(0),                    // 15: lemming.dataplane.sai.BfdSessionStat
}
var file_dataplane_proto_sai_bfd_proto_depIdxs = []int32{
	11, // 0: lemming.dataplane.sai.CreateBfdSessionRequest.type:type_name -> lemming.dataplane.sai.BfdSessionType
	12, // 1: lemming.dataplane.sai.CreateBfdSessionRequest.bfd_encapsulation_type:type_name -> lemming.dataplane.sai.BfdEncapsulationType
	13, // 2: lemming.dataplane.sai.CreateBfdSessionRequest.offload_type:type_name -> lemming.dataplane.sai.BfdSessionOffloadType
	0,  // 3: lemming.dataplane.sai.GetBfdSessionAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.BfdSessionAttr
	14, // 4: lemming.dataplane.sai.GetBfdSessionAttributeResponse.attr:type_name -> lemming.dataplane.sai.BfdSessionAttribute
	15, // 5: lemming.dataplane.sai.GetBfdSessionStatsRequest.counter_ids:type_name -> lemming.dataplane.sai.BfdSessionStat
	1,  // 6: lemming.dataplane.sai.Bfd.CreateBfdSession:input_type -> lemming.dataplane.sai.CreateBfdSessionRequest
	3,  // 7: lemming.dataplane.sai.Bfd.RemoveBfdSession:input_type -> lemming.dataplane.sai.RemoveBfdSessionRequest
	5,  // 8: lemming.dataplane.sai.Bfd.SetBfdSessionAttribute:input_type -> lemming.dataplane.sai.SetBfdSessionAttributeRequest
	7,  // 9: lemming.dataplane.sai.Bfd.GetBfdSessionAttribute:input_type -> lemming.dataplane.sai.GetBfdSessionAttributeRequest
	9,  // 10: lemming.dataplane.sai.Bfd.GetBfdSessionStats:input_type -> lemming.dataplane.sai.GetBfdSessionStatsRequest
	2,  // 11: lemming.dataplane.sai.Bfd.CreateBfdSession:output_type -> lemming.dataplane.sai.CreateBfdSessionResponse
	4,  // 12: lemming.dataplane.sai.Bfd.RemoveBfdSession:output_type -> lemming.dataplane.sai.RemoveBfdSessionResponse
	6,  // 13: lemming.dataplane.sai.Bfd.SetBfdSessionAttribute:output_type -> lemming.dataplane.sai.SetBfdSessionAttributeResponse
	8,  // 14: lemming.dataplane.sai.Bfd.GetBfdSessionAttribute:output_type -> lemming.dataplane.sai.GetBfdSessionAttributeResponse
	10, // 15: lemming.dataplane.sai.Bfd.GetBfdSessionStats:output_type -> lemming.dataplane.sai.GetBfdSessionStatsResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_dataplane_proto_sai_bfd_proto_init() }
func file_dataplane_proto_sai_bfd_proto_init() {
	if File_dataplane_proto_sai_bfd_proto != nil {
		return
	}
	file_dataplane_proto_sai_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_sai_bfd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBfdSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bfd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBfdSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bfd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBfdSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bfd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveBfdSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bfd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBfdSessionAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bfd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBfdSessionAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bfd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBfdSessionAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bfd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBfdSessionAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bfd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBfdSessionStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bfd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBfdSessionStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_sai_bfd_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_proto_sai_bfd_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_sai_bfd_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_sai_bfd_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_sai_bfd_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_sai_bfd_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_sai_bfd_proto_msgTypes,
	}.Build()
	File_dataplane_proto_sai_bfd_proto = out.File
	file_dataplane_proto_sai_bfd_proto_rawDesc = nil
	file_dataplane_proto_sai_bfd_proto_goTypes = nil
	file_dataplane_proto_sai_bfd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BfdClient is the client API for Bfd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BfdClient interface {
	CreateBfdSession(ctx context.Context, in *CreateBfdSessionRequest, opts ...grpc.CallOption) (*CreateBfdSessionResponse, error)
	RemoveBfdSession(ctx context.Context, in *RemoveBfdSessionRequest, opts ...grpc.CallOption) (*RemoveBfdSessionResponse, error)
	SetBfdSessionAttribute(ctx context.Context, in *SetBfdSessionAttributeRequest, opts ...grpc.CallOption) (*SetBfdSessionAttributeResponse, error)
	GetBfdSessionAttribute(ctx context.Context, in *GetBfdSessionAttributeRequest, opts ...grpc.CallOption) (*GetBfdSessionAttributeResponse, error)
	GetBfdSessionStats(ctx context.Context, in *GetBfdSessionStatsRequest, opts ...grpc.CallOption) (*GetBfdSessionStatsResponse, error)
}

type bfdClient struct {
	cc grpc.ClientConnInterface
}

func NewBfdClient(cc grpc.ClientConnInterface) BfdClient {
	return &bfdClient{cc}
}

func (c *bfdClient) CreateBfdSession(ctx context.Context, in *CreateBfdSessionRequest, opts ...grpc.CallOption) (*CreateBfdSessionResponse, error) {
	out := new(CreateBfdSessionResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bfd/CreateBfdSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdClient) RemoveBfdSession(ctx context.Context, in *RemoveBfdSessionRequest, opts ...grpc.CallOption) (*RemoveBfdSessionResponse, error) {
	out := new(RemoveBfdSessionResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bfd/RemoveBfdSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdClient) SetBfdSessionAttribute(ctx context.Context, in *SetBfdSessionAttributeRequest, opts ...grpc.CallOption) (*SetBfdSessionAttributeResponse, error) {
	out := new(SetBfdSessionAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bfd/SetBfdSessionAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdClient) GetBfdSessionAttribute(ctx context.Context, in *GetBfdSessionAttributeRequest, opts ...grpc.CallOption) (*GetBfdSessionAttributeResponse, error) {
	out := new(GetBfdSessionAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bfd/GetBfdSessionAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdClient) GetBfdSessionStats(ctx context.Context, in *GetBfdSessionStatsRequest, opts ...grpc.CallOption) (*GetBfdSessionStatsResponse, error) {
	out := new(GetBfdSessionStatsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bfd/GetBfdSessionStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BfdServer is the server API for Bfd service.
type BfdServer interface {
	CreateBfdSession(context.Context, *CreateBfdSessionRequest) (*CreateBfdSessionResponse, error)
	RemoveBfdSession(context.Context, *RemoveBfdSessionRequest) (*RemoveBfdSessionResponse, error)
	SetBfdSessionAttribute(context.Context, *SetBfdSessionAttributeRequest) (*SetBfdSessionAttributeResponse, error)
	GetBfdSessionAttribute(context.Context, *GetBfdSessionAttributeRequest) (*GetBfdSessionAttributeResponse, error)
	GetBfdSessionStats(context.Context, *GetBfdSessionStatsRequest) (*GetBfdSessionStatsResponse, error)
}

// UnimplementedBfdServer can be embedded to have forward compatible implementations.
type UnimplementedBfdServer struct {
}

func (*UnimplementedBfdServer) CreateBfdSession(context.Context, *CreateBfdSessionRequest) (*CreateBfdSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBfdSession not implemented")
}
func (*UnimplementedBfdServer) RemoveBfdSession(context.Context, *RemoveBfdSessionRequest) (*RemoveBfdSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBfdSession not implemented")
}
func (*UnimplementedBfdServer) SetBfdSessionAttribute(context.Context, *SetBfdSessionAttributeRequest) (*SetBfdSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBfdSessionAttribute not implemented")
}
func (*UnimplementedBfdServer) GetBfdSessionAttribute(context.Context, *GetBfdSessionAttributeRequest) (*GetBfdSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBfdSessionAttribute not implemented")
}
func (*UnimplementedBfdServer) GetBfdSessionStats(context.Context, *GetBfdSessionStatsRequest) (*GetBfdSessionStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBfdSessionStats not implemented")
}

func RegisterBfdServer(s *grpc.Server, srv BfdServer) {
	s.RegisterService(&_Bfd_serviceDesc, srv)
}

func _Bfd_CreateBfdSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBfdSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdServer).CreateBfdSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bfd/CreateBfdSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdServer).CreateBfdSession(ctx, req.(*CreateBfdSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bfd_RemoveBfdSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBfdSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdServer).RemoveBfdSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bfd/RemoveBfdSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdServer).RemoveBfdSession(ctx, req.(*RemoveBfdSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bfd_SetBfdSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBfdSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdServer).SetBfdSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bfd/SetBfdSessionAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdServer).SetBfdSessionAttribute(ctx, req.(*SetBfdSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bfd_GetBfdSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBfdSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdServer).GetBfdSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bfd/GetBfdSessionAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdServer).GetBfdSessionAttribute(ctx, req.(*GetBfdSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bfd_GetBfdSessionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBfdSessionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdServer).GetBfdSessionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bfd/GetBfdSessionStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdServer).GetBfdSessionStats(ctx, req.(*GetBfdSessionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bfd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Bfd",
	HandlerType: (*BfdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBfdSession",
			Handler:    _Bfd_CreateBfdSession_Handler,
		},
		{
			MethodName: "RemoveBfdSession",
			Handler:    _Bfd_RemoveBfdSession_Handler,
		},
		{
			MethodName: "SetBfdSessionAttribute",
			Handler:    _Bfd_SetBfdSessionAttribute_Handler,
		},
		{
			MethodName: "GetBfdSessionAttribute",
			Handler:    _Bfd_GetBfdSessionAttribute_Handler,
		},
		{
			MethodName: "GetBfdSessionStats",
			Handler:    _Bfd_GetBfdSessionStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/bfd.proto",
}
