// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/hash.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Hash_CreateHash_FullMethodName                       = "/lemming.dataplane.sai.Hash/CreateHash"
	Hash_RemoveHash_FullMethodName                       = "/lemming.dataplane.sai.Hash/RemoveHash"
	Hash_SetHashAttribute_FullMethodName                 = "/lemming.dataplane.sai.Hash/SetHashAttribute"
	Hash_GetHashAttribute_FullMethodName                 = "/lemming.dataplane.sai.Hash/GetHashAttribute"
	Hash_CreateFineGrainedHashField_FullMethodName       = "/lemming.dataplane.sai.Hash/CreateFineGrainedHashField"
	Hash_RemoveFineGrainedHashField_FullMethodName       = "/lemming.dataplane.sai.Hash/RemoveFineGrainedHashField"
	Hash_GetFineGrainedHashFieldAttribute_FullMethodName = "/lemming.dataplane.sai.Hash/GetFineGrainedHashFieldAttribute"
)

// HashClient is the client API for Hash service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashClient interface {
	CreateHash(ctx context.Context, in *CreateHashRequest, opts ...grpc.CallOption) (*CreateHashResponse, error)
	RemoveHash(ctx context.Context, in *RemoveHashRequest, opts ...grpc.CallOption) (*RemoveHashResponse, error)
	SetHashAttribute(ctx context.Context, in *SetHashAttributeRequest, opts ...grpc.CallOption) (*SetHashAttributeResponse, error)
	GetHashAttribute(ctx context.Context, in *GetHashAttributeRequest, opts ...grpc.CallOption) (*GetHashAttributeResponse, error)
	CreateFineGrainedHashField(ctx context.Context, in *CreateFineGrainedHashFieldRequest, opts ...grpc.CallOption) (*CreateFineGrainedHashFieldResponse, error)
	RemoveFineGrainedHashField(ctx context.Context, in *RemoveFineGrainedHashFieldRequest, opts ...grpc.CallOption) (*RemoveFineGrainedHashFieldResponse, error)
	GetFineGrainedHashFieldAttribute(ctx context.Context, in *GetFineGrainedHashFieldAttributeRequest, opts ...grpc.CallOption) (*GetFineGrainedHashFieldAttributeResponse, error)
}

type hashClient struct {
	cc grpc.ClientConnInterface
}

func NewHashClient(cc grpc.ClientConnInterface) HashClient {
	return &hashClient{cc}
}

func (c *hashClient) CreateHash(ctx context.Context, in *CreateHashRequest, opts ...grpc.CallOption) (*CreateHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHashResponse)
	err := c.cc.Invoke(ctx, Hash_CreateHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashClient) RemoveHash(ctx context.Context, in *RemoveHashRequest, opts ...grpc.CallOption) (*RemoveHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveHashResponse)
	err := c.cc.Invoke(ctx, Hash_RemoveHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashClient) SetHashAttribute(ctx context.Context, in *SetHashAttributeRequest, opts ...grpc.CallOption) (*SetHashAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetHashAttributeResponse)
	err := c.cc.Invoke(ctx, Hash_SetHashAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashClient) GetHashAttribute(ctx context.Context, in *GetHashAttributeRequest, opts ...grpc.CallOption) (*GetHashAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHashAttributeResponse)
	err := c.cc.Invoke(ctx, Hash_GetHashAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashClient) CreateFineGrainedHashField(ctx context.Context, in *CreateFineGrainedHashFieldRequest, opts ...grpc.CallOption) (*CreateFineGrainedHashFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFineGrainedHashFieldResponse)
	err := c.cc.Invoke(ctx, Hash_CreateFineGrainedHashField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashClient) RemoveFineGrainedHashField(ctx context.Context, in *RemoveFineGrainedHashFieldRequest, opts ...grpc.CallOption) (*RemoveFineGrainedHashFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFineGrainedHashFieldResponse)
	err := c.cc.Invoke(ctx, Hash_RemoveFineGrainedHashField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashClient) GetFineGrainedHashFieldAttribute(ctx context.Context, in *GetFineGrainedHashFieldAttributeRequest, opts ...grpc.CallOption) (*GetFineGrainedHashFieldAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFineGrainedHashFieldAttributeResponse)
	err := c.cc.Invoke(ctx, Hash_GetFineGrainedHashFieldAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashServer is the server API for Hash service.
// All implementations should embed UnimplementedHashServer
// for forward compatibility.
type HashServer interface {
	CreateHash(context.Context, *CreateHashRequest) (*CreateHashResponse, error)
	RemoveHash(context.Context, *RemoveHashRequest) (*RemoveHashResponse, error)
	SetHashAttribute(context.Context, *SetHashAttributeRequest) (*SetHashAttributeResponse, error)
	GetHashAttribute(context.Context, *GetHashAttributeRequest) (*GetHashAttributeResponse, error)
	CreateFineGrainedHashField(context.Context, *CreateFineGrainedHashFieldRequest) (*CreateFineGrainedHashFieldResponse, error)
	RemoveFineGrainedHashField(context.Context, *RemoveFineGrainedHashFieldRequest) (*RemoveFineGrainedHashFieldResponse, error)
	GetFineGrainedHashFieldAttribute(context.Context, *GetFineGrainedHashFieldAttributeRequest) (*GetFineGrainedHashFieldAttributeResponse, error)
}

// UnimplementedHashServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHashServer struct{}

func (UnimplementedHashServer) CreateHash(context.Context, *CreateHashRequest) (*CreateHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHash not implemented")
}
func (UnimplementedHashServer) RemoveHash(context.Context, *RemoveHashRequest) (*RemoveHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveHash not implemented")
}
func (UnimplementedHashServer) SetHashAttribute(context.Context, *SetHashAttributeRequest) (*SetHashAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHashAttribute not implemented")
}
func (UnimplementedHashServer) GetHashAttribute(context.Context, *GetHashAttributeRequest) (*GetHashAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashAttribute not implemented")
}
func (UnimplementedHashServer) CreateFineGrainedHashField(context.Context, *CreateFineGrainedHashFieldRequest) (*CreateFineGrainedHashFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFineGrainedHashField not implemented")
}
func (UnimplementedHashServer) RemoveFineGrainedHashField(context.Context, *RemoveFineGrainedHashFieldRequest) (*RemoveFineGrainedHashFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFineGrainedHashField not implemented")
}
func (UnimplementedHashServer) GetFineGrainedHashFieldAttribute(context.Context, *GetFineGrainedHashFieldAttributeRequest) (*GetFineGrainedHashFieldAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFineGrainedHashFieldAttribute not implemented")
}
func (UnimplementedHashServer) testEmbeddedByValue() {}

// UnsafeHashServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashServer will
// result in compilation errors.
type UnsafeHashServer interface {
	mustEmbedUnimplementedHashServer()
}

func RegisterHashServer(s grpc.ServiceRegistrar, srv HashServer) {
	// If the following call pancis, it indicates UnimplementedHashServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Hash_ServiceDesc, srv)
}

func _Hash_CreateHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServer).CreateHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hash_CreateHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServer).CreateHash(ctx, req.(*CreateHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hash_RemoveHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServer).RemoveHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hash_RemoveHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServer).RemoveHash(ctx, req.(*RemoveHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hash_SetHashAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHashAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServer).SetHashAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hash_SetHashAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServer).SetHashAttribute(ctx, req.(*SetHashAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hash_GetHashAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServer).GetHashAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hash_GetHashAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServer).GetHashAttribute(ctx, req.(*GetHashAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hash_CreateFineGrainedHashField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFineGrainedHashFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServer).CreateFineGrainedHashField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hash_CreateFineGrainedHashField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServer).CreateFineGrainedHashField(ctx, req.(*CreateFineGrainedHashFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hash_RemoveFineGrainedHashField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFineGrainedHashFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServer).RemoveFineGrainedHashField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hash_RemoveFineGrainedHashField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServer).RemoveFineGrainedHashField(ctx, req.(*RemoveFineGrainedHashFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hash_GetFineGrainedHashFieldAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFineGrainedHashFieldAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashServer).GetFineGrainedHashFieldAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hash_GetFineGrainedHashFieldAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashServer).GetFineGrainedHashFieldAttribute(ctx, req.(*GetFineGrainedHashFieldAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hash_ServiceDesc is the grpc.ServiceDesc for Hash service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hash_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Hash",
	HandlerType: (*HashServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHash",
			Handler:    _Hash_CreateHash_Handler,
		},
		{
			MethodName: "RemoveHash",
			Handler:    _Hash_RemoveHash_Handler,
		},
		{
			MethodName: "SetHashAttribute",
			Handler:    _Hash_SetHashAttribute_Handler,
		},
		{
			MethodName: "GetHashAttribute",
			Handler:    _Hash_GetHashAttribute_Handler,
		},
		{
			MethodName: "CreateFineGrainedHashField",
			Handler:    _Hash_CreateFineGrainedHashField_Handler,
		},
		{
			MethodName: "RemoveFineGrainedHashField",
			Handler:    _Hash_RemoveFineGrainedHashField_Handler,
		},
		{
			MethodName: "GetFineGrainedHashFieldAttribute",
			Handler:    _Hash_GetFineGrainedHashFieldAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/hash.proto",
}
