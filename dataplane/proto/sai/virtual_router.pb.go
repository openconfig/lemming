// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: dataplane/proto/sai/virtual_router.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VirtualRouterAttr int32

const (
	VirtualRouterAttr_VIRTUAL_ROUTER_ATTR_UNSPECIFIED                        VirtualRouterAttr = 0
	VirtualRouterAttr_VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE                     VirtualRouterAttr = 1
	VirtualRouterAttr_VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE                     VirtualRouterAttr = 2
	VirtualRouterAttr_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS                    VirtualRouterAttr = 3
	VirtualRouterAttr_VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION       VirtualRouterAttr = 4
	VirtualRouterAttr_VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION VirtualRouterAttr = 5
	VirtualRouterAttr_VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION VirtualRouterAttr = 6
	VirtualRouterAttr_VIRTUAL_ROUTER_ATTR_LABEL                              VirtualRouterAttr = 7
)

// Enum value maps for VirtualRouterAttr.
var (
	VirtualRouterAttr_name = map[int32]string{
		0: "VIRTUAL_ROUTER_ATTR_UNSPECIFIED",
		1: "VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE",
		2: "VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE",
		3: "VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS",
		4: "VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION",
		5: "VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION",
		6: "VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION",
		7: "VIRTUAL_ROUTER_ATTR_LABEL",
	}
	VirtualRouterAttr_value = map[string]int32{
		"VIRTUAL_ROUTER_ATTR_UNSPECIFIED":                        0,
		"VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE":                     1,
		"VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE":                     2,
		"VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS":                    3,
		"VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION":       4,
		"VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION": 5,
		"VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION": 6,
		"VIRTUAL_ROUTER_ATTR_LABEL":                              7,
	}
)

func (x VirtualRouterAttr) Enum() *VirtualRouterAttr {
	p := new(VirtualRouterAttr)
	*p = x
	return p
}

func (x VirtualRouterAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualRouterAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_virtual_router_proto_enumTypes[0].Descriptor()
}

func (VirtualRouterAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_virtual_router_proto_enumTypes[0]
}

func (x VirtualRouterAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualRouterAttr.Descriptor instead.
func (VirtualRouterAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_virtual_router_proto_rawDescGZIP(), []int{0}
}

type CreateVirtualRouterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch                         uint64        `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	AdminV4State                   *bool         `protobuf:"varint,2,opt,name=admin_v4_state,json=adminV4State,proto3,oneof" json:"admin_v4_state,omitempty"`
	AdminV6State                   *bool         `protobuf:"varint,3,opt,name=admin_v6_state,json=adminV6State,proto3,oneof" json:"admin_v6_state,omitempty"`
	SrcMacAddress                  []byte        `protobuf:"bytes,4,opt,name=src_mac_address,json=srcMacAddress,proto3,oneof" json:"src_mac_address,omitempty"`
	ViolationTtl1PacketAction      *PacketAction `protobuf:"varint,5,opt,name=violation_ttl1_packet_action,json=violationTtl1PacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"violation_ttl1_packet_action,omitempty"`
	ViolationIpOptionsPacketAction *PacketAction `protobuf:"varint,6,opt,name=violation_ip_options_packet_action,json=violationIpOptionsPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"violation_ip_options_packet_action,omitempty"`
	UnknownL3MulticastPacketAction *PacketAction `protobuf:"varint,7,opt,name=unknown_l3_multicast_packet_action,json=unknownL3MulticastPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"unknown_l3_multicast_packet_action,omitempty"`
	Label                          []byte        `protobuf:"bytes,8,opt,name=label,proto3,oneof" json:"label,omitempty"`
}

func (x *CreateVirtualRouterRequest) Reset() {
	*x = CreateVirtualRouterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVirtualRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtualRouterRequest) ProtoMessage() {}

func (x *CreateVirtualRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtualRouterRequest.ProtoReflect.Descriptor instead.
func (*CreateVirtualRouterRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_virtual_router_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVirtualRouterRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateVirtualRouterRequest) GetAdminV4State() bool {
	if x != nil && x.AdminV4State != nil {
		return *x.AdminV4State
	}
	return false
}

func (x *CreateVirtualRouterRequest) GetAdminV6State() bool {
	if x != nil && x.AdminV6State != nil {
		return *x.AdminV6State
	}
	return false
}

func (x *CreateVirtualRouterRequest) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *CreateVirtualRouterRequest) GetViolationTtl1PacketAction() PacketAction {
	if x != nil && x.ViolationTtl1PacketAction != nil {
		return *x.ViolationTtl1PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateVirtualRouterRequest) GetViolationIpOptionsPacketAction() PacketAction {
	if x != nil && x.ViolationIpOptionsPacketAction != nil {
		return *x.ViolationIpOptionsPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateVirtualRouterRequest) GetUnknownL3MulticastPacketAction() PacketAction {
	if x != nil && x.UnknownL3MulticastPacketAction != nil {
		return *x.UnknownL3MulticastPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateVirtualRouterRequest) GetLabel() []byte {
	if x != nil {
		return x.Label
	}
	return nil
}

type CreateVirtualRouterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateVirtualRouterResponse) Reset() {
	*x = CreateVirtualRouterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVirtualRouterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVirtualRouterResponse) ProtoMessage() {}

func (x *CreateVirtualRouterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVirtualRouterResponse.ProtoReflect.Descriptor instead.
func (*CreateVirtualRouterResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_virtual_router_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVirtualRouterResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveVirtualRouterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveVirtualRouterRequest) Reset() {
	*x = RemoveVirtualRouterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveVirtualRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveVirtualRouterRequest) ProtoMessage() {}

func (x *RemoveVirtualRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveVirtualRouterRequest.ProtoReflect.Descriptor instead.
func (*RemoveVirtualRouterRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_virtual_router_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveVirtualRouterRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveVirtualRouterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveVirtualRouterResponse) Reset() {
	*x = RemoveVirtualRouterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveVirtualRouterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveVirtualRouterResponse) ProtoMessage() {}

func (x *RemoveVirtualRouterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveVirtualRouterResponse.ProtoReflect.Descriptor instead.
func (*RemoveVirtualRouterResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_virtual_router_proto_rawDescGZIP(), []int{3}
}

type SetVirtualRouterAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                            uint64        `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AdminV4State                   *bool         `protobuf:"varint,2,opt,name=admin_v4_state,json=adminV4State,proto3,oneof" json:"admin_v4_state,omitempty"`
	AdminV6State                   *bool         `protobuf:"varint,3,opt,name=admin_v6_state,json=adminV6State,proto3,oneof" json:"admin_v6_state,omitempty"`
	SrcMacAddress                  []byte        `protobuf:"bytes,4,opt,name=src_mac_address,json=srcMacAddress,proto3,oneof" json:"src_mac_address,omitempty"`
	ViolationTtl1PacketAction      *PacketAction `protobuf:"varint,5,opt,name=violation_ttl1_packet_action,json=violationTtl1PacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"violation_ttl1_packet_action,omitempty"`
	ViolationIpOptionsPacketAction *PacketAction `protobuf:"varint,6,opt,name=violation_ip_options_packet_action,json=violationIpOptionsPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"violation_ip_options_packet_action,omitempty"`
	UnknownL3MulticastPacketAction *PacketAction `protobuf:"varint,7,opt,name=unknown_l3_multicast_packet_action,json=unknownL3MulticastPacketAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"unknown_l3_multicast_packet_action,omitempty"`
	Label                          []byte        `protobuf:"bytes,8,opt,name=label,proto3,oneof" json:"label,omitempty"`
}

func (x *SetVirtualRouterAttributeRequest) Reset() {
	*x = SetVirtualRouterAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVirtualRouterAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVirtualRouterAttributeRequest) ProtoMessage() {}

func (x *SetVirtualRouterAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVirtualRouterAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetVirtualRouterAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_virtual_router_proto_rawDescGZIP(), []int{4}
}

func (x *SetVirtualRouterAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetVirtualRouterAttributeRequest) GetAdminV4State() bool {
	if x != nil && x.AdminV4State != nil {
		return *x.AdminV4State
	}
	return false
}

func (x *SetVirtualRouterAttributeRequest) GetAdminV6State() bool {
	if x != nil && x.AdminV6State != nil {
		return *x.AdminV6State
	}
	return false
}

func (x *SetVirtualRouterAttributeRequest) GetSrcMacAddress() []byte {
	if x != nil {
		return x.SrcMacAddress
	}
	return nil
}

func (x *SetVirtualRouterAttributeRequest) GetViolationTtl1PacketAction() PacketAction {
	if x != nil && x.ViolationTtl1PacketAction != nil {
		return *x.ViolationTtl1PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetVirtualRouterAttributeRequest) GetViolationIpOptionsPacketAction() PacketAction {
	if x != nil && x.ViolationIpOptionsPacketAction != nil {
		return *x.ViolationIpOptionsPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetVirtualRouterAttributeRequest) GetUnknownL3MulticastPacketAction() PacketAction {
	if x != nil && x.UnknownL3MulticastPacketAction != nil {
		return *x.UnknownL3MulticastPacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetVirtualRouterAttributeRequest) GetLabel() []byte {
	if x != nil {
		return x.Label
	}
	return nil
}

type SetVirtualRouterAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetVirtualRouterAttributeResponse) Reset() {
	*x = SetVirtualRouterAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVirtualRouterAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVirtualRouterAttributeResponse) ProtoMessage() {}

func (x *SetVirtualRouterAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVirtualRouterAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetVirtualRouterAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_virtual_router_proto_rawDescGZIP(), []int{5}
}

type GetVirtualRouterAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64              `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []VirtualRouterAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.VirtualRouterAttr" json:"attr_type,omitempty"`
}

func (x *GetVirtualRouterAttributeRequest) Reset() {
	*x = GetVirtualRouterAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVirtualRouterAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVirtualRouterAttributeRequest) ProtoMessage() {}

func (x *GetVirtualRouterAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVirtualRouterAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetVirtualRouterAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_virtual_router_proto_rawDescGZIP(), []int{6}
}

func (x *GetVirtualRouterAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetVirtualRouterAttributeRequest) GetAttrType() []VirtualRouterAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetVirtualRouterAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *VirtualRouterAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetVirtualRouterAttributeResponse) Reset() {
	*x = GetVirtualRouterAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVirtualRouterAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVirtualRouterAttributeResponse) ProtoMessage() {}

func (x *GetVirtualRouterAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_virtual_router_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVirtualRouterAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetVirtualRouterAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_virtual_router_proto_rawDescGZIP(), []int{7}
}

func (x *GetVirtualRouterAttributeResponse) GetAttr() *VirtualRouterAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_proto_sai_virtual_router_proto protoreflect.FileDescriptor

var file_dataplane_proto_sai_virtual_router_proto_rawDesc = []byte{
	0x0a, 0x28, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x1a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9c, 0x06, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x0e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x56, 0x34, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52,
	0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x56, 0x36, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f,
	0x03, 0x48, 0x02, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x1c, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x31, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x03, 0x52, 0x19, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x74, 0x6c, 0x31, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x7c, 0x0a, 0x22, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f,
	0x05, 0x48, 0x04, 0x52, 0x1e, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x7c, 0x0a, 0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x6c, 0x33, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x06, 0x48,
	0x05, 0x52, 0x1e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c, 0x33, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x06, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x04, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x34, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x36, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x31, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x33,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x22, 0x2f, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x94, 0x06, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x0e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x76, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x56, 0x34, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x0e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52, 0x0c,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x56, 0x36, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03,
	0x48, 0x02, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x1c, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x74, 0x6c, 0x31, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x03, 0x52, 0x19, 0x76, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x74, 0x6c, 0x31, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x7c, 0x0a, 0x22, 0x76, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x05,
	0x48, 0x04, 0x52, 0x1e, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x7c, 0x0a, 0x22, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x6c, 0x33, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x06, 0x48, 0x05,
	0x52, 0x1e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c, 0x33, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x06, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x76, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x74, 0x6c, 0x31, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x25, 0x0a, 0x23, 0x5f, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x33, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x23, 0x0a, 0x21, 0x53, 0x65, 0x74,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x66, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x2a, 0xfe, 0x02, 0x0a, 0x11, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26,
	0x0a, 0x22, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x56, 0x34, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41,
	0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x5f, 0x56, 0x36, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x27,
	0x0a, 0x23, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x34, 0x0a, 0x30, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56,
	0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x54, 0x4c, 0x31, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x3a, 0x0a,
	0x36, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x50, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x3a, 0x0a, 0x36, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x33, 0x5f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x10, 0x07, 0x32, 0xb5, 0x04, 0x0a, 0x0d, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x7e, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x31, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x31, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_proto_sai_virtual_router_proto_rawDescOnce sync.Once
	file_dataplane_proto_sai_virtual_router_proto_rawDescData = file_dataplane_proto_sai_virtual_router_proto_rawDesc
)

func file_dataplane_proto_sai_virtual_router_proto_rawDescGZIP() []byte {
	file_dataplane_proto_sai_virtual_router_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_sai_virtual_router_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_sai_virtual_router_proto_rawDescData)
	})
	return file_dataplane_proto_sai_virtual_router_proto_rawDescData
}

var file_dataplane_proto_sai_virtual_router_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_proto_sai_virtual_router_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dataplane_proto_sai_virtual_router_proto_goTypes = []interface{}{
	(VirtualRouterAttr)(0),                    // 0: lemming.dataplane.sai.VirtualRouterAttr
	(*CreateVirtualRouterRequest)(nil),        // 1: lemming.dataplane.sai.CreateVirtualRouterRequest
	(*CreateVirtualRouterResponse)(nil),       // 2: lemming.dataplane.sai.CreateVirtualRouterResponse
	(*RemoveVirtualRouterRequest)(nil),        // 3: lemming.dataplane.sai.RemoveVirtualRouterRequest
	(*RemoveVirtualRouterResponse)(nil),       // 4: lemming.dataplane.sai.RemoveVirtualRouterResponse
	(*SetVirtualRouterAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetVirtualRouterAttributeRequest
	(*SetVirtualRouterAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetVirtualRouterAttributeResponse
	(*GetVirtualRouterAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetVirtualRouterAttributeRequest
	(*GetVirtualRouterAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetVirtualRouterAttributeResponse
	(PacketAction)(0),                         // 9: lemming.dataplane.sai.PacketAction
	(*VirtualRouterAttribute)(nil),            // 10: lemming.dataplane.sai.VirtualRouterAttribute
}
var file_dataplane_proto_sai_virtual_router_proto_depIdxs = []int32{
	9,  // 0: lemming.dataplane.sai.CreateVirtualRouterRequest.violation_ttl1_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	9,  // 1: lemming.dataplane.sai.CreateVirtualRouterRequest.violation_ip_options_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	9,  // 2: lemming.dataplane.sai.CreateVirtualRouterRequest.unknown_l3_multicast_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	9,  // 3: lemming.dataplane.sai.SetVirtualRouterAttributeRequest.violation_ttl1_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	9,  // 4: lemming.dataplane.sai.SetVirtualRouterAttributeRequest.violation_ip_options_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	9,  // 5: lemming.dataplane.sai.SetVirtualRouterAttributeRequest.unknown_l3_multicast_packet_action:type_name -> lemming.dataplane.sai.PacketAction
	0,  // 6: lemming.dataplane.sai.GetVirtualRouterAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.VirtualRouterAttr
	10, // 7: lemming.dataplane.sai.GetVirtualRouterAttributeResponse.attr:type_name -> lemming.dataplane.sai.VirtualRouterAttribute
	1,  // 8: lemming.dataplane.sai.VirtualRouter.CreateVirtualRouter:input_type -> lemming.dataplane.sai.CreateVirtualRouterRequest
	3,  // 9: lemming.dataplane.sai.VirtualRouter.RemoveVirtualRouter:input_type -> lemming.dataplane.sai.RemoveVirtualRouterRequest
	5,  // 10: lemming.dataplane.sai.VirtualRouter.SetVirtualRouterAttribute:input_type -> lemming.dataplane.sai.SetVirtualRouterAttributeRequest
	7,  // 11: lemming.dataplane.sai.VirtualRouter.GetVirtualRouterAttribute:input_type -> lemming.dataplane.sai.GetVirtualRouterAttributeRequest
	2,  // 12: lemming.dataplane.sai.VirtualRouter.CreateVirtualRouter:output_type -> lemming.dataplane.sai.CreateVirtualRouterResponse
	4,  // 13: lemming.dataplane.sai.VirtualRouter.RemoveVirtualRouter:output_type -> lemming.dataplane.sai.RemoveVirtualRouterResponse
	6,  // 14: lemming.dataplane.sai.VirtualRouter.SetVirtualRouterAttribute:output_type -> lemming.dataplane.sai.SetVirtualRouterAttributeResponse
	8,  // 15: lemming.dataplane.sai.VirtualRouter.GetVirtualRouterAttribute:output_type -> lemming.dataplane.sai.GetVirtualRouterAttributeResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_dataplane_proto_sai_virtual_router_proto_init() }
func file_dataplane_proto_sai_virtual_router_proto_init() {
	if File_dataplane_proto_sai_virtual_router_proto != nil {
		return
	}
	file_dataplane_proto_sai_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_sai_virtual_router_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVirtualRouterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_virtual_router_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVirtualRouterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_virtual_router_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveVirtualRouterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_virtual_router_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveVirtualRouterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_virtual_router_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVirtualRouterAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_virtual_router_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVirtualRouterAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_virtual_router_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVirtualRouterAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_virtual_router_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVirtualRouterAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_sai_virtual_router_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_proto_sai_virtual_router_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_sai_virtual_router_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_sai_virtual_router_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_sai_virtual_router_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_sai_virtual_router_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_sai_virtual_router_proto_msgTypes,
	}.Build()
	File_dataplane_proto_sai_virtual_router_proto = out.File
	file_dataplane_proto_sai_virtual_router_proto_rawDesc = nil
	file_dataplane_proto_sai_virtual_router_proto_goTypes = nil
	file_dataplane_proto_sai_virtual_router_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VirtualRouterClient is the client API for VirtualRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VirtualRouterClient interface {
	CreateVirtualRouter(ctx context.Context, in *CreateVirtualRouterRequest, opts ...grpc.CallOption) (*CreateVirtualRouterResponse, error)
	RemoveVirtualRouter(ctx context.Context, in *RemoveVirtualRouterRequest, opts ...grpc.CallOption) (*RemoveVirtualRouterResponse, error)
	SetVirtualRouterAttribute(ctx context.Context, in *SetVirtualRouterAttributeRequest, opts ...grpc.CallOption) (*SetVirtualRouterAttributeResponse, error)
	GetVirtualRouterAttribute(ctx context.Context, in *GetVirtualRouterAttributeRequest, opts ...grpc.CallOption) (*GetVirtualRouterAttributeResponse, error)
}

type virtualRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualRouterClient(cc grpc.ClientConnInterface) VirtualRouterClient {
	return &virtualRouterClient{cc}
}

func (c *virtualRouterClient) CreateVirtualRouter(ctx context.Context, in *CreateVirtualRouterRequest, opts ...grpc.CallOption) (*CreateVirtualRouterResponse, error) {
	out := new(CreateVirtualRouterResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.VirtualRouter/CreateVirtualRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualRouterClient) RemoveVirtualRouter(ctx context.Context, in *RemoveVirtualRouterRequest, opts ...grpc.CallOption) (*RemoveVirtualRouterResponse, error) {
	out := new(RemoveVirtualRouterResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.VirtualRouter/RemoveVirtualRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualRouterClient) SetVirtualRouterAttribute(ctx context.Context, in *SetVirtualRouterAttributeRequest, opts ...grpc.CallOption) (*SetVirtualRouterAttributeResponse, error) {
	out := new(SetVirtualRouterAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.VirtualRouter/SetVirtualRouterAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualRouterClient) GetVirtualRouterAttribute(ctx context.Context, in *GetVirtualRouterAttributeRequest, opts ...grpc.CallOption) (*GetVirtualRouterAttributeResponse, error) {
	out := new(GetVirtualRouterAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.VirtualRouter/GetVirtualRouterAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualRouterServer is the server API for VirtualRouter service.
type VirtualRouterServer interface {
	CreateVirtualRouter(context.Context, *CreateVirtualRouterRequest) (*CreateVirtualRouterResponse, error)
	RemoveVirtualRouter(context.Context, *RemoveVirtualRouterRequest) (*RemoveVirtualRouterResponse, error)
	SetVirtualRouterAttribute(context.Context, *SetVirtualRouterAttributeRequest) (*SetVirtualRouterAttributeResponse, error)
	GetVirtualRouterAttribute(context.Context, *GetVirtualRouterAttributeRequest) (*GetVirtualRouterAttributeResponse, error)
}

// UnimplementedVirtualRouterServer can be embedded to have forward compatible implementations.
type UnimplementedVirtualRouterServer struct {
}

func (*UnimplementedVirtualRouterServer) CreateVirtualRouter(context.Context, *CreateVirtualRouterRequest) (*CreateVirtualRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualRouter not implemented")
}
func (*UnimplementedVirtualRouterServer) RemoveVirtualRouter(context.Context, *RemoveVirtualRouterRequest) (*RemoveVirtualRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVirtualRouter not implemented")
}
func (*UnimplementedVirtualRouterServer) SetVirtualRouterAttribute(context.Context, *SetVirtualRouterAttributeRequest) (*SetVirtualRouterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVirtualRouterAttribute not implemented")
}
func (*UnimplementedVirtualRouterServer) GetVirtualRouterAttribute(context.Context, *GetVirtualRouterAttributeRequest) (*GetVirtualRouterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualRouterAttribute not implemented")
}

func RegisterVirtualRouterServer(s *grpc.Server, srv VirtualRouterServer) {
	s.RegisterService(&_VirtualRouter_serviceDesc, srv)
}

func _VirtualRouter_CreateVirtualRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualRouterServer).CreateVirtualRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.VirtualRouter/CreateVirtualRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualRouterServer).CreateVirtualRouter(ctx, req.(*CreateVirtualRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualRouter_RemoveVirtualRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVirtualRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualRouterServer).RemoveVirtualRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.VirtualRouter/RemoveVirtualRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualRouterServer).RemoveVirtualRouter(ctx, req.(*RemoveVirtualRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualRouter_SetVirtualRouterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVirtualRouterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualRouterServer).SetVirtualRouterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.VirtualRouter/SetVirtualRouterAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualRouterServer).SetVirtualRouterAttribute(ctx, req.(*SetVirtualRouterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualRouter_GetVirtualRouterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualRouterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualRouterServer).GetVirtualRouterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.VirtualRouter/GetVirtualRouterAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualRouterServer).GetVirtualRouterAttribute(ctx, req.(*GetVirtualRouterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VirtualRouter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.VirtualRouter",
	HandlerType: (*VirtualRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVirtualRouter",
			Handler:    _VirtualRouter_CreateVirtualRouter_Handler,
		},
		{
			MethodName: "RemoveVirtualRouter",
			Handler:    _VirtualRouter_RemoveVirtualRouter_Handler,
		},
		{
			MethodName: "SetVirtualRouterAttribute",
			Handler:    _VirtualRouter_SetVirtualRouterAttribute_Handler,
		},
		{
			MethodName: "GetVirtualRouterAttribute",
			Handler:    _VirtualRouter_GetVirtualRouterAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/virtual_router.proto",
}
