// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/neighbor.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Neighbor_CreateNeighborEntry_FullMethodName       = "/lemming.dataplane.sai.Neighbor/CreateNeighborEntry"
	Neighbor_RemoveNeighborEntry_FullMethodName       = "/lemming.dataplane.sai.Neighbor/RemoveNeighborEntry"
	Neighbor_SetNeighborEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Neighbor/SetNeighborEntryAttribute"
	Neighbor_GetNeighborEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Neighbor/GetNeighborEntryAttribute"
	Neighbor_CreateNeighborEntries_FullMethodName     = "/lemming.dataplane.sai.Neighbor/CreateNeighborEntries"
	Neighbor_RemoveNeighborEntries_FullMethodName     = "/lemming.dataplane.sai.Neighbor/RemoveNeighborEntries"
)

// NeighborClient is the client API for Neighbor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NeighborClient interface {
	CreateNeighborEntry(ctx context.Context, in *CreateNeighborEntryRequest, opts ...grpc.CallOption) (*CreateNeighborEntryResponse, error)
	RemoveNeighborEntry(ctx context.Context, in *RemoveNeighborEntryRequest, opts ...grpc.CallOption) (*RemoveNeighborEntryResponse, error)
	SetNeighborEntryAttribute(ctx context.Context, in *SetNeighborEntryAttributeRequest, opts ...grpc.CallOption) (*SetNeighborEntryAttributeResponse, error)
	GetNeighborEntryAttribute(ctx context.Context, in *GetNeighborEntryAttributeRequest, opts ...grpc.CallOption) (*GetNeighborEntryAttributeResponse, error)
	CreateNeighborEntries(ctx context.Context, in *CreateNeighborEntriesRequest, opts ...grpc.CallOption) (*CreateNeighborEntriesResponse, error)
	RemoveNeighborEntries(ctx context.Context, in *RemoveNeighborEntriesRequest, opts ...grpc.CallOption) (*RemoveNeighborEntriesResponse, error)
}

type neighborClient struct {
	cc grpc.ClientConnInterface
}

func NewNeighborClient(cc grpc.ClientConnInterface) NeighborClient {
	return &neighborClient{cc}
}

func (c *neighborClient) CreateNeighborEntry(ctx context.Context, in *CreateNeighborEntryRequest, opts ...grpc.CallOption) (*CreateNeighborEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNeighborEntryResponse)
	err := c.cc.Invoke(ctx, Neighbor_CreateNeighborEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neighborClient) RemoveNeighborEntry(ctx context.Context, in *RemoveNeighborEntryRequest, opts ...grpc.CallOption) (*RemoveNeighborEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNeighborEntryResponse)
	err := c.cc.Invoke(ctx, Neighbor_RemoveNeighborEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neighborClient) SetNeighborEntryAttribute(ctx context.Context, in *SetNeighborEntryAttributeRequest, opts ...grpc.CallOption) (*SetNeighborEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNeighborEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Neighbor_SetNeighborEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neighborClient) GetNeighborEntryAttribute(ctx context.Context, in *GetNeighborEntryAttributeRequest, opts ...grpc.CallOption) (*GetNeighborEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNeighborEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Neighbor_GetNeighborEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neighborClient) CreateNeighborEntries(ctx context.Context, in *CreateNeighborEntriesRequest, opts ...grpc.CallOption) (*CreateNeighborEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNeighborEntriesResponse)
	err := c.cc.Invoke(ctx, Neighbor_CreateNeighborEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *neighborClient) RemoveNeighborEntries(ctx context.Context, in *RemoveNeighborEntriesRequest, opts ...grpc.CallOption) (*RemoveNeighborEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNeighborEntriesResponse)
	err := c.cc.Invoke(ctx, Neighbor_RemoveNeighborEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NeighborServer is the server API for Neighbor service.
// All implementations should embed UnimplementedNeighborServer
// for forward compatibility.
type NeighborServer interface {
	CreateNeighborEntry(context.Context, *CreateNeighborEntryRequest) (*CreateNeighborEntryResponse, error)
	RemoveNeighborEntry(context.Context, *RemoveNeighborEntryRequest) (*RemoveNeighborEntryResponse, error)
	SetNeighborEntryAttribute(context.Context, *SetNeighborEntryAttributeRequest) (*SetNeighborEntryAttributeResponse, error)
	GetNeighborEntryAttribute(context.Context, *GetNeighborEntryAttributeRequest) (*GetNeighborEntryAttributeResponse, error)
	CreateNeighborEntries(context.Context, *CreateNeighborEntriesRequest) (*CreateNeighborEntriesResponse, error)
	RemoveNeighborEntries(context.Context, *RemoveNeighborEntriesRequest) (*RemoveNeighborEntriesResponse, error)
}

// UnimplementedNeighborServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNeighborServer struct{}

func (UnimplementedNeighborServer) CreateNeighborEntry(context.Context, *CreateNeighborEntryRequest) (*CreateNeighborEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNeighborEntry not implemented")
}
func (UnimplementedNeighborServer) RemoveNeighborEntry(context.Context, *RemoveNeighborEntryRequest) (*RemoveNeighborEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNeighborEntry not implemented")
}
func (UnimplementedNeighborServer) SetNeighborEntryAttribute(context.Context, *SetNeighborEntryAttributeRequest) (*SetNeighborEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNeighborEntryAttribute not implemented")
}
func (UnimplementedNeighborServer) GetNeighborEntryAttribute(context.Context, *GetNeighborEntryAttributeRequest) (*GetNeighborEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNeighborEntryAttribute not implemented")
}
func (UnimplementedNeighborServer) CreateNeighborEntries(context.Context, *CreateNeighborEntriesRequest) (*CreateNeighborEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNeighborEntries not implemented")
}
func (UnimplementedNeighborServer) RemoveNeighborEntries(context.Context, *RemoveNeighborEntriesRequest) (*RemoveNeighborEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNeighborEntries not implemented")
}
func (UnimplementedNeighborServer) testEmbeddedByValue() {}

// UnsafeNeighborServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NeighborServer will
// result in compilation errors.
type UnsafeNeighborServer interface {
	mustEmbedUnimplementedNeighborServer()
}

func RegisterNeighborServer(s grpc.ServiceRegistrar, srv NeighborServer) {
	// If the following call pancis, it indicates UnimplementedNeighborServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Neighbor_ServiceDesc, srv)
}

func _Neighbor_CreateNeighborEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNeighborEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeighborServer).CreateNeighborEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Neighbor_CreateNeighborEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeighborServer).CreateNeighborEntry(ctx, req.(*CreateNeighborEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Neighbor_RemoveNeighborEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNeighborEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeighborServer).RemoveNeighborEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Neighbor_RemoveNeighborEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeighborServer).RemoveNeighborEntry(ctx, req.(*RemoveNeighborEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Neighbor_SetNeighborEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNeighborEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeighborServer).SetNeighborEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Neighbor_SetNeighborEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeighborServer).SetNeighborEntryAttribute(ctx, req.(*SetNeighborEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Neighbor_GetNeighborEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNeighborEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeighborServer).GetNeighborEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Neighbor_GetNeighborEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeighborServer).GetNeighborEntryAttribute(ctx, req.(*GetNeighborEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Neighbor_CreateNeighborEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNeighborEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeighborServer).CreateNeighborEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Neighbor_CreateNeighborEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeighborServer).CreateNeighborEntries(ctx, req.(*CreateNeighborEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Neighbor_RemoveNeighborEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNeighborEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NeighborServer).RemoveNeighborEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Neighbor_RemoveNeighborEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NeighborServer).RemoveNeighborEntries(ctx, req.(*RemoveNeighborEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Neighbor_ServiceDesc is the grpc.ServiceDesc for Neighbor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Neighbor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Neighbor",
	HandlerType: (*NeighborServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNeighborEntry",
			Handler:    _Neighbor_CreateNeighborEntry_Handler,
		},
		{
			MethodName: "RemoveNeighborEntry",
			Handler:    _Neighbor_RemoveNeighborEntry_Handler,
		},
		{
			MethodName: "SetNeighborEntryAttribute",
			Handler:    _Neighbor_SetNeighborEntryAttribute_Handler,
		},
		{
			MethodName: "GetNeighborEntryAttribute",
			Handler:    _Neighbor_GetNeighborEntryAttribute_Handler,
		},
		{
			MethodName: "CreateNeighborEntries",
			Handler:    _Neighbor_CreateNeighborEntries_Handler,
		},
		{
			MethodName: "RemoveNeighborEntries",
			Handler:    _Neighbor_RemoveNeighborEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/neighbor.proto",
}
