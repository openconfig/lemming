// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/udf.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Udf_CreateUdf_FullMethodName            = "/lemming.dataplane.sai.Udf/CreateUdf"
	Udf_RemoveUdf_FullMethodName            = "/lemming.dataplane.sai.Udf/RemoveUdf"
	Udf_SetUdfAttribute_FullMethodName      = "/lemming.dataplane.sai.Udf/SetUdfAttribute"
	Udf_GetUdfAttribute_FullMethodName      = "/lemming.dataplane.sai.Udf/GetUdfAttribute"
	Udf_CreateUdfMatch_FullMethodName       = "/lemming.dataplane.sai.Udf/CreateUdfMatch"
	Udf_RemoveUdfMatch_FullMethodName       = "/lemming.dataplane.sai.Udf/RemoveUdfMatch"
	Udf_GetUdfMatchAttribute_FullMethodName = "/lemming.dataplane.sai.Udf/GetUdfMatchAttribute"
	Udf_CreateUdfGroup_FullMethodName       = "/lemming.dataplane.sai.Udf/CreateUdfGroup"
	Udf_RemoveUdfGroup_FullMethodName       = "/lemming.dataplane.sai.Udf/RemoveUdfGroup"
	Udf_GetUdfGroupAttribute_FullMethodName = "/lemming.dataplane.sai.Udf/GetUdfGroupAttribute"
)

// UdfClient is the client API for Udf service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UdfClient interface {
	CreateUdf(ctx context.Context, in *CreateUdfRequest, opts ...grpc.CallOption) (*CreateUdfResponse, error)
	RemoveUdf(ctx context.Context, in *RemoveUdfRequest, opts ...grpc.CallOption) (*RemoveUdfResponse, error)
	SetUdfAttribute(ctx context.Context, in *SetUdfAttributeRequest, opts ...grpc.CallOption) (*SetUdfAttributeResponse, error)
	GetUdfAttribute(ctx context.Context, in *GetUdfAttributeRequest, opts ...grpc.CallOption) (*GetUdfAttributeResponse, error)
	CreateUdfMatch(ctx context.Context, in *CreateUdfMatchRequest, opts ...grpc.CallOption) (*CreateUdfMatchResponse, error)
	RemoveUdfMatch(ctx context.Context, in *RemoveUdfMatchRequest, opts ...grpc.CallOption) (*RemoveUdfMatchResponse, error)
	GetUdfMatchAttribute(ctx context.Context, in *GetUdfMatchAttributeRequest, opts ...grpc.CallOption) (*GetUdfMatchAttributeResponse, error)
	CreateUdfGroup(ctx context.Context, in *CreateUdfGroupRequest, opts ...grpc.CallOption) (*CreateUdfGroupResponse, error)
	RemoveUdfGroup(ctx context.Context, in *RemoveUdfGroupRequest, opts ...grpc.CallOption) (*RemoveUdfGroupResponse, error)
	GetUdfGroupAttribute(ctx context.Context, in *GetUdfGroupAttributeRequest, opts ...grpc.CallOption) (*GetUdfGroupAttributeResponse, error)
}

type udfClient struct {
	cc grpc.ClientConnInterface
}

func NewUdfClient(cc grpc.ClientConnInterface) UdfClient {
	return &udfClient{cc}
}

func (c *udfClient) CreateUdf(ctx context.Context, in *CreateUdfRequest, opts ...grpc.CallOption) (*CreateUdfResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUdfResponse)
	err := c.cc.Invoke(ctx, Udf_CreateUdf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) RemoveUdf(ctx context.Context, in *RemoveUdfRequest, opts ...grpc.CallOption) (*RemoveUdfResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUdfResponse)
	err := c.cc.Invoke(ctx, Udf_RemoveUdf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) SetUdfAttribute(ctx context.Context, in *SetUdfAttributeRequest, opts ...grpc.CallOption) (*SetUdfAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUdfAttributeResponse)
	err := c.cc.Invoke(ctx, Udf_SetUdfAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) GetUdfAttribute(ctx context.Context, in *GetUdfAttributeRequest, opts ...grpc.CallOption) (*GetUdfAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUdfAttributeResponse)
	err := c.cc.Invoke(ctx, Udf_GetUdfAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) CreateUdfMatch(ctx context.Context, in *CreateUdfMatchRequest, opts ...grpc.CallOption) (*CreateUdfMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUdfMatchResponse)
	err := c.cc.Invoke(ctx, Udf_CreateUdfMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) RemoveUdfMatch(ctx context.Context, in *RemoveUdfMatchRequest, opts ...grpc.CallOption) (*RemoveUdfMatchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUdfMatchResponse)
	err := c.cc.Invoke(ctx, Udf_RemoveUdfMatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) GetUdfMatchAttribute(ctx context.Context, in *GetUdfMatchAttributeRequest, opts ...grpc.CallOption) (*GetUdfMatchAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUdfMatchAttributeResponse)
	err := c.cc.Invoke(ctx, Udf_GetUdfMatchAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) CreateUdfGroup(ctx context.Context, in *CreateUdfGroupRequest, opts ...grpc.CallOption) (*CreateUdfGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUdfGroupResponse)
	err := c.cc.Invoke(ctx, Udf_CreateUdfGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) RemoveUdfGroup(ctx context.Context, in *RemoveUdfGroupRequest, opts ...grpc.CallOption) (*RemoveUdfGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUdfGroupResponse)
	err := c.cc.Invoke(ctx, Udf_RemoveUdfGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *udfClient) GetUdfGroupAttribute(ctx context.Context, in *GetUdfGroupAttributeRequest, opts ...grpc.CallOption) (*GetUdfGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUdfGroupAttributeResponse)
	err := c.cc.Invoke(ctx, Udf_GetUdfGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UdfServer is the server API for Udf service.
// All implementations should embed UnimplementedUdfServer
// for forward compatibility.
type UdfServer interface {
	CreateUdf(context.Context, *CreateUdfRequest) (*CreateUdfResponse, error)
	RemoveUdf(context.Context, *RemoveUdfRequest) (*RemoveUdfResponse, error)
	SetUdfAttribute(context.Context, *SetUdfAttributeRequest) (*SetUdfAttributeResponse, error)
	GetUdfAttribute(context.Context, *GetUdfAttributeRequest) (*GetUdfAttributeResponse, error)
	CreateUdfMatch(context.Context, *CreateUdfMatchRequest) (*CreateUdfMatchResponse, error)
	RemoveUdfMatch(context.Context, *RemoveUdfMatchRequest) (*RemoveUdfMatchResponse, error)
	GetUdfMatchAttribute(context.Context, *GetUdfMatchAttributeRequest) (*GetUdfMatchAttributeResponse, error)
	CreateUdfGroup(context.Context, *CreateUdfGroupRequest) (*CreateUdfGroupResponse, error)
	RemoveUdfGroup(context.Context, *RemoveUdfGroupRequest) (*RemoveUdfGroupResponse, error)
	GetUdfGroupAttribute(context.Context, *GetUdfGroupAttributeRequest) (*GetUdfGroupAttributeResponse, error)
}

// UnimplementedUdfServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUdfServer struct{}

func (UnimplementedUdfServer) CreateUdf(context.Context, *CreateUdfRequest) (*CreateUdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUdf not implemented")
}
func (UnimplementedUdfServer) RemoveUdf(context.Context, *RemoveUdfRequest) (*RemoveUdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUdf not implemented")
}
func (UnimplementedUdfServer) SetUdfAttribute(context.Context, *SetUdfAttributeRequest) (*SetUdfAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUdfAttribute not implemented")
}
func (UnimplementedUdfServer) GetUdfAttribute(context.Context, *GetUdfAttributeRequest) (*GetUdfAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUdfAttribute not implemented")
}
func (UnimplementedUdfServer) CreateUdfMatch(context.Context, *CreateUdfMatchRequest) (*CreateUdfMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUdfMatch not implemented")
}
func (UnimplementedUdfServer) RemoveUdfMatch(context.Context, *RemoveUdfMatchRequest) (*RemoveUdfMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUdfMatch not implemented")
}
func (UnimplementedUdfServer) GetUdfMatchAttribute(context.Context, *GetUdfMatchAttributeRequest) (*GetUdfMatchAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUdfMatchAttribute not implemented")
}
func (UnimplementedUdfServer) CreateUdfGroup(context.Context, *CreateUdfGroupRequest) (*CreateUdfGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUdfGroup not implemented")
}
func (UnimplementedUdfServer) RemoveUdfGroup(context.Context, *RemoveUdfGroupRequest) (*RemoveUdfGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUdfGroup not implemented")
}
func (UnimplementedUdfServer) GetUdfGroupAttribute(context.Context, *GetUdfGroupAttributeRequest) (*GetUdfGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUdfGroupAttribute not implemented")
}
func (UnimplementedUdfServer) testEmbeddedByValue() {}

// UnsafeUdfServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UdfServer will
// result in compilation errors.
type UnsafeUdfServer interface {
	mustEmbedUnimplementedUdfServer()
}

func RegisterUdfServer(s grpc.ServiceRegistrar, srv UdfServer) {
	// If the following call pancis, it indicates UnimplementedUdfServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Udf_ServiceDesc, srv)
}

func _Udf_CreateUdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).CreateUdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Udf_CreateUdf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).CreateUdf(ctx, req.(*CreateUdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_RemoveUdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).RemoveUdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Udf_RemoveUdf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).RemoveUdf(ctx, req.(*RemoveUdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_SetUdfAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUdfAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).SetUdfAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Udf_SetUdfAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).SetUdfAttribute(ctx, req.(*SetUdfAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_GetUdfAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUdfAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).GetUdfAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Udf_GetUdfAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).GetUdfAttribute(ctx, req.(*GetUdfAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_CreateUdfMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUdfMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).CreateUdfMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Udf_CreateUdfMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).CreateUdfMatch(ctx, req.(*CreateUdfMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_RemoveUdfMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUdfMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).RemoveUdfMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Udf_RemoveUdfMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).RemoveUdfMatch(ctx, req.(*RemoveUdfMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_GetUdfMatchAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUdfMatchAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).GetUdfMatchAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Udf_GetUdfMatchAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).GetUdfMatchAttribute(ctx, req.(*GetUdfMatchAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_CreateUdfGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUdfGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).CreateUdfGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Udf_CreateUdfGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).CreateUdfGroup(ctx, req.(*CreateUdfGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_RemoveUdfGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUdfGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).RemoveUdfGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Udf_RemoveUdfGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).RemoveUdfGroup(ctx, req.(*RemoveUdfGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Udf_GetUdfGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUdfGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UdfServer).GetUdfGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Udf_GetUdfGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UdfServer).GetUdfGroupAttribute(ctx, req.(*GetUdfGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Udf_ServiceDesc is the grpc.ServiceDesc for Udf service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Udf_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Udf",
	HandlerType: (*UdfServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUdf",
			Handler:    _Udf_CreateUdf_Handler,
		},
		{
			MethodName: "RemoveUdf",
			Handler:    _Udf_RemoveUdf_Handler,
		},
		{
			MethodName: "SetUdfAttribute",
			Handler:    _Udf_SetUdfAttribute_Handler,
		},
		{
			MethodName: "GetUdfAttribute",
			Handler:    _Udf_GetUdfAttribute_Handler,
		},
		{
			MethodName: "CreateUdfMatch",
			Handler:    _Udf_CreateUdfMatch_Handler,
		},
		{
			MethodName: "RemoveUdfMatch",
			Handler:    _Udf_RemoveUdfMatch_Handler,
		},
		{
			MethodName: "GetUdfMatchAttribute",
			Handler:    _Udf_GetUdfMatchAttribute_Handler,
		},
		{
			MethodName: "CreateUdfGroup",
			Handler:    _Udf_CreateUdfGroup_Handler,
		},
		{
			MethodName: "RemoveUdfGroup",
			Handler:    _Udf_RemoveUdfGroup_Handler,
		},
		{
			MethodName: "GetUdfGroupAttribute",
			Handler:    _Udf_GetUdfGroupAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/udf.proto",
}
