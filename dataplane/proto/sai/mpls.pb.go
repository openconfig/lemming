// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: dataplane/proto/sai/mpls.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InsegEntryAttr int32

const (
	InsegEntryAttr_INSEG_ENTRY_ATTR_UNSPECIFIED           InsegEntryAttr = 0
	InsegEntryAttr_INSEG_ENTRY_ATTR_NUM_OF_POP            InsegEntryAttr = 1
	InsegEntryAttr_INSEG_ENTRY_ATTR_PACKET_ACTION         InsegEntryAttr = 2
	InsegEntryAttr_INSEG_ENTRY_ATTR_TRAP_PRIORITY         InsegEntryAttr = 3
	InsegEntryAttr_INSEG_ENTRY_ATTR_NEXT_HOP_ID           InsegEntryAttr = 4
	InsegEntryAttr_INSEG_ENTRY_ATTR_PSC_TYPE              InsegEntryAttr = 5
	InsegEntryAttr_INSEG_ENTRY_ATTR_QOS_TC                InsegEntryAttr = 6
	InsegEntryAttr_INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP    InsegEntryAttr = 7
	InsegEntryAttr_INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP InsegEntryAttr = 8
	InsegEntryAttr_INSEG_ENTRY_ATTR_POP_TTL_MODE          InsegEntryAttr = 9
	InsegEntryAttr_INSEG_ENTRY_ATTR_POP_QOS_MODE          InsegEntryAttr = 10
	InsegEntryAttr_INSEG_ENTRY_ATTR_COUNTER_ID            InsegEntryAttr = 11
)

// Enum value maps for InsegEntryAttr.
var (
	InsegEntryAttr_name = map[int32]string{
		0:  "INSEG_ENTRY_ATTR_UNSPECIFIED",
		1:  "INSEG_ENTRY_ATTR_NUM_OF_POP",
		2:  "INSEG_ENTRY_ATTR_PACKET_ACTION",
		3:  "INSEG_ENTRY_ATTR_TRAP_PRIORITY",
		4:  "INSEG_ENTRY_ATTR_NEXT_HOP_ID",
		5:  "INSEG_ENTRY_ATTR_PSC_TYPE",
		6:  "INSEG_ENTRY_ATTR_QOS_TC",
		7:  "INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP",
		8:  "INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP",
		9:  "INSEG_ENTRY_ATTR_POP_TTL_MODE",
		10: "INSEG_ENTRY_ATTR_POP_QOS_MODE",
		11: "INSEG_ENTRY_ATTR_COUNTER_ID",
	}
	InsegEntryAttr_value = map[string]int32{
		"INSEG_ENTRY_ATTR_UNSPECIFIED":           0,
		"INSEG_ENTRY_ATTR_NUM_OF_POP":            1,
		"INSEG_ENTRY_ATTR_PACKET_ACTION":         2,
		"INSEG_ENTRY_ATTR_TRAP_PRIORITY":         3,
		"INSEG_ENTRY_ATTR_NEXT_HOP_ID":           4,
		"INSEG_ENTRY_ATTR_PSC_TYPE":              5,
		"INSEG_ENTRY_ATTR_QOS_TC":                6,
		"INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP":    7,
		"INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP": 8,
		"INSEG_ENTRY_ATTR_POP_TTL_MODE":          9,
		"INSEG_ENTRY_ATTR_POP_QOS_MODE":          10,
		"INSEG_ENTRY_ATTR_COUNTER_ID":            11,
	}
)

func (x InsegEntryAttr) Enum() *InsegEntryAttr {
	p := new(InsegEntryAttr)
	*p = x
	return p
}

func (x InsegEntryAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsegEntryAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_mpls_proto_enumTypes[0].Descriptor()
}

func (InsegEntryAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_mpls_proto_enumTypes[0]
}

func (x InsegEntryAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsegEntryAttr.Descriptor instead.
func (InsegEntryAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_mpls_proto_rawDescGZIP(), []int{0}
}

type CreateInsegEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry             *InsegEntry           `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	NumOfPop          *uint32               `protobuf:"varint,2,opt,name=num_of_pop,json=numOfPop,proto3,oneof" json:"num_of_pop,omitempty"`
	PacketAction      *PacketAction         `protobuf:"varint,3,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"packet_action,omitempty"`
	TrapPriority      *uint32               `protobuf:"varint,4,opt,name=trap_priority,json=trapPriority,proto3,oneof" json:"trap_priority,omitempty"`
	NextHopId         *uint64               `protobuf:"varint,5,opt,name=next_hop_id,json=nextHopId,proto3,oneof" json:"next_hop_id,omitempty"`
	PscType           *InsegEntryPscType    `protobuf:"varint,6,opt,name=psc_type,json=pscType,proto3,enum=lemming.dataplane.sai.InsegEntryPscType,oneof" json:"psc_type,omitempty"`
	QosTc             *uint32               `protobuf:"varint,7,opt,name=qos_tc,json=qosTc,proto3,oneof" json:"qos_tc,omitempty"`
	MplsExpToTcMap    *uint64               `protobuf:"varint,8,opt,name=mpls_exp_to_tc_map,json=mplsExpToTcMap,proto3,oneof" json:"mpls_exp_to_tc_map,omitempty"`
	MplsExpToColorMap *uint64               `protobuf:"varint,9,opt,name=mpls_exp_to_color_map,json=mplsExpToColorMap,proto3,oneof" json:"mpls_exp_to_color_map,omitempty"`
	PopTtlMode        *InsegEntryPopTtlMode `protobuf:"varint,10,opt,name=pop_ttl_mode,json=popTtlMode,proto3,enum=lemming.dataplane.sai.InsegEntryPopTtlMode,oneof" json:"pop_ttl_mode,omitempty"`
	PopQosMode        *InsegEntryPopQosMode `protobuf:"varint,11,opt,name=pop_qos_mode,json=popQosMode,proto3,enum=lemming.dataplane.sai.InsegEntryPopQosMode,oneof" json:"pop_qos_mode,omitempty"`
	CounterId         *uint64               `protobuf:"varint,12,opt,name=counter_id,json=counterId,proto3,oneof" json:"counter_id,omitempty"`
}

func (x *CreateInsegEntryRequest) Reset() {
	*x = CreateInsegEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInsegEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInsegEntryRequest) ProtoMessage() {}

func (x *CreateInsegEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInsegEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateInsegEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_mpls_proto_rawDescGZIP(), []int{0}
}

func (x *CreateInsegEntryRequest) GetEntry() *InsegEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *CreateInsegEntryRequest) GetNumOfPop() uint32 {
	if x != nil && x.NumOfPop != nil {
		return *x.NumOfPop
	}
	return 0
}

func (x *CreateInsegEntryRequest) GetPacketAction() PacketAction {
	if x != nil && x.PacketAction != nil {
		return *x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *CreateInsegEntryRequest) GetTrapPriority() uint32 {
	if x != nil && x.TrapPriority != nil {
		return *x.TrapPriority
	}
	return 0
}

func (x *CreateInsegEntryRequest) GetNextHopId() uint64 {
	if x != nil && x.NextHopId != nil {
		return *x.NextHopId
	}
	return 0
}

func (x *CreateInsegEntryRequest) GetPscType() InsegEntryPscType {
	if x != nil && x.PscType != nil {
		return *x.PscType
	}
	return InsegEntryPscType_INSEG_ENTRY_PSC_TYPE_UNSPECIFIED
}

func (x *CreateInsegEntryRequest) GetQosTc() uint32 {
	if x != nil && x.QosTc != nil {
		return *x.QosTc
	}
	return 0
}

func (x *CreateInsegEntryRequest) GetMplsExpToTcMap() uint64 {
	if x != nil && x.MplsExpToTcMap != nil {
		return *x.MplsExpToTcMap
	}
	return 0
}

func (x *CreateInsegEntryRequest) GetMplsExpToColorMap() uint64 {
	if x != nil && x.MplsExpToColorMap != nil {
		return *x.MplsExpToColorMap
	}
	return 0
}

func (x *CreateInsegEntryRequest) GetPopTtlMode() InsegEntryPopTtlMode {
	if x != nil && x.PopTtlMode != nil {
		return *x.PopTtlMode
	}
	return InsegEntryPopTtlMode_INSEG_ENTRY_POP_TTL_MODE_UNSPECIFIED
}

func (x *CreateInsegEntryRequest) GetPopQosMode() InsegEntryPopQosMode {
	if x != nil && x.PopQosMode != nil {
		return *x.PopQosMode
	}
	return InsegEntryPopQosMode_INSEG_ENTRY_POP_QOS_MODE_UNSPECIFIED
}

func (x *CreateInsegEntryRequest) GetCounterId() uint64 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

type CreateInsegEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateInsegEntryResponse) Reset() {
	*x = CreateInsegEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInsegEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInsegEntryResponse) ProtoMessage() {}

func (x *CreateInsegEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInsegEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateInsegEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_mpls_proto_rawDescGZIP(), []int{1}
}

type RemoveInsegEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry *InsegEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *RemoveInsegEntryRequest) Reset() {
	*x = RemoveInsegEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInsegEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInsegEntryRequest) ProtoMessage() {}

func (x *RemoveInsegEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInsegEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveInsegEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_mpls_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveInsegEntryRequest) GetEntry() *InsegEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type RemoveInsegEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveInsegEntryResponse) Reset() {
	*x = RemoveInsegEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveInsegEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveInsegEntryResponse) ProtoMessage() {}

func (x *RemoveInsegEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveInsegEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveInsegEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_mpls_proto_rawDescGZIP(), []int{3}
}

type SetInsegEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry             *InsegEntry           `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	NumOfPop          *uint32               `protobuf:"varint,2,opt,name=num_of_pop,json=numOfPop,proto3,oneof" json:"num_of_pop,omitempty"`
	PacketAction      *PacketAction         `protobuf:"varint,3,opt,name=packet_action,json=packetAction,proto3,enum=lemming.dataplane.sai.PacketAction,oneof" json:"packet_action,omitempty"`
	TrapPriority      *uint32               `protobuf:"varint,4,opt,name=trap_priority,json=trapPriority,proto3,oneof" json:"trap_priority,omitempty"`
	NextHopId         *uint64               `protobuf:"varint,5,opt,name=next_hop_id,json=nextHopId,proto3,oneof" json:"next_hop_id,omitempty"`
	PscType           *InsegEntryPscType    `protobuf:"varint,6,opt,name=psc_type,json=pscType,proto3,enum=lemming.dataplane.sai.InsegEntryPscType,oneof" json:"psc_type,omitempty"`
	QosTc             *uint32               `protobuf:"varint,7,opt,name=qos_tc,json=qosTc,proto3,oneof" json:"qos_tc,omitempty"`
	MplsExpToTcMap    *uint64               `protobuf:"varint,8,opt,name=mpls_exp_to_tc_map,json=mplsExpToTcMap,proto3,oneof" json:"mpls_exp_to_tc_map,omitempty"`
	MplsExpToColorMap *uint64               `protobuf:"varint,9,opt,name=mpls_exp_to_color_map,json=mplsExpToColorMap,proto3,oneof" json:"mpls_exp_to_color_map,omitempty"`
	PopTtlMode        *InsegEntryPopTtlMode `protobuf:"varint,10,opt,name=pop_ttl_mode,json=popTtlMode,proto3,enum=lemming.dataplane.sai.InsegEntryPopTtlMode,oneof" json:"pop_ttl_mode,omitempty"`
	PopQosMode        *InsegEntryPopQosMode `protobuf:"varint,11,opt,name=pop_qos_mode,json=popQosMode,proto3,enum=lemming.dataplane.sai.InsegEntryPopQosMode,oneof" json:"pop_qos_mode,omitempty"`
	CounterId         *uint64               `protobuf:"varint,12,opt,name=counter_id,json=counterId,proto3,oneof" json:"counter_id,omitempty"`
}

func (x *SetInsegEntryAttributeRequest) Reset() {
	*x = SetInsegEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInsegEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInsegEntryAttributeRequest) ProtoMessage() {}

func (x *SetInsegEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInsegEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetInsegEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_mpls_proto_rawDescGZIP(), []int{4}
}

func (x *SetInsegEntryAttributeRequest) GetEntry() *InsegEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *SetInsegEntryAttributeRequest) GetNumOfPop() uint32 {
	if x != nil && x.NumOfPop != nil {
		return *x.NumOfPop
	}
	return 0
}

func (x *SetInsegEntryAttributeRequest) GetPacketAction() PacketAction {
	if x != nil && x.PacketAction != nil {
		return *x.PacketAction
	}
	return PacketAction_PACKET_ACTION_UNSPECIFIED
}

func (x *SetInsegEntryAttributeRequest) GetTrapPriority() uint32 {
	if x != nil && x.TrapPriority != nil {
		return *x.TrapPriority
	}
	return 0
}

func (x *SetInsegEntryAttributeRequest) GetNextHopId() uint64 {
	if x != nil && x.NextHopId != nil {
		return *x.NextHopId
	}
	return 0
}

func (x *SetInsegEntryAttributeRequest) GetPscType() InsegEntryPscType {
	if x != nil && x.PscType != nil {
		return *x.PscType
	}
	return InsegEntryPscType_INSEG_ENTRY_PSC_TYPE_UNSPECIFIED
}

func (x *SetInsegEntryAttributeRequest) GetQosTc() uint32 {
	if x != nil && x.QosTc != nil {
		return *x.QosTc
	}
	return 0
}

func (x *SetInsegEntryAttributeRequest) GetMplsExpToTcMap() uint64 {
	if x != nil && x.MplsExpToTcMap != nil {
		return *x.MplsExpToTcMap
	}
	return 0
}

func (x *SetInsegEntryAttributeRequest) GetMplsExpToColorMap() uint64 {
	if x != nil && x.MplsExpToColorMap != nil {
		return *x.MplsExpToColorMap
	}
	return 0
}

func (x *SetInsegEntryAttributeRequest) GetPopTtlMode() InsegEntryPopTtlMode {
	if x != nil && x.PopTtlMode != nil {
		return *x.PopTtlMode
	}
	return InsegEntryPopTtlMode_INSEG_ENTRY_POP_TTL_MODE_UNSPECIFIED
}

func (x *SetInsegEntryAttributeRequest) GetPopQosMode() InsegEntryPopQosMode {
	if x != nil && x.PopQosMode != nil {
		return *x.PopQosMode
	}
	return InsegEntryPopQosMode_INSEG_ENTRY_POP_QOS_MODE_UNSPECIFIED
}

func (x *SetInsegEntryAttributeRequest) GetCounterId() uint64 {
	if x != nil && x.CounterId != nil {
		return *x.CounterId
	}
	return 0
}

type SetInsegEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetInsegEntryAttributeResponse) Reset() {
	*x = SetInsegEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInsegEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInsegEntryAttributeResponse) ProtoMessage() {}

func (x *SetInsegEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInsegEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetInsegEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_mpls_proto_rawDescGZIP(), []int{5}
}

type GetInsegEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry    *InsegEntry      `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	AttrType []InsegEntryAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.InsegEntryAttr" json:"attr_type,omitempty"`
}

func (x *GetInsegEntryAttributeRequest) Reset() {
	*x = GetInsegEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInsegEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInsegEntryAttributeRequest) ProtoMessage() {}

func (x *GetInsegEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInsegEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetInsegEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_mpls_proto_rawDescGZIP(), []int{6}
}

func (x *GetInsegEntryAttributeRequest) GetEntry() *InsegEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *GetInsegEntryAttributeRequest) GetAttrType() []InsegEntryAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetInsegEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *InsegEntryAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetInsegEntryAttributeResponse) Reset() {
	*x = GetInsegEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInsegEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInsegEntryAttributeResponse) ProtoMessage() {}

func (x *GetInsegEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInsegEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetInsegEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_mpls_proto_rawDescGZIP(), []int{7}
}

func (x *GetInsegEntryAttributeResponse) GetAttr() *InsegEntryAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateInsegEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reqs []*CreateInsegEntryRequest `protobuf:"bytes,1,rep,name=reqs,proto3" json:"reqs,omitempty"`
}

func (x *CreateInsegEntriesRequest) Reset() {
	*x = CreateInsegEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInsegEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInsegEntriesRequest) ProtoMessage() {}

func (x *CreateInsegEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInsegEntriesRequest.ProtoReflect.Descriptor instead.
func (*CreateInsegEntriesRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_mpls_proto_rawDescGZIP(), []int{8}
}

func (x *CreateInsegEntriesRequest) GetReqs() []*CreateInsegEntryRequest {
	if x != nil {
		return x.Reqs
	}
	return nil
}

type CreateInsegEntriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resps []*CreateInsegEntryResponse `protobuf:"bytes,1,rep,name=resps,proto3" json:"resps,omitempty"`
}

func (x *CreateInsegEntriesResponse) Reset() {
	*x = CreateInsegEntriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInsegEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInsegEntriesResponse) ProtoMessage() {}

func (x *CreateInsegEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_mpls_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInsegEntriesResponse.ProtoReflect.Descriptor instead.
func (*CreateInsegEntriesResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_mpls_proto_rawDescGZIP(), []int{9}
}

func (x *CreateInsegEntriesResponse) GetResps() []*CreateInsegEntryResponse {
	if x != nil {
		return x.Resps
	}
	return nil
}

var File_dataplane_proto_sai_mpls_proto protoreflect.FileDescriptor

var file_dataplane_proto_sai_mpls_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x6d, 0x70, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x07, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73,
	0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29,
	0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x4f, 0x66, 0x50, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0d, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x30, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48,
	0x02, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48,
	0x03, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x50, 0x0a, 0x08, 0x70, 0x73, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93,
	0xad, 0x0f, 0x05, 0x48, 0x04, 0x52, 0x07, 0x70, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x06, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x06, 0x48, 0x05, 0x52, 0x05, 0x71, 0x6f, 0x73,
	0x54, 0x63, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x12, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78,
	0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x06, 0x52, 0x0e, 0x6d, 0x70, 0x6c,
	0x73, 0x45, 0x78, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x15, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x08, 0x48, 0x07, 0x52, 0x11, 0x6d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70,
	0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a,
	0x0c, 0x70, 0x6f, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x54,
	0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x6f, 0x70,
	0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x70, 0x51, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x0a, 0x48, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x51, 0x6f, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f,
	0x0b, 0x48, 0x0a, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x40, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74,
	0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x73, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x71, 0x6f,
	0x73, 0x5f, 0x74, 0x63, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78,
	0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x18, 0x0a, 0x16, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x70, 0x5f, 0x74, 0x74,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6f, 0x70, 0x5f, 0x71,
	0x6f, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x52, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x65,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xc8, 0x07, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a,
	0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x75, 0x6d,
	0x4f, 0x66, 0x50, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x02,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x03,
	0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x50,
	0x0a, 0x08, 0x70, 0x73, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x05, 0x48, 0x04, 0x52, 0x07, 0x70, 0x73, 0x63, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x06, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x06, 0x48, 0x05, 0x52, 0x05, 0x71, 0x6f, 0x73, 0x54,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x12, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70,
	0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x06, 0x52, 0x0e, 0x6d, 0x70, 0x6c, 0x73,
	0x45, 0x78, 0x70, 0x54, 0x6f, 0x54, 0x63, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x15, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x08, 0x48, 0x07, 0x52, 0x11, 0x6d, 0x70, 0x6c, 0x73, 0x45, 0x78, 0x70, 0x54,
	0x6f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0c,
	0x70, 0x6f, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x54, 0x74,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x6f, 0x70, 0x5f,
	0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x70, 0x51, 0x6f, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93,
	0xad, 0x0f, 0x0a, 0x48, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x51, 0x6f, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0b,
	0x48, 0x0a, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x6f, 0x70, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x73, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x63, 0x5f, 0x6d,
	0x61, 0x70, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x70, 0x6f, 0x70, 0x5f, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x6f, 0x70, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x0a,
	0x1e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x9c, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x60,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72,
	0x22, 0x5f, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x04, 0x72, 0x65, 0x71, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x72, 0x65, 0x71,
	0x73, 0x22, 0x63, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x05, 0x72, 0x65, 0x73, 0x70, 0x73, 0x2a, 0xb5, 0x03, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x65, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x53,
	0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x49,
	0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x49, 0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49,
	0x54, 0x59, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f,
	0x50, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x53, 0x45, 0x47, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x53, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x54, 0x43,
	0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x49, 0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f,
	0x54, 0x4f, 0x5f, 0x54, 0x43, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x07, 0x12, 0x2a, 0x0a, 0x26, 0x49,
	0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x53, 0x45, 0x47,
	0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x50, 0x5f,
	0x54, 0x54, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e,
	0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50,
	0x4f, 0x50, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x0a, 0x12, 0x1f, 0x0a,
	0x1b, 0x49, 0x4e, 0x53, 0x45, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x32, 0x85,
	0x05, 0x0a, 0x04, 0x4d, 0x70, 0x6c, 0x73, 0x12, 0x75, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2e, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75,
	0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x65,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x65,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x65, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_dataplane_proto_sai_mpls_proto_rawDescOnce sync.Once
	file_dataplane_proto_sai_mpls_proto_rawDescData = file_dataplane_proto_sai_mpls_proto_rawDesc
)

func file_dataplane_proto_sai_mpls_proto_rawDescGZIP() []byte {
	file_dataplane_proto_sai_mpls_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_sai_mpls_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_sai_mpls_proto_rawDescData)
	})
	return file_dataplane_proto_sai_mpls_proto_rawDescData
}

var file_dataplane_proto_sai_mpls_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_proto_sai_mpls_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_dataplane_proto_sai_mpls_proto_goTypes = []interface{}{
	(InsegEntryAttr)(0),                    // 0: lemming.dataplane.sai.InsegEntryAttr
	(*CreateInsegEntryRequest)(nil),        // 1: lemming.dataplane.sai.CreateInsegEntryRequest
	(*CreateInsegEntryResponse)(nil),       // 2: lemming.dataplane.sai.CreateInsegEntryResponse
	(*RemoveInsegEntryRequest)(nil),        // 3: lemming.dataplane.sai.RemoveInsegEntryRequest
	(*RemoveInsegEntryResponse)(nil),       // 4: lemming.dataplane.sai.RemoveInsegEntryResponse
	(*SetInsegEntryAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetInsegEntryAttributeRequest
	(*SetInsegEntryAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetInsegEntryAttributeResponse
	(*GetInsegEntryAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetInsegEntryAttributeRequest
	(*GetInsegEntryAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetInsegEntryAttributeResponse
	(*CreateInsegEntriesRequest)(nil),      // 9: lemming.dataplane.sai.CreateInsegEntriesRequest
	(*CreateInsegEntriesResponse)(nil),     // 10: lemming.dataplane.sai.CreateInsegEntriesResponse
	(*InsegEntry)(nil),                     // 11: lemming.dataplane.sai.InsegEntry
	(PacketAction)(0),                      // 12: lemming.dataplane.sai.PacketAction
	(InsegEntryPscType)(0),                 // 13: lemming.dataplane.sai.InsegEntryPscType
	(InsegEntryPopTtlMode)(0),              // 14: lemming.dataplane.sai.InsegEntryPopTtlMode
	(InsegEntryPopQosMode)(0),              // 15: lemming.dataplane.sai.InsegEntryPopQosMode
	(*InsegEntryAttribute)(nil),            // 16: lemming.dataplane.sai.InsegEntryAttribute
}
var file_dataplane_proto_sai_mpls_proto_depIdxs = []int32{
	11, // 0: lemming.dataplane.sai.CreateInsegEntryRequest.entry:type_name -> lemming.dataplane.sai.InsegEntry
	12, // 1: lemming.dataplane.sai.CreateInsegEntryRequest.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	13, // 2: lemming.dataplane.sai.CreateInsegEntryRequest.psc_type:type_name -> lemming.dataplane.sai.InsegEntryPscType
	14, // 3: lemming.dataplane.sai.CreateInsegEntryRequest.pop_ttl_mode:type_name -> lemming.dataplane.sai.InsegEntryPopTtlMode
	15, // 4: lemming.dataplane.sai.CreateInsegEntryRequest.pop_qos_mode:type_name -> lemming.dataplane.sai.InsegEntryPopQosMode
	11, // 5: lemming.dataplane.sai.RemoveInsegEntryRequest.entry:type_name -> lemming.dataplane.sai.InsegEntry
	11, // 6: lemming.dataplane.sai.SetInsegEntryAttributeRequest.entry:type_name -> lemming.dataplane.sai.InsegEntry
	12, // 7: lemming.dataplane.sai.SetInsegEntryAttributeRequest.packet_action:type_name -> lemming.dataplane.sai.PacketAction
	13, // 8: lemming.dataplane.sai.SetInsegEntryAttributeRequest.psc_type:type_name -> lemming.dataplane.sai.InsegEntryPscType
	14, // 9: lemming.dataplane.sai.SetInsegEntryAttributeRequest.pop_ttl_mode:type_name -> lemming.dataplane.sai.InsegEntryPopTtlMode
	15, // 10: lemming.dataplane.sai.SetInsegEntryAttributeRequest.pop_qos_mode:type_name -> lemming.dataplane.sai.InsegEntryPopQosMode
	11, // 11: lemming.dataplane.sai.GetInsegEntryAttributeRequest.entry:type_name -> lemming.dataplane.sai.InsegEntry
	0,  // 12: lemming.dataplane.sai.GetInsegEntryAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.InsegEntryAttr
	16, // 13: lemming.dataplane.sai.GetInsegEntryAttributeResponse.attr:type_name -> lemming.dataplane.sai.InsegEntryAttribute
	1,  // 14: lemming.dataplane.sai.CreateInsegEntriesRequest.reqs:type_name -> lemming.dataplane.sai.CreateInsegEntryRequest
	2,  // 15: lemming.dataplane.sai.CreateInsegEntriesResponse.resps:type_name -> lemming.dataplane.sai.CreateInsegEntryResponse
	1,  // 16: lemming.dataplane.sai.Mpls.CreateInsegEntry:input_type -> lemming.dataplane.sai.CreateInsegEntryRequest
	3,  // 17: lemming.dataplane.sai.Mpls.RemoveInsegEntry:input_type -> lemming.dataplane.sai.RemoveInsegEntryRequest
	5,  // 18: lemming.dataplane.sai.Mpls.SetInsegEntryAttribute:input_type -> lemming.dataplane.sai.SetInsegEntryAttributeRequest
	7,  // 19: lemming.dataplane.sai.Mpls.GetInsegEntryAttribute:input_type -> lemming.dataplane.sai.GetInsegEntryAttributeRequest
	9,  // 20: lemming.dataplane.sai.Mpls.CreateInsegEntries:input_type -> lemming.dataplane.sai.CreateInsegEntriesRequest
	2,  // 21: lemming.dataplane.sai.Mpls.CreateInsegEntry:output_type -> lemming.dataplane.sai.CreateInsegEntryResponse
	4,  // 22: lemming.dataplane.sai.Mpls.RemoveInsegEntry:output_type -> lemming.dataplane.sai.RemoveInsegEntryResponse
	6,  // 23: lemming.dataplane.sai.Mpls.SetInsegEntryAttribute:output_type -> lemming.dataplane.sai.SetInsegEntryAttributeResponse
	8,  // 24: lemming.dataplane.sai.Mpls.GetInsegEntryAttribute:output_type -> lemming.dataplane.sai.GetInsegEntryAttributeResponse
	10, // 25: lemming.dataplane.sai.Mpls.CreateInsegEntries:output_type -> lemming.dataplane.sai.CreateInsegEntriesResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_dataplane_proto_sai_mpls_proto_init() }
func file_dataplane_proto_sai_mpls_proto_init() {
	if File_dataplane_proto_sai_mpls_proto != nil {
		return
	}
	file_dataplane_proto_sai_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_sai_mpls_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInsegEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_mpls_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInsegEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_mpls_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInsegEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_mpls_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveInsegEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_mpls_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInsegEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_mpls_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInsegEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_mpls_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInsegEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_mpls_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInsegEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_mpls_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInsegEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_mpls_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInsegEntriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_sai_mpls_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_proto_sai_mpls_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_sai_mpls_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_sai_mpls_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_sai_mpls_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_sai_mpls_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_sai_mpls_proto_msgTypes,
	}.Build()
	File_dataplane_proto_sai_mpls_proto = out.File
	file_dataplane_proto_sai_mpls_proto_rawDesc = nil
	file_dataplane_proto_sai_mpls_proto_goTypes = nil
	file_dataplane_proto_sai_mpls_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MplsClient is the client API for Mpls service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MplsClient interface {
	CreateInsegEntry(ctx context.Context, in *CreateInsegEntryRequest, opts ...grpc.CallOption) (*CreateInsegEntryResponse, error)
	RemoveInsegEntry(ctx context.Context, in *RemoveInsegEntryRequest, opts ...grpc.CallOption) (*RemoveInsegEntryResponse, error)
	SetInsegEntryAttribute(ctx context.Context, in *SetInsegEntryAttributeRequest, opts ...grpc.CallOption) (*SetInsegEntryAttributeResponse, error)
	GetInsegEntryAttribute(ctx context.Context, in *GetInsegEntryAttributeRequest, opts ...grpc.CallOption) (*GetInsegEntryAttributeResponse, error)
	CreateInsegEntries(ctx context.Context, in *CreateInsegEntriesRequest, opts ...grpc.CallOption) (*CreateInsegEntriesResponse, error)
}

type mplsClient struct {
	cc grpc.ClientConnInterface
}

func NewMplsClient(cc grpc.ClientConnInterface) MplsClient {
	return &mplsClient{cc}
}

func (c *mplsClient) CreateInsegEntry(ctx context.Context, in *CreateInsegEntryRequest, opts ...grpc.CallOption) (*CreateInsegEntryResponse, error) {
	out := new(CreateInsegEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Mpls/CreateInsegEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsClient) RemoveInsegEntry(ctx context.Context, in *RemoveInsegEntryRequest, opts ...grpc.CallOption) (*RemoveInsegEntryResponse, error) {
	out := new(RemoveInsegEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Mpls/RemoveInsegEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsClient) SetInsegEntryAttribute(ctx context.Context, in *SetInsegEntryAttributeRequest, opts ...grpc.CallOption) (*SetInsegEntryAttributeResponse, error) {
	out := new(SetInsegEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Mpls/SetInsegEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsClient) GetInsegEntryAttribute(ctx context.Context, in *GetInsegEntryAttributeRequest, opts ...grpc.CallOption) (*GetInsegEntryAttributeResponse, error) {
	out := new(GetInsegEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Mpls/GetInsegEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsClient) CreateInsegEntries(ctx context.Context, in *CreateInsegEntriesRequest, opts ...grpc.CallOption) (*CreateInsegEntriesResponse, error) {
	out := new(CreateInsegEntriesResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Mpls/CreateInsegEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MplsServer is the server API for Mpls service.
type MplsServer interface {
	CreateInsegEntry(context.Context, *CreateInsegEntryRequest) (*CreateInsegEntryResponse, error)
	RemoveInsegEntry(context.Context, *RemoveInsegEntryRequest) (*RemoveInsegEntryResponse, error)
	SetInsegEntryAttribute(context.Context, *SetInsegEntryAttributeRequest) (*SetInsegEntryAttributeResponse, error)
	GetInsegEntryAttribute(context.Context, *GetInsegEntryAttributeRequest) (*GetInsegEntryAttributeResponse, error)
	CreateInsegEntries(context.Context, *CreateInsegEntriesRequest) (*CreateInsegEntriesResponse, error)
}

// UnimplementedMplsServer can be embedded to have forward compatible implementations.
type UnimplementedMplsServer struct {
}

func (*UnimplementedMplsServer) CreateInsegEntry(context.Context, *CreateInsegEntryRequest) (*CreateInsegEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInsegEntry not implemented")
}
func (*UnimplementedMplsServer) RemoveInsegEntry(context.Context, *RemoveInsegEntryRequest) (*RemoveInsegEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveInsegEntry not implemented")
}
func (*UnimplementedMplsServer) SetInsegEntryAttribute(context.Context, *SetInsegEntryAttributeRequest) (*SetInsegEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInsegEntryAttribute not implemented")
}
func (*UnimplementedMplsServer) GetInsegEntryAttribute(context.Context, *GetInsegEntryAttributeRequest) (*GetInsegEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInsegEntryAttribute not implemented")
}
func (*UnimplementedMplsServer) CreateInsegEntries(context.Context, *CreateInsegEntriesRequest) (*CreateInsegEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInsegEntries not implemented")
}

func RegisterMplsServer(s *grpc.Server, srv MplsServer) {
	s.RegisterService(&_Mpls_serviceDesc, srv)
}

func _Mpls_CreateInsegEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInsegEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsServer).CreateInsegEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Mpls/CreateInsegEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsServer).CreateInsegEntry(ctx, req.(*CreateInsegEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpls_RemoveInsegEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInsegEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsServer).RemoveInsegEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Mpls/RemoveInsegEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsServer).RemoveInsegEntry(ctx, req.(*RemoveInsegEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpls_SetInsegEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInsegEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsServer).SetInsegEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Mpls/SetInsegEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsServer).SetInsegEntryAttribute(ctx, req.(*SetInsegEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpls_GetInsegEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInsegEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsServer).GetInsegEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Mpls/GetInsegEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsServer).GetInsegEntryAttribute(ctx, req.(*GetInsegEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mpls_CreateInsegEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInsegEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsServer).CreateInsegEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Mpls/CreateInsegEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsServer).CreateInsegEntries(ctx, req.(*CreateInsegEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mpls_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Mpls",
	HandlerType: (*MplsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInsegEntry",
			Handler:    _Mpls_CreateInsegEntry_Handler,
		},
		{
			MethodName: "RemoveInsegEntry",
			Handler:    _Mpls_RemoveInsegEntry_Handler,
		},
		{
			MethodName: "SetInsegEntryAttribute",
			Handler:    _Mpls_SetInsegEntryAttribute_Handler,
		},
		{
			MethodName: "GetInsegEntryAttribute",
			Handler:    _Mpls_GetInsegEntryAttribute_Handler,
		},
		{
			MethodName: "CreateInsegEntries",
			Handler:    _Mpls_CreateInsegEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/mpls.proto",
}
