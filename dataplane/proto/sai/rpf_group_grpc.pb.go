// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/rpf_group.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RpfGroup_CreateRpfGroup_FullMethodName             = "/lemming.dataplane.sai.RpfGroup/CreateRpfGroup"
	RpfGroup_RemoveRpfGroup_FullMethodName             = "/lemming.dataplane.sai.RpfGroup/RemoveRpfGroup"
	RpfGroup_GetRpfGroupAttribute_FullMethodName       = "/lemming.dataplane.sai.RpfGroup/GetRpfGroupAttribute"
	RpfGroup_CreateRpfGroupMember_FullMethodName       = "/lemming.dataplane.sai.RpfGroup/CreateRpfGroupMember"
	RpfGroup_RemoveRpfGroupMember_FullMethodName       = "/lemming.dataplane.sai.RpfGroup/RemoveRpfGroupMember"
	RpfGroup_GetRpfGroupMemberAttribute_FullMethodName = "/lemming.dataplane.sai.RpfGroup/GetRpfGroupMemberAttribute"
)

// RpfGroupClient is the client API for RpfGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpfGroupClient interface {
	CreateRpfGroup(ctx context.Context, in *CreateRpfGroupRequest, opts ...grpc.CallOption) (*CreateRpfGroupResponse, error)
	RemoveRpfGroup(ctx context.Context, in *RemoveRpfGroupRequest, opts ...grpc.CallOption) (*RemoveRpfGroupResponse, error)
	GetRpfGroupAttribute(ctx context.Context, in *GetRpfGroupAttributeRequest, opts ...grpc.CallOption) (*GetRpfGroupAttributeResponse, error)
	CreateRpfGroupMember(ctx context.Context, in *CreateRpfGroupMemberRequest, opts ...grpc.CallOption) (*CreateRpfGroupMemberResponse, error)
	RemoveRpfGroupMember(ctx context.Context, in *RemoveRpfGroupMemberRequest, opts ...grpc.CallOption) (*RemoveRpfGroupMemberResponse, error)
	GetRpfGroupMemberAttribute(ctx context.Context, in *GetRpfGroupMemberAttributeRequest, opts ...grpc.CallOption) (*GetRpfGroupMemberAttributeResponse, error)
}

type rpfGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewRpfGroupClient(cc grpc.ClientConnInterface) RpfGroupClient {
	return &rpfGroupClient{cc}
}

func (c *rpfGroupClient) CreateRpfGroup(ctx context.Context, in *CreateRpfGroupRequest, opts ...grpc.CallOption) (*CreateRpfGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRpfGroupResponse)
	err := c.cc.Invoke(ctx, RpfGroup_CreateRpfGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpfGroupClient) RemoveRpfGroup(ctx context.Context, in *RemoveRpfGroupRequest, opts ...grpc.CallOption) (*RemoveRpfGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRpfGroupResponse)
	err := c.cc.Invoke(ctx, RpfGroup_RemoveRpfGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpfGroupClient) GetRpfGroupAttribute(ctx context.Context, in *GetRpfGroupAttributeRequest, opts ...grpc.CallOption) (*GetRpfGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRpfGroupAttributeResponse)
	err := c.cc.Invoke(ctx, RpfGroup_GetRpfGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpfGroupClient) CreateRpfGroupMember(ctx context.Context, in *CreateRpfGroupMemberRequest, opts ...grpc.CallOption) (*CreateRpfGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRpfGroupMemberResponse)
	err := c.cc.Invoke(ctx, RpfGroup_CreateRpfGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpfGroupClient) RemoveRpfGroupMember(ctx context.Context, in *RemoveRpfGroupMemberRequest, opts ...grpc.CallOption) (*RemoveRpfGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRpfGroupMemberResponse)
	err := c.cc.Invoke(ctx, RpfGroup_RemoveRpfGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpfGroupClient) GetRpfGroupMemberAttribute(ctx context.Context, in *GetRpfGroupMemberAttributeRequest, opts ...grpc.CallOption) (*GetRpfGroupMemberAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRpfGroupMemberAttributeResponse)
	err := c.cc.Invoke(ctx, RpfGroup_GetRpfGroupMemberAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpfGroupServer is the server API for RpfGroup service.
// All implementations should embed UnimplementedRpfGroupServer
// for forward compatibility.
type RpfGroupServer interface {
	CreateRpfGroup(context.Context, *CreateRpfGroupRequest) (*CreateRpfGroupResponse, error)
	RemoveRpfGroup(context.Context, *RemoveRpfGroupRequest) (*RemoveRpfGroupResponse, error)
	GetRpfGroupAttribute(context.Context, *GetRpfGroupAttributeRequest) (*GetRpfGroupAttributeResponse, error)
	CreateRpfGroupMember(context.Context, *CreateRpfGroupMemberRequest) (*CreateRpfGroupMemberResponse, error)
	RemoveRpfGroupMember(context.Context, *RemoveRpfGroupMemberRequest) (*RemoveRpfGroupMemberResponse, error)
	GetRpfGroupMemberAttribute(context.Context, *GetRpfGroupMemberAttributeRequest) (*GetRpfGroupMemberAttributeResponse, error)
}

// UnimplementedRpfGroupServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRpfGroupServer struct{}

func (UnimplementedRpfGroupServer) CreateRpfGroup(context.Context, *CreateRpfGroupRequest) (*CreateRpfGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRpfGroup not implemented")
}
func (UnimplementedRpfGroupServer) RemoveRpfGroup(context.Context, *RemoveRpfGroupRequest) (*RemoveRpfGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRpfGroup not implemented")
}
func (UnimplementedRpfGroupServer) GetRpfGroupAttribute(context.Context, *GetRpfGroupAttributeRequest) (*GetRpfGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRpfGroupAttribute not implemented")
}
func (UnimplementedRpfGroupServer) CreateRpfGroupMember(context.Context, *CreateRpfGroupMemberRequest) (*CreateRpfGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRpfGroupMember not implemented")
}
func (UnimplementedRpfGroupServer) RemoveRpfGroupMember(context.Context, *RemoveRpfGroupMemberRequest) (*RemoveRpfGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRpfGroupMember not implemented")
}
func (UnimplementedRpfGroupServer) GetRpfGroupMemberAttribute(context.Context, *GetRpfGroupMemberAttributeRequest) (*GetRpfGroupMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRpfGroupMemberAttribute not implemented")
}
func (UnimplementedRpfGroupServer) testEmbeddedByValue() {}

// UnsafeRpfGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpfGroupServer will
// result in compilation errors.
type UnsafeRpfGroupServer interface {
	mustEmbedUnimplementedRpfGroupServer()
}

func RegisterRpfGroupServer(s grpc.ServiceRegistrar, srv RpfGroupServer) {
	// If the following call pancis, it indicates UnimplementedRpfGroupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RpfGroup_ServiceDesc, srv)
}

func _RpfGroup_CreateRpfGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRpfGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpfGroupServer).CreateRpfGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpfGroup_CreateRpfGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpfGroupServer).CreateRpfGroup(ctx, req.(*CreateRpfGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpfGroup_RemoveRpfGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRpfGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpfGroupServer).RemoveRpfGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpfGroup_RemoveRpfGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpfGroupServer).RemoveRpfGroup(ctx, req.(*RemoveRpfGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpfGroup_GetRpfGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRpfGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpfGroupServer).GetRpfGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpfGroup_GetRpfGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpfGroupServer).GetRpfGroupAttribute(ctx, req.(*GetRpfGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpfGroup_CreateRpfGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRpfGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpfGroupServer).CreateRpfGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpfGroup_CreateRpfGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpfGroupServer).CreateRpfGroupMember(ctx, req.(*CreateRpfGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpfGroup_RemoveRpfGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRpfGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpfGroupServer).RemoveRpfGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpfGroup_RemoveRpfGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpfGroupServer).RemoveRpfGroupMember(ctx, req.(*RemoveRpfGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpfGroup_GetRpfGroupMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRpfGroupMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpfGroupServer).GetRpfGroupMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RpfGroup_GetRpfGroupMemberAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpfGroupServer).GetRpfGroupMemberAttribute(ctx, req.(*GetRpfGroupMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpfGroup_ServiceDesc is the grpc.ServiceDesc for RpfGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpfGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.RpfGroup",
	HandlerType: (*RpfGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRpfGroup",
			Handler:    _RpfGroup_CreateRpfGroup_Handler,
		},
		{
			MethodName: "RemoveRpfGroup",
			Handler:    _RpfGroup_RemoveRpfGroup_Handler,
		},
		{
			MethodName: "GetRpfGroupAttribute",
			Handler:    _RpfGroup_GetRpfGroupAttribute_Handler,
		},
		{
			MethodName: "CreateRpfGroupMember",
			Handler:    _RpfGroup_CreateRpfGroupMember_Handler,
		},
		{
			MethodName: "RemoveRpfGroupMember",
			Handler:    _RpfGroup_RemoveRpfGroupMember_Handler,
		},
		{
			MethodName: "GetRpfGroupMemberAttribute",
			Handler:    _RpfGroup_GetRpfGroupMemberAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/rpf_group.proto",
}
