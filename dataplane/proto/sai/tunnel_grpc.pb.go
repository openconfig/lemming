// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/tunnel.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tunnel_CreateTunnelMap_FullMethodName                  = "/lemming.dataplane.sai.Tunnel/CreateTunnelMap"
	Tunnel_RemoveTunnelMap_FullMethodName                  = "/lemming.dataplane.sai.Tunnel/RemoveTunnelMap"
	Tunnel_GetTunnelMapAttribute_FullMethodName            = "/lemming.dataplane.sai.Tunnel/GetTunnelMapAttribute"
	Tunnel_CreateTunnel_FullMethodName                     = "/lemming.dataplane.sai.Tunnel/CreateTunnel"
	Tunnel_RemoveTunnel_FullMethodName                     = "/lemming.dataplane.sai.Tunnel/RemoveTunnel"
	Tunnel_SetTunnelAttribute_FullMethodName               = "/lemming.dataplane.sai.Tunnel/SetTunnelAttribute"
	Tunnel_GetTunnelAttribute_FullMethodName               = "/lemming.dataplane.sai.Tunnel/GetTunnelAttribute"
	Tunnel_GetTunnelStats_FullMethodName                   = "/lemming.dataplane.sai.Tunnel/GetTunnelStats"
	Tunnel_CreateTunnelTermTableEntry_FullMethodName       = "/lemming.dataplane.sai.Tunnel/CreateTunnelTermTableEntry"
	Tunnel_RemoveTunnelTermTableEntry_FullMethodName       = "/lemming.dataplane.sai.Tunnel/RemoveTunnelTermTableEntry"
	Tunnel_SetTunnelTermTableEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Tunnel/SetTunnelTermTableEntryAttribute"
	Tunnel_GetTunnelTermTableEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Tunnel/GetTunnelTermTableEntryAttribute"
	Tunnel_CreateTunnelMapEntry_FullMethodName             = "/lemming.dataplane.sai.Tunnel/CreateTunnelMapEntry"
	Tunnel_RemoveTunnelMapEntry_FullMethodName             = "/lemming.dataplane.sai.Tunnel/RemoveTunnelMapEntry"
	Tunnel_GetTunnelMapEntryAttribute_FullMethodName       = "/lemming.dataplane.sai.Tunnel/GetTunnelMapEntryAttribute"
	Tunnel_CreateTunnels_FullMethodName                    = "/lemming.dataplane.sai.Tunnel/CreateTunnels"
	Tunnel_RemoveTunnels_FullMethodName                    = "/lemming.dataplane.sai.Tunnel/RemoveTunnels"
)

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelClient interface {
	CreateTunnelMap(ctx context.Context, in *CreateTunnelMapRequest, opts ...grpc.CallOption) (*CreateTunnelMapResponse, error)
	RemoveTunnelMap(ctx context.Context, in *RemoveTunnelMapRequest, opts ...grpc.CallOption) (*RemoveTunnelMapResponse, error)
	GetTunnelMapAttribute(ctx context.Context, in *GetTunnelMapAttributeRequest, opts ...grpc.CallOption) (*GetTunnelMapAttributeResponse, error)
	CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*CreateTunnelResponse, error)
	RemoveTunnel(ctx context.Context, in *RemoveTunnelRequest, opts ...grpc.CallOption) (*RemoveTunnelResponse, error)
	SetTunnelAttribute(ctx context.Context, in *SetTunnelAttributeRequest, opts ...grpc.CallOption) (*SetTunnelAttributeResponse, error)
	GetTunnelAttribute(ctx context.Context, in *GetTunnelAttributeRequest, opts ...grpc.CallOption) (*GetTunnelAttributeResponse, error)
	GetTunnelStats(ctx context.Context, in *GetTunnelStatsRequest, opts ...grpc.CallOption) (*GetTunnelStatsResponse, error)
	CreateTunnelTermTableEntry(ctx context.Context, in *CreateTunnelTermTableEntryRequest, opts ...grpc.CallOption) (*CreateTunnelTermTableEntryResponse, error)
	RemoveTunnelTermTableEntry(ctx context.Context, in *RemoveTunnelTermTableEntryRequest, opts ...grpc.CallOption) (*RemoveTunnelTermTableEntryResponse, error)
	SetTunnelTermTableEntryAttribute(ctx context.Context, in *SetTunnelTermTableEntryAttributeRequest, opts ...grpc.CallOption) (*SetTunnelTermTableEntryAttributeResponse, error)
	GetTunnelTermTableEntryAttribute(ctx context.Context, in *GetTunnelTermTableEntryAttributeRequest, opts ...grpc.CallOption) (*GetTunnelTermTableEntryAttributeResponse, error)
	CreateTunnelMapEntry(ctx context.Context, in *CreateTunnelMapEntryRequest, opts ...grpc.CallOption) (*CreateTunnelMapEntryResponse, error)
	RemoveTunnelMapEntry(ctx context.Context, in *RemoveTunnelMapEntryRequest, opts ...grpc.CallOption) (*RemoveTunnelMapEntryResponse, error)
	GetTunnelMapEntryAttribute(ctx context.Context, in *GetTunnelMapEntryAttributeRequest, opts ...grpc.CallOption) (*GetTunnelMapEntryAttributeResponse, error)
	CreateTunnels(ctx context.Context, in *CreateTunnelsRequest, opts ...grpc.CallOption) (*CreateTunnelsResponse, error)
	RemoveTunnels(ctx context.Context, in *RemoveTunnelsRequest, opts ...grpc.CallOption) (*RemoveTunnelsResponse, error)
}

type tunnelClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelClient(cc grpc.ClientConnInterface) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) CreateTunnelMap(ctx context.Context, in *CreateTunnelMapRequest, opts ...grpc.CallOption) (*CreateTunnelMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTunnelMapResponse)
	err := c.cc.Invoke(ctx, Tunnel_CreateTunnelMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) RemoveTunnelMap(ctx context.Context, in *RemoveTunnelMapRequest, opts ...grpc.CallOption) (*RemoveTunnelMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTunnelMapResponse)
	err := c.cc.Invoke(ctx, Tunnel_RemoveTunnelMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetTunnelMapAttribute(ctx context.Context, in *GetTunnelMapAttributeRequest, opts ...grpc.CallOption) (*GetTunnelMapAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTunnelMapAttributeResponse)
	err := c.cc.Invoke(ctx, Tunnel_GetTunnelMapAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*CreateTunnelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTunnelResponse)
	err := c.cc.Invoke(ctx, Tunnel_CreateTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) RemoveTunnel(ctx context.Context, in *RemoveTunnelRequest, opts ...grpc.CallOption) (*RemoveTunnelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTunnelResponse)
	err := c.cc.Invoke(ctx, Tunnel_RemoveTunnel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) SetTunnelAttribute(ctx context.Context, in *SetTunnelAttributeRequest, opts ...grpc.CallOption) (*SetTunnelAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTunnelAttributeResponse)
	err := c.cc.Invoke(ctx, Tunnel_SetTunnelAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetTunnelAttribute(ctx context.Context, in *GetTunnelAttributeRequest, opts ...grpc.CallOption) (*GetTunnelAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTunnelAttributeResponse)
	err := c.cc.Invoke(ctx, Tunnel_GetTunnelAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetTunnelStats(ctx context.Context, in *GetTunnelStatsRequest, opts ...grpc.CallOption) (*GetTunnelStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTunnelStatsResponse)
	err := c.cc.Invoke(ctx, Tunnel_GetTunnelStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) CreateTunnelTermTableEntry(ctx context.Context, in *CreateTunnelTermTableEntryRequest, opts ...grpc.CallOption) (*CreateTunnelTermTableEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTunnelTermTableEntryResponse)
	err := c.cc.Invoke(ctx, Tunnel_CreateTunnelTermTableEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) RemoveTunnelTermTableEntry(ctx context.Context, in *RemoveTunnelTermTableEntryRequest, opts ...grpc.CallOption) (*RemoveTunnelTermTableEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTunnelTermTableEntryResponse)
	err := c.cc.Invoke(ctx, Tunnel_RemoveTunnelTermTableEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) SetTunnelTermTableEntryAttribute(ctx context.Context, in *SetTunnelTermTableEntryAttributeRequest, opts ...grpc.CallOption) (*SetTunnelTermTableEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTunnelTermTableEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Tunnel_SetTunnelTermTableEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetTunnelTermTableEntryAttribute(ctx context.Context, in *GetTunnelTermTableEntryAttributeRequest, opts ...grpc.CallOption) (*GetTunnelTermTableEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTunnelTermTableEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Tunnel_GetTunnelTermTableEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) CreateTunnelMapEntry(ctx context.Context, in *CreateTunnelMapEntryRequest, opts ...grpc.CallOption) (*CreateTunnelMapEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTunnelMapEntryResponse)
	err := c.cc.Invoke(ctx, Tunnel_CreateTunnelMapEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) RemoveTunnelMapEntry(ctx context.Context, in *RemoveTunnelMapEntryRequest, opts ...grpc.CallOption) (*RemoveTunnelMapEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTunnelMapEntryResponse)
	err := c.cc.Invoke(ctx, Tunnel_RemoveTunnelMapEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) GetTunnelMapEntryAttribute(ctx context.Context, in *GetTunnelMapEntryAttributeRequest, opts ...grpc.CallOption) (*GetTunnelMapEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTunnelMapEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Tunnel_GetTunnelMapEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) CreateTunnels(ctx context.Context, in *CreateTunnelsRequest, opts ...grpc.CallOption) (*CreateTunnelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTunnelsResponse)
	err := c.cc.Invoke(ctx, Tunnel_CreateTunnels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) RemoveTunnels(ctx context.Context, in *RemoveTunnelsRequest, opts ...grpc.CallOption) (*RemoveTunnelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTunnelsResponse)
	err := c.cc.Invoke(ctx, Tunnel_RemoveTunnels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelServer is the server API for Tunnel service.
// All implementations should embed UnimplementedTunnelServer
// for forward compatibility.
type TunnelServer interface {
	CreateTunnelMap(context.Context, *CreateTunnelMapRequest) (*CreateTunnelMapResponse, error)
	RemoveTunnelMap(context.Context, *RemoveTunnelMapRequest) (*RemoveTunnelMapResponse, error)
	GetTunnelMapAttribute(context.Context, *GetTunnelMapAttributeRequest) (*GetTunnelMapAttributeResponse, error)
	CreateTunnel(context.Context, *CreateTunnelRequest) (*CreateTunnelResponse, error)
	RemoveTunnel(context.Context, *RemoveTunnelRequest) (*RemoveTunnelResponse, error)
	SetTunnelAttribute(context.Context, *SetTunnelAttributeRequest) (*SetTunnelAttributeResponse, error)
	GetTunnelAttribute(context.Context, *GetTunnelAttributeRequest) (*GetTunnelAttributeResponse, error)
	GetTunnelStats(context.Context, *GetTunnelStatsRequest) (*GetTunnelStatsResponse, error)
	CreateTunnelTermTableEntry(context.Context, *CreateTunnelTermTableEntryRequest) (*CreateTunnelTermTableEntryResponse, error)
	RemoveTunnelTermTableEntry(context.Context, *RemoveTunnelTermTableEntryRequest) (*RemoveTunnelTermTableEntryResponse, error)
	SetTunnelTermTableEntryAttribute(context.Context, *SetTunnelTermTableEntryAttributeRequest) (*SetTunnelTermTableEntryAttributeResponse, error)
	GetTunnelTermTableEntryAttribute(context.Context, *GetTunnelTermTableEntryAttributeRequest) (*GetTunnelTermTableEntryAttributeResponse, error)
	CreateTunnelMapEntry(context.Context, *CreateTunnelMapEntryRequest) (*CreateTunnelMapEntryResponse, error)
	RemoveTunnelMapEntry(context.Context, *RemoveTunnelMapEntryRequest) (*RemoveTunnelMapEntryResponse, error)
	GetTunnelMapEntryAttribute(context.Context, *GetTunnelMapEntryAttributeRequest) (*GetTunnelMapEntryAttributeResponse, error)
	CreateTunnels(context.Context, *CreateTunnelsRequest) (*CreateTunnelsResponse, error)
	RemoveTunnels(context.Context, *RemoveTunnelsRequest) (*RemoveTunnelsResponse, error)
}

// UnimplementedTunnelServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTunnelServer struct{}

func (UnimplementedTunnelServer) CreateTunnelMap(context.Context, *CreateTunnelMapRequest) (*CreateTunnelMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnelMap not implemented")
}
func (UnimplementedTunnelServer) RemoveTunnelMap(context.Context, *RemoveTunnelMapRequest) (*RemoveTunnelMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTunnelMap not implemented")
}
func (UnimplementedTunnelServer) GetTunnelMapAttribute(context.Context, *GetTunnelMapAttributeRequest) (*GetTunnelMapAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelMapAttribute not implemented")
}
func (UnimplementedTunnelServer) CreateTunnel(context.Context, *CreateTunnelRequest) (*CreateTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedTunnelServer) RemoveTunnel(context.Context, *RemoveTunnelRequest) (*RemoveTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTunnel not implemented")
}
func (UnimplementedTunnelServer) SetTunnelAttribute(context.Context, *SetTunnelAttributeRequest) (*SetTunnelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTunnelAttribute not implemented")
}
func (UnimplementedTunnelServer) GetTunnelAttribute(context.Context, *GetTunnelAttributeRequest) (*GetTunnelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelAttribute not implemented")
}
func (UnimplementedTunnelServer) GetTunnelStats(context.Context, *GetTunnelStatsRequest) (*GetTunnelStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelStats not implemented")
}
func (UnimplementedTunnelServer) CreateTunnelTermTableEntry(context.Context, *CreateTunnelTermTableEntryRequest) (*CreateTunnelTermTableEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnelTermTableEntry not implemented")
}
func (UnimplementedTunnelServer) RemoveTunnelTermTableEntry(context.Context, *RemoveTunnelTermTableEntryRequest) (*RemoveTunnelTermTableEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTunnelTermTableEntry not implemented")
}
func (UnimplementedTunnelServer) SetTunnelTermTableEntryAttribute(context.Context, *SetTunnelTermTableEntryAttributeRequest) (*SetTunnelTermTableEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTunnelTermTableEntryAttribute not implemented")
}
func (UnimplementedTunnelServer) GetTunnelTermTableEntryAttribute(context.Context, *GetTunnelTermTableEntryAttributeRequest) (*GetTunnelTermTableEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelTermTableEntryAttribute not implemented")
}
func (UnimplementedTunnelServer) CreateTunnelMapEntry(context.Context, *CreateTunnelMapEntryRequest) (*CreateTunnelMapEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnelMapEntry not implemented")
}
func (UnimplementedTunnelServer) RemoveTunnelMapEntry(context.Context, *RemoveTunnelMapEntryRequest) (*RemoveTunnelMapEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTunnelMapEntry not implemented")
}
func (UnimplementedTunnelServer) GetTunnelMapEntryAttribute(context.Context, *GetTunnelMapEntryAttributeRequest) (*GetTunnelMapEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelMapEntryAttribute not implemented")
}
func (UnimplementedTunnelServer) CreateTunnels(context.Context, *CreateTunnelsRequest) (*CreateTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnels not implemented")
}
func (UnimplementedTunnelServer) RemoveTunnels(context.Context, *RemoveTunnelsRequest) (*RemoveTunnelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTunnels not implemented")
}
func (UnimplementedTunnelServer) testEmbeddedByValue() {}

// UnsafeTunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelServer will
// result in compilation errors.
type UnsafeTunnelServer interface {
	mustEmbedUnimplementedTunnelServer()
}

func RegisterTunnelServer(s grpc.ServiceRegistrar, srv TunnelServer) {
	// If the following call pancis, it indicates UnimplementedTunnelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tunnel_ServiceDesc, srv)
}

func _Tunnel_CreateTunnelMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).CreateTunnelMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_CreateTunnelMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).CreateTunnelMap(ctx, req.(*CreateTunnelMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_RemoveTunnelMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTunnelMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RemoveTunnelMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_RemoveTunnelMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RemoveTunnelMap(ctx, req.(*RemoveTunnelMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetTunnelMapAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelMapAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetTunnelMapAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_GetTunnelMapAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetTunnelMapAttribute(ctx, req.(*GetTunnelMapAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_CreateTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).CreateTunnel(ctx, req.(*CreateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_RemoveTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RemoveTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_RemoveTunnel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RemoveTunnel(ctx, req.(*RemoveTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_SetTunnelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTunnelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).SetTunnelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_SetTunnelAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).SetTunnelAttribute(ctx, req.(*SetTunnelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetTunnelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetTunnelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_GetTunnelAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetTunnelAttribute(ctx, req.(*GetTunnelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetTunnelStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetTunnelStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_GetTunnelStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetTunnelStats(ctx, req.(*GetTunnelStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_CreateTunnelTermTableEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelTermTableEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).CreateTunnelTermTableEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_CreateTunnelTermTableEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).CreateTunnelTermTableEntry(ctx, req.(*CreateTunnelTermTableEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_RemoveTunnelTermTableEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTunnelTermTableEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RemoveTunnelTermTableEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_RemoveTunnelTermTableEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RemoveTunnelTermTableEntry(ctx, req.(*RemoveTunnelTermTableEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_SetTunnelTermTableEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTunnelTermTableEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).SetTunnelTermTableEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_SetTunnelTermTableEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).SetTunnelTermTableEntryAttribute(ctx, req.(*SetTunnelTermTableEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetTunnelTermTableEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelTermTableEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetTunnelTermTableEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_GetTunnelTermTableEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetTunnelTermTableEntryAttribute(ctx, req.(*GetTunnelTermTableEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_CreateTunnelMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).CreateTunnelMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_CreateTunnelMapEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).CreateTunnelMapEntry(ctx, req.(*CreateTunnelMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_RemoveTunnelMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTunnelMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RemoveTunnelMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_RemoveTunnelMapEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RemoveTunnelMapEntry(ctx, req.(*RemoveTunnelMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_GetTunnelMapEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTunnelMapEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).GetTunnelMapEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_GetTunnelMapEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).GetTunnelMapEntryAttribute(ctx, req.(*GetTunnelMapEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_CreateTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).CreateTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_CreateTunnels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).CreateTunnels(ctx, req.(*CreateTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_RemoveTunnels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTunnelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).RemoveTunnels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tunnel_RemoveTunnels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).RemoveTunnels(ctx, req.(*RemoveTunnelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tunnel_ServiceDesc is the grpc.ServiceDesc for Tunnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tunnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTunnelMap",
			Handler:    _Tunnel_CreateTunnelMap_Handler,
		},
		{
			MethodName: "RemoveTunnelMap",
			Handler:    _Tunnel_RemoveTunnelMap_Handler,
		},
		{
			MethodName: "GetTunnelMapAttribute",
			Handler:    _Tunnel_GetTunnelMapAttribute_Handler,
		},
		{
			MethodName: "CreateTunnel",
			Handler:    _Tunnel_CreateTunnel_Handler,
		},
		{
			MethodName: "RemoveTunnel",
			Handler:    _Tunnel_RemoveTunnel_Handler,
		},
		{
			MethodName: "SetTunnelAttribute",
			Handler:    _Tunnel_SetTunnelAttribute_Handler,
		},
		{
			MethodName: "GetTunnelAttribute",
			Handler:    _Tunnel_GetTunnelAttribute_Handler,
		},
		{
			MethodName: "GetTunnelStats",
			Handler:    _Tunnel_GetTunnelStats_Handler,
		},
		{
			MethodName: "CreateTunnelTermTableEntry",
			Handler:    _Tunnel_CreateTunnelTermTableEntry_Handler,
		},
		{
			MethodName: "RemoveTunnelTermTableEntry",
			Handler:    _Tunnel_RemoveTunnelTermTableEntry_Handler,
		},
		{
			MethodName: "SetTunnelTermTableEntryAttribute",
			Handler:    _Tunnel_SetTunnelTermTableEntryAttribute_Handler,
		},
		{
			MethodName: "GetTunnelTermTableEntryAttribute",
			Handler:    _Tunnel_GetTunnelTermTableEntryAttribute_Handler,
		},
		{
			MethodName: "CreateTunnelMapEntry",
			Handler:    _Tunnel_CreateTunnelMapEntry_Handler,
		},
		{
			MethodName: "RemoveTunnelMapEntry",
			Handler:    _Tunnel_RemoveTunnelMapEntry_Handler,
		},
		{
			MethodName: "GetTunnelMapEntryAttribute",
			Handler:    _Tunnel_GetTunnelMapEntryAttribute_Handler,
		},
		{
			MethodName: "CreateTunnels",
			Handler:    _Tunnel_CreateTunnels_Handler,
		},
		{
			MethodName: "RemoveTunnels",
			Handler:    _Tunnel_RemoveTunnels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/tunnel.proto",
}
