// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: dataplane/proto/sai/rpf_group.proto

package sai

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RpfGroupAttr int32

const (
	RpfGroupAttr_RPF_GROUP_ATTR_UNSPECIFIED         RpfGroupAttr = 0
	RpfGroupAttr_RPF_GROUP_ATTR_RPF_INTERFACE_COUNT RpfGroupAttr = 1
	RpfGroupAttr_RPF_GROUP_ATTR_RPF_MEMBER_LIST     RpfGroupAttr = 2
)

// Enum value maps for RpfGroupAttr.
var (
	RpfGroupAttr_name = map[int32]string{
		0: "RPF_GROUP_ATTR_UNSPECIFIED",
		1: "RPF_GROUP_ATTR_RPF_INTERFACE_COUNT",
		2: "RPF_GROUP_ATTR_RPF_MEMBER_LIST",
	}
	RpfGroupAttr_value = map[string]int32{
		"RPF_GROUP_ATTR_UNSPECIFIED":         0,
		"RPF_GROUP_ATTR_RPF_INTERFACE_COUNT": 1,
		"RPF_GROUP_ATTR_RPF_MEMBER_LIST":     2,
	}
)

func (x RpfGroupAttr) Enum() *RpfGroupAttr {
	p := new(RpfGroupAttr)
	*p = x
	return p
}

func (x RpfGroupAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpfGroupAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_rpf_group_proto_enumTypes[0].Descriptor()
}

func (RpfGroupAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_rpf_group_proto_enumTypes[0]
}

func (x RpfGroupAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpfGroupAttr.Descriptor instead.
func (RpfGroupAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{0}
}

type RpfGroupMemberAttr int32

const (
	RpfGroupMemberAttr_RPF_GROUP_MEMBER_ATTR_UNSPECIFIED      RpfGroupMemberAttr = 0
	RpfGroupMemberAttr_RPF_GROUP_MEMBER_ATTR_RPF_GROUP_ID     RpfGroupMemberAttr = 1
	RpfGroupMemberAttr_RPF_GROUP_MEMBER_ATTR_RPF_INTERFACE_ID RpfGroupMemberAttr = 2
)

// Enum value maps for RpfGroupMemberAttr.
var (
	RpfGroupMemberAttr_name = map[int32]string{
		0: "RPF_GROUP_MEMBER_ATTR_UNSPECIFIED",
		1: "RPF_GROUP_MEMBER_ATTR_RPF_GROUP_ID",
		2: "RPF_GROUP_MEMBER_ATTR_RPF_INTERFACE_ID",
	}
	RpfGroupMemberAttr_value = map[string]int32{
		"RPF_GROUP_MEMBER_ATTR_UNSPECIFIED":      0,
		"RPF_GROUP_MEMBER_ATTR_RPF_GROUP_ID":     1,
		"RPF_GROUP_MEMBER_ATTR_RPF_INTERFACE_ID": 2,
	}
)

func (x RpfGroupMemberAttr) Enum() *RpfGroupMemberAttr {
	p := new(RpfGroupMemberAttr)
	*p = x
	return p
}

func (x RpfGroupMemberAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpfGroupMemberAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_rpf_group_proto_enumTypes[1].Descriptor()
}

func (RpfGroupMemberAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_rpf_group_proto_enumTypes[1]
}

func (x RpfGroupMemberAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RpfGroupMemberAttr.Descriptor instead.
func (RpfGroupMemberAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{1}
}

type CreateRpfGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Switch        uint64                 `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRpfGroupRequest) Reset() {
	*x = CreateRpfGroupRequest{}
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRpfGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRpfGroupRequest) ProtoMessage() {}

func (x *CreateRpfGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRpfGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateRpfGroupRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRpfGroupRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

type CreateRpfGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRpfGroupResponse) Reset() {
	*x = CreateRpfGroupResponse{}
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRpfGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRpfGroupResponse) ProtoMessage() {}

func (x *CreateRpfGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRpfGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateRpfGroupResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRpfGroupResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveRpfGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveRpfGroupRequest) Reset() {
	*x = RemoveRpfGroupRequest{}
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveRpfGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRpfGroupRequest) ProtoMessage() {}

func (x *RemoveRpfGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRpfGroupRequest.ProtoReflect.Descriptor instead.
func (*RemoveRpfGroupRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveRpfGroupRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveRpfGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveRpfGroupResponse) Reset() {
	*x = RemoveRpfGroupResponse{}
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveRpfGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRpfGroupResponse) ProtoMessage() {}

func (x *RemoveRpfGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRpfGroupResponse.ProtoReflect.Descriptor instead.
func (*RemoveRpfGroupResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{3}
}

type GetRpfGroupAttributeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType      []RpfGroupAttr         `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.RpfGroupAttr" json:"attr_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRpfGroupAttributeRequest) Reset() {
	*x = GetRpfGroupAttributeRequest{}
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRpfGroupAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRpfGroupAttributeRequest) ProtoMessage() {}

func (x *GetRpfGroupAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRpfGroupAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetRpfGroupAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{4}
}

func (x *GetRpfGroupAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetRpfGroupAttributeRequest) GetAttrType() []RpfGroupAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetRpfGroupAttributeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Attr          *RpfGroupAttribute     `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRpfGroupAttributeResponse) Reset() {
	*x = GetRpfGroupAttributeResponse{}
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRpfGroupAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRpfGroupAttributeResponse) ProtoMessage() {}

func (x *GetRpfGroupAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRpfGroupAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetRpfGroupAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{5}
}

func (x *GetRpfGroupAttributeResponse) GetAttr() *RpfGroupAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateRpfGroupMemberRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Switch         uint64                 `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	RpfGroupId     *uint64                `protobuf:"varint,2,opt,name=rpf_group_id,json=rpfGroupId,proto3,oneof" json:"rpf_group_id,omitempty"`
	RpfInterfaceId *uint64                `protobuf:"varint,3,opt,name=rpf_interface_id,json=rpfInterfaceId,proto3,oneof" json:"rpf_interface_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateRpfGroupMemberRequest) Reset() {
	*x = CreateRpfGroupMemberRequest{}
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRpfGroupMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRpfGroupMemberRequest) ProtoMessage() {}

func (x *CreateRpfGroupMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRpfGroupMemberRequest.ProtoReflect.Descriptor instead.
func (*CreateRpfGroupMemberRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{6}
}

func (x *CreateRpfGroupMemberRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateRpfGroupMemberRequest) GetRpfGroupId() uint64 {
	if x != nil && x.RpfGroupId != nil {
		return *x.RpfGroupId
	}
	return 0
}

func (x *CreateRpfGroupMemberRequest) GetRpfInterfaceId() uint64 {
	if x != nil && x.RpfInterfaceId != nil {
		return *x.RpfInterfaceId
	}
	return 0
}

type CreateRpfGroupMemberResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRpfGroupMemberResponse) Reset() {
	*x = CreateRpfGroupMemberResponse{}
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRpfGroupMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRpfGroupMemberResponse) ProtoMessage() {}

func (x *CreateRpfGroupMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRpfGroupMemberResponse.ProtoReflect.Descriptor instead.
func (*CreateRpfGroupMemberResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{7}
}

func (x *CreateRpfGroupMemberResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveRpfGroupMemberRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveRpfGroupMemberRequest) Reset() {
	*x = RemoveRpfGroupMemberRequest{}
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveRpfGroupMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRpfGroupMemberRequest) ProtoMessage() {}

func (x *RemoveRpfGroupMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRpfGroupMemberRequest.ProtoReflect.Descriptor instead.
func (*RemoveRpfGroupMemberRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveRpfGroupMemberRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveRpfGroupMemberResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveRpfGroupMemberResponse) Reset() {
	*x = RemoveRpfGroupMemberResponse{}
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveRpfGroupMemberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRpfGroupMemberResponse) ProtoMessage() {}

func (x *RemoveRpfGroupMemberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRpfGroupMemberResponse.ProtoReflect.Descriptor instead.
func (*RemoveRpfGroupMemberResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{9}
}

type GetRpfGroupMemberAttributeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType      []RpfGroupMemberAttr   `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.RpfGroupMemberAttr" json:"attr_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRpfGroupMemberAttributeRequest) Reset() {
	*x = GetRpfGroupMemberAttributeRequest{}
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRpfGroupMemberAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRpfGroupMemberAttributeRequest) ProtoMessage() {}

func (x *GetRpfGroupMemberAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRpfGroupMemberAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetRpfGroupMemberAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{10}
}

func (x *GetRpfGroupMemberAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetRpfGroupMemberAttributeRequest) GetAttrType() []RpfGroupMemberAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetRpfGroupMemberAttributeResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Attr          *RpfGroupMemberAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRpfGroupMemberAttributeResponse) Reset() {
	*x = GetRpfGroupMemberAttributeResponse{}
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRpfGroupMemberAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRpfGroupMemberAttributeResponse) ProtoMessage() {}

func (x *GetRpfGroupMemberAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_rpf_group_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRpfGroupMemberAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetRpfGroupMemberAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP(), []int{11}
}

func (x *GetRpfGroupMemberAttributeResponse) GetAttr() *RpfGroupMemberAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_proto_sai_rpf_group_proto protoreflect.FileDescriptor

var file_dataplane_proto_sai_rpf_group_proto_rawDesc = string([]byte{
	0x0a, 0x23, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x72, 0x70, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x37,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x3a,
	0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x30, 0x22, 0x2a, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x70, 0x66,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x18,
	0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52,
	0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xc9, 0x01, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x2d, 0x0a, 0x0c, 0x72, 0x70, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x10, 0x72, 0x70, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x02, 0x48, 0x01, 0x52, 0x0e, 0x72, 0x70, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x31, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x70, 0x66, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x70, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x52,
	0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x46, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x70, 0x66, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61,
	0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52, 0x70,
	0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74,
	0x72, 0x2a, 0x7a, 0x0a, 0x0c, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x50, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x50, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x52, 0x50, 0x46, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x50, 0x46,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x50, 0x46, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x8f, 0x01,
	0x0a, 0x12, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x50, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x52,
	0x50, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x50, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49,
	0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x50, 0x46, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x50, 0x46,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x32,
	0x8e, 0x06, 0x0a, 0x08, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x6f, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x70, 0x66,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x70, 0x66, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x70,
	0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x70, 0x66, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x70, 0x66,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x70,
	0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x70,
	0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x70, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_dataplane_proto_sai_rpf_group_proto_rawDescOnce sync.Once
	file_dataplane_proto_sai_rpf_group_proto_rawDescData []byte
)

func file_dataplane_proto_sai_rpf_group_proto_rawDescGZIP() []byte {
	file_dataplane_proto_sai_rpf_group_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_sai_rpf_group_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dataplane_proto_sai_rpf_group_proto_rawDesc), len(file_dataplane_proto_sai_rpf_group_proto_rawDesc)))
	})
	return file_dataplane_proto_sai_rpf_group_proto_rawDescData
}

var file_dataplane_proto_sai_rpf_group_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dataplane_proto_sai_rpf_group_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_dataplane_proto_sai_rpf_group_proto_goTypes = []any{
	(RpfGroupAttr)(0),                          // 0: lemming.dataplane.sai.RpfGroupAttr
	(RpfGroupMemberAttr)(0),                    // 1: lemming.dataplane.sai.RpfGroupMemberAttr
	(*CreateRpfGroupRequest)(nil),              // 2: lemming.dataplane.sai.CreateRpfGroupRequest
	(*CreateRpfGroupResponse)(nil),             // 3: lemming.dataplane.sai.CreateRpfGroupResponse
	(*RemoveRpfGroupRequest)(nil),              // 4: lemming.dataplane.sai.RemoveRpfGroupRequest
	(*RemoveRpfGroupResponse)(nil),             // 5: lemming.dataplane.sai.RemoveRpfGroupResponse
	(*GetRpfGroupAttributeRequest)(nil),        // 6: lemming.dataplane.sai.GetRpfGroupAttributeRequest
	(*GetRpfGroupAttributeResponse)(nil),       // 7: lemming.dataplane.sai.GetRpfGroupAttributeResponse
	(*CreateRpfGroupMemberRequest)(nil),        // 8: lemming.dataplane.sai.CreateRpfGroupMemberRequest
	(*CreateRpfGroupMemberResponse)(nil),       // 9: lemming.dataplane.sai.CreateRpfGroupMemberResponse
	(*RemoveRpfGroupMemberRequest)(nil),        // 10: lemming.dataplane.sai.RemoveRpfGroupMemberRequest
	(*RemoveRpfGroupMemberResponse)(nil),       // 11: lemming.dataplane.sai.RemoveRpfGroupMemberResponse
	(*GetRpfGroupMemberAttributeRequest)(nil),  // 12: lemming.dataplane.sai.GetRpfGroupMemberAttributeRequest
	(*GetRpfGroupMemberAttributeResponse)(nil), // 13: lemming.dataplane.sai.GetRpfGroupMemberAttributeResponse
	(*RpfGroupAttribute)(nil),                  // 14: lemming.dataplane.sai.RpfGroupAttribute
	(*RpfGroupMemberAttribute)(nil),            // 15: lemming.dataplane.sai.RpfGroupMemberAttribute
}
var file_dataplane_proto_sai_rpf_group_proto_depIdxs = []int32{
	0,  // 0: lemming.dataplane.sai.GetRpfGroupAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.RpfGroupAttr
	14, // 1: lemming.dataplane.sai.GetRpfGroupAttributeResponse.attr:type_name -> lemming.dataplane.sai.RpfGroupAttribute
	1,  // 2: lemming.dataplane.sai.GetRpfGroupMemberAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.RpfGroupMemberAttr
	15, // 3: lemming.dataplane.sai.GetRpfGroupMemberAttributeResponse.attr:type_name -> lemming.dataplane.sai.RpfGroupMemberAttribute
	2,  // 4: lemming.dataplane.sai.RpfGroup.CreateRpfGroup:input_type -> lemming.dataplane.sai.CreateRpfGroupRequest
	4,  // 5: lemming.dataplane.sai.RpfGroup.RemoveRpfGroup:input_type -> lemming.dataplane.sai.RemoveRpfGroupRequest
	6,  // 6: lemming.dataplane.sai.RpfGroup.GetRpfGroupAttribute:input_type -> lemming.dataplane.sai.GetRpfGroupAttributeRequest
	8,  // 7: lemming.dataplane.sai.RpfGroup.CreateRpfGroupMember:input_type -> lemming.dataplane.sai.CreateRpfGroupMemberRequest
	10, // 8: lemming.dataplane.sai.RpfGroup.RemoveRpfGroupMember:input_type -> lemming.dataplane.sai.RemoveRpfGroupMemberRequest
	12, // 9: lemming.dataplane.sai.RpfGroup.GetRpfGroupMemberAttribute:input_type -> lemming.dataplane.sai.GetRpfGroupMemberAttributeRequest
	3,  // 10: lemming.dataplane.sai.RpfGroup.CreateRpfGroup:output_type -> lemming.dataplane.sai.CreateRpfGroupResponse
	5,  // 11: lemming.dataplane.sai.RpfGroup.RemoveRpfGroup:output_type -> lemming.dataplane.sai.RemoveRpfGroupResponse
	7,  // 12: lemming.dataplane.sai.RpfGroup.GetRpfGroupAttribute:output_type -> lemming.dataplane.sai.GetRpfGroupAttributeResponse
	9,  // 13: lemming.dataplane.sai.RpfGroup.CreateRpfGroupMember:output_type -> lemming.dataplane.sai.CreateRpfGroupMemberResponse
	11, // 14: lemming.dataplane.sai.RpfGroup.RemoveRpfGroupMember:output_type -> lemming.dataplane.sai.RemoveRpfGroupMemberResponse
	13, // 15: lemming.dataplane.sai.RpfGroup.GetRpfGroupMemberAttribute:output_type -> lemming.dataplane.sai.GetRpfGroupMemberAttributeResponse
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_dataplane_proto_sai_rpf_group_proto_init() }
func file_dataplane_proto_sai_rpf_group_proto_init() {
	if File_dataplane_proto_sai_rpf_group_proto != nil {
		return
	}
	file_dataplane_proto_sai_common_proto_init()
	file_dataplane_proto_sai_rpf_group_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dataplane_proto_sai_rpf_group_proto_rawDesc), len(file_dataplane_proto_sai_rpf_group_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_sai_rpf_group_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_sai_rpf_group_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_sai_rpf_group_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_sai_rpf_group_proto_msgTypes,
	}.Build()
	File_dataplane_proto_sai_rpf_group_proto = out.File
	file_dataplane_proto_sai_rpf_group_proto_goTypes = nil
	file_dataplane_proto_sai_rpf_group_proto_depIdxs = nil
}
