// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/virtual_router.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VirtualRouter_CreateVirtualRouter_FullMethodName       = "/lemming.dataplane.sai.VirtualRouter/CreateVirtualRouter"
	VirtualRouter_RemoveVirtualRouter_FullMethodName       = "/lemming.dataplane.sai.VirtualRouter/RemoveVirtualRouter"
	VirtualRouter_SetVirtualRouterAttribute_FullMethodName = "/lemming.dataplane.sai.VirtualRouter/SetVirtualRouterAttribute"
	VirtualRouter_GetVirtualRouterAttribute_FullMethodName = "/lemming.dataplane.sai.VirtualRouter/GetVirtualRouterAttribute"
)

// VirtualRouterClient is the client API for VirtualRouter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VirtualRouterClient interface {
	CreateVirtualRouter(ctx context.Context, in *CreateVirtualRouterRequest, opts ...grpc.CallOption) (*CreateVirtualRouterResponse, error)
	RemoveVirtualRouter(ctx context.Context, in *RemoveVirtualRouterRequest, opts ...grpc.CallOption) (*RemoveVirtualRouterResponse, error)
	SetVirtualRouterAttribute(ctx context.Context, in *SetVirtualRouterAttributeRequest, opts ...grpc.CallOption) (*SetVirtualRouterAttributeResponse, error)
	GetVirtualRouterAttribute(ctx context.Context, in *GetVirtualRouterAttributeRequest, opts ...grpc.CallOption) (*GetVirtualRouterAttributeResponse, error)
}

type virtualRouterClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtualRouterClient(cc grpc.ClientConnInterface) VirtualRouterClient {
	return &virtualRouterClient{cc}
}

func (c *virtualRouterClient) CreateVirtualRouter(ctx context.Context, in *CreateVirtualRouterRequest, opts ...grpc.CallOption) (*CreateVirtualRouterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVirtualRouterResponse)
	err := c.cc.Invoke(ctx, VirtualRouter_CreateVirtualRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualRouterClient) RemoveVirtualRouter(ctx context.Context, in *RemoveVirtualRouterRequest, opts ...grpc.CallOption) (*RemoveVirtualRouterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveVirtualRouterResponse)
	err := c.cc.Invoke(ctx, VirtualRouter_RemoveVirtualRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualRouterClient) SetVirtualRouterAttribute(ctx context.Context, in *SetVirtualRouterAttributeRequest, opts ...grpc.CallOption) (*SetVirtualRouterAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVirtualRouterAttributeResponse)
	err := c.cc.Invoke(ctx, VirtualRouter_SetVirtualRouterAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtualRouterClient) GetVirtualRouterAttribute(ctx context.Context, in *GetVirtualRouterAttributeRequest, opts ...grpc.CallOption) (*GetVirtualRouterAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVirtualRouterAttributeResponse)
	err := c.cc.Invoke(ctx, VirtualRouter_GetVirtualRouterAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtualRouterServer is the server API for VirtualRouter service.
// All implementations should embed UnimplementedVirtualRouterServer
// for forward compatibility.
type VirtualRouterServer interface {
	CreateVirtualRouter(context.Context, *CreateVirtualRouterRequest) (*CreateVirtualRouterResponse, error)
	RemoveVirtualRouter(context.Context, *RemoveVirtualRouterRequest) (*RemoveVirtualRouterResponse, error)
	SetVirtualRouterAttribute(context.Context, *SetVirtualRouterAttributeRequest) (*SetVirtualRouterAttributeResponse, error)
	GetVirtualRouterAttribute(context.Context, *GetVirtualRouterAttributeRequest) (*GetVirtualRouterAttributeResponse, error)
}

// UnimplementedVirtualRouterServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVirtualRouterServer struct{}

func (UnimplementedVirtualRouterServer) CreateVirtualRouter(context.Context, *CreateVirtualRouterRequest) (*CreateVirtualRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualRouter not implemented")
}
func (UnimplementedVirtualRouterServer) RemoveVirtualRouter(context.Context, *RemoveVirtualRouterRequest) (*RemoveVirtualRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVirtualRouter not implemented")
}
func (UnimplementedVirtualRouterServer) SetVirtualRouterAttribute(context.Context, *SetVirtualRouterAttributeRequest) (*SetVirtualRouterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVirtualRouterAttribute not implemented")
}
func (UnimplementedVirtualRouterServer) GetVirtualRouterAttribute(context.Context, *GetVirtualRouterAttributeRequest) (*GetVirtualRouterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVirtualRouterAttribute not implemented")
}
func (UnimplementedVirtualRouterServer) testEmbeddedByValue() {}

// UnsafeVirtualRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VirtualRouterServer will
// result in compilation errors.
type UnsafeVirtualRouterServer interface {
	mustEmbedUnimplementedVirtualRouterServer()
}

func RegisterVirtualRouterServer(s grpc.ServiceRegistrar, srv VirtualRouterServer) {
	// If the following call pancis, it indicates UnimplementedVirtualRouterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VirtualRouter_ServiceDesc, srv)
}

func _VirtualRouter_CreateVirtualRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVirtualRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualRouterServer).CreateVirtualRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualRouter_CreateVirtualRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualRouterServer).CreateVirtualRouter(ctx, req.(*CreateVirtualRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualRouter_RemoveVirtualRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVirtualRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualRouterServer).RemoveVirtualRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualRouter_RemoveVirtualRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualRouterServer).RemoveVirtualRouter(ctx, req.(*RemoveVirtualRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualRouter_SetVirtualRouterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVirtualRouterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualRouterServer).SetVirtualRouterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualRouter_SetVirtualRouterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualRouterServer).SetVirtualRouterAttribute(ctx, req.(*SetVirtualRouterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtualRouter_GetVirtualRouterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVirtualRouterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtualRouterServer).GetVirtualRouterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VirtualRouter_GetVirtualRouterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtualRouterServer).GetVirtualRouterAttribute(ctx, req.(*GetVirtualRouterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VirtualRouter_ServiceDesc is the grpc.ServiceDesc for VirtualRouter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VirtualRouter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.VirtualRouter",
	HandlerType: (*VirtualRouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVirtualRouter",
			Handler:    _VirtualRouter_CreateVirtualRouter_Handler,
		},
		{
			MethodName: "RemoveVirtualRouter",
			Handler:    _VirtualRouter_RemoveVirtualRouter_Handler,
		},
		{
			MethodName: "SetVirtualRouterAttribute",
			Handler:    _VirtualRouter_SetVirtualRouterAttribute_Handler,
		},
		{
			MethodName: "GetVirtualRouterAttribute",
			Handler:    _VirtualRouter_GetVirtualRouterAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/virtual_router.proto",
}
