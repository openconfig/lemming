// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/fdb.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Fdb_CreateFdbEntry_FullMethodName       = "/lemming.dataplane.sai.Fdb/CreateFdbEntry"
	Fdb_RemoveFdbEntry_FullMethodName       = "/lemming.dataplane.sai.Fdb/RemoveFdbEntry"
	Fdb_SetFdbEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Fdb/SetFdbEntryAttribute"
	Fdb_GetFdbEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Fdb/GetFdbEntryAttribute"
	Fdb_CreateFdbEntries_FullMethodName     = "/lemming.dataplane.sai.Fdb/CreateFdbEntries"
	Fdb_RemoveFdbEntries_FullMethodName     = "/lemming.dataplane.sai.Fdb/RemoveFdbEntries"
)

// FdbClient is the client API for Fdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FdbClient interface {
	CreateFdbEntry(ctx context.Context, in *CreateFdbEntryRequest, opts ...grpc.CallOption) (*CreateFdbEntryResponse, error)
	RemoveFdbEntry(ctx context.Context, in *RemoveFdbEntryRequest, opts ...grpc.CallOption) (*RemoveFdbEntryResponse, error)
	SetFdbEntryAttribute(ctx context.Context, in *SetFdbEntryAttributeRequest, opts ...grpc.CallOption) (*SetFdbEntryAttributeResponse, error)
	GetFdbEntryAttribute(ctx context.Context, in *GetFdbEntryAttributeRequest, opts ...grpc.CallOption) (*GetFdbEntryAttributeResponse, error)
	CreateFdbEntries(ctx context.Context, in *CreateFdbEntriesRequest, opts ...grpc.CallOption) (*CreateFdbEntriesResponse, error)
	RemoveFdbEntries(ctx context.Context, in *RemoveFdbEntriesRequest, opts ...grpc.CallOption) (*RemoveFdbEntriesResponse, error)
}

type fdbClient struct {
	cc grpc.ClientConnInterface
}

func NewFdbClient(cc grpc.ClientConnInterface) FdbClient {
	return &fdbClient{cc}
}

func (c *fdbClient) CreateFdbEntry(ctx context.Context, in *CreateFdbEntryRequest, opts ...grpc.CallOption) (*CreateFdbEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFdbEntryResponse)
	err := c.cc.Invoke(ctx, Fdb_CreateFdbEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdbClient) RemoveFdbEntry(ctx context.Context, in *RemoveFdbEntryRequest, opts ...grpc.CallOption) (*RemoveFdbEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFdbEntryResponse)
	err := c.cc.Invoke(ctx, Fdb_RemoveFdbEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdbClient) SetFdbEntryAttribute(ctx context.Context, in *SetFdbEntryAttributeRequest, opts ...grpc.CallOption) (*SetFdbEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetFdbEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Fdb_SetFdbEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdbClient) GetFdbEntryAttribute(ctx context.Context, in *GetFdbEntryAttributeRequest, opts ...grpc.CallOption) (*GetFdbEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFdbEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Fdb_GetFdbEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdbClient) CreateFdbEntries(ctx context.Context, in *CreateFdbEntriesRequest, opts ...grpc.CallOption) (*CreateFdbEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFdbEntriesResponse)
	err := c.cc.Invoke(ctx, Fdb_CreateFdbEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fdbClient) RemoveFdbEntries(ctx context.Context, in *RemoveFdbEntriesRequest, opts ...grpc.CallOption) (*RemoveFdbEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFdbEntriesResponse)
	err := c.cc.Invoke(ctx, Fdb_RemoveFdbEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FdbServer is the server API for Fdb service.
// All implementations should embed UnimplementedFdbServer
// for forward compatibility.
type FdbServer interface {
	CreateFdbEntry(context.Context, *CreateFdbEntryRequest) (*CreateFdbEntryResponse, error)
	RemoveFdbEntry(context.Context, *RemoveFdbEntryRequest) (*RemoveFdbEntryResponse, error)
	SetFdbEntryAttribute(context.Context, *SetFdbEntryAttributeRequest) (*SetFdbEntryAttributeResponse, error)
	GetFdbEntryAttribute(context.Context, *GetFdbEntryAttributeRequest) (*GetFdbEntryAttributeResponse, error)
	CreateFdbEntries(context.Context, *CreateFdbEntriesRequest) (*CreateFdbEntriesResponse, error)
	RemoveFdbEntries(context.Context, *RemoveFdbEntriesRequest) (*RemoveFdbEntriesResponse, error)
}

// UnimplementedFdbServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFdbServer struct{}

func (UnimplementedFdbServer) CreateFdbEntry(context.Context, *CreateFdbEntryRequest) (*CreateFdbEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFdbEntry not implemented")
}
func (UnimplementedFdbServer) RemoveFdbEntry(context.Context, *RemoveFdbEntryRequest) (*RemoveFdbEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFdbEntry not implemented")
}
func (UnimplementedFdbServer) SetFdbEntryAttribute(context.Context, *SetFdbEntryAttributeRequest) (*SetFdbEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFdbEntryAttribute not implemented")
}
func (UnimplementedFdbServer) GetFdbEntryAttribute(context.Context, *GetFdbEntryAttributeRequest) (*GetFdbEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFdbEntryAttribute not implemented")
}
func (UnimplementedFdbServer) CreateFdbEntries(context.Context, *CreateFdbEntriesRequest) (*CreateFdbEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFdbEntries not implemented")
}
func (UnimplementedFdbServer) RemoveFdbEntries(context.Context, *RemoveFdbEntriesRequest) (*RemoveFdbEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFdbEntries not implemented")
}
func (UnimplementedFdbServer) testEmbeddedByValue() {}

// UnsafeFdbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FdbServer will
// result in compilation errors.
type UnsafeFdbServer interface {
	mustEmbedUnimplementedFdbServer()
}

func RegisterFdbServer(s grpc.ServiceRegistrar, srv FdbServer) {
	// If the following call pancis, it indicates UnimplementedFdbServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Fdb_ServiceDesc, srv)
}

func _Fdb_CreateFdbEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFdbEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FdbServer).CreateFdbEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fdb_CreateFdbEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FdbServer).CreateFdbEntry(ctx, req.(*CreateFdbEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fdb_RemoveFdbEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFdbEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FdbServer).RemoveFdbEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fdb_RemoveFdbEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FdbServer).RemoveFdbEntry(ctx, req.(*RemoveFdbEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fdb_SetFdbEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFdbEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FdbServer).SetFdbEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fdb_SetFdbEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FdbServer).SetFdbEntryAttribute(ctx, req.(*SetFdbEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fdb_GetFdbEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFdbEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FdbServer).GetFdbEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fdb_GetFdbEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FdbServer).GetFdbEntryAttribute(ctx, req.(*GetFdbEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fdb_CreateFdbEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFdbEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FdbServer).CreateFdbEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fdb_CreateFdbEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FdbServer).CreateFdbEntries(ctx, req.(*CreateFdbEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fdb_RemoveFdbEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFdbEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FdbServer).RemoveFdbEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fdb_RemoveFdbEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FdbServer).RemoveFdbEntries(ctx, req.(*RemoveFdbEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fdb_ServiceDesc is the grpc.ServiceDesc for Fdb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fdb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Fdb",
	HandlerType: (*FdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFdbEntry",
			Handler:    _Fdb_CreateFdbEntry_Handler,
		},
		{
			MethodName: "RemoveFdbEntry",
			Handler:    _Fdb_RemoveFdbEntry_Handler,
		},
		{
			MethodName: "SetFdbEntryAttribute",
			Handler:    _Fdb_SetFdbEntryAttribute_Handler,
		},
		{
			MethodName: "GetFdbEntryAttribute",
			Handler:    _Fdb_GetFdbEntryAttribute_Handler,
		},
		{
			MethodName: "CreateFdbEntries",
			Handler:    _Fdb_CreateFdbEntries_Handler,
		},
		{
			MethodName: "RemoveFdbEntries",
			Handler:    _Fdb_RemoveFdbEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/fdb.proto",
}
