// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/dtel.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Dtel_CreateDtel_FullMethodName                    = "/lemming.dataplane.sai.Dtel/CreateDtel"
	Dtel_RemoveDtel_FullMethodName                    = "/lemming.dataplane.sai.Dtel/RemoveDtel"
	Dtel_SetDtelAttribute_FullMethodName              = "/lemming.dataplane.sai.Dtel/SetDtelAttribute"
	Dtel_GetDtelAttribute_FullMethodName              = "/lemming.dataplane.sai.Dtel/GetDtelAttribute"
	Dtel_CreateDtelQueueReport_FullMethodName         = "/lemming.dataplane.sai.Dtel/CreateDtelQueueReport"
	Dtel_RemoveDtelQueueReport_FullMethodName         = "/lemming.dataplane.sai.Dtel/RemoveDtelQueueReport"
	Dtel_SetDtelQueueReportAttribute_FullMethodName   = "/lemming.dataplane.sai.Dtel/SetDtelQueueReportAttribute"
	Dtel_GetDtelQueueReportAttribute_FullMethodName   = "/lemming.dataplane.sai.Dtel/GetDtelQueueReportAttribute"
	Dtel_CreateDtelIntSession_FullMethodName          = "/lemming.dataplane.sai.Dtel/CreateDtelIntSession"
	Dtel_RemoveDtelIntSession_FullMethodName          = "/lemming.dataplane.sai.Dtel/RemoveDtelIntSession"
	Dtel_SetDtelIntSessionAttribute_FullMethodName    = "/lemming.dataplane.sai.Dtel/SetDtelIntSessionAttribute"
	Dtel_GetDtelIntSessionAttribute_FullMethodName    = "/lemming.dataplane.sai.Dtel/GetDtelIntSessionAttribute"
	Dtel_CreateDtelReportSession_FullMethodName       = "/lemming.dataplane.sai.Dtel/CreateDtelReportSession"
	Dtel_RemoveDtelReportSession_FullMethodName       = "/lemming.dataplane.sai.Dtel/RemoveDtelReportSession"
	Dtel_SetDtelReportSessionAttribute_FullMethodName = "/lemming.dataplane.sai.Dtel/SetDtelReportSessionAttribute"
	Dtel_GetDtelReportSessionAttribute_FullMethodName = "/lemming.dataplane.sai.Dtel/GetDtelReportSessionAttribute"
	Dtel_CreateDtelEvent_FullMethodName               = "/lemming.dataplane.sai.Dtel/CreateDtelEvent"
	Dtel_RemoveDtelEvent_FullMethodName               = "/lemming.dataplane.sai.Dtel/RemoveDtelEvent"
	Dtel_SetDtelEventAttribute_FullMethodName         = "/lemming.dataplane.sai.Dtel/SetDtelEventAttribute"
	Dtel_GetDtelEventAttribute_FullMethodName         = "/lemming.dataplane.sai.Dtel/GetDtelEventAttribute"
)

// DtelClient is the client API for Dtel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DtelClient interface {
	CreateDtel(ctx context.Context, in *CreateDtelRequest, opts ...grpc.CallOption) (*CreateDtelResponse, error)
	RemoveDtel(ctx context.Context, in *RemoveDtelRequest, opts ...grpc.CallOption) (*RemoveDtelResponse, error)
	SetDtelAttribute(ctx context.Context, in *SetDtelAttributeRequest, opts ...grpc.CallOption) (*SetDtelAttributeResponse, error)
	GetDtelAttribute(ctx context.Context, in *GetDtelAttributeRequest, opts ...grpc.CallOption) (*GetDtelAttributeResponse, error)
	CreateDtelQueueReport(ctx context.Context, in *CreateDtelQueueReportRequest, opts ...grpc.CallOption) (*CreateDtelQueueReportResponse, error)
	RemoveDtelQueueReport(ctx context.Context, in *RemoveDtelQueueReportRequest, opts ...grpc.CallOption) (*RemoveDtelQueueReportResponse, error)
	SetDtelQueueReportAttribute(ctx context.Context, in *SetDtelQueueReportAttributeRequest, opts ...grpc.CallOption) (*SetDtelQueueReportAttributeResponse, error)
	GetDtelQueueReportAttribute(ctx context.Context, in *GetDtelQueueReportAttributeRequest, opts ...grpc.CallOption) (*GetDtelQueueReportAttributeResponse, error)
	CreateDtelIntSession(ctx context.Context, in *CreateDtelIntSessionRequest, opts ...grpc.CallOption) (*CreateDtelIntSessionResponse, error)
	RemoveDtelIntSession(ctx context.Context, in *RemoveDtelIntSessionRequest, opts ...grpc.CallOption) (*RemoveDtelIntSessionResponse, error)
	SetDtelIntSessionAttribute(ctx context.Context, in *SetDtelIntSessionAttributeRequest, opts ...grpc.CallOption) (*SetDtelIntSessionAttributeResponse, error)
	GetDtelIntSessionAttribute(ctx context.Context, in *GetDtelIntSessionAttributeRequest, opts ...grpc.CallOption) (*GetDtelIntSessionAttributeResponse, error)
	CreateDtelReportSession(ctx context.Context, in *CreateDtelReportSessionRequest, opts ...grpc.CallOption) (*CreateDtelReportSessionResponse, error)
	RemoveDtelReportSession(ctx context.Context, in *RemoveDtelReportSessionRequest, opts ...grpc.CallOption) (*RemoveDtelReportSessionResponse, error)
	SetDtelReportSessionAttribute(ctx context.Context, in *SetDtelReportSessionAttributeRequest, opts ...grpc.CallOption) (*SetDtelReportSessionAttributeResponse, error)
	GetDtelReportSessionAttribute(ctx context.Context, in *GetDtelReportSessionAttributeRequest, opts ...grpc.CallOption) (*GetDtelReportSessionAttributeResponse, error)
	CreateDtelEvent(ctx context.Context, in *CreateDtelEventRequest, opts ...grpc.CallOption) (*CreateDtelEventResponse, error)
	RemoveDtelEvent(ctx context.Context, in *RemoveDtelEventRequest, opts ...grpc.CallOption) (*RemoveDtelEventResponse, error)
	SetDtelEventAttribute(ctx context.Context, in *SetDtelEventAttributeRequest, opts ...grpc.CallOption) (*SetDtelEventAttributeResponse, error)
	GetDtelEventAttribute(ctx context.Context, in *GetDtelEventAttributeRequest, opts ...grpc.CallOption) (*GetDtelEventAttributeResponse, error)
}

type dtelClient struct {
	cc grpc.ClientConnInterface
}

func NewDtelClient(cc grpc.ClientConnInterface) DtelClient {
	return &dtelClient{cc}
}

func (c *dtelClient) CreateDtel(ctx context.Context, in *CreateDtelRequest, opts ...grpc.CallOption) (*CreateDtelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDtelResponse)
	err := c.cc.Invoke(ctx, Dtel_CreateDtel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) RemoveDtel(ctx context.Context, in *RemoveDtelRequest, opts ...grpc.CallOption) (*RemoveDtelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDtelResponse)
	err := c.cc.Invoke(ctx, Dtel_RemoveDtel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) SetDtelAttribute(ctx context.Context, in *SetDtelAttributeRequest, opts ...grpc.CallOption) (*SetDtelAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDtelAttributeResponse)
	err := c.cc.Invoke(ctx, Dtel_SetDtelAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) GetDtelAttribute(ctx context.Context, in *GetDtelAttributeRequest, opts ...grpc.CallOption) (*GetDtelAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDtelAttributeResponse)
	err := c.cc.Invoke(ctx, Dtel_GetDtelAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) CreateDtelQueueReport(ctx context.Context, in *CreateDtelQueueReportRequest, opts ...grpc.CallOption) (*CreateDtelQueueReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDtelQueueReportResponse)
	err := c.cc.Invoke(ctx, Dtel_CreateDtelQueueReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) RemoveDtelQueueReport(ctx context.Context, in *RemoveDtelQueueReportRequest, opts ...grpc.CallOption) (*RemoveDtelQueueReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDtelQueueReportResponse)
	err := c.cc.Invoke(ctx, Dtel_RemoveDtelQueueReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) SetDtelQueueReportAttribute(ctx context.Context, in *SetDtelQueueReportAttributeRequest, opts ...grpc.CallOption) (*SetDtelQueueReportAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDtelQueueReportAttributeResponse)
	err := c.cc.Invoke(ctx, Dtel_SetDtelQueueReportAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) GetDtelQueueReportAttribute(ctx context.Context, in *GetDtelQueueReportAttributeRequest, opts ...grpc.CallOption) (*GetDtelQueueReportAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDtelQueueReportAttributeResponse)
	err := c.cc.Invoke(ctx, Dtel_GetDtelQueueReportAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) CreateDtelIntSession(ctx context.Context, in *CreateDtelIntSessionRequest, opts ...grpc.CallOption) (*CreateDtelIntSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDtelIntSessionResponse)
	err := c.cc.Invoke(ctx, Dtel_CreateDtelIntSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) RemoveDtelIntSession(ctx context.Context, in *RemoveDtelIntSessionRequest, opts ...grpc.CallOption) (*RemoveDtelIntSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDtelIntSessionResponse)
	err := c.cc.Invoke(ctx, Dtel_RemoveDtelIntSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) SetDtelIntSessionAttribute(ctx context.Context, in *SetDtelIntSessionAttributeRequest, opts ...grpc.CallOption) (*SetDtelIntSessionAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDtelIntSessionAttributeResponse)
	err := c.cc.Invoke(ctx, Dtel_SetDtelIntSessionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) GetDtelIntSessionAttribute(ctx context.Context, in *GetDtelIntSessionAttributeRequest, opts ...grpc.CallOption) (*GetDtelIntSessionAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDtelIntSessionAttributeResponse)
	err := c.cc.Invoke(ctx, Dtel_GetDtelIntSessionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) CreateDtelReportSession(ctx context.Context, in *CreateDtelReportSessionRequest, opts ...grpc.CallOption) (*CreateDtelReportSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDtelReportSessionResponse)
	err := c.cc.Invoke(ctx, Dtel_CreateDtelReportSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) RemoveDtelReportSession(ctx context.Context, in *RemoveDtelReportSessionRequest, opts ...grpc.CallOption) (*RemoveDtelReportSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDtelReportSessionResponse)
	err := c.cc.Invoke(ctx, Dtel_RemoveDtelReportSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) SetDtelReportSessionAttribute(ctx context.Context, in *SetDtelReportSessionAttributeRequest, opts ...grpc.CallOption) (*SetDtelReportSessionAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDtelReportSessionAttributeResponse)
	err := c.cc.Invoke(ctx, Dtel_SetDtelReportSessionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) GetDtelReportSessionAttribute(ctx context.Context, in *GetDtelReportSessionAttributeRequest, opts ...grpc.CallOption) (*GetDtelReportSessionAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDtelReportSessionAttributeResponse)
	err := c.cc.Invoke(ctx, Dtel_GetDtelReportSessionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) CreateDtelEvent(ctx context.Context, in *CreateDtelEventRequest, opts ...grpc.CallOption) (*CreateDtelEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDtelEventResponse)
	err := c.cc.Invoke(ctx, Dtel_CreateDtelEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) RemoveDtelEvent(ctx context.Context, in *RemoveDtelEventRequest, opts ...grpc.CallOption) (*RemoveDtelEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDtelEventResponse)
	err := c.cc.Invoke(ctx, Dtel_RemoveDtelEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) SetDtelEventAttribute(ctx context.Context, in *SetDtelEventAttributeRequest, opts ...grpc.CallOption) (*SetDtelEventAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDtelEventAttributeResponse)
	err := c.cc.Invoke(ctx, Dtel_SetDtelEventAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtelClient) GetDtelEventAttribute(ctx context.Context, in *GetDtelEventAttributeRequest, opts ...grpc.CallOption) (*GetDtelEventAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDtelEventAttributeResponse)
	err := c.cc.Invoke(ctx, Dtel_GetDtelEventAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DtelServer is the server API for Dtel service.
// All implementations should embed UnimplementedDtelServer
// for forward compatibility.
type DtelServer interface {
	CreateDtel(context.Context, *CreateDtelRequest) (*CreateDtelResponse, error)
	RemoveDtel(context.Context, *RemoveDtelRequest) (*RemoveDtelResponse, error)
	SetDtelAttribute(context.Context, *SetDtelAttributeRequest) (*SetDtelAttributeResponse, error)
	GetDtelAttribute(context.Context, *GetDtelAttributeRequest) (*GetDtelAttributeResponse, error)
	CreateDtelQueueReport(context.Context, *CreateDtelQueueReportRequest) (*CreateDtelQueueReportResponse, error)
	RemoveDtelQueueReport(context.Context, *RemoveDtelQueueReportRequest) (*RemoveDtelQueueReportResponse, error)
	SetDtelQueueReportAttribute(context.Context, *SetDtelQueueReportAttributeRequest) (*SetDtelQueueReportAttributeResponse, error)
	GetDtelQueueReportAttribute(context.Context, *GetDtelQueueReportAttributeRequest) (*GetDtelQueueReportAttributeResponse, error)
	CreateDtelIntSession(context.Context, *CreateDtelIntSessionRequest) (*CreateDtelIntSessionResponse, error)
	RemoveDtelIntSession(context.Context, *RemoveDtelIntSessionRequest) (*RemoveDtelIntSessionResponse, error)
	SetDtelIntSessionAttribute(context.Context, *SetDtelIntSessionAttributeRequest) (*SetDtelIntSessionAttributeResponse, error)
	GetDtelIntSessionAttribute(context.Context, *GetDtelIntSessionAttributeRequest) (*GetDtelIntSessionAttributeResponse, error)
	CreateDtelReportSession(context.Context, *CreateDtelReportSessionRequest) (*CreateDtelReportSessionResponse, error)
	RemoveDtelReportSession(context.Context, *RemoveDtelReportSessionRequest) (*RemoveDtelReportSessionResponse, error)
	SetDtelReportSessionAttribute(context.Context, *SetDtelReportSessionAttributeRequest) (*SetDtelReportSessionAttributeResponse, error)
	GetDtelReportSessionAttribute(context.Context, *GetDtelReportSessionAttributeRequest) (*GetDtelReportSessionAttributeResponse, error)
	CreateDtelEvent(context.Context, *CreateDtelEventRequest) (*CreateDtelEventResponse, error)
	RemoveDtelEvent(context.Context, *RemoveDtelEventRequest) (*RemoveDtelEventResponse, error)
	SetDtelEventAttribute(context.Context, *SetDtelEventAttributeRequest) (*SetDtelEventAttributeResponse, error)
	GetDtelEventAttribute(context.Context, *GetDtelEventAttributeRequest) (*GetDtelEventAttributeResponse, error)
}

// UnimplementedDtelServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDtelServer struct{}

func (UnimplementedDtelServer) CreateDtel(context.Context, *CreateDtelRequest) (*CreateDtelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDtel not implemented")
}
func (UnimplementedDtelServer) RemoveDtel(context.Context, *RemoveDtelRequest) (*RemoveDtelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDtel not implemented")
}
func (UnimplementedDtelServer) SetDtelAttribute(context.Context, *SetDtelAttributeRequest) (*SetDtelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDtelAttribute not implemented")
}
func (UnimplementedDtelServer) GetDtelAttribute(context.Context, *GetDtelAttributeRequest) (*GetDtelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDtelAttribute not implemented")
}
func (UnimplementedDtelServer) CreateDtelQueueReport(context.Context, *CreateDtelQueueReportRequest) (*CreateDtelQueueReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDtelQueueReport not implemented")
}
func (UnimplementedDtelServer) RemoveDtelQueueReport(context.Context, *RemoveDtelQueueReportRequest) (*RemoveDtelQueueReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDtelQueueReport not implemented")
}
func (UnimplementedDtelServer) SetDtelQueueReportAttribute(context.Context, *SetDtelQueueReportAttributeRequest) (*SetDtelQueueReportAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDtelQueueReportAttribute not implemented")
}
func (UnimplementedDtelServer) GetDtelQueueReportAttribute(context.Context, *GetDtelQueueReportAttributeRequest) (*GetDtelQueueReportAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDtelQueueReportAttribute not implemented")
}
func (UnimplementedDtelServer) CreateDtelIntSession(context.Context, *CreateDtelIntSessionRequest) (*CreateDtelIntSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDtelIntSession not implemented")
}
func (UnimplementedDtelServer) RemoveDtelIntSession(context.Context, *RemoveDtelIntSessionRequest) (*RemoveDtelIntSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDtelIntSession not implemented")
}
func (UnimplementedDtelServer) SetDtelIntSessionAttribute(context.Context, *SetDtelIntSessionAttributeRequest) (*SetDtelIntSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDtelIntSessionAttribute not implemented")
}
func (UnimplementedDtelServer) GetDtelIntSessionAttribute(context.Context, *GetDtelIntSessionAttributeRequest) (*GetDtelIntSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDtelIntSessionAttribute not implemented")
}
func (UnimplementedDtelServer) CreateDtelReportSession(context.Context, *CreateDtelReportSessionRequest) (*CreateDtelReportSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDtelReportSession not implemented")
}
func (UnimplementedDtelServer) RemoveDtelReportSession(context.Context, *RemoveDtelReportSessionRequest) (*RemoveDtelReportSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDtelReportSession not implemented")
}
func (UnimplementedDtelServer) SetDtelReportSessionAttribute(context.Context, *SetDtelReportSessionAttributeRequest) (*SetDtelReportSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDtelReportSessionAttribute not implemented")
}
func (UnimplementedDtelServer) GetDtelReportSessionAttribute(context.Context, *GetDtelReportSessionAttributeRequest) (*GetDtelReportSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDtelReportSessionAttribute not implemented")
}
func (UnimplementedDtelServer) CreateDtelEvent(context.Context, *CreateDtelEventRequest) (*CreateDtelEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDtelEvent not implemented")
}
func (UnimplementedDtelServer) RemoveDtelEvent(context.Context, *RemoveDtelEventRequest) (*RemoveDtelEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDtelEvent not implemented")
}
func (UnimplementedDtelServer) SetDtelEventAttribute(context.Context, *SetDtelEventAttributeRequest) (*SetDtelEventAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDtelEventAttribute not implemented")
}
func (UnimplementedDtelServer) GetDtelEventAttribute(context.Context, *GetDtelEventAttributeRequest) (*GetDtelEventAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDtelEventAttribute not implemented")
}
func (UnimplementedDtelServer) testEmbeddedByValue() {}

// UnsafeDtelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DtelServer will
// result in compilation errors.
type UnsafeDtelServer interface {
	mustEmbedUnimplementedDtelServer()
}

func RegisterDtelServer(s grpc.ServiceRegistrar, srv DtelServer) {
	// If the following call pancis, it indicates UnimplementedDtelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dtel_ServiceDesc, srv)
}

func _Dtel_CreateDtel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDtelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).CreateDtel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_CreateDtel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).CreateDtel(ctx, req.(*CreateDtelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_RemoveDtel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDtelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).RemoveDtel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_RemoveDtel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).RemoveDtel(ctx, req.(*RemoveDtelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_SetDtelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDtelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).SetDtelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_SetDtelAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).SetDtelAttribute(ctx, req.(*SetDtelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_GetDtelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDtelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).GetDtelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_GetDtelAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).GetDtelAttribute(ctx, req.(*GetDtelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_CreateDtelQueueReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDtelQueueReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).CreateDtelQueueReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_CreateDtelQueueReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).CreateDtelQueueReport(ctx, req.(*CreateDtelQueueReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_RemoveDtelQueueReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDtelQueueReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).RemoveDtelQueueReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_RemoveDtelQueueReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).RemoveDtelQueueReport(ctx, req.(*RemoveDtelQueueReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_SetDtelQueueReportAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDtelQueueReportAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).SetDtelQueueReportAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_SetDtelQueueReportAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).SetDtelQueueReportAttribute(ctx, req.(*SetDtelQueueReportAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_GetDtelQueueReportAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDtelQueueReportAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).GetDtelQueueReportAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_GetDtelQueueReportAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).GetDtelQueueReportAttribute(ctx, req.(*GetDtelQueueReportAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_CreateDtelIntSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDtelIntSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).CreateDtelIntSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_CreateDtelIntSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).CreateDtelIntSession(ctx, req.(*CreateDtelIntSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_RemoveDtelIntSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDtelIntSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).RemoveDtelIntSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_RemoveDtelIntSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).RemoveDtelIntSession(ctx, req.(*RemoveDtelIntSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_SetDtelIntSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDtelIntSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).SetDtelIntSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_SetDtelIntSessionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).SetDtelIntSessionAttribute(ctx, req.(*SetDtelIntSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_GetDtelIntSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDtelIntSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).GetDtelIntSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_GetDtelIntSessionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).GetDtelIntSessionAttribute(ctx, req.(*GetDtelIntSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_CreateDtelReportSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDtelReportSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).CreateDtelReportSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_CreateDtelReportSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).CreateDtelReportSession(ctx, req.(*CreateDtelReportSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_RemoveDtelReportSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDtelReportSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).RemoveDtelReportSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_RemoveDtelReportSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).RemoveDtelReportSession(ctx, req.(*RemoveDtelReportSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_SetDtelReportSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDtelReportSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).SetDtelReportSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_SetDtelReportSessionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).SetDtelReportSessionAttribute(ctx, req.(*SetDtelReportSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_GetDtelReportSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDtelReportSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).GetDtelReportSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_GetDtelReportSessionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).GetDtelReportSessionAttribute(ctx, req.(*GetDtelReportSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_CreateDtelEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDtelEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).CreateDtelEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_CreateDtelEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).CreateDtelEvent(ctx, req.(*CreateDtelEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_RemoveDtelEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDtelEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).RemoveDtelEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_RemoveDtelEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).RemoveDtelEvent(ctx, req.(*RemoveDtelEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_SetDtelEventAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDtelEventAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).SetDtelEventAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_SetDtelEventAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).SetDtelEventAttribute(ctx, req.(*SetDtelEventAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dtel_GetDtelEventAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDtelEventAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtelServer).GetDtelEventAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dtel_GetDtelEventAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtelServer).GetDtelEventAttribute(ctx, req.(*GetDtelEventAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dtel_ServiceDesc is the grpc.ServiceDesc for Dtel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dtel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Dtel",
	HandlerType: (*DtelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDtel",
			Handler:    _Dtel_CreateDtel_Handler,
		},
		{
			MethodName: "RemoveDtel",
			Handler:    _Dtel_RemoveDtel_Handler,
		},
		{
			MethodName: "SetDtelAttribute",
			Handler:    _Dtel_SetDtelAttribute_Handler,
		},
		{
			MethodName: "GetDtelAttribute",
			Handler:    _Dtel_GetDtelAttribute_Handler,
		},
		{
			MethodName: "CreateDtelQueueReport",
			Handler:    _Dtel_CreateDtelQueueReport_Handler,
		},
		{
			MethodName: "RemoveDtelQueueReport",
			Handler:    _Dtel_RemoveDtelQueueReport_Handler,
		},
		{
			MethodName: "SetDtelQueueReportAttribute",
			Handler:    _Dtel_SetDtelQueueReportAttribute_Handler,
		},
		{
			MethodName: "GetDtelQueueReportAttribute",
			Handler:    _Dtel_GetDtelQueueReportAttribute_Handler,
		},
		{
			MethodName: "CreateDtelIntSession",
			Handler:    _Dtel_CreateDtelIntSession_Handler,
		},
		{
			MethodName: "RemoveDtelIntSession",
			Handler:    _Dtel_RemoveDtelIntSession_Handler,
		},
		{
			MethodName: "SetDtelIntSessionAttribute",
			Handler:    _Dtel_SetDtelIntSessionAttribute_Handler,
		},
		{
			MethodName: "GetDtelIntSessionAttribute",
			Handler:    _Dtel_GetDtelIntSessionAttribute_Handler,
		},
		{
			MethodName: "CreateDtelReportSession",
			Handler:    _Dtel_CreateDtelReportSession_Handler,
		},
		{
			MethodName: "RemoveDtelReportSession",
			Handler:    _Dtel_RemoveDtelReportSession_Handler,
		},
		{
			MethodName: "SetDtelReportSessionAttribute",
			Handler:    _Dtel_SetDtelReportSessionAttribute_Handler,
		},
		{
			MethodName: "GetDtelReportSessionAttribute",
			Handler:    _Dtel_GetDtelReportSessionAttribute_Handler,
		},
		{
			MethodName: "CreateDtelEvent",
			Handler:    _Dtel_CreateDtelEvent_Handler,
		},
		{
			MethodName: "RemoveDtelEvent",
			Handler:    _Dtel_RemoveDtelEvent_Handler,
		},
		{
			MethodName: "SetDtelEventAttribute",
			Handler:    _Dtel_SetDtelEventAttribute_Handler,
		},
		{
			MethodName: "GetDtelEventAttribute",
			Handler:    _Dtel_GetDtelEventAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/dtel.proto",
}
