// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/proto/sai/system_port.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SystemPortAttr int32

const (
	SystemPortAttr_SYSTEM_PORT_ATTR_UNSPECIFIED         SystemPortAttr = 0
	SystemPortAttr_SYSTEM_PORT_ATTR_TYPE                SystemPortAttr = 1
	SystemPortAttr_SYSTEM_PORT_ATTR_QOS_NUMBER_OF_VOQS  SystemPortAttr = 2
	SystemPortAttr_SYSTEM_PORT_ATTR_QOS_VOQ_LIST        SystemPortAttr = 3
	SystemPortAttr_SYSTEM_PORT_ATTR_PORT                SystemPortAttr = 4
	SystemPortAttr_SYSTEM_PORT_ATTR_ADMIN_STATE         SystemPortAttr = 5
	SystemPortAttr_SYSTEM_PORT_ATTR_CONFIG_INFO         SystemPortAttr = 6
	SystemPortAttr_SYSTEM_PORT_ATTR_QOS_TC_TO_QUEUE_MAP SystemPortAttr = 7
)

// Enum value maps for SystemPortAttr.
var (
	SystemPortAttr_name = map[int32]string{
		0: "SYSTEM_PORT_ATTR_UNSPECIFIED",
		1: "SYSTEM_PORT_ATTR_TYPE",
		2: "SYSTEM_PORT_ATTR_QOS_NUMBER_OF_VOQS",
		3: "SYSTEM_PORT_ATTR_QOS_VOQ_LIST",
		4: "SYSTEM_PORT_ATTR_PORT",
		5: "SYSTEM_PORT_ATTR_ADMIN_STATE",
		6: "SYSTEM_PORT_ATTR_CONFIG_INFO",
		7: "SYSTEM_PORT_ATTR_QOS_TC_TO_QUEUE_MAP",
	}
	SystemPortAttr_value = map[string]int32{
		"SYSTEM_PORT_ATTR_UNSPECIFIED":         0,
		"SYSTEM_PORT_ATTR_TYPE":                1,
		"SYSTEM_PORT_ATTR_QOS_NUMBER_OF_VOQS":  2,
		"SYSTEM_PORT_ATTR_QOS_VOQ_LIST":        3,
		"SYSTEM_PORT_ATTR_PORT":                4,
		"SYSTEM_PORT_ATTR_ADMIN_STATE":         5,
		"SYSTEM_PORT_ATTR_CONFIG_INFO":         6,
		"SYSTEM_PORT_ATTR_QOS_TC_TO_QUEUE_MAP": 7,
	}
)

func (x SystemPortAttr) Enum() *SystemPortAttr {
	p := new(SystemPortAttr)
	*p = x
	return p
}

func (x SystemPortAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemPortAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_system_port_proto_enumTypes[0].Descriptor()
}

func (SystemPortAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_system_port_proto_enumTypes[0]
}

func (x SystemPortAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemPortAttr.Descriptor instead.
func (SystemPortAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_system_port_proto_rawDescGZIP(), []int{0}
}

type CreateSystemPortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch          uint64            `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	AdminState      *bool             `protobuf:"varint,2,opt,name=admin_state,json=adminState,proto3,oneof" json:"admin_state,omitempty"`
	ConfigInfo      *SystemPortConfig `protobuf:"bytes,3,opt,name=config_info,json=configInfo,proto3,oneof" json:"config_info,omitempty"`
	QosTcToQueueMap *uint64           `protobuf:"varint,4,opt,name=qos_tc_to_queue_map,json=qosTcToQueueMap,proto3,oneof" json:"qos_tc_to_queue_map,omitempty"`
}

func (x *CreateSystemPortRequest) Reset() {
	*x = CreateSystemPortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSystemPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSystemPortRequest) ProtoMessage() {}

func (x *CreateSystemPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSystemPortRequest.ProtoReflect.Descriptor instead.
func (*CreateSystemPortRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_system_port_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSystemPortRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateSystemPortRequest) GetAdminState() bool {
	if x != nil && x.AdminState != nil {
		return *x.AdminState
	}
	return false
}

func (x *CreateSystemPortRequest) GetConfigInfo() *SystemPortConfig {
	if x != nil {
		return x.ConfigInfo
	}
	return nil
}

func (x *CreateSystemPortRequest) GetQosTcToQueueMap() uint64 {
	if x != nil && x.QosTcToQueueMap != nil {
		return *x.QosTcToQueueMap
	}
	return 0
}

type CreateSystemPortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateSystemPortResponse) Reset() {
	*x = CreateSystemPortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSystemPortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSystemPortResponse) ProtoMessage() {}

func (x *CreateSystemPortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSystemPortResponse.ProtoReflect.Descriptor instead.
func (*CreateSystemPortResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_system_port_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSystemPortResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveSystemPortRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveSystemPortRequest) Reset() {
	*x = RemoveSystemPortRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSystemPortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSystemPortRequest) ProtoMessage() {}

func (x *RemoveSystemPortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSystemPortRequest.ProtoReflect.Descriptor instead.
func (*RemoveSystemPortRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_system_port_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveSystemPortRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveSystemPortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSystemPortResponse) Reset() {
	*x = RemoveSystemPortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSystemPortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSystemPortResponse) ProtoMessage() {}

func (x *RemoveSystemPortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSystemPortResponse.ProtoReflect.Descriptor instead.
func (*RemoveSystemPortResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_system_port_proto_rawDescGZIP(), []int{3}
}

type SetSystemPortAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid             uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AdminState      *bool   `protobuf:"varint,2,opt,name=admin_state,json=adminState,proto3,oneof" json:"admin_state,omitempty"`
	QosTcToQueueMap *uint64 `protobuf:"varint,3,opt,name=qos_tc_to_queue_map,json=qosTcToQueueMap,proto3,oneof" json:"qos_tc_to_queue_map,omitempty"`
}

func (x *SetSystemPortAttributeRequest) Reset() {
	*x = SetSystemPortAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSystemPortAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSystemPortAttributeRequest) ProtoMessage() {}

func (x *SetSystemPortAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSystemPortAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetSystemPortAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_system_port_proto_rawDescGZIP(), []int{4}
}

func (x *SetSystemPortAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetSystemPortAttributeRequest) GetAdminState() bool {
	if x != nil && x.AdminState != nil {
		return *x.AdminState
	}
	return false
}

func (x *SetSystemPortAttributeRequest) GetQosTcToQueueMap() uint64 {
	if x != nil && x.QosTcToQueueMap != nil {
		return *x.QosTcToQueueMap
	}
	return 0
}

type SetSystemPortAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSystemPortAttributeResponse) Reset() {
	*x = SetSystemPortAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSystemPortAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSystemPortAttributeResponse) ProtoMessage() {}

func (x *SetSystemPortAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSystemPortAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetSystemPortAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_system_port_proto_rawDescGZIP(), []int{5}
}

type GetSystemPortAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64           `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []SystemPortAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.SystemPortAttr" json:"attr_type,omitempty"`
}

func (x *GetSystemPortAttributeRequest) Reset() {
	*x = GetSystemPortAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemPortAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemPortAttributeRequest) ProtoMessage() {}

func (x *GetSystemPortAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemPortAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetSystemPortAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_system_port_proto_rawDescGZIP(), []int{6}
}

func (x *GetSystemPortAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetSystemPortAttributeRequest) GetAttrType() []SystemPortAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetSystemPortAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *SystemPortAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetSystemPortAttributeResponse) Reset() {
	*x = GetSystemPortAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSystemPortAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemPortAttributeResponse) ProtoMessage() {}

func (x *GetSystemPortAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_system_port_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemPortAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetSystemPortAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_system_port_proto_rawDescGZIP(), []int{7}
}

func (x *GetSystemPortAttributeResponse) GetAttr() *SystemPortAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_proto_sai_system_port_proto protoreflect.FileDescriptor

var file_dataplane_proto_sai_system_port_proto_rawDesc = []byte{
	0x0a, 0x25, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x73, 0x61, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb1, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f,
	0x05, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x55, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x06, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x13, 0x71, 0x6f, 0x73,
	0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x02,
	0x52, 0x0f, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x54, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x61,
	0x70, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x5e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x22, 0x2c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x22, 0x2b, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1d,
	0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x05, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x13, 0x71, 0x6f, 0x73, 0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x07, 0x48, 0x01, 0x52, 0x0f, 0x71, 0x6f, 0x73, 0x54, 0x63, 0x54, 0x6f, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x61, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x6f, 0x73,
	0x5f, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x22, 0x20, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72,
	0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x75, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0xa2, 0x02, 0x0a, 0x0e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x51, 0x4f, 0x53, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x56, 0x4f,
	0x51, 0x53, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x56, 0x4f, 0x51,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x54,
	0x43, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x07,
	0x32, 0x8e, 0x04, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x75, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01,
	0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_proto_sai_system_port_proto_rawDescOnce sync.Once
	file_dataplane_proto_sai_system_port_proto_rawDescData = file_dataplane_proto_sai_system_port_proto_rawDesc
)

func file_dataplane_proto_sai_system_port_proto_rawDescGZIP() []byte {
	file_dataplane_proto_sai_system_port_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_sai_system_port_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_sai_system_port_proto_rawDescData)
	})
	return file_dataplane_proto_sai_system_port_proto_rawDescData
}

var file_dataplane_proto_sai_system_port_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_proto_sai_system_port_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dataplane_proto_sai_system_port_proto_goTypes = []interface{}{
	(SystemPortAttr)(0),                    // 0: lemming.dataplane.sai.SystemPortAttr
	(*CreateSystemPortRequest)(nil),        // 1: lemming.dataplane.sai.CreateSystemPortRequest
	(*CreateSystemPortResponse)(nil),       // 2: lemming.dataplane.sai.CreateSystemPortResponse
	(*RemoveSystemPortRequest)(nil),        // 3: lemming.dataplane.sai.RemoveSystemPortRequest
	(*RemoveSystemPortResponse)(nil),       // 4: lemming.dataplane.sai.RemoveSystemPortResponse
	(*SetSystemPortAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetSystemPortAttributeRequest
	(*SetSystemPortAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetSystemPortAttributeResponse
	(*GetSystemPortAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetSystemPortAttributeRequest
	(*GetSystemPortAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetSystemPortAttributeResponse
	(*SystemPortConfig)(nil),               // 9: lemming.dataplane.sai.SystemPortConfig
	(*SystemPortAttribute)(nil),            // 10: lemming.dataplane.sai.SystemPortAttribute
}
var file_dataplane_proto_sai_system_port_proto_depIdxs = []int32{
	9,  // 0: lemming.dataplane.sai.CreateSystemPortRequest.config_info:type_name -> lemming.dataplane.sai.SystemPortConfig
	0,  // 1: lemming.dataplane.sai.GetSystemPortAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.SystemPortAttr
	10, // 2: lemming.dataplane.sai.GetSystemPortAttributeResponse.attr:type_name -> lemming.dataplane.sai.SystemPortAttribute
	1,  // 3: lemming.dataplane.sai.SystemPort.CreateSystemPort:input_type -> lemming.dataplane.sai.CreateSystemPortRequest
	3,  // 4: lemming.dataplane.sai.SystemPort.RemoveSystemPort:input_type -> lemming.dataplane.sai.RemoveSystemPortRequest
	5,  // 5: lemming.dataplane.sai.SystemPort.SetSystemPortAttribute:input_type -> lemming.dataplane.sai.SetSystemPortAttributeRequest
	7,  // 6: lemming.dataplane.sai.SystemPort.GetSystemPortAttribute:input_type -> lemming.dataplane.sai.GetSystemPortAttributeRequest
	2,  // 7: lemming.dataplane.sai.SystemPort.CreateSystemPort:output_type -> lemming.dataplane.sai.CreateSystemPortResponse
	4,  // 8: lemming.dataplane.sai.SystemPort.RemoveSystemPort:output_type -> lemming.dataplane.sai.RemoveSystemPortResponse
	6,  // 9: lemming.dataplane.sai.SystemPort.SetSystemPortAttribute:output_type -> lemming.dataplane.sai.SetSystemPortAttributeResponse
	8,  // 10: lemming.dataplane.sai.SystemPort.GetSystemPortAttribute:output_type -> lemming.dataplane.sai.GetSystemPortAttributeResponse
	7,  // [7:11] is the sub-list for method output_type
	3,  // [3:7] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_dataplane_proto_sai_system_port_proto_init() }
func file_dataplane_proto_sai_system_port_proto_init() {
	if File_dataplane_proto_sai_system_port_proto != nil {
		return
	}
	file_dataplane_proto_sai_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_sai_system_port_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSystemPortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_system_port_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSystemPortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_system_port_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSystemPortRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_system_port_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSystemPortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_system_port_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSystemPortAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_system_port_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSystemPortAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_system_port_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemPortAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_system_port_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSystemPortAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_sai_system_port_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_proto_sai_system_port_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_sai_system_port_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_sai_system_port_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_sai_system_port_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_sai_system_port_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_sai_system_port_proto_msgTypes,
	}.Build()
	File_dataplane_proto_sai_system_port_proto = out.File
	file_dataplane_proto_sai_system_port_proto_rawDesc = nil
	file_dataplane_proto_sai_system_port_proto_goTypes = nil
	file_dataplane_proto_sai_system_port_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SystemPortClient is the client API for SystemPort service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SystemPortClient interface {
	CreateSystemPort(ctx context.Context, in *CreateSystemPortRequest, opts ...grpc.CallOption) (*CreateSystemPortResponse, error)
	RemoveSystemPort(ctx context.Context, in *RemoveSystemPortRequest, opts ...grpc.CallOption) (*RemoveSystemPortResponse, error)
	SetSystemPortAttribute(ctx context.Context, in *SetSystemPortAttributeRequest, opts ...grpc.CallOption) (*SetSystemPortAttributeResponse, error)
	GetSystemPortAttribute(ctx context.Context, in *GetSystemPortAttributeRequest, opts ...grpc.CallOption) (*GetSystemPortAttributeResponse, error)
}

type systemPortClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemPortClient(cc grpc.ClientConnInterface) SystemPortClient {
	return &systemPortClient{cc}
}

func (c *systemPortClient) CreateSystemPort(ctx context.Context, in *CreateSystemPortRequest, opts ...grpc.CallOption) (*CreateSystemPortResponse, error) {
	out := new(CreateSystemPortResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.SystemPort/CreateSystemPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemPortClient) RemoveSystemPort(ctx context.Context, in *RemoveSystemPortRequest, opts ...grpc.CallOption) (*RemoveSystemPortResponse, error) {
	out := new(RemoveSystemPortResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.SystemPort/RemoveSystemPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemPortClient) SetSystemPortAttribute(ctx context.Context, in *SetSystemPortAttributeRequest, opts ...grpc.CallOption) (*SetSystemPortAttributeResponse, error) {
	out := new(SetSystemPortAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.SystemPort/SetSystemPortAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemPortClient) GetSystemPortAttribute(ctx context.Context, in *GetSystemPortAttributeRequest, opts ...grpc.CallOption) (*GetSystemPortAttributeResponse, error) {
	out := new(GetSystemPortAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.SystemPort/GetSystemPortAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemPortServer is the server API for SystemPort service.
type SystemPortServer interface {
	CreateSystemPort(context.Context, *CreateSystemPortRequest) (*CreateSystemPortResponse, error)
	RemoveSystemPort(context.Context, *RemoveSystemPortRequest) (*RemoveSystemPortResponse, error)
	SetSystemPortAttribute(context.Context, *SetSystemPortAttributeRequest) (*SetSystemPortAttributeResponse, error)
	GetSystemPortAttribute(context.Context, *GetSystemPortAttributeRequest) (*GetSystemPortAttributeResponse, error)
}

// UnimplementedSystemPortServer can be embedded to have forward compatible implementations.
type UnimplementedSystemPortServer struct {
}

func (*UnimplementedSystemPortServer) CreateSystemPort(context.Context, *CreateSystemPortRequest) (*CreateSystemPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemPort not implemented")
}
func (*UnimplementedSystemPortServer) RemoveSystemPort(context.Context, *RemoveSystemPortRequest) (*RemoveSystemPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSystemPort not implemented")
}
func (*UnimplementedSystemPortServer) SetSystemPortAttribute(context.Context, *SetSystemPortAttributeRequest) (*SetSystemPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSystemPortAttribute not implemented")
}
func (*UnimplementedSystemPortServer) GetSystemPortAttribute(context.Context, *GetSystemPortAttributeRequest) (*GetSystemPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemPortAttribute not implemented")
}

func RegisterSystemPortServer(s *grpc.Server, srv SystemPortServer) {
	s.RegisterService(&_SystemPort_serviceDesc, srv)
}

func _SystemPort_CreateSystemPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemPortServer).CreateSystemPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.SystemPort/CreateSystemPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemPortServer).CreateSystemPort(ctx, req.(*CreateSystemPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemPort_RemoveSystemPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSystemPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemPortServer).RemoveSystemPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.SystemPort/RemoveSystemPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemPortServer).RemoveSystemPort(ctx, req.(*RemoveSystemPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemPort_SetSystemPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSystemPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemPortServer).SetSystemPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.SystemPort/SetSystemPortAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemPortServer).SetSystemPortAttribute(ctx, req.(*SetSystemPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemPort_GetSystemPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemPortServer).GetSystemPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.SystemPort/GetSystemPortAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemPortServer).GetSystemPortAttribute(ctx, req.(*GetSystemPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemPort_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.SystemPort",
	HandlerType: (*SystemPortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSystemPort",
			Handler:    _SystemPort_CreateSystemPort_Handler,
		},
		{
			MethodName: "RemoveSystemPort",
			Handler:    _SystemPort_RemoveSystemPort_Handler,
		},
		{
			MethodName: "SetSystemPortAttribute",
			Handler:    _SystemPort_SetSystemPortAttribute_Handler,
		},
		{
			MethodName: "GetSystemPortAttribute",
			Handler:    _SystemPort_GetSystemPortAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/system_port.proto",
}
