// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/bridge.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bridge_CreateBridge_FullMethodName           = "/lemming.dataplane.sai.Bridge/CreateBridge"
	Bridge_RemoveBridge_FullMethodName           = "/lemming.dataplane.sai.Bridge/RemoveBridge"
	Bridge_SetBridgeAttribute_FullMethodName     = "/lemming.dataplane.sai.Bridge/SetBridgeAttribute"
	Bridge_GetBridgeAttribute_FullMethodName     = "/lemming.dataplane.sai.Bridge/GetBridgeAttribute"
	Bridge_GetBridgeStats_FullMethodName         = "/lemming.dataplane.sai.Bridge/GetBridgeStats"
	Bridge_CreateBridgePort_FullMethodName       = "/lemming.dataplane.sai.Bridge/CreateBridgePort"
	Bridge_RemoveBridgePort_FullMethodName       = "/lemming.dataplane.sai.Bridge/RemoveBridgePort"
	Bridge_SetBridgePortAttribute_FullMethodName = "/lemming.dataplane.sai.Bridge/SetBridgePortAttribute"
	Bridge_GetBridgePortAttribute_FullMethodName = "/lemming.dataplane.sai.Bridge/GetBridgePortAttribute"
	Bridge_GetBridgePortStats_FullMethodName     = "/lemming.dataplane.sai.Bridge/GetBridgePortStats"
)

// BridgeClient is the client API for Bridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeClient interface {
	CreateBridge(ctx context.Context, in *CreateBridgeRequest, opts ...grpc.CallOption) (*CreateBridgeResponse, error)
	RemoveBridge(ctx context.Context, in *RemoveBridgeRequest, opts ...grpc.CallOption) (*RemoveBridgeResponse, error)
	SetBridgeAttribute(ctx context.Context, in *SetBridgeAttributeRequest, opts ...grpc.CallOption) (*SetBridgeAttributeResponse, error)
	GetBridgeAttribute(ctx context.Context, in *GetBridgeAttributeRequest, opts ...grpc.CallOption) (*GetBridgeAttributeResponse, error)
	GetBridgeStats(ctx context.Context, in *GetBridgeStatsRequest, opts ...grpc.CallOption) (*GetBridgeStatsResponse, error)
	CreateBridgePort(ctx context.Context, in *CreateBridgePortRequest, opts ...grpc.CallOption) (*CreateBridgePortResponse, error)
	RemoveBridgePort(ctx context.Context, in *RemoveBridgePortRequest, opts ...grpc.CallOption) (*RemoveBridgePortResponse, error)
	SetBridgePortAttribute(ctx context.Context, in *SetBridgePortAttributeRequest, opts ...grpc.CallOption) (*SetBridgePortAttributeResponse, error)
	GetBridgePortAttribute(ctx context.Context, in *GetBridgePortAttributeRequest, opts ...grpc.CallOption) (*GetBridgePortAttributeResponse, error)
	GetBridgePortStats(ctx context.Context, in *GetBridgePortStatsRequest, opts ...grpc.CallOption) (*GetBridgePortStatsResponse, error)
}

type bridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeClient(cc grpc.ClientConnInterface) BridgeClient {
	return &bridgeClient{cc}
}

func (c *bridgeClient) CreateBridge(ctx context.Context, in *CreateBridgeRequest, opts ...grpc.CallOption) (*CreateBridgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBridgeResponse)
	err := c.cc.Invoke(ctx, Bridge_CreateBridge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) RemoveBridge(ctx context.Context, in *RemoveBridgeRequest, opts ...grpc.CallOption) (*RemoveBridgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveBridgeResponse)
	err := c.cc.Invoke(ctx, Bridge_RemoveBridge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) SetBridgeAttribute(ctx context.Context, in *SetBridgeAttributeRequest, opts ...grpc.CallOption) (*SetBridgeAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetBridgeAttributeResponse)
	err := c.cc.Invoke(ctx, Bridge_SetBridgeAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) GetBridgeAttribute(ctx context.Context, in *GetBridgeAttributeRequest, opts ...grpc.CallOption) (*GetBridgeAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBridgeAttributeResponse)
	err := c.cc.Invoke(ctx, Bridge_GetBridgeAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) GetBridgeStats(ctx context.Context, in *GetBridgeStatsRequest, opts ...grpc.CallOption) (*GetBridgeStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBridgeStatsResponse)
	err := c.cc.Invoke(ctx, Bridge_GetBridgeStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) CreateBridgePort(ctx context.Context, in *CreateBridgePortRequest, opts ...grpc.CallOption) (*CreateBridgePortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBridgePortResponse)
	err := c.cc.Invoke(ctx, Bridge_CreateBridgePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) RemoveBridgePort(ctx context.Context, in *RemoveBridgePortRequest, opts ...grpc.CallOption) (*RemoveBridgePortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveBridgePortResponse)
	err := c.cc.Invoke(ctx, Bridge_RemoveBridgePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) SetBridgePortAttribute(ctx context.Context, in *SetBridgePortAttributeRequest, opts ...grpc.CallOption) (*SetBridgePortAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetBridgePortAttributeResponse)
	err := c.cc.Invoke(ctx, Bridge_SetBridgePortAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) GetBridgePortAttribute(ctx context.Context, in *GetBridgePortAttributeRequest, opts ...grpc.CallOption) (*GetBridgePortAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBridgePortAttributeResponse)
	err := c.cc.Invoke(ctx, Bridge_GetBridgePortAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) GetBridgePortStats(ctx context.Context, in *GetBridgePortStatsRequest, opts ...grpc.CallOption) (*GetBridgePortStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBridgePortStatsResponse)
	err := c.cc.Invoke(ctx, Bridge_GetBridgePortStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeServer is the server API for Bridge service.
// All implementations should embed UnimplementedBridgeServer
// for forward compatibility.
type BridgeServer interface {
	CreateBridge(context.Context, *CreateBridgeRequest) (*CreateBridgeResponse, error)
	RemoveBridge(context.Context, *RemoveBridgeRequest) (*RemoveBridgeResponse, error)
	SetBridgeAttribute(context.Context, *SetBridgeAttributeRequest) (*SetBridgeAttributeResponse, error)
	GetBridgeAttribute(context.Context, *GetBridgeAttributeRequest) (*GetBridgeAttributeResponse, error)
	GetBridgeStats(context.Context, *GetBridgeStatsRequest) (*GetBridgeStatsResponse, error)
	CreateBridgePort(context.Context, *CreateBridgePortRequest) (*CreateBridgePortResponse, error)
	RemoveBridgePort(context.Context, *RemoveBridgePortRequest) (*RemoveBridgePortResponse, error)
	SetBridgePortAttribute(context.Context, *SetBridgePortAttributeRequest) (*SetBridgePortAttributeResponse, error)
	GetBridgePortAttribute(context.Context, *GetBridgePortAttributeRequest) (*GetBridgePortAttributeResponse, error)
	GetBridgePortStats(context.Context, *GetBridgePortStatsRequest) (*GetBridgePortStatsResponse, error)
}

// UnimplementedBridgeServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBridgeServer struct{}

func (UnimplementedBridgeServer) CreateBridge(context.Context, *CreateBridgeRequest) (*CreateBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBridge not implemented")
}
func (UnimplementedBridgeServer) RemoveBridge(context.Context, *RemoveBridgeRequest) (*RemoveBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBridge not implemented")
}
func (UnimplementedBridgeServer) SetBridgeAttribute(context.Context, *SetBridgeAttributeRequest) (*SetBridgeAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBridgeAttribute not implemented")
}
func (UnimplementedBridgeServer) GetBridgeAttribute(context.Context, *GetBridgeAttributeRequest) (*GetBridgeAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBridgeAttribute not implemented")
}
func (UnimplementedBridgeServer) GetBridgeStats(context.Context, *GetBridgeStatsRequest) (*GetBridgeStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBridgeStats not implemented")
}
func (UnimplementedBridgeServer) CreateBridgePort(context.Context, *CreateBridgePortRequest) (*CreateBridgePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBridgePort not implemented")
}
func (UnimplementedBridgeServer) RemoveBridgePort(context.Context, *RemoveBridgePortRequest) (*RemoveBridgePortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBridgePort not implemented")
}
func (UnimplementedBridgeServer) SetBridgePortAttribute(context.Context, *SetBridgePortAttributeRequest) (*SetBridgePortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBridgePortAttribute not implemented")
}
func (UnimplementedBridgeServer) GetBridgePortAttribute(context.Context, *GetBridgePortAttributeRequest) (*GetBridgePortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBridgePortAttribute not implemented")
}
func (UnimplementedBridgeServer) GetBridgePortStats(context.Context, *GetBridgePortStatsRequest) (*GetBridgePortStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBridgePortStats not implemented")
}
func (UnimplementedBridgeServer) testEmbeddedByValue() {}

// UnsafeBridgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeServer will
// result in compilation errors.
type UnsafeBridgeServer interface {
	mustEmbedUnimplementedBridgeServer()
}

func RegisterBridgeServer(s grpc.ServiceRegistrar, srv BridgeServer) {
	// If the following call pancis, it indicates UnimplementedBridgeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bridge_ServiceDesc, srv)
}

func _Bridge_CreateBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).CreateBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_CreateBridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).CreateBridge(ctx, req.(*CreateBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_RemoveBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).RemoveBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_RemoveBridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).RemoveBridge(ctx, req.(*RemoveBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_SetBridgeAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBridgeAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).SetBridgeAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_SetBridgeAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).SetBridgeAttribute(ctx, req.(*SetBridgeAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_GetBridgeAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBridgeAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).GetBridgeAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_GetBridgeAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).GetBridgeAttribute(ctx, req.(*GetBridgeAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_GetBridgeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBridgeStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).GetBridgeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_GetBridgeStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).GetBridgeStats(ctx, req.(*GetBridgeStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_CreateBridgePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBridgePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).CreateBridgePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_CreateBridgePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).CreateBridgePort(ctx, req.(*CreateBridgePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_RemoveBridgePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBridgePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).RemoveBridgePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_RemoveBridgePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).RemoveBridgePort(ctx, req.(*RemoveBridgePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_SetBridgePortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBridgePortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).SetBridgePortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_SetBridgePortAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).SetBridgePortAttribute(ctx, req.(*SetBridgePortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_GetBridgePortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBridgePortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).GetBridgePortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_GetBridgePortAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).GetBridgePortAttribute(ctx, req.(*GetBridgePortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_GetBridgePortStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBridgePortStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).GetBridgePortStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_GetBridgePortStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).GetBridgePortStats(ctx, req.(*GetBridgePortStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bridge_ServiceDesc is the grpc.ServiceDesc for Bridge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bridge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Bridge",
	HandlerType: (*BridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBridge",
			Handler:    _Bridge_CreateBridge_Handler,
		},
		{
			MethodName: "RemoveBridge",
			Handler:    _Bridge_RemoveBridge_Handler,
		},
		{
			MethodName: "SetBridgeAttribute",
			Handler:    _Bridge_SetBridgeAttribute_Handler,
		},
		{
			MethodName: "GetBridgeAttribute",
			Handler:    _Bridge_GetBridgeAttribute_Handler,
		},
		{
			MethodName: "GetBridgeStats",
			Handler:    _Bridge_GetBridgeStats_Handler,
		},
		{
			MethodName: "CreateBridgePort",
			Handler:    _Bridge_CreateBridgePort_Handler,
		},
		{
			MethodName: "RemoveBridgePort",
			Handler:    _Bridge_RemoveBridgePort_Handler,
		},
		{
			MethodName: "SetBridgePortAttribute",
			Handler:    _Bridge_SetBridgePortAttribute_Handler,
		},
		{
			MethodName: "GetBridgePortAttribute",
			Handler:    _Bridge_GetBridgePortAttribute_Handler,
		},
		{
			MethodName: "GetBridgePortStats",
			Handler:    _Bridge_GetBridgePortStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/bridge.proto",
}
