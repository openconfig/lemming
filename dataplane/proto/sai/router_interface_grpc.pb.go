// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/router_interface.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RouterInterface_CreateRouterInterface_FullMethodName       = "/lemming.dataplane.sai.RouterInterface/CreateRouterInterface"
	RouterInterface_RemoveRouterInterface_FullMethodName       = "/lemming.dataplane.sai.RouterInterface/RemoveRouterInterface"
	RouterInterface_SetRouterInterfaceAttribute_FullMethodName = "/lemming.dataplane.sai.RouterInterface/SetRouterInterfaceAttribute"
	RouterInterface_GetRouterInterfaceAttribute_FullMethodName = "/lemming.dataplane.sai.RouterInterface/GetRouterInterfaceAttribute"
	RouterInterface_GetRouterInterfaceStats_FullMethodName     = "/lemming.dataplane.sai.RouterInterface/GetRouterInterfaceStats"
	RouterInterface_CreateRouterInterfaces_FullMethodName      = "/lemming.dataplane.sai.RouterInterface/CreateRouterInterfaces"
	RouterInterface_RemoveRouterInterfaces_FullMethodName      = "/lemming.dataplane.sai.RouterInterface/RemoveRouterInterfaces"
)

// RouterInterfaceClient is the client API for RouterInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterInterfaceClient interface {
	CreateRouterInterface(ctx context.Context, in *CreateRouterInterfaceRequest, opts ...grpc.CallOption) (*CreateRouterInterfaceResponse, error)
	RemoveRouterInterface(ctx context.Context, in *RemoveRouterInterfaceRequest, opts ...grpc.CallOption) (*RemoveRouterInterfaceResponse, error)
	SetRouterInterfaceAttribute(ctx context.Context, in *SetRouterInterfaceAttributeRequest, opts ...grpc.CallOption) (*SetRouterInterfaceAttributeResponse, error)
	GetRouterInterfaceAttribute(ctx context.Context, in *GetRouterInterfaceAttributeRequest, opts ...grpc.CallOption) (*GetRouterInterfaceAttributeResponse, error)
	GetRouterInterfaceStats(ctx context.Context, in *GetRouterInterfaceStatsRequest, opts ...grpc.CallOption) (*GetRouterInterfaceStatsResponse, error)
	CreateRouterInterfaces(ctx context.Context, in *CreateRouterInterfacesRequest, opts ...grpc.CallOption) (*CreateRouterInterfacesResponse, error)
	RemoveRouterInterfaces(ctx context.Context, in *RemoveRouterInterfacesRequest, opts ...grpc.CallOption) (*RemoveRouterInterfacesResponse, error)
}

type routerInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterInterfaceClient(cc grpc.ClientConnInterface) RouterInterfaceClient {
	return &routerInterfaceClient{cc}
}

func (c *routerInterfaceClient) CreateRouterInterface(ctx context.Context, in *CreateRouterInterfaceRequest, opts ...grpc.CallOption) (*CreateRouterInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRouterInterfaceResponse)
	err := c.cc.Invoke(ctx, RouterInterface_CreateRouterInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerInterfaceClient) RemoveRouterInterface(ctx context.Context, in *RemoveRouterInterfaceRequest, opts ...grpc.CallOption) (*RemoveRouterInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRouterInterfaceResponse)
	err := c.cc.Invoke(ctx, RouterInterface_RemoveRouterInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerInterfaceClient) SetRouterInterfaceAttribute(ctx context.Context, in *SetRouterInterfaceAttributeRequest, opts ...grpc.CallOption) (*SetRouterInterfaceAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRouterInterfaceAttributeResponse)
	err := c.cc.Invoke(ctx, RouterInterface_SetRouterInterfaceAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerInterfaceClient) GetRouterInterfaceAttribute(ctx context.Context, in *GetRouterInterfaceAttributeRequest, opts ...grpc.CallOption) (*GetRouterInterfaceAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouterInterfaceAttributeResponse)
	err := c.cc.Invoke(ctx, RouterInterface_GetRouterInterfaceAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerInterfaceClient) GetRouterInterfaceStats(ctx context.Context, in *GetRouterInterfaceStatsRequest, opts ...grpc.CallOption) (*GetRouterInterfaceStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouterInterfaceStatsResponse)
	err := c.cc.Invoke(ctx, RouterInterface_GetRouterInterfaceStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerInterfaceClient) CreateRouterInterfaces(ctx context.Context, in *CreateRouterInterfacesRequest, opts ...grpc.CallOption) (*CreateRouterInterfacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRouterInterfacesResponse)
	err := c.cc.Invoke(ctx, RouterInterface_CreateRouterInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerInterfaceClient) RemoveRouterInterfaces(ctx context.Context, in *RemoveRouterInterfacesRequest, opts ...grpc.CallOption) (*RemoveRouterInterfacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRouterInterfacesResponse)
	err := c.cc.Invoke(ctx, RouterInterface_RemoveRouterInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterInterfaceServer is the server API for RouterInterface service.
// All implementations should embed UnimplementedRouterInterfaceServer
// for forward compatibility.
type RouterInterfaceServer interface {
	CreateRouterInterface(context.Context, *CreateRouterInterfaceRequest) (*CreateRouterInterfaceResponse, error)
	RemoveRouterInterface(context.Context, *RemoveRouterInterfaceRequest) (*RemoveRouterInterfaceResponse, error)
	SetRouterInterfaceAttribute(context.Context, *SetRouterInterfaceAttributeRequest) (*SetRouterInterfaceAttributeResponse, error)
	GetRouterInterfaceAttribute(context.Context, *GetRouterInterfaceAttributeRequest) (*GetRouterInterfaceAttributeResponse, error)
	GetRouterInterfaceStats(context.Context, *GetRouterInterfaceStatsRequest) (*GetRouterInterfaceStatsResponse, error)
	CreateRouterInterfaces(context.Context, *CreateRouterInterfacesRequest) (*CreateRouterInterfacesResponse, error)
	RemoveRouterInterfaces(context.Context, *RemoveRouterInterfacesRequest) (*RemoveRouterInterfacesResponse, error)
}

// UnimplementedRouterInterfaceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouterInterfaceServer struct{}

func (UnimplementedRouterInterfaceServer) CreateRouterInterface(context.Context, *CreateRouterInterfaceRequest) (*CreateRouterInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouterInterface not implemented")
}
func (UnimplementedRouterInterfaceServer) RemoveRouterInterface(context.Context, *RemoveRouterInterfaceRequest) (*RemoveRouterInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRouterInterface not implemented")
}
func (UnimplementedRouterInterfaceServer) SetRouterInterfaceAttribute(context.Context, *SetRouterInterfaceAttributeRequest) (*SetRouterInterfaceAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRouterInterfaceAttribute not implemented")
}
func (UnimplementedRouterInterfaceServer) GetRouterInterfaceAttribute(context.Context, *GetRouterInterfaceAttributeRequest) (*GetRouterInterfaceAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouterInterfaceAttribute not implemented")
}
func (UnimplementedRouterInterfaceServer) GetRouterInterfaceStats(context.Context, *GetRouterInterfaceStatsRequest) (*GetRouterInterfaceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouterInterfaceStats not implemented")
}
func (UnimplementedRouterInterfaceServer) CreateRouterInterfaces(context.Context, *CreateRouterInterfacesRequest) (*CreateRouterInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouterInterfaces not implemented")
}
func (UnimplementedRouterInterfaceServer) RemoveRouterInterfaces(context.Context, *RemoveRouterInterfacesRequest) (*RemoveRouterInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRouterInterfaces not implemented")
}
func (UnimplementedRouterInterfaceServer) testEmbeddedByValue() {}

// UnsafeRouterInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterInterfaceServer will
// result in compilation errors.
type UnsafeRouterInterfaceServer interface {
	mustEmbedUnimplementedRouterInterfaceServer()
}

func RegisterRouterInterfaceServer(s grpc.ServiceRegistrar, srv RouterInterfaceServer) {
	// If the following call pancis, it indicates UnimplementedRouterInterfaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RouterInterface_ServiceDesc, srv)
}

func _RouterInterface_CreateRouterInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouterInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterInterfaceServer).CreateRouterInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouterInterface_CreateRouterInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterInterfaceServer).CreateRouterInterface(ctx, req.(*CreateRouterInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterInterface_RemoveRouterInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRouterInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterInterfaceServer).RemoveRouterInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouterInterface_RemoveRouterInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterInterfaceServer).RemoveRouterInterface(ctx, req.(*RemoveRouterInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterInterface_SetRouterInterfaceAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRouterInterfaceAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterInterfaceServer).SetRouterInterfaceAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouterInterface_SetRouterInterfaceAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterInterfaceServer).SetRouterInterfaceAttribute(ctx, req.(*SetRouterInterfaceAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterInterface_GetRouterInterfaceAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouterInterfaceAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterInterfaceServer).GetRouterInterfaceAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouterInterface_GetRouterInterfaceAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterInterfaceServer).GetRouterInterfaceAttribute(ctx, req.(*GetRouterInterfaceAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterInterface_GetRouterInterfaceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouterInterfaceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterInterfaceServer).GetRouterInterfaceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouterInterface_GetRouterInterfaceStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterInterfaceServer).GetRouterInterfaceStats(ctx, req.(*GetRouterInterfaceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterInterface_CreateRouterInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouterInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterInterfaceServer).CreateRouterInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouterInterface_CreateRouterInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterInterfaceServer).CreateRouterInterfaces(ctx, req.(*CreateRouterInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterInterface_RemoveRouterInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRouterInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterInterfaceServer).RemoveRouterInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RouterInterface_RemoveRouterInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterInterfaceServer).RemoveRouterInterfaces(ctx, req.(*RemoveRouterInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RouterInterface_ServiceDesc is the grpc.ServiceDesc for RouterInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouterInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.RouterInterface",
	HandlerType: (*RouterInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRouterInterface",
			Handler:    _RouterInterface_CreateRouterInterface_Handler,
		},
		{
			MethodName: "RemoveRouterInterface",
			Handler:    _RouterInterface_RemoveRouterInterface_Handler,
		},
		{
			MethodName: "SetRouterInterfaceAttribute",
			Handler:    _RouterInterface_SetRouterInterfaceAttribute_Handler,
		},
		{
			MethodName: "GetRouterInterfaceAttribute",
			Handler:    _RouterInterface_GetRouterInterfaceAttribute_Handler,
		},
		{
			MethodName: "GetRouterInterfaceStats",
			Handler:    _RouterInterface_GetRouterInterfaceStats_Handler,
		},
		{
			MethodName: "CreateRouterInterfaces",
			Handler:    _RouterInterface_CreateRouterInterfaces_Handler,
		},
		{
			MethodName: "RemoveRouterInterfaces",
			Handler:    _RouterInterface_RemoveRouterInterfaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/router_interface.proto",
}
