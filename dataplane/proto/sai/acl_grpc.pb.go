// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/acl.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Acl_CreateAclTable_FullMethodName                  = "/lemming.dataplane.sai.Acl/CreateAclTable"
	Acl_RemoveAclTable_FullMethodName                  = "/lemming.dataplane.sai.Acl/RemoveAclTable"
	Acl_GetAclTableAttribute_FullMethodName            = "/lemming.dataplane.sai.Acl/GetAclTableAttribute"
	Acl_CreateAclEntry_FullMethodName                  = "/lemming.dataplane.sai.Acl/CreateAclEntry"
	Acl_RemoveAclEntry_FullMethodName                  = "/lemming.dataplane.sai.Acl/RemoveAclEntry"
	Acl_SetAclEntryAttribute_FullMethodName            = "/lemming.dataplane.sai.Acl/SetAclEntryAttribute"
	Acl_GetAclEntryAttribute_FullMethodName            = "/lemming.dataplane.sai.Acl/GetAclEntryAttribute"
	Acl_CreateAclCounter_FullMethodName                = "/lemming.dataplane.sai.Acl/CreateAclCounter"
	Acl_RemoveAclCounter_FullMethodName                = "/lemming.dataplane.sai.Acl/RemoveAclCounter"
	Acl_SetAclCounterAttribute_FullMethodName          = "/lemming.dataplane.sai.Acl/SetAclCounterAttribute"
	Acl_GetAclCounterAttribute_FullMethodName          = "/lemming.dataplane.sai.Acl/GetAclCounterAttribute"
	Acl_CreateAclRange_FullMethodName                  = "/lemming.dataplane.sai.Acl/CreateAclRange"
	Acl_RemoveAclRange_FullMethodName                  = "/lemming.dataplane.sai.Acl/RemoveAclRange"
	Acl_GetAclRangeAttribute_FullMethodName            = "/lemming.dataplane.sai.Acl/GetAclRangeAttribute"
	Acl_CreateAclTableGroup_FullMethodName             = "/lemming.dataplane.sai.Acl/CreateAclTableGroup"
	Acl_RemoveAclTableGroup_FullMethodName             = "/lemming.dataplane.sai.Acl/RemoveAclTableGroup"
	Acl_GetAclTableGroupAttribute_FullMethodName       = "/lemming.dataplane.sai.Acl/GetAclTableGroupAttribute"
	Acl_CreateAclTableGroupMember_FullMethodName       = "/lemming.dataplane.sai.Acl/CreateAclTableGroupMember"
	Acl_RemoveAclTableGroupMember_FullMethodName       = "/lemming.dataplane.sai.Acl/RemoveAclTableGroupMember"
	Acl_SetAclTableGroupMemberAttribute_FullMethodName = "/lemming.dataplane.sai.Acl/SetAclTableGroupMemberAttribute"
	Acl_GetAclTableGroupMemberAttribute_FullMethodName = "/lemming.dataplane.sai.Acl/GetAclTableGroupMemberAttribute"
	Acl_CreateAclTableChainGroup_FullMethodName        = "/lemming.dataplane.sai.Acl/CreateAclTableChainGroup"
	Acl_RemoveAclTableChainGroup_FullMethodName        = "/lemming.dataplane.sai.Acl/RemoveAclTableChainGroup"
	Acl_GetAclTableChainGroupAttribute_FullMethodName  = "/lemming.dataplane.sai.Acl/GetAclTableChainGroupAttribute"
)

// AclClient is the client API for Acl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AclClient interface {
	CreateAclTable(ctx context.Context, in *CreateAclTableRequest, opts ...grpc.CallOption) (*CreateAclTableResponse, error)
	RemoveAclTable(ctx context.Context, in *RemoveAclTableRequest, opts ...grpc.CallOption) (*RemoveAclTableResponse, error)
	GetAclTableAttribute(ctx context.Context, in *GetAclTableAttributeRequest, opts ...grpc.CallOption) (*GetAclTableAttributeResponse, error)
	CreateAclEntry(ctx context.Context, in *CreateAclEntryRequest, opts ...grpc.CallOption) (*CreateAclEntryResponse, error)
	RemoveAclEntry(ctx context.Context, in *RemoveAclEntryRequest, opts ...grpc.CallOption) (*RemoveAclEntryResponse, error)
	SetAclEntryAttribute(ctx context.Context, in *SetAclEntryAttributeRequest, opts ...grpc.CallOption) (*SetAclEntryAttributeResponse, error)
	GetAclEntryAttribute(ctx context.Context, in *GetAclEntryAttributeRequest, opts ...grpc.CallOption) (*GetAclEntryAttributeResponse, error)
	CreateAclCounter(ctx context.Context, in *CreateAclCounterRequest, opts ...grpc.CallOption) (*CreateAclCounterResponse, error)
	RemoveAclCounter(ctx context.Context, in *RemoveAclCounterRequest, opts ...grpc.CallOption) (*RemoveAclCounterResponse, error)
	SetAclCounterAttribute(ctx context.Context, in *SetAclCounterAttributeRequest, opts ...grpc.CallOption) (*SetAclCounterAttributeResponse, error)
	GetAclCounterAttribute(ctx context.Context, in *GetAclCounterAttributeRequest, opts ...grpc.CallOption) (*GetAclCounterAttributeResponse, error)
	CreateAclRange(ctx context.Context, in *CreateAclRangeRequest, opts ...grpc.CallOption) (*CreateAclRangeResponse, error)
	RemoveAclRange(ctx context.Context, in *RemoveAclRangeRequest, opts ...grpc.CallOption) (*RemoveAclRangeResponse, error)
	GetAclRangeAttribute(ctx context.Context, in *GetAclRangeAttributeRequest, opts ...grpc.CallOption) (*GetAclRangeAttributeResponse, error)
	CreateAclTableGroup(ctx context.Context, in *CreateAclTableGroupRequest, opts ...grpc.CallOption) (*CreateAclTableGroupResponse, error)
	RemoveAclTableGroup(ctx context.Context, in *RemoveAclTableGroupRequest, opts ...grpc.CallOption) (*RemoveAclTableGroupResponse, error)
	GetAclTableGroupAttribute(ctx context.Context, in *GetAclTableGroupAttributeRequest, opts ...grpc.CallOption) (*GetAclTableGroupAttributeResponse, error)
	CreateAclTableGroupMember(ctx context.Context, in *CreateAclTableGroupMemberRequest, opts ...grpc.CallOption) (*CreateAclTableGroupMemberResponse, error)
	RemoveAclTableGroupMember(ctx context.Context, in *RemoveAclTableGroupMemberRequest, opts ...grpc.CallOption) (*RemoveAclTableGroupMemberResponse, error)
	SetAclTableGroupMemberAttribute(ctx context.Context, in *SetAclTableGroupMemberAttributeRequest, opts ...grpc.CallOption) (*SetAclTableGroupMemberAttributeResponse, error)
	GetAclTableGroupMemberAttribute(ctx context.Context, in *GetAclTableGroupMemberAttributeRequest, opts ...grpc.CallOption) (*GetAclTableGroupMemberAttributeResponse, error)
	CreateAclTableChainGroup(ctx context.Context, in *CreateAclTableChainGroupRequest, opts ...grpc.CallOption) (*CreateAclTableChainGroupResponse, error)
	RemoveAclTableChainGroup(ctx context.Context, in *RemoveAclTableChainGroupRequest, opts ...grpc.CallOption) (*RemoveAclTableChainGroupResponse, error)
	GetAclTableChainGroupAttribute(ctx context.Context, in *GetAclTableChainGroupAttributeRequest, opts ...grpc.CallOption) (*GetAclTableChainGroupAttributeResponse, error)
}

type aclClient struct {
	cc grpc.ClientConnInterface
}

func NewAclClient(cc grpc.ClientConnInterface) AclClient {
	return &aclClient{cc}
}

func (c *aclClient) CreateAclTable(ctx context.Context, in *CreateAclTableRequest, opts ...grpc.CallOption) (*CreateAclTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAclTableResponse)
	err := c.cc.Invoke(ctx, Acl_CreateAclTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) RemoveAclTable(ctx context.Context, in *RemoveAclTableRequest, opts ...grpc.CallOption) (*RemoveAclTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAclTableResponse)
	err := c.cc.Invoke(ctx, Acl_RemoveAclTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) GetAclTableAttribute(ctx context.Context, in *GetAclTableAttributeRequest, opts ...grpc.CallOption) (*GetAclTableAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAclTableAttributeResponse)
	err := c.cc.Invoke(ctx, Acl_GetAclTableAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) CreateAclEntry(ctx context.Context, in *CreateAclEntryRequest, opts ...grpc.CallOption) (*CreateAclEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAclEntryResponse)
	err := c.cc.Invoke(ctx, Acl_CreateAclEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) RemoveAclEntry(ctx context.Context, in *RemoveAclEntryRequest, opts ...grpc.CallOption) (*RemoveAclEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAclEntryResponse)
	err := c.cc.Invoke(ctx, Acl_RemoveAclEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) SetAclEntryAttribute(ctx context.Context, in *SetAclEntryAttributeRequest, opts ...grpc.CallOption) (*SetAclEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAclEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Acl_SetAclEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) GetAclEntryAttribute(ctx context.Context, in *GetAclEntryAttributeRequest, opts ...grpc.CallOption) (*GetAclEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAclEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Acl_GetAclEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) CreateAclCounter(ctx context.Context, in *CreateAclCounterRequest, opts ...grpc.CallOption) (*CreateAclCounterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAclCounterResponse)
	err := c.cc.Invoke(ctx, Acl_CreateAclCounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) RemoveAclCounter(ctx context.Context, in *RemoveAclCounterRequest, opts ...grpc.CallOption) (*RemoveAclCounterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAclCounterResponse)
	err := c.cc.Invoke(ctx, Acl_RemoveAclCounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) SetAclCounterAttribute(ctx context.Context, in *SetAclCounterAttributeRequest, opts ...grpc.CallOption) (*SetAclCounterAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAclCounterAttributeResponse)
	err := c.cc.Invoke(ctx, Acl_SetAclCounterAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) GetAclCounterAttribute(ctx context.Context, in *GetAclCounterAttributeRequest, opts ...grpc.CallOption) (*GetAclCounterAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAclCounterAttributeResponse)
	err := c.cc.Invoke(ctx, Acl_GetAclCounterAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) CreateAclRange(ctx context.Context, in *CreateAclRangeRequest, opts ...grpc.CallOption) (*CreateAclRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAclRangeResponse)
	err := c.cc.Invoke(ctx, Acl_CreateAclRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) RemoveAclRange(ctx context.Context, in *RemoveAclRangeRequest, opts ...grpc.CallOption) (*RemoveAclRangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAclRangeResponse)
	err := c.cc.Invoke(ctx, Acl_RemoveAclRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) GetAclRangeAttribute(ctx context.Context, in *GetAclRangeAttributeRequest, opts ...grpc.CallOption) (*GetAclRangeAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAclRangeAttributeResponse)
	err := c.cc.Invoke(ctx, Acl_GetAclRangeAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) CreateAclTableGroup(ctx context.Context, in *CreateAclTableGroupRequest, opts ...grpc.CallOption) (*CreateAclTableGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAclTableGroupResponse)
	err := c.cc.Invoke(ctx, Acl_CreateAclTableGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) RemoveAclTableGroup(ctx context.Context, in *RemoveAclTableGroupRequest, opts ...grpc.CallOption) (*RemoveAclTableGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAclTableGroupResponse)
	err := c.cc.Invoke(ctx, Acl_RemoveAclTableGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) GetAclTableGroupAttribute(ctx context.Context, in *GetAclTableGroupAttributeRequest, opts ...grpc.CallOption) (*GetAclTableGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAclTableGroupAttributeResponse)
	err := c.cc.Invoke(ctx, Acl_GetAclTableGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) CreateAclTableGroupMember(ctx context.Context, in *CreateAclTableGroupMemberRequest, opts ...grpc.CallOption) (*CreateAclTableGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAclTableGroupMemberResponse)
	err := c.cc.Invoke(ctx, Acl_CreateAclTableGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) RemoveAclTableGroupMember(ctx context.Context, in *RemoveAclTableGroupMemberRequest, opts ...grpc.CallOption) (*RemoveAclTableGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAclTableGroupMemberResponse)
	err := c.cc.Invoke(ctx, Acl_RemoveAclTableGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) SetAclTableGroupMemberAttribute(ctx context.Context, in *SetAclTableGroupMemberAttributeRequest, opts ...grpc.CallOption) (*SetAclTableGroupMemberAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAclTableGroupMemberAttributeResponse)
	err := c.cc.Invoke(ctx, Acl_SetAclTableGroupMemberAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) GetAclTableGroupMemberAttribute(ctx context.Context, in *GetAclTableGroupMemberAttributeRequest, opts ...grpc.CallOption) (*GetAclTableGroupMemberAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAclTableGroupMemberAttributeResponse)
	err := c.cc.Invoke(ctx, Acl_GetAclTableGroupMemberAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) CreateAclTableChainGroup(ctx context.Context, in *CreateAclTableChainGroupRequest, opts ...grpc.CallOption) (*CreateAclTableChainGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAclTableChainGroupResponse)
	err := c.cc.Invoke(ctx, Acl_CreateAclTableChainGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) RemoveAclTableChainGroup(ctx context.Context, in *RemoveAclTableChainGroupRequest, opts ...grpc.CallOption) (*RemoveAclTableChainGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAclTableChainGroupResponse)
	err := c.cc.Invoke(ctx, Acl_RemoveAclTableChainGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclClient) GetAclTableChainGroupAttribute(ctx context.Context, in *GetAclTableChainGroupAttributeRequest, opts ...grpc.CallOption) (*GetAclTableChainGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAclTableChainGroupAttributeResponse)
	err := c.cc.Invoke(ctx, Acl_GetAclTableChainGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AclServer is the server API for Acl service.
// All implementations should embed UnimplementedAclServer
// for forward compatibility.
type AclServer interface {
	CreateAclTable(context.Context, *CreateAclTableRequest) (*CreateAclTableResponse, error)
	RemoveAclTable(context.Context, *RemoveAclTableRequest) (*RemoveAclTableResponse, error)
	GetAclTableAttribute(context.Context, *GetAclTableAttributeRequest) (*GetAclTableAttributeResponse, error)
	CreateAclEntry(context.Context, *CreateAclEntryRequest) (*CreateAclEntryResponse, error)
	RemoveAclEntry(context.Context, *RemoveAclEntryRequest) (*RemoveAclEntryResponse, error)
	SetAclEntryAttribute(context.Context, *SetAclEntryAttributeRequest) (*SetAclEntryAttributeResponse, error)
	GetAclEntryAttribute(context.Context, *GetAclEntryAttributeRequest) (*GetAclEntryAttributeResponse, error)
	CreateAclCounter(context.Context, *CreateAclCounterRequest) (*CreateAclCounterResponse, error)
	RemoveAclCounter(context.Context, *RemoveAclCounterRequest) (*RemoveAclCounterResponse, error)
	SetAclCounterAttribute(context.Context, *SetAclCounterAttributeRequest) (*SetAclCounterAttributeResponse, error)
	GetAclCounterAttribute(context.Context, *GetAclCounterAttributeRequest) (*GetAclCounterAttributeResponse, error)
	CreateAclRange(context.Context, *CreateAclRangeRequest) (*CreateAclRangeResponse, error)
	RemoveAclRange(context.Context, *RemoveAclRangeRequest) (*RemoveAclRangeResponse, error)
	GetAclRangeAttribute(context.Context, *GetAclRangeAttributeRequest) (*GetAclRangeAttributeResponse, error)
	CreateAclTableGroup(context.Context, *CreateAclTableGroupRequest) (*CreateAclTableGroupResponse, error)
	RemoveAclTableGroup(context.Context, *RemoveAclTableGroupRequest) (*RemoveAclTableGroupResponse, error)
	GetAclTableGroupAttribute(context.Context, *GetAclTableGroupAttributeRequest) (*GetAclTableGroupAttributeResponse, error)
	CreateAclTableGroupMember(context.Context, *CreateAclTableGroupMemberRequest) (*CreateAclTableGroupMemberResponse, error)
	RemoveAclTableGroupMember(context.Context, *RemoveAclTableGroupMemberRequest) (*RemoveAclTableGroupMemberResponse, error)
	SetAclTableGroupMemberAttribute(context.Context, *SetAclTableGroupMemberAttributeRequest) (*SetAclTableGroupMemberAttributeResponse, error)
	GetAclTableGroupMemberAttribute(context.Context, *GetAclTableGroupMemberAttributeRequest) (*GetAclTableGroupMemberAttributeResponse, error)
	CreateAclTableChainGroup(context.Context, *CreateAclTableChainGroupRequest) (*CreateAclTableChainGroupResponse, error)
	RemoveAclTableChainGroup(context.Context, *RemoveAclTableChainGroupRequest) (*RemoveAclTableChainGroupResponse, error)
	GetAclTableChainGroupAttribute(context.Context, *GetAclTableChainGroupAttributeRequest) (*GetAclTableChainGroupAttributeResponse, error)
}

// UnimplementedAclServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAclServer struct{}

func (UnimplementedAclServer) CreateAclTable(context.Context, *CreateAclTableRequest) (*CreateAclTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAclTable not implemented")
}
func (UnimplementedAclServer) RemoveAclTable(context.Context, *RemoveAclTableRequest) (*RemoveAclTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAclTable not implemented")
}
func (UnimplementedAclServer) GetAclTableAttribute(context.Context, *GetAclTableAttributeRequest) (*GetAclTableAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAclTableAttribute not implemented")
}
func (UnimplementedAclServer) CreateAclEntry(context.Context, *CreateAclEntryRequest) (*CreateAclEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAclEntry not implemented")
}
func (UnimplementedAclServer) RemoveAclEntry(context.Context, *RemoveAclEntryRequest) (*RemoveAclEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAclEntry not implemented")
}
func (UnimplementedAclServer) SetAclEntryAttribute(context.Context, *SetAclEntryAttributeRequest) (*SetAclEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAclEntryAttribute not implemented")
}
func (UnimplementedAclServer) GetAclEntryAttribute(context.Context, *GetAclEntryAttributeRequest) (*GetAclEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAclEntryAttribute not implemented")
}
func (UnimplementedAclServer) CreateAclCounter(context.Context, *CreateAclCounterRequest) (*CreateAclCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAclCounter not implemented")
}
func (UnimplementedAclServer) RemoveAclCounter(context.Context, *RemoveAclCounterRequest) (*RemoveAclCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAclCounter not implemented")
}
func (UnimplementedAclServer) SetAclCounterAttribute(context.Context, *SetAclCounterAttributeRequest) (*SetAclCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAclCounterAttribute not implemented")
}
func (UnimplementedAclServer) GetAclCounterAttribute(context.Context, *GetAclCounterAttributeRequest) (*GetAclCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAclCounterAttribute not implemented")
}
func (UnimplementedAclServer) CreateAclRange(context.Context, *CreateAclRangeRequest) (*CreateAclRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAclRange not implemented")
}
func (UnimplementedAclServer) RemoveAclRange(context.Context, *RemoveAclRangeRequest) (*RemoveAclRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAclRange not implemented")
}
func (UnimplementedAclServer) GetAclRangeAttribute(context.Context, *GetAclRangeAttributeRequest) (*GetAclRangeAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAclRangeAttribute not implemented")
}
func (UnimplementedAclServer) CreateAclTableGroup(context.Context, *CreateAclTableGroupRequest) (*CreateAclTableGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAclTableGroup not implemented")
}
func (UnimplementedAclServer) RemoveAclTableGroup(context.Context, *RemoveAclTableGroupRequest) (*RemoveAclTableGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAclTableGroup not implemented")
}
func (UnimplementedAclServer) GetAclTableGroupAttribute(context.Context, *GetAclTableGroupAttributeRequest) (*GetAclTableGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAclTableGroupAttribute not implemented")
}
func (UnimplementedAclServer) CreateAclTableGroupMember(context.Context, *CreateAclTableGroupMemberRequest) (*CreateAclTableGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAclTableGroupMember not implemented")
}
func (UnimplementedAclServer) RemoveAclTableGroupMember(context.Context, *RemoveAclTableGroupMemberRequest) (*RemoveAclTableGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAclTableGroupMember not implemented")
}
func (UnimplementedAclServer) SetAclTableGroupMemberAttribute(context.Context, *SetAclTableGroupMemberAttributeRequest) (*SetAclTableGroupMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAclTableGroupMemberAttribute not implemented")
}
func (UnimplementedAclServer) GetAclTableGroupMemberAttribute(context.Context, *GetAclTableGroupMemberAttributeRequest) (*GetAclTableGroupMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAclTableGroupMemberAttribute not implemented")
}
func (UnimplementedAclServer) CreateAclTableChainGroup(context.Context, *CreateAclTableChainGroupRequest) (*CreateAclTableChainGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAclTableChainGroup not implemented")
}
func (UnimplementedAclServer) RemoveAclTableChainGroup(context.Context, *RemoveAclTableChainGroupRequest) (*RemoveAclTableChainGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAclTableChainGroup not implemented")
}
func (UnimplementedAclServer) GetAclTableChainGroupAttribute(context.Context, *GetAclTableChainGroupAttributeRequest) (*GetAclTableChainGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAclTableChainGroupAttribute not implemented")
}
func (UnimplementedAclServer) testEmbeddedByValue() {}

// UnsafeAclServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AclServer will
// result in compilation errors.
type UnsafeAclServer interface {
	mustEmbedUnimplementedAclServer()
}

func RegisterAclServer(s grpc.ServiceRegistrar, srv AclServer) {
	// If the following call pancis, it indicates UnimplementedAclServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Acl_ServiceDesc, srv)
}

func _Acl_CreateAclTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAclTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).CreateAclTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_CreateAclTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).CreateAclTable(ctx, req.(*CreateAclTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_RemoveAclTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAclTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).RemoveAclTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_RemoveAclTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).RemoveAclTable(ctx, req.(*RemoveAclTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_GetAclTableAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAclTableAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).GetAclTableAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_GetAclTableAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).GetAclTableAttribute(ctx, req.(*GetAclTableAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_CreateAclEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAclEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).CreateAclEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_CreateAclEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).CreateAclEntry(ctx, req.(*CreateAclEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_RemoveAclEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAclEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).RemoveAclEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_RemoveAclEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).RemoveAclEntry(ctx, req.(*RemoveAclEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_SetAclEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAclEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).SetAclEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_SetAclEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).SetAclEntryAttribute(ctx, req.(*SetAclEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_GetAclEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAclEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).GetAclEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_GetAclEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).GetAclEntryAttribute(ctx, req.(*GetAclEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_CreateAclCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAclCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).CreateAclCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_CreateAclCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).CreateAclCounter(ctx, req.(*CreateAclCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_RemoveAclCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAclCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).RemoveAclCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_RemoveAclCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).RemoveAclCounter(ctx, req.(*RemoveAclCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_SetAclCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAclCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).SetAclCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_SetAclCounterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).SetAclCounterAttribute(ctx, req.(*SetAclCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_GetAclCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAclCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).GetAclCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_GetAclCounterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).GetAclCounterAttribute(ctx, req.(*GetAclCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_CreateAclRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAclRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).CreateAclRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_CreateAclRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).CreateAclRange(ctx, req.(*CreateAclRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_RemoveAclRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAclRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).RemoveAclRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_RemoveAclRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).RemoveAclRange(ctx, req.(*RemoveAclRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_GetAclRangeAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAclRangeAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).GetAclRangeAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_GetAclRangeAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).GetAclRangeAttribute(ctx, req.(*GetAclRangeAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_CreateAclTableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAclTableGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).CreateAclTableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_CreateAclTableGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).CreateAclTableGroup(ctx, req.(*CreateAclTableGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_RemoveAclTableGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAclTableGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).RemoveAclTableGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_RemoveAclTableGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).RemoveAclTableGroup(ctx, req.(*RemoveAclTableGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_GetAclTableGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAclTableGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).GetAclTableGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_GetAclTableGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).GetAclTableGroupAttribute(ctx, req.(*GetAclTableGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_CreateAclTableGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAclTableGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).CreateAclTableGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_CreateAclTableGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).CreateAclTableGroupMember(ctx, req.(*CreateAclTableGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_RemoveAclTableGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAclTableGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).RemoveAclTableGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_RemoveAclTableGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).RemoveAclTableGroupMember(ctx, req.(*RemoveAclTableGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_SetAclTableGroupMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAclTableGroupMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).SetAclTableGroupMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_SetAclTableGroupMemberAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).SetAclTableGroupMemberAttribute(ctx, req.(*SetAclTableGroupMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_GetAclTableGroupMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAclTableGroupMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).GetAclTableGroupMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_GetAclTableGroupMemberAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).GetAclTableGroupMemberAttribute(ctx, req.(*GetAclTableGroupMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_CreateAclTableChainGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAclTableChainGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).CreateAclTableChainGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_CreateAclTableChainGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).CreateAclTableChainGroup(ctx, req.(*CreateAclTableChainGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_RemoveAclTableChainGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAclTableChainGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).RemoveAclTableChainGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_RemoveAclTableChainGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).RemoveAclTableChainGroup(ctx, req.(*RemoveAclTableChainGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acl_GetAclTableChainGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAclTableChainGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AclServer).GetAclTableChainGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Acl_GetAclTableChainGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AclServer).GetAclTableChainGroupAttribute(ctx, req.(*GetAclTableChainGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Acl_ServiceDesc is the grpc.ServiceDesc for Acl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Acl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Acl",
	HandlerType: (*AclServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAclTable",
			Handler:    _Acl_CreateAclTable_Handler,
		},
		{
			MethodName: "RemoveAclTable",
			Handler:    _Acl_RemoveAclTable_Handler,
		},
		{
			MethodName: "GetAclTableAttribute",
			Handler:    _Acl_GetAclTableAttribute_Handler,
		},
		{
			MethodName: "CreateAclEntry",
			Handler:    _Acl_CreateAclEntry_Handler,
		},
		{
			MethodName: "RemoveAclEntry",
			Handler:    _Acl_RemoveAclEntry_Handler,
		},
		{
			MethodName: "SetAclEntryAttribute",
			Handler:    _Acl_SetAclEntryAttribute_Handler,
		},
		{
			MethodName: "GetAclEntryAttribute",
			Handler:    _Acl_GetAclEntryAttribute_Handler,
		},
		{
			MethodName: "CreateAclCounter",
			Handler:    _Acl_CreateAclCounter_Handler,
		},
		{
			MethodName: "RemoveAclCounter",
			Handler:    _Acl_RemoveAclCounter_Handler,
		},
		{
			MethodName: "SetAclCounterAttribute",
			Handler:    _Acl_SetAclCounterAttribute_Handler,
		},
		{
			MethodName: "GetAclCounterAttribute",
			Handler:    _Acl_GetAclCounterAttribute_Handler,
		},
		{
			MethodName: "CreateAclRange",
			Handler:    _Acl_CreateAclRange_Handler,
		},
		{
			MethodName: "RemoveAclRange",
			Handler:    _Acl_RemoveAclRange_Handler,
		},
		{
			MethodName: "GetAclRangeAttribute",
			Handler:    _Acl_GetAclRangeAttribute_Handler,
		},
		{
			MethodName: "CreateAclTableGroup",
			Handler:    _Acl_CreateAclTableGroup_Handler,
		},
		{
			MethodName: "RemoveAclTableGroup",
			Handler:    _Acl_RemoveAclTableGroup_Handler,
		},
		{
			MethodName: "GetAclTableGroupAttribute",
			Handler:    _Acl_GetAclTableGroupAttribute_Handler,
		},
		{
			MethodName: "CreateAclTableGroupMember",
			Handler:    _Acl_CreateAclTableGroupMember_Handler,
		},
		{
			MethodName: "RemoveAclTableGroupMember",
			Handler:    _Acl_RemoveAclTableGroupMember_Handler,
		},
		{
			MethodName: "SetAclTableGroupMemberAttribute",
			Handler:    _Acl_SetAclTableGroupMemberAttribute_Handler,
		},
		{
			MethodName: "GetAclTableGroupMemberAttribute",
			Handler:    _Acl_GetAclTableGroupMemberAttribute_Handler,
		},
		{
			MethodName: "CreateAclTableChainGroup",
			Handler:    _Acl_CreateAclTableChainGroup_Handler,
		},
		{
			MethodName: "RemoveAclTableChainGroup",
			Handler:    _Acl_RemoveAclTableChainGroup_Handler,
		},
		{
			MethodName: "GetAclTableChainGroupAttribute",
			Handler:    _Acl_GetAclTableChainGroupAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/acl.proto",
}
