// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: dataplane/proto/sai/dtel.proto

package sai

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DtelAttr int32

const (
	DtelAttr_DTEL_ATTR_UNSPECIFIED            DtelAttr = 0
	DtelAttr_DTEL_ATTR_INT_ENDPOINT_ENABLE    DtelAttr = 1
	DtelAttr_DTEL_ATTR_INT_TRANSIT_ENABLE     DtelAttr = 2
	DtelAttr_DTEL_ATTR_POSTCARD_ENABLE        DtelAttr = 3
	DtelAttr_DTEL_ATTR_DROP_REPORT_ENABLE     DtelAttr = 4
	DtelAttr_DTEL_ATTR_QUEUE_REPORT_ENABLE    DtelAttr = 5
	DtelAttr_DTEL_ATTR_SWITCH_ID              DtelAttr = 6
	DtelAttr_DTEL_ATTR_FLOW_STATE_CLEAR_CYCLE DtelAttr = 7
	DtelAttr_DTEL_ATTR_LATENCY_SENSITIVITY    DtelAttr = 8
	DtelAttr_DTEL_ATTR_SINK_PORT_LIST         DtelAttr = 9
	DtelAttr_DTEL_ATTR_INT_L4_DSCP            DtelAttr = 10
)

// Enum value maps for DtelAttr.
var (
	DtelAttr_name = map[int32]string{
		0:  "DTEL_ATTR_UNSPECIFIED",
		1:  "DTEL_ATTR_INT_ENDPOINT_ENABLE",
		2:  "DTEL_ATTR_INT_TRANSIT_ENABLE",
		3:  "DTEL_ATTR_POSTCARD_ENABLE",
		4:  "DTEL_ATTR_DROP_REPORT_ENABLE",
		5:  "DTEL_ATTR_QUEUE_REPORT_ENABLE",
		6:  "DTEL_ATTR_SWITCH_ID",
		7:  "DTEL_ATTR_FLOW_STATE_CLEAR_CYCLE",
		8:  "DTEL_ATTR_LATENCY_SENSITIVITY",
		9:  "DTEL_ATTR_SINK_PORT_LIST",
		10: "DTEL_ATTR_INT_L4_DSCP",
	}
	DtelAttr_value = map[string]int32{
		"DTEL_ATTR_UNSPECIFIED":            0,
		"DTEL_ATTR_INT_ENDPOINT_ENABLE":    1,
		"DTEL_ATTR_INT_TRANSIT_ENABLE":     2,
		"DTEL_ATTR_POSTCARD_ENABLE":        3,
		"DTEL_ATTR_DROP_REPORT_ENABLE":     4,
		"DTEL_ATTR_QUEUE_REPORT_ENABLE":    5,
		"DTEL_ATTR_SWITCH_ID":              6,
		"DTEL_ATTR_FLOW_STATE_CLEAR_CYCLE": 7,
		"DTEL_ATTR_LATENCY_SENSITIVITY":    8,
		"DTEL_ATTR_SINK_PORT_LIST":         9,
		"DTEL_ATTR_INT_L4_DSCP":            10,
	}
)

func (x DtelAttr) Enum() *DtelAttr {
	p := new(DtelAttr)
	*p = x
	return p
}

func (x DtelAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DtelAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_dtel_proto_enumTypes[0].Descriptor()
}

func (DtelAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_dtel_proto_enumTypes[0]
}

func (x DtelAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DtelAttr.Descriptor instead.
func (DtelAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{0}
}

type DtelQueueReportAttr int32

const (
	DtelQueueReportAttr_DTEL_QUEUE_REPORT_ATTR_UNSPECIFIED       DtelQueueReportAttr = 0
	DtelQueueReportAttr_DTEL_QUEUE_REPORT_ATTR_QUEUE_ID          DtelQueueReportAttr = 1
	DtelQueueReportAttr_DTEL_QUEUE_REPORT_ATTR_DEPTH_THRESHOLD   DtelQueueReportAttr = 2
	DtelQueueReportAttr_DTEL_QUEUE_REPORT_ATTR_LATENCY_THRESHOLD DtelQueueReportAttr = 3
	DtelQueueReportAttr_DTEL_QUEUE_REPORT_ATTR_BREACH_QUOTA      DtelQueueReportAttr = 4
	DtelQueueReportAttr_DTEL_QUEUE_REPORT_ATTR_TAIL_DROP         DtelQueueReportAttr = 5
)

// Enum value maps for DtelQueueReportAttr.
var (
	DtelQueueReportAttr_name = map[int32]string{
		0: "DTEL_QUEUE_REPORT_ATTR_UNSPECIFIED",
		1: "DTEL_QUEUE_REPORT_ATTR_QUEUE_ID",
		2: "DTEL_QUEUE_REPORT_ATTR_DEPTH_THRESHOLD",
		3: "DTEL_QUEUE_REPORT_ATTR_LATENCY_THRESHOLD",
		4: "DTEL_QUEUE_REPORT_ATTR_BREACH_QUOTA",
		5: "DTEL_QUEUE_REPORT_ATTR_TAIL_DROP",
	}
	DtelQueueReportAttr_value = map[string]int32{
		"DTEL_QUEUE_REPORT_ATTR_UNSPECIFIED":       0,
		"DTEL_QUEUE_REPORT_ATTR_QUEUE_ID":          1,
		"DTEL_QUEUE_REPORT_ATTR_DEPTH_THRESHOLD":   2,
		"DTEL_QUEUE_REPORT_ATTR_LATENCY_THRESHOLD": 3,
		"DTEL_QUEUE_REPORT_ATTR_BREACH_QUOTA":      4,
		"DTEL_QUEUE_REPORT_ATTR_TAIL_DROP":         5,
	}
)

func (x DtelQueueReportAttr) Enum() *DtelQueueReportAttr {
	p := new(DtelQueueReportAttr)
	*p = x
	return p
}

func (x DtelQueueReportAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DtelQueueReportAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_dtel_proto_enumTypes[1].Descriptor()
}

func (DtelQueueReportAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_dtel_proto_enumTypes[1]
}

func (x DtelQueueReportAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DtelQueueReportAttr.Descriptor instead.
func (DtelQueueReportAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{1}
}

type DtelIntSessionAttr int32

const (
	DtelIntSessionAttr_DTEL_INT_SESSION_ATTR_UNSPECIFIED               DtelIntSessionAttr = 0
	DtelIntSessionAttr_DTEL_INT_SESSION_ATTR_MAX_HOP_COUNT             DtelIntSessionAttr = 1
	DtelIntSessionAttr_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_ID         DtelIntSessionAttr = 2
	DtelIntSessionAttr_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_PORTS      DtelIntSessionAttr = 3
	DtelIntSessionAttr_DTEL_INT_SESSION_ATTR_COLLECT_INGRESS_TIMESTAMP DtelIntSessionAttr = 4
	DtelIntSessionAttr_DTEL_INT_SESSION_ATTR_COLLECT_EGRESS_TIMESTAMP  DtelIntSessionAttr = 5
	DtelIntSessionAttr_DTEL_INT_SESSION_ATTR_COLLECT_QUEUE_INFO        DtelIntSessionAttr = 6
)

// Enum value maps for DtelIntSessionAttr.
var (
	DtelIntSessionAttr_name = map[int32]string{
		0: "DTEL_INT_SESSION_ATTR_UNSPECIFIED",
		1: "DTEL_INT_SESSION_ATTR_MAX_HOP_COUNT",
		2: "DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_ID",
		3: "DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_PORTS",
		4: "DTEL_INT_SESSION_ATTR_COLLECT_INGRESS_TIMESTAMP",
		5: "DTEL_INT_SESSION_ATTR_COLLECT_EGRESS_TIMESTAMP",
		6: "DTEL_INT_SESSION_ATTR_COLLECT_QUEUE_INFO",
	}
	DtelIntSessionAttr_value = map[string]int32{
		"DTEL_INT_SESSION_ATTR_UNSPECIFIED":               0,
		"DTEL_INT_SESSION_ATTR_MAX_HOP_COUNT":             1,
		"DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_ID":         2,
		"DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_PORTS":      3,
		"DTEL_INT_SESSION_ATTR_COLLECT_INGRESS_TIMESTAMP": 4,
		"DTEL_INT_SESSION_ATTR_COLLECT_EGRESS_TIMESTAMP":  5,
		"DTEL_INT_SESSION_ATTR_COLLECT_QUEUE_INFO":        6,
	}
)

func (x DtelIntSessionAttr) Enum() *DtelIntSessionAttr {
	p := new(DtelIntSessionAttr)
	*p = x
	return p
}

func (x DtelIntSessionAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DtelIntSessionAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_dtel_proto_enumTypes[2].Descriptor()
}

func (DtelIntSessionAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_dtel_proto_enumTypes[2]
}

func (x DtelIntSessionAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DtelIntSessionAttr.Descriptor instead.
func (DtelIntSessionAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{2}
}

type DtelReportSessionAttr int32

const (
	DtelReportSessionAttr_DTEL_REPORT_SESSION_ATTR_UNSPECIFIED       DtelReportSessionAttr = 0
	DtelReportSessionAttr_DTEL_REPORT_SESSION_ATTR_SRC_IP            DtelReportSessionAttr = 1
	DtelReportSessionAttr_DTEL_REPORT_SESSION_ATTR_DST_IP_LIST       DtelReportSessionAttr = 2
	DtelReportSessionAttr_DTEL_REPORT_SESSION_ATTR_VIRTUAL_ROUTER_ID DtelReportSessionAttr = 3
	DtelReportSessionAttr_DTEL_REPORT_SESSION_ATTR_TRUNCATE_SIZE     DtelReportSessionAttr = 4
	DtelReportSessionAttr_DTEL_REPORT_SESSION_ATTR_UDP_DST_PORT      DtelReportSessionAttr = 5
)

// Enum value maps for DtelReportSessionAttr.
var (
	DtelReportSessionAttr_name = map[int32]string{
		0: "DTEL_REPORT_SESSION_ATTR_UNSPECIFIED",
		1: "DTEL_REPORT_SESSION_ATTR_SRC_IP",
		2: "DTEL_REPORT_SESSION_ATTR_DST_IP_LIST",
		3: "DTEL_REPORT_SESSION_ATTR_VIRTUAL_ROUTER_ID",
		4: "DTEL_REPORT_SESSION_ATTR_TRUNCATE_SIZE",
		5: "DTEL_REPORT_SESSION_ATTR_UDP_DST_PORT",
	}
	DtelReportSessionAttr_value = map[string]int32{
		"DTEL_REPORT_SESSION_ATTR_UNSPECIFIED":       0,
		"DTEL_REPORT_SESSION_ATTR_SRC_IP":            1,
		"DTEL_REPORT_SESSION_ATTR_DST_IP_LIST":       2,
		"DTEL_REPORT_SESSION_ATTR_VIRTUAL_ROUTER_ID": 3,
		"DTEL_REPORT_SESSION_ATTR_TRUNCATE_SIZE":     4,
		"DTEL_REPORT_SESSION_ATTR_UDP_DST_PORT":      5,
	}
)

func (x DtelReportSessionAttr) Enum() *DtelReportSessionAttr {
	p := new(DtelReportSessionAttr)
	*p = x
	return p
}

func (x DtelReportSessionAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DtelReportSessionAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_dtel_proto_enumTypes[3].Descriptor()
}

func (DtelReportSessionAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_dtel_proto_enumTypes[3]
}

func (x DtelReportSessionAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DtelReportSessionAttr.Descriptor instead.
func (DtelReportSessionAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{3}
}

type DtelEventAttr int32

const (
	DtelEventAttr_DTEL_EVENT_ATTR_UNSPECIFIED    DtelEventAttr = 0
	DtelEventAttr_DTEL_EVENT_ATTR_TYPE           DtelEventAttr = 1
	DtelEventAttr_DTEL_EVENT_ATTR_REPORT_SESSION DtelEventAttr = 2
	DtelEventAttr_DTEL_EVENT_ATTR_DSCP_VALUE     DtelEventAttr = 3
)

// Enum value maps for DtelEventAttr.
var (
	DtelEventAttr_name = map[int32]string{
		0: "DTEL_EVENT_ATTR_UNSPECIFIED",
		1: "DTEL_EVENT_ATTR_TYPE",
		2: "DTEL_EVENT_ATTR_REPORT_SESSION",
		3: "DTEL_EVENT_ATTR_DSCP_VALUE",
	}
	DtelEventAttr_value = map[string]int32{
		"DTEL_EVENT_ATTR_UNSPECIFIED":    0,
		"DTEL_EVENT_ATTR_TYPE":           1,
		"DTEL_EVENT_ATTR_REPORT_SESSION": 2,
		"DTEL_EVENT_ATTR_DSCP_VALUE":     3,
	}
)

func (x DtelEventAttr) Enum() *DtelEventAttr {
	p := new(DtelEventAttr)
	*p = x
	return p
}

func (x DtelEventAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DtelEventAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_dtel_proto_enumTypes[4].Descriptor()
}

func (DtelEventAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_dtel_proto_enumTypes[4]
}

func (x DtelEventAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DtelEventAttr.Descriptor instead.
func (DtelEventAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{4}
}

type CreateDtelRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Switch              uint64                 `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	IntEndpointEnable   *bool                  `protobuf:"varint,2,opt,name=int_endpoint_enable,json=intEndpointEnable,proto3,oneof" json:"int_endpoint_enable,omitempty"`
	IntTransitEnable    *bool                  `protobuf:"varint,3,opt,name=int_transit_enable,json=intTransitEnable,proto3,oneof" json:"int_transit_enable,omitempty"`
	PostcardEnable      *bool                  `protobuf:"varint,4,opt,name=postcard_enable,json=postcardEnable,proto3,oneof" json:"postcard_enable,omitempty"`
	DropReportEnable    *bool                  `protobuf:"varint,5,opt,name=drop_report_enable,json=dropReportEnable,proto3,oneof" json:"drop_report_enable,omitempty"`
	QueueReportEnable   *bool                  `protobuf:"varint,6,opt,name=queue_report_enable,json=queueReportEnable,proto3,oneof" json:"queue_report_enable,omitempty"`
	SwitchId            *uint32                `protobuf:"varint,7,opt,name=switch_id,json=switchId,proto3,oneof" json:"switch_id,omitempty"`
	FlowStateClearCycle *uint32                `protobuf:"varint,8,opt,name=flow_state_clear_cycle,json=flowStateClearCycle,proto3,oneof" json:"flow_state_clear_cycle,omitempty"`
	LatencySensitivity  *uint32                `protobuf:"varint,9,opt,name=latency_sensitivity,json=latencySensitivity,proto3,oneof" json:"latency_sensitivity,omitempty"`
	SinkPortList        []uint64               `protobuf:"varint,10,rep,packed,name=sink_port_list,json=sinkPortList,proto3" json:"sink_port_list,omitempty"`
	IntL4Dscp           *AclFieldData          `protobuf:"bytes,11,opt,name=int_l4_dscp,json=intL4Dscp,proto3,oneof" json:"int_l4_dscp,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CreateDtelRequest) Reset() {
	*x = CreateDtelRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDtelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDtelRequest) ProtoMessage() {}

func (x *CreateDtelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDtelRequest.ProtoReflect.Descriptor instead.
func (*CreateDtelRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDtelRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateDtelRequest) GetIntEndpointEnable() bool {
	if x != nil && x.IntEndpointEnable != nil {
		return *x.IntEndpointEnable
	}
	return false
}

func (x *CreateDtelRequest) GetIntTransitEnable() bool {
	if x != nil && x.IntTransitEnable != nil {
		return *x.IntTransitEnable
	}
	return false
}

func (x *CreateDtelRequest) GetPostcardEnable() bool {
	if x != nil && x.PostcardEnable != nil {
		return *x.PostcardEnable
	}
	return false
}

func (x *CreateDtelRequest) GetDropReportEnable() bool {
	if x != nil && x.DropReportEnable != nil {
		return *x.DropReportEnable
	}
	return false
}

func (x *CreateDtelRequest) GetQueueReportEnable() bool {
	if x != nil && x.QueueReportEnable != nil {
		return *x.QueueReportEnable
	}
	return false
}

func (x *CreateDtelRequest) GetSwitchId() uint32 {
	if x != nil && x.SwitchId != nil {
		return *x.SwitchId
	}
	return 0
}

func (x *CreateDtelRequest) GetFlowStateClearCycle() uint32 {
	if x != nil && x.FlowStateClearCycle != nil {
		return *x.FlowStateClearCycle
	}
	return 0
}

func (x *CreateDtelRequest) GetLatencySensitivity() uint32 {
	if x != nil && x.LatencySensitivity != nil {
		return *x.LatencySensitivity
	}
	return 0
}

func (x *CreateDtelRequest) GetSinkPortList() []uint64 {
	if x != nil {
		return x.SinkPortList
	}
	return nil
}

func (x *CreateDtelRequest) GetIntL4Dscp() *AclFieldData {
	if x != nil {
		return x.IntL4Dscp
	}
	return nil
}

type CreateDtelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDtelResponse) Reset() {
	*x = CreateDtelResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDtelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDtelResponse) ProtoMessage() {}

func (x *CreateDtelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDtelResponse.ProtoReflect.Descriptor instead.
func (*CreateDtelResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDtelResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveDtelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDtelRequest) Reset() {
	*x = RemoveDtelRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDtelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDtelRequest) ProtoMessage() {}

func (x *RemoveDtelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDtelRequest.ProtoReflect.Descriptor instead.
func (*RemoveDtelRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveDtelRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveDtelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDtelResponse) Reset() {
	*x = RemoveDtelResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDtelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDtelResponse) ProtoMessage() {}

func (x *RemoveDtelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDtelResponse.ProtoReflect.Descriptor instead.
func (*RemoveDtelResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{3}
}

type SetDtelAttributeRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Oid                 uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	IntEndpointEnable   *bool                  `protobuf:"varint,2,opt,name=int_endpoint_enable,json=intEndpointEnable,proto3,oneof" json:"int_endpoint_enable,omitempty"`
	IntTransitEnable    *bool                  `protobuf:"varint,3,opt,name=int_transit_enable,json=intTransitEnable,proto3,oneof" json:"int_transit_enable,omitempty"`
	PostcardEnable      *bool                  `protobuf:"varint,4,opt,name=postcard_enable,json=postcardEnable,proto3,oneof" json:"postcard_enable,omitempty"`
	DropReportEnable    *bool                  `protobuf:"varint,5,opt,name=drop_report_enable,json=dropReportEnable,proto3,oneof" json:"drop_report_enable,omitempty"`
	QueueReportEnable   *bool                  `protobuf:"varint,6,opt,name=queue_report_enable,json=queueReportEnable,proto3,oneof" json:"queue_report_enable,omitempty"`
	SwitchId            *uint32                `protobuf:"varint,7,opt,name=switch_id,json=switchId,proto3,oneof" json:"switch_id,omitempty"`
	FlowStateClearCycle *uint32                `protobuf:"varint,8,opt,name=flow_state_clear_cycle,json=flowStateClearCycle,proto3,oneof" json:"flow_state_clear_cycle,omitempty"`
	LatencySensitivity  *uint32                `protobuf:"varint,9,opt,name=latency_sensitivity,json=latencySensitivity,proto3,oneof" json:"latency_sensitivity,omitempty"`
	SinkPortList        []uint64               `protobuf:"varint,10,rep,packed,name=sink_port_list,json=sinkPortList,proto3" json:"sink_port_list,omitempty"`
	IntL4Dscp           *AclFieldData          `protobuf:"bytes,11,opt,name=int_l4_dscp,json=intL4Dscp,proto3,oneof" json:"int_l4_dscp,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SetDtelAttributeRequest) Reset() {
	*x = SetDtelAttributeRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDtelAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDtelAttributeRequest) ProtoMessage() {}

func (x *SetDtelAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDtelAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetDtelAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{4}
}

func (x *SetDtelAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetDtelAttributeRequest) GetIntEndpointEnable() bool {
	if x != nil && x.IntEndpointEnable != nil {
		return *x.IntEndpointEnable
	}
	return false
}

func (x *SetDtelAttributeRequest) GetIntTransitEnable() bool {
	if x != nil && x.IntTransitEnable != nil {
		return *x.IntTransitEnable
	}
	return false
}

func (x *SetDtelAttributeRequest) GetPostcardEnable() bool {
	if x != nil && x.PostcardEnable != nil {
		return *x.PostcardEnable
	}
	return false
}

func (x *SetDtelAttributeRequest) GetDropReportEnable() bool {
	if x != nil && x.DropReportEnable != nil {
		return *x.DropReportEnable
	}
	return false
}

func (x *SetDtelAttributeRequest) GetQueueReportEnable() bool {
	if x != nil && x.QueueReportEnable != nil {
		return *x.QueueReportEnable
	}
	return false
}

func (x *SetDtelAttributeRequest) GetSwitchId() uint32 {
	if x != nil && x.SwitchId != nil {
		return *x.SwitchId
	}
	return 0
}

func (x *SetDtelAttributeRequest) GetFlowStateClearCycle() uint32 {
	if x != nil && x.FlowStateClearCycle != nil {
		return *x.FlowStateClearCycle
	}
	return 0
}

func (x *SetDtelAttributeRequest) GetLatencySensitivity() uint32 {
	if x != nil && x.LatencySensitivity != nil {
		return *x.LatencySensitivity
	}
	return 0
}

func (x *SetDtelAttributeRequest) GetSinkPortList() []uint64 {
	if x != nil {
		return x.SinkPortList
	}
	return nil
}

func (x *SetDtelAttributeRequest) GetIntL4Dscp() *AclFieldData {
	if x != nil {
		return x.IntL4Dscp
	}
	return nil
}

type SetDtelAttributeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDtelAttributeResponse) Reset() {
	*x = SetDtelAttributeResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDtelAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDtelAttributeResponse) ProtoMessage() {}

func (x *SetDtelAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDtelAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetDtelAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{5}
}

type GetDtelAttributeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType      []DtelAttr             `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.DtelAttr" json:"attr_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDtelAttributeRequest) Reset() {
	*x = GetDtelAttributeRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDtelAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDtelAttributeRequest) ProtoMessage() {}

func (x *GetDtelAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDtelAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetDtelAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{6}
}

func (x *GetDtelAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetDtelAttributeRequest) GetAttrType() []DtelAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetDtelAttributeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Attr          *DtelAttribute         `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDtelAttributeResponse) Reset() {
	*x = GetDtelAttributeResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDtelAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDtelAttributeResponse) ProtoMessage() {}

func (x *GetDtelAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDtelAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetDtelAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{7}
}

func (x *GetDtelAttributeResponse) GetAttr() *DtelAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateDtelQueueReportRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Switch           uint64                 `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	QueueId          *uint64                `protobuf:"varint,2,opt,name=queue_id,json=queueId,proto3,oneof" json:"queue_id,omitempty"`
	DepthThreshold   *uint32                `protobuf:"varint,3,opt,name=depth_threshold,json=depthThreshold,proto3,oneof" json:"depth_threshold,omitempty"`
	LatencyThreshold *uint32                `protobuf:"varint,4,opt,name=latency_threshold,json=latencyThreshold,proto3,oneof" json:"latency_threshold,omitempty"`
	BreachQuota      *uint32                `protobuf:"varint,5,opt,name=breach_quota,json=breachQuota,proto3,oneof" json:"breach_quota,omitempty"`
	TailDrop         *bool                  `protobuf:"varint,6,opt,name=tail_drop,json=tailDrop,proto3,oneof" json:"tail_drop,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateDtelQueueReportRequest) Reset() {
	*x = CreateDtelQueueReportRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDtelQueueReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDtelQueueReportRequest) ProtoMessage() {}

func (x *CreateDtelQueueReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDtelQueueReportRequest.ProtoReflect.Descriptor instead.
func (*CreateDtelQueueReportRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{8}
}

func (x *CreateDtelQueueReportRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateDtelQueueReportRequest) GetQueueId() uint64 {
	if x != nil && x.QueueId != nil {
		return *x.QueueId
	}
	return 0
}

func (x *CreateDtelQueueReportRequest) GetDepthThreshold() uint32 {
	if x != nil && x.DepthThreshold != nil {
		return *x.DepthThreshold
	}
	return 0
}

func (x *CreateDtelQueueReportRequest) GetLatencyThreshold() uint32 {
	if x != nil && x.LatencyThreshold != nil {
		return *x.LatencyThreshold
	}
	return 0
}

func (x *CreateDtelQueueReportRequest) GetBreachQuota() uint32 {
	if x != nil && x.BreachQuota != nil {
		return *x.BreachQuota
	}
	return 0
}

func (x *CreateDtelQueueReportRequest) GetTailDrop() bool {
	if x != nil && x.TailDrop != nil {
		return *x.TailDrop
	}
	return false
}

type CreateDtelQueueReportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDtelQueueReportResponse) Reset() {
	*x = CreateDtelQueueReportResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDtelQueueReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDtelQueueReportResponse) ProtoMessage() {}

func (x *CreateDtelQueueReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDtelQueueReportResponse.ProtoReflect.Descriptor instead.
func (*CreateDtelQueueReportResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{9}
}

func (x *CreateDtelQueueReportResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveDtelQueueReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDtelQueueReportRequest) Reset() {
	*x = RemoveDtelQueueReportRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDtelQueueReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDtelQueueReportRequest) ProtoMessage() {}

func (x *RemoveDtelQueueReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDtelQueueReportRequest.ProtoReflect.Descriptor instead.
func (*RemoveDtelQueueReportRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveDtelQueueReportRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveDtelQueueReportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDtelQueueReportResponse) Reset() {
	*x = RemoveDtelQueueReportResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDtelQueueReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDtelQueueReportResponse) ProtoMessage() {}

func (x *RemoveDtelQueueReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDtelQueueReportResponse.ProtoReflect.Descriptor instead.
func (*RemoveDtelQueueReportResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{11}
}

type SetDtelQueueReportAttributeRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Oid              uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	DepthThreshold   *uint32                `protobuf:"varint,2,opt,name=depth_threshold,json=depthThreshold,proto3,oneof" json:"depth_threshold,omitempty"`
	LatencyThreshold *uint32                `protobuf:"varint,3,opt,name=latency_threshold,json=latencyThreshold,proto3,oneof" json:"latency_threshold,omitempty"`
	BreachQuota      *uint32                `protobuf:"varint,4,opt,name=breach_quota,json=breachQuota,proto3,oneof" json:"breach_quota,omitempty"`
	TailDrop         *bool                  `protobuf:"varint,5,opt,name=tail_drop,json=tailDrop,proto3,oneof" json:"tail_drop,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SetDtelQueueReportAttributeRequest) Reset() {
	*x = SetDtelQueueReportAttributeRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDtelQueueReportAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDtelQueueReportAttributeRequest) ProtoMessage() {}

func (x *SetDtelQueueReportAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDtelQueueReportAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetDtelQueueReportAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{12}
}

func (x *SetDtelQueueReportAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetDtelQueueReportAttributeRequest) GetDepthThreshold() uint32 {
	if x != nil && x.DepthThreshold != nil {
		return *x.DepthThreshold
	}
	return 0
}

func (x *SetDtelQueueReportAttributeRequest) GetLatencyThreshold() uint32 {
	if x != nil && x.LatencyThreshold != nil {
		return *x.LatencyThreshold
	}
	return 0
}

func (x *SetDtelQueueReportAttributeRequest) GetBreachQuota() uint32 {
	if x != nil && x.BreachQuota != nil {
		return *x.BreachQuota
	}
	return 0
}

func (x *SetDtelQueueReportAttributeRequest) GetTailDrop() bool {
	if x != nil && x.TailDrop != nil {
		return *x.TailDrop
	}
	return false
}

type SetDtelQueueReportAttributeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDtelQueueReportAttributeResponse) Reset() {
	*x = SetDtelQueueReportAttributeResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDtelQueueReportAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDtelQueueReportAttributeResponse) ProtoMessage() {}

func (x *SetDtelQueueReportAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDtelQueueReportAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetDtelQueueReportAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{13}
}

type GetDtelQueueReportAttributeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType      []DtelQueueReportAttr  `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.DtelQueueReportAttr" json:"attr_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDtelQueueReportAttributeRequest) Reset() {
	*x = GetDtelQueueReportAttributeRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDtelQueueReportAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDtelQueueReportAttributeRequest) ProtoMessage() {}

func (x *GetDtelQueueReportAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDtelQueueReportAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetDtelQueueReportAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{14}
}

func (x *GetDtelQueueReportAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetDtelQueueReportAttributeRequest) GetAttrType() []DtelQueueReportAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetDtelQueueReportAttributeResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Attr          *DtelQueueReportAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDtelQueueReportAttributeResponse) Reset() {
	*x = GetDtelQueueReportAttributeResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDtelQueueReportAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDtelQueueReportAttributeResponse) ProtoMessage() {}

func (x *GetDtelQueueReportAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDtelQueueReportAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetDtelQueueReportAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{15}
}

func (x *GetDtelQueueReportAttributeResponse) GetAttr() *DtelQueueReportAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateDtelIntSessionRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Switch                  uint64                 `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	MaxHopCount             *uint32                `protobuf:"varint,2,opt,name=max_hop_count,json=maxHopCount,proto3,oneof" json:"max_hop_count,omitempty"`
	CollectSwitchId         *bool                  `protobuf:"varint,3,opt,name=collect_switch_id,json=collectSwitchId,proto3,oneof" json:"collect_switch_id,omitempty"`
	CollectSwitchPorts      *bool                  `protobuf:"varint,4,opt,name=collect_switch_ports,json=collectSwitchPorts,proto3,oneof" json:"collect_switch_ports,omitempty"`
	CollectIngressTimestamp *bool                  `protobuf:"varint,5,opt,name=collect_ingress_timestamp,json=collectIngressTimestamp,proto3,oneof" json:"collect_ingress_timestamp,omitempty"`
	CollectEgressTimestamp  *bool                  `protobuf:"varint,6,opt,name=collect_egress_timestamp,json=collectEgressTimestamp,proto3,oneof" json:"collect_egress_timestamp,omitempty"`
	CollectQueueInfo        *bool                  `protobuf:"varint,7,opt,name=collect_queue_info,json=collectQueueInfo,proto3,oneof" json:"collect_queue_info,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CreateDtelIntSessionRequest) Reset() {
	*x = CreateDtelIntSessionRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDtelIntSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDtelIntSessionRequest) ProtoMessage() {}

func (x *CreateDtelIntSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDtelIntSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateDtelIntSessionRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{16}
}

func (x *CreateDtelIntSessionRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateDtelIntSessionRequest) GetMaxHopCount() uint32 {
	if x != nil && x.MaxHopCount != nil {
		return *x.MaxHopCount
	}
	return 0
}

func (x *CreateDtelIntSessionRequest) GetCollectSwitchId() bool {
	if x != nil && x.CollectSwitchId != nil {
		return *x.CollectSwitchId
	}
	return false
}

func (x *CreateDtelIntSessionRequest) GetCollectSwitchPorts() bool {
	if x != nil && x.CollectSwitchPorts != nil {
		return *x.CollectSwitchPorts
	}
	return false
}

func (x *CreateDtelIntSessionRequest) GetCollectIngressTimestamp() bool {
	if x != nil && x.CollectIngressTimestamp != nil {
		return *x.CollectIngressTimestamp
	}
	return false
}

func (x *CreateDtelIntSessionRequest) GetCollectEgressTimestamp() bool {
	if x != nil && x.CollectEgressTimestamp != nil {
		return *x.CollectEgressTimestamp
	}
	return false
}

func (x *CreateDtelIntSessionRequest) GetCollectQueueInfo() bool {
	if x != nil && x.CollectQueueInfo != nil {
		return *x.CollectQueueInfo
	}
	return false
}

type CreateDtelIntSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDtelIntSessionResponse) Reset() {
	*x = CreateDtelIntSessionResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDtelIntSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDtelIntSessionResponse) ProtoMessage() {}

func (x *CreateDtelIntSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDtelIntSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateDtelIntSessionResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{17}
}

func (x *CreateDtelIntSessionResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveDtelIntSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDtelIntSessionRequest) Reset() {
	*x = RemoveDtelIntSessionRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDtelIntSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDtelIntSessionRequest) ProtoMessage() {}

func (x *RemoveDtelIntSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDtelIntSessionRequest.ProtoReflect.Descriptor instead.
func (*RemoveDtelIntSessionRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveDtelIntSessionRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveDtelIntSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDtelIntSessionResponse) Reset() {
	*x = RemoveDtelIntSessionResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDtelIntSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDtelIntSessionResponse) ProtoMessage() {}

func (x *RemoveDtelIntSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDtelIntSessionResponse.ProtoReflect.Descriptor instead.
func (*RemoveDtelIntSessionResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{19}
}

type SetDtelIntSessionAttributeRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Oid                     uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	MaxHopCount             *uint32                `protobuf:"varint,2,opt,name=max_hop_count,json=maxHopCount,proto3,oneof" json:"max_hop_count,omitempty"`
	CollectSwitchId         *bool                  `protobuf:"varint,3,opt,name=collect_switch_id,json=collectSwitchId,proto3,oneof" json:"collect_switch_id,omitempty"`
	CollectSwitchPorts      *bool                  `protobuf:"varint,4,opt,name=collect_switch_ports,json=collectSwitchPorts,proto3,oneof" json:"collect_switch_ports,omitempty"`
	CollectIngressTimestamp *bool                  `protobuf:"varint,5,opt,name=collect_ingress_timestamp,json=collectIngressTimestamp,proto3,oneof" json:"collect_ingress_timestamp,omitempty"`
	CollectEgressTimestamp  *bool                  `protobuf:"varint,6,opt,name=collect_egress_timestamp,json=collectEgressTimestamp,proto3,oneof" json:"collect_egress_timestamp,omitempty"`
	CollectQueueInfo        *bool                  `protobuf:"varint,7,opt,name=collect_queue_info,json=collectQueueInfo,proto3,oneof" json:"collect_queue_info,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *SetDtelIntSessionAttributeRequest) Reset() {
	*x = SetDtelIntSessionAttributeRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDtelIntSessionAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDtelIntSessionAttributeRequest) ProtoMessage() {}

func (x *SetDtelIntSessionAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDtelIntSessionAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetDtelIntSessionAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{20}
}

func (x *SetDtelIntSessionAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetDtelIntSessionAttributeRequest) GetMaxHopCount() uint32 {
	if x != nil && x.MaxHopCount != nil {
		return *x.MaxHopCount
	}
	return 0
}

func (x *SetDtelIntSessionAttributeRequest) GetCollectSwitchId() bool {
	if x != nil && x.CollectSwitchId != nil {
		return *x.CollectSwitchId
	}
	return false
}

func (x *SetDtelIntSessionAttributeRequest) GetCollectSwitchPorts() bool {
	if x != nil && x.CollectSwitchPorts != nil {
		return *x.CollectSwitchPorts
	}
	return false
}

func (x *SetDtelIntSessionAttributeRequest) GetCollectIngressTimestamp() bool {
	if x != nil && x.CollectIngressTimestamp != nil {
		return *x.CollectIngressTimestamp
	}
	return false
}

func (x *SetDtelIntSessionAttributeRequest) GetCollectEgressTimestamp() bool {
	if x != nil && x.CollectEgressTimestamp != nil {
		return *x.CollectEgressTimestamp
	}
	return false
}

func (x *SetDtelIntSessionAttributeRequest) GetCollectQueueInfo() bool {
	if x != nil && x.CollectQueueInfo != nil {
		return *x.CollectQueueInfo
	}
	return false
}

type SetDtelIntSessionAttributeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDtelIntSessionAttributeResponse) Reset() {
	*x = SetDtelIntSessionAttributeResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDtelIntSessionAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDtelIntSessionAttributeResponse) ProtoMessage() {}

func (x *SetDtelIntSessionAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDtelIntSessionAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetDtelIntSessionAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{21}
}

type GetDtelIntSessionAttributeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType      []DtelIntSessionAttr   `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.DtelIntSessionAttr" json:"attr_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDtelIntSessionAttributeRequest) Reset() {
	*x = GetDtelIntSessionAttributeRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDtelIntSessionAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDtelIntSessionAttributeRequest) ProtoMessage() {}

func (x *GetDtelIntSessionAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDtelIntSessionAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetDtelIntSessionAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{22}
}

func (x *GetDtelIntSessionAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetDtelIntSessionAttributeRequest) GetAttrType() []DtelIntSessionAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetDtelIntSessionAttributeResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Attr          *DtelIntSessionAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDtelIntSessionAttributeResponse) Reset() {
	*x = GetDtelIntSessionAttributeResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDtelIntSessionAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDtelIntSessionAttributeResponse) ProtoMessage() {}

func (x *GetDtelIntSessionAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDtelIntSessionAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetDtelIntSessionAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{23}
}

func (x *GetDtelIntSessionAttributeResponse) GetAttr() *DtelIntSessionAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateDtelReportSessionRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Switch          uint64                 `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	SrcIp           []byte                 `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3,oneof" json:"src_ip,omitempty"`
	DstIpList       [][]byte               `protobuf:"bytes,3,rep,name=dst_ip_list,json=dstIpList,proto3" json:"dst_ip_list,omitempty"`
	VirtualRouterId *uint64                `protobuf:"varint,4,opt,name=virtual_router_id,json=virtualRouterId,proto3,oneof" json:"virtual_router_id,omitempty"`
	TruncateSize    *uint32                `protobuf:"varint,5,opt,name=truncate_size,json=truncateSize,proto3,oneof" json:"truncate_size,omitempty"`
	UdpDstPort      *uint32                `protobuf:"varint,6,opt,name=udp_dst_port,json=udpDstPort,proto3,oneof" json:"udp_dst_port,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateDtelReportSessionRequest) Reset() {
	*x = CreateDtelReportSessionRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDtelReportSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDtelReportSessionRequest) ProtoMessage() {}

func (x *CreateDtelReportSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDtelReportSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateDtelReportSessionRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{24}
}

func (x *CreateDtelReportSessionRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateDtelReportSessionRequest) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *CreateDtelReportSessionRequest) GetDstIpList() [][]byte {
	if x != nil {
		return x.DstIpList
	}
	return nil
}

func (x *CreateDtelReportSessionRequest) GetVirtualRouterId() uint64 {
	if x != nil && x.VirtualRouterId != nil {
		return *x.VirtualRouterId
	}
	return 0
}

func (x *CreateDtelReportSessionRequest) GetTruncateSize() uint32 {
	if x != nil && x.TruncateSize != nil {
		return *x.TruncateSize
	}
	return 0
}

func (x *CreateDtelReportSessionRequest) GetUdpDstPort() uint32 {
	if x != nil && x.UdpDstPort != nil {
		return *x.UdpDstPort
	}
	return 0
}

type CreateDtelReportSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDtelReportSessionResponse) Reset() {
	*x = CreateDtelReportSessionResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDtelReportSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDtelReportSessionResponse) ProtoMessage() {}

func (x *CreateDtelReportSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDtelReportSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateDtelReportSessionResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{25}
}

func (x *CreateDtelReportSessionResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveDtelReportSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDtelReportSessionRequest) Reset() {
	*x = RemoveDtelReportSessionRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDtelReportSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDtelReportSessionRequest) ProtoMessage() {}

func (x *RemoveDtelReportSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDtelReportSessionRequest.ProtoReflect.Descriptor instead.
func (*RemoveDtelReportSessionRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{26}
}

func (x *RemoveDtelReportSessionRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveDtelReportSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDtelReportSessionResponse) Reset() {
	*x = RemoveDtelReportSessionResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDtelReportSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDtelReportSessionResponse) ProtoMessage() {}

func (x *RemoveDtelReportSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDtelReportSessionResponse.ProtoReflect.Descriptor instead.
func (*RemoveDtelReportSessionResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{27}
}

type SetDtelReportSessionAttributeRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Oid             uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	SrcIp           []byte                 `protobuf:"bytes,2,opt,name=src_ip,json=srcIp,proto3,oneof" json:"src_ip,omitempty"`
	DstIpList       [][]byte               `protobuf:"bytes,3,rep,name=dst_ip_list,json=dstIpList,proto3" json:"dst_ip_list,omitempty"`
	VirtualRouterId *uint64                `protobuf:"varint,4,opt,name=virtual_router_id,json=virtualRouterId,proto3,oneof" json:"virtual_router_id,omitempty"`
	TruncateSize    *uint32                `protobuf:"varint,5,opt,name=truncate_size,json=truncateSize,proto3,oneof" json:"truncate_size,omitempty"`
	UdpDstPort      *uint32                `protobuf:"varint,6,opt,name=udp_dst_port,json=udpDstPort,proto3,oneof" json:"udp_dst_port,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetDtelReportSessionAttributeRequest) Reset() {
	*x = SetDtelReportSessionAttributeRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDtelReportSessionAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDtelReportSessionAttributeRequest) ProtoMessage() {}

func (x *SetDtelReportSessionAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDtelReportSessionAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetDtelReportSessionAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{28}
}

func (x *SetDtelReportSessionAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetDtelReportSessionAttributeRequest) GetSrcIp() []byte {
	if x != nil {
		return x.SrcIp
	}
	return nil
}

func (x *SetDtelReportSessionAttributeRequest) GetDstIpList() [][]byte {
	if x != nil {
		return x.DstIpList
	}
	return nil
}

func (x *SetDtelReportSessionAttributeRequest) GetVirtualRouterId() uint64 {
	if x != nil && x.VirtualRouterId != nil {
		return *x.VirtualRouterId
	}
	return 0
}

func (x *SetDtelReportSessionAttributeRequest) GetTruncateSize() uint32 {
	if x != nil && x.TruncateSize != nil {
		return *x.TruncateSize
	}
	return 0
}

func (x *SetDtelReportSessionAttributeRequest) GetUdpDstPort() uint32 {
	if x != nil && x.UdpDstPort != nil {
		return *x.UdpDstPort
	}
	return 0
}

type SetDtelReportSessionAttributeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDtelReportSessionAttributeResponse) Reset() {
	*x = SetDtelReportSessionAttributeResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDtelReportSessionAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDtelReportSessionAttributeResponse) ProtoMessage() {}

func (x *SetDtelReportSessionAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDtelReportSessionAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetDtelReportSessionAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{29}
}

type GetDtelReportSessionAttributeRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Oid           uint64                  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType      []DtelReportSessionAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.DtelReportSessionAttr" json:"attr_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDtelReportSessionAttributeRequest) Reset() {
	*x = GetDtelReportSessionAttributeRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDtelReportSessionAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDtelReportSessionAttributeRequest) ProtoMessage() {}

func (x *GetDtelReportSessionAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDtelReportSessionAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetDtelReportSessionAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{30}
}

func (x *GetDtelReportSessionAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetDtelReportSessionAttributeRequest) GetAttrType() []DtelReportSessionAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetDtelReportSessionAttributeResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Attr          *DtelReportSessionAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDtelReportSessionAttributeResponse) Reset() {
	*x = GetDtelReportSessionAttributeResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDtelReportSessionAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDtelReportSessionAttributeResponse) ProtoMessage() {}

func (x *GetDtelReportSessionAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDtelReportSessionAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetDtelReportSessionAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{31}
}

func (x *GetDtelReportSessionAttributeResponse) GetAttr() *DtelReportSessionAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CreateDtelEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Switch        uint64                 `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type          *DtelEventType         `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.DtelEventType,oneof" json:"type,omitempty"`
	ReportSession *uint64                `protobuf:"varint,3,opt,name=report_session,json=reportSession,proto3,oneof" json:"report_session,omitempty"`
	DscpValue     *uint32                `protobuf:"varint,4,opt,name=dscp_value,json=dscpValue,proto3,oneof" json:"dscp_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDtelEventRequest) Reset() {
	*x = CreateDtelEventRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDtelEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDtelEventRequest) ProtoMessage() {}

func (x *CreateDtelEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDtelEventRequest.ProtoReflect.Descriptor instead.
func (*CreateDtelEventRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{32}
}

func (x *CreateDtelEventRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateDtelEventRequest) GetType() DtelEventType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DtelEventType_DTEL_EVENT_TYPE_UNSPECIFIED
}

func (x *CreateDtelEventRequest) GetReportSession() uint64 {
	if x != nil && x.ReportSession != nil {
		return *x.ReportSession
	}
	return 0
}

func (x *CreateDtelEventRequest) GetDscpValue() uint32 {
	if x != nil && x.DscpValue != nil {
		return *x.DscpValue
	}
	return 0
}

type CreateDtelEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDtelEventResponse) Reset() {
	*x = CreateDtelEventResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDtelEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDtelEventResponse) ProtoMessage() {}

func (x *CreateDtelEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDtelEventResponse.ProtoReflect.Descriptor instead.
func (*CreateDtelEventResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{33}
}

func (x *CreateDtelEventResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveDtelEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDtelEventRequest) Reset() {
	*x = RemoveDtelEventRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDtelEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDtelEventRequest) ProtoMessage() {}

func (x *RemoveDtelEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDtelEventRequest.ProtoReflect.Descriptor instead.
func (*RemoveDtelEventRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{34}
}

func (x *RemoveDtelEventRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveDtelEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveDtelEventResponse) Reset() {
	*x = RemoveDtelEventResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveDtelEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDtelEventResponse) ProtoMessage() {}

func (x *RemoveDtelEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDtelEventResponse.ProtoReflect.Descriptor instead.
func (*RemoveDtelEventResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{35}
}

type SetDtelEventAttributeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	ReportSession *uint64                `protobuf:"varint,2,opt,name=report_session,json=reportSession,proto3,oneof" json:"report_session,omitempty"`
	DscpValue     *uint32                `protobuf:"varint,3,opt,name=dscp_value,json=dscpValue,proto3,oneof" json:"dscp_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDtelEventAttributeRequest) Reset() {
	*x = SetDtelEventAttributeRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDtelEventAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDtelEventAttributeRequest) ProtoMessage() {}

func (x *SetDtelEventAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDtelEventAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetDtelEventAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{36}
}

func (x *SetDtelEventAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetDtelEventAttributeRequest) GetReportSession() uint64 {
	if x != nil && x.ReportSession != nil {
		return *x.ReportSession
	}
	return 0
}

func (x *SetDtelEventAttributeRequest) GetDscpValue() uint32 {
	if x != nil && x.DscpValue != nil {
		return *x.DscpValue
	}
	return 0
}

type SetDtelEventAttributeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDtelEventAttributeResponse) Reset() {
	*x = SetDtelEventAttributeResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDtelEventAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDtelEventAttributeResponse) ProtoMessage() {}

func (x *SetDtelEventAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDtelEventAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetDtelEventAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{37}
}

type GetDtelEventAttributeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oid           uint64                 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType      []DtelEventAttr        `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.DtelEventAttr" json:"attr_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDtelEventAttributeRequest) Reset() {
	*x = GetDtelEventAttributeRequest{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDtelEventAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDtelEventAttributeRequest) ProtoMessage() {}

func (x *GetDtelEventAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDtelEventAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetDtelEventAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{38}
}

func (x *GetDtelEventAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetDtelEventAttributeRequest) GetAttrType() []DtelEventAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetDtelEventAttributeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Attr          *DtelEventAttribute    `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDtelEventAttributeResponse) Reset() {
	*x = GetDtelEventAttributeResponse{}
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDtelEventAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDtelEventAttributeResponse) ProtoMessage() {}

func (x *GetDtelEventAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_dtel_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDtelEventAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetDtelEventAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_dtel_proto_rawDescGZIP(), []int{39}
}

func (x *GetDtelEventAttributeResponse) GetAttr() *DtelEventAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_proto_sai_dtel_proto protoreflect.FileDescriptor

var file_dataplane_proto_sai_dtel_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x64, 0x74, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x06, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x11,
	0x69, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03,
	0x48, 0x02, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x03, 0x52, 0x10, 0x64, 0x72, 0x6f,
	0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x05, 0x48, 0x04, 0x52, 0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x09, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x06, 0x48, 0x05, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x16, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48,
	0x06, 0x52, 0x13, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x13, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x08, 0x48, 0x07,
	0x52, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x6b, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x34, 0x5f,
	0x64, 0x73, 0x63, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x0a, 0x48, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x4c, 0x34,
	0x44, 0x73, 0x63, 0x70, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x41, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x6e, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x34, 0x5f, 0x64, 0x73,
	0x63, 0x70, 0x22, 0x26, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x25, 0x0a, 0x11, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x06, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x44,
	0x74, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e,
	0x74, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x0f, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x02,
	0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x03, 0x52, 0x10, 0x64, 0x72, 0x6f, 0x70, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x13, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93,
	0xad, 0x0f, 0x05, 0x48, 0x04, 0x52, 0x11, 0x71, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x09, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x06, 0x48, 0x05, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x16, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x06, 0x52,
	0x13, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x08, 0x48, 0x07, 0x52, 0x12,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x34, 0x5f, 0x64, 0x73,
	0x63, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x41, 0x63, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x0a, 0x48, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x4c, 0x34, 0x44, 0x73,
	0x63, 0x70, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x74,
	0x5f, 0x6c, 0x34, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x44,
	0x74, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44, 0x74, 0x65,
	0x6c, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x54, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x44, 0x74, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x86, 0x03, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x26,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x11,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48,
	0x02, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0c, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x04, 0x48, 0x03, 0x52, 0x0b, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f,
	0x05, 0x48, 0x04, 0x52, 0x08, 0x74, 0x61, 0x69, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x88, 0x01, 0x01,
	0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x42, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x22, 0x31,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x22, 0x30, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65,
	0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x0f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x00,
	0x52, 0x0e, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x01, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x0c, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x02, 0x52, 0x0b, 0x62,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x09, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x05, 0x48, 0x03, 0x52, 0x08, 0x74, 0x61, 0x69, 0x6c,
	0x44, 0x72, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x64, 0x65, 0x70, 0x74,
	0x68, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x22, 0x25, 0x0a, 0x23, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x44, 0x74,
	0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x47, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44, 0x74, 0x65, 0x6c, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08,
	0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6a, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x44,
	0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x43, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x22, 0xc4, 0x04, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x48, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02,
	0x48, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x02, 0x52, 0x12,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04,
	0x48, 0x03, 0x52, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x45,
	0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x05, 0x48, 0x04, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x06, 0x48, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x43, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x30, 0x0a, 0x1c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2f, 0x0a,
	0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1e,
	0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc,
	0x04, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f,
	0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x48, 0x6f, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52, 0x0f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x02, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x47, 0x0a, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x03, 0x52, 0x17, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x05, 0x48, 0x04, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93,
	0xad, 0x0f, 0x06, 0x48, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x24, 0x0a,
	0x22, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x68, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44,
	0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0xea, 0x02, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49, 0x70, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x64,
	0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x52, 0x09, 0x64, 0x73, 0x74, 0x49, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x11, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06,
	0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x01, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0d,
	0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x02, 0x52, 0x0c, 0x74,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0c, 0x75, 0x64, 0x70, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x05, 0x48, 0x03, 0x52, 0x0a,
	0x75, 0x64, 0x70, 0x44, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0,
	0xa9, 0x90, 0xad, 0x0f, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x64, 0x70,
	0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x33, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x32,
	0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe2, 0x02, 0x0a, 0x24, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65,
	0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x06, 0x73, 0x72, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x05, 0x73, 0x72, 0x63, 0x49,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f,
	0x02, 0x52, 0x09, 0x64, 0x73, 0x74, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x11,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48,
	0x01, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x04, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0c, 0x75, 0x64, 0x70, 0x5f, 0x64,
	0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x75, 0x64, 0x70, 0x44, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x69,
	0x70, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x64,
	0x70, 0x5f, 0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x27, 0x0a, 0x25, 0x53, 0x65,
	0x74, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x49,
	0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x52,
	0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6e, 0x0a, 0x25, 0x47, 0x65, 0x74,
	0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x8a, 0x02, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x45, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93,
	0xad, 0x0f, 0x02, 0x48, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93,
	0xad, 0x0f, 0x03, 0x48, 0x02, 0x52, 0x09, 0x64, 0x73, 0x63, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x45, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x73, 0x63, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22,
	0x19, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x1c, 0x53,
	0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x32, 0x0a,
	0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x00, 0x52,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0a, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x01, 0x52,
	0x09, 0x64, 0x73, 0x63, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x73, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x1f, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x73, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44, 0x74,
	0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5e, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x44, 0x74, 0x65,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0xe9, 0x02, 0x0a, 0x08, 0x44, 0x74, 0x65, 0x6c, 0x41, 0x74,
	0x74, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a,
	0x1d, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x50, 0x4f, 0x53, 0x54, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x03, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x4e,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12,
	0x24, 0x0a, 0x20, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x43, 0x59,
	0x43, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x49,
	0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x08, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x54, 0x45, 0x4c,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x49, 0x4e, 0x4b, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x4c, 0x34, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10,
	0x0a, 0x2a, 0x8b, 0x02, 0x0a, 0x13, 0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x54, 0x45,
	0x4c, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f,
	0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x51,
	0x55, 0x45, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x41, 0x54,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x53, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x03,
	0x12, 0x27, 0x0a, 0x23, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x41, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x54, 0x45,
	0x4c, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x05, 0x2a,
	0xd8, 0x02, 0x0a, 0x12, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x49,
	0x4e, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x49,
	0x4e, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x49,
	0x44, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x4f, 0x52, 0x54,
	0x53, 0x10, 0x03, 0x12, 0x33, 0x0a, 0x2f, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4c,
	0x4c, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x44, 0x54, 0x45, 0x4c,
	0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x05, 0x12, 0x2c, 0x0a, 0x28,
	0x44, 0x54, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x06, 0x2a, 0x97, 0x02, 0x0a, 0x15, 0x44,
	0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x52, 0x43, 0x5f, 0x49,
	0x50, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x2e, 0x0a,
	0x2a, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41,
	0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x2a, 0x0a,
	0x26, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x44, 0x54, 0x45,
	0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x44, 0x50, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x05, 0x2a, 0x8e, 0x01, 0x0a, 0x0d, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x54, 0x45, 0x4c, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x54, 0x45, 0x4c, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x03, 0x32, 0x80, 0x15, 0x0a, 0x04, 0x44, 0x74, 0x65, 0x6c, 0x12, 0x63,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x12, 0x28, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65,
	0x6c, 0x12, 0x28, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x44,
	0x74, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x75, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x74, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x74, 0x65, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01,
	0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74,
	0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x39, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x74,
	0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93,
	0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c,
	0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x49, 0x6e, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53,
	0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x44,
	0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x3b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x74, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x74,
	0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x53,
	0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74,
	0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x33, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x74, 0x65, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_dataplane_proto_sai_dtel_proto_rawDescOnce sync.Once
	file_dataplane_proto_sai_dtel_proto_rawDescData []byte
)

func file_dataplane_proto_sai_dtel_proto_rawDescGZIP() []byte {
	file_dataplane_proto_sai_dtel_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_sai_dtel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dataplane_proto_sai_dtel_proto_rawDesc), len(file_dataplane_proto_sai_dtel_proto_rawDesc)))
	})
	return file_dataplane_proto_sai_dtel_proto_rawDescData
}

var file_dataplane_proto_sai_dtel_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_dataplane_proto_sai_dtel_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_dataplane_proto_sai_dtel_proto_goTypes = []any{
	(DtelAttr)(0),                                 // 0: lemming.dataplane.sai.DtelAttr
	(DtelQueueReportAttr)(0),                      // 1: lemming.dataplane.sai.DtelQueueReportAttr
	(DtelIntSessionAttr)(0),                       // 2: lemming.dataplane.sai.DtelIntSessionAttr
	(DtelReportSessionAttr)(0),                    // 3: lemming.dataplane.sai.DtelReportSessionAttr
	(DtelEventAttr)(0),                            // 4: lemming.dataplane.sai.DtelEventAttr
	(*CreateDtelRequest)(nil),                     // 5: lemming.dataplane.sai.CreateDtelRequest
	(*CreateDtelResponse)(nil),                    // 6: lemming.dataplane.sai.CreateDtelResponse
	(*RemoveDtelRequest)(nil),                     // 7: lemming.dataplane.sai.RemoveDtelRequest
	(*RemoveDtelResponse)(nil),                    // 8: lemming.dataplane.sai.RemoveDtelResponse
	(*SetDtelAttributeRequest)(nil),               // 9: lemming.dataplane.sai.SetDtelAttributeRequest
	(*SetDtelAttributeResponse)(nil),              // 10: lemming.dataplane.sai.SetDtelAttributeResponse
	(*GetDtelAttributeRequest)(nil),               // 11: lemming.dataplane.sai.GetDtelAttributeRequest
	(*GetDtelAttributeResponse)(nil),              // 12: lemming.dataplane.sai.GetDtelAttributeResponse
	(*CreateDtelQueueReportRequest)(nil),          // 13: lemming.dataplane.sai.CreateDtelQueueReportRequest
	(*CreateDtelQueueReportResponse)(nil),         // 14: lemming.dataplane.sai.CreateDtelQueueReportResponse
	(*RemoveDtelQueueReportRequest)(nil),          // 15: lemming.dataplane.sai.RemoveDtelQueueReportRequest
	(*RemoveDtelQueueReportResponse)(nil),         // 16: lemming.dataplane.sai.RemoveDtelQueueReportResponse
	(*SetDtelQueueReportAttributeRequest)(nil),    // 17: lemming.dataplane.sai.SetDtelQueueReportAttributeRequest
	(*SetDtelQueueReportAttributeResponse)(nil),   // 18: lemming.dataplane.sai.SetDtelQueueReportAttributeResponse
	(*GetDtelQueueReportAttributeRequest)(nil),    // 19: lemming.dataplane.sai.GetDtelQueueReportAttributeRequest
	(*GetDtelQueueReportAttributeResponse)(nil),   // 20: lemming.dataplane.sai.GetDtelQueueReportAttributeResponse
	(*CreateDtelIntSessionRequest)(nil),           // 21: lemming.dataplane.sai.CreateDtelIntSessionRequest
	(*CreateDtelIntSessionResponse)(nil),          // 22: lemming.dataplane.sai.CreateDtelIntSessionResponse
	(*RemoveDtelIntSessionRequest)(nil),           // 23: lemming.dataplane.sai.RemoveDtelIntSessionRequest
	(*RemoveDtelIntSessionResponse)(nil),          // 24: lemming.dataplane.sai.RemoveDtelIntSessionResponse
	(*SetDtelIntSessionAttributeRequest)(nil),     // 25: lemming.dataplane.sai.SetDtelIntSessionAttributeRequest
	(*SetDtelIntSessionAttributeResponse)(nil),    // 26: lemming.dataplane.sai.SetDtelIntSessionAttributeResponse
	(*GetDtelIntSessionAttributeRequest)(nil),     // 27: lemming.dataplane.sai.GetDtelIntSessionAttributeRequest
	(*GetDtelIntSessionAttributeResponse)(nil),    // 28: lemming.dataplane.sai.GetDtelIntSessionAttributeResponse
	(*CreateDtelReportSessionRequest)(nil),        // 29: lemming.dataplane.sai.CreateDtelReportSessionRequest
	(*CreateDtelReportSessionResponse)(nil),       // 30: lemming.dataplane.sai.CreateDtelReportSessionResponse
	(*RemoveDtelReportSessionRequest)(nil),        // 31: lemming.dataplane.sai.RemoveDtelReportSessionRequest
	(*RemoveDtelReportSessionResponse)(nil),       // 32: lemming.dataplane.sai.RemoveDtelReportSessionResponse
	(*SetDtelReportSessionAttributeRequest)(nil),  // 33: lemming.dataplane.sai.SetDtelReportSessionAttributeRequest
	(*SetDtelReportSessionAttributeResponse)(nil), // 34: lemming.dataplane.sai.SetDtelReportSessionAttributeResponse
	(*GetDtelReportSessionAttributeRequest)(nil),  // 35: lemming.dataplane.sai.GetDtelReportSessionAttributeRequest
	(*GetDtelReportSessionAttributeResponse)(nil), // 36: lemming.dataplane.sai.GetDtelReportSessionAttributeResponse
	(*CreateDtelEventRequest)(nil),                // 37: lemming.dataplane.sai.CreateDtelEventRequest
	(*CreateDtelEventResponse)(nil),               // 38: lemming.dataplane.sai.CreateDtelEventResponse
	(*RemoveDtelEventRequest)(nil),                // 39: lemming.dataplane.sai.RemoveDtelEventRequest
	(*RemoveDtelEventResponse)(nil),               // 40: lemming.dataplane.sai.RemoveDtelEventResponse
	(*SetDtelEventAttributeRequest)(nil),          // 41: lemming.dataplane.sai.SetDtelEventAttributeRequest
	(*SetDtelEventAttributeResponse)(nil),         // 42: lemming.dataplane.sai.SetDtelEventAttributeResponse
	(*GetDtelEventAttributeRequest)(nil),          // 43: lemming.dataplane.sai.GetDtelEventAttributeRequest
	(*GetDtelEventAttributeResponse)(nil),         // 44: lemming.dataplane.sai.GetDtelEventAttributeResponse
	(*AclFieldData)(nil),                          // 45: lemming.dataplane.sai.AclFieldData
	(*DtelAttribute)(nil),                         // 46: lemming.dataplane.sai.DtelAttribute
	(*DtelQueueReportAttribute)(nil),              // 47: lemming.dataplane.sai.DtelQueueReportAttribute
	(*DtelIntSessionAttribute)(nil),               // 48: lemming.dataplane.sai.DtelIntSessionAttribute
	(*DtelReportSessionAttribute)(nil),            // 49: lemming.dataplane.sai.DtelReportSessionAttribute
	(DtelEventType)(0),                            // 50: lemming.dataplane.sai.DtelEventType
	(*DtelEventAttribute)(nil),                    // 51: lemming.dataplane.sai.DtelEventAttribute
}
var file_dataplane_proto_sai_dtel_proto_depIdxs = []int32{
	45, // 0: lemming.dataplane.sai.CreateDtelRequest.int_l4_dscp:type_name -> lemming.dataplane.sai.AclFieldData
	45, // 1: lemming.dataplane.sai.SetDtelAttributeRequest.int_l4_dscp:type_name -> lemming.dataplane.sai.AclFieldData
	0,  // 2: lemming.dataplane.sai.GetDtelAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.DtelAttr
	46, // 3: lemming.dataplane.sai.GetDtelAttributeResponse.attr:type_name -> lemming.dataplane.sai.DtelAttribute
	1,  // 4: lemming.dataplane.sai.GetDtelQueueReportAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.DtelQueueReportAttr
	47, // 5: lemming.dataplane.sai.GetDtelQueueReportAttributeResponse.attr:type_name -> lemming.dataplane.sai.DtelQueueReportAttribute
	2,  // 6: lemming.dataplane.sai.GetDtelIntSessionAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.DtelIntSessionAttr
	48, // 7: lemming.dataplane.sai.GetDtelIntSessionAttributeResponse.attr:type_name -> lemming.dataplane.sai.DtelIntSessionAttribute
	3,  // 8: lemming.dataplane.sai.GetDtelReportSessionAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.DtelReportSessionAttr
	49, // 9: lemming.dataplane.sai.GetDtelReportSessionAttributeResponse.attr:type_name -> lemming.dataplane.sai.DtelReportSessionAttribute
	50, // 10: lemming.dataplane.sai.CreateDtelEventRequest.type:type_name -> lemming.dataplane.sai.DtelEventType
	4,  // 11: lemming.dataplane.sai.GetDtelEventAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.DtelEventAttr
	51, // 12: lemming.dataplane.sai.GetDtelEventAttributeResponse.attr:type_name -> lemming.dataplane.sai.DtelEventAttribute
	5,  // 13: lemming.dataplane.sai.Dtel.CreateDtel:input_type -> lemming.dataplane.sai.CreateDtelRequest
	7,  // 14: lemming.dataplane.sai.Dtel.RemoveDtel:input_type -> lemming.dataplane.sai.RemoveDtelRequest
	9,  // 15: lemming.dataplane.sai.Dtel.SetDtelAttribute:input_type -> lemming.dataplane.sai.SetDtelAttributeRequest
	11, // 16: lemming.dataplane.sai.Dtel.GetDtelAttribute:input_type -> lemming.dataplane.sai.GetDtelAttributeRequest
	13, // 17: lemming.dataplane.sai.Dtel.CreateDtelQueueReport:input_type -> lemming.dataplane.sai.CreateDtelQueueReportRequest
	15, // 18: lemming.dataplane.sai.Dtel.RemoveDtelQueueReport:input_type -> lemming.dataplane.sai.RemoveDtelQueueReportRequest
	17, // 19: lemming.dataplane.sai.Dtel.SetDtelQueueReportAttribute:input_type -> lemming.dataplane.sai.SetDtelQueueReportAttributeRequest
	19, // 20: lemming.dataplane.sai.Dtel.GetDtelQueueReportAttribute:input_type -> lemming.dataplane.sai.GetDtelQueueReportAttributeRequest
	21, // 21: lemming.dataplane.sai.Dtel.CreateDtelIntSession:input_type -> lemming.dataplane.sai.CreateDtelIntSessionRequest
	23, // 22: lemming.dataplane.sai.Dtel.RemoveDtelIntSession:input_type -> lemming.dataplane.sai.RemoveDtelIntSessionRequest
	25, // 23: lemming.dataplane.sai.Dtel.SetDtelIntSessionAttribute:input_type -> lemming.dataplane.sai.SetDtelIntSessionAttributeRequest
	27, // 24: lemming.dataplane.sai.Dtel.GetDtelIntSessionAttribute:input_type -> lemming.dataplane.sai.GetDtelIntSessionAttributeRequest
	29, // 25: lemming.dataplane.sai.Dtel.CreateDtelReportSession:input_type -> lemming.dataplane.sai.CreateDtelReportSessionRequest
	31, // 26: lemming.dataplane.sai.Dtel.RemoveDtelReportSession:input_type -> lemming.dataplane.sai.RemoveDtelReportSessionRequest
	33, // 27: lemming.dataplane.sai.Dtel.SetDtelReportSessionAttribute:input_type -> lemming.dataplane.sai.SetDtelReportSessionAttributeRequest
	35, // 28: lemming.dataplane.sai.Dtel.GetDtelReportSessionAttribute:input_type -> lemming.dataplane.sai.GetDtelReportSessionAttributeRequest
	37, // 29: lemming.dataplane.sai.Dtel.CreateDtelEvent:input_type -> lemming.dataplane.sai.CreateDtelEventRequest
	39, // 30: lemming.dataplane.sai.Dtel.RemoveDtelEvent:input_type -> lemming.dataplane.sai.RemoveDtelEventRequest
	41, // 31: lemming.dataplane.sai.Dtel.SetDtelEventAttribute:input_type -> lemming.dataplane.sai.SetDtelEventAttributeRequest
	43, // 32: lemming.dataplane.sai.Dtel.GetDtelEventAttribute:input_type -> lemming.dataplane.sai.GetDtelEventAttributeRequest
	6,  // 33: lemming.dataplane.sai.Dtel.CreateDtel:output_type -> lemming.dataplane.sai.CreateDtelResponse
	8,  // 34: lemming.dataplane.sai.Dtel.RemoveDtel:output_type -> lemming.dataplane.sai.RemoveDtelResponse
	10, // 35: lemming.dataplane.sai.Dtel.SetDtelAttribute:output_type -> lemming.dataplane.sai.SetDtelAttributeResponse
	12, // 36: lemming.dataplane.sai.Dtel.GetDtelAttribute:output_type -> lemming.dataplane.sai.GetDtelAttributeResponse
	14, // 37: lemming.dataplane.sai.Dtel.CreateDtelQueueReport:output_type -> lemming.dataplane.sai.CreateDtelQueueReportResponse
	16, // 38: lemming.dataplane.sai.Dtel.RemoveDtelQueueReport:output_type -> lemming.dataplane.sai.RemoveDtelQueueReportResponse
	18, // 39: lemming.dataplane.sai.Dtel.SetDtelQueueReportAttribute:output_type -> lemming.dataplane.sai.SetDtelQueueReportAttributeResponse
	20, // 40: lemming.dataplane.sai.Dtel.GetDtelQueueReportAttribute:output_type -> lemming.dataplane.sai.GetDtelQueueReportAttributeResponse
	22, // 41: lemming.dataplane.sai.Dtel.CreateDtelIntSession:output_type -> lemming.dataplane.sai.CreateDtelIntSessionResponse
	24, // 42: lemming.dataplane.sai.Dtel.RemoveDtelIntSession:output_type -> lemming.dataplane.sai.RemoveDtelIntSessionResponse
	26, // 43: lemming.dataplane.sai.Dtel.SetDtelIntSessionAttribute:output_type -> lemming.dataplane.sai.SetDtelIntSessionAttributeResponse
	28, // 44: lemming.dataplane.sai.Dtel.GetDtelIntSessionAttribute:output_type -> lemming.dataplane.sai.GetDtelIntSessionAttributeResponse
	30, // 45: lemming.dataplane.sai.Dtel.CreateDtelReportSession:output_type -> lemming.dataplane.sai.CreateDtelReportSessionResponse
	32, // 46: lemming.dataplane.sai.Dtel.RemoveDtelReportSession:output_type -> lemming.dataplane.sai.RemoveDtelReportSessionResponse
	34, // 47: lemming.dataplane.sai.Dtel.SetDtelReportSessionAttribute:output_type -> lemming.dataplane.sai.SetDtelReportSessionAttributeResponse
	36, // 48: lemming.dataplane.sai.Dtel.GetDtelReportSessionAttribute:output_type -> lemming.dataplane.sai.GetDtelReportSessionAttributeResponse
	38, // 49: lemming.dataplane.sai.Dtel.CreateDtelEvent:output_type -> lemming.dataplane.sai.CreateDtelEventResponse
	40, // 50: lemming.dataplane.sai.Dtel.RemoveDtelEvent:output_type -> lemming.dataplane.sai.RemoveDtelEventResponse
	42, // 51: lemming.dataplane.sai.Dtel.SetDtelEventAttribute:output_type -> lemming.dataplane.sai.SetDtelEventAttributeResponse
	44, // 52: lemming.dataplane.sai.Dtel.GetDtelEventAttribute:output_type -> lemming.dataplane.sai.GetDtelEventAttributeResponse
	33, // [33:53] is the sub-list for method output_type
	13, // [13:33] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_dataplane_proto_sai_dtel_proto_init() }
func file_dataplane_proto_sai_dtel_proto_init() {
	if File_dataplane_proto_sai_dtel_proto != nil {
		return
	}
	file_dataplane_proto_sai_common_proto_init()
	file_dataplane_proto_sai_dtel_proto_msgTypes[0].OneofWrappers = []any{}
	file_dataplane_proto_sai_dtel_proto_msgTypes[4].OneofWrappers = []any{}
	file_dataplane_proto_sai_dtel_proto_msgTypes[8].OneofWrappers = []any{}
	file_dataplane_proto_sai_dtel_proto_msgTypes[12].OneofWrappers = []any{}
	file_dataplane_proto_sai_dtel_proto_msgTypes[16].OneofWrappers = []any{}
	file_dataplane_proto_sai_dtel_proto_msgTypes[20].OneofWrappers = []any{}
	file_dataplane_proto_sai_dtel_proto_msgTypes[24].OneofWrappers = []any{}
	file_dataplane_proto_sai_dtel_proto_msgTypes[28].OneofWrappers = []any{}
	file_dataplane_proto_sai_dtel_proto_msgTypes[32].OneofWrappers = []any{}
	file_dataplane_proto_sai_dtel_proto_msgTypes[36].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dataplane_proto_sai_dtel_proto_rawDesc), len(file_dataplane_proto_sai_dtel_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_sai_dtel_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_sai_dtel_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_sai_dtel_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_sai_dtel_proto_msgTypes,
	}.Build()
	File_dataplane_proto_sai_dtel_proto = out.File
	file_dataplane_proto_sai_dtel_proto_goTypes = nil
	file_dataplane_proto_sai_dtel_proto_depIdxs = nil
}
