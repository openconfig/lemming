// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/macsec.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Macsec_CreateMacsec_FullMethodName           = "/lemming.dataplane.sai.Macsec/CreateMacsec"
	Macsec_RemoveMacsec_FullMethodName           = "/lemming.dataplane.sai.Macsec/RemoveMacsec"
	Macsec_SetMacsecAttribute_FullMethodName     = "/lemming.dataplane.sai.Macsec/SetMacsecAttribute"
	Macsec_GetMacsecAttribute_FullMethodName     = "/lemming.dataplane.sai.Macsec/GetMacsecAttribute"
	Macsec_CreateMacsecPort_FullMethodName       = "/lemming.dataplane.sai.Macsec/CreateMacsecPort"
	Macsec_RemoveMacsecPort_FullMethodName       = "/lemming.dataplane.sai.Macsec/RemoveMacsecPort"
	Macsec_SetMacsecPortAttribute_FullMethodName = "/lemming.dataplane.sai.Macsec/SetMacsecPortAttribute"
	Macsec_GetMacsecPortAttribute_FullMethodName = "/lemming.dataplane.sai.Macsec/GetMacsecPortAttribute"
	Macsec_GetMacsecPortStats_FullMethodName     = "/lemming.dataplane.sai.Macsec/GetMacsecPortStats"
	Macsec_CreateMacsecFlow_FullMethodName       = "/lemming.dataplane.sai.Macsec/CreateMacsecFlow"
	Macsec_RemoveMacsecFlow_FullMethodName       = "/lemming.dataplane.sai.Macsec/RemoveMacsecFlow"
	Macsec_GetMacsecFlowAttribute_FullMethodName = "/lemming.dataplane.sai.Macsec/GetMacsecFlowAttribute"
	Macsec_GetMacsecFlowStats_FullMethodName     = "/lemming.dataplane.sai.Macsec/GetMacsecFlowStats"
	Macsec_CreateMacsecSc_FullMethodName         = "/lemming.dataplane.sai.Macsec/CreateMacsecSc"
	Macsec_RemoveMacsecSc_FullMethodName         = "/lemming.dataplane.sai.Macsec/RemoveMacsecSc"
	Macsec_SetMacsecScAttribute_FullMethodName   = "/lemming.dataplane.sai.Macsec/SetMacsecScAttribute"
	Macsec_GetMacsecScAttribute_FullMethodName   = "/lemming.dataplane.sai.Macsec/GetMacsecScAttribute"
	Macsec_GetMacsecScStats_FullMethodName       = "/lemming.dataplane.sai.Macsec/GetMacsecScStats"
	Macsec_CreateMacsecSa_FullMethodName         = "/lemming.dataplane.sai.Macsec/CreateMacsecSa"
	Macsec_RemoveMacsecSa_FullMethodName         = "/lemming.dataplane.sai.Macsec/RemoveMacsecSa"
	Macsec_SetMacsecSaAttribute_FullMethodName   = "/lemming.dataplane.sai.Macsec/SetMacsecSaAttribute"
	Macsec_GetMacsecSaAttribute_FullMethodName   = "/lemming.dataplane.sai.Macsec/GetMacsecSaAttribute"
	Macsec_GetMacsecSaStats_FullMethodName       = "/lemming.dataplane.sai.Macsec/GetMacsecSaStats"
)

// MacsecClient is the client API for Macsec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MacsecClient interface {
	CreateMacsec(ctx context.Context, in *CreateMacsecRequest, opts ...grpc.CallOption) (*CreateMacsecResponse, error)
	RemoveMacsec(ctx context.Context, in *RemoveMacsecRequest, opts ...grpc.CallOption) (*RemoveMacsecResponse, error)
	SetMacsecAttribute(ctx context.Context, in *SetMacsecAttributeRequest, opts ...grpc.CallOption) (*SetMacsecAttributeResponse, error)
	GetMacsecAttribute(ctx context.Context, in *GetMacsecAttributeRequest, opts ...grpc.CallOption) (*GetMacsecAttributeResponse, error)
	CreateMacsecPort(ctx context.Context, in *CreateMacsecPortRequest, opts ...grpc.CallOption) (*CreateMacsecPortResponse, error)
	RemoveMacsecPort(ctx context.Context, in *RemoveMacsecPortRequest, opts ...grpc.CallOption) (*RemoveMacsecPortResponse, error)
	SetMacsecPortAttribute(ctx context.Context, in *SetMacsecPortAttributeRequest, opts ...grpc.CallOption) (*SetMacsecPortAttributeResponse, error)
	GetMacsecPortAttribute(ctx context.Context, in *GetMacsecPortAttributeRequest, opts ...grpc.CallOption) (*GetMacsecPortAttributeResponse, error)
	GetMacsecPortStats(ctx context.Context, in *GetMacsecPortStatsRequest, opts ...grpc.CallOption) (*GetMacsecPortStatsResponse, error)
	CreateMacsecFlow(ctx context.Context, in *CreateMacsecFlowRequest, opts ...grpc.CallOption) (*CreateMacsecFlowResponse, error)
	RemoveMacsecFlow(ctx context.Context, in *RemoveMacsecFlowRequest, opts ...grpc.CallOption) (*RemoveMacsecFlowResponse, error)
	GetMacsecFlowAttribute(ctx context.Context, in *GetMacsecFlowAttributeRequest, opts ...grpc.CallOption) (*GetMacsecFlowAttributeResponse, error)
	GetMacsecFlowStats(ctx context.Context, in *GetMacsecFlowStatsRequest, opts ...grpc.CallOption) (*GetMacsecFlowStatsResponse, error)
	CreateMacsecSc(ctx context.Context, in *CreateMacsecScRequest, opts ...grpc.CallOption) (*CreateMacsecScResponse, error)
	RemoveMacsecSc(ctx context.Context, in *RemoveMacsecScRequest, opts ...grpc.CallOption) (*RemoveMacsecScResponse, error)
	SetMacsecScAttribute(ctx context.Context, in *SetMacsecScAttributeRequest, opts ...grpc.CallOption) (*SetMacsecScAttributeResponse, error)
	GetMacsecScAttribute(ctx context.Context, in *GetMacsecScAttributeRequest, opts ...grpc.CallOption) (*GetMacsecScAttributeResponse, error)
	GetMacsecScStats(ctx context.Context, in *GetMacsecScStatsRequest, opts ...grpc.CallOption) (*GetMacsecScStatsResponse, error)
	CreateMacsecSa(ctx context.Context, in *CreateMacsecSaRequest, opts ...grpc.CallOption) (*CreateMacsecSaResponse, error)
	RemoveMacsecSa(ctx context.Context, in *RemoveMacsecSaRequest, opts ...grpc.CallOption) (*RemoveMacsecSaResponse, error)
	SetMacsecSaAttribute(ctx context.Context, in *SetMacsecSaAttributeRequest, opts ...grpc.CallOption) (*SetMacsecSaAttributeResponse, error)
	GetMacsecSaAttribute(ctx context.Context, in *GetMacsecSaAttributeRequest, opts ...grpc.CallOption) (*GetMacsecSaAttributeResponse, error)
	GetMacsecSaStats(ctx context.Context, in *GetMacsecSaStatsRequest, opts ...grpc.CallOption) (*GetMacsecSaStatsResponse, error)
}

type macsecClient struct {
	cc grpc.ClientConnInterface
}

func NewMacsecClient(cc grpc.ClientConnInterface) MacsecClient {
	return &macsecClient{cc}
}

func (c *macsecClient) CreateMacsec(ctx context.Context, in *CreateMacsecRequest, opts ...grpc.CallOption) (*CreateMacsecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMacsecResponse)
	err := c.cc.Invoke(ctx, Macsec_CreateMacsec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) RemoveMacsec(ctx context.Context, in *RemoveMacsecRequest, opts ...grpc.CallOption) (*RemoveMacsecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMacsecResponse)
	err := c.cc.Invoke(ctx, Macsec_RemoveMacsec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) SetMacsecAttribute(ctx context.Context, in *SetMacsecAttributeRequest, opts ...grpc.CallOption) (*SetMacsecAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMacsecAttributeResponse)
	err := c.cc.Invoke(ctx, Macsec_SetMacsecAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecAttribute(ctx context.Context, in *GetMacsecAttributeRequest, opts ...grpc.CallOption) (*GetMacsecAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMacsecAttributeResponse)
	err := c.cc.Invoke(ctx, Macsec_GetMacsecAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) CreateMacsecPort(ctx context.Context, in *CreateMacsecPortRequest, opts ...grpc.CallOption) (*CreateMacsecPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMacsecPortResponse)
	err := c.cc.Invoke(ctx, Macsec_CreateMacsecPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) RemoveMacsecPort(ctx context.Context, in *RemoveMacsecPortRequest, opts ...grpc.CallOption) (*RemoveMacsecPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMacsecPortResponse)
	err := c.cc.Invoke(ctx, Macsec_RemoveMacsecPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) SetMacsecPortAttribute(ctx context.Context, in *SetMacsecPortAttributeRequest, opts ...grpc.CallOption) (*SetMacsecPortAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMacsecPortAttributeResponse)
	err := c.cc.Invoke(ctx, Macsec_SetMacsecPortAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecPortAttribute(ctx context.Context, in *GetMacsecPortAttributeRequest, opts ...grpc.CallOption) (*GetMacsecPortAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMacsecPortAttributeResponse)
	err := c.cc.Invoke(ctx, Macsec_GetMacsecPortAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecPortStats(ctx context.Context, in *GetMacsecPortStatsRequest, opts ...grpc.CallOption) (*GetMacsecPortStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMacsecPortStatsResponse)
	err := c.cc.Invoke(ctx, Macsec_GetMacsecPortStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) CreateMacsecFlow(ctx context.Context, in *CreateMacsecFlowRequest, opts ...grpc.CallOption) (*CreateMacsecFlowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMacsecFlowResponse)
	err := c.cc.Invoke(ctx, Macsec_CreateMacsecFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) RemoveMacsecFlow(ctx context.Context, in *RemoveMacsecFlowRequest, opts ...grpc.CallOption) (*RemoveMacsecFlowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMacsecFlowResponse)
	err := c.cc.Invoke(ctx, Macsec_RemoveMacsecFlow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecFlowAttribute(ctx context.Context, in *GetMacsecFlowAttributeRequest, opts ...grpc.CallOption) (*GetMacsecFlowAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMacsecFlowAttributeResponse)
	err := c.cc.Invoke(ctx, Macsec_GetMacsecFlowAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecFlowStats(ctx context.Context, in *GetMacsecFlowStatsRequest, opts ...grpc.CallOption) (*GetMacsecFlowStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMacsecFlowStatsResponse)
	err := c.cc.Invoke(ctx, Macsec_GetMacsecFlowStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) CreateMacsecSc(ctx context.Context, in *CreateMacsecScRequest, opts ...grpc.CallOption) (*CreateMacsecScResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMacsecScResponse)
	err := c.cc.Invoke(ctx, Macsec_CreateMacsecSc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) RemoveMacsecSc(ctx context.Context, in *RemoveMacsecScRequest, opts ...grpc.CallOption) (*RemoveMacsecScResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMacsecScResponse)
	err := c.cc.Invoke(ctx, Macsec_RemoveMacsecSc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) SetMacsecScAttribute(ctx context.Context, in *SetMacsecScAttributeRequest, opts ...grpc.CallOption) (*SetMacsecScAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMacsecScAttributeResponse)
	err := c.cc.Invoke(ctx, Macsec_SetMacsecScAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecScAttribute(ctx context.Context, in *GetMacsecScAttributeRequest, opts ...grpc.CallOption) (*GetMacsecScAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMacsecScAttributeResponse)
	err := c.cc.Invoke(ctx, Macsec_GetMacsecScAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecScStats(ctx context.Context, in *GetMacsecScStatsRequest, opts ...grpc.CallOption) (*GetMacsecScStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMacsecScStatsResponse)
	err := c.cc.Invoke(ctx, Macsec_GetMacsecScStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) CreateMacsecSa(ctx context.Context, in *CreateMacsecSaRequest, opts ...grpc.CallOption) (*CreateMacsecSaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMacsecSaResponse)
	err := c.cc.Invoke(ctx, Macsec_CreateMacsecSa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) RemoveMacsecSa(ctx context.Context, in *RemoveMacsecSaRequest, opts ...grpc.CallOption) (*RemoveMacsecSaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveMacsecSaResponse)
	err := c.cc.Invoke(ctx, Macsec_RemoveMacsecSa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) SetMacsecSaAttribute(ctx context.Context, in *SetMacsecSaAttributeRequest, opts ...grpc.CallOption) (*SetMacsecSaAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMacsecSaAttributeResponse)
	err := c.cc.Invoke(ctx, Macsec_SetMacsecSaAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecSaAttribute(ctx context.Context, in *GetMacsecSaAttributeRequest, opts ...grpc.CallOption) (*GetMacsecSaAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMacsecSaAttributeResponse)
	err := c.cc.Invoke(ctx, Macsec_GetMacsecSaAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecClient) GetMacsecSaStats(ctx context.Context, in *GetMacsecSaStatsRequest, opts ...grpc.CallOption) (*GetMacsecSaStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMacsecSaStatsResponse)
	err := c.cc.Invoke(ctx, Macsec_GetMacsecSaStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MacsecServer is the server API for Macsec service.
// All implementations should embed UnimplementedMacsecServer
// for forward compatibility.
type MacsecServer interface {
	CreateMacsec(context.Context, *CreateMacsecRequest) (*CreateMacsecResponse, error)
	RemoveMacsec(context.Context, *RemoveMacsecRequest) (*RemoveMacsecResponse, error)
	SetMacsecAttribute(context.Context, *SetMacsecAttributeRequest) (*SetMacsecAttributeResponse, error)
	GetMacsecAttribute(context.Context, *GetMacsecAttributeRequest) (*GetMacsecAttributeResponse, error)
	CreateMacsecPort(context.Context, *CreateMacsecPortRequest) (*CreateMacsecPortResponse, error)
	RemoveMacsecPort(context.Context, *RemoveMacsecPortRequest) (*RemoveMacsecPortResponse, error)
	SetMacsecPortAttribute(context.Context, *SetMacsecPortAttributeRequest) (*SetMacsecPortAttributeResponse, error)
	GetMacsecPortAttribute(context.Context, *GetMacsecPortAttributeRequest) (*GetMacsecPortAttributeResponse, error)
	GetMacsecPortStats(context.Context, *GetMacsecPortStatsRequest) (*GetMacsecPortStatsResponse, error)
	CreateMacsecFlow(context.Context, *CreateMacsecFlowRequest) (*CreateMacsecFlowResponse, error)
	RemoveMacsecFlow(context.Context, *RemoveMacsecFlowRequest) (*RemoveMacsecFlowResponse, error)
	GetMacsecFlowAttribute(context.Context, *GetMacsecFlowAttributeRequest) (*GetMacsecFlowAttributeResponse, error)
	GetMacsecFlowStats(context.Context, *GetMacsecFlowStatsRequest) (*GetMacsecFlowStatsResponse, error)
	CreateMacsecSc(context.Context, *CreateMacsecScRequest) (*CreateMacsecScResponse, error)
	RemoveMacsecSc(context.Context, *RemoveMacsecScRequest) (*RemoveMacsecScResponse, error)
	SetMacsecScAttribute(context.Context, *SetMacsecScAttributeRequest) (*SetMacsecScAttributeResponse, error)
	GetMacsecScAttribute(context.Context, *GetMacsecScAttributeRequest) (*GetMacsecScAttributeResponse, error)
	GetMacsecScStats(context.Context, *GetMacsecScStatsRequest) (*GetMacsecScStatsResponse, error)
	CreateMacsecSa(context.Context, *CreateMacsecSaRequest) (*CreateMacsecSaResponse, error)
	RemoveMacsecSa(context.Context, *RemoveMacsecSaRequest) (*RemoveMacsecSaResponse, error)
	SetMacsecSaAttribute(context.Context, *SetMacsecSaAttributeRequest) (*SetMacsecSaAttributeResponse, error)
	GetMacsecSaAttribute(context.Context, *GetMacsecSaAttributeRequest) (*GetMacsecSaAttributeResponse, error)
	GetMacsecSaStats(context.Context, *GetMacsecSaStatsRequest) (*GetMacsecSaStatsResponse, error)
}

// UnimplementedMacsecServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMacsecServer struct{}

func (UnimplementedMacsecServer) CreateMacsec(context.Context, *CreateMacsecRequest) (*CreateMacsecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMacsec not implemented")
}
func (UnimplementedMacsecServer) RemoveMacsec(context.Context, *RemoveMacsecRequest) (*RemoveMacsecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMacsec not implemented")
}
func (UnimplementedMacsecServer) SetMacsecAttribute(context.Context, *SetMacsecAttributeRequest) (*SetMacsecAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMacsecAttribute not implemented")
}
func (UnimplementedMacsecServer) GetMacsecAttribute(context.Context, *GetMacsecAttributeRequest) (*GetMacsecAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecAttribute not implemented")
}
func (UnimplementedMacsecServer) CreateMacsecPort(context.Context, *CreateMacsecPortRequest) (*CreateMacsecPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMacsecPort not implemented")
}
func (UnimplementedMacsecServer) RemoveMacsecPort(context.Context, *RemoveMacsecPortRequest) (*RemoveMacsecPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMacsecPort not implemented")
}
func (UnimplementedMacsecServer) SetMacsecPortAttribute(context.Context, *SetMacsecPortAttributeRequest) (*SetMacsecPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMacsecPortAttribute not implemented")
}
func (UnimplementedMacsecServer) GetMacsecPortAttribute(context.Context, *GetMacsecPortAttributeRequest) (*GetMacsecPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecPortAttribute not implemented")
}
func (UnimplementedMacsecServer) GetMacsecPortStats(context.Context, *GetMacsecPortStatsRequest) (*GetMacsecPortStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecPortStats not implemented")
}
func (UnimplementedMacsecServer) CreateMacsecFlow(context.Context, *CreateMacsecFlowRequest) (*CreateMacsecFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMacsecFlow not implemented")
}
func (UnimplementedMacsecServer) RemoveMacsecFlow(context.Context, *RemoveMacsecFlowRequest) (*RemoveMacsecFlowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMacsecFlow not implemented")
}
func (UnimplementedMacsecServer) GetMacsecFlowAttribute(context.Context, *GetMacsecFlowAttributeRequest) (*GetMacsecFlowAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecFlowAttribute not implemented")
}
func (UnimplementedMacsecServer) GetMacsecFlowStats(context.Context, *GetMacsecFlowStatsRequest) (*GetMacsecFlowStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecFlowStats not implemented")
}
func (UnimplementedMacsecServer) CreateMacsecSc(context.Context, *CreateMacsecScRequest) (*CreateMacsecScResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMacsecSc not implemented")
}
func (UnimplementedMacsecServer) RemoveMacsecSc(context.Context, *RemoveMacsecScRequest) (*RemoveMacsecScResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMacsecSc not implemented")
}
func (UnimplementedMacsecServer) SetMacsecScAttribute(context.Context, *SetMacsecScAttributeRequest) (*SetMacsecScAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMacsecScAttribute not implemented")
}
func (UnimplementedMacsecServer) GetMacsecScAttribute(context.Context, *GetMacsecScAttributeRequest) (*GetMacsecScAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecScAttribute not implemented")
}
func (UnimplementedMacsecServer) GetMacsecScStats(context.Context, *GetMacsecScStatsRequest) (*GetMacsecScStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecScStats not implemented")
}
func (UnimplementedMacsecServer) CreateMacsecSa(context.Context, *CreateMacsecSaRequest) (*CreateMacsecSaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMacsecSa not implemented")
}
func (UnimplementedMacsecServer) RemoveMacsecSa(context.Context, *RemoveMacsecSaRequest) (*RemoveMacsecSaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMacsecSa not implemented")
}
func (UnimplementedMacsecServer) SetMacsecSaAttribute(context.Context, *SetMacsecSaAttributeRequest) (*SetMacsecSaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMacsecSaAttribute not implemented")
}
func (UnimplementedMacsecServer) GetMacsecSaAttribute(context.Context, *GetMacsecSaAttributeRequest) (*GetMacsecSaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecSaAttribute not implemented")
}
func (UnimplementedMacsecServer) GetMacsecSaStats(context.Context, *GetMacsecSaStatsRequest) (*GetMacsecSaStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMacsecSaStats not implemented")
}
func (UnimplementedMacsecServer) testEmbeddedByValue() {}

// UnsafeMacsecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MacsecServer will
// result in compilation errors.
type UnsafeMacsecServer interface {
	mustEmbedUnimplementedMacsecServer()
}

func RegisterMacsecServer(s grpc.ServiceRegistrar, srv MacsecServer) {
	// If the following call pancis, it indicates UnimplementedMacsecServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Macsec_ServiceDesc, srv)
}

func _Macsec_CreateMacsec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMacsecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).CreateMacsec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_CreateMacsec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).CreateMacsec(ctx, req.(*CreateMacsecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_RemoveMacsec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMacsecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).RemoveMacsec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_RemoveMacsec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).RemoveMacsec(ctx, req.(*RemoveMacsecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_SetMacsecAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMacsecAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).SetMacsecAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_SetMacsecAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).SetMacsecAttribute(ctx, req.(*SetMacsecAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_GetMacsecAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecAttribute(ctx, req.(*GetMacsecAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_CreateMacsecPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMacsecPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).CreateMacsecPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_CreateMacsecPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).CreateMacsecPort(ctx, req.(*CreateMacsecPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_RemoveMacsecPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMacsecPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).RemoveMacsecPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_RemoveMacsecPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).RemoveMacsecPort(ctx, req.(*RemoveMacsecPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_SetMacsecPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMacsecPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).SetMacsecPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_SetMacsecPortAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).SetMacsecPortAttribute(ctx, req.(*SetMacsecPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_GetMacsecPortAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecPortAttribute(ctx, req.(*GetMacsecPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecPortStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecPortStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecPortStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_GetMacsecPortStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecPortStats(ctx, req.(*GetMacsecPortStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_CreateMacsecFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMacsecFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).CreateMacsecFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_CreateMacsecFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).CreateMacsecFlow(ctx, req.(*CreateMacsecFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_RemoveMacsecFlow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMacsecFlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).RemoveMacsecFlow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_RemoveMacsecFlow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).RemoveMacsecFlow(ctx, req.(*RemoveMacsecFlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecFlowAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecFlowAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecFlowAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_GetMacsecFlowAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecFlowAttribute(ctx, req.(*GetMacsecFlowAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecFlowStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecFlowStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecFlowStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_GetMacsecFlowStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecFlowStats(ctx, req.(*GetMacsecFlowStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_CreateMacsecSc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMacsecScRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).CreateMacsecSc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_CreateMacsecSc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).CreateMacsecSc(ctx, req.(*CreateMacsecScRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_RemoveMacsecSc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMacsecScRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).RemoveMacsecSc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_RemoveMacsecSc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).RemoveMacsecSc(ctx, req.(*RemoveMacsecScRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_SetMacsecScAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMacsecScAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).SetMacsecScAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_SetMacsecScAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).SetMacsecScAttribute(ctx, req.(*SetMacsecScAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecScAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecScAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecScAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_GetMacsecScAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecScAttribute(ctx, req.(*GetMacsecScAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecScStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecScStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecScStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_GetMacsecScStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecScStats(ctx, req.(*GetMacsecScStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_CreateMacsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMacsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).CreateMacsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_CreateMacsecSa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).CreateMacsecSa(ctx, req.(*CreateMacsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_RemoveMacsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMacsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).RemoveMacsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_RemoveMacsecSa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).RemoveMacsecSa(ctx, req.(*RemoveMacsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_SetMacsecSaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMacsecSaAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).SetMacsecSaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_SetMacsecSaAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).SetMacsecSaAttribute(ctx, req.(*SetMacsecSaAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecSaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecSaAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecSaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_GetMacsecSaAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecSaAttribute(ctx, req.(*GetMacsecSaAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Macsec_GetMacsecSaStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMacsecSaStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecServer).GetMacsecSaStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Macsec_GetMacsecSaStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecServer).GetMacsecSaStats(ctx, req.(*GetMacsecSaStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Macsec_ServiceDesc is the grpc.ServiceDesc for Macsec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Macsec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Macsec",
	HandlerType: (*MacsecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMacsec",
			Handler:    _Macsec_CreateMacsec_Handler,
		},
		{
			MethodName: "RemoveMacsec",
			Handler:    _Macsec_RemoveMacsec_Handler,
		},
		{
			MethodName: "SetMacsecAttribute",
			Handler:    _Macsec_SetMacsecAttribute_Handler,
		},
		{
			MethodName: "GetMacsecAttribute",
			Handler:    _Macsec_GetMacsecAttribute_Handler,
		},
		{
			MethodName: "CreateMacsecPort",
			Handler:    _Macsec_CreateMacsecPort_Handler,
		},
		{
			MethodName: "RemoveMacsecPort",
			Handler:    _Macsec_RemoveMacsecPort_Handler,
		},
		{
			MethodName: "SetMacsecPortAttribute",
			Handler:    _Macsec_SetMacsecPortAttribute_Handler,
		},
		{
			MethodName: "GetMacsecPortAttribute",
			Handler:    _Macsec_GetMacsecPortAttribute_Handler,
		},
		{
			MethodName: "GetMacsecPortStats",
			Handler:    _Macsec_GetMacsecPortStats_Handler,
		},
		{
			MethodName: "CreateMacsecFlow",
			Handler:    _Macsec_CreateMacsecFlow_Handler,
		},
		{
			MethodName: "RemoveMacsecFlow",
			Handler:    _Macsec_RemoveMacsecFlow_Handler,
		},
		{
			MethodName: "GetMacsecFlowAttribute",
			Handler:    _Macsec_GetMacsecFlowAttribute_Handler,
		},
		{
			MethodName: "GetMacsecFlowStats",
			Handler:    _Macsec_GetMacsecFlowStats_Handler,
		},
		{
			MethodName: "CreateMacsecSc",
			Handler:    _Macsec_CreateMacsecSc_Handler,
		},
		{
			MethodName: "RemoveMacsecSc",
			Handler:    _Macsec_RemoveMacsecSc_Handler,
		},
		{
			MethodName: "SetMacsecScAttribute",
			Handler:    _Macsec_SetMacsecScAttribute_Handler,
		},
		{
			MethodName: "GetMacsecScAttribute",
			Handler:    _Macsec_GetMacsecScAttribute_Handler,
		},
		{
			MethodName: "GetMacsecScStats",
			Handler:    _Macsec_GetMacsecScStats_Handler,
		},
		{
			MethodName: "CreateMacsecSa",
			Handler:    _Macsec_CreateMacsecSa_Handler,
		},
		{
			MethodName: "RemoveMacsecSa",
			Handler:    _Macsec_RemoveMacsecSa_Handler,
		},
		{
			MethodName: "SetMacsecSaAttribute",
			Handler:    _Macsec_SetMacsecSaAttribute_Handler,
		},
		{
			MethodName: "GetMacsecSaAttribute",
			Handler:    _Macsec_GetMacsecSaAttribute_Handler,
		},
		{
			MethodName: "GetMacsecSaStats",
			Handler:    _Macsec_GetMacsecSaStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/macsec.proto",
}
