// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/counter.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Counter_CreateCounter_FullMethodName       = "/lemming.dataplane.sai.Counter/CreateCounter"
	Counter_RemoveCounter_FullMethodName       = "/lemming.dataplane.sai.Counter/RemoveCounter"
	Counter_SetCounterAttribute_FullMethodName = "/lemming.dataplane.sai.Counter/SetCounterAttribute"
	Counter_GetCounterAttribute_FullMethodName = "/lemming.dataplane.sai.Counter/GetCounterAttribute"
	Counter_GetCounterStats_FullMethodName     = "/lemming.dataplane.sai.Counter/GetCounterStats"
)

// CounterClient is the client API for Counter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterClient interface {
	CreateCounter(ctx context.Context, in *CreateCounterRequest, opts ...grpc.CallOption) (*CreateCounterResponse, error)
	RemoveCounter(ctx context.Context, in *RemoveCounterRequest, opts ...grpc.CallOption) (*RemoveCounterResponse, error)
	SetCounterAttribute(ctx context.Context, in *SetCounterAttributeRequest, opts ...grpc.CallOption) (*SetCounterAttributeResponse, error)
	GetCounterAttribute(ctx context.Context, in *GetCounterAttributeRequest, opts ...grpc.CallOption) (*GetCounterAttributeResponse, error)
	GetCounterStats(ctx context.Context, in *GetCounterStatsRequest, opts ...grpc.CallOption) (*GetCounterStatsResponse, error)
}

type counterClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterClient(cc grpc.ClientConnInterface) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) CreateCounter(ctx context.Context, in *CreateCounterRequest, opts ...grpc.CallOption) (*CreateCounterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCounterResponse)
	err := c.cc.Invoke(ctx, Counter_CreateCounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) RemoveCounter(ctx context.Context, in *RemoveCounterRequest, opts ...grpc.CallOption) (*RemoveCounterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveCounterResponse)
	err := c.cc.Invoke(ctx, Counter_RemoveCounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) SetCounterAttribute(ctx context.Context, in *SetCounterAttributeRequest, opts ...grpc.CallOption) (*SetCounterAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCounterAttributeResponse)
	err := c.cc.Invoke(ctx, Counter_SetCounterAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) GetCounterAttribute(ctx context.Context, in *GetCounterAttributeRequest, opts ...grpc.CallOption) (*GetCounterAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCounterAttributeResponse)
	err := c.cc.Invoke(ctx, Counter_GetCounterAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) GetCounterStats(ctx context.Context, in *GetCounterStatsRequest, opts ...grpc.CallOption) (*GetCounterStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCounterStatsResponse)
	err := c.cc.Invoke(ctx, Counter_GetCounterStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterServer is the server API for Counter service.
// All implementations should embed UnimplementedCounterServer
// for forward compatibility.
type CounterServer interface {
	CreateCounter(context.Context, *CreateCounterRequest) (*CreateCounterResponse, error)
	RemoveCounter(context.Context, *RemoveCounterRequest) (*RemoveCounterResponse, error)
	SetCounterAttribute(context.Context, *SetCounterAttributeRequest) (*SetCounterAttributeResponse, error)
	GetCounterAttribute(context.Context, *GetCounterAttributeRequest) (*GetCounterAttributeResponse, error)
	GetCounterStats(context.Context, *GetCounterStatsRequest) (*GetCounterStatsResponse, error)
}

// UnimplementedCounterServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCounterServer struct{}

func (UnimplementedCounterServer) CreateCounter(context.Context, *CreateCounterRequest) (*CreateCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCounter not implemented")
}
func (UnimplementedCounterServer) RemoveCounter(context.Context, *RemoveCounterRequest) (*RemoveCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCounter not implemented")
}
func (UnimplementedCounterServer) SetCounterAttribute(context.Context, *SetCounterAttributeRequest) (*SetCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCounterAttribute not implemented")
}
func (UnimplementedCounterServer) GetCounterAttribute(context.Context, *GetCounterAttributeRequest) (*GetCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounterAttribute not implemented")
}
func (UnimplementedCounterServer) GetCounterStats(context.Context, *GetCounterStatsRequest) (*GetCounterStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounterStats not implemented")
}
func (UnimplementedCounterServer) testEmbeddedByValue() {}

// UnsafeCounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterServer will
// result in compilation errors.
type UnsafeCounterServer interface {
	mustEmbedUnimplementedCounterServer()
}

func RegisterCounterServer(s grpc.ServiceRegistrar, srv CounterServer) {
	// If the following call pancis, it indicates UnimplementedCounterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Counter_ServiceDesc, srv)
}

func _Counter_CreateCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).CreateCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counter_CreateCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).CreateCounter(ctx, req.(*CreateCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_RemoveCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).RemoveCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counter_RemoveCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).RemoveCounter(ctx, req.(*RemoveCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_SetCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).SetCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counter_SetCounterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).SetCounterAttribute(ctx, req.(*SetCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_GetCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).GetCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counter_GetCounterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).GetCounterAttribute(ctx, req.(*GetCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_GetCounterStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCounterStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).GetCounterStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Counter_GetCounterStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).GetCounterStats(ctx, req.(*GetCounterStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Counter_ServiceDesc is the grpc.ServiceDesc for Counter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Counter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCounter",
			Handler:    _Counter_CreateCounter_Handler,
		},
		{
			MethodName: "RemoveCounter",
			Handler:    _Counter_RemoveCounter_Handler,
		},
		{
			MethodName: "SetCounterAttribute",
			Handler:    _Counter_SetCounterAttribute_Handler,
		},
		{
			MethodName: "GetCounterAttribute",
			Handler:    _Counter_GetCounterAttribute_Handler,
		},
		{
			MethodName: "GetCounterStats",
			Handler:    _Counter_GetCounterStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/counter.proto",
}
