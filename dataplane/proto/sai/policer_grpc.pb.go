// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/policer.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Policer_CreatePolicer_FullMethodName       = "/lemming.dataplane.sai.Policer/CreatePolicer"
	Policer_RemovePolicer_FullMethodName       = "/lemming.dataplane.sai.Policer/RemovePolicer"
	Policer_SetPolicerAttribute_FullMethodName = "/lemming.dataplane.sai.Policer/SetPolicerAttribute"
	Policer_GetPolicerAttribute_FullMethodName = "/lemming.dataplane.sai.Policer/GetPolicerAttribute"
	Policer_GetPolicerStats_FullMethodName     = "/lemming.dataplane.sai.Policer/GetPolicerStats"
)

// PolicerClient is the client API for Policer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicerClient interface {
	CreatePolicer(ctx context.Context, in *CreatePolicerRequest, opts ...grpc.CallOption) (*CreatePolicerResponse, error)
	RemovePolicer(ctx context.Context, in *RemovePolicerRequest, opts ...grpc.CallOption) (*RemovePolicerResponse, error)
	SetPolicerAttribute(ctx context.Context, in *SetPolicerAttributeRequest, opts ...grpc.CallOption) (*SetPolicerAttributeResponse, error)
	GetPolicerAttribute(ctx context.Context, in *GetPolicerAttributeRequest, opts ...grpc.CallOption) (*GetPolicerAttributeResponse, error)
	GetPolicerStats(ctx context.Context, in *GetPolicerStatsRequest, opts ...grpc.CallOption) (*GetPolicerStatsResponse, error)
}

type policerClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicerClient(cc grpc.ClientConnInterface) PolicerClient {
	return &policerClient{cc}
}

func (c *policerClient) CreatePolicer(ctx context.Context, in *CreatePolicerRequest, opts ...grpc.CallOption) (*CreatePolicerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePolicerResponse)
	err := c.cc.Invoke(ctx, Policer_CreatePolicer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policerClient) RemovePolicer(ctx context.Context, in *RemovePolicerRequest, opts ...grpc.CallOption) (*RemovePolicerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePolicerResponse)
	err := c.cc.Invoke(ctx, Policer_RemovePolicer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policerClient) SetPolicerAttribute(ctx context.Context, in *SetPolicerAttributeRequest, opts ...grpc.CallOption) (*SetPolicerAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPolicerAttributeResponse)
	err := c.cc.Invoke(ctx, Policer_SetPolicerAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policerClient) GetPolicerAttribute(ctx context.Context, in *GetPolicerAttributeRequest, opts ...grpc.CallOption) (*GetPolicerAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPolicerAttributeResponse)
	err := c.cc.Invoke(ctx, Policer_GetPolicerAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policerClient) GetPolicerStats(ctx context.Context, in *GetPolicerStatsRequest, opts ...grpc.CallOption) (*GetPolicerStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPolicerStatsResponse)
	err := c.cc.Invoke(ctx, Policer_GetPolicerStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicerServer is the server API for Policer service.
// All implementations should embed UnimplementedPolicerServer
// for forward compatibility.
type PolicerServer interface {
	CreatePolicer(context.Context, *CreatePolicerRequest) (*CreatePolicerResponse, error)
	RemovePolicer(context.Context, *RemovePolicerRequest) (*RemovePolicerResponse, error)
	SetPolicerAttribute(context.Context, *SetPolicerAttributeRequest) (*SetPolicerAttributeResponse, error)
	GetPolicerAttribute(context.Context, *GetPolicerAttributeRequest) (*GetPolicerAttributeResponse, error)
	GetPolicerStats(context.Context, *GetPolicerStatsRequest) (*GetPolicerStatsResponse, error)
}

// UnimplementedPolicerServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPolicerServer struct{}

func (UnimplementedPolicerServer) CreatePolicer(context.Context, *CreatePolicerRequest) (*CreatePolicerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicer not implemented")
}
func (UnimplementedPolicerServer) RemovePolicer(context.Context, *RemovePolicerRequest) (*RemovePolicerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicer not implemented")
}
func (UnimplementedPolicerServer) SetPolicerAttribute(context.Context, *SetPolicerAttributeRequest) (*SetPolicerAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPolicerAttribute not implemented")
}
func (UnimplementedPolicerServer) GetPolicerAttribute(context.Context, *GetPolicerAttributeRequest) (*GetPolicerAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicerAttribute not implemented")
}
func (UnimplementedPolicerServer) GetPolicerStats(context.Context, *GetPolicerStatsRequest) (*GetPolicerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicerStats not implemented")
}
func (UnimplementedPolicerServer) testEmbeddedByValue() {}

// UnsafePolicerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicerServer will
// result in compilation errors.
type UnsafePolicerServer interface {
	mustEmbedUnimplementedPolicerServer()
}

func RegisterPolicerServer(s grpc.ServiceRegistrar, srv PolicerServer) {
	// If the following call pancis, it indicates UnimplementedPolicerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Policer_ServiceDesc, srv)
}

func _Policer_CreatePolicer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicerServer).CreatePolicer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Policer_CreatePolicer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicerServer).CreatePolicer(ctx, req.(*CreatePolicerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policer_RemovePolicer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePolicerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicerServer).RemovePolicer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Policer_RemovePolicer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicerServer).RemovePolicer(ctx, req.(*RemovePolicerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policer_SetPolicerAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPolicerAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicerServer).SetPolicerAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Policer_SetPolicerAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicerServer).SetPolicerAttribute(ctx, req.(*SetPolicerAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policer_GetPolicerAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicerAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicerServer).GetPolicerAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Policer_GetPolicerAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicerServer).GetPolicerAttribute(ctx, req.(*GetPolicerAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policer_GetPolicerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicerServer).GetPolicerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Policer_GetPolicerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicerServer).GetPolicerStats(ctx, req.(*GetPolicerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Policer_ServiceDesc is the grpc.ServiceDesc for Policer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Policer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Policer",
	HandlerType: (*PolicerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicer",
			Handler:    _Policer_CreatePolicer_Handler,
		},
		{
			MethodName: "RemovePolicer",
			Handler:    _Policer_RemovePolicer_Handler,
		},
		{
			MethodName: "SetPolicerAttribute",
			Handler:    _Policer_SetPolicerAttribute_Handler,
		},
		{
			MethodName: "GetPolicerAttribute",
			Handler:    _Policer_GetPolicerAttribute_Handler,
		},
		{
			MethodName: "GetPolicerStats",
			Handler:    _Policer_GetPolicerStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/policer.proto",
}
