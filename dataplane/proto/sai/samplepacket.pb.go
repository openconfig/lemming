// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/proto/sai/samplepacket.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SamplepacketAttr int32

const (
	SamplepacketAttr_SAMPLEPACKET_ATTR_UNSPECIFIED SamplepacketAttr = 0
	SamplepacketAttr_SAMPLEPACKET_ATTR_SAMPLE_RATE SamplepacketAttr = 1
	SamplepacketAttr_SAMPLEPACKET_ATTR_TYPE        SamplepacketAttr = 2
	SamplepacketAttr_SAMPLEPACKET_ATTR_MODE        SamplepacketAttr = 3
)

// Enum value maps for SamplepacketAttr.
var (
	SamplepacketAttr_name = map[int32]string{
		0: "SAMPLEPACKET_ATTR_UNSPECIFIED",
		1: "SAMPLEPACKET_ATTR_SAMPLE_RATE",
		2: "SAMPLEPACKET_ATTR_TYPE",
		3: "SAMPLEPACKET_ATTR_MODE",
	}
	SamplepacketAttr_value = map[string]int32{
		"SAMPLEPACKET_ATTR_UNSPECIFIED": 0,
		"SAMPLEPACKET_ATTR_SAMPLE_RATE": 1,
		"SAMPLEPACKET_ATTR_TYPE":        2,
		"SAMPLEPACKET_ATTR_MODE":        3,
	}
)

func (x SamplepacketAttr) Enum() *SamplepacketAttr {
	p := new(SamplepacketAttr)
	*p = x
	return p
}

func (x SamplepacketAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SamplepacketAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_samplepacket_proto_enumTypes[0].Descriptor()
}

func (SamplepacketAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_samplepacket_proto_enumTypes[0]
}

func (x SamplepacketAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SamplepacketAttr.Descriptor instead.
func (SamplepacketAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_samplepacket_proto_rawDescGZIP(), []int{0}
}

type CreateSamplepacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch     uint64            `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	SampleRate *uint32           `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate,proto3,oneof" json:"sample_rate,omitempty"`
	Type       *SamplepacketType `protobuf:"varint,3,opt,name=type,proto3,enum=lemming.dataplane.sai.SamplepacketType,oneof" json:"type,omitempty"`
	Mode       *SamplepacketMode `protobuf:"varint,4,opt,name=mode,proto3,enum=lemming.dataplane.sai.SamplepacketMode,oneof" json:"mode,omitempty"`
}

func (x *CreateSamplepacketRequest) Reset() {
	*x = CreateSamplepacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSamplepacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSamplepacketRequest) ProtoMessage() {}

func (x *CreateSamplepacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSamplepacketRequest.ProtoReflect.Descriptor instead.
func (*CreateSamplepacketRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_samplepacket_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSamplepacketRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateSamplepacketRequest) GetSampleRate() uint32 {
	if x != nil && x.SampleRate != nil {
		return *x.SampleRate
	}
	return 0
}

func (x *CreateSamplepacketRequest) GetType() SamplepacketType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SamplepacketType_SAMPLEPACKET_TYPE_UNSPECIFIED
}

func (x *CreateSamplepacketRequest) GetMode() SamplepacketMode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return SamplepacketMode_SAMPLEPACKET_MODE_UNSPECIFIED
}

type CreateSamplepacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateSamplepacketResponse) Reset() {
	*x = CreateSamplepacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSamplepacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSamplepacketResponse) ProtoMessage() {}

func (x *CreateSamplepacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSamplepacketResponse.ProtoReflect.Descriptor instead.
func (*CreateSamplepacketResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_samplepacket_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSamplepacketResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveSamplepacketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveSamplepacketRequest) Reset() {
	*x = RemoveSamplepacketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSamplepacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSamplepacketRequest) ProtoMessage() {}

func (x *RemoveSamplepacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSamplepacketRequest.ProtoReflect.Descriptor instead.
func (*RemoveSamplepacketRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_samplepacket_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveSamplepacketRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveSamplepacketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSamplepacketResponse) Reset() {
	*x = RemoveSamplepacketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSamplepacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSamplepacketResponse) ProtoMessage() {}

func (x *RemoveSamplepacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSamplepacketResponse.ProtoReflect.Descriptor instead.
func (*RemoveSamplepacketResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_samplepacket_proto_rawDescGZIP(), []int{3}
}

type SetSamplepacketAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	SampleRate *uint32 `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate,proto3,oneof" json:"sample_rate,omitempty"`
}

func (x *SetSamplepacketAttributeRequest) Reset() {
	*x = SetSamplepacketAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSamplepacketAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSamplepacketAttributeRequest) ProtoMessage() {}

func (x *SetSamplepacketAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSamplepacketAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetSamplepacketAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_samplepacket_proto_rawDescGZIP(), []int{4}
}

func (x *SetSamplepacketAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetSamplepacketAttributeRequest) GetSampleRate() uint32 {
	if x != nil && x.SampleRate != nil {
		return *x.SampleRate
	}
	return 0
}

type SetSamplepacketAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSamplepacketAttributeResponse) Reset() {
	*x = SetSamplepacketAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSamplepacketAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSamplepacketAttributeResponse) ProtoMessage() {}

func (x *SetSamplepacketAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSamplepacketAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetSamplepacketAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_samplepacket_proto_rawDescGZIP(), []int{5}
}

type GetSamplepacketAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64             `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []SamplepacketAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.SamplepacketAttr" json:"attr_type,omitempty"`
}

func (x *GetSamplepacketAttributeRequest) Reset() {
	*x = GetSamplepacketAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSamplepacketAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSamplepacketAttributeRequest) ProtoMessage() {}

func (x *GetSamplepacketAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSamplepacketAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetSamplepacketAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_samplepacket_proto_rawDescGZIP(), []int{6}
}

func (x *GetSamplepacketAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetSamplepacketAttributeRequest) GetAttrType() []SamplepacketAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetSamplepacketAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *SamplepacketAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetSamplepacketAttributeResponse) Reset() {
	*x = GetSamplepacketAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSamplepacketAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSamplepacketAttributeResponse) ProtoMessage() {}

func (x *GetSamplepacketAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_samplepacket_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSamplepacketAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetSamplepacketAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_samplepacket_proto_rawDescGZIP(), []int{7}
}

func (x *GetSamplepacketAttributeResponse) GetAttr() *SamplepacketAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_proto_sai_samplepacket_proto protoreflect.FileDescriptor

var file_dataplane_proto_sai_samplepacket_proto_rawDesc = []byte{
	0x0a, 0x26, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x61, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x48, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x02,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f,
	0x10, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x71, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x64, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x2a, 0x90, 0x01, 0x0a, 0x10, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x50, 0x41, 0x43,
	0x4b, 0x45, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x50, 0x41, 0x43, 0x4b, 0x45, 0x54, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x32, 0xa8, 0x04, 0x0a, 0x0c,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x7b, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x30, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_dataplane_proto_sai_samplepacket_proto_rawDescOnce sync.Once
	file_dataplane_proto_sai_samplepacket_proto_rawDescData = file_dataplane_proto_sai_samplepacket_proto_rawDesc
)

func file_dataplane_proto_sai_samplepacket_proto_rawDescGZIP() []byte {
	file_dataplane_proto_sai_samplepacket_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_sai_samplepacket_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_sai_samplepacket_proto_rawDescData)
	})
	return file_dataplane_proto_sai_samplepacket_proto_rawDescData
}

var file_dataplane_proto_sai_samplepacket_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_proto_sai_samplepacket_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dataplane_proto_sai_samplepacket_proto_goTypes = []interface{}{
	(SamplepacketAttr)(0),                    // 0: lemming.dataplane.sai.SamplepacketAttr
	(*CreateSamplepacketRequest)(nil),        // 1: lemming.dataplane.sai.CreateSamplepacketRequest
	(*CreateSamplepacketResponse)(nil),       // 2: lemming.dataplane.sai.CreateSamplepacketResponse
	(*RemoveSamplepacketRequest)(nil),        // 3: lemming.dataplane.sai.RemoveSamplepacketRequest
	(*RemoveSamplepacketResponse)(nil),       // 4: lemming.dataplane.sai.RemoveSamplepacketResponse
	(*SetSamplepacketAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetSamplepacketAttributeRequest
	(*SetSamplepacketAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetSamplepacketAttributeResponse
	(*GetSamplepacketAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetSamplepacketAttributeRequest
	(*GetSamplepacketAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetSamplepacketAttributeResponse
	(SamplepacketType)(0),                    // 9: lemming.dataplane.sai.SamplepacketType
	(SamplepacketMode)(0),                    // 10: lemming.dataplane.sai.SamplepacketMode
	(*SamplepacketAttribute)(nil),            // 11: lemming.dataplane.sai.SamplepacketAttribute
}
var file_dataplane_proto_sai_samplepacket_proto_depIdxs = []int32{
	9,  // 0: lemming.dataplane.sai.CreateSamplepacketRequest.type:type_name -> lemming.dataplane.sai.SamplepacketType
	10, // 1: lemming.dataplane.sai.CreateSamplepacketRequest.mode:type_name -> lemming.dataplane.sai.SamplepacketMode
	0,  // 2: lemming.dataplane.sai.GetSamplepacketAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.SamplepacketAttr
	11, // 3: lemming.dataplane.sai.GetSamplepacketAttributeResponse.attr:type_name -> lemming.dataplane.sai.SamplepacketAttribute
	1,  // 4: lemming.dataplane.sai.Samplepacket.CreateSamplepacket:input_type -> lemming.dataplane.sai.CreateSamplepacketRequest
	3,  // 5: lemming.dataplane.sai.Samplepacket.RemoveSamplepacket:input_type -> lemming.dataplane.sai.RemoveSamplepacketRequest
	5,  // 6: lemming.dataplane.sai.Samplepacket.SetSamplepacketAttribute:input_type -> lemming.dataplane.sai.SetSamplepacketAttributeRequest
	7,  // 7: lemming.dataplane.sai.Samplepacket.GetSamplepacketAttribute:input_type -> lemming.dataplane.sai.GetSamplepacketAttributeRequest
	2,  // 8: lemming.dataplane.sai.Samplepacket.CreateSamplepacket:output_type -> lemming.dataplane.sai.CreateSamplepacketResponse
	4,  // 9: lemming.dataplane.sai.Samplepacket.RemoveSamplepacket:output_type -> lemming.dataplane.sai.RemoveSamplepacketResponse
	6,  // 10: lemming.dataplane.sai.Samplepacket.SetSamplepacketAttribute:output_type -> lemming.dataplane.sai.SetSamplepacketAttributeResponse
	8,  // 11: lemming.dataplane.sai.Samplepacket.GetSamplepacketAttribute:output_type -> lemming.dataplane.sai.GetSamplepacketAttributeResponse
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_dataplane_proto_sai_samplepacket_proto_init() }
func file_dataplane_proto_sai_samplepacket_proto_init() {
	if File_dataplane_proto_sai_samplepacket_proto != nil {
		return
	}
	file_dataplane_proto_sai_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_sai_samplepacket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSamplepacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_samplepacket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSamplepacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_samplepacket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSamplepacketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_samplepacket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSamplepacketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_samplepacket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSamplepacketAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_samplepacket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSamplepacketAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_samplepacket_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSamplepacketAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_samplepacket_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSamplepacketAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_sai_samplepacket_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_proto_sai_samplepacket_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_sai_samplepacket_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_sai_samplepacket_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_sai_samplepacket_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_sai_samplepacket_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_sai_samplepacket_proto_msgTypes,
	}.Build()
	File_dataplane_proto_sai_samplepacket_proto = out.File
	file_dataplane_proto_sai_samplepacket_proto_rawDesc = nil
	file_dataplane_proto_sai_samplepacket_proto_goTypes = nil
	file_dataplane_proto_sai_samplepacket_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SamplepacketClient is the client API for Samplepacket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SamplepacketClient interface {
	CreateSamplepacket(ctx context.Context, in *CreateSamplepacketRequest, opts ...grpc.CallOption) (*CreateSamplepacketResponse, error)
	RemoveSamplepacket(ctx context.Context, in *RemoveSamplepacketRequest, opts ...grpc.CallOption) (*RemoveSamplepacketResponse, error)
	SetSamplepacketAttribute(ctx context.Context, in *SetSamplepacketAttributeRequest, opts ...grpc.CallOption) (*SetSamplepacketAttributeResponse, error)
	GetSamplepacketAttribute(ctx context.Context, in *GetSamplepacketAttributeRequest, opts ...grpc.CallOption) (*GetSamplepacketAttributeResponse, error)
}

type samplepacketClient struct {
	cc grpc.ClientConnInterface
}

func NewSamplepacketClient(cc grpc.ClientConnInterface) SamplepacketClient {
	return &samplepacketClient{cc}
}

func (c *samplepacketClient) CreateSamplepacket(ctx context.Context, in *CreateSamplepacketRequest, opts ...grpc.CallOption) (*CreateSamplepacketResponse, error) {
	out := new(CreateSamplepacketResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Samplepacket/CreateSamplepacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplepacketClient) RemoveSamplepacket(ctx context.Context, in *RemoveSamplepacketRequest, opts ...grpc.CallOption) (*RemoveSamplepacketResponse, error) {
	out := new(RemoveSamplepacketResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Samplepacket/RemoveSamplepacket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplepacketClient) SetSamplepacketAttribute(ctx context.Context, in *SetSamplepacketAttributeRequest, opts ...grpc.CallOption) (*SetSamplepacketAttributeResponse, error) {
	out := new(SetSamplepacketAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Samplepacket/SetSamplepacketAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplepacketClient) GetSamplepacketAttribute(ctx context.Context, in *GetSamplepacketAttributeRequest, opts ...grpc.CallOption) (*GetSamplepacketAttributeResponse, error) {
	out := new(GetSamplepacketAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Samplepacket/GetSamplepacketAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SamplepacketServer is the server API for Samplepacket service.
type SamplepacketServer interface {
	CreateSamplepacket(context.Context, *CreateSamplepacketRequest) (*CreateSamplepacketResponse, error)
	RemoveSamplepacket(context.Context, *RemoveSamplepacketRequest) (*RemoveSamplepacketResponse, error)
	SetSamplepacketAttribute(context.Context, *SetSamplepacketAttributeRequest) (*SetSamplepacketAttributeResponse, error)
	GetSamplepacketAttribute(context.Context, *GetSamplepacketAttributeRequest) (*GetSamplepacketAttributeResponse, error)
}

// UnimplementedSamplepacketServer can be embedded to have forward compatible implementations.
type UnimplementedSamplepacketServer struct {
}

func (*UnimplementedSamplepacketServer) CreateSamplepacket(context.Context, *CreateSamplepacketRequest) (*CreateSamplepacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSamplepacket not implemented")
}
func (*UnimplementedSamplepacketServer) RemoveSamplepacket(context.Context, *RemoveSamplepacketRequest) (*RemoveSamplepacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSamplepacket not implemented")
}
func (*UnimplementedSamplepacketServer) SetSamplepacketAttribute(context.Context, *SetSamplepacketAttributeRequest) (*SetSamplepacketAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSamplepacketAttribute not implemented")
}
func (*UnimplementedSamplepacketServer) GetSamplepacketAttribute(context.Context, *GetSamplepacketAttributeRequest) (*GetSamplepacketAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSamplepacketAttribute not implemented")
}

func RegisterSamplepacketServer(s *grpc.Server, srv SamplepacketServer) {
	s.RegisterService(&_Samplepacket_serviceDesc, srv)
}

func _Samplepacket_CreateSamplepacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSamplepacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplepacketServer).CreateSamplepacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Samplepacket/CreateSamplepacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplepacketServer).CreateSamplepacket(ctx, req.(*CreateSamplepacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Samplepacket_RemoveSamplepacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSamplepacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplepacketServer).RemoveSamplepacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Samplepacket/RemoveSamplepacket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplepacketServer).RemoveSamplepacket(ctx, req.(*RemoveSamplepacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Samplepacket_SetSamplepacketAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSamplepacketAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplepacketServer).SetSamplepacketAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Samplepacket/SetSamplepacketAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplepacketServer).SetSamplepacketAttribute(ctx, req.(*SetSamplepacketAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Samplepacket_GetSamplepacketAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSamplepacketAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplepacketServer).GetSamplepacketAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Samplepacket/GetSamplepacketAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplepacketServer).GetSamplepacketAttribute(ctx, req.(*GetSamplepacketAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Samplepacket_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Samplepacket",
	HandlerType: (*SamplepacketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSamplepacket",
			Handler:    _Samplepacket_CreateSamplepacket_Handler,
		},
		{
			MethodName: "RemoveSamplepacket",
			Handler:    _Samplepacket_RemoveSamplepacket_Handler,
		},
		{
			MethodName: "SetSamplepacketAttribute",
			Handler:    _Samplepacket_SetSamplepacketAttribute_Handler,
		},
		{
			MethodName: "GetSamplepacketAttribute",
			Handler:    _Samplepacket_GetSamplepacketAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/samplepacket.proto",
}
