// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/tam.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tam_CreateTam_FullMethodName                          = "/lemming.dataplane.sai.Tam/CreateTam"
	Tam_RemoveTam_FullMethodName                          = "/lemming.dataplane.sai.Tam/RemoveTam"
	Tam_SetTamAttribute_FullMethodName                    = "/lemming.dataplane.sai.Tam/SetTamAttribute"
	Tam_GetTamAttribute_FullMethodName                    = "/lemming.dataplane.sai.Tam/GetTamAttribute"
	Tam_CreateTamMathFunc_FullMethodName                  = "/lemming.dataplane.sai.Tam/CreateTamMathFunc"
	Tam_RemoveTamMathFunc_FullMethodName                  = "/lemming.dataplane.sai.Tam/RemoveTamMathFunc"
	Tam_SetTamMathFuncAttribute_FullMethodName            = "/lemming.dataplane.sai.Tam/SetTamMathFuncAttribute"
	Tam_GetTamMathFuncAttribute_FullMethodName            = "/lemming.dataplane.sai.Tam/GetTamMathFuncAttribute"
	Tam_CreateTamReport_FullMethodName                    = "/lemming.dataplane.sai.Tam/CreateTamReport"
	Tam_RemoveTamReport_FullMethodName                    = "/lemming.dataplane.sai.Tam/RemoveTamReport"
	Tam_SetTamReportAttribute_FullMethodName              = "/lemming.dataplane.sai.Tam/SetTamReportAttribute"
	Tam_GetTamReportAttribute_FullMethodName              = "/lemming.dataplane.sai.Tam/GetTamReportAttribute"
	Tam_CreateTamEventThreshold_FullMethodName            = "/lemming.dataplane.sai.Tam/CreateTamEventThreshold"
	Tam_RemoveTamEventThreshold_FullMethodName            = "/lemming.dataplane.sai.Tam/RemoveTamEventThreshold"
	Tam_SetTamEventThresholdAttribute_FullMethodName      = "/lemming.dataplane.sai.Tam/SetTamEventThresholdAttribute"
	Tam_GetTamEventThresholdAttribute_FullMethodName      = "/lemming.dataplane.sai.Tam/GetTamEventThresholdAttribute"
	Tam_CreateTamInt_FullMethodName                       = "/lemming.dataplane.sai.Tam/CreateTamInt"
	Tam_RemoveTamInt_FullMethodName                       = "/lemming.dataplane.sai.Tam/RemoveTamInt"
	Tam_SetTamIntAttribute_FullMethodName                 = "/lemming.dataplane.sai.Tam/SetTamIntAttribute"
	Tam_GetTamIntAttribute_FullMethodName                 = "/lemming.dataplane.sai.Tam/GetTamIntAttribute"
	Tam_CreateTamTelType_FullMethodName                   = "/lemming.dataplane.sai.Tam/CreateTamTelType"
	Tam_RemoveTamTelType_FullMethodName                   = "/lemming.dataplane.sai.Tam/RemoveTamTelType"
	Tam_SetTamTelTypeAttribute_FullMethodName             = "/lemming.dataplane.sai.Tam/SetTamTelTypeAttribute"
	Tam_GetTamTelTypeAttribute_FullMethodName             = "/lemming.dataplane.sai.Tam/GetTamTelTypeAttribute"
	Tam_CreateTamTransport_FullMethodName                 = "/lemming.dataplane.sai.Tam/CreateTamTransport"
	Tam_RemoveTamTransport_FullMethodName                 = "/lemming.dataplane.sai.Tam/RemoveTamTransport"
	Tam_SetTamTransportAttribute_FullMethodName           = "/lemming.dataplane.sai.Tam/SetTamTransportAttribute"
	Tam_GetTamTransportAttribute_FullMethodName           = "/lemming.dataplane.sai.Tam/GetTamTransportAttribute"
	Tam_CreateTamTelemetry_FullMethodName                 = "/lemming.dataplane.sai.Tam/CreateTamTelemetry"
	Tam_RemoveTamTelemetry_FullMethodName                 = "/lemming.dataplane.sai.Tam/RemoveTamTelemetry"
	Tam_SetTamTelemetryAttribute_FullMethodName           = "/lemming.dataplane.sai.Tam/SetTamTelemetryAttribute"
	Tam_GetTamTelemetryAttribute_FullMethodName           = "/lemming.dataplane.sai.Tam/GetTamTelemetryAttribute"
	Tam_CreateTamCollector_FullMethodName                 = "/lemming.dataplane.sai.Tam/CreateTamCollector"
	Tam_RemoveTamCollector_FullMethodName                 = "/lemming.dataplane.sai.Tam/RemoveTamCollector"
	Tam_SetTamCollectorAttribute_FullMethodName           = "/lemming.dataplane.sai.Tam/SetTamCollectorAttribute"
	Tam_GetTamCollectorAttribute_FullMethodName           = "/lemming.dataplane.sai.Tam/GetTamCollectorAttribute"
	Tam_CreateTamEventAction_FullMethodName               = "/lemming.dataplane.sai.Tam/CreateTamEventAction"
	Tam_RemoveTamEventAction_FullMethodName               = "/lemming.dataplane.sai.Tam/RemoveTamEventAction"
	Tam_SetTamEventActionAttribute_FullMethodName         = "/lemming.dataplane.sai.Tam/SetTamEventActionAttribute"
	Tam_GetTamEventActionAttribute_FullMethodName         = "/lemming.dataplane.sai.Tam/GetTamEventActionAttribute"
	Tam_CreateTamEvent_FullMethodName                     = "/lemming.dataplane.sai.Tam/CreateTamEvent"
	Tam_RemoveTamEvent_FullMethodName                     = "/lemming.dataplane.sai.Tam/RemoveTamEvent"
	Tam_SetTamEventAttribute_FullMethodName               = "/lemming.dataplane.sai.Tam/SetTamEventAttribute"
	Tam_GetTamEventAttribute_FullMethodName               = "/lemming.dataplane.sai.Tam/GetTamEventAttribute"
	Tam_CreateTamCounterSubscription_FullMethodName       = "/lemming.dataplane.sai.Tam/CreateTamCounterSubscription"
	Tam_RemoveTamCounterSubscription_FullMethodName       = "/lemming.dataplane.sai.Tam/RemoveTamCounterSubscription"
	Tam_GetTamCounterSubscriptionAttribute_FullMethodName = "/lemming.dataplane.sai.Tam/GetTamCounterSubscriptionAttribute"
)

// TamClient is the client API for Tam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TamClient interface {
	CreateTam(ctx context.Context, in *CreateTamRequest, opts ...grpc.CallOption) (*CreateTamResponse, error)
	RemoveTam(ctx context.Context, in *RemoveTamRequest, opts ...grpc.CallOption) (*RemoveTamResponse, error)
	SetTamAttribute(ctx context.Context, in *SetTamAttributeRequest, opts ...grpc.CallOption) (*SetTamAttributeResponse, error)
	GetTamAttribute(ctx context.Context, in *GetTamAttributeRequest, opts ...grpc.CallOption) (*GetTamAttributeResponse, error)
	CreateTamMathFunc(ctx context.Context, in *CreateTamMathFuncRequest, opts ...grpc.CallOption) (*CreateTamMathFuncResponse, error)
	RemoveTamMathFunc(ctx context.Context, in *RemoveTamMathFuncRequest, opts ...grpc.CallOption) (*RemoveTamMathFuncResponse, error)
	SetTamMathFuncAttribute(ctx context.Context, in *SetTamMathFuncAttributeRequest, opts ...grpc.CallOption) (*SetTamMathFuncAttributeResponse, error)
	GetTamMathFuncAttribute(ctx context.Context, in *GetTamMathFuncAttributeRequest, opts ...grpc.CallOption) (*GetTamMathFuncAttributeResponse, error)
	CreateTamReport(ctx context.Context, in *CreateTamReportRequest, opts ...grpc.CallOption) (*CreateTamReportResponse, error)
	RemoveTamReport(ctx context.Context, in *RemoveTamReportRequest, opts ...grpc.CallOption) (*RemoveTamReportResponse, error)
	SetTamReportAttribute(ctx context.Context, in *SetTamReportAttributeRequest, opts ...grpc.CallOption) (*SetTamReportAttributeResponse, error)
	GetTamReportAttribute(ctx context.Context, in *GetTamReportAttributeRequest, opts ...grpc.CallOption) (*GetTamReportAttributeResponse, error)
	CreateTamEventThreshold(ctx context.Context, in *CreateTamEventThresholdRequest, opts ...grpc.CallOption) (*CreateTamEventThresholdResponse, error)
	RemoveTamEventThreshold(ctx context.Context, in *RemoveTamEventThresholdRequest, opts ...grpc.CallOption) (*RemoveTamEventThresholdResponse, error)
	SetTamEventThresholdAttribute(ctx context.Context, in *SetTamEventThresholdAttributeRequest, opts ...grpc.CallOption) (*SetTamEventThresholdAttributeResponse, error)
	GetTamEventThresholdAttribute(ctx context.Context, in *GetTamEventThresholdAttributeRequest, opts ...grpc.CallOption) (*GetTamEventThresholdAttributeResponse, error)
	CreateTamInt(ctx context.Context, in *CreateTamIntRequest, opts ...grpc.CallOption) (*CreateTamIntResponse, error)
	RemoveTamInt(ctx context.Context, in *RemoveTamIntRequest, opts ...grpc.CallOption) (*RemoveTamIntResponse, error)
	SetTamIntAttribute(ctx context.Context, in *SetTamIntAttributeRequest, opts ...grpc.CallOption) (*SetTamIntAttributeResponse, error)
	GetTamIntAttribute(ctx context.Context, in *GetTamIntAttributeRequest, opts ...grpc.CallOption) (*GetTamIntAttributeResponse, error)
	CreateTamTelType(ctx context.Context, in *CreateTamTelTypeRequest, opts ...grpc.CallOption) (*CreateTamTelTypeResponse, error)
	RemoveTamTelType(ctx context.Context, in *RemoveTamTelTypeRequest, opts ...grpc.CallOption) (*RemoveTamTelTypeResponse, error)
	SetTamTelTypeAttribute(ctx context.Context, in *SetTamTelTypeAttributeRequest, opts ...grpc.CallOption) (*SetTamTelTypeAttributeResponse, error)
	GetTamTelTypeAttribute(ctx context.Context, in *GetTamTelTypeAttributeRequest, opts ...grpc.CallOption) (*GetTamTelTypeAttributeResponse, error)
	CreateTamTransport(ctx context.Context, in *CreateTamTransportRequest, opts ...grpc.CallOption) (*CreateTamTransportResponse, error)
	RemoveTamTransport(ctx context.Context, in *RemoveTamTransportRequest, opts ...grpc.CallOption) (*RemoveTamTransportResponse, error)
	SetTamTransportAttribute(ctx context.Context, in *SetTamTransportAttributeRequest, opts ...grpc.CallOption) (*SetTamTransportAttributeResponse, error)
	GetTamTransportAttribute(ctx context.Context, in *GetTamTransportAttributeRequest, opts ...grpc.CallOption) (*GetTamTransportAttributeResponse, error)
	CreateTamTelemetry(ctx context.Context, in *CreateTamTelemetryRequest, opts ...grpc.CallOption) (*CreateTamTelemetryResponse, error)
	RemoveTamTelemetry(ctx context.Context, in *RemoveTamTelemetryRequest, opts ...grpc.CallOption) (*RemoveTamTelemetryResponse, error)
	SetTamTelemetryAttribute(ctx context.Context, in *SetTamTelemetryAttributeRequest, opts ...grpc.CallOption) (*SetTamTelemetryAttributeResponse, error)
	GetTamTelemetryAttribute(ctx context.Context, in *GetTamTelemetryAttributeRequest, opts ...grpc.CallOption) (*GetTamTelemetryAttributeResponse, error)
	CreateTamCollector(ctx context.Context, in *CreateTamCollectorRequest, opts ...grpc.CallOption) (*CreateTamCollectorResponse, error)
	RemoveTamCollector(ctx context.Context, in *RemoveTamCollectorRequest, opts ...grpc.CallOption) (*RemoveTamCollectorResponse, error)
	SetTamCollectorAttribute(ctx context.Context, in *SetTamCollectorAttributeRequest, opts ...grpc.CallOption) (*SetTamCollectorAttributeResponse, error)
	GetTamCollectorAttribute(ctx context.Context, in *GetTamCollectorAttributeRequest, opts ...grpc.CallOption) (*GetTamCollectorAttributeResponse, error)
	CreateTamEventAction(ctx context.Context, in *CreateTamEventActionRequest, opts ...grpc.CallOption) (*CreateTamEventActionResponse, error)
	RemoveTamEventAction(ctx context.Context, in *RemoveTamEventActionRequest, opts ...grpc.CallOption) (*RemoveTamEventActionResponse, error)
	SetTamEventActionAttribute(ctx context.Context, in *SetTamEventActionAttributeRequest, opts ...grpc.CallOption) (*SetTamEventActionAttributeResponse, error)
	GetTamEventActionAttribute(ctx context.Context, in *GetTamEventActionAttributeRequest, opts ...grpc.CallOption) (*GetTamEventActionAttributeResponse, error)
	CreateTamEvent(ctx context.Context, in *CreateTamEventRequest, opts ...grpc.CallOption) (*CreateTamEventResponse, error)
	RemoveTamEvent(ctx context.Context, in *RemoveTamEventRequest, opts ...grpc.CallOption) (*RemoveTamEventResponse, error)
	SetTamEventAttribute(ctx context.Context, in *SetTamEventAttributeRequest, opts ...grpc.CallOption) (*SetTamEventAttributeResponse, error)
	GetTamEventAttribute(ctx context.Context, in *GetTamEventAttributeRequest, opts ...grpc.CallOption) (*GetTamEventAttributeResponse, error)
	CreateTamCounterSubscription(ctx context.Context, in *CreateTamCounterSubscriptionRequest, opts ...grpc.CallOption) (*CreateTamCounterSubscriptionResponse, error)
	RemoveTamCounterSubscription(ctx context.Context, in *RemoveTamCounterSubscriptionRequest, opts ...grpc.CallOption) (*RemoveTamCounterSubscriptionResponse, error)
	GetTamCounterSubscriptionAttribute(ctx context.Context, in *GetTamCounterSubscriptionAttributeRequest, opts ...grpc.CallOption) (*GetTamCounterSubscriptionAttributeResponse, error)
}

type tamClient struct {
	cc grpc.ClientConnInterface
}

func NewTamClient(cc grpc.ClientConnInterface) TamClient {
	return &tamClient{cc}
}

func (c *tamClient) CreateTam(ctx context.Context, in *CreateTamRequest, opts ...grpc.CallOption) (*CreateTamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTamResponse)
	err := c.cc.Invoke(ctx, Tam_CreateTam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTam(ctx context.Context, in *RemoveTamRequest, opts ...grpc.CallOption) (*RemoveTamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTamResponse)
	err := c.cc.Invoke(ctx, Tam_RemoveTam_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamAttribute(ctx context.Context, in *SetTamAttributeRequest, opts ...grpc.CallOption) (*SetTamAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTamAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_SetTamAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamAttribute(ctx context.Context, in *GetTamAttributeRequest, opts ...grpc.CallOption) (*GetTamAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTamAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_GetTamAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamMathFunc(ctx context.Context, in *CreateTamMathFuncRequest, opts ...grpc.CallOption) (*CreateTamMathFuncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTamMathFuncResponse)
	err := c.cc.Invoke(ctx, Tam_CreateTamMathFunc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamMathFunc(ctx context.Context, in *RemoveTamMathFuncRequest, opts ...grpc.CallOption) (*RemoveTamMathFuncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTamMathFuncResponse)
	err := c.cc.Invoke(ctx, Tam_RemoveTamMathFunc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamMathFuncAttribute(ctx context.Context, in *SetTamMathFuncAttributeRequest, opts ...grpc.CallOption) (*SetTamMathFuncAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTamMathFuncAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_SetTamMathFuncAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamMathFuncAttribute(ctx context.Context, in *GetTamMathFuncAttributeRequest, opts ...grpc.CallOption) (*GetTamMathFuncAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTamMathFuncAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_GetTamMathFuncAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamReport(ctx context.Context, in *CreateTamReportRequest, opts ...grpc.CallOption) (*CreateTamReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTamReportResponse)
	err := c.cc.Invoke(ctx, Tam_CreateTamReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamReport(ctx context.Context, in *RemoveTamReportRequest, opts ...grpc.CallOption) (*RemoveTamReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTamReportResponse)
	err := c.cc.Invoke(ctx, Tam_RemoveTamReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamReportAttribute(ctx context.Context, in *SetTamReportAttributeRequest, opts ...grpc.CallOption) (*SetTamReportAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTamReportAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_SetTamReportAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamReportAttribute(ctx context.Context, in *GetTamReportAttributeRequest, opts ...grpc.CallOption) (*GetTamReportAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTamReportAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_GetTamReportAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamEventThreshold(ctx context.Context, in *CreateTamEventThresholdRequest, opts ...grpc.CallOption) (*CreateTamEventThresholdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTamEventThresholdResponse)
	err := c.cc.Invoke(ctx, Tam_CreateTamEventThreshold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamEventThreshold(ctx context.Context, in *RemoveTamEventThresholdRequest, opts ...grpc.CallOption) (*RemoveTamEventThresholdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTamEventThresholdResponse)
	err := c.cc.Invoke(ctx, Tam_RemoveTamEventThreshold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamEventThresholdAttribute(ctx context.Context, in *SetTamEventThresholdAttributeRequest, opts ...grpc.CallOption) (*SetTamEventThresholdAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTamEventThresholdAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_SetTamEventThresholdAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamEventThresholdAttribute(ctx context.Context, in *GetTamEventThresholdAttributeRequest, opts ...grpc.CallOption) (*GetTamEventThresholdAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTamEventThresholdAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_GetTamEventThresholdAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamInt(ctx context.Context, in *CreateTamIntRequest, opts ...grpc.CallOption) (*CreateTamIntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTamIntResponse)
	err := c.cc.Invoke(ctx, Tam_CreateTamInt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamInt(ctx context.Context, in *RemoveTamIntRequest, opts ...grpc.CallOption) (*RemoveTamIntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTamIntResponse)
	err := c.cc.Invoke(ctx, Tam_RemoveTamInt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamIntAttribute(ctx context.Context, in *SetTamIntAttributeRequest, opts ...grpc.CallOption) (*SetTamIntAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTamIntAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_SetTamIntAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamIntAttribute(ctx context.Context, in *GetTamIntAttributeRequest, opts ...grpc.CallOption) (*GetTamIntAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTamIntAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_GetTamIntAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamTelType(ctx context.Context, in *CreateTamTelTypeRequest, opts ...grpc.CallOption) (*CreateTamTelTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTamTelTypeResponse)
	err := c.cc.Invoke(ctx, Tam_CreateTamTelType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamTelType(ctx context.Context, in *RemoveTamTelTypeRequest, opts ...grpc.CallOption) (*RemoveTamTelTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTamTelTypeResponse)
	err := c.cc.Invoke(ctx, Tam_RemoveTamTelType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamTelTypeAttribute(ctx context.Context, in *SetTamTelTypeAttributeRequest, opts ...grpc.CallOption) (*SetTamTelTypeAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTamTelTypeAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_SetTamTelTypeAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamTelTypeAttribute(ctx context.Context, in *GetTamTelTypeAttributeRequest, opts ...grpc.CallOption) (*GetTamTelTypeAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTamTelTypeAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_GetTamTelTypeAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamTransport(ctx context.Context, in *CreateTamTransportRequest, opts ...grpc.CallOption) (*CreateTamTransportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTamTransportResponse)
	err := c.cc.Invoke(ctx, Tam_CreateTamTransport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamTransport(ctx context.Context, in *RemoveTamTransportRequest, opts ...grpc.CallOption) (*RemoveTamTransportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTamTransportResponse)
	err := c.cc.Invoke(ctx, Tam_RemoveTamTransport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamTransportAttribute(ctx context.Context, in *SetTamTransportAttributeRequest, opts ...grpc.CallOption) (*SetTamTransportAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTamTransportAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_SetTamTransportAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamTransportAttribute(ctx context.Context, in *GetTamTransportAttributeRequest, opts ...grpc.CallOption) (*GetTamTransportAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTamTransportAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_GetTamTransportAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamTelemetry(ctx context.Context, in *CreateTamTelemetryRequest, opts ...grpc.CallOption) (*CreateTamTelemetryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTamTelemetryResponse)
	err := c.cc.Invoke(ctx, Tam_CreateTamTelemetry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamTelemetry(ctx context.Context, in *RemoveTamTelemetryRequest, opts ...grpc.CallOption) (*RemoveTamTelemetryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTamTelemetryResponse)
	err := c.cc.Invoke(ctx, Tam_RemoveTamTelemetry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamTelemetryAttribute(ctx context.Context, in *SetTamTelemetryAttributeRequest, opts ...grpc.CallOption) (*SetTamTelemetryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTamTelemetryAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_SetTamTelemetryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamTelemetryAttribute(ctx context.Context, in *GetTamTelemetryAttributeRequest, opts ...grpc.CallOption) (*GetTamTelemetryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTamTelemetryAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_GetTamTelemetryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamCollector(ctx context.Context, in *CreateTamCollectorRequest, opts ...grpc.CallOption) (*CreateTamCollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTamCollectorResponse)
	err := c.cc.Invoke(ctx, Tam_CreateTamCollector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamCollector(ctx context.Context, in *RemoveTamCollectorRequest, opts ...grpc.CallOption) (*RemoveTamCollectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTamCollectorResponse)
	err := c.cc.Invoke(ctx, Tam_RemoveTamCollector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamCollectorAttribute(ctx context.Context, in *SetTamCollectorAttributeRequest, opts ...grpc.CallOption) (*SetTamCollectorAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTamCollectorAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_SetTamCollectorAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamCollectorAttribute(ctx context.Context, in *GetTamCollectorAttributeRequest, opts ...grpc.CallOption) (*GetTamCollectorAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTamCollectorAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_GetTamCollectorAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamEventAction(ctx context.Context, in *CreateTamEventActionRequest, opts ...grpc.CallOption) (*CreateTamEventActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTamEventActionResponse)
	err := c.cc.Invoke(ctx, Tam_CreateTamEventAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamEventAction(ctx context.Context, in *RemoveTamEventActionRequest, opts ...grpc.CallOption) (*RemoveTamEventActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTamEventActionResponse)
	err := c.cc.Invoke(ctx, Tam_RemoveTamEventAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamEventActionAttribute(ctx context.Context, in *SetTamEventActionAttributeRequest, opts ...grpc.CallOption) (*SetTamEventActionAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTamEventActionAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_SetTamEventActionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamEventActionAttribute(ctx context.Context, in *GetTamEventActionAttributeRequest, opts ...grpc.CallOption) (*GetTamEventActionAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTamEventActionAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_GetTamEventActionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamEvent(ctx context.Context, in *CreateTamEventRequest, opts ...grpc.CallOption) (*CreateTamEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTamEventResponse)
	err := c.cc.Invoke(ctx, Tam_CreateTamEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamEvent(ctx context.Context, in *RemoveTamEventRequest, opts ...grpc.CallOption) (*RemoveTamEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTamEventResponse)
	err := c.cc.Invoke(ctx, Tam_RemoveTamEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) SetTamEventAttribute(ctx context.Context, in *SetTamEventAttributeRequest, opts ...grpc.CallOption) (*SetTamEventAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTamEventAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_SetTamEventAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamEventAttribute(ctx context.Context, in *GetTamEventAttributeRequest, opts ...grpc.CallOption) (*GetTamEventAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTamEventAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_GetTamEventAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) CreateTamCounterSubscription(ctx context.Context, in *CreateTamCounterSubscriptionRequest, opts ...grpc.CallOption) (*CreateTamCounterSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTamCounterSubscriptionResponse)
	err := c.cc.Invoke(ctx, Tam_CreateTamCounterSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) RemoveTamCounterSubscription(ctx context.Context, in *RemoveTamCounterSubscriptionRequest, opts ...grpc.CallOption) (*RemoveTamCounterSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTamCounterSubscriptionResponse)
	err := c.cc.Invoke(ctx, Tam_RemoveTamCounterSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tamClient) GetTamCounterSubscriptionAttribute(ctx context.Context, in *GetTamCounterSubscriptionAttributeRequest, opts ...grpc.CallOption) (*GetTamCounterSubscriptionAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTamCounterSubscriptionAttributeResponse)
	err := c.cc.Invoke(ctx, Tam_GetTamCounterSubscriptionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TamServer is the server API for Tam service.
// All implementations should embed UnimplementedTamServer
// for forward compatibility.
type TamServer interface {
	CreateTam(context.Context, *CreateTamRequest) (*CreateTamResponse, error)
	RemoveTam(context.Context, *RemoveTamRequest) (*RemoveTamResponse, error)
	SetTamAttribute(context.Context, *SetTamAttributeRequest) (*SetTamAttributeResponse, error)
	GetTamAttribute(context.Context, *GetTamAttributeRequest) (*GetTamAttributeResponse, error)
	CreateTamMathFunc(context.Context, *CreateTamMathFuncRequest) (*CreateTamMathFuncResponse, error)
	RemoveTamMathFunc(context.Context, *RemoveTamMathFuncRequest) (*RemoveTamMathFuncResponse, error)
	SetTamMathFuncAttribute(context.Context, *SetTamMathFuncAttributeRequest) (*SetTamMathFuncAttributeResponse, error)
	GetTamMathFuncAttribute(context.Context, *GetTamMathFuncAttributeRequest) (*GetTamMathFuncAttributeResponse, error)
	CreateTamReport(context.Context, *CreateTamReportRequest) (*CreateTamReportResponse, error)
	RemoveTamReport(context.Context, *RemoveTamReportRequest) (*RemoveTamReportResponse, error)
	SetTamReportAttribute(context.Context, *SetTamReportAttributeRequest) (*SetTamReportAttributeResponse, error)
	GetTamReportAttribute(context.Context, *GetTamReportAttributeRequest) (*GetTamReportAttributeResponse, error)
	CreateTamEventThreshold(context.Context, *CreateTamEventThresholdRequest) (*CreateTamEventThresholdResponse, error)
	RemoveTamEventThreshold(context.Context, *RemoveTamEventThresholdRequest) (*RemoveTamEventThresholdResponse, error)
	SetTamEventThresholdAttribute(context.Context, *SetTamEventThresholdAttributeRequest) (*SetTamEventThresholdAttributeResponse, error)
	GetTamEventThresholdAttribute(context.Context, *GetTamEventThresholdAttributeRequest) (*GetTamEventThresholdAttributeResponse, error)
	CreateTamInt(context.Context, *CreateTamIntRequest) (*CreateTamIntResponse, error)
	RemoveTamInt(context.Context, *RemoveTamIntRequest) (*RemoveTamIntResponse, error)
	SetTamIntAttribute(context.Context, *SetTamIntAttributeRequest) (*SetTamIntAttributeResponse, error)
	GetTamIntAttribute(context.Context, *GetTamIntAttributeRequest) (*GetTamIntAttributeResponse, error)
	CreateTamTelType(context.Context, *CreateTamTelTypeRequest) (*CreateTamTelTypeResponse, error)
	RemoveTamTelType(context.Context, *RemoveTamTelTypeRequest) (*RemoveTamTelTypeResponse, error)
	SetTamTelTypeAttribute(context.Context, *SetTamTelTypeAttributeRequest) (*SetTamTelTypeAttributeResponse, error)
	GetTamTelTypeAttribute(context.Context, *GetTamTelTypeAttributeRequest) (*GetTamTelTypeAttributeResponse, error)
	CreateTamTransport(context.Context, *CreateTamTransportRequest) (*CreateTamTransportResponse, error)
	RemoveTamTransport(context.Context, *RemoveTamTransportRequest) (*RemoveTamTransportResponse, error)
	SetTamTransportAttribute(context.Context, *SetTamTransportAttributeRequest) (*SetTamTransportAttributeResponse, error)
	GetTamTransportAttribute(context.Context, *GetTamTransportAttributeRequest) (*GetTamTransportAttributeResponse, error)
	CreateTamTelemetry(context.Context, *CreateTamTelemetryRequest) (*CreateTamTelemetryResponse, error)
	RemoveTamTelemetry(context.Context, *RemoveTamTelemetryRequest) (*RemoveTamTelemetryResponse, error)
	SetTamTelemetryAttribute(context.Context, *SetTamTelemetryAttributeRequest) (*SetTamTelemetryAttributeResponse, error)
	GetTamTelemetryAttribute(context.Context, *GetTamTelemetryAttributeRequest) (*GetTamTelemetryAttributeResponse, error)
	CreateTamCollector(context.Context, *CreateTamCollectorRequest) (*CreateTamCollectorResponse, error)
	RemoveTamCollector(context.Context, *RemoveTamCollectorRequest) (*RemoveTamCollectorResponse, error)
	SetTamCollectorAttribute(context.Context, *SetTamCollectorAttributeRequest) (*SetTamCollectorAttributeResponse, error)
	GetTamCollectorAttribute(context.Context, *GetTamCollectorAttributeRequest) (*GetTamCollectorAttributeResponse, error)
	CreateTamEventAction(context.Context, *CreateTamEventActionRequest) (*CreateTamEventActionResponse, error)
	RemoveTamEventAction(context.Context, *RemoveTamEventActionRequest) (*RemoveTamEventActionResponse, error)
	SetTamEventActionAttribute(context.Context, *SetTamEventActionAttributeRequest) (*SetTamEventActionAttributeResponse, error)
	GetTamEventActionAttribute(context.Context, *GetTamEventActionAttributeRequest) (*GetTamEventActionAttributeResponse, error)
	CreateTamEvent(context.Context, *CreateTamEventRequest) (*CreateTamEventResponse, error)
	RemoveTamEvent(context.Context, *RemoveTamEventRequest) (*RemoveTamEventResponse, error)
	SetTamEventAttribute(context.Context, *SetTamEventAttributeRequest) (*SetTamEventAttributeResponse, error)
	GetTamEventAttribute(context.Context, *GetTamEventAttributeRequest) (*GetTamEventAttributeResponse, error)
	CreateTamCounterSubscription(context.Context, *CreateTamCounterSubscriptionRequest) (*CreateTamCounterSubscriptionResponse, error)
	RemoveTamCounterSubscription(context.Context, *RemoveTamCounterSubscriptionRequest) (*RemoveTamCounterSubscriptionResponse, error)
	GetTamCounterSubscriptionAttribute(context.Context, *GetTamCounterSubscriptionAttributeRequest) (*GetTamCounterSubscriptionAttributeResponse, error)
}

// UnimplementedTamServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTamServer struct{}

func (UnimplementedTamServer) CreateTam(context.Context, *CreateTamRequest) (*CreateTamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTam not implemented")
}
func (UnimplementedTamServer) RemoveTam(context.Context, *RemoveTamRequest) (*RemoveTamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTam not implemented")
}
func (UnimplementedTamServer) SetTamAttribute(context.Context, *SetTamAttributeRequest) (*SetTamAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamAttribute not implemented")
}
func (UnimplementedTamServer) GetTamAttribute(context.Context, *GetTamAttributeRequest) (*GetTamAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamAttribute not implemented")
}
func (UnimplementedTamServer) CreateTamMathFunc(context.Context, *CreateTamMathFuncRequest) (*CreateTamMathFuncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamMathFunc not implemented")
}
func (UnimplementedTamServer) RemoveTamMathFunc(context.Context, *RemoveTamMathFuncRequest) (*RemoveTamMathFuncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamMathFunc not implemented")
}
func (UnimplementedTamServer) SetTamMathFuncAttribute(context.Context, *SetTamMathFuncAttributeRequest) (*SetTamMathFuncAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamMathFuncAttribute not implemented")
}
func (UnimplementedTamServer) GetTamMathFuncAttribute(context.Context, *GetTamMathFuncAttributeRequest) (*GetTamMathFuncAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamMathFuncAttribute not implemented")
}
func (UnimplementedTamServer) CreateTamReport(context.Context, *CreateTamReportRequest) (*CreateTamReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamReport not implemented")
}
func (UnimplementedTamServer) RemoveTamReport(context.Context, *RemoveTamReportRequest) (*RemoveTamReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamReport not implemented")
}
func (UnimplementedTamServer) SetTamReportAttribute(context.Context, *SetTamReportAttributeRequest) (*SetTamReportAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamReportAttribute not implemented")
}
func (UnimplementedTamServer) GetTamReportAttribute(context.Context, *GetTamReportAttributeRequest) (*GetTamReportAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamReportAttribute not implemented")
}
func (UnimplementedTamServer) CreateTamEventThreshold(context.Context, *CreateTamEventThresholdRequest) (*CreateTamEventThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamEventThreshold not implemented")
}
func (UnimplementedTamServer) RemoveTamEventThreshold(context.Context, *RemoveTamEventThresholdRequest) (*RemoveTamEventThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamEventThreshold not implemented")
}
func (UnimplementedTamServer) SetTamEventThresholdAttribute(context.Context, *SetTamEventThresholdAttributeRequest) (*SetTamEventThresholdAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamEventThresholdAttribute not implemented")
}
func (UnimplementedTamServer) GetTamEventThresholdAttribute(context.Context, *GetTamEventThresholdAttributeRequest) (*GetTamEventThresholdAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamEventThresholdAttribute not implemented")
}
func (UnimplementedTamServer) CreateTamInt(context.Context, *CreateTamIntRequest) (*CreateTamIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamInt not implemented")
}
func (UnimplementedTamServer) RemoveTamInt(context.Context, *RemoveTamIntRequest) (*RemoveTamIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamInt not implemented")
}
func (UnimplementedTamServer) SetTamIntAttribute(context.Context, *SetTamIntAttributeRequest) (*SetTamIntAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamIntAttribute not implemented")
}
func (UnimplementedTamServer) GetTamIntAttribute(context.Context, *GetTamIntAttributeRequest) (*GetTamIntAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamIntAttribute not implemented")
}
func (UnimplementedTamServer) CreateTamTelType(context.Context, *CreateTamTelTypeRequest) (*CreateTamTelTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamTelType not implemented")
}
func (UnimplementedTamServer) RemoveTamTelType(context.Context, *RemoveTamTelTypeRequest) (*RemoveTamTelTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamTelType not implemented")
}
func (UnimplementedTamServer) SetTamTelTypeAttribute(context.Context, *SetTamTelTypeAttributeRequest) (*SetTamTelTypeAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamTelTypeAttribute not implemented")
}
func (UnimplementedTamServer) GetTamTelTypeAttribute(context.Context, *GetTamTelTypeAttributeRequest) (*GetTamTelTypeAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamTelTypeAttribute not implemented")
}
func (UnimplementedTamServer) CreateTamTransport(context.Context, *CreateTamTransportRequest) (*CreateTamTransportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamTransport not implemented")
}
func (UnimplementedTamServer) RemoveTamTransport(context.Context, *RemoveTamTransportRequest) (*RemoveTamTransportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamTransport not implemented")
}
func (UnimplementedTamServer) SetTamTransportAttribute(context.Context, *SetTamTransportAttributeRequest) (*SetTamTransportAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamTransportAttribute not implemented")
}
func (UnimplementedTamServer) GetTamTransportAttribute(context.Context, *GetTamTransportAttributeRequest) (*GetTamTransportAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamTransportAttribute not implemented")
}
func (UnimplementedTamServer) CreateTamTelemetry(context.Context, *CreateTamTelemetryRequest) (*CreateTamTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamTelemetry not implemented")
}
func (UnimplementedTamServer) RemoveTamTelemetry(context.Context, *RemoveTamTelemetryRequest) (*RemoveTamTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamTelemetry not implemented")
}
func (UnimplementedTamServer) SetTamTelemetryAttribute(context.Context, *SetTamTelemetryAttributeRequest) (*SetTamTelemetryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamTelemetryAttribute not implemented")
}
func (UnimplementedTamServer) GetTamTelemetryAttribute(context.Context, *GetTamTelemetryAttributeRequest) (*GetTamTelemetryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamTelemetryAttribute not implemented")
}
func (UnimplementedTamServer) CreateTamCollector(context.Context, *CreateTamCollectorRequest) (*CreateTamCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamCollector not implemented")
}
func (UnimplementedTamServer) RemoveTamCollector(context.Context, *RemoveTamCollectorRequest) (*RemoveTamCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamCollector not implemented")
}
func (UnimplementedTamServer) SetTamCollectorAttribute(context.Context, *SetTamCollectorAttributeRequest) (*SetTamCollectorAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamCollectorAttribute not implemented")
}
func (UnimplementedTamServer) GetTamCollectorAttribute(context.Context, *GetTamCollectorAttributeRequest) (*GetTamCollectorAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamCollectorAttribute not implemented")
}
func (UnimplementedTamServer) CreateTamEventAction(context.Context, *CreateTamEventActionRequest) (*CreateTamEventActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamEventAction not implemented")
}
func (UnimplementedTamServer) RemoveTamEventAction(context.Context, *RemoveTamEventActionRequest) (*RemoveTamEventActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamEventAction not implemented")
}
func (UnimplementedTamServer) SetTamEventActionAttribute(context.Context, *SetTamEventActionAttributeRequest) (*SetTamEventActionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamEventActionAttribute not implemented")
}
func (UnimplementedTamServer) GetTamEventActionAttribute(context.Context, *GetTamEventActionAttributeRequest) (*GetTamEventActionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamEventActionAttribute not implemented")
}
func (UnimplementedTamServer) CreateTamEvent(context.Context, *CreateTamEventRequest) (*CreateTamEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamEvent not implemented")
}
func (UnimplementedTamServer) RemoveTamEvent(context.Context, *RemoveTamEventRequest) (*RemoveTamEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamEvent not implemented")
}
func (UnimplementedTamServer) SetTamEventAttribute(context.Context, *SetTamEventAttributeRequest) (*SetTamEventAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTamEventAttribute not implemented")
}
func (UnimplementedTamServer) GetTamEventAttribute(context.Context, *GetTamEventAttributeRequest) (*GetTamEventAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamEventAttribute not implemented")
}
func (UnimplementedTamServer) CreateTamCounterSubscription(context.Context, *CreateTamCounterSubscriptionRequest) (*CreateTamCounterSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTamCounterSubscription not implemented")
}
func (UnimplementedTamServer) RemoveTamCounterSubscription(context.Context, *RemoveTamCounterSubscriptionRequest) (*RemoveTamCounterSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTamCounterSubscription not implemented")
}
func (UnimplementedTamServer) GetTamCounterSubscriptionAttribute(context.Context, *GetTamCounterSubscriptionAttributeRequest) (*GetTamCounterSubscriptionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTamCounterSubscriptionAttribute not implemented")
}
func (UnimplementedTamServer) testEmbeddedByValue() {}

// UnsafeTamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TamServer will
// result in compilation errors.
type UnsafeTamServer interface {
	mustEmbedUnimplementedTamServer()
}

func RegisterTamServer(s grpc.ServiceRegistrar, srv TamServer) {
	// If the following call pancis, it indicates UnimplementedTamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tam_ServiceDesc, srv)
}

func _Tam_CreateTam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_CreateTam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTam(ctx, req.(*CreateTamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_RemoveTam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTam(ctx, req.(*RemoveTamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_SetTamAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamAttribute(ctx, req.(*SetTamAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_GetTamAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamAttribute(ctx, req.(*GetTamAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamMathFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamMathFuncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamMathFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_CreateTamMathFunc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamMathFunc(ctx, req.(*CreateTamMathFuncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamMathFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamMathFuncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamMathFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_RemoveTamMathFunc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamMathFunc(ctx, req.(*RemoveTamMathFuncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamMathFuncAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamMathFuncAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamMathFuncAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_SetTamMathFuncAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamMathFuncAttribute(ctx, req.(*SetTamMathFuncAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamMathFuncAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamMathFuncAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamMathFuncAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_GetTamMathFuncAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamMathFuncAttribute(ctx, req.(*GetTamMathFuncAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_CreateTamReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamReport(ctx, req.(*CreateTamReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_RemoveTamReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamReport(ctx, req.(*RemoveTamReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamReportAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamReportAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamReportAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_SetTamReportAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamReportAttribute(ctx, req.(*SetTamReportAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamReportAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamReportAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamReportAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_GetTamReportAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamReportAttribute(ctx, req.(*GetTamReportAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamEventThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamEventThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamEventThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_CreateTamEventThreshold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamEventThreshold(ctx, req.(*CreateTamEventThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamEventThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamEventThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamEventThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_RemoveTamEventThreshold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamEventThreshold(ctx, req.(*RemoveTamEventThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamEventThresholdAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamEventThresholdAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamEventThresholdAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_SetTamEventThresholdAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamEventThresholdAttribute(ctx, req.(*SetTamEventThresholdAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamEventThresholdAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamEventThresholdAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamEventThresholdAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_GetTamEventThresholdAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamEventThresholdAttribute(ctx, req.(*GetTamEventThresholdAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_CreateTamInt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamInt(ctx, req.(*CreateTamIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_RemoveTamInt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamInt(ctx, req.(*RemoveTamIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamIntAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamIntAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamIntAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_SetTamIntAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamIntAttribute(ctx, req.(*SetTamIntAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamIntAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamIntAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamIntAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_GetTamIntAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamIntAttribute(ctx, req.(*GetTamIntAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamTelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamTelTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamTelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_CreateTamTelType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamTelType(ctx, req.(*CreateTamTelTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamTelType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamTelTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamTelType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_RemoveTamTelType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamTelType(ctx, req.(*RemoveTamTelTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamTelTypeAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamTelTypeAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamTelTypeAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_SetTamTelTypeAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamTelTypeAttribute(ctx, req.(*SetTamTelTypeAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamTelTypeAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamTelTypeAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamTelTypeAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_GetTamTelTypeAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamTelTypeAttribute(ctx, req.(*GetTamTelTypeAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamTransport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamTransportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamTransport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_CreateTamTransport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamTransport(ctx, req.(*CreateTamTransportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamTransport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamTransportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamTransport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_RemoveTamTransport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamTransport(ctx, req.(*RemoveTamTransportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamTransportAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamTransportAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamTransportAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_SetTamTransportAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamTransportAttribute(ctx, req.(*SetTamTransportAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamTransportAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamTransportAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamTransportAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_GetTamTransportAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamTransportAttribute(ctx, req.(*GetTamTransportAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_CreateTamTelemetry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamTelemetry(ctx, req.(*CreateTamTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_RemoveTamTelemetry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamTelemetry(ctx, req.(*RemoveTamTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamTelemetryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamTelemetryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamTelemetryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_SetTamTelemetryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamTelemetryAttribute(ctx, req.(*SetTamTelemetryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamTelemetryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamTelemetryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamTelemetryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_GetTamTelemetryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamTelemetryAttribute(ctx, req.(*GetTamTelemetryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_CreateTamCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamCollector(ctx, req.(*CreateTamCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_RemoveTamCollector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamCollector(ctx, req.(*RemoveTamCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamCollectorAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamCollectorAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamCollectorAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_SetTamCollectorAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamCollectorAttribute(ctx, req.(*SetTamCollectorAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamCollectorAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamCollectorAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamCollectorAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_GetTamCollectorAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamCollectorAttribute(ctx, req.(*GetTamCollectorAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamEventAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamEventActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamEventAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_CreateTamEventAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamEventAction(ctx, req.(*CreateTamEventActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamEventAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamEventActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamEventAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_RemoveTamEventAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamEventAction(ctx, req.(*RemoveTamEventActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamEventActionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamEventActionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamEventActionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_SetTamEventActionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamEventActionAttribute(ctx, req.(*SetTamEventActionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamEventActionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamEventActionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamEventActionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_GetTamEventActionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamEventActionAttribute(ctx, req.(*GetTamEventActionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_CreateTamEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamEvent(ctx, req.(*CreateTamEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_RemoveTamEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamEvent(ctx, req.(*RemoveTamEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_SetTamEventAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTamEventAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).SetTamEventAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_SetTamEventAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).SetTamEventAttribute(ctx, req.(*SetTamEventAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamEventAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamEventAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamEventAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_GetTamEventAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamEventAttribute(ctx, req.(*GetTamEventAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_CreateTamCounterSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTamCounterSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).CreateTamCounterSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_CreateTamCounterSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).CreateTamCounterSubscription(ctx, req.(*CreateTamCounterSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_RemoveTamCounterSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTamCounterSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).RemoveTamCounterSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_RemoveTamCounterSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).RemoveTamCounterSubscription(ctx, req.(*RemoveTamCounterSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tam_GetTamCounterSubscriptionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTamCounterSubscriptionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TamServer).GetTamCounterSubscriptionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tam_GetTamCounterSubscriptionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TamServer).GetTamCounterSubscriptionAttribute(ctx, req.(*GetTamCounterSubscriptionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tam_ServiceDesc is the grpc.ServiceDesc for Tam service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tam_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Tam",
	HandlerType: (*TamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTam",
			Handler:    _Tam_CreateTam_Handler,
		},
		{
			MethodName: "RemoveTam",
			Handler:    _Tam_RemoveTam_Handler,
		},
		{
			MethodName: "SetTamAttribute",
			Handler:    _Tam_SetTamAttribute_Handler,
		},
		{
			MethodName: "GetTamAttribute",
			Handler:    _Tam_GetTamAttribute_Handler,
		},
		{
			MethodName: "CreateTamMathFunc",
			Handler:    _Tam_CreateTamMathFunc_Handler,
		},
		{
			MethodName: "RemoveTamMathFunc",
			Handler:    _Tam_RemoveTamMathFunc_Handler,
		},
		{
			MethodName: "SetTamMathFuncAttribute",
			Handler:    _Tam_SetTamMathFuncAttribute_Handler,
		},
		{
			MethodName: "GetTamMathFuncAttribute",
			Handler:    _Tam_GetTamMathFuncAttribute_Handler,
		},
		{
			MethodName: "CreateTamReport",
			Handler:    _Tam_CreateTamReport_Handler,
		},
		{
			MethodName: "RemoveTamReport",
			Handler:    _Tam_RemoveTamReport_Handler,
		},
		{
			MethodName: "SetTamReportAttribute",
			Handler:    _Tam_SetTamReportAttribute_Handler,
		},
		{
			MethodName: "GetTamReportAttribute",
			Handler:    _Tam_GetTamReportAttribute_Handler,
		},
		{
			MethodName: "CreateTamEventThreshold",
			Handler:    _Tam_CreateTamEventThreshold_Handler,
		},
		{
			MethodName: "RemoveTamEventThreshold",
			Handler:    _Tam_RemoveTamEventThreshold_Handler,
		},
		{
			MethodName: "SetTamEventThresholdAttribute",
			Handler:    _Tam_SetTamEventThresholdAttribute_Handler,
		},
		{
			MethodName: "GetTamEventThresholdAttribute",
			Handler:    _Tam_GetTamEventThresholdAttribute_Handler,
		},
		{
			MethodName: "CreateTamInt",
			Handler:    _Tam_CreateTamInt_Handler,
		},
		{
			MethodName: "RemoveTamInt",
			Handler:    _Tam_RemoveTamInt_Handler,
		},
		{
			MethodName: "SetTamIntAttribute",
			Handler:    _Tam_SetTamIntAttribute_Handler,
		},
		{
			MethodName: "GetTamIntAttribute",
			Handler:    _Tam_GetTamIntAttribute_Handler,
		},
		{
			MethodName: "CreateTamTelType",
			Handler:    _Tam_CreateTamTelType_Handler,
		},
		{
			MethodName: "RemoveTamTelType",
			Handler:    _Tam_RemoveTamTelType_Handler,
		},
		{
			MethodName: "SetTamTelTypeAttribute",
			Handler:    _Tam_SetTamTelTypeAttribute_Handler,
		},
		{
			MethodName: "GetTamTelTypeAttribute",
			Handler:    _Tam_GetTamTelTypeAttribute_Handler,
		},
		{
			MethodName: "CreateTamTransport",
			Handler:    _Tam_CreateTamTransport_Handler,
		},
		{
			MethodName: "RemoveTamTransport",
			Handler:    _Tam_RemoveTamTransport_Handler,
		},
		{
			MethodName: "SetTamTransportAttribute",
			Handler:    _Tam_SetTamTransportAttribute_Handler,
		},
		{
			MethodName: "GetTamTransportAttribute",
			Handler:    _Tam_GetTamTransportAttribute_Handler,
		},
		{
			MethodName: "CreateTamTelemetry",
			Handler:    _Tam_CreateTamTelemetry_Handler,
		},
		{
			MethodName: "RemoveTamTelemetry",
			Handler:    _Tam_RemoveTamTelemetry_Handler,
		},
		{
			MethodName: "SetTamTelemetryAttribute",
			Handler:    _Tam_SetTamTelemetryAttribute_Handler,
		},
		{
			MethodName: "GetTamTelemetryAttribute",
			Handler:    _Tam_GetTamTelemetryAttribute_Handler,
		},
		{
			MethodName: "CreateTamCollector",
			Handler:    _Tam_CreateTamCollector_Handler,
		},
		{
			MethodName: "RemoveTamCollector",
			Handler:    _Tam_RemoveTamCollector_Handler,
		},
		{
			MethodName: "SetTamCollectorAttribute",
			Handler:    _Tam_SetTamCollectorAttribute_Handler,
		},
		{
			MethodName: "GetTamCollectorAttribute",
			Handler:    _Tam_GetTamCollectorAttribute_Handler,
		},
		{
			MethodName: "CreateTamEventAction",
			Handler:    _Tam_CreateTamEventAction_Handler,
		},
		{
			MethodName: "RemoveTamEventAction",
			Handler:    _Tam_RemoveTamEventAction_Handler,
		},
		{
			MethodName: "SetTamEventActionAttribute",
			Handler:    _Tam_SetTamEventActionAttribute_Handler,
		},
		{
			MethodName: "GetTamEventActionAttribute",
			Handler:    _Tam_GetTamEventActionAttribute_Handler,
		},
		{
			MethodName: "CreateTamEvent",
			Handler:    _Tam_CreateTamEvent_Handler,
		},
		{
			MethodName: "RemoveTamEvent",
			Handler:    _Tam_RemoveTamEvent_Handler,
		},
		{
			MethodName: "SetTamEventAttribute",
			Handler:    _Tam_SetTamEventAttribute_Handler,
		},
		{
			MethodName: "GetTamEventAttribute",
			Handler:    _Tam_GetTamEventAttribute_Handler,
		},
		{
			MethodName: "CreateTamCounterSubscription",
			Handler:    _Tam_CreateTamCounterSubscription_Handler,
		},
		{
			MethodName: "RemoveTamCounterSubscription",
			Handler:    _Tam_RemoveTamCounterSubscription_Handler,
		},
		{
			MethodName: "GetTamCounterSubscriptionAttribute",
			Handler:    _Tam_GetTamCounterSubscriptionAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/tam.proto",
}
