// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/system_port.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SystemPort_CreateSystemPort_FullMethodName       = "/lemming.dataplane.sai.SystemPort/CreateSystemPort"
	SystemPort_RemoveSystemPort_FullMethodName       = "/lemming.dataplane.sai.SystemPort/RemoveSystemPort"
	SystemPort_SetSystemPortAttribute_FullMethodName = "/lemming.dataplane.sai.SystemPort/SetSystemPortAttribute"
	SystemPort_GetSystemPortAttribute_FullMethodName = "/lemming.dataplane.sai.SystemPort/GetSystemPortAttribute"
)

// SystemPortClient is the client API for SystemPort service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemPortClient interface {
	CreateSystemPort(ctx context.Context, in *CreateSystemPortRequest, opts ...grpc.CallOption) (*CreateSystemPortResponse, error)
	RemoveSystemPort(ctx context.Context, in *RemoveSystemPortRequest, opts ...grpc.CallOption) (*RemoveSystemPortResponse, error)
	SetSystemPortAttribute(ctx context.Context, in *SetSystemPortAttributeRequest, opts ...grpc.CallOption) (*SetSystemPortAttributeResponse, error)
	GetSystemPortAttribute(ctx context.Context, in *GetSystemPortAttributeRequest, opts ...grpc.CallOption) (*GetSystemPortAttributeResponse, error)
}

type systemPortClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemPortClient(cc grpc.ClientConnInterface) SystemPortClient {
	return &systemPortClient{cc}
}

func (c *systemPortClient) CreateSystemPort(ctx context.Context, in *CreateSystemPortRequest, opts ...grpc.CallOption) (*CreateSystemPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSystemPortResponse)
	err := c.cc.Invoke(ctx, SystemPort_CreateSystemPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemPortClient) RemoveSystemPort(ctx context.Context, in *RemoveSystemPortRequest, opts ...grpc.CallOption) (*RemoveSystemPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSystemPortResponse)
	err := c.cc.Invoke(ctx, SystemPort_RemoveSystemPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemPortClient) SetSystemPortAttribute(ctx context.Context, in *SetSystemPortAttributeRequest, opts ...grpc.CallOption) (*SetSystemPortAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSystemPortAttributeResponse)
	err := c.cc.Invoke(ctx, SystemPort_SetSystemPortAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemPortClient) GetSystemPortAttribute(ctx context.Context, in *GetSystemPortAttributeRequest, opts ...grpc.CallOption) (*GetSystemPortAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemPortAttributeResponse)
	err := c.cc.Invoke(ctx, SystemPort_GetSystemPortAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemPortServer is the server API for SystemPort service.
// All implementations should embed UnimplementedSystemPortServer
// for forward compatibility.
type SystemPortServer interface {
	CreateSystemPort(context.Context, *CreateSystemPortRequest) (*CreateSystemPortResponse, error)
	RemoveSystemPort(context.Context, *RemoveSystemPortRequest) (*RemoveSystemPortResponse, error)
	SetSystemPortAttribute(context.Context, *SetSystemPortAttributeRequest) (*SetSystemPortAttributeResponse, error)
	GetSystemPortAttribute(context.Context, *GetSystemPortAttributeRequest) (*GetSystemPortAttributeResponse, error)
}

// UnimplementedSystemPortServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSystemPortServer struct{}

func (UnimplementedSystemPortServer) CreateSystemPort(context.Context, *CreateSystemPortRequest) (*CreateSystemPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemPort not implemented")
}
func (UnimplementedSystemPortServer) RemoveSystemPort(context.Context, *RemoveSystemPortRequest) (*RemoveSystemPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSystemPort not implemented")
}
func (UnimplementedSystemPortServer) SetSystemPortAttribute(context.Context, *SetSystemPortAttributeRequest) (*SetSystemPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSystemPortAttribute not implemented")
}
func (UnimplementedSystemPortServer) GetSystemPortAttribute(context.Context, *GetSystemPortAttributeRequest) (*GetSystemPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemPortAttribute not implemented")
}
func (UnimplementedSystemPortServer) testEmbeddedByValue() {}

// UnsafeSystemPortServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemPortServer will
// result in compilation errors.
type UnsafeSystemPortServer interface {
	mustEmbedUnimplementedSystemPortServer()
}

func RegisterSystemPortServer(s grpc.ServiceRegistrar, srv SystemPortServer) {
	// If the following call pancis, it indicates UnimplementedSystemPortServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SystemPort_ServiceDesc, srv)
}

func _SystemPort_CreateSystemPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemPortServer).CreateSystemPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemPort_CreateSystemPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemPortServer).CreateSystemPort(ctx, req.(*CreateSystemPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemPort_RemoveSystemPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSystemPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemPortServer).RemoveSystemPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemPort_RemoveSystemPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemPortServer).RemoveSystemPort(ctx, req.(*RemoveSystemPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemPort_SetSystemPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSystemPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemPortServer).SetSystemPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemPort_SetSystemPortAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemPortServer).SetSystemPortAttribute(ctx, req.(*SetSystemPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemPort_GetSystemPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemPortServer).GetSystemPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemPort_GetSystemPortAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemPortServer).GetSystemPortAttribute(ctx, req.(*GetSystemPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemPort_ServiceDesc is the grpc.ServiceDesc for SystemPort service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemPort_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.SystemPort",
	HandlerType: (*SystemPortServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSystemPort",
			Handler:    _SystemPort_CreateSystemPort_Handler,
		},
		{
			MethodName: "RemoveSystemPort",
			Handler:    _SystemPort_RemoveSystemPort_Handler,
		},
		{
			MethodName: "SetSystemPortAttribute",
			Handler:    _SystemPort_SetSystemPortAttribute_Handler,
		},
		{
			MethodName: "GetSystemPortAttribute",
			Handler:    _SystemPort_GetSystemPortAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/system_port.proto",
}
