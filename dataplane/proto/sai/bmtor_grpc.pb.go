// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/bmtor.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bmtor_CreateTableBitmapClassificationEntry_FullMethodName       = "/lemming.dataplane.sai.Bmtor/CreateTableBitmapClassificationEntry"
	Bmtor_RemoveTableBitmapClassificationEntry_FullMethodName       = "/lemming.dataplane.sai.Bmtor/RemoveTableBitmapClassificationEntry"
	Bmtor_GetTableBitmapClassificationEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Bmtor/GetTableBitmapClassificationEntryAttribute"
	Bmtor_GetTableBitmapClassificationEntryStats_FullMethodName     = "/lemming.dataplane.sai.Bmtor/GetTableBitmapClassificationEntryStats"
	Bmtor_CreateTableBitmapRouterEntry_FullMethodName               = "/lemming.dataplane.sai.Bmtor/CreateTableBitmapRouterEntry"
	Bmtor_RemoveTableBitmapRouterEntry_FullMethodName               = "/lemming.dataplane.sai.Bmtor/RemoveTableBitmapRouterEntry"
	Bmtor_GetTableBitmapRouterEntryAttribute_FullMethodName         = "/lemming.dataplane.sai.Bmtor/GetTableBitmapRouterEntryAttribute"
	Bmtor_GetTableBitmapRouterEntryStats_FullMethodName             = "/lemming.dataplane.sai.Bmtor/GetTableBitmapRouterEntryStats"
	Bmtor_CreateTableMetaTunnelEntry_FullMethodName                 = "/lemming.dataplane.sai.Bmtor/CreateTableMetaTunnelEntry"
	Bmtor_RemoveTableMetaTunnelEntry_FullMethodName                 = "/lemming.dataplane.sai.Bmtor/RemoveTableMetaTunnelEntry"
	Bmtor_GetTableMetaTunnelEntryAttribute_FullMethodName           = "/lemming.dataplane.sai.Bmtor/GetTableMetaTunnelEntryAttribute"
	Bmtor_GetTableMetaTunnelEntryStats_FullMethodName               = "/lemming.dataplane.sai.Bmtor/GetTableMetaTunnelEntryStats"
)

// BmtorClient is the client API for Bmtor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BmtorClient interface {
	CreateTableBitmapClassificationEntry(ctx context.Context, in *CreateTableBitmapClassificationEntryRequest, opts ...grpc.CallOption) (*CreateTableBitmapClassificationEntryResponse, error)
	RemoveTableBitmapClassificationEntry(ctx context.Context, in *RemoveTableBitmapClassificationEntryRequest, opts ...grpc.CallOption) (*RemoveTableBitmapClassificationEntryResponse, error)
	GetTableBitmapClassificationEntryAttribute(ctx context.Context, in *GetTableBitmapClassificationEntryAttributeRequest, opts ...grpc.CallOption) (*GetTableBitmapClassificationEntryAttributeResponse, error)
	GetTableBitmapClassificationEntryStats(ctx context.Context, in *GetTableBitmapClassificationEntryStatsRequest, opts ...grpc.CallOption) (*GetTableBitmapClassificationEntryStatsResponse, error)
	CreateTableBitmapRouterEntry(ctx context.Context, in *CreateTableBitmapRouterEntryRequest, opts ...grpc.CallOption) (*CreateTableBitmapRouterEntryResponse, error)
	RemoveTableBitmapRouterEntry(ctx context.Context, in *RemoveTableBitmapRouterEntryRequest, opts ...grpc.CallOption) (*RemoveTableBitmapRouterEntryResponse, error)
	GetTableBitmapRouterEntryAttribute(ctx context.Context, in *GetTableBitmapRouterEntryAttributeRequest, opts ...grpc.CallOption) (*GetTableBitmapRouterEntryAttributeResponse, error)
	GetTableBitmapRouterEntryStats(ctx context.Context, in *GetTableBitmapRouterEntryStatsRequest, opts ...grpc.CallOption) (*GetTableBitmapRouterEntryStatsResponse, error)
	CreateTableMetaTunnelEntry(ctx context.Context, in *CreateTableMetaTunnelEntryRequest, opts ...grpc.CallOption) (*CreateTableMetaTunnelEntryResponse, error)
	RemoveTableMetaTunnelEntry(ctx context.Context, in *RemoveTableMetaTunnelEntryRequest, opts ...grpc.CallOption) (*RemoveTableMetaTunnelEntryResponse, error)
	GetTableMetaTunnelEntryAttribute(ctx context.Context, in *GetTableMetaTunnelEntryAttributeRequest, opts ...grpc.CallOption) (*GetTableMetaTunnelEntryAttributeResponse, error)
	GetTableMetaTunnelEntryStats(ctx context.Context, in *GetTableMetaTunnelEntryStatsRequest, opts ...grpc.CallOption) (*GetTableMetaTunnelEntryStatsResponse, error)
}

type bmtorClient struct {
	cc grpc.ClientConnInterface
}

func NewBmtorClient(cc grpc.ClientConnInterface) BmtorClient {
	return &bmtorClient{cc}
}

func (c *bmtorClient) CreateTableBitmapClassificationEntry(ctx context.Context, in *CreateTableBitmapClassificationEntryRequest, opts ...grpc.CallOption) (*CreateTableBitmapClassificationEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTableBitmapClassificationEntryResponse)
	err := c.cc.Invoke(ctx, Bmtor_CreateTableBitmapClassificationEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) RemoveTableBitmapClassificationEntry(ctx context.Context, in *RemoveTableBitmapClassificationEntryRequest, opts ...grpc.CallOption) (*RemoveTableBitmapClassificationEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTableBitmapClassificationEntryResponse)
	err := c.cc.Invoke(ctx, Bmtor_RemoveTableBitmapClassificationEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) GetTableBitmapClassificationEntryAttribute(ctx context.Context, in *GetTableBitmapClassificationEntryAttributeRequest, opts ...grpc.CallOption) (*GetTableBitmapClassificationEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTableBitmapClassificationEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Bmtor_GetTableBitmapClassificationEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) GetTableBitmapClassificationEntryStats(ctx context.Context, in *GetTableBitmapClassificationEntryStatsRequest, opts ...grpc.CallOption) (*GetTableBitmapClassificationEntryStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTableBitmapClassificationEntryStatsResponse)
	err := c.cc.Invoke(ctx, Bmtor_GetTableBitmapClassificationEntryStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) CreateTableBitmapRouterEntry(ctx context.Context, in *CreateTableBitmapRouterEntryRequest, opts ...grpc.CallOption) (*CreateTableBitmapRouterEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTableBitmapRouterEntryResponse)
	err := c.cc.Invoke(ctx, Bmtor_CreateTableBitmapRouterEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) RemoveTableBitmapRouterEntry(ctx context.Context, in *RemoveTableBitmapRouterEntryRequest, opts ...grpc.CallOption) (*RemoveTableBitmapRouterEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTableBitmapRouterEntryResponse)
	err := c.cc.Invoke(ctx, Bmtor_RemoveTableBitmapRouterEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) GetTableBitmapRouterEntryAttribute(ctx context.Context, in *GetTableBitmapRouterEntryAttributeRequest, opts ...grpc.CallOption) (*GetTableBitmapRouterEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTableBitmapRouterEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Bmtor_GetTableBitmapRouterEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) GetTableBitmapRouterEntryStats(ctx context.Context, in *GetTableBitmapRouterEntryStatsRequest, opts ...grpc.CallOption) (*GetTableBitmapRouterEntryStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTableBitmapRouterEntryStatsResponse)
	err := c.cc.Invoke(ctx, Bmtor_GetTableBitmapRouterEntryStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) CreateTableMetaTunnelEntry(ctx context.Context, in *CreateTableMetaTunnelEntryRequest, opts ...grpc.CallOption) (*CreateTableMetaTunnelEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTableMetaTunnelEntryResponse)
	err := c.cc.Invoke(ctx, Bmtor_CreateTableMetaTunnelEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) RemoveTableMetaTunnelEntry(ctx context.Context, in *RemoveTableMetaTunnelEntryRequest, opts ...grpc.CallOption) (*RemoveTableMetaTunnelEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTableMetaTunnelEntryResponse)
	err := c.cc.Invoke(ctx, Bmtor_RemoveTableMetaTunnelEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) GetTableMetaTunnelEntryAttribute(ctx context.Context, in *GetTableMetaTunnelEntryAttributeRequest, opts ...grpc.CallOption) (*GetTableMetaTunnelEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTableMetaTunnelEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Bmtor_GetTableMetaTunnelEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) GetTableMetaTunnelEntryStats(ctx context.Context, in *GetTableMetaTunnelEntryStatsRequest, opts ...grpc.CallOption) (*GetTableMetaTunnelEntryStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTableMetaTunnelEntryStatsResponse)
	err := c.cc.Invoke(ctx, Bmtor_GetTableMetaTunnelEntryStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BmtorServer is the server API for Bmtor service.
// All implementations should embed UnimplementedBmtorServer
// for forward compatibility.
type BmtorServer interface {
	CreateTableBitmapClassificationEntry(context.Context, *CreateTableBitmapClassificationEntryRequest) (*CreateTableBitmapClassificationEntryResponse, error)
	RemoveTableBitmapClassificationEntry(context.Context, *RemoveTableBitmapClassificationEntryRequest) (*RemoveTableBitmapClassificationEntryResponse, error)
	GetTableBitmapClassificationEntryAttribute(context.Context, *GetTableBitmapClassificationEntryAttributeRequest) (*GetTableBitmapClassificationEntryAttributeResponse, error)
	GetTableBitmapClassificationEntryStats(context.Context, *GetTableBitmapClassificationEntryStatsRequest) (*GetTableBitmapClassificationEntryStatsResponse, error)
	CreateTableBitmapRouterEntry(context.Context, *CreateTableBitmapRouterEntryRequest) (*CreateTableBitmapRouterEntryResponse, error)
	RemoveTableBitmapRouterEntry(context.Context, *RemoveTableBitmapRouterEntryRequest) (*RemoveTableBitmapRouterEntryResponse, error)
	GetTableBitmapRouterEntryAttribute(context.Context, *GetTableBitmapRouterEntryAttributeRequest) (*GetTableBitmapRouterEntryAttributeResponse, error)
	GetTableBitmapRouterEntryStats(context.Context, *GetTableBitmapRouterEntryStatsRequest) (*GetTableBitmapRouterEntryStatsResponse, error)
	CreateTableMetaTunnelEntry(context.Context, *CreateTableMetaTunnelEntryRequest) (*CreateTableMetaTunnelEntryResponse, error)
	RemoveTableMetaTunnelEntry(context.Context, *RemoveTableMetaTunnelEntryRequest) (*RemoveTableMetaTunnelEntryResponse, error)
	GetTableMetaTunnelEntryAttribute(context.Context, *GetTableMetaTunnelEntryAttributeRequest) (*GetTableMetaTunnelEntryAttributeResponse, error)
	GetTableMetaTunnelEntryStats(context.Context, *GetTableMetaTunnelEntryStatsRequest) (*GetTableMetaTunnelEntryStatsResponse, error)
}

// UnimplementedBmtorServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBmtorServer struct{}

func (UnimplementedBmtorServer) CreateTableBitmapClassificationEntry(context.Context, *CreateTableBitmapClassificationEntryRequest) (*CreateTableBitmapClassificationEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTableBitmapClassificationEntry not implemented")
}
func (UnimplementedBmtorServer) RemoveTableBitmapClassificationEntry(context.Context, *RemoveTableBitmapClassificationEntryRequest) (*RemoveTableBitmapClassificationEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTableBitmapClassificationEntry not implemented")
}
func (UnimplementedBmtorServer) GetTableBitmapClassificationEntryAttribute(context.Context, *GetTableBitmapClassificationEntryAttributeRequest) (*GetTableBitmapClassificationEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableBitmapClassificationEntryAttribute not implemented")
}
func (UnimplementedBmtorServer) GetTableBitmapClassificationEntryStats(context.Context, *GetTableBitmapClassificationEntryStatsRequest) (*GetTableBitmapClassificationEntryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableBitmapClassificationEntryStats not implemented")
}
func (UnimplementedBmtorServer) CreateTableBitmapRouterEntry(context.Context, *CreateTableBitmapRouterEntryRequest) (*CreateTableBitmapRouterEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTableBitmapRouterEntry not implemented")
}
func (UnimplementedBmtorServer) RemoveTableBitmapRouterEntry(context.Context, *RemoveTableBitmapRouterEntryRequest) (*RemoveTableBitmapRouterEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTableBitmapRouterEntry not implemented")
}
func (UnimplementedBmtorServer) GetTableBitmapRouterEntryAttribute(context.Context, *GetTableBitmapRouterEntryAttributeRequest) (*GetTableBitmapRouterEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableBitmapRouterEntryAttribute not implemented")
}
func (UnimplementedBmtorServer) GetTableBitmapRouterEntryStats(context.Context, *GetTableBitmapRouterEntryStatsRequest) (*GetTableBitmapRouterEntryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableBitmapRouterEntryStats not implemented")
}
func (UnimplementedBmtorServer) CreateTableMetaTunnelEntry(context.Context, *CreateTableMetaTunnelEntryRequest) (*CreateTableMetaTunnelEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTableMetaTunnelEntry not implemented")
}
func (UnimplementedBmtorServer) RemoveTableMetaTunnelEntry(context.Context, *RemoveTableMetaTunnelEntryRequest) (*RemoveTableMetaTunnelEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTableMetaTunnelEntry not implemented")
}
func (UnimplementedBmtorServer) GetTableMetaTunnelEntryAttribute(context.Context, *GetTableMetaTunnelEntryAttributeRequest) (*GetTableMetaTunnelEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableMetaTunnelEntryAttribute not implemented")
}
func (UnimplementedBmtorServer) GetTableMetaTunnelEntryStats(context.Context, *GetTableMetaTunnelEntryStatsRequest) (*GetTableMetaTunnelEntryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableMetaTunnelEntryStats not implemented")
}
func (UnimplementedBmtorServer) testEmbeddedByValue() {}

// UnsafeBmtorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BmtorServer will
// result in compilation errors.
type UnsafeBmtorServer interface {
	mustEmbedUnimplementedBmtorServer()
}

func RegisterBmtorServer(s grpc.ServiceRegistrar, srv BmtorServer) {
	// If the following call pancis, it indicates UnimplementedBmtorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bmtor_ServiceDesc, srv)
}

func _Bmtor_CreateTableBitmapClassificationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableBitmapClassificationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).CreateTableBitmapClassificationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bmtor_CreateTableBitmapClassificationEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).CreateTableBitmapClassificationEntry(ctx, req.(*CreateTableBitmapClassificationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_RemoveTableBitmapClassificationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTableBitmapClassificationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).RemoveTableBitmapClassificationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bmtor_RemoveTableBitmapClassificationEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).RemoveTableBitmapClassificationEntry(ctx, req.(*RemoveTableBitmapClassificationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_GetTableBitmapClassificationEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableBitmapClassificationEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).GetTableBitmapClassificationEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bmtor_GetTableBitmapClassificationEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).GetTableBitmapClassificationEntryAttribute(ctx, req.(*GetTableBitmapClassificationEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_GetTableBitmapClassificationEntryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableBitmapClassificationEntryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).GetTableBitmapClassificationEntryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bmtor_GetTableBitmapClassificationEntryStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).GetTableBitmapClassificationEntryStats(ctx, req.(*GetTableBitmapClassificationEntryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_CreateTableBitmapRouterEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableBitmapRouterEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).CreateTableBitmapRouterEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bmtor_CreateTableBitmapRouterEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).CreateTableBitmapRouterEntry(ctx, req.(*CreateTableBitmapRouterEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_RemoveTableBitmapRouterEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTableBitmapRouterEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).RemoveTableBitmapRouterEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bmtor_RemoveTableBitmapRouterEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).RemoveTableBitmapRouterEntry(ctx, req.(*RemoveTableBitmapRouterEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_GetTableBitmapRouterEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableBitmapRouterEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).GetTableBitmapRouterEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bmtor_GetTableBitmapRouterEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).GetTableBitmapRouterEntryAttribute(ctx, req.(*GetTableBitmapRouterEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_GetTableBitmapRouterEntryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableBitmapRouterEntryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).GetTableBitmapRouterEntryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bmtor_GetTableBitmapRouterEntryStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).GetTableBitmapRouterEntryStats(ctx, req.(*GetTableBitmapRouterEntryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_CreateTableMetaTunnelEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableMetaTunnelEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).CreateTableMetaTunnelEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bmtor_CreateTableMetaTunnelEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).CreateTableMetaTunnelEntry(ctx, req.(*CreateTableMetaTunnelEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_RemoveTableMetaTunnelEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTableMetaTunnelEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).RemoveTableMetaTunnelEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bmtor_RemoveTableMetaTunnelEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).RemoveTableMetaTunnelEntry(ctx, req.(*RemoveTableMetaTunnelEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_GetTableMetaTunnelEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableMetaTunnelEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).GetTableMetaTunnelEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bmtor_GetTableMetaTunnelEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).GetTableMetaTunnelEntryAttribute(ctx, req.(*GetTableMetaTunnelEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_GetTableMetaTunnelEntryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableMetaTunnelEntryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).GetTableMetaTunnelEntryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bmtor_GetTableMetaTunnelEntryStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).GetTableMetaTunnelEntryStats(ctx, req.(*GetTableMetaTunnelEntryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bmtor_ServiceDesc is the grpc.ServiceDesc for Bmtor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bmtor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Bmtor",
	HandlerType: (*BmtorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTableBitmapClassificationEntry",
			Handler:    _Bmtor_CreateTableBitmapClassificationEntry_Handler,
		},
		{
			MethodName: "RemoveTableBitmapClassificationEntry",
			Handler:    _Bmtor_RemoveTableBitmapClassificationEntry_Handler,
		},
		{
			MethodName: "GetTableBitmapClassificationEntryAttribute",
			Handler:    _Bmtor_GetTableBitmapClassificationEntryAttribute_Handler,
		},
		{
			MethodName: "GetTableBitmapClassificationEntryStats",
			Handler:    _Bmtor_GetTableBitmapClassificationEntryStats_Handler,
		},
		{
			MethodName: "CreateTableBitmapRouterEntry",
			Handler:    _Bmtor_CreateTableBitmapRouterEntry_Handler,
		},
		{
			MethodName: "RemoveTableBitmapRouterEntry",
			Handler:    _Bmtor_RemoveTableBitmapRouterEntry_Handler,
		},
		{
			MethodName: "GetTableBitmapRouterEntryAttribute",
			Handler:    _Bmtor_GetTableBitmapRouterEntryAttribute_Handler,
		},
		{
			MethodName: "GetTableBitmapRouterEntryStats",
			Handler:    _Bmtor_GetTableBitmapRouterEntryStats_Handler,
		},
		{
			MethodName: "CreateTableMetaTunnelEntry",
			Handler:    _Bmtor_CreateTableMetaTunnelEntry_Handler,
		},
		{
			MethodName: "RemoveTableMetaTunnelEntry",
			Handler:    _Bmtor_RemoveTableMetaTunnelEntry_Handler,
		},
		{
			MethodName: "GetTableMetaTunnelEntryAttribute",
			Handler:    _Bmtor_GetTableMetaTunnelEntryAttribute_Handler,
		},
		{
			MethodName: "GetTableMetaTunnelEntryStats",
			Handler:    _Bmtor_GetTableMetaTunnelEntryStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/bmtor.proto",
}
