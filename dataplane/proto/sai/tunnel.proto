
syntax = "proto3";

package lemming.dataplane.sai;

import "dataplane/proto/sai/common.proto";

option go_package = "github.com/openconfig/lemming/dataplane/proto/sai";

enum TunnelMapAttr {
  TUNNEL_MAP_ATTR_UNSPECIFIED = 0;
  TUNNEL_MAP_ATTR_TYPE = 1;
  TUNNEL_MAP_ATTR_ENTRY_LIST = 2;
}

enum TunnelAttr {
  TUNNEL_ATTR_UNSPECIFIED = 0;
  TUNNEL_ATTR_TYPE = 1;
  TUNNEL_ATTR_UNDERLAY_INTERFACE = 2;
  TUNNEL_ATTR_OVERLAY_INTERFACE = 3;
  TUNNEL_ATTR_PEER_MODE = 4;
  TUNNEL_ATTR_ENCAP_SRC_IP = 5;
  TUNNEL_ATTR_ENCAP_DST_IP = 6;
  TUNNEL_ATTR_ENCAP_TTL_MODE = 7;
  TUNNEL_ATTR_ENCAP_TTL_VAL = 8;
  TUNNEL_ATTR_ENCAP_DSCP_MODE = 9;
  TUNNEL_ATTR_ENCAP_DSCP_VAL = 10;
  TUNNEL_ATTR_ENCAP_GRE_KEY_VALID = 11;
  TUNNEL_ATTR_ENCAP_GRE_KEY = 12;
  TUNNEL_ATTR_ENCAP_ECN_MODE = 13;
  TUNNEL_ATTR_ENCAP_MAPPERS = 14;
  TUNNEL_ATTR_DECAP_ECN_MODE = 15;
  TUNNEL_ATTR_DECAP_MAPPERS = 16;
  TUNNEL_ATTR_DECAP_TTL_MODE = 17;
  TUNNEL_ATTR_DECAP_DSCP_MODE = 18;
  TUNNEL_ATTR_TERM_TABLE_ENTRY_LIST = 19;
  TUNNEL_ATTR_LOOPBACK_PACKET_ACTION = 20;
  TUNNEL_ATTR_VXLAN_UDP_SPORT_MODE = 21;
  TUNNEL_ATTR_VXLAN_UDP_SPORT = 22;
  TUNNEL_ATTR_VXLAN_UDP_SPORT_MASK = 23;
  TUNNEL_ATTR_SA_INDEX = 24;
  TUNNEL_ATTR_IPSEC_SA_PORT_LIST = 25;
  TUNNEL_ATTR_ENCAP_QOS_TC_AND_COLOR_TO_DSCP_MAP = 26;
  TUNNEL_ATTR_ENCAP_QOS_TC_TO_QUEUE_MAP = 27;
  TUNNEL_ATTR_DECAP_QOS_DSCP_TO_TC_MAP = 28;
  TUNNEL_ATTR_DECAP_QOS_TC_TO_PRIORITY_GROUP_MAP = 29;
  TUNNEL_ATTR_VXLAN_UDP_SPORT_SECURITY = 30;
}

enum TunnelTermTableEntryAttr {
  TUNNEL_TERM_TABLE_ENTRY_ATTR_UNSPECIFIED = 0;
  TUNNEL_TERM_TABLE_ENTRY_ATTR_VR_ID = 1;
  TUNNEL_TERM_TABLE_ENTRY_ATTR_TYPE = 2;
  TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP = 3;
  TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP_MASK = 4;
  TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP = 5;
  TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP_MASK = 6;
  TUNNEL_TERM_TABLE_ENTRY_ATTR_TUNNEL_TYPE = 7;
  TUNNEL_TERM_TABLE_ENTRY_ATTR_ACTION_TUNNEL_ID = 8;
  TUNNEL_TERM_TABLE_ENTRY_ATTR_IP_ADDR_FAMILY = 9;
  TUNNEL_TERM_TABLE_ENTRY_ATTR_IPSEC_VERIFIED = 10;
}

enum TunnelMapEntryAttr {
  TUNNEL_MAP_ENTRY_ATTR_UNSPECIFIED = 0;
  TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP_TYPE = 1;
  TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP = 2;
  TUNNEL_MAP_ENTRY_ATTR_OECN_KEY = 3;
  TUNNEL_MAP_ENTRY_ATTR_OECN_VALUE = 4;
  TUNNEL_MAP_ENTRY_ATTR_UECN_KEY = 5;
  TUNNEL_MAP_ENTRY_ATTR_UECN_VALUE = 6;
  TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_KEY = 7;
  TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_VALUE = 8;
  TUNNEL_MAP_ENTRY_ATTR_VNI_ID_KEY = 9;
  TUNNEL_MAP_ENTRY_ATTR_VNI_ID_VALUE = 10;
  TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_KEY = 11;
  TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_VALUE = 12;
  TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_KEY = 13;
  TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_VALUE = 14;
  TUNNEL_MAP_ENTRY_ATTR_VSID_ID_KEY = 15;
  TUNNEL_MAP_ENTRY_ATTR_VSID_ID_VALUE = 16;
}

message CreateTunnelMapRequest {
  option (sai_type) = OBJECT_TYPE_TUNNEL_MAP;
  uint64 switch = 1;
  optional TunnelMapType type = 2 [(attr_enum_value) = 1];
}

message CreateTunnelMapResponse {
  uint64 oid = 1;
}

message RemoveTunnelMapRequest {
  uint64 oid = 1;
}

message RemoveTunnelMapResponse {}

message GetTunnelMapAttributeRequest {
  uint64 oid = 1;
  repeated TunnelMapAttr attr_type = 2;
}

message GetTunnelMapAttributeResponse {
  TunnelMapAttribute attr = 1;
}

message CreateTunnelRequest {
  option (sai_type) = OBJECT_TYPE_TUNNEL;
  uint64 switch = 1;
  optional TunnelType type = 2 [(attr_enum_value) = 1];
  optional uint64 underlay_interface = 3 [(attr_enum_value) = 2];
  optional uint64 overlay_interface = 4 [(attr_enum_value) = 3];
  optional TunnelPeerMode peer_mode = 5 [(attr_enum_value) = 4];
  optional bytes encap_src_ip = 6 [(attr_enum_value) = 5];
  optional bytes encap_dst_ip = 7 [(attr_enum_value) = 6];
  optional TunnelTtlMode encap_ttl_mode = 8 [(attr_enum_value) = 7];
  optional uint32 encap_ttl_val = 9 [(attr_enum_value) = 8];
  optional TunnelDscpMode encap_dscp_mode = 10 [(attr_enum_value) = 9];
  optional uint32 encap_dscp_val = 11 [(attr_enum_value) = 10];
  optional bool encap_gre_key_valid = 12 [(attr_enum_value) = 11];
  optional uint32 encap_gre_key = 13 [(attr_enum_value) = 12];
  optional TunnelEncapEcnMode encap_ecn_mode = 14 [(attr_enum_value) = 13];
  repeated uint64 encap_mappers = 15 [(attr_enum_value) = 14];
  optional TunnelDecapEcnMode decap_ecn_mode = 16 [(attr_enum_value) = 15];
  repeated uint64 decap_mappers = 17 [(attr_enum_value) = 16];
  optional TunnelTtlMode decap_ttl_mode = 18 [(attr_enum_value) = 17];
  optional TunnelDscpMode decap_dscp_mode = 19 [(attr_enum_value) = 18];
  optional PacketAction loopback_packet_action = 20 [(attr_enum_value) = 20];
  optional TunnelVxlanUdpSportMode vxlan_udp_sport_mode = 21
      [(attr_enum_value) = 21];
  optional uint32 vxlan_udp_sport = 22 [(attr_enum_value) = 22];
  optional uint32 vxlan_udp_sport_mask = 23 [(attr_enum_value) = 23];
  optional uint32 sa_index = 24 [(attr_enum_value) = 24];
  repeated uint64 ipsec_sa_port_list = 25 [(attr_enum_value) = 25];
  optional uint64 encap_qos_tc_and_color_to_dscp_map = 26
      [(attr_enum_value) = 26];
  optional uint64 encap_qos_tc_to_queue_map = 27 [(attr_enum_value) = 27];
  optional uint64 decap_qos_dscp_to_tc_map = 28 [(attr_enum_value) = 28];
  optional uint64 decap_qos_tc_to_priority_group_map = 29
      [(attr_enum_value) = 29];
  optional bool vxlan_udp_sport_security = 30 [(attr_enum_value) = 30];
}

message CreateTunnelResponse {
  uint64 oid = 1;
}

message RemoveTunnelRequest {
  uint64 oid = 1;
}

message RemoveTunnelResponse {}

message SetTunnelAttributeRequest {
  uint64 oid = 1;
  optional TunnelTtlMode encap_ttl_mode = 2 [(attr_enum_value) = 7];
  optional uint32 encap_ttl_val = 3 [(attr_enum_value) = 8];
  optional TunnelDscpMode encap_dscp_mode = 4 [(attr_enum_value) = 9];
  optional uint32 encap_dscp_val = 5 [(attr_enum_value) = 10];
  optional uint32 encap_gre_key = 6 [(attr_enum_value) = 12];
  optional TunnelTtlMode decap_ttl_mode = 7 [(attr_enum_value) = 17];
  optional TunnelDscpMode decap_dscp_mode = 8 [(attr_enum_value) = 18];
  optional PacketAction loopback_packet_action = 9 [(attr_enum_value) = 20];
  optional TunnelVxlanUdpSportMode vxlan_udp_sport_mode = 10
      [(attr_enum_value) = 21];
  optional uint32 vxlan_udp_sport = 11 [(attr_enum_value) = 22];
  optional uint32 vxlan_udp_sport_mask = 12 [(attr_enum_value) = 23];
  optional uint32 sa_index = 13 [(attr_enum_value) = 24];
  repeated uint64 ipsec_sa_port_list = 14 [(attr_enum_value) = 25];
  optional uint64 encap_qos_tc_and_color_to_dscp_map = 15
      [(attr_enum_value) = 26];
  optional uint64 encap_qos_tc_to_queue_map = 16 [(attr_enum_value) = 27];
  optional uint64 decap_qos_dscp_to_tc_map = 17 [(attr_enum_value) = 28];
  optional uint64 decap_qos_tc_to_priority_group_map = 18
      [(attr_enum_value) = 29];
  optional bool vxlan_udp_sport_security = 19 [(attr_enum_value) = 30];
}

message SetTunnelAttributeResponse {}

message GetTunnelAttributeRequest {
  uint64 oid = 1;
  repeated TunnelAttr attr_type = 2;
}

message GetTunnelAttributeResponse {
  TunnelAttribute attr = 1;
}

message GetTunnelStatsRequest {
  uint64 oid = 1;
  repeated TunnelStat counter_ids = 2;
}

message GetTunnelStatsResponse {
  repeated uint64 values = 1;
}

message CreateTunnelTermTableEntryRequest {
  option (sai_type) = OBJECT_TYPE_TUNNEL_TERM_TABLE_ENTRY;
  uint64 switch = 1;
  optional uint64 vr_id = 2 [(attr_enum_value) = 1];
  optional TunnelTermTableEntryType type = 3 [(attr_enum_value) = 2];
  optional bytes dst_ip = 4 [(attr_enum_value) = 3];
  optional bytes dst_ip_mask = 5 [(attr_enum_value) = 4];
  optional bytes src_ip = 6 [(attr_enum_value) = 5];
  optional bytes src_ip_mask = 7 [(attr_enum_value) = 6];
  optional TunnelType tunnel_type = 8 [(attr_enum_value) = 7];
  optional uint64 action_tunnel_id = 9 [(attr_enum_value) = 8];
  optional bool ipsec_verified = 10 [(attr_enum_value) = 10];
}

message CreateTunnelTermTableEntryResponse {
  uint64 oid = 1;
}

message RemoveTunnelTermTableEntryRequest {
  uint64 oid = 1;
}

message RemoveTunnelTermTableEntryResponse {}

message SetTunnelTermTableEntryAttributeRequest {
  uint64 oid = 1;
  optional bool ipsec_verified = 2 [(attr_enum_value) = 10];
}

message SetTunnelTermTableEntryAttributeResponse {}

message GetTunnelTermTableEntryAttributeRequest {
  uint64 oid = 1;
  repeated TunnelTermTableEntryAttr attr_type = 2;
}

message GetTunnelTermTableEntryAttributeResponse {
  TunnelTermTableEntryAttribute attr = 1;
}

message CreateTunnelMapEntryRequest {
  option (sai_type) = OBJECT_TYPE_TUNNEL_MAP_ENTRY;
  uint64 switch = 1;
  optional TunnelMapType tunnel_map_type = 2 [(attr_enum_value) = 1];
  optional uint64 tunnel_map = 3 [(attr_enum_value) = 2];
  optional uint32 oecn_key = 4 [(attr_enum_value) = 3];
  optional uint32 oecn_value = 5 [(attr_enum_value) = 4];
  optional uint32 uecn_key = 6 [(attr_enum_value) = 5];
  optional uint32 uecn_value = 7 [(attr_enum_value) = 6];
  optional uint32 vlan_id_key = 8 [(attr_enum_value) = 7];
  optional uint32 vlan_id_value = 9 [(attr_enum_value) = 8];
  optional uint32 vni_id_key = 10 [(attr_enum_value) = 9];
  optional uint32 vni_id_value = 11 [(attr_enum_value) = 10];
  optional uint64 bridge_id_key = 12 [(attr_enum_value) = 11];
  optional uint64 bridge_id_value = 13 [(attr_enum_value) = 12];
  optional uint64 virtual_router_id_key = 14 [(attr_enum_value) = 13];
  optional uint64 virtual_router_id_value = 15 [(attr_enum_value) = 14];
  optional uint32 vsid_id_key = 16 [(attr_enum_value) = 15];
  optional uint32 vsid_id_value = 17 [(attr_enum_value) = 16];
}

message CreateTunnelMapEntryResponse {
  uint64 oid = 1;
}

message RemoveTunnelMapEntryRequest {
  uint64 oid = 1;
}

message RemoveTunnelMapEntryResponse {}

message GetTunnelMapEntryAttributeRequest {
  uint64 oid = 1;
  repeated TunnelMapEntryAttr attr_type = 2;
}

message GetTunnelMapEntryAttributeResponse {
  TunnelMapEntryAttribute attr = 1;
}

message CreateTunnelsRequest {
  repeated CreateTunnelRequest reqs = 1;
}

message CreateTunnelsResponse {
  repeated CreateTunnelResponse resps = 1;
}

service Tunnel {
  rpc CreateTunnelMap(CreateTunnelMapRequest)
      returns (CreateTunnelMapResponse) {}
  rpc RemoveTunnelMap(RemoveTunnelMapRequest)
      returns (RemoveTunnelMapResponse) {}
  rpc GetTunnelMapAttribute(GetTunnelMapAttributeRequest)
      returns (GetTunnelMapAttributeResponse) {}
  rpc CreateTunnel(CreateTunnelRequest) returns (CreateTunnelResponse) {}
  rpc RemoveTunnel(RemoveTunnelRequest) returns (RemoveTunnelResponse) {}
  rpc SetTunnelAttribute(SetTunnelAttributeRequest)
      returns (SetTunnelAttributeResponse) {}
  rpc GetTunnelAttribute(GetTunnelAttributeRequest)
      returns (GetTunnelAttributeResponse) {}
  rpc GetTunnelStats(GetTunnelStatsRequest) returns (GetTunnelStatsResponse) {}
  rpc CreateTunnelTermTableEntry(CreateTunnelTermTableEntryRequest)
      returns (CreateTunnelTermTableEntryResponse) {}
  rpc RemoveTunnelTermTableEntry(RemoveTunnelTermTableEntryRequest)
      returns (RemoveTunnelTermTableEntryResponse) {}
  rpc SetTunnelTermTableEntryAttribute(SetTunnelTermTableEntryAttributeRequest)
      returns (SetTunnelTermTableEntryAttributeResponse) {}
  rpc GetTunnelTermTableEntryAttribute(GetTunnelTermTableEntryAttributeRequest)
      returns (GetTunnelTermTableEntryAttributeResponse) {}
  rpc CreateTunnelMapEntry(CreateTunnelMapEntryRequest)
      returns (CreateTunnelMapEntryResponse) {}
  rpc RemoveTunnelMapEntry(RemoveTunnelMapEntryRequest)
      returns (RemoveTunnelMapEntryResponse) {}
  rpc GetTunnelMapEntryAttribute(GetTunnelMapEntryAttributeRequest)
      returns (GetTunnelMapEntryAttributeResponse) {}
  rpc CreateTunnels(CreateTunnelsRequest) returns (CreateTunnelsResponse) {}
}
