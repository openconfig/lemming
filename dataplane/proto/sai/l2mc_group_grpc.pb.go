// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/l2mc_group.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	L2McGroup_CreateL2McGroup_FullMethodName             = "/lemming.dataplane.sai.L2mcGroup/CreateL2mcGroup"
	L2McGroup_RemoveL2McGroup_FullMethodName             = "/lemming.dataplane.sai.L2mcGroup/RemoveL2mcGroup"
	L2McGroup_GetL2McGroupAttribute_FullMethodName       = "/lemming.dataplane.sai.L2mcGroup/GetL2mcGroupAttribute"
	L2McGroup_CreateL2McGroupMember_FullMethodName       = "/lemming.dataplane.sai.L2mcGroup/CreateL2mcGroupMember"
	L2McGroup_RemoveL2McGroupMember_FullMethodName       = "/lemming.dataplane.sai.L2mcGroup/RemoveL2mcGroupMember"
	L2McGroup_GetL2McGroupMemberAttribute_FullMethodName = "/lemming.dataplane.sai.L2mcGroup/GetL2mcGroupMemberAttribute"
)

// L2McGroupClient is the client API for L2McGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type L2McGroupClient interface {
	CreateL2McGroup(ctx context.Context, in *CreateL2McGroupRequest, opts ...grpc.CallOption) (*CreateL2McGroupResponse, error)
	RemoveL2McGroup(ctx context.Context, in *RemoveL2McGroupRequest, opts ...grpc.CallOption) (*RemoveL2McGroupResponse, error)
	GetL2McGroupAttribute(ctx context.Context, in *GetL2McGroupAttributeRequest, opts ...grpc.CallOption) (*GetL2McGroupAttributeResponse, error)
	CreateL2McGroupMember(ctx context.Context, in *CreateL2McGroupMemberRequest, opts ...grpc.CallOption) (*CreateL2McGroupMemberResponse, error)
	RemoveL2McGroupMember(ctx context.Context, in *RemoveL2McGroupMemberRequest, opts ...grpc.CallOption) (*RemoveL2McGroupMemberResponse, error)
	GetL2McGroupMemberAttribute(ctx context.Context, in *GetL2McGroupMemberAttributeRequest, opts ...grpc.CallOption) (*GetL2McGroupMemberAttributeResponse, error)
}

type l2McGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewL2McGroupClient(cc grpc.ClientConnInterface) L2McGroupClient {
	return &l2McGroupClient{cc}
}

func (c *l2McGroupClient) CreateL2McGroup(ctx context.Context, in *CreateL2McGroupRequest, opts ...grpc.CallOption) (*CreateL2McGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateL2McGroupResponse)
	err := c.cc.Invoke(ctx, L2McGroup_CreateL2McGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2McGroupClient) RemoveL2McGroup(ctx context.Context, in *RemoveL2McGroupRequest, opts ...grpc.CallOption) (*RemoveL2McGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveL2McGroupResponse)
	err := c.cc.Invoke(ctx, L2McGroup_RemoveL2McGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2McGroupClient) GetL2McGroupAttribute(ctx context.Context, in *GetL2McGroupAttributeRequest, opts ...grpc.CallOption) (*GetL2McGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetL2McGroupAttributeResponse)
	err := c.cc.Invoke(ctx, L2McGroup_GetL2McGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2McGroupClient) CreateL2McGroupMember(ctx context.Context, in *CreateL2McGroupMemberRequest, opts ...grpc.CallOption) (*CreateL2McGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateL2McGroupMemberResponse)
	err := c.cc.Invoke(ctx, L2McGroup_CreateL2McGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2McGroupClient) RemoveL2McGroupMember(ctx context.Context, in *RemoveL2McGroupMemberRequest, opts ...grpc.CallOption) (*RemoveL2McGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveL2McGroupMemberResponse)
	err := c.cc.Invoke(ctx, L2McGroup_RemoveL2McGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *l2McGroupClient) GetL2McGroupMemberAttribute(ctx context.Context, in *GetL2McGroupMemberAttributeRequest, opts ...grpc.CallOption) (*GetL2McGroupMemberAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetL2McGroupMemberAttributeResponse)
	err := c.cc.Invoke(ctx, L2McGroup_GetL2McGroupMemberAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// L2McGroupServer is the server API for L2McGroup service.
// All implementations should embed UnimplementedL2McGroupServer
// for forward compatibility.
type L2McGroupServer interface {
	CreateL2McGroup(context.Context, *CreateL2McGroupRequest) (*CreateL2McGroupResponse, error)
	RemoveL2McGroup(context.Context, *RemoveL2McGroupRequest) (*RemoveL2McGroupResponse, error)
	GetL2McGroupAttribute(context.Context, *GetL2McGroupAttributeRequest) (*GetL2McGroupAttributeResponse, error)
	CreateL2McGroupMember(context.Context, *CreateL2McGroupMemberRequest) (*CreateL2McGroupMemberResponse, error)
	RemoveL2McGroupMember(context.Context, *RemoveL2McGroupMemberRequest) (*RemoveL2McGroupMemberResponse, error)
	GetL2McGroupMemberAttribute(context.Context, *GetL2McGroupMemberAttributeRequest) (*GetL2McGroupMemberAttributeResponse, error)
}

// UnimplementedL2McGroupServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedL2McGroupServer struct{}

func (UnimplementedL2McGroupServer) CreateL2McGroup(context.Context, *CreateL2McGroupRequest) (*CreateL2McGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateL2McGroup not implemented")
}
func (UnimplementedL2McGroupServer) RemoveL2McGroup(context.Context, *RemoveL2McGroupRequest) (*RemoveL2McGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveL2McGroup not implemented")
}
func (UnimplementedL2McGroupServer) GetL2McGroupAttribute(context.Context, *GetL2McGroupAttributeRequest) (*GetL2McGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetL2McGroupAttribute not implemented")
}
func (UnimplementedL2McGroupServer) CreateL2McGroupMember(context.Context, *CreateL2McGroupMemberRequest) (*CreateL2McGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateL2McGroupMember not implemented")
}
func (UnimplementedL2McGroupServer) RemoveL2McGroupMember(context.Context, *RemoveL2McGroupMemberRequest) (*RemoveL2McGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveL2McGroupMember not implemented")
}
func (UnimplementedL2McGroupServer) GetL2McGroupMemberAttribute(context.Context, *GetL2McGroupMemberAttributeRequest) (*GetL2McGroupMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetL2McGroupMemberAttribute not implemented")
}
func (UnimplementedL2McGroupServer) testEmbeddedByValue() {}

// UnsafeL2McGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to L2McGroupServer will
// result in compilation errors.
type UnsafeL2McGroupServer interface {
	mustEmbedUnimplementedL2McGroupServer()
}

func RegisterL2McGroupServer(s grpc.ServiceRegistrar, srv L2McGroupServer) {
	// If the following call pancis, it indicates UnimplementedL2McGroupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&L2McGroup_ServiceDesc, srv)
}

func _L2McGroup_CreateL2McGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateL2McGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2McGroupServer).CreateL2McGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2McGroup_CreateL2McGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2McGroupServer).CreateL2McGroup(ctx, req.(*CreateL2McGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2McGroup_RemoveL2McGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveL2McGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2McGroupServer).RemoveL2McGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2McGroup_RemoveL2McGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2McGroupServer).RemoveL2McGroup(ctx, req.(*RemoveL2McGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2McGroup_GetL2McGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetL2McGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2McGroupServer).GetL2McGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2McGroup_GetL2McGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2McGroupServer).GetL2McGroupAttribute(ctx, req.(*GetL2McGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2McGroup_CreateL2McGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateL2McGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2McGroupServer).CreateL2McGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2McGroup_CreateL2McGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2McGroupServer).CreateL2McGroupMember(ctx, req.(*CreateL2McGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2McGroup_RemoveL2McGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveL2McGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2McGroupServer).RemoveL2McGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2McGroup_RemoveL2McGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2McGroupServer).RemoveL2McGroupMember(ctx, req.(*RemoveL2McGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _L2McGroup_GetL2McGroupMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetL2McGroupMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2McGroupServer).GetL2McGroupMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: L2McGroup_GetL2McGroupMemberAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2McGroupServer).GetL2McGroupMemberAttribute(ctx, req.(*GetL2McGroupMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// L2McGroup_ServiceDesc is the grpc.ServiceDesc for L2McGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var L2McGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.L2mcGroup",
	HandlerType: (*L2McGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateL2mcGroup",
			Handler:    _L2McGroup_CreateL2McGroup_Handler,
		},
		{
			MethodName: "RemoveL2mcGroup",
			Handler:    _L2McGroup_RemoveL2McGroup_Handler,
		},
		{
			MethodName: "GetL2mcGroupAttribute",
			Handler:    _L2McGroup_GetL2McGroupAttribute_Handler,
		},
		{
			MethodName: "CreateL2mcGroupMember",
			Handler:    _L2McGroup_CreateL2McGroupMember_Handler,
		},
		{
			MethodName: "RemoveL2mcGroupMember",
			Handler:    _L2McGroup_RemoveL2McGroupMember_Handler,
		},
		{
			MethodName: "GetL2mcGroupMemberAttribute",
			Handler:    _L2McGroup_GetL2McGroupMemberAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/l2mc_group.proto",
}
