// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/isolation_group.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IsolationGroup_CreateIsolationGroup_FullMethodName             = "/lemming.dataplane.sai.IsolationGroup/CreateIsolationGroup"
	IsolationGroup_RemoveIsolationGroup_FullMethodName             = "/lemming.dataplane.sai.IsolationGroup/RemoveIsolationGroup"
	IsolationGroup_GetIsolationGroupAttribute_FullMethodName       = "/lemming.dataplane.sai.IsolationGroup/GetIsolationGroupAttribute"
	IsolationGroup_CreateIsolationGroupMember_FullMethodName       = "/lemming.dataplane.sai.IsolationGroup/CreateIsolationGroupMember"
	IsolationGroup_RemoveIsolationGroupMember_FullMethodName       = "/lemming.dataplane.sai.IsolationGroup/RemoveIsolationGroupMember"
	IsolationGroup_GetIsolationGroupMemberAttribute_FullMethodName = "/lemming.dataplane.sai.IsolationGroup/GetIsolationGroupMemberAttribute"
)

// IsolationGroupClient is the client API for IsolationGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IsolationGroupClient interface {
	CreateIsolationGroup(ctx context.Context, in *CreateIsolationGroupRequest, opts ...grpc.CallOption) (*CreateIsolationGroupResponse, error)
	RemoveIsolationGroup(ctx context.Context, in *RemoveIsolationGroupRequest, opts ...grpc.CallOption) (*RemoveIsolationGroupResponse, error)
	GetIsolationGroupAttribute(ctx context.Context, in *GetIsolationGroupAttributeRequest, opts ...grpc.CallOption) (*GetIsolationGroupAttributeResponse, error)
	CreateIsolationGroupMember(ctx context.Context, in *CreateIsolationGroupMemberRequest, opts ...grpc.CallOption) (*CreateIsolationGroupMemberResponse, error)
	RemoveIsolationGroupMember(ctx context.Context, in *RemoveIsolationGroupMemberRequest, opts ...grpc.CallOption) (*RemoveIsolationGroupMemberResponse, error)
	GetIsolationGroupMemberAttribute(ctx context.Context, in *GetIsolationGroupMemberAttributeRequest, opts ...grpc.CallOption) (*GetIsolationGroupMemberAttributeResponse, error)
}

type isolationGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewIsolationGroupClient(cc grpc.ClientConnInterface) IsolationGroupClient {
	return &isolationGroupClient{cc}
}

func (c *isolationGroupClient) CreateIsolationGroup(ctx context.Context, in *CreateIsolationGroupRequest, opts ...grpc.CallOption) (*CreateIsolationGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIsolationGroupResponse)
	err := c.cc.Invoke(ctx, IsolationGroup_CreateIsolationGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolationGroupClient) RemoveIsolationGroup(ctx context.Context, in *RemoveIsolationGroupRequest, opts ...grpc.CallOption) (*RemoveIsolationGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveIsolationGroupResponse)
	err := c.cc.Invoke(ctx, IsolationGroup_RemoveIsolationGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolationGroupClient) GetIsolationGroupAttribute(ctx context.Context, in *GetIsolationGroupAttributeRequest, opts ...grpc.CallOption) (*GetIsolationGroupAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIsolationGroupAttributeResponse)
	err := c.cc.Invoke(ctx, IsolationGroup_GetIsolationGroupAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolationGroupClient) CreateIsolationGroupMember(ctx context.Context, in *CreateIsolationGroupMemberRequest, opts ...grpc.CallOption) (*CreateIsolationGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIsolationGroupMemberResponse)
	err := c.cc.Invoke(ctx, IsolationGroup_CreateIsolationGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolationGroupClient) RemoveIsolationGroupMember(ctx context.Context, in *RemoveIsolationGroupMemberRequest, opts ...grpc.CallOption) (*RemoveIsolationGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveIsolationGroupMemberResponse)
	err := c.cc.Invoke(ctx, IsolationGroup_RemoveIsolationGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *isolationGroupClient) GetIsolationGroupMemberAttribute(ctx context.Context, in *GetIsolationGroupMemberAttributeRequest, opts ...grpc.CallOption) (*GetIsolationGroupMemberAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIsolationGroupMemberAttributeResponse)
	err := c.cc.Invoke(ctx, IsolationGroup_GetIsolationGroupMemberAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IsolationGroupServer is the server API for IsolationGroup service.
// All implementations should embed UnimplementedIsolationGroupServer
// for forward compatibility.
type IsolationGroupServer interface {
	CreateIsolationGroup(context.Context, *CreateIsolationGroupRequest) (*CreateIsolationGroupResponse, error)
	RemoveIsolationGroup(context.Context, *RemoveIsolationGroupRequest) (*RemoveIsolationGroupResponse, error)
	GetIsolationGroupAttribute(context.Context, *GetIsolationGroupAttributeRequest) (*GetIsolationGroupAttributeResponse, error)
	CreateIsolationGroupMember(context.Context, *CreateIsolationGroupMemberRequest) (*CreateIsolationGroupMemberResponse, error)
	RemoveIsolationGroupMember(context.Context, *RemoveIsolationGroupMemberRequest) (*RemoveIsolationGroupMemberResponse, error)
	GetIsolationGroupMemberAttribute(context.Context, *GetIsolationGroupMemberAttributeRequest) (*GetIsolationGroupMemberAttributeResponse, error)
}

// UnimplementedIsolationGroupServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIsolationGroupServer struct{}

func (UnimplementedIsolationGroupServer) CreateIsolationGroup(context.Context, *CreateIsolationGroupRequest) (*CreateIsolationGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIsolationGroup not implemented")
}
func (UnimplementedIsolationGroupServer) RemoveIsolationGroup(context.Context, *RemoveIsolationGroupRequest) (*RemoveIsolationGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIsolationGroup not implemented")
}
func (UnimplementedIsolationGroupServer) GetIsolationGroupAttribute(context.Context, *GetIsolationGroupAttributeRequest) (*GetIsolationGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIsolationGroupAttribute not implemented")
}
func (UnimplementedIsolationGroupServer) CreateIsolationGroupMember(context.Context, *CreateIsolationGroupMemberRequest) (*CreateIsolationGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIsolationGroupMember not implemented")
}
func (UnimplementedIsolationGroupServer) RemoveIsolationGroupMember(context.Context, *RemoveIsolationGroupMemberRequest) (*RemoveIsolationGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIsolationGroupMember not implemented")
}
func (UnimplementedIsolationGroupServer) GetIsolationGroupMemberAttribute(context.Context, *GetIsolationGroupMemberAttributeRequest) (*GetIsolationGroupMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIsolationGroupMemberAttribute not implemented")
}
func (UnimplementedIsolationGroupServer) testEmbeddedByValue() {}

// UnsafeIsolationGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IsolationGroupServer will
// result in compilation errors.
type UnsafeIsolationGroupServer interface {
	mustEmbedUnimplementedIsolationGroupServer()
}

func RegisterIsolationGroupServer(s grpc.ServiceRegistrar, srv IsolationGroupServer) {
	// If the following call pancis, it indicates UnimplementedIsolationGroupServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IsolationGroup_ServiceDesc, srv)
}

func _IsolationGroup_CreateIsolationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIsolationGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolationGroupServer).CreateIsolationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IsolationGroup_CreateIsolationGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolationGroupServer).CreateIsolationGroup(ctx, req.(*CreateIsolationGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolationGroup_RemoveIsolationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIsolationGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolationGroupServer).RemoveIsolationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IsolationGroup_RemoveIsolationGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolationGroupServer).RemoveIsolationGroup(ctx, req.(*RemoveIsolationGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolationGroup_GetIsolationGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIsolationGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolationGroupServer).GetIsolationGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IsolationGroup_GetIsolationGroupAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolationGroupServer).GetIsolationGroupAttribute(ctx, req.(*GetIsolationGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolationGroup_CreateIsolationGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIsolationGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolationGroupServer).CreateIsolationGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IsolationGroup_CreateIsolationGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolationGroupServer).CreateIsolationGroupMember(ctx, req.(*CreateIsolationGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolationGroup_RemoveIsolationGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIsolationGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolationGroupServer).RemoveIsolationGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IsolationGroup_RemoveIsolationGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolationGroupServer).RemoveIsolationGroupMember(ctx, req.(*RemoveIsolationGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IsolationGroup_GetIsolationGroupMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIsolationGroupMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IsolationGroupServer).GetIsolationGroupMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IsolationGroup_GetIsolationGroupMemberAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IsolationGroupServer).GetIsolationGroupMemberAttribute(ctx, req.(*GetIsolationGroupMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IsolationGroup_ServiceDesc is the grpc.ServiceDesc for IsolationGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IsolationGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.IsolationGroup",
	HandlerType: (*IsolationGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIsolationGroup",
			Handler:    _IsolationGroup_CreateIsolationGroup_Handler,
		},
		{
			MethodName: "RemoveIsolationGroup",
			Handler:    _IsolationGroup_RemoveIsolationGroup_Handler,
		},
		{
			MethodName: "GetIsolationGroupAttribute",
			Handler:    _IsolationGroup_GetIsolationGroupAttribute_Handler,
		},
		{
			MethodName: "CreateIsolationGroupMember",
			Handler:    _IsolationGroup_CreateIsolationGroupMember_Handler,
		},
		{
			MethodName: "RemoveIsolationGroupMember",
			Handler:    _IsolationGroup_RemoveIsolationGroupMember_Handler,
		},
		{
			MethodName: "GetIsolationGroupMemberAttribute",
			Handler:    _IsolationGroup_GetIsolationGroupMemberAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/isolation_group.proto",
}
