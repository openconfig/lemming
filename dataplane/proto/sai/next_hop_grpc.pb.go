// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/next_hop.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NextHop_CreateNextHop_FullMethodName       = "/lemming.dataplane.sai.NextHop/CreateNextHop"
	NextHop_RemoveNextHop_FullMethodName       = "/lemming.dataplane.sai.NextHop/RemoveNextHop"
	NextHop_SetNextHopAttribute_FullMethodName = "/lemming.dataplane.sai.NextHop/SetNextHopAttribute"
	NextHop_GetNextHopAttribute_FullMethodName = "/lemming.dataplane.sai.NextHop/GetNextHopAttribute"
	NextHop_CreateNextHops_FullMethodName      = "/lemming.dataplane.sai.NextHop/CreateNextHops"
	NextHop_RemoveNextHops_FullMethodName      = "/lemming.dataplane.sai.NextHop/RemoveNextHops"
)

// NextHopClient is the client API for NextHop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NextHopClient interface {
	CreateNextHop(ctx context.Context, in *CreateNextHopRequest, opts ...grpc.CallOption) (*CreateNextHopResponse, error)
	RemoveNextHop(ctx context.Context, in *RemoveNextHopRequest, opts ...grpc.CallOption) (*RemoveNextHopResponse, error)
	SetNextHopAttribute(ctx context.Context, in *SetNextHopAttributeRequest, opts ...grpc.CallOption) (*SetNextHopAttributeResponse, error)
	GetNextHopAttribute(ctx context.Context, in *GetNextHopAttributeRequest, opts ...grpc.CallOption) (*GetNextHopAttributeResponse, error)
	CreateNextHops(ctx context.Context, in *CreateNextHopsRequest, opts ...grpc.CallOption) (*CreateNextHopsResponse, error)
	RemoveNextHops(ctx context.Context, in *RemoveNextHopsRequest, opts ...grpc.CallOption) (*RemoveNextHopsResponse, error)
}

type nextHopClient struct {
	cc grpc.ClientConnInterface
}

func NewNextHopClient(cc grpc.ClientConnInterface) NextHopClient {
	return &nextHopClient{cc}
}

func (c *nextHopClient) CreateNextHop(ctx context.Context, in *CreateNextHopRequest, opts ...grpc.CallOption) (*CreateNextHopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNextHopResponse)
	err := c.cc.Invoke(ctx, NextHop_CreateNextHop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopClient) RemoveNextHop(ctx context.Context, in *RemoveNextHopRequest, opts ...grpc.CallOption) (*RemoveNextHopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNextHopResponse)
	err := c.cc.Invoke(ctx, NextHop_RemoveNextHop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopClient) SetNextHopAttribute(ctx context.Context, in *SetNextHopAttributeRequest, opts ...grpc.CallOption) (*SetNextHopAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetNextHopAttributeResponse)
	err := c.cc.Invoke(ctx, NextHop_SetNextHopAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopClient) GetNextHopAttribute(ctx context.Context, in *GetNextHopAttributeRequest, opts ...grpc.CallOption) (*GetNextHopAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNextHopAttributeResponse)
	err := c.cc.Invoke(ctx, NextHop_GetNextHopAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopClient) CreateNextHops(ctx context.Context, in *CreateNextHopsRequest, opts ...grpc.CallOption) (*CreateNextHopsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNextHopsResponse)
	err := c.cc.Invoke(ctx, NextHop_CreateNextHops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nextHopClient) RemoveNextHops(ctx context.Context, in *RemoveNextHopsRequest, opts ...grpc.CallOption) (*RemoveNextHopsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveNextHopsResponse)
	err := c.cc.Invoke(ctx, NextHop_RemoveNextHops_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NextHopServer is the server API for NextHop service.
// All implementations should embed UnimplementedNextHopServer
// for forward compatibility.
type NextHopServer interface {
	CreateNextHop(context.Context, *CreateNextHopRequest) (*CreateNextHopResponse, error)
	RemoveNextHop(context.Context, *RemoveNextHopRequest) (*RemoveNextHopResponse, error)
	SetNextHopAttribute(context.Context, *SetNextHopAttributeRequest) (*SetNextHopAttributeResponse, error)
	GetNextHopAttribute(context.Context, *GetNextHopAttributeRequest) (*GetNextHopAttributeResponse, error)
	CreateNextHops(context.Context, *CreateNextHopsRequest) (*CreateNextHopsResponse, error)
	RemoveNextHops(context.Context, *RemoveNextHopsRequest) (*RemoveNextHopsResponse, error)
}

// UnimplementedNextHopServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNextHopServer struct{}

func (UnimplementedNextHopServer) CreateNextHop(context.Context, *CreateNextHopRequest) (*CreateNextHopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHop not implemented")
}
func (UnimplementedNextHopServer) RemoveNextHop(context.Context, *RemoveNextHopRequest) (*RemoveNextHopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNextHop not implemented")
}
func (UnimplementedNextHopServer) SetNextHopAttribute(context.Context, *SetNextHopAttributeRequest) (*SetNextHopAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNextHopAttribute not implemented")
}
func (UnimplementedNextHopServer) GetNextHopAttribute(context.Context, *GetNextHopAttributeRequest) (*GetNextHopAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextHopAttribute not implemented")
}
func (UnimplementedNextHopServer) CreateNextHops(context.Context, *CreateNextHopsRequest) (*CreateNextHopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNextHops not implemented")
}
func (UnimplementedNextHopServer) RemoveNextHops(context.Context, *RemoveNextHopsRequest) (*RemoveNextHopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNextHops not implemented")
}
func (UnimplementedNextHopServer) testEmbeddedByValue() {}

// UnsafeNextHopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NextHopServer will
// result in compilation errors.
type UnsafeNextHopServer interface {
	mustEmbedUnimplementedNextHopServer()
}

func RegisterNextHopServer(s grpc.ServiceRegistrar, srv NextHopServer) {
	// If the following call pancis, it indicates UnimplementedNextHopServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NextHop_ServiceDesc, srv)
}

func _NextHop_CreateNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopServer).CreateNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHop_CreateNextHop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopServer).CreateNextHop(ctx, req.(*CreateNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHop_RemoveNextHop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNextHopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopServer).RemoveNextHop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHop_RemoveNextHop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopServer).RemoveNextHop(ctx, req.(*RemoveNextHopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHop_SetNextHopAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNextHopAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopServer).SetNextHopAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHop_SetNextHopAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopServer).SetNextHopAttribute(ctx, req.(*SetNextHopAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHop_GetNextHopAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextHopAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopServer).GetNextHopAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHop_GetNextHopAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopServer).GetNextHopAttribute(ctx, req.(*GetNextHopAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHop_CreateNextHops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNextHopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopServer).CreateNextHops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHop_CreateNextHops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopServer).CreateNextHops(ctx, req.(*CreateNextHopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NextHop_RemoveNextHops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveNextHopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NextHopServer).RemoveNextHops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NextHop_RemoveNextHops_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NextHopServer).RemoveNextHops(ctx, req.(*RemoveNextHopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NextHop_ServiceDesc is the grpc.ServiceDesc for NextHop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NextHop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.NextHop",
	HandlerType: (*NextHopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNextHop",
			Handler:    _NextHop_CreateNextHop_Handler,
		},
		{
			MethodName: "RemoveNextHop",
			Handler:    _NextHop_RemoveNextHop_Handler,
		},
		{
			MethodName: "SetNextHopAttribute",
			Handler:    _NextHop_SetNextHopAttribute_Handler,
		},
		{
			MethodName: "GetNextHopAttribute",
			Handler:    _NextHop_GetNextHopAttribute_Handler,
		},
		{
			MethodName: "CreateNextHops",
			Handler:    _NextHop_CreateNextHops_Handler,
		},
		{
			MethodName: "RemoveNextHops",
			Handler:    _NextHop_RemoveNextHops_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/next_hop.proto",
}
