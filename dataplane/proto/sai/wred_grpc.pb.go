// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/wred.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Wred_CreateWred_FullMethodName       = "/lemming.dataplane.sai.Wred/CreateWred"
	Wred_RemoveWred_FullMethodName       = "/lemming.dataplane.sai.Wred/RemoveWred"
	Wred_SetWredAttribute_FullMethodName = "/lemming.dataplane.sai.Wred/SetWredAttribute"
	Wred_GetWredAttribute_FullMethodName = "/lemming.dataplane.sai.Wred/GetWredAttribute"
)

// WredClient is the client API for Wred service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WredClient interface {
	CreateWred(ctx context.Context, in *CreateWredRequest, opts ...grpc.CallOption) (*CreateWredResponse, error)
	RemoveWred(ctx context.Context, in *RemoveWredRequest, opts ...grpc.CallOption) (*RemoveWredResponse, error)
	SetWredAttribute(ctx context.Context, in *SetWredAttributeRequest, opts ...grpc.CallOption) (*SetWredAttributeResponse, error)
	GetWredAttribute(ctx context.Context, in *GetWredAttributeRequest, opts ...grpc.CallOption) (*GetWredAttributeResponse, error)
}

type wredClient struct {
	cc grpc.ClientConnInterface
}

func NewWredClient(cc grpc.ClientConnInterface) WredClient {
	return &wredClient{cc}
}

func (c *wredClient) CreateWred(ctx context.Context, in *CreateWredRequest, opts ...grpc.CallOption) (*CreateWredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWredResponse)
	err := c.cc.Invoke(ctx, Wred_CreateWred_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wredClient) RemoveWred(ctx context.Context, in *RemoveWredRequest, opts ...grpc.CallOption) (*RemoveWredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveWredResponse)
	err := c.cc.Invoke(ctx, Wred_RemoveWred_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wredClient) SetWredAttribute(ctx context.Context, in *SetWredAttributeRequest, opts ...grpc.CallOption) (*SetWredAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetWredAttributeResponse)
	err := c.cc.Invoke(ctx, Wred_SetWredAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wredClient) GetWredAttribute(ctx context.Context, in *GetWredAttributeRequest, opts ...grpc.CallOption) (*GetWredAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWredAttributeResponse)
	err := c.cc.Invoke(ctx, Wred_GetWredAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WredServer is the server API for Wred service.
// All implementations should embed UnimplementedWredServer
// for forward compatibility.
type WredServer interface {
	CreateWred(context.Context, *CreateWredRequest) (*CreateWredResponse, error)
	RemoveWred(context.Context, *RemoveWredRequest) (*RemoveWredResponse, error)
	SetWredAttribute(context.Context, *SetWredAttributeRequest) (*SetWredAttributeResponse, error)
	GetWredAttribute(context.Context, *GetWredAttributeRequest) (*GetWredAttributeResponse, error)
}

// UnimplementedWredServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWredServer struct{}

func (UnimplementedWredServer) CreateWred(context.Context, *CreateWredRequest) (*CreateWredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWred not implemented")
}
func (UnimplementedWredServer) RemoveWred(context.Context, *RemoveWredRequest) (*RemoveWredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWred not implemented")
}
func (UnimplementedWredServer) SetWredAttribute(context.Context, *SetWredAttributeRequest) (*SetWredAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWredAttribute not implemented")
}
func (UnimplementedWredServer) GetWredAttribute(context.Context, *GetWredAttributeRequest) (*GetWredAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWredAttribute not implemented")
}
func (UnimplementedWredServer) testEmbeddedByValue() {}

// UnsafeWredServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WredServer will
// result in compilation errors.
type UnsafeWredServer interface {
	mustEmbedUnimplementedWredServer()
}

func RegisterWredServer(s grpc.ServiceRegistrar, srv WredServer) {
	// If the following call pancis, it indicates UnimplementedWredServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Wred_ServiceDesc, srv)
}

func _Wred_CreateWred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WredServer).CreateWred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wred_CreateWred_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WredServer).CreateWred(ctx, req.(*CreateWredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wred_RemoveWred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WredServer).RemoveWred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wred_RemoveWred_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WredServer).RemoveWred(ctx, req.(*RemoveWredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wred_SetWredAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWredAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WredServer).SetWredAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wred_SetWredAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WredServer).SetWredAttribute(ctx, req.(*SetWredAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wred_GetWredAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWredAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WredServer).GetWredAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wred_GetWredAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WredServer).GetWredAttribute(ctx, req.(*GetWredAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wred_ServiceDesc is the grpc.ServiceDesc for Wred service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wred_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Wred",
	HandlerType: (*WredServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWred",
			Handler:    _Wred_CreateWred_Handler,
		},
		{
			MethodName: "RemoveWred",
			Handler:    _Wred_RemoveWred_Handler,
		},
		{
			MethodName: "SetWredAttribute",
			Handler:    _Wred_SetWredAttribute_Handler,
		},
		{
			MethodName: "GetWredAttribute",
			Handler:    _Wred_GetWredAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/wred.proto",
}
