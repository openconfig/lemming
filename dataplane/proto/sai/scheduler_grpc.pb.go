// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/scheduler.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Scheduler_CreateScheduler_FullMethodName       = "/lemming.dataplane.sai.Scheduler/CreateScheduler"
	Scheduler_RemoveScheduler_FullMethodName       = "/lemming.dataplane.sai.Scheduler/RemoveScheduler"
	Scheduler_SetSchedulerAttribute_FullMethodName = "/lemming.dataplane.sai.Scheduler/SetSchedulerAttribute"
	Scheduler_GetSchedulerAttribute_FullMethodName = "/lemming.dataplane.sai.Scheduler/GetSchedulerAttribute"
)

// SchedulerClient is the client API for Scheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerClient interface {
	CreateScheduler(ctx context.Context, in *CreateSchedulerRequest, opts ...grpc.CallOption) (*CreateSchedulerResponse, error)
	RemoveScheduler(ctx context.Context, in *RemoveSchedulerRequest, opts ...grpc.CallOption) (*RemoveSchedulerResponse, error)
	SetSchedulerAttribute(ctx context.Context, in *SetSchedulerAttributeRequest, opts ...grpc.CallOption) (*SetSchedulerAttributeResponse, error)
	GetSchedulerAttribute(ctx context.Context, in *GetSchedulerAttributeRequest, opts ...grpc.CallOption) (*GetSchedulerAttributeResponse, error)
}

type schedulerClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerClient(cc grpc.ClientConnInterface) SchedulerClient {
	return &schedulerClient{cc}
}

func (c *schedulerClient) CreateScheduler(ctx context.Context, in *CreateSchedulerRequest, opts ...grpc.CallOption) (*CreateSchedulerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSchedulerResponse)
	err := c.cc.Invoke(ctx, Scheduler_CreateScheduler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) RemoveScheduler(ctx context.Context, in *RemoveSchedulerRequest, opts ...grpc.CallOption) (*RemoveSchedulerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSchedulerResponse)
	err := c.cc.Invoke(ctx, Scheduler_RemoveScheduler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) SetSchedulerAttribute(ctx context.Context, in *SetSchedulerAttributeRequest, opts ...grpc.CallOption) (*SetSchedulerAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSchedulerAttributeResponse)
	err := c.cc.Invoke(ctx, Scheduler_SetSchedulerAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerClient) GetSchedulerAttribute(ctx context.Context, in *GetSchedulerAttributeRequest, opts ...grpc.CallOption) (*GetSchedulerAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSchedulerAttributeResponse)
	err := c.cc.Invoke(ctx, Scheduler_GetSchedulerAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerServer is the server API for Scheduler service.
// All implementations should embed UnimplementedSchedulerServer
// for forward compatibility.
type SchedulerServer interface {
	CreateScheduler(context.Context, *CreateSchedulerRequest) (*CreateSchedulerResponse, error)
	RemoveScheduler(context.Context, *RemoveSchedulerRequest) (*RemoveSchedulerResponse, error)
	SetSchedulerAttribute(context.Context, *SetSchedulerAttributeRequest) (*SetSchedulerAttributeResponse, error)
	GetSchedulerAttribute(context.Context, *GetSchedulerAttributeRequest) (*GetSchedulerAttributeResponse, error)
}

// UnimplementedSchedulerServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSchedulerServer struct{}

func (UnimplementedSchedulerServer) CreateScheduler(context.Context, *CreateSchedulerRequest) (*CreateSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduler not implemented")
}
func (UnimplementedSchedulerServer) RemoveScheduler(context.Context, *RemoveSchedulerRequest) (*RemoveSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveScheduler not implemented")
}
func (UnimplementedSchedulerServer) SetSchedulerAttribute(context.Context, *SetSchedulerAttributeRequest) (*SetSchedulerAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchedulerAttribute not implemented")
}
func (UnimplementedSchedulerServer) GetSchedulerAttribute(context.Context, *GetSchedulerAttributeRequest) (*GetSchedulerAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerAttribute not implemented")
}
func (UnimplementedSchedulerServer) testEmbeddedByValue() {}

// UnsafeSchedulerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerServer will
// result in compilation errors.
type UnsafeSchedulerServer interface {
	mustEmbedUnimplementedSchedulerServer()
}

func RegisterSchedulerServer(s grpc.ServiceRegistrar, srv SchedulerServer) {
	// If the following call pancis, it indicates UnimplementedSchedulerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Scheduler_ServiceDesc, srv)
}

func _Scheduler_CreateScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).CreateScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_CreateScheduler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).CreateScheduler(ctx, req.(*CreateSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_RemoveScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).RemoveScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_RemoveScheduler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).RemoveScheduler(ctx, req.(*RemoveSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_SetSchedulerAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSchedulerAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).SetSchedulerAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_SetSchedulerAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).SetSchedulerAttribute(ctx, req.(*SetSchedulerAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Scheduler_GetSchedulerAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulerAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerServer).GetSchedulerAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Scheduler_GetSchedulerAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerServer).GetSchedulerAttribute(ctx, req.(*GetSchedulerAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Scheduler_ServiceDesc is the grpc.ServiceDesc for Scheduler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scheduler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Scheduler",
	HandlerType: (*SchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateScheduler",
			Handler:    _Scheduler_CreateScheduler_Handler,
		},
		{
			MethodName: "RemoveScheduler",
			Handler:    _Scheduler_RemoveScheduler_Handler,
		},
		{
			MethodName: "SetSchedulerAttribute",
			Handler:    _Scheduler_SetSchedulerAttribute_Handler,
		},
		{
			MethodName: "GetSchedulerAttribute",
			Handler:    _Scheduler_GetSchedulerAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/scheduler.proto",
}
