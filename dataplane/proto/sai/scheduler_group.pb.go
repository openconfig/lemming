// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: dataplane/proto/sai/scheduler_group.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SchedulerGroupAttr int32

const (
	SchedulerGroupAttr_SCHEDULER_GROUP_ATTR_UNSPECIFIED          SchedulerGroupAttr = 0
	SchedulerGroupAttr_SCHEDULER_GROUP_ATTR_CHILD_COUNT          SchedulerGroupAttr = 1
	SchedulerGroupAttr_SCHEDULER_GROUP_ATTR_CHILD_LIST           SchedulerGroupAttr = 2
	SchedulerGroupAttr_SCHEDULER_GROUP_ATTR_PORT_ID              SchedulerGroupAttr = 3
	SchedulerGroupAttr_SCHEDULER_GROUP_ATTR_LEVEL                SchedulerGroupAttr = 4
	SchedulerGroupAttr_SCHEDULER_GROUP_ATTR_MAX_CHILDS           SchedulerGroupAttr = 5
	SchedulerGroupAttr_SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID SchedulerGroupAttr = 6
	SchedulerGroupAttr_SCHEDULER_GROUP_ATTR_PARENT_NODE          SchedulerGroupAttr = 7
)

// Enum value maps for SchedulerGroupAttr.
var (
	SchedulerGroupAttr_name = map[int32]string{
		0: "SCHEDULER_GROUP_ATTR_UNSPECIFIED",
		1: "SCHEDULER_GROUP_ATTR_CHILD_COUNT",
		2: "SCHEDULER_GROUP_ATTR_CHILD_LIST",
		3: "SCHEDULER_GROUP_ATTR_PORT_ID",
		4: "SCHEDULER_GROUP_ATTR_LEVEL",
		5: "SCHEDULER_GROUP_ATTR_MAX_CHILDS",
		6: "SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID",
		7: "SCHEDULER_GROUP_ATTR_PARENT_NODE",
	}
	SchedulerGroupAttr_value = map[string]int32{
		"SCHEDULER_GROUP_ATTR_UNSPECIFIED":          0,
		"SCHEDULER_GROUP_ATTR_CHILD_COUNT":          1,
		"SCHEDULER_GROUP_ATTR_CHILD_LIST":           2,
		"SCHEDULER_GROUP_ATTR_PORT_ID":              3,
		"SCHEDULER_GROUP_ATTR_LEVEL":                4,
		"SCHEDULER_GROUP_ATTR_MAX_CHILDS":           5,
		"SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID": 6,
		"SCHEDULER_GROUP_ATTR_PARENT_NODE":          7,
	}
)

func (x SchedulerGroupAttr) Enum() *SchedulerGroupAttr {
	p := new(SchedulerGroupAttr)
	*p = x
	return p
}

func (x SchedulerGroupAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulerGroupAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_scheduler_group_proto_enumTypes[0].Descriptor()
}

func (SchedulerGroupAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_scheduler_group_proto_enumTypes[0]
}

func (x SchedulerGroupAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulerGroupAttr.Descriptor instead.
func (SchedulerGroupAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_scheduler_group_proto_rawDescGZIP(), []int{0}
}

type CreateSchedulerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch             uint64  `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	PortId             *uint64 `protobuf:"varint,2,opt,name=port_id,json=portId,proto3,oneof" json:"port_id,omitempty"`
	Level              *uint32 `protobuf:"varint,3,opt,name=level,proto3,oneof" json:"level,omitempty"`
	MaxChilds          *uint32 `protobuf:"varint,4,opt,name=max_childs,json=maxChilds,proto3,oneof" json:"max_childs,omitempty"`
	SchedulerProfileId *uint64 `protobuf:"varint,5,opt,name=scheduler_profile_id,json=schedulerProfileId,proto3,oneof" json:"scheduler_profile_id,omitempty"`
	ParentNode         *uint64 `protobuf:"varint,6,opt,name=parent_node,json=parentNode,proto3,oneof" json:"parent_node,omitempty"`
}

func (x *CreateSchedulerGroupRequest) Reset() {
	*x = CreateSchedulerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchedulerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulerGroupRequest) ProtoMessage() {}

func (x *CreateSchedulerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulerGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateSchedulerGroupRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_scheduler_group_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSchedulerGroupRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateSchedulerGroupRequest) GetPortId() uint64 {
	if x != nil && x.PortId != nil {
		return *x.PortId
	}
	return 0
}

func (x *CreateSchedulerGroupRequest) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *CreateSchedulerGroupRequest) GetMaxChilds() uint32 {
	if x != nil && x.MaxChilds != nil {
		return *x.MaxChilds
	}
	return 0
}

func (x *CreateSchedulerGroupRequest) GetSchedulerProfileId() uint64 {
	if x != nil && x.SchedulerProfileId != nil {
		return *x.SchedulerProfileId
	}
	return 0
}

func (x *CreateSchedulerGroupRequest) GetParentNode() uint64 {
	if x != nil && x.ParentNode != nil {
		return *x.ParentNode
	}
	return 0
}

type CreateSchedulerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateSchedulerGroupResponse) Reset() {
	*x = CreateSchedulerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchedulerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchedulerGroupResponse) ProtoMessage() {}

func (x *CreateSchedulerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchedulerGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateSchedulerGroupResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_scheduler_group_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSchedulerGroupResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveSchedulerGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveSchedulerGroupRequest) Reset() {
	*x = RemoveSchedulerGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSchedulerGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSchedulerGroupRequest) ProtoMessage() {}

func (x *RemoveSchedulerGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSchedulerGroupRequest.ProtoReflect.Descriptor instead.
func (*RemoveSchedulerGroupRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_scheduler_group_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveSchedulerGroupRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveSchedulerGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSchedulerGroupResponse) Reset() {
	*x = RemoveSchedulerGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSchedulerGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSchedulerGroupResponse) ProtoMessage() {}

func (x *RemoveSchedulerGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSchedulerGroupResponse.ProtoReflect.Descriptor instead.
func (*RemoveSchedulerGroupResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_scheduler_group_proto_rawDescGZIP(), []int{3}
}

type SetSchedulerGroupAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid                uint64  `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	SchedulerProfileId *uint64 `protobuf:"varint,2,opt,name=scheduler_profile_id,json=schedulerProfileId,proto3,oneof" json:"scheduler_profile_id,omitempty"`
	ParentNode         *uint64 `protobuf:"varint,3,opt,name=parent_node,json=parentNode,proto3,oneof" json:"parent_node,omitempty"`
}

func (x *SetSchedulerGroupAttributeRequest) Reset() {
	*x = SetSchedulerGroupAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSchedulerGroupAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSchedulerGroupAttributeRequest) ProtoMessage() {}

func (x *SetSchedulerGroupAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSchedulerGroupAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetSchedulerGroupAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_scheduler_group_proto_rawDescGZIP(), []int{4}
}

func (x *SetSchedulerGroupAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetSchedulerGroupAttributeRequest) GetSchedulerProfileId() uint64 {
	if x != nil && x.SchedulerProfileId != nil {
		return *x.SchedulerProfileId
	}
	return 0
}

func (x *SetSchedulerGroupAttributeRequest) GetParentNode() uint64 {
	if x != nil && x.ParentNode != nil {
		return *x.ParentNode
	}
	return 0
}

type SetSchedulerGroupAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSchedulerGroupAttributeResponse) Reset() {
	*x = SetSchedulerGroupAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSchedulerGroupAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSchedulerGroupAttributeResponse) ProtoMessage() {}

func (x *SetSchedulerGroupAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSchedulerGroupAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetSchedulerGroupAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_scheduler_group_proto_rawDescGZIP(), []int{5}
}

type GetSchedulerGroupAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64               `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []SchedulerGroupAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.SchedulerGroupAttr" json:"attr_type,omitempty"`
}

func (x *GetSchedulerGroupAttributeRequest) Reset() {
	*x = GetSchedulerGroupAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerGroupAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerGroupAttributeRequest) ProtoMessage() {}

func (x *GetSchedulerGroupAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerGroupAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetSchedulerGroupAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_scheduler_group_proto_rawDescGZIP(), []int{6}
}

func (x *GetSchedulerGroupAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetSchedulerGroupAttributeRequest) GetAttrType() []SchedulerGroupAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetSchedulerGroupAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *SchedulerGroupAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetSchedulerGroupAttributeResponse) Reset() {
	*x = GetSchedulerGroupAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSchedulerGroupAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSchedulerGroupAttributeResponse) ProtoMessage() {}

func (x *GetSchedulerGroupAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_scheduler_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSchedulerGroupAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetSchedulerGroupAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_scheduler_group_proto_rawDescGZIP(), []int{7}
}

func (x *GetSchedulerGroupAttributeResponse) GetAttr() *SchedulerGroupAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

var File_dataplane_proto_sai_scheduler_group_proto protoreflect.FileDescriptor

var file_dataplane_proto_sai_scheduler_group_proto_rawDesc = []byte{
	0x0a, 0x29, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x1a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x24, 0x0a, 0x07,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f,
	0x05, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x06, 0x48, 0x03, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x04, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x06,
	0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x18, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x22, 0x30, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x06, 0x48, 0x00, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x01, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x22, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x2a, 0xc1, 0x02, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x23,
	0x0a, 0x1f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44,
	0x53, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x07, 0x32, 0xc4, 0x04, 0x0a, 0x0e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x81, 0x01, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x81, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_proto_sai_scheduler_group_proto_rawDescOnce sync.Once
	file_dataplane_proto_sai_scheduler_group_proto_rawDescData = file_dataplane_proto_sai_scheduler_group_proto_rawDesc
)

func file_dataplane_proto_sai_scheduler_group_proto_rawDescGZIP() []byte {
	file_dataplane_proto_sai_scheduler_group_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_sai_scheduler_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_sai_scheduler_group_proto_rawDescData)
	})
	return file_dataplane_proto_sai_scheduler_group_proto_rawDescData
}

var file_dataplane_proto_sai_scheduler_group_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_proto_sai_scheduler_group_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dataplane_proto_sai_scheduler_group_proto_goTypes = []interface{}{
	(SchedulerGroupAttr)(0),                    // 0: lemming.dataplane.sai.SchedulerGroupAttr
	(*CreateSchedulerGroupRequest)(nil),        // 1: lemming.dataplane.sai.CreateSchedulerGroupRequest
	(*CreateSchedulerGroupResponse)(nil),       // 2: lemming.dataplane.sai.CreateSchedulerGroupResponse
	(*RemoveSchedulerGroupRequest)(nil),        // 3: lemming.dataplane.sai.RemoveSchedulerGroupRequest
	(*RemoveSchedulerGroupResponse)(nil),       // 4: lemming.dataplane.sai.RemoveSchedulerGroupResponse
	(*SetSchedulerGroupAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetSchedulerGroupAttributeRequest
	(*SetSchedulerGroupAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetSchedulerGroupAttributeResponse
	(*GetSchedulerGroupAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetSchedulerGroupAttributeRequest
	(*GetSchedulerGroupAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetSchedulerGroupAttributeResponse
	(*SchedulerGroupAttribute)(nil),            // 9: lemming.dataplane.sai.SchedulerGroupAttribute
}
var file_dataplane_proto_sai_scheduler_group_proto_depIdxs = []int32{
	0, // 0: lemming.dataplane.sai.GetSchedulerGroupAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.SchedulerGroupAttr
	9, // 1: lemming.dataplane.sai.GetSchedulerGroupAttributeResponse.attr:type_name -> lemming.dataplane.sai.SchedulerGroupAttribute
	1, // 2: lemming.dataplane.sai.SchedulerGroup.CreateSchedulerGroup:input_type -> lemming.dataplane.sai.CreateSchedulerGroupRequest
	3, // 3: lemming.dataplane.sai.SchedulerGroup.RemoveSchedulerGroup:input_type -> lemming.dataplane.sai.RemoveSchedulerGroupRequest
	5, // 4: lemming.dataplane.sai.SchedulerGroup.SetSchedulerGroupAttribute:input_type -> lemming.dataplane.sai.SetSchedulerGroupAttributeRequest
	7, // 5: lemming.dataplane.sai.SchedulerGroup.GetSchedulerGroupAttribute:input_type -> lemming.dataplane.sai.GetSchedulerGroupAttributeRequest
	2, // 6: lemming.dataplane.sai.SchedulerGroup.CreateSchedulerGroup:output_type -> lemming.dataplane.sai.CreateSchedulerGroupResponse
	4, // 7: lemming.dataplane.sai.SchedulerGroup.RemoveSchedulerGroup:output_type -> lemming.dataplane.sai.RemoveSchedulerGroupResponse
	6, // 8: lemming.dataplane.sai.SchedulerGroup.SetSchedulerGroupAttribute:output_type -> lemming.dataplane.sai.SetSchedulerGroupAttributeResponse
	8, // 9: lemming.dataplane.sai.SchedulerGroup.GetSchedulerGroupAttribute:output_type -> lemming.dataplane.sai.GetSchedulerGroupAttributeResponse
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_dataplane_proto_sai_scheduler_group_proto_init() }
func file_dataplane_proto_sai_scheduler_group_proto_init() {
	if File_dataplane_proto_sai_scheduler_group_proto != nil {
		return
	}
	file_dataplane_proto_sai_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_sai_scheduler_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchedulerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_scheduler_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchedulerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_scheduler_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSchedulerGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_scheduler_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSchedulerGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_scheduler_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSchedulerGroupAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_scheduler_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSchedulerGroupAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_scheduler_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerGroupAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_scheduler_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSchedulerGroupAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_sai_scheduler_group_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_proto_sai_scheduler_group_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_sai_scheduler_group_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_sai_scheduler_group_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_sai_scheduler_group_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_sai_scheduler_group_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_sai_scheduler_group_proto_msgTypes,
	}.Build()
	File_dataplane_proto_sai_scheduler_group_proto = out.File
	file_dataplane_proto_sai_scheduler_group_proto_rawDesc = nil
	file_dataplane_proto_sai_scheduler_group_proto_goTypes = nil
	file_dataplane_proto_sai_scheduler_group_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SchedulerGroupClient is the client API for SchedulerGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerGroupClient interface {
	CreateSchedulerGroup(ctx context.Context, in *CreateSchedulerGroupRequest, opts ...grpc.CallOption) (*CreateSchedulerGroupResponse, error)
	RemoveSchedulerGroup(ctx context.Context, in *RemoveSchedulerGroupRequest, opts ...grpc.CallOption) (*RemoveSchedulerGroupResponse, error)
	SetSchedulerGroupAttribute(ctx context.Context, in *SetSchedulerGroupAttributeRequest, opts ...grpc.CallOption) (*SetSchedulerGroupAttributeResponse, error)
	GetSchedulerGroupAttribute(ctx context.Context, in *GetSchedulerGroupAttributeRequest, opts ...grpc.CallOption) (*GetSchedulerGroupAttributeResponse, error)
}

type schedulerGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerGroupClient(cc grpc.ClientConnInterface) SchedulerGroupClient {
	return &schedulerGroupClient{cc}
}

func (c *schedulerGroupClient) CreateSchedulerGroup(ctx context.Context, in *CreateSchedulerGroupRequest, opts ...grpc.CallOption) (*CreateSchedulerGroupResponse, error) {
	out := new(CreateSchedulerGroupResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.SchedulerGroup/CreateSchedulerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerGroupClient) RemoveSchedulerGroup(ctx context.Context, in *RemoveSchedulerGroupRequest, opts ...grpc.CallOption) (*RemoveSchedulerGroupResponse, error) {
	out := new(RemoveSchedulerGroupResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.SchedulerGroup/RemoveSchedulerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerGroupClient) SetSchedulerGroupAttribute(ctx context.Context, in *SetSchedulerGroupAttributeRequest, opts ...grpc.CallOption) (*SetSchedulerGroupAttributeResponse, error) {
	out := new(SetSchedulerGroupAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.SchedulerGroup/SetSchedulerGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerGroupClient) GetSchedulerGroupAttribute(ctx context.Context, in *GetSchedulerGroupAttributeRequest, opts ...grpc.CallOption) (*GetSchedulerGroupAttributeResponse, error) {
	out := new(GetSchedulerGroupAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.SchedulerGroup/GetSchedulerGroupAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerGroupServer is the server API for SchedulerGroup service.
type SchedulerGroupServer interface {
	CreateSchedulerGroup(context.Context, *CreateSchedulerGroupRequest) (*CreateSchedulerGroupResponse, error)
	RemoveSchedulerGroup(context.Context, *RemoveSchedulerGroupRequest) (*RemoveSchedulerGroupResponse, error)
	SetSchedulerGroupAttribute(context.Context, *SetSchedulerGroupAttributeRequest) (*SetSchedulerGroupAttributeResponse, error)
	GetSchedulerGroupAttribute(context.Context, *GetSchedulerGroupAttributeRequest) (*GetSchedulerGroupAttributeResponse, error)
}

// UnimplementedSchedulerGroupServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerGroupServer struct {
}

func (*UnimplementedSchedulerGroupServer) CreateSchedulerGroup(context.Context, *CreateSchedulerGroupRequest) (*CreateSchedulerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedulerGroup not implemented")
}
func (*UnimplementedSchedulerGroupServer) RemoveSchedulerGroup(context.Context, *RemoveSchedulerGroupRequest) (*RemoveSchedulerGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSchedulerGroup not implemented")
}
func (*UnimplementedSchedulerGroupServer) SetSchedulerGroupAttribute(context.Context, *SetSchedulerGroupAttributeRequest) (*SetSchedulerGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchedulerGroupAttribute not implemented")
}
func (*UnimplementedSchedulerGroupServer) GetSchedulerGroupAttribute(context.Context, *GetSchedulerGroupAttributeRequest) (*GetSchedulerGroupAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerGroupAttribute not implemented")
}

func RegisterSchedulerGroupServer(s *grpc.Server, srv SchedulerGroupServer) {
	s.RegisterService(&_SchedulerGroup_serviceDesc, srv)
}

func _SchedulerGroup_CreateSchedulerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchedulerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerGroupServer).CreateSchedulerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.SchedulerGroup/CreateSchedulerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerGroupServer).CreateSchedulerGroup(ctx, req.(*CreateSchedulerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerGroup_RemoveSchedulerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSchedulerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerGroupServer).RemoveSchedulerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.SchedulerGroup/RemoveSchedulerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerGroupServer).RemoveSchedulerGroup(ctx, req.(*RemoveSchedulerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerGroup_SetSchedulerGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSchedulerGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerGroupServer).SetSchedulerGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.SchedulerGroup/SetSchedulerGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerGroupServer).SetSchedulerGroupAttribute(ctx, req.(*SetSchedulerGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerGroup_GetSchedulerGroupAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulerGroupAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerGroupServer).GetSchedulerGroupAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.SchedulerGroup/GetSchedulerGroupAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerGroupServer).GetSchedulerGroupAttribute(ctx, req.(*GetSchedulerGroupAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchedulerGroup_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.SchedulerGroup",
	HandlerType: (*SchedulerGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchedulerGroup",
			Handler:    _SchedulerGroup_CreateSchedulerGroup_Handler,
		},
		{
			MethodName: "RemoveSchedulerGroup",
			Handler:    _SchedulerGroup_RemoveSchedulerGroup_Handler,
		},
		{
			MethodName: "SetSchedulerGroupAttribute",
			Handler:    _SchedulerGroup_SetSchedulerGroupAttribute_Handler,
		},
		{
			MethodName: "GetSchedulerGroupAttribute",
			Handler:    _SchedulerGroup_GetSchedulerGroupAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/scheduler_group.proto",
}
