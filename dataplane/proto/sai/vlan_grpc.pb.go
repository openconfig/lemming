// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/vlan.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Vlan_CreateVlan_FullMethodName             = "/lemming.dataplane.sai.Vlan/CreateVlan"
	Vlan_RemoveVlan_FullMethodName             = "/lemming.dataplane.sai.Vlan/RemoveVlan"
	Vlan_SetVlanAttribute_FullMethodName       = "/lemming.dataplane.sai.Vlan/SetVlanAttribute"
	Vlan_GetVlanAttribute_FullMethodName       = "/lemming.dataplane.sai.Vlan/GetVlanAttribute"
	Vlan_CreateVlanMember_FullMethodName       = "/lemming.dataplane.sai.Vlan/CreateVlanMember"
	Vlan_RemoveVlanMember_FullMethodName       = "/lemming.dataplane.sai.Vlan/RemoveVlanMember"
	Vlan_SetVlanMemberAttribute_FullMethodName = "/lemming.dataplane.sai.Vlan/SetVlanMemberAttribute"
	Vlan_GetVlanMemberAttribute_FullMethodName = "/lemming.dataplane.sai.Vlan/GetVlanMemberAttribute"
	Vlan_CreateVlanMembers_FullMethodName      = "/lemming.dataplane.sai.Vlan/CreateVlanMembers"
	Vlan_RemoveVlanMembers_FullMethodName      = "/lemming.dataplane.sai.Vlan/RemoveVlanMembers"
	Vlan_GetVlanStats_FullMethodName           = "/lemming.dataplane.sai.Vlan/GetVlanStats"
)

// VlanClient is the client API for Vlan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VlanClient interface {
	CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*CreateVlanResponse, error)
	RemoveVlan(ctx context.Context, in *RemoveVlanRequest, opts ...grpc.CallOption) (*RemoveVlanResponse, error)
	SetVlanAttribute(ctx context.Context, in *SetVlanAttributeRequest, opts ...grpc.CallOption) (*SetVlanAttributeResponse, error)
	GetVlanAttribute(ctx context.Context, in *GetVlanAttributeRequest, opts ...grpc.CallOption) (*GetVlanAttributeResponse, error)
	CreateVlanMember(ctx context.Context, in *CreateVlanMemberRequest, opts ...grpc.CallOption) (*CreateVlanMemberResponse, error)
	RemoveVlanMember(ctx context.Context, in *RemoveVlanMemberRequest, opts ...grpc.CallOption) (*RemoveVlanMemberResponse, error)
	SetVlanMemberAttribute(ctx context.Context, in *SetVlanMemberAttributeRequest, opts ...grpc.CallOption) (*SetVlanMemberAttributeResponse, error)
	GetVlanMemberAttribute(ctx context.Context, in *GetVlanMemberAttributeRequest, opts ...grpc.CallOption) (*GetVlanMemberAttributeResponse, error)
	CreateVlanMembers(ctx context.Context, in *CreateVlanMembersRequest, opts ...grpc.CallOption) (*CreateVlanMembersResponse, error)
	RemoveVlanMembers(ctx context.Context, in *RemoveVlanMembersRequest, opts ...grpc.CallOption) (*RemoveVlanMembersResponse, error)
	GetVlanStats(ctx context.Context, in *GetVlanStatsRequest, opts ...grpc.CallOption) (*GetVlanStatsResponse, error)
}

type vlanClient struct {
	cc grpc.ClientConnInterface
}

func NewVlanClient(cc grpc.ClientConnInterface) VlanClient {
	return &vlanClient{cc}
}

func (c *vlanClient) CreateVlan(ctx context.Context, in *CreateVlanRequest, opts ...grpc.CallOption) (*CreateVlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVlanResponse)
	err := c.cc.Invoke(ctx, Vlan_CreateVlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) RemoveVlan(ctx context.Context, in *RemoveVlanRequest, opts ...grpc.CallOption) (*RemoveVlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveVlanResponse)
	err := c.cc.Invoke(ctx, Vlan_RemoveVlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) SetVlanAttribute(ctx context.Context, in *SetVlanAttributeRequest, opts ...grpc.CallOption) (*SetVlanAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVlanAttributeResponse)
	err := c.cc.Invoke(ctx, Vlan_SetVlanAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) GetVlanAttribute(ctx context.Context, in *GetVlanAttributeRequest, opts ...grpc.CallOption) (*GetVlanAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVlanAttributeResponse)
	err := c.cc.Invoke(ctx, Vlan_GetVlanAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) CreateVlanMember(ctx context.Context, in *CreateVlanMemberRequest, opts ...grpc.CallOption) (*CreateVlanMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVlanMemberResponse)
	err := c.cc.Invoke(ctx, Vlan_CreateVlanMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) RemoveVlanMember(ctx context.Context, in *RemoveVlanMemberRequest, opts ...grpc.CallOption) (*RemoveVlanMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveVlanMemberResponse)
	err := c.cc.Invoke(ctx, Vlan_RemoveVlanMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) SetVlanMemberAttribute(ctx context.Context, in *SetVlanMemberAttributeRequest, opts ...grpc.CallOption) (*SetVlanMemberAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVlanMemberAttributeResponse)
	err := c.cc.Invoke(ctx, Vlan_SetVlanMemberAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) GetVlanMemberAttribute(ctx context.Context, in *GetVlanMemberAttributeRequest, opts ...grpc.CallOption) (*GetVlanMemberAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVlanMemberAttributeResponse)
	err := c.cc.Invoke(ctx, Vlan_GetVlanMemberAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) CreateVlanMembers(ctx context.Context, in *CreateVlanMembersRequest, opts ...grpc.CallOption) (*CreateVlanMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVlanMembersResponse)
	err := c.cc.Invoke(ctx, Vlan_CreateVlanMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) RemoveVlanMembers(ctx context.Context, in *RemoveVlanMembersRequest, opts ...grpc.CallOption) (*RemoveVlanMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveVlanMembersResponse)
	err := c.cc.Invoke(ctx, Vlan_RemoveVlanMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vlanClient) GetVlanStats(ctx context.Context, in *GetVlanStatsRequest, opts ...grpc.CallOption) (*GetVlanStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVlanStatsResponse)
	err := c.cc.Invoke(ctx, Vlan_GetVlanStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VlanServer is the server API for Vlan service.
// All implementations should embed UnimplementedVlanServer
// for forward compatibility.
type VlanServer interface {
	CreateVlan(context.Context, *CreateVlanRequest) (*CreateVlanResponse, error)
	RemoveVlan(context.Context, *RemoveVlanRequest) (*RemoveVlanResponse, error)
	SetVlanAttribute(context.Context, *SetVlanAttributeRequest) (*SetVlanAttributeResponse, error)
	GetVlanAttribute(context.Context, *GetVlanAttributeRequest) (*GetVlanAttributeResponse, error)
	CreateVlanMember(context.Context, *CreateVlanMemberRequest) (*CreateVlanMemberResponse, error)
	RemoveVlanMember(context.Context, *RemoveVlanMemberRequest) (*RemoveVlanMemberResponse, error)
	SetVlanMemberAttribute(context.Context, *SetVlanMemberAttributeRequest) (*SetVlanMemberAttributeResponse, error)
	GetVlanMemberAttribute(context.Context, *GetVlanMemberAttributeRequest) (*GetVlanMemberAttributeResponse, error)
	CreateVlanMembers(context.Context, *CreateVlanMembersRequest) (*CreateVlanMembersResponse, error)
	RemoveVlanMembers(context.Context, *RemoveVlanMembersRequest) (*RemoveVlanMembersResponse, error)
	GetVlanStats(context.Context, *GetVlanStatsRequest) (*GetVlanStatsResponse, error)
}

// UnimplementedVlanServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVlanServer struct{}

func (UnimplementedVlanServer) CreateVlan(context.Context, *CreateVlanRequest) (*CreateVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVlan not implemented")
}
func (UnimplementedVlanServer) RemoveVlan(context.Context, *RemoveVlanRequest) (*RemoveVlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVlan not implemented")
}
func (UnimplementedVlanServer) SetVlanAttribute(context.Context, *SetVlanAttributeRequest) (*SetVlanAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVlanAttribute not implemented")
}
func (UnimplementedVlanServer) GetVlanAttribute(context.Context, *GetVlanAttributeRequest) (*GetVlanAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVlanAttribute not implemented")
}
func (UnimplementedVlanServer) CreateVlanMember(context.Context, *CreateVlanMemberRequest) (*CreateVlanMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVlanMember not implemented")
}
func (UnimplementedVlanServer) RemoveVlanMember(context.Context, *RemoveVlanMemberRequest) (*RemoveVlanMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVlanMember not implemented")
}
func (UnimplementedVlanServer) SetVlanMemberAttribute(context.Context, *SetVlanMemberAttributeRequest) (*SetVlanMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVlanMemberAttribute not implemented")
}
func (UnimplementedVlanServer) GetVlanMemberAttribute(context.Context, *GetVlanMemberAttributeRequest) (*GetVlanMemberAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVlanMemberAttribute not implemented")
}
func (UnimplementedVlanServer) CreateVlanMembers(context.Context, *CreateVlanMembersRequest) (*CreateVlanMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVlanMembers not implemented")
}
func (UnimplementedVlanServer) RemoveVlanMembers(context.Context, *RemoveVlanMembersRequest) (*RemoveVlanMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveVlanMembers not implemented")
}
func (UnimplementedVlanServer) GetVlanStats(context.Context, *GetVlanStatsRequest) (*GetVlanStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVlanStats not implemented")
}
func (UnimplementedVlanServer) testEmbeddedByValue() {}

// UnsafeVlanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VlanServer will
// result in compilation errors.
type UnsafeVlanServer interface {
	mustEmbedUnimplementedVlanServer()
}

func RegisterVlanServer(s grpc.ServiceRegistrar, srv VlanServer) {
	// If the following call pancis, it indicates UnimplementedVlanServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Vlan_ServiceDesc, srv)
}

func _Vlan_CreateVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).CreateVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlan_CreateVlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).CreateVlan(ctx, req.(*CreateVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_RemoveVlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).RemoveVlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlan_RemoveVlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).RemoveVlan(ctx, req.(*RemoveVlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_SetVlanAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVlanAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).SetVlanAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlan_SetVlanAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).SetVlanAttribute(ctx, req.(*SetVlanAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_GetVlanAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVlanAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).GetVlanAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlan_GetVlanAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).GetVlanAttribute(ctx, req.(*GetVlanAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_CreateVlanMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVlanMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).CreateVlanMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlan_CreateVlanMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).CreateVlanMember(ctx, req.(*CreateVlanMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_RemoveVlanMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVlanMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).RemoveVlanMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlan_RemoveVlanMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).RemoveVlanMember(ctx, req.(*RemoveVlanMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_SetVlanMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVlanMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).SetVlanMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlan_SetVlanMemberAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).SetVlanMemberAttribute(ctx, req.(*SetVlanMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_GetVlanMemberAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVlanMemberAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).GetVlanMemberAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlan_GetVlanMemberAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).GetVlanMemberAttribute(ctx, req.(*GetVlanMemberAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_CreateVlanMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVlanMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).CreateVlanMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlan_CreateVlanMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).CreateVlanMembers(ctx, req.(*CreateVlanMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_RemoveVlanMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveVlanMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).RemoveVlanMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlan_RemoveVlanMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).RemoveVlanMembers(ctx, req.(*RemoveVlanMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vlan_GetVlanStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVlanStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VlanServer).GetVlanStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vlan_GetVlanStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VlanServer).GetVlanStats(ctx, req.(*GetVlanStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vlan_ServiceDesc is the grpc.ServiceDesc for Vlan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vlan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Vlan",
	HandlerType: (*VlanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVlan",
			Handler:    _Vlan_CreateVlan_Handler,
		},
		{
			MethodName: "RemoveVlan",
			Handler:    _Vlan_RemoveVlan_Handler,
		},
		{
			MethodName: "SetVlanAttribute",
			Handler:    _Vlan_SetVlanAttribute_Handler,
		},
		{
			MethodName: "GetVlanAttribute",
			Handler:    _Vlan_GetVlanAttribute_Handler,
		},
		{
			MethodName: "CreateVlanMember",
			Handler:    _Vlan_CreateVlanMember_Handler,
		},
		{
			MethodName: "RemoveVlanMember",
			Handler:    _Vlan_RemoveVlanMember_Handler,
		},
		{
			MethodName: "SetVlanMemberAttribute",
			Handler:    _Vlan_SetVlanMemberAttribute_Handler,
		},
		{
			MethodName: "GetVlanMemberAttribute",
			Handler:    _Vlan_GetVlanMemberAttribute_Handler,
		},
		{
			MethodName: "CreateVlanMembers",
			Handler:    _Vlan_CreateVlanMembers_Handler,
		},
		{
			MethodName: "RemoveVlanMembers",
			Handler:    _Vlan_RemoveVlanMembers_Handler,
		},
		{
			MethodName: "GetVlanStats",
			Handler:    _Vlan_GetVlanStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/vlan.proto",
}
