// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/queue.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Queue_CreateQueue_FullMethodName       = "/lemming.dataplane.sai.Queue/CreateQueue"
	Queue_RemoveQueue_FullMethodName       = "/lemming.dataplane.sai.Queue/RemoveQueue"
	Queue_SetQueueAttribute_FullMethodName = "/lemming.dataplane.sai.Queue/SetQueueAttribute"
	Queue_GetQueueAttribute_FullMethodName = "/lemming.dataplane.sai.Queue/GetQueueAttribute"
	Queue_GetQueueStats_FullMethodName     = "/lemming.dataplane.sai.Queue/GetQueueStats"
)

// QueueClient is the client API for Queue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueClient interface {
	CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error)
	RemoveQueue(ctx context.Context, in *RemoveQueueRequest, opts ...grpc.CallOption) (*RemoveQueueResponse, error)
	SetQueueAttribute(ctx context.Context, in *SetQueueAttributeRequest, opts ...grpc.CallOption) (*SetQueueAttributeResponse, error)
	GetQueueAttribute(ctx context.Context, in *GetQueueAttributeRequest, opts ...grpc.CallOption) (*GetQueueAttributeResponse, error)
	GetQueueStats(ctx context.Context, in *GetQueueStatsRequest, opts ...grpc.CallOption) (*GetQueueStatsResponse, error)
}

type queueClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueClient(cc grpc.ClientConnInterface) QueueClient {
	return &queueClient{cc}
}

func (c *queueClient) CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQueueResponse)
	err := c.cc.Invoke(ctx, Queue_CreateQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) RemoveQueue(ctx context.Context, in *RemoveQueueRequest, opts ...grpc.CallOption) (*RemoveQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveQueueResponse)
	err := c.cc.Invoke(ctx, Queue_RemoveQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) SetQueueAttribute(ctx context.Context, in *SetQueueAttributeRequest, opts ...grpc.CallOption) (*SetQueueAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetQueueAttributeResponse)
	err := c.cc.Invoke(ctx, Queue_SetQueueAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) GetQueueAttribute(ctx context.Context, in *GetQueueAttributeRequest, opts ...grpc.CallOption) (*GetQueueAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueAttributeResponse)
	err := c.cc.Invoke(ctx, Queue_GetQueueAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueClient) GetQueueStats(ctx context.Context, in *GetQueueStatsRequest, opts ...grpc.CallOption) (*GetQueueStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQueueStatsResponse)
	err := c.cc.Invoke(ctx, Queue_GetQueueStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueServer is the server API for Queue service.
// All implementations should embed UnimplementedQueueServer
// for forward compatibility.
type QueueServer interface {
	CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error)
	RemoveQueue(context.Context, *RemoveQueueRequest) (*RemoveQueueResponse, error)
	SetQueueAttribute(context.Context, *SetQueueAttributeRequest) (*SetQueueAttributeResponse, error)
	GetQueueAttribute(context.Context, *GetQueueAttributeRequest) (*GetQueueAttributeResponse, error)
	GetQueueStats(context.Context, *GetQueueStatsRequest) (*GetQueueStatsResponse, error)
}

// UnimplementedQueueServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueueServer struct{}

func (UnimplementedQueueServer) CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedQueueServer) RemoveQueue(context.Context, *RemoveQueueRequest) (*RemoveQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveQueue not implemented")
}
func (UnimplementedQueueServer) SetQueueAttribute(context.Context, *SetQueueAttributeRequest) (*SetQueueAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQueueAttribute not implemented")
}
func (UnimplementedQueueServer) GetQueueAttribute(context.Context, *GetQueueAttributeRequest) (*GetQueueAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueAttribute not implemented")
}
func (UnimplementedQueueServer) GetQueueStats(context.Context, *GetQueueStatsRequest) (*GetQueueStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueueStats not implemented")
}
func (UnimplementedQueueServer) testEmbeddedByValue() {}

// UnsafeQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueServer will
// result in compilation errors.
type UnsafeQueueServer interface {
	mustEmbedUnimplementedQueueServer()
}

func RegisterQueueServer(s grpc.ServiceRegistrar, srv QueueServer) {
	// If the following call pancis, it indicates UnimplementedQueueServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Queue_ServiceDesc, srv)
}

func _Queue_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_CreateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).CreateQueue(ctx, req.(*CreateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_RemoveQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).RemoveQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_RemoveQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).RemoveQueue(ctx, req.(*RemoveQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_SetQueueAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetQueueAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).SetQueueAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_SetQueueAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).SetQueueAttribute(ctx, req.(*SetQueueAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_GetQueueAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).GetQueueAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_GetQueueAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).GetQueueAttribute(ctx, req.(*GetQueueAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queue_GetQueueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueueStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueServer).GetQueueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Queue_GetQueueStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueServer).GetQueueStats(ctx, req.(*GetQueueStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Queue_ServiceDesc is the grpc.ServiceDesc for Queue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Queue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Queue",
	HandlerType: (*QueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQueue",
			Handler:    _Queue_CreateQueue_Handler,
		},
		{
			MethodName: "RemoveQueue",
			Handler:    _Queue_RemoveQueue_Handler,
		},
		{
			MethodName: "SetQueueAttribute",
			Handler:    _Queue_SetQueueAttribute_Handler,
		},
		{
			MethodName: "GetQueueAttribute",
			Handler:    _Queue_GetQueueAttribute_Handler,
		},
		{
			MethodName: "GetQueueStats",
			Handler:    _Queue_GetQueueStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/queue.proto",
}
