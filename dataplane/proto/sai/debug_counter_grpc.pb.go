// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/debug_counter.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DebugCounter_CreateDebugCounter_FullMethodName       = "/lemming.dataplane.sai.DebugCounter/CreateDebugCounter"
	DebugCounter_RemoveDebugCounter_FullMethodName       = "/lemming.dataplane.sai.DebugCounter/RemoveDebugCounter"
	DebugCounter_SetDebugCounterAttribute_FullMethodName = "/lemming.dataplane.sai.DebugCounter/SetDebugCounterAttribute"
	DebugCounter_GetDebugCounterAttribute_FullMethodName = "/lemming.dataplane.sai.DebugCounter/GetDebugCounterAttribute"
)

// DebugCounterClient is the client API for DebugCounter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DebugCounterClient interface {
	CreateDebugCounter(ctx context.Context, in *CreateDebugCounterRequest, opts ...grpc.CallOption) (*CreateDebugCounterResponse, error)
	RemoveDebugCounter(ctx context.Context, in *RemoveDebugCounterRequest, opts ...grpc.CallOption) (*RemoveDebugCounterResponse, error)
	SetDebugCounterAttribute(ctx context.Context, in *SetDebugCounterAttributeRequest, opts ...grpc.CallOption) (*SetDebugCounterAttributeResponse, error)
	GetDebugCounterAttribute(ctx context.Context, in *GetDebugCounterAttributeRequest, opts ...grpc.CallOption) (*GetDebugCounterAttributeResponse, error)
}

type debugCounterClient struct {
	cc grpc.ClientConnInterface
}

func NewDebugCounterClient(cc grpc.ClientConnInterface) DebugCounterClient {
	return &debugCounterClient{cc}
}

func (c *debugCounterClient) CreateDebugCounter(ctx context.Context, in *CreateDebugCounterRequest, opts ...grpc.CallOption) (*CreateDebugCounterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDebugCounterResponse)
	err := c.cc.Invoke(ctx, DebugCounter_CreateDebugCounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugCounterClient) RemoveDebugCounter(ctx context.Context, in *RemoveDebugCounterRequest, opts ...grpc.CallOption) (*RemoveDebugCounterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDebugCounterResponse)
	err := c.cc.Invoke(ctx, DebugCounter_RemoveDebugCounter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugCounterClient) SetDebugCounterAttribute(ctx context.Context, in *SetDebugCounterAttributeRequest, opts ...grpc.CallOption) (*SetDebugCounterAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDebugCounterAttributeResponse)
	err := c.cc.Invoke(ctx, DebugCounter_SetDebugCounterAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugCounterClient) GetDebugCounterAttribute(ctx context.Context, in *GetDebugCounterAttributeRequest, opts ...grpc.CallOption) (*GetDebugCounterAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDebugCounterAttributeResponse)
	err := c.cc.Invoke(ctx, DebugCounter_GetDebugCounterAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugCounterServer is the server API for DebugCounter service.
// All implementations should embed UnimplementedDebugCounterServer
// for forward compatibility.
type DebugCounterServer interface {
	CreateDebugCounter(context.Context, *CreateDebugCounterRequest) (*CreateDebugCounterResponse, error)
	RemoveDebugCounter(context.Context, *RemoveDebugCounterRequest) (*RemoveDebugCounterResponse, error)
	SetDebugCounterAttribute(context.Context, *SetDebugCounterAttributeRequest) (*SetDebugCounterAttributeResponse, error)
	GetDebugCounterAttribute(context.Context, *GetDebugCounterAttributeRequest) (*GetDebugCounterAttributeResponse, error)
}

// UnimplementedDebugCounterServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDebugCounterServer struct{}

func (UnimplementedDebugCounterServer) CreateDebugCounter(context.Context, *CreateDebugCounterRequest) (*CreateDebugCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDebugCounter not implemented")
}
func (UnimplementedDebugCounterServer) RemoveDebugCounter(context.Context, *RemoveDebugCounterRequest) (*RemoveDebugCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDebugCounter not implemented")
}
func (UnimplementedDebugCounterServer) SetDebugCounterAttribute(context.Context, *SetDebugCounterAttributeRequest) (*SetDebugCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDebugCounterAttribute not implemented")
}
func (UnimplementedDebugCounterServer) GetDebugCounterAttribute(context.Context, *GetDebugCounterAttributeRequest) (*GetDebugCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebugCounterAttribute not implemented")
}
func (UnimplementedDebugCounterServer) testEmbeddedByValue() {}

// UnsafeDebugCounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DebugCounterServer will
// result in compilation errors.
type UnsafeDebugCounterServer interface {
	mustEmbedUnimplementedDebugCounterServer()
}

func RegisterDebugCounterServer(s grpc.ServiceRegistrar, srv DebugCounterServer) {
	// If the following call pancis, it indicates UnimplementedDebugCounterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DebugCounter_ServiceDesc, srv)
}

func _DebugCounter_CreateDebugCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDebugCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugCounterServer).CreateDebugCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugCounter_CreateDebugCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugCounterServer).CreateDebugCounter(ctx, req.(*CreateDebugCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugCounter_RemoveDebugCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDebugCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugCounterServer).RemoveDebugCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugCounter_RemoveDebugCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugCounterServer).RemoveDebugCounter(ctx, req.(*RemoveDebugCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugCounter_SetDebugCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDebugCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugCounterServer).SetDebugCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugCounter_SetDebugCounterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugCounterServer).SetDebugCounterAttribute(ctx, req.(*SetDebugCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugCounter_GetDebugCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDebugCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugCounterServer).GetDebugCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DebugCounter_GetDebugCounterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugCounterServer).GetDebugCounterAttribute(ctx, req.(*GetDebugCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DebugCounter_ServiceDesc is the grpc.ServiceDesc for DebugCounter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DebugCounter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.DebugCounter",
	HandlerType: (*DebugCounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDebugCounter",
			Handler:    _DebugCounter_CreateDebugCounter_Handler,
		},
		{
			MethodName: "RemoveDebugCounter",
			Handler:    _DebugCounter_RemoveDebugCounter_Handler,
		},
		{
			MethodName: "SetDebugCounterAttribute",
			Handler:    _DebugCounter_SetDebugCounterAttribute_Handler,
		},
		{
			MethodName: "GetDebugCounterAttribute",
			Handler:    _DebugCounter_GetDebugCounterAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/debug_counter.proto",
}
