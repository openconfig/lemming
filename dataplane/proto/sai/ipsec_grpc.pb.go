// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/ipsec.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ipsec_CreateIpsec_FullMethodName           = "/lemming.dataplane.sai.Ipsec/CreateIpsec"
	Ipsec_RemoveIpsec_FullMethodName           = "/lemming.dataplane.sai.Ipsec/RemoveIpsec"
	Ipsec_SetIpsecAttribute_FullMethodName     = "/lemming.dataplane.sai.Ipsec/SetIpsecAttribute"
	Ipsec_GetIpsecAttribute_FullMethodName     = "/lemming.dataplane.sai.Ipsec/GetIpsecAttribute"
	Ipsec_CreateIpsecPort_FullMethodName       = "/lemming.dataplane.sai.Ipsec/CreateIpsecPort"
	Ipsec_RemoveIpsecPort_FullMethodName       = "/lemming.dataplane.sai.Ipsec/RemoveIpsecPort"
	Ipsec_SetIpsecPortAttribute_FullMethodName = "/lemming.dataplane.sai.Ipsec/SetIpsecPortAttribute"
	Ipsec_GetIpsecPortAttribute_FullMethodName = "/lemming.dataplane.sai.Ipsec/GetIpsecPortAttribute"
	Ipsec_GetIpsecPortStats_FullMethodName     = "/lemming.dataplane.sai.Ipsec/GetIpsecPortStats"
	Ipsec_CreateIpsecSa_FullMethodName         = "/lemming.dataplane.sai.Ipsec/CreateIpsecSa"
	Ipsec_RemoveIpsecSa_FullMethodName         = "/lemming.dataplane.sai.Ipsec/RemoveIpsecSa"
	Ipsec_SetIpsecSaAttribute_FullMethodName   = "/lemming.dataplane.sai.Ipsec/SetIpsecSaAttribute"
	Ipsec_GetIpsecSaAttribute_FullMethodName   = "/lemming.dataplane.sai.Ipsec/GetIpsecSaAttribute"
	Ipsec_GetIpsecSaStats_FullMethodName       = "/lemming.dataplane.sai.Ipsec/GetIpsecSaStats"
)

// IpsecClient is the client API for Ipsec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpsecClient interface {
	CreateIpsec(ctx context.Context, in *CreateIpsecRequest, opts ...grpc.CallOption) (*CreateIpsecResponse, error)
	RemoveIpsec(ctx context.Context, in *RemoveIpsecRequest, opts ...grpc.CallOption) (*RemoveIpsecResponse, error)
	SetIpsecAttribute(ctx context.Context, in *SetIpsecAttributeRequest, opts ...grpc.CallOption) (*SetIpsecAttributeResponse, error)
	GetIpsecAttribute(ctx context.Context, in *GetIpsecAttributeRequest, opts ...grpc.CallOption) (*GetIpsecAttributeResponse, error)
	CreateIpsecPort(ctx context.Context, in *CreateIpsecPortRequest, opts ...grpc.CallOption) (*CreateIpsecPortResponse, error)
	RemoveIpsecPort(ctx context.Context, in *RemoveIpsecPortRequest, opts ...grpc.CallOption) (*RemoveIpsecPortResponse, error)
	SetIpsecPortAttribute(ctx context.Context, in *SetIpsecPortAttributeRequest, opts ...grpc.CallOption) (*SetIpsecPortAttributeResponse, error)
	GetIpsecPortAttribute(ctx context.Context, in *GetIpsecPortAttributeRequest, opts ...grpc.CallOption) (*GetIpsecPortAttributeResponse, error)
	GetIpsecPortStats(ctx context.Context, in *GetIpsecPortStatsRequest, opts ...grpc.CallOption) (*GetIpsecPortStatsResponse, error)
	CreateIpsecSa(ctx context.Context, in *CreateIpsecSaRequest, opts ...grpc.CallOption) (*CreateIpsecSaResponse, error)
	RemoveIpsecSa(ctx context.Context, in *RemoveIpsecSaRequest, opts ...grpc.CallOption) (*RemoveIpsecSaResponse, error)
	SetIpsecSaAttribute(ctx context.Context, in *SetIpsecSaAttributeRequest, opts ...grpc.CallOption) (*SetIpsecSaAttributeResponse, error)
	GetIpsecSaAttribute(ctx context.Context, in *GetIpsecSaAttributeRequest, opts ...grpc.CallOption) (*GetIpsecSaAttributeResponse, error)
	GetIpsecSaStats(ctx context.Context, in *GetIpsecSaStatsRequest, opts ...grpc.CallOption) (*GetIpsecSaStatsResponse, error)
}

type ipsecClient struct {
	cc grpc.ClientConnInterface
}

func NewIpsecClient(cc grpc.ClientConnInterface) IpsecClient {
	return &ipsecClient{cc}
}

func (c *ipsecClient) CreateIpsec(ctx context.Context, in *CreateIpsecRequest, opts ...grpc.CallOption) (*CreateIpsecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIpsecResponse)
	err := c.cc.Invoke(ctx, Ipsec_CreateIpsec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) RemoveIpsec(ctx context.Context, in *RemoveIpsecRequest, opts ...grpc.CallOption) (*RemoveIpsecResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveIpsecResponse)
	err := c.cc.Invoke(ctx, Ipsec_RemoveIpsec_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) SetIpsecAttribute(ctx context.Context, in *SetIpsecAttributeRequest, opts ...grpc.CallOption) (*SetIpsecAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetIpsecAttributeResponse)
	err := c.cc.Invoke(ctx, Ipsec_SetIpsecAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) GetIpsecAttribute(ctx context.Context, in *GetIpsecAttributeRequest, opts ...grpc.CallOption) (*GetIpsecAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIpsecAttributeResponse)
	err := c.cc.Invoke(ctx, Ipsec_GetIpsecAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) CreateIpsecPort(ctx context.Context, in *CreateIpsecPortRequest, opts ...grpc.CallOption) (*CreateIpsecPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIpsecPortResponse)
	err := c.cc.Invoke(ctx, Ipsec_CreateIpsecPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) RemoveIpsecPort(ctx context.Context, in *RemoveIpsecPortRequest, opts ...grpc.CallOption) (*RemoveIpsecPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveIpsecPortResponse)
	err := c.cc.Invoke(ctx, Ipsec_RemoveIpsecPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) SetIpsecPortAttribute(ctx context.Context, in *SetIpsecPortAttributeRequest, opts ...grpc.CallOption) (*SetIpsecPortAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetIpsecPortAttributeResponse)
	err := c.cc.Invoke(ctx, Ipsec_SetIpsecPortAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) GetIpsecPortAttribute(ctx context.Context, in *GetIpsecPortAttributeRequest, opts ...grpc.CallOption) (*GetIpsecPortAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIpsecPortAttributeResponse)
	err := c.cc.Invoke(ctx, Ipsec_GetIpsecPortAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) GetIpsecPortStats(ctx context.Context, in *GetIpsecPortStatsRequest, opts ...grpc.CallOption) (*GetIpsecPortStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIpsecPortStatsResponse)
	err := c.cc.Invoke(ctx, Ipsec_GetIpsecPortStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) CreateIpsecSa(ctx context.Context, in *CreateIpsecSaRequest, opts ...grpc.CallOption) (*CreateIpsecSaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIpsecSaResponse)
	err := c.cc.Invoke(ctx, Ipsec_CreateIpsecSa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) RemoveIpsecSa(ctx context.Context, in *RemoveIpsecSaRequest, opts ...grpc.CallOption) (*RemoveIpsecSaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveIpsecSaResponse)
	err := c.cc.Invoke(ctx, Ipsec_RemoveIpsecSa_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) SetIpsecSaAttribute(ctx context.Context, in *SetIpsecSaAttributeRequest, opts ...grpc.CallOption) (*SetIpsecSaAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetIpsecSaAttributeResponse)
	err := c.cc.Invoke(ctx, Ipsec_SetIpsecSaAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) GetIpsecSaAttribute(ctx context.Context, in *GetIpsecSaAttributeRequest, opts ...grpc.CallOption) (*GetIpsecSaAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIpsecSaAttributeResponse)
	err := c.cc.Invoke(ctx, Ipsec_GetIpsecSaAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipsecClient) GetIpsecSaStats(ctx context.Context, in *GetIpsecSaStatsRequest, opts ...grpc.CallOption) (*GetIpsecSaStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIpsecSaStatsResponse)
	err := c.cc.Invoke(ctx, Ipsec_GetIpsecSaStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpsecServer is the server API for Ipsec service.
// All implementations should embed UnimplementedIpsecServer
// for forward compatibility.
type IpsecServer interface {
	CreateIpsec(context.Context, *CreateIpsecRequest) (*CreateIpsecResponse, error)
	RemoveIpsec(context.Context, *RemoveIpsecRequest) (*RemoveIpsecResponse, error)
	SetIpsecAttribute(context.Context, *SetIpsecAttributeRequest) (*SetIpsecAttributeResponse, error)
	GetIpsecAttribute(context.Context, *GetIpsecAttributeRequest) (*GetIpsecAttributeResponse, error)
	CreateIpsecPort(context.Context, *CreateIpsecPortRequest) (*CreateIpsecPortResponse, error)
	RemoveIpsecPort(context.Context, *RemoveIpsecPortRequest) (*RemoveIpsecPortResponse, error)
	SetIpsecPortAttribute(context.Context, *SetIpsecPortAttributeRequest) (*SetIpsecPortAttributeResponse, error)
	GetIpsecPortAttribute(context.Context, *GetIpsecPortAttributeRequest) (*GetIpsecPortAttributeResponse, error)
	GetIpsecPortStats(context.Context, *GetIpsecPortStatsRequest) (*GetIpsecPortStatsResponse, error)
	CreateIpsecSa(context.Context, *CreateIpsecSaRequest) (*CreateIpsecSaResponse, error)
	RemoveIpsecSa(context.Context, *RemoveIpsecSaRequest) (*RemoveIpsecSaResponse, error)
	SetIpsecSaAttribute(context.Context, *SetIpsecSaAttributeRequest) (*SetIpsecSaAttributeResponse, error)
	GetIpsecSaAttribute(context.Context, *GetIpsecSaAttributeRequest) (*GetIpsecSaAttributeResponse, error)
	GetIpsecSaStats(context.Context, *GetIpsecSaStatsRequest) (*GetIpsecSaStatsResponse, error)
}

// UnimplementedIpsecServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIpsecServer struct{}

func (UnimplementedIpsecServer) CreateIpsec(context.Context, *CreateIpsecRequest) (*CreateIpsecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpsec not implemented")
}
func (UnimplementedIpsecServer) RemoveIpsec(context.Context, *RemoveIpsecRequest) (*RemoveIpsecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIpsec not implemented")
}
func (UnimplementedIpsecServer) SetIpsecAttribute(context.Context, *SetIpsecAttributeRequest) (*SetIpsecAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIpsecAttribute not implemented")
}
func (UnimplementedIpsecServer) GetIpsecAttribute(context.Context, *GetIpsecAttributeRequest) (*GetIpsecAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecAttribute not implemented")
}
func (UnimplementedIpsecServer) CreateIpsecPort(context.Context, *CreateIpsecPortRequest) (*CreateIpsecPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpsecPort not implemented")
}
func (UnimplementedIpsecServer) RemoveIpsecPort(context.Context, *RemoveIpsecPortRequest) (*RemoveIpsecPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIpsecPort not implemented")
}
func (UnimplementedIpsecServer) SetIpsecPortAttribute(context.Context, *SetIpsecPortAttributeRequest) (*SetIpsecPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIpsecPortAttribute not implemented")
}
func (UnimplementedIpsecServer) GetIpsecPortAttribute(context.Context, *GetIpsecPortAttributeRequest) (*GetIpsecPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecPortAttribute not implemented")
}
func (UnimplementedIpsecServer) GetIpsecPortStats(context.Context, *GetIpsecPortStatsRequest) (*GetIpsecPortStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecPortStats not implemented")
}
func (UnimplementedIpsecServer) CreateIpsecSa(context.Context, *CreateIpsecSaRequest) (*CreateIpsecSaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIpsecSa not implemented")
}
func (UnimplementedIpsecServer) RemoveIpsecSa(context.Context, *RemoveIpsecSaRequest) (*RemoveIpsecSaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIpsecSa not implemented")
}
func (UnimplementedIpsecServer) SetIpsecSaAttribute(context.Context, *SetIpsecSaAttributeRequest) (*SetIpsecSaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIpsecSaAttribute not implemented")
}
func (UnimplementedIpsecServer) GetIpsecSaAttribute(context.Context, *GetIpsecSaAttributeRequest) (*GetIpsecSaAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecSaAttribute not implemented")
}
func (UnimplementedIpsecServer) GetIpsecSaStats(context.Context, *GetIpsecSaStatsRequest) (*GetIpsecSaStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpsecSaStats not implemented")
}
func (UnimplementedIpsecServer) testEmbeddedByValue() {}

// UnsafeIpsecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpsecServer will
// result in compilation errors.
type UnsafeIpsecServer interface {
	mustEmbedUnimplementedIpsecServer()
}

func RegisterIpsecServer(s grpc.ServiceRegistrar, srv IpsecServer) {
	// If the following call pancis, it indicates UnimplementedIpsecServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ipsec_ServiceDesc, srv)
}

func _Ipsec_CreateIpsec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpsecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).CreateIpsec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_CreateIpsec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).CreateIpsec(ctx, req.(*CreateIpsecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_RemoveIpsec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIpsecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).RemoveIpsec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_RemoveIpsec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).RemoveIpsec(ctx, req.(*RemoveIpsecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_SetIpsecAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIpsecAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).SetIpsecAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_SetIpsecAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).SetIpsecAttribute(ctx, req.(*SetIpsecAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_GetIpsecAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).GetIpsecAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_GetIpsecAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).GetIpsecAttribute(ctx, req.(*GetIpsecAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_CreateIpsecPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpsecPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).CreateIpsecPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_CreateIpsecPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).CreateIpsecPort(ctx, req.(*CreateIpsecPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_RemoveIpsecPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIpsecPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).RemoveIpsecPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_RemoveIpsecPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).RemoveIpsecPort(ctx, req.(*RemoveIpsecPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_SetIpsecPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIpsecPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).SetIpsecPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_SetIpsecPortAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).SetIpsecPortAttribute(ctx, req.(*SetIpsecPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_GetIpsecPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).GetIpsecPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_GetIpsecPortAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).GetIpsecPortAttribute(ctx, req.(*GetIpsecPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_GetIpsecPortStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecPortStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).GetIpsecPortStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_GetIpsecPortStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).GetIpsecPortStats(ctx, req.(*GetIpsecPortStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_CreateIpsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIpsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).CreateIpsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_CreateIpsecSa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).CreateIpsecSa(ctx, req.(*CreateIpsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_RemoveIpsecSa_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIpsecSaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).RemoveIpsecSa(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_RemoveIpsecSa_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).RemoveIpsecSa(ctx, req.(*RemoveIpsecSaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_SetIpsecSaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIpsecSaAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).SetIpsecSaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_SetIpsecSaAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).SetIpsecSaAttribute(ctx, req.(*SetIpsecSaAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_GetIpsecSaAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecSaAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).GetIpsecSaAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_GetIpsecSaAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).GetIpsecSaAttribute(ctx, req.(*GetIpsecSaAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ipsec_GetIpsecSaStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpsecSaStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpsecServer).GetIpsecSaStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ipsec_GetIpsecSaStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpsecServer).GetIpsecSaStats(ctx, req.(*GetIpsecSaStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ipsec_ServiceDesc is the grpc.ServiceDesc for Ipsec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ipsec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Ipsec",
	HandlerType: (*IpsecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIpsec",
			Handler:    _Ipsec_CreateIpsec_Handler,
		},
		{
			MethodName: "RemoveIpsec",
			Handler:    _Ipsec_RemoveIpsec_Handler,
		},
		{
			MethodName: "SetIpsecAttribute",
			Handler:    _Ipsec_SetIpsecAttribute_Handler,
		},
		{
			MethodName: "GetIpsecAttribute",
			Handler:    _Ipsec_GetIpsecAttribute_Handler,
		},
		{
			MethodName: "CreateIpsecPort",
			Handler:    _Ipsec_CreateIpsecPort_Handler,
		},
		{
			MethodName: "RemoveIpsecPort",
			Handler:    _Ipsec_RemoveIpsecPort_Handler,
		},
		{
			MethodName: "SetIpsecPortAttribute",
			Handler:    _Ipsec_SetIpsecPortAttribute_Handler,
		},
		{
			MethodName: "GetIpsecPortAttribute",
			Handler:    _Ipsec_GetIpsecPortAttribute_Handler,
		},
		{
			MethodName: "GetIpsecPortStats",
			Handler:    _Ipsec_GetIpsecPortStats_Handler,
		},
		{
			MethodName: "CreateIpsecSa",
			Handler:    _Ipsec_CreateIpsecSa_Handler,
		},
		{
			MethodName: "RemoveIpsecSa",
			Handler:    _Ipsec_RemoveIpsecSa_Handler,
		},
		{
			MethodName: "SetIpsecSaAttribute",
			Handler:    _Ipsec_SetIpsecSaAttribute_Handler,
		},
		{
			MethodName: "GetIpsecSaAttribute",
			Handler:    _Ipsec_GetIpsecSaAttribute_Handler,
		},
		{
			MethodName: "GetIpsecSaStats",
			Handler:    _Ipsec_GetIpsecSaStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/ipsec.proto",
}
