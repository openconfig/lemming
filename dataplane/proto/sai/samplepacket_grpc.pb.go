// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/samplepacket.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Samplepacket_CreateSamplepacket_FullMethodName       = "/lemming.dataplane.sai.Samplepacket/CreateSamplepacket"
	Samplepacket_RemoveSamplepacket_FullMethodName       = "/lemming.dataplane.sai.Samplepacket/RemoveSamplepacket"
	Samplepacket_SetSamplepacketAttribute_FullMethodName = "/lemming.dataplane.sai.Samplepacket/SetSamplepacketAttribute"
	Samplepacket_GetSamplepacketAttribute_FullMethodName = "/lemming.dataplane.sai.Samplepacket/GetSamplepacketAttribute"
)

// SamplepacketClient is the client API for Samplepacket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SamplepacketClient interface {
	CreateSamplepacket(ctx context.Context, in *CreateSamplepacketRequest, opts ...grpc.CallOption) (*CreateSamplepacketResponse, error)
	RemoveSamplepacket(ctx context.Context, in *RemoveSamplepacketRequest, opts ...grpc.CallOption) (*RemoveSamplepacketResponse, error)
	SetSamplepacketAttribute(ctx context.Context, in *SetSamplepacketAttributeRequest, opts ...grpc.CallOption) (*SetSamplepacketAttributeResponse, error)
	GetSamplepacketAttribute(ctx context.Context, in *GetSamplepacketAttributeRequest, opts ...grpc.CallOption) (*GetSamplepacketAttributeResponse, error)
}

type samplepacketClient struct {
	cc grpc.ClientConnInterface
}

func NewSamplepacketClient(cc grpc.ClientConnInterface) SamplepacketClient {
	return &samplepacketClient{cc}
}

func (c *samplepacketClient) CreateSamplepacket(ctx context.Context, in *CreateSamplepacketRequest, opts ...grpc.CallOption) (*CreateSamplepacketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSamplepacketResponse)
	err := c.cc.Invoke(ctx, Samplepacket_CreateSamplepacket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplepacketClient) RemoveSamplepacket(ctx context.Context, in *RemoveSamplepacketRequest, opts ...grpc.CallOption) (*RemoveSamplepacketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSamplepacketResponse)
	err := c.cc.Invoke(ctx, Samplepacket_RemoveSamplepacket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplepacketClient) SetSamplepacketAttribute(ctx context.Context, in *SetSamplepacketAttributeRequest, opts ...grpc.CallOption) (*SetSamplepacketAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSamplepacketAttributeResponse)
	err := c.cc.Invoke(ctx, Samplepacket_SetSamplepacketAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *samplepacketClient) GetSamplepacketAttribute(ctx context.Context, in *GetSamplepacketAttributeRequest, opts ...grpc.CallOption) (*GetSamplepacketAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSamplepacketAttributeResponse)
	err := c.cc.Invoke(ctx, Samplepacket_GetSamplepacketAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SamplepacketServer is the server API for Samplepacket service.
// All implementations should embed UnimplementedSamplepacketServer
// for forward compatibility.
type SamplepacketServer interface {
	CreateSamplepacket(context.Context, *CreateSamplepacketRequest) (*CreateSamplepacketResponse, error)
	RemoveSamplepacket(context.Context, *RemoveSamplepacketRequest) (*RemoveSamplepacketResponse, error)
	SetSamplepacketAttribute(context.Context, *SetSamplepacketAttributeRequest) (*SetSamplepacketAttributeResponse, error)
	GetSamplepacketAttribute(context.Context, *GetSamplepacketAttributeRequest) (*GetSamplepacketAttributeResponse, error)
}

// UnimplementedSamplepacketServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSamplepacketServer struct{}

func (UnimplementedSamplepacketServer) CreateSamplepacket(context.Context, *CreateSamplepacketRequest) (*CreateSamplepacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSamplepacket not implemented")
}
func (UnimplementedSamplepacketServer) RemoveSamplepacket(context.Context, *RemoveSamplepacketRequest) (*RemoveSamplepacketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSamplepacket not implemented")
}
func (UnimplementedSamplepacketServer) SetSamplepacketAttribute(context.Context, *SetSamplepacketAttributeRequest) (*SetSamplepacketAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSamplepacketAttribute not implemented")
}
func (UnimplementedSamplepacketServer) GetSamplepacketAttribute(context.Context, *GetSamplepacketAttributeRequest) (*GetSamplepacketAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSamplepacketAttribute not implemented")
}
func (UnimplementedSamplepacketServer) testEmbeddedByValue() {}

// UnsafeSamplepacketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SamplepacketServer will
// result in compilation errors.
type UnsafeSamplepacketServer interface {
	mustEmbedUnimplementedSamplepacketServer()
}

func RegisterSamplepacketServer(s grpc.ServiceRegistrar, srv SamplepacketServer) {
	// If the following call pancis, it indicates UnimplementedSamplepacketServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Samplepacket_ServiceDesc, srv)
}

func _Samplepacket_CreateSamplepacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSamplepacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplepacketServer).CreateSamplepacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Samplepacket_CreateSamplepacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplepacketServer).CreateSamplepacket(ctx, req.(*CreateSamplepacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Samplepacket_RemoveSamplepacket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSamplepacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplepacketServer).RemoveSamplepacket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Samplepacket_RemoveSamplepacket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplepacketServer).RemoveSamplepacket(ctx, req.(*RemoveSamplepacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Samplepacket_SetSamplepacketAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSamplepacketAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplepacketServer).SetSamplepacketAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Samplepacket_SetSamplepacketAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplepacketServer).SetSamplepacketAttribute(ctx, req.(*SetSamplepacketAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Samplepacket_GetSamplepacketAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSamplepacketAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SamplepacketServer).GetSamplepacketAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Samplepacket_GetSamplepacketAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SamplepacketServer).GetSamplepacketAttribute(ctx, req.(*GetSamplepacketAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Samplepacket_ServiceDesc is the grpc.ServiceDesc for Samplepacket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Samplepacket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Samplepacket",
	HandlerType: (*SamplepacketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSamplepacket",
			Handler:    _Samplepacket_CreateSamplepacket_Handler,
		},
		{
			MethodName: "RemoveSamplepacket",
			Handler:    _Samplepacket_RemoveSamplepacket_Handler,
		},
		{
			MethodName: "SetSamplepacketAttribute",
			Handler:    _Samplepacket_SetSamplepacketAttribute_Handler,
		},
		{
			MethodName: "GetSamplepacketAttribute",
			Handler:    _Samplepacket_GetSamplepacketAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/samplepacket.proto",
}
