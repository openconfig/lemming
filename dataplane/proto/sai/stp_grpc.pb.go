// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/stp.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Stp_CreateStp_FullMethodName           = "/lemming.dataplane.sai.Stp/CreateStp"
	Stp_RemoveStp_FullMethodName           = "/lemming.dataplane.sai.Stp/RemoveStp"
	Stp_GetStpAttribute_FullMethodName     = "/lemming.dataplane.sai.Stp/GetStpAttribute"
	Stp_CreateStpPort_FullMethodName       = "/lemming.dataplane.sai.Stp/CreateStpPort"
	Stp_RemoveStpPort_FullMethodName       = "/lemming.dataplane.sai.Stp/RemoveStpPort"
	Stp_SetStpPortAttribute_FullMethodName = "/lemming.dataplane.sai.Stp/SetStpPortAttribute"
	Stp_GetStpPortAttribute_FullMethodName = "/lemming.dataplane.sai.Stp/GetStpPortAttribute"
	Stp_CreateStpPorts_FullMethodName      = "/lemming.dataplane.sai.Stp/CreateStpPorts"
	Stp_RemoveStpPorts_FullMethodName      = "/lemming.dataplane.sai.Stp/RemoveStpPorts"
)

// StpClient is the client API for Stp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StpClient interface {
	CreateStp(ctx context.Context, in *CreateStpRequest, opts ...grpc.CallOption) (*CreateStpResponse, error)
	RemoveStp(ctx context.Context, in *RemoveStpRequest, opts ...grpc.CallOption) (*RemoveStpResponse, error)
	GetStpAttribute(ctx context.Context, in *GetStpAttributeRequest, opts ...grpc.CallOption) (*GetStpAttributeResponse, error)
	CreateStpPort(ctx context.Context, in *CreateStpPortRequest, opts ...grpc.CallOption) (*CreateStpPortResponse, error)
	RemoveStpPort(ctx context.Context, in *RemoveStpPortRequest, opts ...grpc.CallOption) (*RemoveStpPortResponse, error)
	SetStpPortAttribute(ctx context.Context, in *SetStpPortAttributeRequest, opts ...grpc.CallOption) (*SetStpPortAttributeResponse, error)
	GetStpPortAttribute(ctx context.Context, in *GetStpPortAttributeRequest, opts ...grpc.CallOption) (*GetStpPortAttributeResponse, error)
	CreateStpPorts(ctx context.Context, in *CreateStpPortsRequest, opts ...grpc.CallOption) (*CreateStpPortsResponse, error)
	RemoveStpPorts(ctx context.Context, in *RemoveStpPortsRequest, opts ...grpc.CallOption) (*RemoveStpPortsResponse, error)
}

type stpClient struct {
	cc grpc.ClientConnInterface
}

func NewStpClient(cc grpc.ClientConnInterface) StpClient {
	return &stpClient{cc}
}

func (c *stpClient) CreateStp(ctx context.Context, in *CreateStpRequest, opts ...grpc.CallOption) (*CreateStpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStpResponse)
	err := c.cc.Invoke(ctx, Stp_CreateStp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stpClient) RemoveStp(ctx context.Context, in *RemoveStpRequest, opts ...grpc.CallOption) (*RemoveStpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStpResponse)
	err := c.cc.Invoke(ctx, Stp_RemoveStp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stpClient) GetStpAttribute(ctx context.Context, in *GetStpAttributeRequest, opts ...grpc.CallOption) (*GetStpAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStpAttributeResponse)
	err := c.cc.Invoke(ctx, Stp_GetStpAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stpClient) CreateStpPort(ctx context.Context, in *CreateStpPortRequest, opts ...grpc.CallOption) (*CreateStpPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStpPortResponse)
	err := c.cc.Invoke(ctx, Stp_CreateStpPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stpClient) RemoveStpPort(ctx context.Context, in *RemoveStpPortRequest, opts ...grpc.CallOption) (*RemoveStpPortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStpPortResponse)
	err := c.cc.Invoke(ctx, Stp_RemoveStpPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stpClient) SetStpPortAttribute(ctx context.Context, in *SetStpPortAttributeRequest, opts ...grpc.CallOption) (*SetStpPortAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetStpPortAttributeResponse)
	err := c.cc.Invoke(ctx, Stp_SetStpPortAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stpClient) GetStpPortAttribute(ctx context.Context, in *GetStpPortAttributeRequest, opts ...grpc.CallOption) (*GetStpPortAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStpPortAttributeResponse)
	err := c.cc.Invoke(ctx, Stp_GetStpPortAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stpClient) CreateStpPorts(ctx context.Context, in *CreateStpPortsRequest, opts ...grpc.CallOption) (*CreateStpPortsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStpPortsResponse)
	err := c.cc.Invoke(ctx, Stp_CreateStpPorts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stpClient) RemoveStpPorts(ctx context.Context, in *RemoveStpPortsRequest, opts ...grpc.CallOption) (*RemoveStpPortsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStpPortsResponse)
	err := c.cc.Invoke(ctx, Stp_RemoveStpPorts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StpServer is the server API for Stp service.
// All implementations should embed UnimplementedStpServer
// for forward compatibility.
type StpServer interface {
	CreateStp(context.Context, *CreateStpRequest) (*CreateStpResponse, error)
	RemoveStp(context.Context, *RemoveStpRequest) (*RemoveStpResponse, error)
	GetStpAttribute(context.Context, *GetStpAttributeRequest) (*GetStpAttributeResponse, error)
	CreateStpPort(context.Context, *CreateStpPortRequest) (*CreateStpPortResponse, error)
	RemoveStpPort(context.Context, *RemoveStpPortRequest) (*RemoveStpPortResponse, error)
	SetStpPortAttribute(context.Context, *SetStpPortAttributeRequest) (*SetStpPortAttributeResponse, error)
	GetStpPortAttribute(context.Context, *GetStpPortAttributeRequest) (*GetStpPortAttributeResponse, error)
	CreateStpPorts(context.Context, *CreateStpPortsRequest) (*CreateStpPortsResponse, error)
	RemoveStpPorts(context.Context, *RemoveStpPortsRequest) (*RemoveStpPortsResponse, error)
}

// UnimplementedStpServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStpServer struct{}

func (UnimplementedStpServer) CreateStp(context.Context, *CreateStpRequest) (*CreateStpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStp not implemented")
}
func (UnimplementedStpServer) RemoveStp(context.Context, *RemoveStpRequest) (*RemoveStpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStp not implemented")
}
func (UnimplementedStpServer) GetStpAttribute(context.Context, *GetStpAttributeRequest) (*GetStpAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStpAttribute not implemented")
}
func (UnimplementedStpServer) CreateStpPort(context.Context, *CreateStpPortRequest) (*CreateStpPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStpPort not implemented")
}
func (UnimplementedStpServer) RemoveStpPort(context.Context, *RemoveStpPortRequest) (*RemoveStpPortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStpPort not implemented")
}
func (UnimplementedStpServer) SetStpPortAttribute(context.Context, *SetStpPortAttributeRequest) (*SetStpPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStpPortAttribute not implemented")
}
func (UnimplementedStpServer) GetStpPortAttribute(context.Context, *GetStpPortAttributeRequest) (*GetStpPortAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStpPortAttribute not implemented")
}
func (UnimplementedStpServer) CreateStpPorts(context.Context, *CreateStpPortsRequest) (*CreateStpPortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStpPorts not implemented")
}
func (UnimplementedStpServer) RemoveStpPorts(context.Context, *RemoveStpPortsRequest) (*RemoveStpPortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStpPorts not implemented")
}
func (UnimplementedStpServer) testEmbeddedByValue() {}

// UnsafeStpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StpServer will
// result in compilation errors.
type UnsafeStpServer interface {
	mustEmbedUnimplementedStpServer()
}

func RegisterStpServer(s grpc.ServiceRegistrar, srv StpServer) {
	// If the following call pancis, it indicates UnimplementedStpServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Stp_ServiceDesc, srv)
}

func _Stp_CreateStp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StpServer).CreateStp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stp_CreateStp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StpServer).CreateStp(ctx, req.(*CreateStpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stp_RemoveStp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StpServer).RemoveStp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stp_RemoveStp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StpServer).RemoveStp(ctx, req.(*RemoveStpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stp_GetStpAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStpAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StpServer).GetStpAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stp_GetStpAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StpServer).GetStpAttribute(ctx, req.(*GetStpAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stp_CreateStpPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStpPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StpServer).CreateStpPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stp_CreateStpPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StpServer).CreateStpPort(ctx, req.(*CreateStpPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stp_RemoveStpPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStpPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StpServer).RemoveStpPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stp_RemoveStpPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StpServer).RemoveStpPort(ctx, req.(*RemoveStpPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stp_SetStpPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStpPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StpServer).SetStpPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stp_SetStpPortAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StpServer).SetStpPortAttribute(ctx, req.(*SetStpPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stp_GetStpPortAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStpPortAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StpServer).GetStpPortAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stp_GetStpPortAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StpServer).GetStpPortAttribute(ctx, req.(*GetStpPortAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stp_CreateStpPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStpPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StpServer).CreateStpPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stp_CreateStpPorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StpServer).CreateStpPorts(ctx, req.(*CreateStpPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stp_RemoveStpPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStpPortsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StpServer).RemoveStpPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stp_RemoveStpPorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StpServer).RemoveStpPorts(ctx, req.(*RemoveStpPortsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stp_ServiceDesc is the grpc.ServiceDesc for Stp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Stp",
	HandlerType: (*StpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStp",
			Handler:    _Stp_CreateStp_Handler,
		},
		{
			MethodName: "RemoveStp",
			Handler:    _Stp_RemoveStp_Handler,
		},
		{
			MethodName: "GetStpAttribute",
			Handler:    _Stp_GetStpAttribute_Handler,
		},
		{
			MethodName: "CreateStpPort",
			Handler:    _Stp_CreateStpPort_Handler,
		},
		{
			MethodName: "RemoveStpPort",
			Handler:    _Stp_RemoveStpPort_Handler,
		},
		{
			MethodName: "SetStpPortAttribute",
			Handler:    _Stp_SetStpPortAttribute_Handler,
		},
		{
			MethodName: "GetStpPortAttribute",
			Handler:    _Stp_GetStpPortAttribute_Handler,
		},
		{
			MethodName: "CreateStpPorts",
			Handler:    _Stp_CreateStpPorts_Handler,
		},
		{
			MethodName: "RemoveStpPorts",
			Handler:    _Stp_RemoveStpPorts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/stp.proto",
}
