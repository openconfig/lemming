// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: dataplane/proto/sai/bmtor.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TableBitmapClassificationEntryAttr int32

const (
	TableBitmapClassificationEntryAttr_TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_UNSPECIFIED          TableBitmapClassificationEntryAttr = 0
	TableBitmapClassificationEntryAttr_TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_ACTION               TableBitmapClassificationEntryAttr = 1
	TableBitmapClassificationEntryAttr_TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_ROUTER_INTERFACE_KEY TableBitmapClassificationEntryAttr = 2
	TableBitmapClassificationEntryAttr_TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_IS_DEFAULT           TableBitmapClassificationEntryAttr = 3
	TableBitmapClassificationEntryAttr_TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_IN_RIF_METADATA      TableBitmapClassificationEntryAttr = 4
)

// Enum value maps for TableBitmapClassificationEntryAttr.
var (
	TableBitmapClassificationEntryAttr_name = map[int32]string{
		0: "TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_UNSPECIFIED",
		1: "TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_ACTION",
		2: "TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_ROUTER_INTERFACE_KEY",
		3: "TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_IS_DEFAULT",
		4: "TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_IN_RIF_METADATA",
	}
	TableBitmapClassificationEntryAttr_value = map[string]int32{
		"TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_UNSPECIFIED":          0,
		"TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_ACTION":               1,
		"TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_ROUTER_INTERFACE_KEY": 2,
		"TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_IS_DEFAULT":           3,
		"TABLE_BITMAP_CLASSIFICATION_ENTRY_ATTR_IN_RIF_METADATA":      4,
	}
)

func (x TableBitmapClassificationEntryAttr) Enum() *TableBitmapClassificationEntryAttr {
	p := new(TableBitmapClassificationEntryAttr)
	*p = x
	return p
}

func (x TableBitmapClassificationEntryAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableBitmapClassificationEntryAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_bmtor_proto_enumTypes[0].Descriptor()
}

func (TableBitmapClassificationEntryAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_bmtor_proto_enumTypes[0]
}

func (x TableBitmapClassificationEntryAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableBitmapClassificationEntryAttr.Descriptor instead.
func (TableBitmapClassificationEntryAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{0}
}

type TableBitmapRouterEntryAttr int32

const (
	TableBitmapRouterEntryAttr_TABLE_BITMAP_ROUTER_ENTRY_ATTR_UNSPECIFIED          TableBitmapRouterEntryAttr = 0
	TableBitmapRouterEntryAttr_TABLE_BITMAP_ROUTER_ENTRY_ATTR_ACTION               TableBitmapRouterEntryAttr = 1
	TableBitmapRouterEntryAttr_TABLE_BITMAP_ROUTER_ENTRY_ATTR_PRIORITY             TableBitmapRouterEntryAttr = 2
	TableBitmapRouterEntryAttr_TABLE_BITMAP_ROUTER_ENTRY_ATTR_IN_RIF_METADATA_KEY  TableBitmapRouterEntryAttr = 3
	TableBitmapRouterEntryAttr_TABLE_BITMAP_ROUTER_ENTRY_ATTR_IN_RIF_METADATA_MASK TableBitmapRouterEntryAttr = 4
	TableBitmapRouterEntryAttr_TABLE_BITMAP_ROUTER_ENTRY_ATTR_DST_IP_KEY           TableBitmapRouterEntryAttr = 5
	TableBitmapRouterEntryAttr_TABLE_BITMAP_ROUTER_ENTRY_ATTR_TUNNEL_INDEX         TableBitmapRouterEntryAttr = 6
	TableBitmapRouterEntryAttr_TABLE_BITMAP_ROUTER_ENTRY_ATTR_NEXT_HOP             TableBitmapRouterEntryAttr = 7
	TableBitmapRouterEntryAttr_TABLE_BITMAP_ROUTER_ENTRY_ATTR_ROUTER_INTERFACE     TableBitmapRouterEntryAttr = 8
	TableBitmapRouterEntryAttr_TABLE_BITMAP_ROUTER_ENTRY_ATTR_TRAP_ID              TableBitmapRouterEntryAttr = 9
)

// Enum value maps for TableBitmapRouterEntryAttr.
var (
	TableBitmapRouterEntryAttr_name = map[int32]string{
		0: "TABLE_BITMAP_ROUTER_ENTRY_ATTR_UNSPECIFIED",
		1: "TABLE_BITMAP_ROUTER_ENTRY_ATTR_ACTION",
		2: "TABLE_BITMAP_ROUTER_ENTRY_ATTR_PRIORITY",
		3: "TABLE_BITMAP_ROUTER_ENTRY_ATTR_IN_RIF_METADATA_KEY",
		4: "TABLE_BITMAP_ROUTER_ENTRY_ATTR_IN_RIF_METADATA_MASK",
		5: "TABLE_BITMAP_ROUTER_ENTRY_ATTR_DST_IP_KEY",
		6: "TABLE_BITMAP_ROUTER_ENTRY_ATTR_TUNNEL_INDEX",
		7: "TABLE_BITMAP_ROUTER_ENTRY_ATTR_NEXT_HOP",
		8: "TABLE_BITMAP_ROUTER_ENTRY_ATTR_ROUTER_INTERFACE",
		9: "TABLE_BITMAP_ROUTER_ENTRY_ATTR_TRAP_ID",
	}
	TableBitmapRouterEntryAttr_value = map[string]int32{
		"TABLE_BITMAP_ROUTER_ENTRY_ATTR_UNSPECIFIED":          0,
		"TABLE_BITMAP_ROUTER_ENTRY_ATTR_ACTION":               1,
		"TABLE_BITMAP_ROUTER_ENTRY_ATTR_PRIORITY":             2,
		"TABLE_BITMAP_ROUTER_ENTRY_ATTR_IN_RIF_METADATA_KEY":  3,
		"TABLE_BITMAP_ROUTER_ENTRY_ATTR_IN_RIF_METADATA_MASK": 4,
		"TABLE_BITMAP_ROUTER_ENTRY_ATTR_DST_IP_KEY":           5,
		"TABLE_BITMAP_ROUTER_ENTRY_ATTR_TUNNEL_INDEX":         6,
		"TABLE_BITMAP_ROUTER_ENTRY_ATTR_NEXT_HOP":             7,
		"TABLE_BITMAP_ROUTER_ENTRY_ATTR_ROUTER_INTERFACE":     8,
		"TABLE_BITMAP_ROUTER_ENTRY_ATTR_TRAP_ID":              9,
	}
)

func (x TableBitmapRouterEntryAttr) Enum() *TableBitmapRouterEntryAttr {
	p := new(TableBitmapRouterEntryAttr)
	*p = x
	return p
}

func (x TableBitmapRouterEntryAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableBitmapRouterEntryAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_bmtor_proto_enumTypes[1].Descriptor()
}

func (TableBitmapRouterEntryAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_bmtor_proto_enumTypes[1]
}

func (x TableBitmapRouterEntryAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableBitmapRouterEntryAttr.Descriptor instead.
func (TableBitmapRouterEntryAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{1}
}

type TableMetaTunnelEntryAttr int32

const (
	TableMetaTunnelEntryAttr_TABLE_META_TUNNEL_ENTRY_ATTR_UNSPECIFIED  TableMetaTunnelEntryAttr = 0
	TableMetaTunnelEntryAttr_TABLE_META_TUNNEL_ENTRY_ATTR_ACTION       TableMetaTunnelEntryAttr = 1
	TableMetaTunnelEntryAttr_TABLE_META_TUNNEL_ENTRY_ATTR_METADATA_KEY TableMetaTunnelEntryAttr = 2
	TableMetaTunnelEntryAttr_TABLE_META_TUNNEL_ENTRY_ATTR_IS_DEFAULT   TableMetaTunnelEntryAttr = 3
	TableMetaTunnelEntryAttr_TABLE_META_TUNNEL_ENTRY_ATTR_TUNNEL_ID    TableMetaTunnelEntryAttr = 4
	TableMetaTunnelEntryAttr_TABLE_META_TUNNEL_ENTRY_ATTR_UNDERLAY_DIP TableMetaTunnelEntryAttr = 5
)

// Enum value maps for TableMetaTunnelEntryAttr.
var (
	TableMetaTunnelEntryAttr_name = map[int32]string{
		0: "TABLE_META_TUNNEL_ENTRY_ATTR_UNSPECIFIED",
		1: "TABLE_META_TUNNEL_ENTRY_ATTR_ACTION",
		2: "TABLE_META_TUNNEL_ENTRY_ATTR_METADATA_KEY",
		3: "TABLE_META_TUNNEL_ENTRY_ATTR_IS_DEFAULT",
		4: "TABLE_META_TUNNEL_ENTRY_ATTR_TUNNEL_ID",
		5: "TABLE_META_TUNNEL_ENTRY_ATTR_UNDERLAY_DIP",
	}
	TableMetaTunnelEntryAttr_value = map[string]int32{
		"TABLE_META_TUNNEL_ENTRY_ATTR_UNSPECIFIED":  0,
		"TABLE_META_TUNNEL_ENTRY_ATTR_ACTION":       1,
		"TABLE_META_TUNNEL_ENTRY_ATTR_METADATA_KEY": 2,
		"TABLE_META_TUNNEL_ENTRY_ATTR_IS_DEFAULT":   3,
		"TABLE_META_TUNNEL_ENTRY_ATTR_TUNNEL_ID":    4,
		"TABLE_META_TUNNEL_ENTRY_ATTR_UNDERLAY_DIP": 5,
	}
)

func (x TableMetaTunnelEntryAttr) Enum() *TableMetaTunnelEntryAttr {
	p := new(TableMetaTunnelEntryAttr)
	*p = x
	return p
}

func (x TableMetaTunnelEntryAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableMetaTunnelEntryAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_bmtor_proto_enumTypes[2].Descriptor()
}

func (TableMetaTunnelEntryAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_bmtor_proto_enumTypes[2]
}

func (x TableMetaTunnelEntryAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableMetaTunnelEntryAttr.Descriptor instead.
func (TableMetaTunnelEntryAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{2}
}

type CreateTableBitmapClassificationEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch             uint64                                `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Action             *TableBitmapClassificationEntryAction `protobuf:"varint,2,opt,name=action,proto3,enum=lemming.dataplane.sai.TableBitmapClassificationEntryAction,oneof" json:"action,omitempty"`
	RouterInterfaceKey *uint64                               `protobuf:"varint,3,opt,name=router_interface_key,json=routerInterfaceKey,proto3,oneof" json:"router_interface_key,omitempty"`
	IsDefault          *bool                                 `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3,oneof" json:"is_default,omitempty"`
	InRifMetadata      *uint32                               `protobuf:"varint,5,opt,name=in_rif_metadata,json=inRifMetadata,proto3,oneof" json:"in_rif_metadata,omitempty"`
}

func (x *CreateTableBitmapClassificationEntryRequest) Reset() {
	*x = CreateTableBitmapClassificationEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableBitmapClassificationEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableBitmapClassificationEntryRequest) ProtoMessage() {}

func (x *CreateTableBitmapClassificationEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableBitmapClassificationEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateTableBitmapClassificationEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTableBitmapClassificationEntryRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTableBitmapClassificationEntryRequest) GetAction() TableBitmapClassificationEntryAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return TableBitmapClassificationEntryAction_TABLE_BITMAP_CLASSIFICATION_ENTRY_ACTION_UNSPECIFIED
}

func (x *CreateTableBitmapClassificationEntryRequest) GetRouterInterfaceKey() uint64 {
	if x != nil && x.RouterInterfaceKey != nil {
		return *x.RouterInterfaceKey
	}
	return 0
}

func (x *CreateTableBitmapClassificationEntryRequest) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

func (x *CreateTableBitmapClassificationEntryRequest) GetInRifMetadata() uint32 {
	if x != nil && x.InRifMetadata != nil {
		return *x.InRifMetadata
	}
	return 0
}

type CreateTableBitmapClassificationEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTableBitmapClassificationEntryResponse) Reset() {
	*x = CreateTableBitmapClassificationEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableBitmapClassificationEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableBitmapClassificationEntryResponse) ProtoMessage() {}

func (x *CreateTableBitmapClassificationEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableBitmapClassificationEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateTableBitmapClassificationEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTableBitmapClassificationEntryResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTableBitmapClassificationEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTableBitmapClassificationEntryRequest) Reset() {
	*x = RemoveTableBitmapClassificationEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTableBitmapClassificationEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTableBitmapClassificationEntryRequest) ProtoMessage() {}

func (x *RemoveTableBitmapClassificationEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTableBitmapClassificationEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveTableBitmapClassificationEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveTableBitmapClassificationEntryRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTableBitmapClassificationEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTableBitmapClassificationEntryResponse) Reset() {
	*x = RemoveTableBitmapClassificationEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTableBitmapClassificationEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTableBitmapClassificationEntryResponse) ProtoMessage() {}

func (x *RemoveTableBitmapClassificationEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTableBitmapClassificationEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveTableBitmapClassificationEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{3}
}

type GetTableBitmapClassificationEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64                               `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TableBitmapClassificationEntryAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TableBitmapClassificationEntryAttr" json:"attr_type,omitempty"`
}

func (x *GetTableBitmapClassificationEntryAttributeRequest) Reset() {
	*x = GetTableBitmapClassificationEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableBitmapClassificationEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableBitmapClassificationEntryAttributeRequest) ProtoMessage() {}

func (x *GetTableBitmapClassificationEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableBitmapClassificationEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTableBitmapClassificationEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{4}
}

func (x *GetTableBitmapClassificationEntryAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTableBitmapClassificationEntryAttributeRequest) GetAttrType() []TableBitmapClassificationEntryAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTableBitmapClassificationEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TableBitmapClassificationEntryAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTableBitmapClassificationEntryAttributeResponse) Reset() {
	*x = GetTableBitmapClassificationEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableBitmapClassificationEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableBitmapClassificationEntryAttributeResponse) ProtoMessage() {}

func (x *GetTableBitmapClassificationEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableBitmapClassificationEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTableBitmapClassificationEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{5}
}

func (x *GetTableBitmapClassificationEntryAttributeResponse) GetAttr() *TableBitmapClassificationEntryAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type GetTableBitmapClassificationEntryStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64                               `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CounterIds []TableBitmapClassificationEntryStat `protobuf:"varint,2,rep,packed,name=counter_ids,json=counterIds,proto3,enum=lemming.dataplane.sai.TableBitmapClassificationEntryStat" json:"counter_ids,omitempty"`
}

func (x *GetTableBitmapClassificationEntryStatsRequest) Reset() {
	*x = GetTableBitmapClassificationEntryStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableBitmapClassificationEntryStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableBitmapClassificationEntryStatsRequest) ProtoMessage() {}

func (x *GetTableBitmapClassificationEntryStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableBitmapClassificationEntryStatsRequest.ProtoReflect.Descriptor instead.
func (*GetTableBitmapClassificationEntryStatsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{6}
}

func (x *GetTableBitmapClassificationEntryStatsRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTableBitmapClassificationEntryStatsRequest) GetCounterIds() []TableBitmapClassificationEntryStat {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

type GetTableBitmapClassificationEntryStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *GetTableBitmapClassificationEntryStatsResponse) Reset() {
	*x = GetTableBitmapClassificationEntryStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableBitmapClassificationEntryStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableBitmapClassificationEntryStatsResponse) ProtoMessage() {}

func (x *GetTableBitmapClassificationEntryStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableBitmapClassificationEntryStatsResponse.ProtoReflect.Descriptor instead.
func (*GetTableBitmapClassificationEntryStatsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{7}
}

func (x *GetTableBitmapClassificationEntryStatsResponse) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type CreateTableBitmapRouterEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch            uint64                        `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Action            *TableBitmapRouterEntryAction `protobuf:"varint,2,opt,name=action,proto3,enum=lemming.dataplane.sai.TableBitmapRouterEntryAction,oneof" json:"action,omitempty"`
	Priority          *uint32                       `protobuf:"varint,3,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	InRifMetadataKey  *uint32                       `protobuf:"varint,4,opt,name=in_rif_metadata_key,json=inRifMetadataKey,proto3,oneof" json:"in_rif_metadata_key,omitempty"`
	InRifMetadataMask *uint32                       `protobuf:"varint,5,opt,name=in_rif_metadata_mask,json=inRifMetadataMask,proto3,oneof" json:"in_rif_metadata_mask,omitempty"`
	DstIpKey          *IpPrefix                     `protobuf:"bytes,6,opt,name=dst_ip_key,json=dstIpKey,proto3,oneof" json:"dst_ip_key,omitempty"`
	TunnelIndex       *uint32                       `protobuf:"varint,7,opt,name=tunnel_index,json=tunnelIndex,proto3,oneof" json:"tunnel_index,omitempty"`
	NextHop           *uint64                       `protobuf:"varint,8,opt,name=next_hop,json=nextHop,proto3,oneof" json:"next_hop,omitempty"`
	RouterInterface   *uint64                       `protobuf:"varint,9,opt,name=router_interface,json=routerInterface,proto3,oneof" json:"router_interface,omitempty"`
	TrapId            *uint64                       `protobuf:"varint,10,opt,name=trap_id,json=trapId,proto3,oneof" json:"trap_id,omitempty"`
}

func (x *CreateTableBitmapRouterEntryRequest) Reset() {
	*x = CreateTableBitmapRouterEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableBitmapRouterEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableBitmapRouterEntryRequest) ProtoMessage() {}

func (x *CreateTableBitmapRouterEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableBitmapRouterEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateTableBitmapRouterEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTableBitmapRouterEntryRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTableBitmapRouterEntryRequest) GetAction() TableBitmapRouterEntryAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return TableBitmapRouterEntryAction_TABLE_BITMAP_ROUTER_ENTRY_ACTION_UNSPECIFIED
}

func (x *CreateTableBitmapRouterEntryRequest) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *CreateTableBitmapRouterEntryRequest) GetInRifMetadataKey() uint32 {
	if x != nil && x.InRifMetadataKey != nil {
		return *x.InRifMetadataKey
	}
	return 0
}

func (x *CreateTableBitmapRouterEntryRequest) GetInRifMetadataMask() uint32 {
	if x != nil && x.InRifMetadataMask != nil {
		return *x.InRifMetadataMask
	}
	return 0
}

func (x *CreateTableBitmapRouterEntryRequest) GetDstIpKey() *IpPrefix {
	if x != nil {
		return x.DstIpKey
	}
	return nil
}

func (x *CreateTableBitmapRouterEntryRequest) GetTunnelIndex() uint32 {
	if x != nil && x.TunnelIndex != nil {
		return *x.TunnelIndex
	}
	return 0
}

func (x *CreateTableBitmapRouterEntryRequest) GetNextHop() uint64 {
	if x != nil && x.NextHop != nil {
		return *x.NextHop
	}
	return 0
}

func (x *CreateTableBitmapRouterEntryRequest) GetRouterInterface() uint64 {
	if x != nil && x.RouterInterface != nil {
		return *x.RouterInterface
	}
	return 0
}

func (x *CreateTableBitmapRouterEntryRequest) GetTrapId() uint64 {
	if x != nil && x.TrapId != nil {
		return *x.TrapId
	}
	return 0
}

type CreateTableBitmapRouterEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTableBitmapRouterEntryResponse) Reset() {
	*x = CreateTableBitmapRouterEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableBitmapRouterEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableBitmapRouterEntryResponse) ProtoMessage() {}

func (x *CreateTableBitmapRouterEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableBitmapRouterEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateTableBitmapRouterEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTableBitmapRouterEntryResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTableBitmapRouterEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTableBitmapRouterEntryRequest) Reset() {
	*x = RemoveTableBitmapRouterEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTableBitmapRouterEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTableBitmapRouterEntryRequest) ProtoMessage() {}

func (x *RemoveTableBitmapRouterEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTableBitmapRouterEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveTableBitmapRouterEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{10}
}

func (x *RemoveTableBitmapRouterEntryRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTableBitmapRouterEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTableBitmapRouterEntryResponse) Reset() {
	*x = RemoveTableBitmapRouterEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTableBitmapRouterEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTableBitmapRouterEntryResponse) ProtoMessage() {}

func (x *RemoveTableBitmapRouterEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTableBitmapRouterEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveTableBitmapRouterEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{11}
}

type GetTableBitmapRouterEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64                       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TableBitmapRouterEntryAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TableBitmapRouterEntryAttr" json:"attr_type,omitempty"`
}

func (x *GetTableBitmapRouterEntryAttributeRequest) Reset() {
	*x = GetTableBitmapRouterEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableBitmapRouterEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableBitmapRouterEntryAttributeRequest) ProtoMessage() {}

func (x *GetTableBitmapRouterEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableBitmapRouterEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTableBitmapRouterEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{12}
}

func (x *GetTableBitmapRouterEntryAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTableBitmapRouterEntryAttributeRequest) GetAttrType() []TableBitmapRouterEntryAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTableBitmapRouterEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TableBitmapRouterEntryAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTableBitmapRouterEntryAttributeResponse) Reset() {
	*x = GetTableBitmapRouterEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableBitmapRouterEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableBitmapRouterEntryAttributeResponse) ProtoMessage() {}

func (x *GetTableBitmapRouterEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableBitmapRouterEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTableBitmapRouterEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{13}
}

func (x *GetTableBitmapRouterEntryAttributeResponse) GetAttr() *TableBitmapRouterEntryAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type GetTableBitmapRouterEntryStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64                       `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CounterIds []TableBitmapRouterEntryStat `protobuf:"varint,2,rep,packed,name=counter_ids,json=counterIds,proto3,enum=lemming.dataplane.sai.TableBitmapRouterEntryStat" json:"counter_ids,omitempty"`
}

func (x *GetTableBitmapRouterEntryStatsRequest) Reset() {
	*x = GetTableBitmapRouterEntryStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableBitmapRouterEntryStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableBitmapRouterEntryStatsRequest) ProtoMessage() {}

func (x *GetTableBitmapRouterEntryStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableBitmapRouterEntryStatsRequest.ProtoReflect.Descriptor instead.
func (*GetTableBitmapRouterEntryStatsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{14}
}

func (x *GetTableBitmapRouterEntryStatsRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTableBitmapRouterEntryStatsRequest) GetCounterIds() []TableBitmapRouterEntryStat {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

type GetTableBitmapRouterEntryStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *GetTableBitmapRouterEntryStatsResponse) Reset() {
	*x = GetTableBitmapRouterEntryStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableBitmapRouterEntryStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableBitmapRouterEntryStatsResponse) ProtoMessage() {}

func (x *GetTableBitmapRouterEntryStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableBitmapRouterEntryStatsResponse.ProtoReflect.Descriptor instead.
func (*GetTableBitmapRouterEntryStatsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{15}
}

func (x *GetTableBitmapRouterEntryStatsResponse) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type CreateTableMetaTunnelEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch      uint64                      `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Action      *TableMetaTunnelEntryAction `protobuf:"varint,2,opt,name=action,proto3,enum=lemming.dataplane.sai.TableMetaTunnelEntryAction,oneof" json:"action,omitempty"`
	MetadataKey *uint32                     `protobuf:"varint,3,opt,name=metadata_key,json=metadataKey,proto3,oneof" json:"metadata_key,omitempty"`
	IsDefault   *bool                       `protobuf:"varint,4,opt,name=is_default,json=isDefault,proto3,oneof" json:"is_default,omitempty"`
	TunnelId    *uint64                     `protobuf:"varint,5,opt,name=tunnel_id,json=tunnelId,proto3,oneof" json:"tunnel_id,omitempty"`
	UnderlayDip []byte                      `protobuf:"bytes,6,opt,name=underlay_dip,json=underlayDip,proto3,oneof" json:"underlay_dip,omitempty"`
}

func (x *CreateTableMetaTunnelEntryRequest) Reset() {
	*x = CreateTableMetaTunnelEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableMetaTunnelEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableMetaTunnelEntryRequest) ProtoMessage() {}

func (x *CreateTableMetaTunnelEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableMetaTunnelEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateTableMetaTunnelEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{16}
}

func (x *CreateTableMetaTunnelEntryRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateTableMetaTunnelEntryRequest) GetAction() TableMetaTunnelEntryAction {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return TableMetaTunnelEntryAction_TABLE_META_TUNNEL_ENTRY_ACTION_UNSPECIFIED
}

func (x *CreateTableMetaTunnelEntryRequest) GetMetadataKey() uint32 {
	if x != nil && x.MetadataKey != nil {
		return *x.MetadataKey
	}
	return 0
}

func (x *CreateTableMetaTunnelEntryRequest) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

func (x *CreateTableMetaTunnelEntryRequest) GetTunnelId() uint64 {
	if x != nil && x.TunnelId != nil {
		return *x.TunnelId
	}
	return 0
}

func (x *CreateTableMetaTunnelEntryRequest) GetUnderlayDip() []byte {
	if x != nil {
		return x.UnderlayDip
	}
	return nil
}

type CreateTableMetaTunnelEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateTableMetaTunnelEntryResponse) Reset() {
	*x = CreateTableMetaTunnelEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableMetaTunnelEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableMetaTunnelEntryResponse) ProtoMessage() {}

func (x *CreateTableMetaTunnelEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableMetaTunnelEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateTableMetaTunnelEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{17}
}

func (x *CreateTableMetaTunnelEntryResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTableMetaTunnelEntryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveTableMetaTunnelEntryRequest) Reset() {
	*x = RemoveTableMetaTunnelEntryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTableMetaTunnelEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTableMetaTunnelEntryRequest) ProtoMessage() {}

func (x *RemoveTableMetaTunnelEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTableMetaTunnelEntryRequest.ProtoReflect.Descriptor instead.
func (*RemoveTableMetaTunnelEntryRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveTableMetaTunnelEntryRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveTableMetaTunnelEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveTableMetaTunnelEntryResponse) Reset() {
	*x = RemoveTableMetaTunnelEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTableMetaTunnelEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTableMetaTunnelEntryResponse) ProtoMessage() {}

func (x *RemoveTableMetaTunnelEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTableMetaTunnelEntryResponse.ProtoReflect.Descriptor instead.
func (*RemoveTableMetaTunnelEntryResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{19}
}

type GetTableMetaTunnelEntryAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64                     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []TableMetaTunnelEntryAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.TableMetaTunnelEntryAttr" json:"attr_type,omitempty"`
}

func (x *GetTableMetaTunnelEntryAttributeRequest) Reset() {
	*x = GetTableMetaTunnelEntryAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableMetaTunnelEntryAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableMetaTunnelEntryAttributeRequest) ProtoMessage() {}

func (x *GetTableMetaTunnelEntryAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableMetaTunnelEntryAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetTableMetaTunnelEntryAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{20}
}

func (x *GetTableMetaTunnelEntryAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTableMetaTunnelEntryAttributeRequest) GetAttrType() []TableMetaTunnelEntryAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetTableMetaTunnelEntryAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *TableMetaTunnelEntryAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetTableMetaTunnelEntryAttributeResponse) Reset() {
	*x = GetTableMetaTunnelEntryAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableMetaTunnelEntryAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableMetaTunnelEntryAttributeResponse) ProtoMessage() {}

func (x *GetTableMetaTunnelEntryAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableMetaTunnelEntryAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetTableMetaTunnelEntryAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{21}
}

func (x *GetTableMetaTunnelEntryAttributeResponse) GetAttr() *TableMetaTunnelEntryAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type GetTableMetaTunnelEntryStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64                     `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CounterIds []TableMetaTunnelEntryStat `protobuf:"varint,2,rep,packed,name=counter_ids,json=counterIds,proto3,enum=lemming.dataplane.sai.TableMetaTunnelEntryStat" json:"counter_ids,omitempty"`
}

func (x *GetTableMetaTunnelEntryStatsRequest) Reset() {
	*x = GetTableMetaTunnelEntryStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableMetaTunnelEntryStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableMetaTunnelEntryStatsRequest) ProtoMessage() {}

func (x *GetTableMetaTunnelEntryStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableMetaTunnelEntryStatsRequest.ProtoReflect.Descriptor instead.
func (*GetTableMetaTunnelEntryStatsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{22}
}

func (x *GetTableMetaTunnelEntryStatsRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetTableMetaTunnelEntryStatsRequest) GetCounterIds() []TableMetaTunnelEntryStat {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

type GetTableMetaTunnelEntryStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *GetTableMetaTunnelEntryStatsResponse) Reset() {
	*x = GetTableMetaTunnelEntryStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableMetaTunnelEntryStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableMetaTunnelEntryStatsResponse) ProtoMessage() {}

func (x *GetTableMetaTunnelEntryStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_bmtor_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableMetaTunnelEntryStatsResponse.ProtoReflect.Descriptor instead.
func (*GetTableMetaTunnelEntryStatsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_bmtor_proto_rawDescGZIP(), []int{23}
}

func (x *GetTableMetaTunnelEntryStatsResponse) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_dataplane_proto_sai_bmtor_proto protoreflect.FileDescriptor

var file_dataplane_proto_sai_bmtor_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x62, 0x6d, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x20, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x03, 0x0a, 0x2b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x60, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52, 0x12, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4b, 0x65, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x03, 0x48,
	0x02, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x66, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04,
	0x48, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x52, 0x69, 0x66, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x00, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x66, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x2b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x2c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x56,
	0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74,
	0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74,
	0x72, 0x22, 0x9d, 0x01, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x5a, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73,
	0x61, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x22, 0x48, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xdb, 0x05, 0x0a, 0x23,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x58, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48,
	0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x66, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93,
	0xad, 0x0f, 0x03, 0x48, 0x02, 0x52, 0x10, 0x69, 0x6e, 0x52, 0x69, 0x66, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x14, 0x69, 0x6e,
	0x5f, 0x72, 0x69, 0x66, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04,
	0x48, 0x03, 0x52, 0x11, 0x69, 0x6e, 0x52, 0x69, 0x66, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x4d, 0x61, 0x73, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0a, 0x64, 0x73, 0x74, 0x5f,
	0x69, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c,
	0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x2e, 0x73, 0x61, 0x69, 0x2e, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x05, 0x48, 0x04, 0x52, 0x08, 0x64, 0x73, 0x74, 0x49, 0x70, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0c, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x06, 0x48, 0x05, 0x52, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x07, 0x48, 0x06,
	0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x10,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x08, 0x48, 0x07,
	0x52, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x09, 0x48, 0x08, 0x52,
	0x06, 0x74, 0x72, 0x61, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad,
	0x0f, 0x00, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69,
	0x6e, 0x5f, 0x72, 0x69, 0x66, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b,
	0x65, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x69, 0x66, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x64, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x24, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x23, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x24,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6f, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x78, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69,
	0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x8d,
	0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x40,
	0x0a, 0x26, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x9b, 0x03, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x56,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61,
	0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xf0, 0xdc,
	0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad,
	0x0f, 0x03, 0x48, 0x02, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x04, 0x48, 0x03, 0x52,
	0x08, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0c,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x05, 0x48, 0x04, 0x52, 0x0b, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x44, 0x69, 0x70, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9,
	0x90, 0xad, 0x0f, 0x00, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x64, 0x69, 0x70, 0x22, 0x36,
	0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x24, 0x0a,
	0x22, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69,
	0x64, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x41, 0x74, 0x74, 0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x74, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x61,
	0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52,
	0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12,
	0x50, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x22, 0x3e, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x2a, 0xc3, 0x02, 0x0a, 0x22, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x12, 0x36, 0x0a, 0x32, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x31, 0x0a, 0x2d, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50,
	0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x3f, 0x0a, 0x3b, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x54,
	0x4d, 0x41, 0x50, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4b,
	0x45, 0x59, 0x10, 0x02, 0x12, 0x35, 0x0a, 0x31, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x49,
	0x54, 0x4d, 0x41, 0x50, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49,
	0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x3a, 0x0a, 0x36, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x49, 0x46, 0x5f, 0x4d, 0x45, 0x54,
	0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x2a, 0x83, 0x04, 0x0a, 0x1a, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x2a, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41,
	0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x36,
	0x0a, 0x32, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x49, 0x46, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x4b, 0x45, 0x59, 0x10, 0x03, 0x12, 0x37, 0x0a, 0x33, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x49, 0x46, 0x5f,
	0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x04, 0x12,
	0x2d, 0x0a, 0x29, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x44, 0x53, 0x54, 0x5f, 0x49, 0x50, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x05, 0x12, 0x2f,
	0x0a, 0x2b, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x06, 0x12,
	0x2b, 0x0a, 0x27, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x10, 0x07, 0x12, 0x33, 0x0a, 0x2f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10,
	0x08, 0x12, 0x2a, 0x0a, 0x26, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41,
	0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x09, 0x2a, 0xa8, 0x02,
	0x0a, 0x18, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x4e,
	0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x01, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54,
	0x52, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x02,
	0x12, 0x2b, 0x0a, 0x27, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x54,
	0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x5f, 0x49, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x12, 0x2a, 0x0a,
	0x26, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x54, 0x55, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x55,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x4c,
	0x41, 0x59, 0x5f, 0x44, 0x49, 0x50, 0x10, 0x05, 0x32, 0xe7, 0x0f, 0x0a, 0x05, 0x42, 0x6d, 0x74,
	0x6f, 0x72, 0x12, 0xb1, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x42, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x43, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb1, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x42, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc3, 0x01, 0x0a, 0x2a, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x48, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xb7, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x44, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x45, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x1c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3a, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xab, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x40, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d,
	0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x9f, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74,
	0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x3c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x69, 0x74, 0x6d, 0x61, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x38, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5,
	0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x3e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e,
	0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_proto_sai_bmtor_proto_rawDescOnce sync.Once
	file_dataplane_proto_sai_bmtor_proto_rawDescData = file_dataplane_proto_sai_bmtor_proto_rawDesc
)

func file_dataplane_proto_sai_bmtor_proto_rawDescGZIP() []byte {
	file_dataplane_proto_sai_bmtor_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_sai_bmtor_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_sai_bmtor_proto_rawDescData)
	})
	return file_dataplane_proto_sai_bmtor_proto_rawDescData
}

var file_dataplane_proto_sai_bmtor_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_dataplane_proto_sai_bmtor_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_dataplane_proto_sai_bmtor_proto_goTypes = []interface{}{
	(TableBitmapClassificationEntryAttr)(0),                    // 0: lemming.dataplane.sai.TableBitmapClassificationEntryAttr
	(TableBitmapRouterEntryAttr)(0),                            // 1: lemming.dataplane.sai.TableBitmapRouterEntryAttr
	(TableMetaTunnelEntryAttr)(0),                              // 2: lemming.dataplane.sai.TableMetaTunnelEntryAttr
	(*CreateTableBitmapClassificationEntryRequest)(nil),        // 3: lemming.dataplane.sai.CreateTableBitmapClassificationEntryRequest
	(*CreateTableBitmapClassificationEntryResponse)(nil),       // 4: lemming.dataplane.sai.CreateTableBitmapClassificationEntryResponse
	(*RemoveTableBitmapClassificationEntryRequest)(nil),        // 5: lemming.dataplane.sai.RemoveTableBitmapClassificationEntryRequest
	(*RemoveTableBitmapClassificationEntryResponse)(nil),       // 6: lemming.dataplane.sai.RemoveTableBitmapClassificationEntryResponse
	(*GetTableBitmapClassificationEntryAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetTableBitmapClassificationEntryAttributeRequest
	(*GetTableBitmapClassificationEntryAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetTableBitmapClassificationEntryAttributeResponse
	(*GetTableBitmapClassificationEntryStatsRequest)(nil),      // 9: lemming.dataplane.sai.GetTableBitmapClassificationEntryStatsRequest
	(*GetTableBitmapClassificationEntryStatsResponse)(nil),     // 10: lemming.dataplane.sai.GetTableBitmapClassificationEntryStatsResponse
	(*CreateTableBitmapRouterEntryRequest)(nil),                // 11: lemming.dataplane.sai.CreateTableBitmapRouterEntryRequest
	(*CreateTableBitmapRouterEntryResponse)(nil),               // 12: lemming.dataplane.sai.CreateTableBitmapRouterEntryResponse
	(*RemoveTableBitmapRouterEntryRequest)(nil),                // 13: lemming.dataplane.sai.RemoveTableBitmapRouterEntryRequest
	(*RemoveTableBitmapRouterEntryResponse)(nil),               // 14: lemming.dataplane.sai.RemoveTableBitmapRouterEntryResponse
	(*GetTableBitmapRouterEntryAttributeRequest)(nil),          // 15: lemming.dataplane.sai.GetTableBitmapRouterEntryAttributeRequest
	(*GetTableBitmapRouterEntryAttributeResponse)(nil),         // 16: lemming.dataplane.sai.GetTableBitmapRouterEntryAttributeResponse
	(*GetTableBitmapRouterEntryStatsRequest)(nil),              // 17: lemming.dataplane.sai.GetTableBitmapRouterEntryStatsRequest
	(*GetTableBitmapRouterEntryStatsResponse)(nil),             // 18: lemming.dataplane.sai.GetTableBitmapRouterEntryStatsResponse
	(*CreateTableMetaTunnelEntryRequest)(nil),                  // 19: lemming.dataplane.sai.CreateTableMetaTunnelEntryRequest
	(*CreateTableMetaTunnelEntryResponse)(nil),                 // 20: lemming.dataplane.sai.CreateTableMetaTunnelEntryResponse
	(*RemoveTableMetaTunnelEntryRequest)(nil),                  // 21: lemming.dataplane.sai.RemoveTableMetaTunnelEntryRequest
	(*RemoveTableMetaTunnelEntryResponse)(nil),                 // 22: lemming.dataplane.sai.RemoveTableMetaTunnelEntryResponse
	(*GetTableMetaTunnelEntryAttributeRequest)(nil),            // 23: lemming.dataplane.sai.GetTableMetaTunnelEntryAttributeRequest
	(*GetTableMetaTunnelEntryAttributeResponse)(nil),           // 24: lemming.dataplane.sai.GetTableMetaTunnelEntryAttributeResponse
	(*GetTableMetaTunnelEntryStatsRequest)(nil),                // 25: lemming.dataplane.sai.GetTableMetaTunnelEntryStatsRequest
	(*GetTableMetaTunnelEntryStatsResponse)(nil),               // 26: lemming.dataplane.sai.GetTableMetaTunnelEntryStatsResponse
	(TableBitmapClassificationEntryAction)(0),                  // 27: lemming.dataplane.sai.TableBitmapClassificationEntryAction
	(*TableBitmapClassificationEntryAttribute)(nil),            // 28: lemming.dataplane.sai.TableBitmapClassificationEntryAttribute
	(TableBitmapClassificationEntryStat)(0),                    // 29: lemming.dataplane.sai.TableBitmapClassificationEntryStat
	(TableBitmapRouterEntryAction)(0),                          // 30: lemming.dataplane.sai.TableBitmapRouterEntryAction
	(*IpPrefix)(nil),                                           // 31: lemming.dataplane.sai.IpPrefix
	(*TableBitmapRouterEntryAttribute)(nil),                    // 32: lemming.dataplane.sai.TableBitmapRouterEntryAttribute
	(TableBitmapRouterEntryStat)(0),                            // 33: lemming.dataplane.sai.TableBitmapRouterEntryStat
	(TableMetaTunnelEntryAction)(0),                            // 34: lemming.dataplane.sai.TableMetaTunnelEntryAction
	(*TableMetaTunnelEntryAttribute)(nil),                      // 35: lemming.dataplane.sai.TableMetaTunnelEntryAttribute
	(TableMetaTunnelEntryStat)(0),                              // 36: lemming.dataplane.sai.TableMetaTunnelEntryStat
}
var file_dataplane_proto_sai_bmtor_proto_depIdxs = []int32{
	27, // 0: lemming.dataplane.sai.CreateTableBitmapClassificationEntryRequest.action:type_name -> lemming.dataplane.sai.TableBitmapClassificationEntryAction
	0,  // 1: lemming.dataplane.sai.GetTableBitmapClassificationEntryAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TableBitmapClassificationEntryAttr
	28, // 2: lemming.dataplane.sai.GetTableBitmapClassificationEntryAttributeResponse.attr:type_name -> lemming.dataplane.sai.TableBitmapClassificationEntryAttribute
	29, // 3: lemming.dataplane.sai.GetTableBitmapClassificationEntryStatsRequest.counter_ids:type_name -> lemming.dataplane.sai.TableBitmapClassificationEntryStat
	30, // 4: lemming.dataplane.sai.CreateTableBitmapRouterEntryRequest.action:type_name -> lemming.dataplane.sai.TableBitmapRouterEntryAction
	31, // 5: lemming.dataplane.sai.CreateTableBitmapRouterEntryRequest.dst_ip_key:type_name -> lemming.dataplane.sai.IpPrefix
	1,  // 6: lemming.dataplane.sai.GetTableBitmapRouterEntryAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TableBitmapRouterEntryAttr
	32, // 7: lemming.dataplane.sai.GetTableBitmapRouterEntryAttributeResponse.attr:type_name -> lemming.dataplane.sai.TableBitmapRouterEntryAttribute
	33, // 8: lemming.dataplane.sai.GetTableBitmapRouterEntryStatsRequest.counter_ids:type_name -> lemming.dataplane.sai.TableBitmapRouterEntryStat
	34, // 9: lemming.dataplane.sai.CreateTableMetaTunnelEntryRequest.action:type_name -> lemming.dataplane.sai.TableMetaTunnelEntryAction
	2,  // 10: lemming.dataplane.sai.GetTableMetaTunnelEntryAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.TableMetaTunnelEntryAttr
	35, // 11: lemming.dataplane.sai.GetTableMetaTunnelEntryAttributeResponse.attr:type_name -> lemming.dataplane.sai.TableMetaTunnelEntryAttribute
	36, // 12: lemming.dataplane.sai.GetTableMetaTunnelEntryStatsRequest.counter_ids:type_name -> lemming.dataplane.sai.TableMetaTunnelEntryStat
	3,  // 13: lemming.dataplane.sai.Bmtor.CreateTableBitmapClassificationEntry:input_type -> lemming.dataplane.sai.CreateTableBitmapClassificationEntryRequest
	5,  // 14: lemming.dataplane.sai.Bmtor.RemoveTableBitmapClassificationEntry:input_type -> lemming.dataplane.sai.RemoveTableBitmapClassificationEntryRequest
	7,  // 15: lemming.dataplane.sai.Bmtor.GetTableBitmapClassificationEntryAttribute:input_type -> lemming.dataplane.sai.GetTableBitmapClassificationEntryAttributeRequest
	9,  // 16: lemming.dataplane.sai.Bmtor.GetTableBitmapClassificationEntryStats:input_type -> lemming.dataplane.sai.GetTableBitmapClassificationEntryStatsRequest
	11, // 17: lemming.dataplane.sai.Bmtor.CreateTableBitmapRouterEntry:input_type -> lemming.dataplane.sai.CreateTableBitmapRouterEntryRequest
	13, // 18: lemming.dataplane.sai.Bmtor.RemoveTableBitmapRouterEntry:input_type -> lemming.dataplane.sai.RemoveTableBitmapRouterEntryRequest
	15, // 19: lemming.dataplane.sai.Bmtor.GetTableBitmapRouterEntryAttribute:input_type -> lemming.dataplane.sai.GetTableBitmapRouterEntryAttributeRequest
	17, // 20: lemming.dataplane.sai.Bmtor.GetTableBitmapRouterEntryStats:input_type -> lemming.dataplane.sai.GetTableBitmapRouterEntryStatsRequest
	19, // 21: lemming.dataplane.sai.Bmtor.CreateTableMetaTunnelEntry:input_type -> lemming.dataplane.sai.CreateTableMetaTunnelEntryRequest
	21, // 22: lemming.dataplane.sai.Bmtor.RemoveTableMetaTunnelEntry:input_type -> lemming.dataplane.sai.RemoveTableMetaTunnelEntryRequest
	23, // 23: lemming.dataplane.sai.Bmtor.GetTableMetaTunnelEntryAttribute:input_type -> lemming.dataplane.sai.GetTableMetaTunnelEntryAttributeRequest
	25, // 24: lemming.dataplane.sai.Bmtor.GetTableMetaTunnelEntryStats:input_type -> lemming.dataplane.sai.GetTableMetaTunnelEntryStatsRequest
	4,  // 25: lemming.dataplane.sai.Bmtor.CreateTableBitmapClassificationEntry:output_type -> lemming.dataplane.sai.CreateTableBitmapClassificationEntryResponse
	6,  // 26: lemming.dataplane.sai.Bmtor.RemoveTableBitmapClassificationEntry:output_type -> lemming.dataplane.sai.RemoveTableBitmapClassificationEntryResponse
	8,  // 27: lemming.dataplane.sai.Bmtor.GetTableBitmapClassificationEntryAttribute:output_type -> lemming.dataplane.sai.GetTableBitmapClassificationEntryAttributeResponse
	10, // 28: lemming.dataplane.sai.Bmtor.GetTableBitmapClassificationEntryStats:output_type -> lemming.dataplane.sai.GetTableBitmapClassificationEntryStatsResponse
	12, // 29: lemming.dataplane.sai.Bmtor.CreateTableBitmapRouterEntry:output_type -> lemming.dataplane.sai.CreateTableBitmapRouterEntryResponse
	14, // 30: lemming.dataplane.sai.Bmtor.RemoveTableBitmapRouterEntry:output_type -> lemming.dataplane.sai.RemoveTableBitmapRouterEntryResponse
	16, // 31: lemming.dataplane.sai.Bmtor.GetTableBitmapRouterEntryAttribute:output_type -> lemming.dataplane.sai.GetTableBitmapRouterEntryAttributeResponse
	18, // 32: lemming.dataplane.sai.Bmtor.GetTableBitmapRouterEntryStats:output_type -> lemming.dataplane.sai.GetTableBitmapRouterEntryStatsResponse
	20, // 33: lemming.dataplane.sai.Bmtor.CreateTableMetaTunnelEntry:output_type -> lemming.dataplane.sai.CreateTableMetaTunnelEntryResponse
	22, // 34: lemming.dataplane.sai.Bmtor.RemoveTableMetaTunnelEntry:output_type -> lemming.dataplane.sai.RemoveTableMetaTunnelEntryResponse
	24, // 35: lemming.dataplane.sai.Bmtor.GetTableMetaTunnelEntryAttribute:output_type -> lemming.dataplane.sai.GetTableMetaTunnelEntryAttributeResponse
	26, // 36: lemming.dataplane.sai.Bmtor.GetTableMetaTunnelEntryStats:output_type -> lemming.dataplane.sai.GetTableMetaTunnelEntryStatsResponse
	25, // [25:37] is the sub-list for method output_type
	13, // [13:25] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_dataplane_proto_sai_bmtor_proto_init() }
func file_dataplane_proto_sai_bmtor_proto_init() {
	if File_dataplane_proto_sai_bmtor_proto != nil {
		return
	}
	file_dataplane_proto_sai_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_sai_bmtor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableBitmapClassificationEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableBitmapClassificationEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTableBitmapClassificationEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTableBitmapClassificationEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableBitmapClassificationEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableBitmapClassificationEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableBitmapClassificationEntryStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableBitmapClassificationEntryStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableBitmapRouterEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableBitmapRouterEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTableBitmapRouterEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTableBitmapRouterEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableBitmapRouterEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableBitmapRouterEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableBitmapRouterEntryStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableBitmapRouterEntryStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableMetaTunnelEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableMetaTunnelEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTableMetaTunnelEntryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTableMetaTunnelEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableMetaTunnelEntryAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableMetaTunnelEntryAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableMetaTunnelEntryStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_bmtor_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableMetaTunnelEntryStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_sai_bmtor_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_proto_sai_bmtor_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_dataplane_proto_sai_bmtor_proto_msgTypes[16].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_sai_bmtor_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_sai_bmtor_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_sai_bmtor_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_sai_bmtor_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_sai_bmtor_proto_msgTypes,
	}.Build()
	File_dataplane_proto_sai_bmtor_proto = out.File
	file_dataplane_proto_sai_bmtor_proto_rawDesc = nil
	file_dataplane_proto_sai_bmtor_proto_goTypes = nil
	file_dataplane_proto_sai_bmtor_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BmtorClient is the client API for Bmtor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BmtorClient interface {
	CreateTableBitmapClassificationEntry(ctx context.Context, in *CreateTableBitmapClassificationEntryRequest, opts ...grpc.CallOption) (*CreateTableBitmapClassificationEntryResponse, error)
	RemoveTableBitmapClassificationEntry(ctx context.Context, in *RemoveTableBitmapClassificationEntryRequest, opts ...grpc.CallOption) (*RemoveTableBitmapClassificationEntryResponse, error)
	GetTableBitmapClassificationEntryAttribute(ctx context.Context, in *GetTableBitmapClassificationEntryAttributeRequest, opts ...grpc.CallOption) (*GetTableBitmapClassificationEntryAttributeResponse, error)
	GetTableBitmapClassificationEntryStats(ctx context.Context, in *GetTableBitmapClassificationEntryStatsRequest, opts ...grpc.CallOption) (*GetTableBitmapClassificationEntryStatsResponse, error)
	CreateTableBitmapRouterEntry(ctx context.Context, in *CreateTableBitmapRouterEntryRequest, opts ...grpc.CallOption) (*CreateTableBitmapRouterEntryResponse, error)
	RemoveTableBitmapRouterEntry(ctx context.Context, in *RemoveTableBitmapRouterEntryRequest, opts ...grpc.CallOption) (*RemoveTableBitmapRouterEntryResponse, error)
	GetTableBitmapRouterEntryAttribute(ctx context.Context, in *GetTableBitmapRouterEntryAttributeRequest, opts ...grpc.CallOption) (*GetTableBitmapRouterEntryAttributeResponse, error)
	GetTableBitmapRouterEntryStats(ctx context.Context, in *GetTableBitmapRouterEntryStatsRequest, opts ...grpc.CallOption) (*GetTableBitmapRouterEntryStatsResponse, error)
	CreateTableMetaTunnelEntry(ctx context.Context, in *CreateTableMetaTunnelEntryRequest, opts ...grpc.CallOption) (*CreateTableMetaTunnelEntryResponse, error)
	RemoveTableMetaTunnelEntry(ctx context.Context, in *RemoveTableMetaTunnelEntryRequest, opts ...grpc.CallOption) (*RemoveTableMetaTunnelEntryResponse, error)
	GetTableMetaTunnelEntryAttribute(ctx context.Context, in *GetTableMetaTunnelEntryAttributeRequest, opts ...grpc.CallOption) (*GetTableMetaTunnelEntryAttributeResponse, error)
	GetTableMetaTunnelEntryStats(ctx context.Context, in *GetTableMetaTunnelEntryStatsRequest, opts ...grpc.CallOption) (*GetTableMetaTunnelEntryStatsResponse, error)
}

type bmtorClient struct {
	cc grpc.ClientConnInterface
}

func NewBmtorClient(cc grpc.ClientConnInterface) BmtorClient {
	return &bmtorClient{cc}
}

func (c *bmtorClient) CreateTableBitmapClassificationEntry(ctx context.Context, in *CreateTableBitmapClassificationEntryRequest, opts ...grpc.CallOption) (*CreateTableBitmapClassificationEntryResponse, error) {
	out := new(CreateTableBitmapClassificationEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bmtor/CreateTableBitmapClassificationEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) RemoveTableBitmapClassificationEntry(ctx context.Context, in *RemoveTableBitmapClassificationEntryRequest, opts ...grpc.CallOption) (*RemoveTableBitmapClassificationEntryResponse, error) {
	out := new(RemoveTableBitmapClassificationEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bmtor/RemoveTableBitmapClassificationEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) GetTableBitmapClassificationEntryAttribute(ctx context.Context, in *GetTableBitmapClassificationEntryAttributeRequest, opts ...grpc.CallOption) (*GetTableBitmapClassificationEntryAttributeResponse, error) {
	out := new(GetTableBitmapClassificationEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bmtor/GetTableBitmapClassificationEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) GetTableBitmapClassificationEntryStats(ctx context.Context, in *GetTableBitmapClassificationEntryStatsRequest, opts ...grpc.CallOption) (*GetTableBitmapClassificationEntryStatsResponse, error) {
	out := new(GetTableBitmapClassificationEntryStatsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bmtor/GetTableBitmapClassificationEntryStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) CreateTableBitmapRouterEntry(ctx context.Context, in *CreateTableBitmapRouterEntryRequest, opts ...grpc.CallOption) (*CreateTableBitmapRouterEntryResponse, error) {
	out := new(CreateTableBitmapRouterEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bmtor/CreateTableBitmapRouterEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) RemoveTableBitmapRouterEntry(ctx context.Context, in *RemoveTableBitmapRouterEntryRequest, opts ...grpc.CallOption) (*RemoveTableBitmapRouterEntryResponse, error) {
	out := new(RemoveTableBitmapRouterEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bmtor/RemoveTableBitmapRouterEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) GetTableBitmapRouterEntryAttribute(ctx context.Context, in *GetTableBitmapRouterEntryAttributeRequest, opts ...grpc.CallOption) (*GetTableBitmapRouterEntryAttributeResponse, error) {
	out := new(GetTableBitmapRouterEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bmtor/GetTableBitmapRouterEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) GetTableBitmapRouterEntryStats(ctx context.Context, in *GetTableBitmapRouterEntryStatsRequest, opts ...grpc.CallOption) (*GetTableBitmapRouterEntryStatsResponse, error) {
	out := new(GetTableBitmapRouterEntryStatsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bmtor/GetTableBitmapRouterEntryStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) CreateTableMetaTunnelEntry(ctx context.Context, in *CreateTableMetaTunnelEntryRequest, opts ...grpc.CallOption) (*CreateTableMetaTunnelEntryResponse, error) {
	out := new(CreateTableMetaTunnelEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bmtor/CreateTableMetaTunnelEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) RemoveTableMetaTunnelEntry(ctx context.Context, in *RemoveTableMetaTunnelEntryRequest, opts ...grpc.CallOption) (*RemoveTableMetaTunnelEntryResponse, error) {
	out := new(RemoveTableMetaTunnelEntryResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bmtor/RemoveTableMetaTunnelEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) GetTableMetaTunnelEntryAttribute(ctx context.Context, in *GetTableMetaTunnelEntryAttributeRequest, opts ...grpc.CallOption) (*GetTableMetaTunnelEntryAttributeResponse, error) {
	out := new(GetTableMetaTunnelEntryAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bmtor/GetTableMetaTunnelEntryAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bmtorClient) GetTableMetaTunnelEntryStats(ctx context.Context, in *GetTableMetaTunnelEntryStatsRequest, opts ...grpc.CallOption) (*GetTableMetaTunnelEntryStatsResponse, error) {
	out := new(GetTableMetaTunnelEntryStatsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Bmtor/GetTableMetaTunnelEntryStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BmtorServer is the server API for Bmtor service.
type BmtorServer interface {
	CreateTableBitmapClassificationEntry(context.Context, *CreateTableBitmapClassificationEntryRequest) (*CreateTableBitmapClassificationEntryResponse, error)
	RemoveTableBitmapClassificationEntry(context.Context, *RemoveTableBitmapClassificationEntryRequest) (*RemoveTableBitmapClassificationEntryResponse, error)
	GetTableBitmapClassificationEntryAttribute(context.Context, *GetTableBitmapClassificationEntryAttributeRequest) (*GetTableBitmapClassificationEntryAttributeResponse, error)
	GetTableBitmapClassificationEntryStats(context.Context, *GetTableBitmapClassificationEntryStatsRequest) (*GetTableBitmapClassificationEntryStatsResponse, error)
	CreateTableBitmapRouterEntry(context.Context, *CreateTableBitmapRouterEntryRequest) (*CreateTableBitmapRouterEntryResponse, error)
	RemoveTableBitmapRouterEntry(context.Context, *RemoveTableBitmapRouterEntryRequest) (*RemoveTableBitmapRouterEntryResponse, error)
	GetTableBitmapRouterEntryAttribute(context.Context, *GetTableBitmapRouterEntryAttributeRequest) (*GetTableBitmapRouterEntryAttributeResponse, error)
	GetTableBitmapRouterEntryStats(context.Context, *GetTableBitmapRouterEntryStatsRequest) (*GetTableBitmapRouterEntryStatsResponse, error)
	CreateTableMetaTunnelEntry(context.Context, *CreateTableMetaTunnelEntryRequest) (*CreateTableMetaTunnelEntryResponse, error)
	RemoveTableMetaTunnelEntry(context.Context, *RemoveTableMetaTunnelEntryRequest) (*RemoveTableMetaTunnelEntryResponse, error)
	GetTableMetaTunnelEntryAttribute(context.Context, *GetTableMetaTunnelEntryAttributeRequest) (*GetTableMetaTunnelEntryAttributeResponse, error)
	GetTableMetaTunnelEntryStats(context.Context, *GetTableMetaTunnelEntryStatsRequest) (*GetTableMetaTunnelEntryStatsResponse, error)
}

// UnimplementedBmtorServer can be embedded to have forward compatible implementations.
type UnimplementedBmtorServer struct {
}

func (*UnimplementedBmtorServer) CreateTableBitmapClassificationEntry(context.Context, *CreateTableBitmapClassificationEntryRequest) (*CreateTableBitmapClassificationEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTableBitmapClassificationEntry not implemented")
}
func (*UnimplementedBmtorServer) RemoveTableBitmapClassificationEntry(context.Context, *RemoveTableBitmapClassificationEntryRequest) (*RemoveTableBitmapClassificationEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTableBitmapClassificationEntry not implemented")
}
func (*UnimplementedBmtorServer) GetTableBitmapClassificationEntryAttribute(context.Context, *GetTableBitmapClassificationEntryAttributeRequest) (*GetTableBitmapClassificationEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableBitmapClassificationEntryAttribute not implemented")
}
func (*UnimplementedBmtorServer) GetTableBitmapClassificationEntryStats(context.Context, *GetTableBitmapClassificationEntryStatsRequest) (*GetTableBitmapClassificationEntryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableBitmapClassificationEntryStats not implemented")
}
func (*UnimplementedBmtorServer) CreateTableBitmapRouterEntry(context.Context, *CreateTableBitmapRouterEntryRequest) (*CreateTableBitmapRouterEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTableBitmapRouterEntry not implemented")
}
func (*UnimplementedBmtorServer) RemoveTableBitmapRouterEntry(context.Context, *RemoveTableBitmapRouterEntryRequest) (*RemoveTableBitmapRouterEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTableBitmapRouterEntry not implemented")
}
func (*UnimplementedBmtorServer) GetTableBitmapRouterEntryAttribute(context.Context, *GetTableBitmapRouterEntryAttributeRequest) (*GetTableBitmapRouterEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableBitmapRouterEntryAttribute not implemented")
}
func (*UnimplementedBmtorServer) GetTableBitmapRouterEntryStats(context.Context, *GetTableBitmapRouterEntryStatsRequest) (*GetTableBitmapRouterEntryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableBitmapRouterEntryStats not implemented")
}
func (*UnimplementedBmtorServer) CreateTableMetaTunnelEntry(context.Context, *CreateTableMetaTunnelEntryRequest) (*CreateTableMetaTunnelEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTableMetaTunnelEntry not implemented")
}
func (*UnimplementedBmtorServer) RemoveTableMetaTunnelEntry(context.Context, *RemoveTableMetaTunnelEntryRequest) (*RemoveTableMetaTunnelEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTableMetaTunnelEntry not implemented")
}
func (*UnimplementedBmtorServer) GetTableMetaTunnelEntryAttribute(context.Context, *GetTableMetaTunnelEntryAttributeRequest) (*GetTableMetaTunnelEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableMetaTunnelEntryAttribute not implemented")
}
func (*UnimplementedBmtorServer) GetTableMetaTunnelEntryStats(context.Context, *GetTableMetaTunnelEntryStatsRequest) (*GetTableMetaTunnelEntryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableMetaTunnelEntryStats not implemented")
}

func RegisterBmtorServer(s *grpc.Server, srv BmtorServer) {
	s.RegisterService(&_Bmtor_serviceDesc, srv)
}

func _Bmtor_CreateTableBitmapClassificationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableBitmapClassificationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).CreateTableBitmapClassificationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bmtor/CreateTableBitmapClassificationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).CreateTableBitmapClassificationEntry(ctx, req.(*CreateTableBitmapClassificationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_RemoveTableBitmapClassificationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTableBitmapClassificationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).RemoveTableBitmapClassificationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bmtor/RemoveTableBitmapClassificationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).RemoveTableBitmapClassificationEntry(ctx, req.(*RemoveTableBitmapClassificationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_GetTableBitmapClassificationEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableBitmapClassificationEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).GetTableBitmapClassificationEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bmtor/GetTableBitmapClassificationEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).GetTableBitmapClassificationEntryAttribute(ctx, req.(*GetTableBitmapClassificationEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_GetTableBitmapClassificationEntryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableBitmapClassificationEntryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).GetTableBitmapClassificationEntryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bmtor/GetTableBitmapClassificationEntryStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).GetTableBitmapClassificationEntryStats(ctx, req.(*GetTableBitmapClassificationEntryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_CreateTableBitmapRouterEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableBitmapRouterEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).CreateTableBitmapRouterEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bmtor/CreateTableBitmapRouterEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).CreateTableBitmapRouterEntry(ctx, req.(*CreateTableBitmapRouterEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_RemoveTableBitmapRouterEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTableBitmapRouterEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).RemoveTableBitmapRouterEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bmtor/RemoveTableBitmapRouterEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).RemoveTableBitmapRouterEntry(ctx, req.(*RemoveTableBitmapRouterEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_GetTableBitmapRouterEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableBitmapRouterEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).GetTableBitmapRouterEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bmtor/GetTableBitmapRouterEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).GetTableBitmapRouterEntryAttribute(ctx, req.(*GetTableBitmapRouterEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_GetTableBitmapRouterEntryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableBitmapRouterEntryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).GetTableBitmapRouterEntryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bmtor/GetTableBitmapRouterEntryStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).GetTableBitmapRouterEntryStats(ctx, req.(*GetTableBitmapRouterEntryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_CreateTableMetaTunnelEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableMetaTunnelEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).CreateTableMetaTunnelEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bmtor/CreateTableMetaTunnelEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).CreateTableMetaTunnelEntry(ctx, req.(*CreateTableMetaTunnelEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_RemoveTableMetaTunnelEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTableMetaTunnelEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).RemoveTableMetaTunnelEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bmtor/RemoveTableMetaTunnelEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).RemoveTableMetaTunnelEntry(ctx, req.(*RemoveTableMetaTunnelEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_GetTableMetaTunnelEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableMetaTunnelEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).GetTableMetaTunnelEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bmtor/GetTableMetaTunnelEntryAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).GetTableMetaTunnelEntryAttribute(ctx, req.(*GetTableMetaTunnelEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bmtor_GetTableMetaTunnelEntryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableMetaTunnelEntryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BmtorServer).GetTableMetaTunnelEntryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Bmtor/GetTableMetaTunnelEntryStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BmtorServer).GetTableMetaTunnelEntryStats(ctx, req.(*GetTableMetaTunnelEntryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bmtor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Bmtor",
	HandlerType: (*BmtorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTableBitmapClassificationEntry",
			Handler:    _Bmtor_CreateTableBitmapClassificationEntry_Handler,
		},
		{
			MethodName: "RemoveTableBitmapClassificationEntry",
			Handler:    _Bmtor_RemoveTableBitmapClassificationEntry_Handler,
		},
		{
			MethodName: "GetTableBitmapClassificationEntryAttribute",
			Handler:    _Bmtor_GetTableBitmapClassificationEntryAttribute_Handler,
		},
		{
			MethodName: "GetTableBitmapClassificationEntryStats",
			Handler:    _Bmtor_GetTableBitmapClassificationEntryStats_Handler,
		},
		{
			MethodName: "CreateTableBitmapRouterEntry",
			Handler:    _Bmtor_CreateTableBitmapRouterEntry_Handler,
		},
		{
			MethodName: "RemoveTableBitmapRouterEntry",
			Handler:    _Bmtor_RemoveTableBitmapRouterEntry_Handler,
		},
		{
			MethodName: "GetTableBitmapRouterEntryAttribute",
			Handler:    _Bmtor_GetTableBitmapRouterEntryAttribute_Handler,
		},
		{
			MethodName: "GetTableBitmapRouterEntryStats",
			Handler:    _Bmtor_GetTableBitmapRouterEntryStats_Handler,
		},
		{
			MethodName: "CreateTableMetaTunnelEntry",
			Handler:    _Bmtor_CreateTableMetaTunnelEntry_Handler,
		},
		{
			MethodName: "RemoveTableMetaTunnelEntry",
			Handler:    _Bmtor_RemoveTableMetaTunnelEntry_Handler,
		},
		{
			MethodName: "GetTableMetaTunnelEntryAttribute",
			Handler:    _Bmtor_GetTableMetaTunnelEntryAttribute_Handler,
		},
		{
			MethodName: "GetTableMetaTunnelEntryStats",
			Handler:    _Bmtor_GetTableMetaTunnelEntryStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/bmtor.proto",
}
