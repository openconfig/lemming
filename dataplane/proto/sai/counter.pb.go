// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: dataplane/proto/sai/counter.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CounterAttr int32

const (
	CounterAttr_COUNTER_ATTR_UNSPECIFIED CounterAttr = 0
	CounterAttr_COUNTER_ATTR_TYPE        CounterAttr = 1
	CounterAttr_COUNTER_ATTR_LABEL       CounterAttr = 2
)

// Enum value maps for CounterAttr.
var (
	CounterAttr_name = map[int32]string{
		0: "COUNTER_ATTR_UNSPECIFIED",
		1: "COUNTER_ATTR_TYPE",
		2: "COUNTER_ATTR_LABEL",
	}
	CounterAttr_value = map[string]int32{
		"COUNTER_ATTR_UNSPECIFIED": 0,
		"COUNTER_ATTR_TYPE":        1,
		"COUNTER_ATTR_LABEL":       2,
	}
)

func (x CounterAttr) Enum() *CounterAttr {
	p := new(CounterAttr)
	*p = x
	return p
}

func (x CounterAttr) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CounterAttr) Descriptor() protoreflect.EnumDescriptor {
	return file_dataplane_proto_sai_counter_proto_enumTypes[0].Descriptor()
}

func (CounterAttr) Type() protoreflect.EnumType {
	return &file_dataplane_proto_sai_counter_proto_enumTypes[0]
}

func (x CounterAttr) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CounterAttr.Descriptor instead.
func (CounterAttr) EnumDescriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_counter_proto_rawDescGZIP(), []int{0}
}

type CreateCounterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switch uint64       `protobuf:"varint,1,opt,name=switch,proto3" json:"switch,omitempty"`
	Type   *CounterType `protobuf:"varint,2,opt,name=type,proto3,enum=lemming.dataplane.sai.CounterType,oneof" json:"type,omitempty"`
	Label  []byte       `protobuf:"bytes,3,opt,name=label,proto3,oneof" json:"label,omitempty"`
}

func (x *CreateCounterRequest) Reset() {
	*x = CreateCounterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_counter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCounterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCounterRequest) ProtoMessage() {}

func (x *CreateCounterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_counter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCounterRequest.ProtoReflect.Descriptor instead.
func (*CreateCounterRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_counter_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCounterRequest) GetSwitch() uint64 {
	if x != nil {
		return x.Switch
	}
	return 0
}

func (x *CreateCounterRequest) GetType() CounterType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CounterType_COUNTER_TYPE_UNSPECIFIED
}

func (x *CreateCounterRequest) GetLabel() []byte {
	if x != nil {
		return x.Label
	}
	return nil
}

type CreateCounterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *CreateCounterResponse) Reset() {
	*x = CreateCounterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_counter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCounterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCounterResponse) ProtoMessage() {}

func (x *CreateCounterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_counter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCounterResponse.ProtoReflect.Descriptor instead.
func (*CreateCounterResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_counter_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCounterResponse) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveCounterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
}

func (x *RemoveCounterRequest) Reset() {
	*x = RemoveCounterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_counter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCounterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCounterRequest) ProtoMessage() {}

func (x *RemoveCounterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_counter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCounterRequest.ProtoReflect.Descriptor instead.
func (*RemoveCounterRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_counter_proto_rawDescGZIP(), []int{2}
}

func (x *RemoveCounterRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

type RemoveCounterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveCounterResponse) Reset() {
	*x = RemoveCounterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_counter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveCounterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveCounterResponse) ProtoMessage() {}

func (x *RemoveCounterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_counter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveCounterResponse.ProtoReflect.Descriptor instead.
func (*RemoveCounterResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_counter_proto_rawDescGZIP(), []int{3}
}

type SetCounterAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid   uint64 `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	Label []byte `protobuf:"bytes,2,opt,name=label,proto3,oneof" json:"label,omitempty"`
}

func (x *SetCounterAttributeRequest) Reset() {
	*x = SetCounterAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_counter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCounterAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCounterAttributeRequest) ProtoMessage() {}

func (x *SetCounterAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_counter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCounterAttributeRequest.ProtoReflect.Descriptor instead.
func (*SetCounterAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_counter_proto_rawDescGZIP(), []int{4}
}

func (x *SetCounterAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *SetCounterAttributeRequest) GetLabel() []byte {
	if x != nil {
		return x.Label
	}
	return nil
}

type SetCounterAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetCounterAttributeResponse) Reset() {
	*x = SetCounterAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_counter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCounterAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCounterAttributeResponse) ProtoMessage() {}

func (x *SetCounterAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_counter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCounterAttributeResponse.ProtoReflect.Descriptor instead.
func (*SetCounterAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_counter_proto_rawDescGZIP(), []int{5}
}

type GetCounterAttributeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid      uint64        `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	AttrType []CounterAttr `protobuf:"varint,2,rep,packed,name=attr_type,json=attrType,proto3,enum=lemming.dataplane.sai.CounterAttr" json:"attr_type,omitempty"`
}

func (x *GetCounterAttributeRequest) Reset() {
	*x = GetCounterAttributeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_counter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCounterAttributeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCounterAttributeRequest) ProtoMessage() {}

func (x *GetCounterAttributeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_counter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCounterAttributeRequest.ProtoReflect.Descriptor instead.
func (*GetCounterAttributeRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_counter_proto_rawDescGZIP(), []int{6}
}

func (x *GetCounterAttributeRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetCounterAttributeRequest) GetAttrType() []CounterAttr {
	if x != nil {
		return x.AttrType
	}
	return nil
}

type GetCounterAttributeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attr *CounterAttribute `protobuf:"bytes,1,opt,name=attr,proto3" json:"attr,omitempty"`
}

func (x *GetCounterAttributeResponse) Reset() {
	*x = GetCounterAttributeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_counter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCounterAttributeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCounterAttributeResponse) ProtoMessage() {}

func (x *GetCounterAttributeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_counter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCounterAttributeResponse.ProtoReflect.Descriptor instead.
func (*GetCounterAttributeResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_counter_proto_rawDescGZIP(), []int{7}
}

func (x *GetCounterAttributeResponse) GetAttr() *CounterAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

type GetCounterStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oid        uint64        `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty"`
	CounterIds []CounterStat `protobuf:"varint,2,rep,packed,name=counter_ids,json=counterIds,proto3,enum=lemming.dataplane.sai.CounterStat" json:"counter_ids,omitempty"`
}

func (x *GetCounterStatsRequest) Reset() {
	*x = GetCounterStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_counter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCounterStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCounterStatsRequest) ProtoMessage() {}

func (x *GetCounterStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_counter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCounterStatsRequest.ProtoReflect.Descriptor instead.
func (*GetCounterStatsRequest) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_counter_proto_rawDescGZIP(), []int{8}
}

func (x *GetCounterStatsRequest) GetOid() uint64 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *GetCounterStatsRequest) GetCounterIds() []CounterStat {
	if x != nil {
		return x.CounterIds
	}
	return nil
}

type GetCounterStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []uint64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *GetCounterStatsResponse) Reset() {
	*x = GetCounterStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataplane_proto_sai_counter_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCounterStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCounterStatsResponse) ProtoMessage() {}

func (x *GetCounterStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dataplane_proto_sai_counter_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCounterStatsResponse.ProtoReflect.Descriptor instead.
func (*GetCounterStatsResponse) Descriptor() ([]byte, []int) {
	return file_dataplane_proto_sai_counter_proto_rawDescGZIP(), []int{9}
}

func (x *GetCounterStatsResponse) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_dataplane_proto_sai_counter_proto protoreflect.FileDescriptor

var file_dataplane_proto_sai_counter_proto_rawDesc = []byte{
	0x0a, 0x21, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x1a, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x01, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65,
	0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e,
	0x73, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x01, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x06, 0xf0, 0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x3a, 0x06, 0xa0, 0xa9, 0x90, 0xad, 0x0f, 0x55, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0x29, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x28, 0x0a, 0x14, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xf0,
	0xdc, 0x93, 0xad, 0x0f, 0x02, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x1d, 0x0a, 0x1b, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x52, 0x08, 0x61, 0x74, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5a, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x74,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x22, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69,
	0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x52, 0x0a, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2a, 0x5a, 0x0a, 0x0b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x02, 0x32, 0xd9, 0x04, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x6c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6c, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7e, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x31, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x65, 0x6d, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61,
	0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x72, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x2d, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x73, 0x61, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6c, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x61, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataplane_proto_sai_counter_proto_rawDescOnce sync.Once
	file_dataplane_proto_sai_counter_proto_rawDescData = file_dataplane_proto_sai_counter_proto_rawDesc
)

func file_dataplane_proto_sai_counter_proto_rawDescGZIP() []byte {
	file_dataplane_proto_sai_counter_proto_rawDescOnce.Do(func() {
		file_dataplane_proto_sai_counter_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataplane_proto_sai_counter_proto_rawDescData)
	})
	return file_dataplane_proto_sai_counter_proto_rawDescData
}

var file_dataplane_proto_sai_counter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataplane_proto_sai_counter_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_dataplane_proto_sai_counter_proto_goTypes = []interface{}{
	(CounterAttr)(0),                    // 0: lemming.dataplane.sai.CounterAttr
	(*CreateCounterRequest)(nil),        // 1: lemming.dataplane.sai.CreateCounterRequest
	(*CreateCounterResponse)(nil),       // 2: lemming.dataplane.sai.CreateCounterResponse
	(*RemoveCounterRequest)(nil),        // 3: lemming.dataplane.sai.RemoveCounterRequest
	(*RemoveCounterResponse)(nil),       // 4: lemming.dataplane.sai.RemoveCounterResponse
	(*SetCounterAttributeRequest)(nil),  // 5: lemming.dataplane.sai.SetCounterAttributeRequest
	(*SetCounterAttributeResponse)(nil), // 6: lemming.dataplane.sai.SetCounterAttributeResponse
	(*GetCounterAttributeRequest)(nil),  // 7: lemming.dataplane.sai.GetCounterAttributeRequest
	(*GetCounterAttributeResponse)(nil), // 8: lemming.dataplane.sai.GetCounterAttributeResponse
	(*GetCounterStatsRequest)(nil),      // 9: lemming.dataplane.sai.GetCounterStatsRequest
	(*GetCounterStatsResponse)(nil),     // 10: lemming.dataplane.sai.GetCounterStatsResponse
	(CounterType)(0),                    // 11: lemming.dataplane.sai.CounterType
	(*CounterAttribute)(nil),            // 12: lemming.dataplane.sai.CounterAttribute
	(CounterStat)(0),                    // 13: lemming.dataplane.sai.CounterStat
}
var file_dataplane_proto_sai_counter_proto_depIdxs = []int32{
	11, // 0: lemming.dataplane.sai.CreateCounterRequest.type:type_name -> lemming.dataplane.sai.CounterType
	0,  // 1: lemming.dataplane.sai.GetCounterAttributeRequest.attr_type:type_name -> lemming.dataplane.sai.CounterAttr
	12, // 2: lemming.dataplane.sai.GetCounterAttributeResponse.attr:type_name -> lemming.dataplane.sai.CounterAttribute
	13, // 3: lemming.dataplane.sai.GetCounterStatsRequest.counter_ids:type_name -> lemming.dataplane.sai.CounterStat
	1,  // 4: lemming.dataplane.sai.Counter.CreateCounter:input_type -> lemming.dataplane.sai.CreateCounterRequest
	3,  // 5: lemming.dataplane.sai.Counter.RemoveCounter:input_type -> lemming.dataplane.sai.RemoveCounterRequest
	5,  // 6: lemming.dataplane.sai.Counter.SetCounterAttribute:input_type -> lemming.dataplane.sai.SetCounterAttributeRequest
	7,  // 7: lemming.dataplane.sai.Counter.GetCounterAttribute:input_type -> lemming.dataplane.sai.GetCounterAttributeRequest
	9,  // 8: lemming.dataplane.sai.Counter.GetCounterStats:input_type -> lemming.dataplane.sai.GetCounterStatsRequest
	2,  // 9: lemming.dataplane.sai.Counter.CreateCounter:output_type -> lemming.dataplane.sai.CreateCounterResponse
	4,  // 10: lemming.dataplane.sai.Counter.RemoveCounter:output_type -> lemming.dataplane.sai.RemoveCounterResponse
	6,  // 11: lemming.dataplane.sai.Counter.SetCounterAttribute:output_type -> lemming.dataplane.sai.SetCounterAttributeResponse
	8,  // 12: lemming.dataplane.sai.Counter.GetCounterAttribute:output_type -> lemming.dataplane.sai.GetCounterAttributeResponse
	10, // 13: lemming.dataplane.sai.Counter.GetCounterStats:output_type -> lemming.dataplane.sai.GetCounterStatsResponse
	9,  // [9:14] is the sub-list for method output_type
	4,  // [4:9] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_dataplane_proto_sai_counter_proto_init() }
func file_dataplane_proto_sai_counter_proto_init() {
	if File_dataplane_proto_sai_counter_proto != nil {
		return
	}
	file_dataplane_proto_sai_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dataplane_proto_sai_counter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCounterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_counter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCounterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_counter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCounterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_counter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveCounterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_counter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCounterAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_counter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCounterAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_counter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCounterAttributeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_counter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCounterAttributeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_counter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCounterStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataplane_proto_sai_counter_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCounterStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataplane_proto_sai_counter_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_dataplane_proto_sai_counter_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataplane_proto_sai_counter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dataplane_proto_sai_counter_proto_goTypes,
		DependencyIndexes: file_dataplane_proto_sai_counter_proto_depIdxs,
		EnumInfos:         file_dataplane_proto_sai_counter_proto_enumTypes,
		MessageInfos:      file_dataplane_proto_sai_counter_proto_msgTypes,
	}.Build()
	File_dataplane_proto_sai_counter_proto = out.File
	file_dataplane_proto_sai_counter_proto_rawDesc = nil
	file_dataplane_proto_sai_counter_proto_goTypes = nil
	file_dataplane_proto_sai_counter_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CounterClient is the client API for Counter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CounterClient interface {
	CreateCounter(ctx context.Context, in *CreateCounterRequest, opts ...grpc.CallOption) (*CreateCounterResponse, error)
	RemoveCounter(ctx context.Context, in *RemoveCounterRequest, opts ...grpc.CallOption) (*RemoveCounterResponse, error)
	SetCounterAttribute(ctx context.Context, in *SetCounterAttributeRequest, opts ...grpc.CallOption) (*SetCounterAttributeResponse, error)
	GetCounterAttribute(ctx context.Context, in *GetCounterAttributeRequest, opts ...grpc.CallOption) (*GetCounterAttributeResponse, error)
	GetCounterStats(ctx context.Context, in *GetCounterStatsRequest, opts ...grpc.CallOption) (*GetCounterStatsResponse, error)
}

type counterClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterClient(cc grpc.ClientConnInterface) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) CreateCounter(ctx context.Context, in *CreateCounterRequest, opts ...grpc.CallOption) (*CreateCounterResponse, error) {
	out := new(CreateCounterResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Counter/CreateCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) RemoveCounter(ctx context.Context, in *RemoveCounterRequest, opts ...grpc.CallOption) (*RemoveCounterResponse, error) {
	out := new(RemoveCounterResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Counter/RemoveCounter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) SetCounterAttribute(ctx context.Context, in *SetCounterAttributeRequest, opts ...grpc.CallOption) (*SetCounterAttributeResponse, error) {
	out := new(SetCounterAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Counter/SetCounterAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) GetCounterAttribute(ctx context.Context, in *GetCounterAttributeRequest, opts ...grpc.CallOption) (*GetCounterAttributeResponse, error) {
	out := new(GetCounterAttributeResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Counter/GetCounterAttribute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) GetCounterStats(ctx context.Context, in *GetCounterStatsRequest, opts ...grpc.CallOption) (*GetCounterStatsResponse, error) {
	out := new(GetCounterStatsResponse)
	err := c.cc.Invoke(ctx, "/lemming.dataplane.sai.Counter/GetCounterStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CounterServer is the server API for Counter service.
type CounterServer interface {
	CreateCounter(context.Context, *CreateCounterRequest) (*CreateCounterResponse, error)
	RemoveCounter(context.Context, *RemoveCounterRequest) (*RemoveCounterResponse, error)
	SetCounterAttribute(context.Context, *SetCounterAttributeRequest) (*SetCounterAttributeResponse, error)
	GetCounterAttribute(context.Context, *GetCounterAttributeRequest) (*GetCounterAttributeResponse, error)
	GetCounterStats(context.Context, *GetCounterStatsRequest) (*GetCounterStatsResponse, error)
}

// UnimplementedCounterServer can be embedded to have forward compatible implementations.
type UnimplementedCounterServer struct {
}

func (*UnimplementedCounterServer) CreateCounter(context.Context, *CreateCounterRequest) (*CreateCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCounter not implemented")
}
func (*UnimplementedCounterServer) RemoveCounter(context.Context, *RemoveCounterRequest) (*RemoveCounterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCounter not implemented")
}
func (*UnimplementedCounterServer) SetCounterAttribute(context.Context, *SetCounterAttributeRequest) (*SetCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCounterAttribute not implemented")
}
func (*UnimplementedCounterServer) GetCounterAttribute(context.Context, *GetCounterAttributeRequest) (*GetCounterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounterAttribute not implemented")
}
func (*UnimplementedCounterServer) GetCounterStats(context.Context, *GetCounterStatsRequest) (*GetCounterStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounterStats not implemented")
}

func RegisterCounterServer(s *grpc.Server, srv CounterServer) {
	s.RegisterService(&_Counter_serviceDesc, srv)
}

func _Counter_CreateCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).CreateCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Counter/CreateCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).CreateCounter(ctx, req.(*CreateCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_RemoveCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCounterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).RemoveCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Counter/RemoveCounter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).RemoveCounter(ctx, req.(*RemoveCounterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_SetCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).SetCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Counter/SetCounterAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).SetCounterAttribute(ctx, req.(*SetCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_GetCounterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCounterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).GetCounterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Counter/GetCounterAttribute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).GetCounterAttribute(ctx, req.(*GetCounterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_GetCounterStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCounterStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).GetCounterStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lemming.dataplane.sai.Counter/GetCounterStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).GetCounterStats(ctx, req.(*GetCounterStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Counter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCounter",
			Handler:    _Counter_CreateCounter_Handler,
		},
		{
			MethodName: "RemoveCounter",
			Handler:    _Counter_RemoveCounter_Handler,
		},
		{
			MethodName: "SetCounterAttribute",
			Handler:    _Counter_SetCounterAttribute_Handler,
		},
		{
			MethodName: "GetCounterAttribute",
			Handler:    _Counter_GetCounterAttribute_Handler,
		},
		{
			MethodName: "GetCounterStats",
			Handler:    _Counter_GetCounterStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/counter.proto",
}
