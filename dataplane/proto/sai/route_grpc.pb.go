// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dataplane/proto/sai/route.proto

package sai

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Route_CreateRouteEntry_FullMethodName       = "/lemming.dataplane.sai.Route/CreateRouteEntry"
	Route_RemoveRouteEntry_FullMethodName       = "/lemming.dataplane.sai.Route/RemoveRouteEntry"
	Route_SetRouteEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Route/SetRouteEntryAttribute"
	Route_GetRouteEntryAttribute_FullMethodName = "/lemming.dataplane.sai.Route/GetRouteEntryAttribute"
	Route_CreateRouteEntries_FullMethodName     = "/lemming.dataplane.sai.Route/CreateRouteEntries"
	Route_RemoveRouteEntries_FullMethodName     = "/lemming.dataplane.sai.Route/RemoveRouteEntries"
)

// RouteClient is the client API for Route service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteClient interface {
	CreateRouteEntry(ctx context.Context, in *CreateRouteEntryRequest, opts ...grpc.CallOption) (*CreateRouteEntryResponse, error)
	RemoveRouteEntry(ctx context.Context, in *RemoveRouteEntryRequest, opts ...grpc.CallOption) (*RemoveRouteEntryResponse, error)
	SetRouteEntryAttribute(ctx context.Context, in *SetRouteEntryAttributeRequest, opts ...grpc.CallOption) (*SetRouteEntryAttributeResponse, error)
	GetRouteEntryAttribute(ctx context.Context, in *GetRouteEntryAttributeRequest, opts ...grpc.CallOption) (*GetRouteEntryAttributeResponse, error)
	CreateRouteEntries(ctx context.Context, in *CreateRouteEntriesRequest, opts ...grpc.CallOption) (*CreateRouteEntriesResponse, error)
	RemoveRouteEntries(ctx context.Context, in *RemoveRouteEntriesRequest, opts ...grpc.CallOption) (*RemoveRouteEntriesResponse, error)
}

type routeClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteClient(cc grpc.ClientConnInterface) RouteClient {
	return &routeClient{cc}
}

func (c *routeClient) CreateRouteEntry(ctx context.Context, in *CreateRouteEntryRequest, opts ...grpc.CallOption) (*CreateRouteEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRouteEntryResponse)
	err := c.cc.Invoke(ctx, Route_CreateRouteEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeClient) RemoveRouteEntry(ctx context.Context, in *RemoveRouteEntryRequest, opts ...grpc.CallOption) (*RemoveRouteEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRouteEntryResponse)
	err := c.cc.Invoke(ctx, Route_RemoveRouteEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeClient) SetRouteEntryAttribute(ctx context.Context, in *SetRouteEntryAttributeRequest, opts ...grpc.CallOption) (*SetRouteEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRouteEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Route_SetRouteEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeClient) GetRouteEntryAttribute(ctx context.Context, in *GetRouteEntryAttributeRequest, opts ...grpc.CallOption) (*GetRouteEntryAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouteEntryAttributeResponse)
	err := c.cc.Invoke(ctx, Route_GetRouteEntryAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeClient) CreateRouteEntries(ctx context.Context, in *CreateRouteEntriesRequest, opts ...grpc.CallOption) (*CreateRouteEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRouteEntriesResponse)
	err := c.cc.Invoke(ctx, Route_CreateRouteEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeClient) RemoveRouteEntries(ctx context.Context, in *RemoveRouteEntriesRequest, opts ...grpc.CallOption) (*RemoveRouteEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRouteEntriesResponse)
	err := c.cc.Invoke(ctx, Route_RemoveRouteEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteServer is the server API for Route service.
// All implementations should embed UnimplementedRouteServer
// for forward compatibility.
type RouteServer interface {
	CreateRouteEntry(context.Context, *CreateRouteEntryRequest) (*CreateRouteEntryResponse, error)
	RemoveRouteEntry(context.Context, *RemoveRouteEntryRequest) (*RemoveRouteEntryResponse, error)
	SetRouteEntryAttribute(context.Context, *SetRouteEntryAttributeRequest) (*SetRouteEntryAttributeResponse, error)
	GetRouteEntryAttribute(context.Context, *GetRouteEntryAttributeRequest) (*GetRouteEntryAttributeResponse, error)
	CreateRouteEntries(context.Context, *CreateRouteEntriesRequest) (*CreateRouteEntriesResponse, error)
	RemoveRouteEntries(context.Context, *RemoveRouteEntriesRequest) (*RemoveRouteEntriesResponse, error)
}

// UnimplementedRouteServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRouteServer struct{}

func (UnimplementedRouteServer) CreateRouteEntry(context.Context, *CreateRouteEntryRequest) (*CreateRouteEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouteEntry not implemented")
}
func (UnimplementedRouteServer) RemoveRouteEntry(context.Context, *RemoveRouteEntryRequest) (*RemoveRouteEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRouteEntry not implemented")
}
func (UnimplementedRouteServer) SetRouteEntryAttribute(context.Context, *SetRouteEntryAttributeRequest) (*SetRouteEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRouteEntryAttribute not implemented")
}
func (UnimplementedRouteServer) GetRouteEntryAttribute(context.Context, *GetRouteEntryAttributeRequest) (*GetRouteEntryAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteEntryAttribute not implemented")
}
func (UnimplementedRouteServer) CreateRouteEntries(context.Context, *CreateRouteEntriesRequest) (*CreateRouteEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouteEntries not implemented")
}
func (UnimplementedRouteServer) RemoveRouteEntries(context.Context, *RemoveRouteEntriesRequest) (*RemoveRouteEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRouteEntries not implemented")
}
func (UnimplementedRouteServer) testEmbeddedByValue() {}

// UnsafeRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteServer will
// result in compilation errors.
type UnsafeRouteServer interface {
	mustEmbedUnimplementedRouteServer()
}

func RegisterRouteServer(s grpc.ServiceRegistrar, srv RouteServer) {
	// If the following call pancis, it indicates UnimplementedRouteServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Route_ServiceDesc, srv)
}

func _Route_CreateRouteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).CreateRouteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Route_CreateRouteEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).CreateRouteEntry(ctx, req.(*CreateRouteEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Route_RemoveRouteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRouteEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).RemoveRouteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Route_RemoveRouteEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).RemoveRouteEntry(ctx, req.(*RemoveRouteEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Route_SetRouteEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRouteEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).SetRouteEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Route_SetRouteEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).SetRouteEntryAttribute(ctx, req.(*SetRouteEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Route_GetRouteEntryAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteEntryAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).GetRouteEntryAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Route_GetRouteEntryAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).GetRouteEntryAttribute(ctx, req.(*GetRouteEntryAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Route_CreateRouteEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).CreateRouteEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Route_CreateRouteEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).CreateRouteEntries(ctx, req.(*CreateRouteEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Route_RemoveRouteEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRouteEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServer).RemoveRouteEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Route_RemoveRouteEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServer).RemoveRouteEntries(ctx, req.(*RemoveRouteEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Route_ServiceDesc is the grpc.ServiceDesc for Route service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Route_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lemming.dataplane.sai.Route",
	HandlerType: (*RouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRouteEntry",
			Handler:    _Route_CreateRouteEntry_Handler,
		},
		{
			MethodName: "RemoveRouteEntry",
			Handler:    _Route_RemoveRouteEntry_Handler,
		},
		{
			MethodName: "SetRouteEntryAttribute",
			Handler:    _Route_SetRouteEntryAttribute_Handler,
		},
		{
			MethodName: "GetRouteEntryAttribute",
			Handler:    _Route_GetRouteEntryAttribute_Handler,
		},
		{
			MethodName: "CreateRouteEntries",
			Handler:    _Route_CreateRouteEntries_Handler,
		},
		{
			MethodName: "RemoveRouteEntries",
			Handler:    _Route_RemoveRouteEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplane/proto/sai/route.proto",
}
