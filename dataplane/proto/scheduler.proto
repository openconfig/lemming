
syntax = "proto3";

package lemming.dataplane.sai;

import "dataplane/proto/common.proto";

option go_package = "github.com/openconfig/lemming/dataplane/proto;sai";

enum SchedulerAttr {
  SCHEDULER_ATTR_UNSPECIFIED = 0;
  SCHEDULER_ATTR_SCHEDULING_TYPE = 1;
  SCHEDULER_ATTR_SCHEDULING_WEIGHT = 2;
  SCHEDULER_ATTR_METER_TYPE = 3;
  SCHEDULER_ATTR_MIN_BANDWIDTH_RATE = 4;
  SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE = 5;
  SCHEDULER_ATTR_MAX_BANDWIDTH_RATE = 6;
  SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE = 7;
}

message CreateSchedulerRequest {
  option (sai_type) = OBJECT_TYPE_SCHEDULER;
  uint64 switch = 1;
  optional SchedulingType scheduling_type = 2 [(attr_enum_value) = 1];
  optional uint32 scheduling_weight = 3 [(attr_enum_value) = 2];
  optional MeterType meter_type = 4 [(attr_enum_value) = 3];
  optional uint64 min_bandwidth_rate = 5 [(attr_enum_value) = 4];
  optional uint64 min_bandwidth_burst_rate = 6 [(attr_enum_value) = 5];
  optional uint64 max_bandwidth_rate = 7 [(attr_enum_value) = 6];
  optional uint64 max_bandwidth_burst_rate = 8 [(attr_enum_value) = 7];
}

message CreateSchedulerResponse {
  uint64 oid = 1;
}

message RemoveSchedulerRequest {
  uint64 oid = 1;
}

message RemoveSchedulerResponse {}

message SetSchedulerAttributeRequest {
  uint64 oid = 1;
  optional SchedulingType scheduling_type = 2 [(attr_enum_value) = 1];
  optional uint32 scheduling_weight = 3 [(attr_enum_value) = 2];
  optional MeterType meter_type = 4 [(attr_enum_value) = 3];
  optional uint64 min_bandwidth_rate = 5 [(attr_enum_value) = 4];
  optional uint64 min_bandwidth_burst_rate = 6 [(attr_enum_value) = 5];
  optional uint64 max_bandwidth_rate = 7 [(attr_enum_value) = 6];
  optional uint64 max_bandwidth_burst_rate = 8 [(attr_enum_value) = 7];
}

message SetSchedulerAttributeResponse {}

message GetSchedulerAttributeRequest {
  uint64 oid = 1;
  repeated SchedulerAttr attr_type = 2;
}

message GetSchedulerAttributeResponse {
  SchedulerAttribute attr = 1;
}

service Scheduler {
  rpc CreateScheduler(CreateSchedulerRequest)
      returns (CreateSchedulerResponse) {}
  rpc RemoveScheduler(RemoveSchedulerRequest)
      returns (RemoveSchedulerResponse) {}
  rpc SetSchedulerAttribute(SetSchedulerAttributeRequest)
      returns (SetSchedulerAttributeResponse) {}
  rpc GetSchedulerAttribute(GetSchedulerAttributeRequest)
      returns (GetSchedulerAttributeResponse) {}
}
