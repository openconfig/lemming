// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package typeinfo

import (
	"github.com/openconfig/lemming/dataplane/apigen/docparser"
	"github.com/openconfig/lemming/dataplane/apigen/saiast"
)

var (
	SAITypeToProto = map[string]SAITypeInfo{
		"bool": {
			ProtoType: "bool",
		},
		"char": {
			ProtoType: "bytes",
		},
		"sai_uint8_t": {
			ProtoType: "uint32",
		},
		"sai_int8_t": {
			ProtoType: "int32",
		},
		"sai_uint16_t": {
			ProtoType: "uint32",
		},
		"sai_int16_t": {
			ProtoType: "int32",
		},
		"sai_uint32_t": {
			ProtoType: "uint32",
		},
		"sai_int32_t": {
			ProtoType: "uint32",
		},
		"sai_uint64_t": {
			ProtoType: "uint64",
		},
		"sai_int64_t": {
			ProtoType: "int64",
		},
		"sai_mac_t": {
			ProtoType: "bytes",
		},
		"sai_json_t": {
			ProtoType: "bytes",
		},
		"sai_ip4_t": {
			ProtoType: "bytes",
		},
		"sai_ip6_t": {
			ProtoType: "bytes",
		},
		"sai_s32_list_t": {
			Repeated:  true,
			ProtoType: "int32",
		},
		"sai_object_id_t": {
			ProtoType: "uint64",
		},
		"map_sai_object_id_t": {
			ProtoType: "map<uint64, uint64>",
			Required:  true,
		},
		"sai_object_list_t": {
			Repeated:  true,
			ProtoType: "uint64",
		},
		"sai_encrypt_key_t": {
			ProtoType: "bytes",
		},
		"sai_auth_key_t": {
			ProtoType: "bytes",
		},
		"sai_macsec_sak_t": {
			ProtoType: "bytes",
		},
		"sai_macsec_auth_key_t": {
			ProtoType: "bytes",
		},
		"sai_macsec_salt_t": {
			ProtoType: "bytes",
		},
		"sai_u32_list_t": {
			Repeated:  true,
			ProtoType: "uint32",
		},
		"sai_segment_list_t": {
			Repeated:  true,
			ProtoType: "bytes",
		},
		"sai_s8_list_t": {
			Repeated:  true,
			ProtoType: "int32",
		},
		"sai_u8_list_t": {
			Repeated:  true,
			ProtoType: "uint32",
		},
		"sai_port_err_status_list_t": {
			Repeated:  true,
			ProtoType: "PortErrStatus",
		},
		"sai_vlan_list_t": {
			Repeated:  true,
			ProtoType: "uint32",
		},
		"sai_timespec_t": {
			ProtoType: "google.protobuf.Timestamp",
		},
		// The non-scalar types could be autogenerated, but that aren't that many so create messages by hand.
		"sai_u32_range_t": {
			ProtoType: "Uint32Range",
			MessageDef: `message Uint32Range {
	uint64 min = 1;
	uint64 max = 2;
}`,
		},
		"sai_ip_address_t": {
			ProtoType: "bytes",
		},
		"sai_latch_status_t": {
			ProtoType: "LatchStatus",
			MessageDef: `message LatchStatus {
	bool current_status = 1;
	bool changed = 2;
}`,
		},
		"sai_port_lane_latch_status_list_t": {
			Repeated:  true,
			ProtoType: "PortLaneLatchStatus",
			MessageDef: `message PortLaneLatchStatus {
	uint32 lane = 1;
	LatchStatus value = 2;
}`,
		},
		"sai_map_list_t": { // Wrap the map in a message because maps can't be repeated.
			Repeated:  true,
			ProtoType: "UintMap",
			MessageDef: `message UintMap {
	map<uint32, uint32> uintmap = 1;
}`,
		},
		"sai_tlv_list_t": {
			Repeated:  true,
			ProtoType: "TLVEntry",
			MessageDef: `message HMAC {
	uint32 key_id = 1;
	repeated uint32 hmac = 2;
}

message TLVEntry {
	oneof entry {
		bytes ingress_node = 1; 
		bytes egress_node = 2;
		bytes opaque_container = 3;
		HMAC hmac = 4;
	}
}`,
		},
		"sai_qos_map_list_t": {
			Repeated:  true,
			ProtoType: "QOSMap",
			MessageDef: `
message	QOSMapParams {
	uint32 tc = 1;
	uint32 dscp = 2;
	uint32 dot1p = 3;
	uint32 prio = 4;
	uint32 pg = 5;
	uint32 queue_index = 6;
	PacketColor color = 7;
	uint32 mpls_exp = 8;
	uint32 fc = 9;
}

message QOSMap {
	QOSMapParams key = 1;
	QOSMapParams value = 2;
}`,
		},
		"sai_system_port_config_t": {
			ProtoType: "SystemPortConfig",
			MessageDef: `message SystemPortConfig {
	uint32 port_id = 1;
	uint32 attached_switch_id = 2;
	uint32 attached_core_index = 3;
	uint32 attached_core_port_index = 4;
	uint32 speed = 5;
	uint32 num_voq = 6;
}`,
		},
		"sai_system_port_config_list_t": {
			Repeated:  true,
			ProtoType: "SystemPortConfig",
		},
		"sai_ip_address_list_t": {
			Repeated:  true,
			ProtoType: "bytes",
		},
		"sai_port_eye_values_list_t": {
			Repeated:  true,
			ProtoType: "PortEyeValues",
			MessageDef: `message PortEyeValues {
	uint32 lane = 1;
	int32 left = 2;
	int32 right = 3;
	int32 up = 4;
	int32 down = 5;
}`,
		},
		"sai_prbs_rx_state_t": {
			ProtoType: "PRBS_RXState",
			MessageDef: `message PRBS_RXState {
	PortPrbsRxStatus rx_status = 1;
	uint32 error_count = 2;
}`,
		},
		"sai_fabric_port_reachability_t": {
			ProtoType: "FabricPortReachability",
			MessageDef: `message FabricPortReachability {
	uint32 switch_id = 1;
	bool reachable = 2;
}`,
		},
		"sai_acl_resource_list_t": {
			Repeated:  true,
			ProtoType: "ACLResource",
			MessageDef: `message ACLResource {
	AclStage stage = 1;
	AclBindPointType bind_point = 2;
	uint32 avail_num = 3;
}`,
		},
		"sai_acl_capability_t": {
			ProtoType: "ACLCapability",
			MessageDef: `message ACLCapability {
	bool is_action_list_mandatory = 1;
	repeated AclActionType action_list = 2;
}`,
		},
		"sai_acl_field_data_t": {
			ProtoType: "AclFieldData",
			MessageDef: `message AclFieldData {
	bool enable = 1;
	oneof mask {
		uint64 mask_uint = 2;
		int64 mask_int = 3;
		bytes mask_mac = 4;
		bytes mask_ip = 5;
		Uint64List mask_list = 6;
		bytes mask_u8list = 15;
	};
	oneof data {
		bool data_bool = 7;
		uint64 data_uint = 8;
		int64 data_int = 9;
		bytes data_mac = 10;
		bytes data_ip = 11;
		Uint64List data_list = 12;
		AclIpType data_ip_type = 13;
		uint64 data_oid = 14;
		bytes data_u8list = 16;
	};
}

message Uint64List {
	repeated uint64 list = 1;
}`,
		},
		"sai_acl_action_data_t": {
			ProtoType: "AclActionData",
			MessageDef: `message AclActionData {
	bool enable = 1;
	oneof parameter {
		uint64 uint = 2;
		uint64 int = 3;
		bytes mac = 4;
		bytes ip = 5;
		uint64 oid = 6;
		Uint64List objlist = 7;
		bytes ipaddr = 8;
		PacketAction packet_action = 9;
	};
}`,
		},
		"sai_fdb_entry_t": {
			ProtoType: "FdbEntry",
			MessageDef: `message FdbEntry {
	uint64 switch_id = 1;
	bytes mac_address = 2;
	uint64 bv_id = 3;
}`,
		},
		"sai_ipmc_entry_t": {
			ProtoType: "IpmcEntry",
			MessageDef: `message IpmcEntry {
	uint64 switch_id = 1;
	uint64 vr_id = 2;
	IpmcEntryType type = 3;
	bytes destination = 4;
	bytes source = 5;
}`,
		},
		"sai_l2mc_entry_t": {
			ProtoType: "L2mcEntry",
			MessageDef: `message L2mcEntry {
	uint64 switch_id = 1;
	uint64 bv_id = 2;
	L2mcEntryType type = 3;
	bytes destination = 4;
	bytes source = 5;
}`,
		},
		"sai_mcast_fdb_entry_t": {
			ProtoType: "McastFdbEntry",
			MessageDef: `message McastFdbEntry {
	uint64 switch_id = 1;
	bytes mac_address = 2;
	uint64 bv_id = 3;
}`,
		},
		"sai_inseg_entry_t": {
			ProtoType: "InsegEntry",
			MessageDef: `message InsegEntry {
	uint64 switch_id = 1;
	uint32 label = 2;
}`,
		},
		"sai_nat_entry_data_t": {
			ProtoType: "NatEntryData",
			MessageDef: `message NatEntryData{
	oneof key {
		bytes key_src_ip = 2;
		bytes key_dst_ip = 3;
		uint32 key_proto = 4;
		uint32 key_l4_src_port = 5;
		uint32 key_l4_dst_port = 6;
	};
	oneof mask {
		bytes mask_src_ip = 7;
		bytes mask_dst_ip = 8;
		uint32 mask_proto = 9;
		uint32 mask_l4_src_port = 10;
		uint32 mask_l4_dst_port = 11;
	};
}`,
		},
		"sai_nat_entry_t": {
			ProtoType: "NatEntry",
			MessageDef: `message NatEntry {
	uint64 switch_id = 1;
	uint64 vr_id = 2;
	NatType nat_type = 3;
	NatEntryData data = 4;
}`,
		},
		"sai_neighbor_entry_t": {
			ProtoType: "NeighborEntry",
			MessageDef: `message NeighborEntry {
	uint64 switch_id = 1;
	uint64 rif_id = 2;
	bytes ip_address = 3;
}`,
		},
		"sai_ip_prefix_t": {
			ProtoType: "IpPrefix",
			MessageDef: `message IpPrefix {
	bytes addr = 1;
	bytes mask = 2;
}`,
		},
		"sai_route_entry_t": {
			ProtoType: "RouteEntry",
			MessageDef: `message RouteEntry {
	uint64 switch_id = 1;
	uint64 vr_id = 2;
	IpPrefix destination = 3;
}`,
		},
		"sai_my_sid_entry_t": {
			ProtoType: "MySidEntry",
			MessageDef: `message MySidEntry {
	uint64 switch_id = 1;
	uint64 vr_id = 2;
	uint32 locator_block_len = 3;
	uint32 locator_node_len = 4;
	uint32 function_len = 5;
	uint32 args_len = 6;
	bytes sid = 7;
}`,
		},
		"sai_fdb_event_notification_data_t": {
			ProtoType: "FdbEventNotificationData",
			MessageDef: `
message FdbEventNotificationData {
    FdbEvent event_type = 1;
	FdbEntry fdb_entry = 2;
	repeated FdbEntryAttribute attrs = 3;
}`,
		},
		"sai_port_oper_status_notification_t": {
			ProtoType: "PortOperStatusNotification",
			MessageDef: `message PortOperStatusNotification {
	uint64 port_id = 1;
	PortOperStatus port_state = 2;
}`,
		},
		"sai_queue_deadlock_notification_data_t": {
			ProtoType: "QueueDeadlockNotificationData",
			MessageDef: `message QueueDeadlockNotificationData {
	uint64 queue_id = 1;
	QueuePfcDeadlockEventType event= 2;
	bool app_managed_recovery = 3;
}`,
		},
		"sai_bfd_session_state_notification_t": {
			ProtoType: "BfdSessionStateChangeNotificationData",
			MessageDef: `message BfdSessionStateChangeNotificationData {
	uint64 bfd_session_id = 1;
	BfdSessionState session_state = 2;
}`,
		},
		"sai_ipsec_sa_status_notification_t": {
			ProtoType: "IpsecSaStatusNotificationData",
			MessageDef: `message IpsecSaStatusNotificationData {
    uint64 ipsec_sa_id = 1;
	IpsecSaOctetCountStatus ipsec_sa_octet_count_status = 2;
	bool ipsec_egress_sn_at_max_limit = 3;
}`,
		},
	}
	// The notification function types are implemented as streaming RPCs.
	funcToStreamResp = map[string]*GenType{
		"sai_switch_state_change_notification_fn": {
			Name: "SwitchStateChangeNotificationResponse",
			Fields: []protoTmplField{{
				Index:     1,
				ProtoType: "uint64",
				Name:      "switch_id",
			}, {
				Index:     2,
				ProtoType: "SwitchOperStatus",
				Name:      "switch_oper_status",
			}},
		},
		"sai_switch_shutdown_request_notification_fn": {
			Name: "SwitchShutdownRequestNotificationResponse",
			Fields: []protoTmplField{{
				Index:     1,
				ProtoType: "uint64",
				Name:      "switch_id",
			}},
		},
		"sai_fdb_event_notification_fn": {
			Name: "FdbEventNotificationResponse",
			Fields: []protoTmplField{{
				Index:     1,
				ProtoType: "repeated FdbEventNotificationData",
				Name:      "data",
			}},
		},
		"sai_port_state_change_notification_fn": {
			Name: "PortStateChangeNotificationResponse",
			Fields: []protoTmplField{{
				Index:     1,
				ProtoType: "repeated PortOperStatusNotification",
				Name:      "data",
			}},
		},
		"sai_packet_event_notification_fn": {
			Name: "PacketEventNotificationResponse",
			Fields: []protoTmplField{{
				Index:     1,
				ProtoType: "uint64",
				Name:      "switch_id",
			}, {
				Index:     2,
				ProtoType: "bytes",
				Name:      "buffer",
			}, {
				Index:     3,
				ProtoType: "repeated HostifPacketAttribute",
				Name:      "attrs",
			}},
		},
		"sai_queue_pfc_deadlock_notification_fn": {
			Name: "QueuePfcDeadlockNotificationResponse",
			Fields: []protoTmplField{{
				Index:     1,
				ProtoType: "repeated QueueDeadlockNotificationData",
				Name:      "data",
			}},
		},
		"sai_bfd_session_state_change_notification_fn": {
			Name: "BfdSessionStateChangeNotificationResponse",
			Fields: []protoTmplField{{
				Index:     1,
				ProtoType: "repeated BfdSessionStateChangeNotificationData",
				Name:      "data",
			}},
		},
		"sai_tam_event_notification_fn": {
			Name: "TamEventNotificationResponse",
			Fields: []protoTmplField{{
				Index:     1,
				ProtoType: "uint64",
				Name:      "tam_event_id",
			}, {
				Index:     2,
				ProtoType: "bytes",
				Name:      "buffer",
			}, {
				Index:     3,
				ProtoType: "repeated TamEventActionAttribute",
				Name:      "attrs",
			}},
		},
		"sai_ipsec_sa_status_change_notification_fn": {
			Name: "IpsecSaStatusNotificationDataResponse",
			Fields: []protoTmplField{{
				Index:     1,
				ProtoType: "repeated IpsecSaStatusNotificationData",
				Name:      "data",
			}},
		},
	}

	// saiTypeToProtoTypeCompound handles compound sai types (eg list of enums).
	// The map key contains the base type (eg list) and func accepts the subtype (eg an enum type)
	// and returns the full type string (eg repeated sample_enum).
	saiTypeToProtoTypeCompound = map[string]func(subType string, xmlInfo *docparser.SAIInfo) (string, bool){
		"sai_s32_list_t": func(subType string, xmlInfo *docparser.SAIInfo) (string, bool) {
			if _, ok := xmlInfo.Enums[subType]; !ok {
				return "", false
			}
			return "repeated " + saiast.TrimSAIName(subType, true, false), true
		},
		"sai_acl_field_data_t": func(_ string, _ *docparser.SAIInfo) (string, bool) {
			return "AclFieldData", false
		},
		"map_sai_acl_field_data_t": func(_ string, _ *docparser.SAIInfo) (string, bool) {
			return "map<uint64, AclFieldData>", true
		},
		"sai_acl_action_data_t": func(_ string, _ *docparser.SAIInfo) (string, bool) {
			return "AclActionData", false
		},
		"sai_pointer_t": func(_ string, _ *docparser.SAIInfo) (string, bool) { return "-", false }, // Noop, these are special cases.
	}

	typeToUnionAccessor = map[string]*unionAccessor{
		"sai_object_list_t": {
			accessor: "objlist",
			aType:    variableSizedArray,
		},
		"sai_s32_list_t": {
			accessor: "s32list",
			aType:    variableSizedArray,
		},
		"sai_u32_list_t": {
			accessor: "u32list",
			aType:    variableSizedArray,
		},
		"sai_u8_list_t": {
			accessor: "u8list",
			aType:    variableSizedArray,
		},
		"sai_s8_list_t": {
			accessor: "s8list",
			aType:    variableSizedArray,
		},
		"sai_mac_t": {
			accessor: "mac",
			aType:    fixedSizedArray,
		},
		"sai_ip4_t": {
			accessor:  "ip4",
			aType:     fixedSizedArray,
			pointerOf: true,
		},
		"sai_ip6_t": {
			accessor: "ip6",
			aType:    fixedSizedArray,
		},
		"sai_object_id_t": {
			accessor: "oid",
			aType:    scalar,
		},
		"sai_uint64_t": {
			accessor: "u64",
			aType:    scalar,
		},
		"sai_uint32_t": {
			accessor: "u32",
			aType:    scalar,
		},
		"sai_uint16_t": {
			accessor: "u16",
			aType:    scalar,
		},
		"sai_uint8_t": {
			accessor: "u8",
			aType:    scalar,
		},
		"sai_int8_t": {
			accessor: "s8",
			aType:    scalar,
		},
		"bool": {
			accessor: "booldata",
			aType:    scalar,
		},
		"char": {
			accessor: "chardata",
			aType:    scalar,
		},
		"sai_ip_address_t": {
			accessor:        "ipaddr",
			convertFromFunc: "convert_from_ip_address",
			convertToFunc:   "convert_to_ip_address",
			aType:           convertFunc,
		},
		"sai_route_entry_t": {
			convertFromFunc: "convert_from_route_entry",
			convertToFunc:   "convert_to_route_entry",
			aType:           convertFunc,
		},
		"sai_neighbor_entry_t": {
			convertFromFunc: "convert_from_neighbor_entry",
			convertToFunc:   "convert_to_neighbor_entry",
			aType:           convertFunc,
		},
		"sai_pointer_t sai_port_state_change_notification_fn": {
			aType:           callbackRPC,
			assignmentVar:   "port_state",
			convertFromFunc: "std::make_unique<PortStateReactor>",
		},
		"sai_acl_capability_t": {
			accessor:        "aclcapability",
			aType:           convertFunc,
			convertToCopy:   true,
			convertFromFunc: "convert_from_acl_capability",
			convertToFunc:   "convert_to_acl_capability",
		},
		"sai_acl_field_data_t sai_ip4_t": {
			accessor:        "ip4",
			convertFromFunc: "convert_from_acl_field_data_ip4",
			convertToFunc:   "convert_to_acl_field_data",
			protoAccessor:   "ip",
			aType:           acl,
		},
		"sai_acl_action_data_t sai_object_id_t": {
			accessor:        "oid",
			convertFromFunc: "convert_from_acl_action_data",
			convertToFunc:   "convert_to_acl_action_data",
			protoAccessor:   "oid",
			aType:           acl,
		},
		"sai_acl_action_data_t sai_packet_action_t": {
			accessor:        "s32",
			convertFromFunc: "convert_from_acl_action_data_action",
			convertToFunc:   "convert_to_acl_action_data_action",
			protoAccessor:   "packet_action",
			aType:           acl,
		},
		"sai_acl_field_data_t sai_acl_ip_type_t": {
			accessor:        "s32",
			convertFromFunc: "convert_from_acl_field_data_ip_type",
			convertToFunc:   "convert_to_acl_field_data_ip_type",
			protoAccessor:   "ip_type",
			aType:           acl,
		},
		"sai_acl_field_data_t sai_uint8_t": {
			accessor:        "u8",
			convertFromFunc: "convert_from_acl_field_data",
			convertToFunc:   "convert_to_acl_field_data_u8",
			protoAccessor:   "uint",
			aType:           acl,
		},
		"sai_acl_field_data_t sai_uint16_t": {
			accessor:        "u16",
			convertFromFunc: "convert_from_acl_field_data",
			convertToFunc:   "convert_to_acl_field_data_u16",
			protoAccessor:   "uint",
			aType:           acl,
		},
		"sai_acl_field_data_t sai_uint32_t": {
			accessor:        "u32",
			convertFromFunc: "convert_from_acl_field_data",
			convertToFunc:   "convert_to_acl_field_data_u32",
			protoAccessor:   "uint",
			aType:           acl,
		},
		"sai_acl_field_data_t sai_ip6_t": {
			accessor:        "ip6",
			convertFromFunc: "convert_from_acl_field_data_ip6",
			convertToFunc:   "convert_to_acl_field_data_ip6",
			protoAccessor:   "ip",
			aType:           acl,
		},
		"sai_acl_field_data_t sai_mac_t": {
			accessor:        "mac",
			convertFromFunc: "convert_from_acl_field_data_mac",
			convertToFunc:   "convert_to_acl_field_data_mac",
			protoAccessor:   "mac",
			aType:           acl,
		},
		"sai_acl_field_data_t sai_object_id_t": {
			accessor:        "oid",
			convertFromFunc: "convert_from_acl_field_data",
			convertToFunc:   "convert_to_acl_field_data",
			protoAccessor:   "oid",
			aType:           acl,
		},
		"sai_acl_field_data_t sai_u8_list_t": {
			accessor:        "u8list",
			convertFromFunc: "convert_from_acl_field_data",
			convertToFunc:   "convert_to_acl_field_data_u8",
			protoAccessor:   "sai_u8_list_t",
			aType:           acl,
		},
	}
)
