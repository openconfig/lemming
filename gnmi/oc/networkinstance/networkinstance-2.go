/*
Package networkinstance is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package networkinstance

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lower-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lower-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).LowerBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lower-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lower-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).LowerBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lower-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lower-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).LowerBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lower-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lower-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).LowerBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).UpperBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).UpperBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).UpperBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).UpperBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPathMapAny struct {
	*ygnmi.NodePath
}

// LocalId (leaf): A local identifier for the global label block allocation.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/*/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) LocalId() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalId (leaf): A local identifier for the global label block allocation.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/*/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) LocalId() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LowerBound (leaf): Lower bound of the global label block. The block is defined to include
// this label.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lower-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/*/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) LowerBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lower-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LowerBound (leaf): Lower bound of the global label block. The block is defined to include
// this label.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lower-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/*/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) LowerBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lower-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpperBound (leaf): Upper bound for the global label block. The block is defined to include
// this label.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/*/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) UpperBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "upper-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpperBound (leaf): Upper bound for the global label block. The block is defined to include
// this label.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/*/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) UpperBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "upper-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).ReservedLabelBlock
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:reserved-label-blocks"},
			PostRelPath: []string{"openconfig-network-instance:reserved-label-block"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).ReservedLabelBlock
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:reserved-label-blocks"},
			PostRelPath: []string{"openconfig-network-instance:reserved-label-block"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).ReservedLabelBlock
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:reserved-label-blocks"},
			PostRelPath: []string{"openconfig-network-instance:reserved-label-block"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).ReservedLabelBlock
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:reserved-label-blocks"},
			PostRelPath: []string{"openconfig-network-instance:reserved-label-block"},
		},
	)
}

// NetworkInstance_Mpls_Interface_AdminGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/admin-group YANG schema element.
type NetworkInstance_Mpls_Interface_AdminGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_AdminGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/admin-group YANG schema element.
type NetworkInstance_Mpls_Interface_AdminGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/admin-group"
func (n *NetworkInstance_Mpls_Interface_AdminGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).AdminGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/admin-group"
func (n *NetworkInstance_Mpls_Interface_AdminGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).AdminGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/admin-group"
func (n *NetworkInstance_Mpls_Interface_AdminGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).AdminGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/admin-group"
func (n *NetworkInstance_Mpls_Interface_AdminGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).AdminGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_SrlgMembershipPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/srlg-membership YANG schema element.
type NetworkInstance_Mpls_Interface_SrlgMembershipPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_SrlgMembershipPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/srlg-membership YANG schema element.
type NetworkInstance_Mpls_Interface_SrlgMembershipPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlg-membership"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/srlg-membership"
func (n *NetworkInstance_Mpls_Interface_SrlgMembershipPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "srlg-membership"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).SrlgMembership
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlg-membership"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/srlg-membership"
func (n *NetworkInstance_Mpls_Interface_SrlgMembershipPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "srlg-membership"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).SrlgMembership
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/srlg-membership"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/srlg-membership"
func (n *NetworkInstance_Mpls_Interface_SrlgMembershipPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "srlg-membership"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).SrlgMembership
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/srlg-membership"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/srlg-membership"
func (n *NetworkInstance_Mpls_Interface_SrlgMembershipPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "srlg-membership"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).SrlgMembership
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_TeMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/te-metric YANG schema element.
type NetworkInstance_Mpls_Interface_TeMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_TeMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/te-metric YANG schema element.
type NetworkInstance_Mpls_Interface_TeMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/te-metric"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/te-metric"
func (n *NetworkInstance_Mpls_Interface_TeMetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "te-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).TeMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/te-metric"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/te-metric"
func (n *NetworkInstance_Mpls_Interface_TeMetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "te-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).TeMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/te-metric"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/te-metric"
func (n *NetworkInstance_Mpls_Interface_TeMetricPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "te-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).TeMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/te-metric"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/te-metric"
func (n *NetworkInstance_Mpls_Interface_TeMetricPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "te-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).TeMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// AdminGroup (leaf-list): list of admin groups (by name) on the interface
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/admin-group"
func (n *NetworkInstance_Mpls_InterfacePath) AdminGroup() *NetworkInstance_Mpls_Interface_AdminGroupPath {
	ps := &NetworkInstance_Mpls_Interface_AdminGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminGroup (leaf-list): list of admin groups (by name) on the interface
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/admin-group"
func (n *NetworkInstance_Mpls_InterfacePathAny) AdminGroup() *NetworkInstance_Mpls_Interface_AdminGroupPathAny {
	ps := &NetworkInstance_Mpls_Interface_AdminGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IgpFloodingBandwidth (container): Interface bandwidth change percentages
// that trigger update events into the IGP traffic
// engineering database (TED)
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-flooding-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth"
func (n *NetworkInstance_Mpls_InterfacePath) IgpFloodingBandwidth() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-flooding-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IgpFloodingBandwidth (container): Interface bandwidth change percentages
// that trigger update events into the IGP traffic
// engineering database (TED)
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-flooding-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth"
func (n *NetworkInstance_Mpls_InterfacePathAny) IgpFloodingBandwidth() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-flooding-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceId (leaf): Id of the interface
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/interface-id"
func (n *NetworkInstance_Mpls_InterfacePath) InterfaceId() *NetworkInstance_Mpls_Interface_InterfaceIdPath {
	ps := &NetworkInstance_Mpls_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Id of the interface
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/interface-id"
func (n *NetworkInstance_Mpls_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_Interface_InterfaceIdPathAny {
	ps := &NetworkInstance_Mpls_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_Interface_InterfaceRefPath {
	ps := &NetworkInstance_Mpls_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_Mpls_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrlgMembership (leaf-list): list of references to named shared risk link groups that the
// interface belongs to.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/srlg-membership"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/srlg-membership"
func (n *NetworkInstance_Mpls_InterfacePath) SrlgMembership() *NetworkInstance_Mpls_Interface_SrlgMembershipPath {
	ps := &NetworkInstance_Mpls_Interface_SrlgMembershipPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "srlg-membership"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrlgMembership (leaf-list): list of references to named shared risk link groups that the
// interface belongs to.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/srlg-membership"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/srlg-membership"
func (n *NetworkInstance_Mpls_InterfacePathAny) SrlgMembership() *NetworkInstance_Mpls_Interface_SrlgMembershipPathAny {
	ps := &NetworkInstance_Mpls_Interface_SrlgMembershipPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "srlg-membership"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TeMetric (leaf): TE specific metric for the link
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/te-metric"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/te-metric"
func (n *NetworkInstance_Mpls_InterfacePath) TeMetric() *NetworkInstance_Mpls_Interface_TeMetricPath {
	ps := &NetworkInstance_Mpls_Interface_TeMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "te-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TeMetric (leaf): TE specific metric for the link
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/te-metric"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/te-metric"
func (n *NetworkInstance_Mpls_InterfacePathAny) TeMetric() *NetworkInstance_Mpls_Interface_TeMetricPathAny {
	ps := &NetworkInstance_Mpls_Interface_TeMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "te-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:te-interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:te-interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:te-interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:te-interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/delta-percentage YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/delta-percentage YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/delta-percentage"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "delta-percentage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DeltaPercentage
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/delta-percentage"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "delta-percentage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DeltaPercentage
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/delta-percentage"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "delta-percentage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DeltaPercentage
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/delta-percentage"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "delta-percentage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DeltaPercentage
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-specification YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-specification YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/threshold-specification"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath) State() ygnmi.SingletonQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification] {
	return ygnmi.NewSingletonQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold-specification"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdSpecification, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdSpecification
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/threshold-specification"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny) State() ygnmi.WildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification] {
	return ygnmi.NewWildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold-specification"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdSpecification, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdSpecification
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/threshold-specification"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath) Config() ygnmi.ConfigQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification] {
	return ygnmi.NewConfigQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "threshold-specification"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdSpecification, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdSpecification
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/threshold-specification"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny) Config() ygnmi.WildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification] {
	return ygnmi.NewWildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "threshold-specification"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdSpecification, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdSpecification
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-type YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-type YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/threshold-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath) State() ygnmi.SingletonQuery[oc.E_IgpFloodingBandwidth_ThresholdType] {
	return ygnmi.NewSingletonQuery[oc.E_IgpFloodingBandwidth_ThresholdType](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/threshold-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny) State() ygnmi.WildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdType] {
	return ygnmi.NewWildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdType](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/threshold-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath) Config() ygnmi.ConfigQuery[oc.E_IgpFloodingBandwidth_ThresholdType] {
	return ygnmi.NewConfigQuery[oc.E_IgpFloodingBandwidth_ThresholdType](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "threshold-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/threshold-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny) Config() ygnmi.WildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdType] {
	return ygnmi.NewWildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdType](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "threshold-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpDownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpDownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/up-down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "up-down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpDownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/up-down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "up-down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpDownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/up-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "up-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/up-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "up-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny struct {
	*ygnmi.NodePath
}

// DeltaPercentage (leaf): The percentage of the maximum-reservable-bandwidth
// considered as the delta that results in an IGP update
// being flooded
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/delta-percentage"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) DeltaPercentage() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "delta-percentage"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DeltaPercentage (leaf): The percentage of the maximum-reservable-bandwidth
// considered as the delta that results in an IGP update
// being flooded
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/delta-percentage"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) DeltaPercentage() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "delta-percentage"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is decreasing.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) DownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "down-thresholds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is decreasing.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) DownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "down-thresholds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ThresholdSpecification (leaf): This value specifies whether a single set of threshold
// values should be used for both increasing and decreasing
// bandwidth when determining whether to trigger updated
// bandwidth values to be flooded in the IGP TE extensions.
// MIRRORED-UP-DOWN indicates that a single value (or set of
// values) should be used for both increasing and decreasing
// values, where SEPARATE-UP-DOWN specifies that the increasing
// and decreasing values will be separately specified
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/threshold-specification"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) ThresholdSpecification() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "threshold-specification"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ThresholdSpecification (leaf): This value specifies whether a single set of threshold
// values should be used for both increasing and decreasing
// bandwidth when determining whether to trigger updated
// bandwidth values to be flooded in the IGP TE extensions.
// MIRRORED-UP-DOWN indicates that a single value (or set of
// values) should be used for both increasing and decreasing
// values, where SEPARATE-UP-DOWN specifies that the increasing
// and decreasing values will be separately specified
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/threshold-specification"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) ThresholdSpecification() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "threshold-specification"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ThresholdType (leaf): The type of threshold that should be used to specify the
// values at which bandwidth is flooded. DELTA indicates that
// the local system should flood IGP updates when a change in
// reserved bandwidth >= the specified delta occurs on the
// interface. Where THRESHOLD_CROSSED is specified, the local
// system should trigger an update (and hence flood) the
// reserved bandwidth when the reserved bandwidth changes such
// that it crosses, or becomes equal to one of the threshold
// values
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/threshold-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) ThresholdType() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "threshold-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ThresholdType (leaf): The type of threshold that should be used to specify the
// values at which bandwidth is flooded. DELTA indicates that
// the local system should flood IGP updates when a change in
// reserved bandwidth >= the specified delta occurs on the
// interface. Where THRESHOLD_CROSSED is specified, the local
// system should trigger an update (and hence flood) the
// reserved bandwidth when the reserved bandwidth changes such
// that it crosses, or becomes equal to one of the threshold
// values
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/threshold-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) ThresholdType() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "threshold-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpDownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth of the interface) at which bandwidth
// updates are flooded - used both when the bandwidth is
// increasing and decreasing
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/up-down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) UpDownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "up-down-thresholds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpDownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth of the interface) at which bandwidth
// updates are flooded - used both when the bandwidth is
// increasing and decreasing
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/up-down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) UpDownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "up-down-thresholds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is increasing.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/up-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) UpThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "up-thresholds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is increasing.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/up-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) UpThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "up-thresholds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_LspsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps YANG schema element.
type NetworkInstance_Mpls_LspsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_LspsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps YANG schema element.
type NetworkInstance_Mpls_LspsPathAny struct {
	*ygnmi.NodePath
}

// ConstrainedPath (container): traffic-engineered LSPs supporting different
// path computation and signaling methods
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "constrained-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path"
func (n *NetworkInstance_Mpls_LspsPath) ConstrainedPath() *NetworkInstance_Mpls_Lsps_ConstrainedPathPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"constrained-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConstrainedPath (container): traffic-engineered LSPs supporting different
// path computation and signaling methods
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "constrained-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path"
func (n *NetworkInstance_Mpls_LspsPathAny) ConstrainedPath() *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"constrained-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StaticLspAny (list): list of defined static LSPs
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-lsps/static-lsp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
func (n *NetworkInstance_Mpls_LspsPath) StaticLspAny() *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// StaticLspAny (list): list of defined static LSPs
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-lsps/static-lsp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
func (n *NetworkInstance_Mpls_LspsPathAny) StaticLspAny() *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// StaticLsp (list): list of defined static LSPs
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-lsps/static-lsp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
//
//	Name: string
func (n *NetworkInstance_Mpls_LspsPath) StaticLsp(Name string) *NetworkInstance_Mpls_Lsps_StaticLspPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// StaticLsp (list): list of defined static LSPs
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-lsps/static-lsp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
//
//	Name: string
func (n *NetworkInstance_Mpls_LspsPathAny) StaticLsp(Name string) *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// StaticLspMap (list): list of defined static LSPs
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-lsps/static-lsp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
func (n *NetworkInstance_Mpls_LspsPath) StaticLspMap() *NetworkInstance_Mpls_Lsps_StaticLspPathMap {
	ps := &NetworkInstance_Mpls_Lsps_StaticLspPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-lsps"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StaticLspMap (list): list of defined static LSPs
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-lsps/static-lsp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
func (n *NetworkInstance_Mpls_LspsPathAny) StaticLspMap() *NetworkInstance_Mpls_Lsps_StaticLspPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLspPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-lsps"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UnconstrainedPath (container): LSPs that use the IGP-determined path, i.e., non
// traffic-engineered, or non constrained-path
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unconstrained-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/unconstrained-path"
func (n *NetworkInstance_Mpls_LspsPath) UnconstrainedPath() *NetworkInstance_Mpls_Lsps_UnconstrainedPathPath {
	ps := &NetworkInstance_Mpls_Lsps_UnconstrainedPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unconstrained-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UnconstrainedPath (container): LSPs that use the IGP-determined path, i.e., non
// traffic-engineered, or non constrained-path
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unconstrained-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/unconstrained-path"
func (n *NetworkInstance_Mpls_LspsPathAny) UnconstrainedPath() *NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unconstrained-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_LspsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps](
		"NetworkInstance_Mpls_Lsps",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_LspsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps](
		"NetworkInstance_Mpls_Lsps",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_LspsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps](
		"NetworkInstance_Mpls_Lsps",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_LspsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps](
		"NetworkInstance_Mpls_Lsps",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPathPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny struct {
	*ygnmi.NodePath
}

// NamedExplicitPathAny (list): A list of explicit paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "named-explicit-paths/named-explicit-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) NamedExplicitPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// NamedExplicitPathAny (list): A list of explicit paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "named-explicit-paths/named-explicit-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) NamedExplicitPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// NamedExplicitPath (list): A list of explicit paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "named-explicit-paths/named-explicit-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) NamedExplicitPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// NamedExplicitPath (list): A list of explicit paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "named-explicit-paths/named-explicit-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) NamedExplicitPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// NamedExplicitPathMap (list): A list of explicit paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "named-explicit-paths/named-explicit-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) NamedExplicitPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"named-explicit-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NamedExplicitPathMap (list): A list of explicit paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "named-explicit-paths/named-explicit-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) NamedExplicitPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"named-explicit-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TunnelAny (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tunnels/tunnel"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) TunnelAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// TunnelAny (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tunnels/tunnel"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) TunnelAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Tunnel (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tunnels/tunnel"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) Tunnel(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Tunnel (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tunnels/tunnel"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) Tunnel(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// TunnelMap (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tunnels/tunnel"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) TunnelMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"tunnels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TunnelMap (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tunnels/tunnel"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) TunnelMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tunnels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-protection-required YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-protection-required YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-protection-required"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-protection-required"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidProtectionRequired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-protection-required"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-protection-required"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidProtectionRequired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-protection-required"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-protection-required"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidProtectionRequired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-protection-required"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-protection-required"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidProtectionRequired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-selection-mode YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-selection-mode YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-selection-mode"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath) State() ygnmi.SingletonQuery[oc.E_NamedExplicitPath_SidSelectionMode] {
	return ygnmi.NewSingletonQuery[oc.E_NamedExplicitPath_SidSelectionMode](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-selection-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NamedExplicitPath_SidSelectionMode, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidSelectionMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-selection-mode"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny) State() ygnmi.WildcardQuery[oc.E_NamedExplicitPath_SidSelectionMode] {
	return ygnmi.NewWildcardQuery[oc.E_NamedExplicitPath_SidSelectionMode](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-selection-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NamedExplicitPath_SidSelectionMode, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidSelectionMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-selection-mode"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath) Config() ygnmi.ConfigQuery[oc.E_NamedExplicitPath_SidSelectionMode] {
	return ygnmi.NewConfigQuery[oc.E_NamedExplicitPath_SidSelectionMode](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-selection-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NamedExplicitPath_SidSelectionMode, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidSelectionMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-selection-mode"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny) Config() ygnmi.WildcardQuery[oc.E_NamedExplicitPath_SidSelectionMode] {
	return ygnmi.NewWildcardQuery[oc.E_NamedExplicitPath_SidSelectionMode](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-selection-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NamedExplicitPath_SidSelectionMode, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidSelectionMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMapAny struct {
	*ygnmi.NodePath
}

// ExplicitRouteObjectAny (list): List of explicit route objects
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) ExplicitRouteObjectAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// ExplicitRouteObjectAny (list): List of explicit route objects
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) ExplicitRouteObjectAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// ExplicitRouteObject (list): List of explicit route objects
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
//
//	Index: uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) ExplicitRouteObject(Index uint8) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// ExplicitRouteObject (list): List of explicit route objects
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
//
//	Index: uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) ExplicitRouteObject(Index uint8) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// ExplicitRouteObjectMap (list): List of explicit route objects
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) ExplicitRouteObjectMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExplicitRouteObjectMap (list): List of explicit route objects
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) ExplicitRouteObjectMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): A string name that uniquely identifies an explicit
// path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): A string name that uniquely identifies an explicit
// path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidProtectionRequired (leaf): When this value is set to true, only SIDs that are
// protected are to be selected by the calculating method
// when the explicit path is instantiated by a SR-TE LSP.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-protection-required"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/*/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) SidProtectionRequired() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-protection-required"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidProtectionRequired (leaf): When this value is set to true, only SIDs that are
// protected are to be selected by the calculating method
// when the explicit path is instantiated by a SR-TE LSP.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-protection-required"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/*/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) SidProtectionRequired() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-protection-required"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidSelectionMode (leaf): The restrictions placed on the SIDs to be selected by the
// calculation method for the explicit path when it is
// instantiated for a SR-TE LSP
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-selection-mode"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/*/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) SidSelectionMode() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-selection-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidSelectionMode (leaf): The restrictions placed on the SIDs to be selected by the
// calculation method for the explicit path when it is
// instantiated for a SR-TE LSP
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-selection-mode"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/*/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) SidSelectionMode() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-selection-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).NamedExplicitPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:named-explicit-paths"},
			PostRelPath: []string{"openconfig-network-instance:named-explicit-path"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).NamedExplicitPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:named-explicit-paths"},
			PostRelPath: []string{"openconfig-network-instance:named-explicit-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).NamedExplicitPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:named-explicit-paths"},
			PostRelPath: []string{"openconfig-network-instance:named-explicit-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).NamedExplicitPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:named-explicit-paths"},
			PostRelPath: []string{"openconfig-network-instance:named-explicit-path"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/address YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/address YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/hop-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/hop-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hop-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath) State() ygnmi.SingletonQuery[oc.E_Mpls_MplsHopType] {
	return ygnmi.NewSingletonQuery[oc.E_Mpls_MplsHopType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsHopType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).HopType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hop-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny) State() ygnmi.WildcardQuery[oc.E_Mpls_MplsHopType] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_MplsHopType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsHopType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).HopType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hop-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath) Config() ygnmi.ConfigQuery[oc.E_Mpls_MplsHopType] {
	return ygnmi.NewConfigQuery[oc.E_Mpls_MplsHopType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsHopType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).HopType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hop-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Mpls_MplsHopType] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_MplsHopType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsHopType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).HopType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): router hop for the LSP path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/*/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) Address() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): router hop for the LSP path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/*/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) Address() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopType (leaf): strict or loose hop
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hop-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/*/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) HopType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopType (leaf): strict or loose hop
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hop-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/*/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) HopType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of this explicit route object to express
// the order of hops in the path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/*/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) Index() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of this explicit route object to express
// the order of hops in the path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/*/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) Index() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).ExplicitRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:explicit-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:explicit-route-object"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).ExplicitRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:explicit-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:explicit-route-object"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).ExplicitRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:explicit-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:explicit-route-object"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).ExplicitRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:explicit-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:explicit-route-object"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/admin-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/admin-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_ADMIN_STATUS, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_ADMIN_STATUS, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/admin-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_ADMIN_STATUS, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/admin-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_ADMIN_STATUS, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auto-generated"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auto-generated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).AutoGenerated
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auto-generated"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auto-generated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).AutoGenerated
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/description YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/description YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath) State() ygnmi.SingletonQuery[int32] {
	return ygnmi.NewSingletonQuery[int32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Metric
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny) State() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Metric
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath) Config() ygnmi.ConfigQuery[int32] {
	return ygnmi.NewConfigQuery[int32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Metric
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny) Config() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Metric
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_LSP_METRIC_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_LSP_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_LSP_METRIC_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_LSP_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_LSP_METRIC_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_LSP_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_LSP_METRIC_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_LSP_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_LSP_OPER_STATUS] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_LSP_OPER_STATUS](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_OPER_STATUS, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_LSP_OPER_STATUS] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_LSP_OPER_STATUS](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_OPER_STATUS, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/protection-style-requested YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/protection-style-requested YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/role"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_LSP_ROLE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_LSP_ROLE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_ROLE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Role
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/role"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_LSP_ROLE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_LSP_ROLE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_ROLE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Role
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/shortcut-eligible YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/shortcut-eligible YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/shortcut-eligible"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "shortcut-eligible"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ShortcutEligible
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/shortcut-eligible"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "shortcut-eligible"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ShortcutEligible
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/shortcut-eligible"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "shortcut-eligible"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ShortcutEligible
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/shortcut-eligible"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "shortcut-eligible"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ShortcutEligible
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/signaling-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/signaling-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/signaling-protocol"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "signaling-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_SETUP_PROTOCOL, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SignalingProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/signaling-protocol"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "signaling-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_SETUP_PROTOCOL, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SignalingProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/signaling-protocol"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "signaling-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_SETUP_PROTOCOL, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SignalingProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/signaling-protocol"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "signaling-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_SETUP_PROTOCOL, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SignalingProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/soft-preemption YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/soft-preemption YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/soft-preemption"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "soft-preemption"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SoftPreemption
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/soft-preemption"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "soft-preemption"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SoftPreemption
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/soft-preemption"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "soft-preemption"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SoftPreemption
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/soft-preemption"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "soft-preemption"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SoftPreemption
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/source YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/source YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_TUNNEL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_TUNNEL_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_TUNNEL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_TUNNEL_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_TUNNEL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_TUNNEL_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_TUNNEL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_TUNNEL_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMapAny struct {
	*ygnmi.NodePath
}

// AdminStatus (leaf): TE tunnel administrative state.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/admin-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) AdminStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminStatus (leaf): TE tunnel administrative state.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/admin-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) AdminStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AutoGenerated (leaf): If the LSP was auto-generated by the system this leaf
// should be set to true. Examples of auto-generated LSPs
// are dynamically created backup LSPs to meet a FRR
// policy.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auto-generated"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) AutoGenerated() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "auto-generated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AutoGenerated (leaf): If the LSP was auto-generated by the system this leaf
// should be set to true. Examples of auto-generated LSPs
// are dynamically created backup LSPs to meet a FRR
// policy.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auto-generated"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) AutoGenerated() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "auto-generated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bandwidth (container): Bandwidth configuration for TE LSPs
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Bandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Bandwidth (container): Bandwidth configuration for TE LSPs
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Bandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): State data for MPLS label switched paths. This state
// data is specific to a single label switched path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Counters() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): State data for MPLS label switched paths. This state
// data is specific to a single label switched path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Counters() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Description (leaf): optional text description for the tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Description() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): optional text description for the tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Description() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The value of the metric that should be specified. The value
// supplied in this leaf is used in conjunction with the metric
// type to determine the value of the metric used by the system.
// Where the metric-type is set to LSP_METRIC_ABSOLUTE - the
// value of this leaf is used directly; where it is set to
// LSP_METRIC_RELATIVE, the relevant (positive or negative)
// offset is used to formulate the metric; where metric-type
// is LSP_METRIC_INHERITED, the value of this leaf is not
// utilised
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Metric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The value of the metric that should be specified. The value
// supplied in this leaf is used in conjunction with the metric
// type to determine the value of the metric used by the system.
// Where the metric-type is set to LSP_METRIC_ABSOLUTE - the
// value of this leaf is used directly; where it is set to
// LSP_METRIC_RELATIVE, the relevant (positive or negative)
// offset is used to formulate the metric; where metric-type
// is LSP_METRIC_INHERITED, the value of this leaf is not
// utilised
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Metric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricType (leaf): The type of metric specification that should be used to set
// the LSP(s) metric
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) MetricType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricType (leaf): The type of metric specification that should be used to set
// the LSP(s) metric
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) MetricType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The tunnel name
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The tunnel name
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): The operational status of the TE tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) OperStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): The operational status of the TE tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) OperStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// P2PTunnelAttributes (container): Parameters related to LSPs of type P2P
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-tunnel-attributes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) P2PTunnelAttributes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-tunnel-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// P2PTunnelAttributes (container): Parameters related to LSPs of type P2P
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-tunnel-attributes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) P2PTunnelAttributes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-tunnel-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Preference (leaf): Specifies a preference for this tunnel.
// A lower number signifies a better preference
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preference (leaf): Specifies a preference for this tunnel.
// A lower number signifies a better preference
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtectionStyleRequested (leaf): style of mpls frr protection desired: can be
// link, link-node or unprotected.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ProtectionStyleRequested() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protection-style-requested"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtectionStyleRequested (leaf): style of mpls frr protection desired: can be
// link, link-node or unprotected.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ProtectionStyleRequested() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protection-style-requested"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ReoptimizeTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ReoptimizeTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Role (leaf): The lsp role at the current node, whether it is headend,
// transit or tailend.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/role"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Role() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Role (leaf): The lsp role at the current node, whether it is headend,
// transit or tailend.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/role"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Role() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "setup-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "setup-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ShortcutEligible (leaf): Whether this LSP is considered to be eligible for us as a
// shortcut in the IGP. In the case that this leaf is set to
// true, the IGP SPF calculation uses the metric specified to
// determine whether traffic should be carried over this LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/shortcut-eligible"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ShortcutEligible() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "shortcut-eligible"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ShortcutEligible (leaf): Whether this LSP is considered to be eligible for us as a
// shortcut in the IGP. In the case that this leaf is set to
// true, the IGP SPF calculation uses the metric specified to
// determine whether traffic should be carried over this LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/shortcut-eligible"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ShortcutEligible() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "shortcut-eligible"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SignalingProtocol (leaf): Signaling protocol used to set up this tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/signaling-protocol"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SignalingProtocol() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "signaling-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SignalingProtocol (leaf): Signaling protocol used to set up this tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/signaling-protocol"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SignalingProtocol() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "signaling-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SoftPreemption (leaf): Enables RSVP soft-preemption on this LSP
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/soft-preemption"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SoftPreemption() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "soft-preemption"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SoftPreemption (leaf): Enables RSVP soft-preemption on this LSP
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/soft-preemption"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SoftPreemption() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "soft-preemption"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Source (leaf): RSVP-TE tunnel source address
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Source() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Source (leaf): RSVP-TE tunnel source address
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Source() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Tunnel type, p2p or p2mp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Tunnel type, p2p or p2mp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).Tunnel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tunnels"},
			PostRelPath: []string{"openconfig-network-instance:tunnel"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).Tunnel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tunnels"},
			PostRelPath: []string{"openconfig-network-instance:tunnel"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).Tunnel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tunnels"},
			PostRelPath: []string{"openconfig-network-instance:tunnel"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).Tunnel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tunnels"},
			PostRelPath: []string{"openconfig-network-instance:tunnel"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/set-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/set-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/set-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SetBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/set-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SetBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/set-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SetBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/set-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SetBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/signaled-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SignaledBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/signaled-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SignaledBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/specification-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/specification-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/specification-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath) State() ygnmi.SingletonQuery[oc.E_Mpls_TeBandwidthType] {
	return ygnmi.NewSingletonQuery[oc.E_Mpls_TeBandwidthType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "specification-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_TeBandwidthType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SpecificationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/specification-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny) State() ygnmi.WildcardQuery[oc.E_Mpls_TeBandwidthType] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_TeBandwidthType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "specification-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_TeBandwidthType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SpecificationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/specification-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath) Config() ygnmi.ConfigQuery[oc.E_Mpls_TeBandwidthType] {
	return ygnmi.NewConfigQuery[oc.E_Mpls_TeBandwidthType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "specification-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_TeBandwidthType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SpecificationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/specification-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Mpls_TeBandwidthType] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_TeBandwidthType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "specification-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_TeBandwidthType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SpecificationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny struct {
	*ygnmi.NodePath
}

// AutoBandwidth (container): Parameters related to auto-bandwidth
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "auto-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) AutoBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"auto-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AutoBandwidth (container): Parameters related to auto-bandwidth
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "auto-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) AutoBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"auto-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetBandwidth (leaf): set bandwidth explicitly, e.g., using
// offline calculation
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/set-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/*/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SetBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetBandwidth (leaf): set bandwidth explicitly, e.g., using
// offline calculation
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/set-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/*/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SetBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SignaledBandwidth (leaf): The currently signaled bandwidth of the LSP. In the case where
// the bandwidth is specified explicitly, then this will match the
// value of the set-bandwidth leaf; in cases where the bandwidth is
// dynamically computed by the system, the current value of the
// bandwidth should be reflected.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/signaled-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SignaledBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SignaledBandwidth (leaf): The currently signaled bandwidth of the LSP. In the case where
// the bandwidth is specified explicitly, then this will match the
// value of the set-bandwidth leaf; in cases where the bandwidth is
// dynamically computed by the system, the current value of the
// bandwidth should be reflected.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/signaled-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SignaledBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpecificationType (leaf): The method used for settign the bandwidth, either explicitly
// specified or configured
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/specification-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/*/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SpecificationType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "specification-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpecificationType (leaf): The method used for settign the bandwidth, either explicitly
// specified or configured
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/specification-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/*/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SpecificationType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "specification-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-interval YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-interval YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjust-interval"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjust-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjust-interval"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjust-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/adjust-interval"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "adjust-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/adjust-interval"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "adjust-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjust-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjust-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjust-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjust-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/adjust-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "adjust-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/adjust-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "adjust-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interval-high-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval-high-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).IntervalHighBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interval-high-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval-high-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).IntervalHighBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/max-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/max-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MaxBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MaxBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MaxBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MaxBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/min-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/min-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/min-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MinBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/min-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MinBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/min-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MinBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/min-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MinBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny struct {
	*ygnmi.NodePath
}

// AdjustInterval (leaf): time in seconds between adjustments to
// LSP bandwidth
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/adjust-interval"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) AdjustInterval() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "adjust-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjustInterval (leaf): time in seconds between adjustments to
// LSP bandwidth
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/adjust-interval"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) AdjustInterval() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "adjust-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjustThreshold (leaf): percentage difference between the LSP's
// specified bandwidth and its current bandwidth
// allocation -- if the difference is greater than the
// specified percentage, auto-bandwidth adjustment is
// triggered
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/adjust-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) AdjustThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "adjust-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjustThreshold (leaf): percentage difference between the LSP's
// specified bandwidth and its current bandwidth
// allocation -- if the difference is greater than the
// specified percentage, auto-bandwidth adjustment is
// triggered
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/adjust-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) AdjustThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "adjust-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): enables mpls auto-bandwidth on the
// lsp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): enables mpls auto-bandwidth on the
// lsp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IntervalHighBw (leaf): The maximum measured bandwidth during the current
// auto-bandwidth adjust interval expressed in kilobits
// per second.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interval-high-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) IntervalHighBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interval-high-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IntervalHighBw (leaf): The maximum measured bandwidth during the current
// auto-bandwidth adjust interval expressed in kilobits
// per second.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interval-high-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) IntervalHighBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interval-high-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxBw (leaf): set the maximum bandwidth in Kbps for an
// auto-bandwidth LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) MaxBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxBw (leaf): set the maximum bandwidth in Kbps for an
// auto-bandwidth LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) MaxBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinBw (leaf): set the minimum bandwidth in Kbps for an
// auto-bandwidth LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/min-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) MinBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinBw (leaf): set the minimum bandwidth in Kbps for an
// auto-bandwidth LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/min-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) MinBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Overflow (container): configuration of MPLS overflow bandwidth
// adjustement for the LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "overflow"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Overflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"overflow"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Overflow (container): configuration of MPLS overflow bandwidth
// adjustement for the LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "overflow"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Overflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"overflow"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Underflow (container): configuration of MPLS underflow bandwidth
// adjustement for the LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "underflow"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Underflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"underflow"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Underflow (container): configuration of MPLS underflow bandwidth
// adjustement for the LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "underflow"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Underflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"underflow"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/overflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/overflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/overflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "overflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).OverflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/overflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "overflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).OverflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/overflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "overflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).OverflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/overflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "overflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).OverflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): enables mpls lsp bandwidth overflow
// adjustment on the lsp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/*/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): enables mpls lsp bandwidth overflow
// adjustment on the lsp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/*/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OverflowThreshold (leaf): bandwidth percentage change to trigger
// an overflow event
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/overflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/*/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) OverflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "overflow-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OverflowThreshold (leaf): bandwidth percentage change to trigger
// an overflow event
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/overflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/*/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) OverflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "overflow-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TriggerEventCount (leaf): number of consecutive overflow sample
// events needed to trigger an overflow adjustment
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/*/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TriggerEventCount (leaf): number of consecutive overflow sample
// events needed to trigger an overflow adjustment
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/*/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/underflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/underflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/underflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "underflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).UnderflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/underflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "underflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).UnderflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/underflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "underflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).UnderflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/underflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "underflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).UnderflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): enables bandwidth underflow
// adjustment on the lsp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/*/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): enables bandwidth underflow
// adjustment on the lsp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/*/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TriggerEventCount (leaf): number of consecutive underflow sample
// events needed to trigger an underflow adjustment
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/*/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TriggerEventCount (leaf): number of consecutive underflow sample
// events needed to trigger an underflow adjustment
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/*/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnderflowThreshold (leaf): bandwidth percentage change to trigger
// and underflow event
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/underflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/*/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) UnderflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "underflow-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnderflowThreshold (leaf): bandwidth percentage change to trigger
// and underflow event
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/underflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/*/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) UnderflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "underflow-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bytes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).Bytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bytes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).Bytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "current-path-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"current-path-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).CurrentPathTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "current-path-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"current-path-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).CurrentPathTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-reoptimization-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"next-reoptimization-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).NextReoptimizationTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-reoptimization-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"next-reoptimization-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).NextReoptimizationTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "online-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"online-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).OnlineTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "online-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"online-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).OnlineTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).Packets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).Packets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"path-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).PathChanges
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"path-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).PathChanges
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).StateChanges
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).StateChanges
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny struct {
	*ygnmi.NodePath
}

// Bytes (leaf): Number of bytes that have been forwarded over the
// label switched path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bytes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) Bytes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bytes (leaf): Number of bytes that have been forwarded over the
// label switched path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bytes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) Bytes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPathTime (leaf): Indicates the time the LSP switched onto its
// current path. The value is reset upon a LSP path
// change.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "current-path-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) CurrentPathTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"current-path-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPathTime (leaf): Indicates the time the LSP switched onto its
// current path. The value is reset upon a LSP path
// change.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "current-path-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) CurrentPathTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"current-path-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextReoptimizationTime (leaf): Indicates the next scheduled time the LSP
// will be reoptimized.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-reoptimization-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) NextReoptimizationTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-reoptimization-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextReoptimizationTime (leaf): Indicates the next scheduled time the LSP
// will be reoptimized.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-reoptimization-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) NextReoptimizationTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-reoptimization-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OnlineTime (leaf): Indication of the time the label switched path
// transitioned to an Oper Up or in-service state.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "online-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) OnlineTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"online-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OnlineTime (leaf): Indication of the time the label switched path
// transitioned to an Oper Up or in-service state.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "online-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) OnlineTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"online-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Packets (leaf): Number of pacets that have been forwarded over the
// label switched path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) Packets() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Packets (leaf): Number of pacets that have been forwarded over the
// label switched path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) Packets() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathChanges (leaf): Number of path changes for the label switched path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) PathChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathChanges (leaf): Number of path changes for the label switched path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) PathChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StateChanges (leaf): Number of state changes for the label switched path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) StateChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StateChanges (leaf): Number of state changes for the label switched path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) StateChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/destination YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/destination YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/record-route-enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/record-route-enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/record-route-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "record-route-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).RecordRouteEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/record-route-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "record-route-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).RecordRouteEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/record-route-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "record-route-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).RecordRouteEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/record-route-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "record-route-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).RecordRouteEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny struct {
	*ygnmi.NodePath
}

// Destination (leaf): P2P tunnel destination address
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/*/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) Destination() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Destination (leaf): P2P tunnel destination address
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/*/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) Destination() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// P2PPrimaryPathAny (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-primary-path/p2p-primary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PPrimaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// P2PPrimaryPathAny (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-primary-path/p2p-primary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PPrimaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// P2PPrimaryPath (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-primary-path/p2p-primary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PPrimaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// P2PPrimaryPath (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-primary-path/p2p-primary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PPrimaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// P2PPrimaryPathMap (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-primary-path/p2p-primary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PPrimaryPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-primary-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// P2PPrimaryPathMap (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-primary-path/p2p-primary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PPrimaryPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-primary-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// P2PSecondaryPathAny (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-secondary-paths/p2p-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// P2PSecondaryPathAny (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-secondary-paths/p2p-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// P2PSecondaryPath (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-secondary-paths/p2p-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PSecondaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// P2PSecondaryPath (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-secondary-paths/p2p-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PSecondaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// P2PSecondaryPathMap (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-secondary-paths/p2p-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PSecondaryPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-secondary-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// P2PSecondaryPathMap (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-secondary-paths/p2p-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PSecondaryPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-secondary-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RecordRouteEnabled (leaf): Enables recording a path on an LSP using the record route object (RRO)
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/record-route-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/*/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) RecordRouteEnabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "record-route-enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RecordRouteEnabled (leaf): Enables recording a path on an LSP using the record route object (RRO)
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/record-route-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/*/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) RecordRouteEnabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "record-route-enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath) State() ygnmi.SingletonQuery[[]uint64] {
	return ygnmi.NewSingletonQuery[[]uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).AssociatedRsvpSessions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny) State() ygnmi.WildcardQuery[[]uint64] {
	return ygnmi.NewWildcardQuery[[]uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).AssociatedRsvpSessions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CspfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CspfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath) State() ygnmi.SingletonQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewSingletonQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny) State() ygnmi.WildcardQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath) Config() ygnmi.ConfigQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewConfigQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny) Config() ygnmi.WildcardQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath) State() ygnmi.SingletonQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewSingletonQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny) State() ygnmi.WildcardQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewWildcardQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath) Config() ygnmi.ConfigQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewConfigQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny) Config() ygnmi.WildcardQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewWildcardQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).SpfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).SpfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMapAny struct {
	*ygnmi.NodePath
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "admin-groups"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "admin-groups"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CandidateSecondaryPathAny (list): List of secondary paths which may be utilised when the
// current primary path is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-secondary-paths/candidate-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CandidateSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": "*"},
			n,
		),
	}
	return ps
}

// CandidateSecondaryPathAny (list): List of secondary paths which may be utilised when the
// current primary path is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-secondary-paths/candidate-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CandidateSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": "*"},
			n,
		),
	}
	return ps
}

// CandidateSecondaryPath (list): List of secondary paths which may be utilised when the
// current primary path is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-secondary-paths/candidate-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
//
//	SecondaryPath: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CandidateSecondaryPath(SecondaryPath string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": SecondaryPath},
			n,
		),
	}
	return ps
}

// CandidateSecondaryPath (list): List of secondary paths which may be utilised when the
// current primary path is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-secondary-paths/candidate-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
//
//	SecondaryPath: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CandidateSecondaryPath(SecondaryPath string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": SecondaryPath},
			n,
		),
	}
	return ps
}

// CandidateSecondaryPathMap (list): List of secondary paths which may be utilised when the
// current primary path is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-secondary-paths/candidate-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CandidateSecondaryPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-secondary-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CandidateSecondaryPathMap (list): List of secondary paths which may be utilised when the
// current primary path is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-secondary-paths/candidate-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CandidateSecondaryPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-secondary-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSPF computation
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSPF computation
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitPathName (leaf): reference to a defined path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitPathName (leaf): reference to a defined path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Path name
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Path name
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-control"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-control"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
//
//	Type: oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathMetricBoundConstraint(Type oc.E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
//
//	Type: oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathMetricBoundConstraint(Type oc.E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraintMap (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathMetricBoundConstraintMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraintMap (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathMetricBoundConstraintMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "retry-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "retry-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "setup-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "setup-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-cspf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-cspf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PPrimaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-primary-path"},
			PostRelPath: []string{"openconfig-network-instance:p2p-primary-path"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PPrimaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-primary-path"},
			PostRelPath: []string{"openconfig-network-instance:p2p-primary-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PPrimaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-primary-path"},
			PostRelPath: []string{"openconfig-network-instance:p2p-primary-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PPrimaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-primary-path"},
			PostRelPath: []string{"openconfig-network-instance:p2p-primary-path"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny struct {
	*ygnmi.NodePath
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/*/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "exclude-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/*/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "exclude-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/*/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-all-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/*/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-all-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/*/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-any-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/*/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-any-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).Priority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).Priority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).Priority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).Priority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secondary-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).SecondaryPath
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secondary-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).SecondaryPath
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secondary-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).SecondaryPath
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secondary-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).SecondaryPath
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMapAny struct {
	*ygnmi.NodePath
}

// Active (leaf): Indicates the current active path option that has
// been selected of the candidate secondary paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) Active() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): Indicates the current active path option that has
// been selected of the candidate secondary paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) Active() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): The priority of the specified secondary path option. Higher
// priority options are less preferable - such that a secondary
// path reference with a priority of 0 is the most preferred
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/*/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) Priority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): The priority of the specified secondary path option. Higher
// priority options are less preferable - such that a secondary
// path reference with a priority of 0 is the most preferred
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/*/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) Priority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecondaryPath (leaf): A reference to the secondary path that should be utilised
// when the containing primary path option is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/*/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) SecondaryPath() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secondary-path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecondaryPath (leaf): A reference to the secondary path that should be utilised
// when the containing primary path option is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/*/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) SecondaryPath() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secondary-path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CandidateSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:candidate-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:candidate-secondary-path"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CandidateSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:candidate-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:candidate-secondary-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CandidateSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:candidate-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:candidate-secondary-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CandidateSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:candidate-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:candidate-secondary-path"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMapAny struct {
	*ygnmi.NodePath
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMap) State() ygnmi.SingletonQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewSingletonQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMap) Config() ygnmi.ConfigQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewConfigQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath) State() ygnmi.SingletonQuery[[]uint64] {
	return ygnmi.NewSingletonQuery[[]uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).AssociatedRsvpSessions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny) State() ygnmi.WildcardQuery[[]uint64] {
	return ygnmi.NewWildcardQuery[[]uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).AssociatedRsvpSessions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).CspfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).CspfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath) State() ygnmi.SingletonQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewSingletonQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny) State() ygnmi.WildcardQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath) Config() ygnmi.ConfigQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewConfigQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny) Config() ygnmi.WildcardQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath) State() ygnmi.SingletonQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewSingletonQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny) State() ygnmi.WildcardQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewWildcardQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath) Config() ygnmi.ConfigQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewConfigQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny) Config() ygnmi.WildcardQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewWildcardQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).SpfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).SpfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMapAny struct {
	*ygnmi.NodePath
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "admin-groups"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "admin-groups"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSPF computation
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSPF computation
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitPathName (leaf): reference to a defined path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitPathName (leaf): reference to a defined path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Path name
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Path name
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-control"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-control"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
//
//	Type: oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathMetricBoundConstraint(Type oc.E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
//
//	Type: oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathMetricBoundConstraint(Type oc.E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraintMap (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathMetricBoundConstraintMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraintMap (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathMetricBoundConstraintMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "retry-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "retry-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "setup-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "setup-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-cspf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-cspf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:p2p-secondary-path"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:p2p-secondary-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:p2p-secondary-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:p2p-secondary-path"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny struct {
	*ygnmi.NodePath
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/*/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "exclude-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/*/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "exclude-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/*/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-all-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/*/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-all-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/*/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-any-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/*/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-any-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMapAny struct {
	*ygnmi.NodePath
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMap) State() ygnmi.SingletonQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewSingletonQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMap) Config() ygnmi.ConfigQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewConfigQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/config/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/config/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLspPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLspPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLspPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLspPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLspPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLspPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLspPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLspPathMapAny struct {
	*ygnmi.NodePath
}

// Egress (container): Static LSPs for which the router is an
//
//	 egress node
//		Defining module:      "openconfig-mpls-static"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "egress"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Egress() *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Egress (container): Static LSPs for which the router is an
//
//	 egress node
//		Defining module:      "openconfig-mpls-static"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "egress"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Egress() *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ingress (container): Static LSPs for which the router is an
//
//	 ingress node
//		Defining module:      "openconfig-mpls-static"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "ingress"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Ingress() *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ingress (container): Static LSPs for which the router is an
//
//	 ingress node
//		Defining module:      "openconfig-mpls-static"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "ingress"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Ingress() *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): name to identify the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/*/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Name() *NetworkInstance_Mpls_Lsps_StaticLsp_NamePath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): name to identify the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/*/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Name() *NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Transit (container): Static LSPs for which the router is an
//
//	 transit node
//		Defining module:      "openconfig-mpls-static"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "transit"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Transit() *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transit (container): Static LSPs for which the router is an
//
//	 transit node
//		Defining module:      "openconfig-mpls-static"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "transit"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Transit() *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps).StaticLsp
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-lsps"},
			PostRelPath: []string{"openconfig-network-instance:static-lsp"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps).StaticLsp
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-lsps"},
			PostRelPath: []string{"openconfig-network-instance:static-lsp"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps).StaticLsp
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-lsps"},
			PostRelPath: []string{"openconfig-network-instance:static-lsp"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps).StaticLsp
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-lsps"},
			PostRelPath: []string{"openconfig-network-instance:static-lsp"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/interface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/interface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_MetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_MetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_MetricPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_MetricPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny struct {
	*ygnmi.NodePath
}

// IncomingLabel (leaf): Label value on the incoming packet
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "incoming-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncomingLabel (leaf): Label value on the incoming packet
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "incoming-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) Interface() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_InterfacePath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) Interface() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspNextHopAny (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) LspNextHopAny() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops", "lsp-next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// LspNextHopAny (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) LspNextHopAny() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops", "lsp-next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// LspNextHop (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop"
//
//	Index: uint32
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) LspNextHop(Index uint32) *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops", "lsp-next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// LspNextHop (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop"
//
//	Index: uint32
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) LspNextHop(Index uint32) *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops", "lsp-next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// LspNextHopMap (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) LspNextHopMap() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathMap {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LspNextHopMap (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) LspNextHopMap() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Metric (leaf): Specifies metric value used for the MPLS route.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) Metric() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_MetricPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): Specifies metric value used for the MPLS route.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) Metric() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_MetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): Label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): Label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) Subinterface() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_SubinterfacePath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) Subinterface() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/index YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/index YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IndexPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/config/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IndexPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/config/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/interface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/interface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/config/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/config/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IpAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/ip-address YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IpAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IpAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/ip-address YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IpAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IpAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IpAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/config/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IpAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/config/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IpAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/state/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/config/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/config/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Index (leaf): An user-specified identifier utilised to uniquely reference
// the next-hop entry in the next-hop list. The value of this
// index has no semantic meaning other than for referencing
// the entry.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/*/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPath) Index() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IndexPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): An user-specified identifier utilised to uniquely reference
// the next-hop entry in the next-hop list. The value of this
// index has no semantic meaning other than for referencing
// the entry.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/*/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny) Index() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IndexPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/*/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPath) Interface() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_InterfacePath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/*/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny) Interface() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpAddress (leaf): Next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/*/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPath) IpAddress() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IpAddressPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IpAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpAddress (leaf): Next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/*/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny) IpAddress() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IpAddressPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_IpAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): Label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): Label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_PushLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/*/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPath) Subinterface() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_SubinterfacePath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/lsp-next-hops/lsp-next-hop/*/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny) Subinterface() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).LspNextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:lsp-next-hops"},
			PostRelPath: []string{"openconfig-network-instance:lsp-next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).LspNextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:lsp-next-hops"},
			PostRelPath: []string{"openconfig-network-instance:lsp-next-hop"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).LspNextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:lsp-next-hops"},
			PostRelPath: []string{"openconfig-network-instance:lsp-next-hop"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHopPathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_LspNextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).LspNextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:lsp-next-hops"},
			PostRelPath: []string{"openconfig-network-instance:lsp-next-hop"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/interface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/interface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_MetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_MetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_MetricPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_MetricPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny struct {
	*ygnmi.NodePath
}

// IncomingLabel (leaf): Label value on the incoming packet
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "incoming-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncomingLabel (leaf): Label value on the incoming packet
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "incoming-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) Interface() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_InterfacePath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) Interface() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspNextHopAny (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) LspNextHopAny() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops", "lsp-next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// LspNextHopAny (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) LspNextHopAny() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops", "lsp-next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// LspNextHop (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop"
//
//	Index: uint32
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) LspNextHop(Index uint32) *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops", "lsp-next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// LspNextHop (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop"
//
//	Index: uint32
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) LspNextHop(Index uint32) *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops", "lsp-next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// LspNextHopMap (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) LspNextHopMap() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathMap {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LspNextHopMap (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) LspNextHopMap() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Metric (leaf): Specifies metric value used for the MPLS route.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) Metric() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_MetricPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): Specifies metric value used for the MPLS route.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) Metric() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_MetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): Label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): Label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) Subinterface() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_SubinterfacePath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) Subinterface() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/index YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/index YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IndexPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/config/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IndexPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/config/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/interface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/interface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/config/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/config/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IpAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/ip-address YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IpAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IpAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/ip-address YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IpAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IpAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IpAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/config/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IpAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/config/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IpAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/state/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/config/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/config/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Index (leaf): An user-specified identifier utilised to uniquely reference
// the next-hop entry in the next-hop list. The value of this
// index has no semantic meaning other than for referencing
// the entry.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/*/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPath) Index() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IndexPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): An user-specified identifier utilised to uniquely reference
// the next-hop entry in the next-hop list. The value of this
// index has no semantic meaning other than for referencing
// the entry.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/*/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny) Index() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IndexPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/*/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPath) Interface() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_InterfacePath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/*/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny) Interface() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpAddress (leaf): Next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/*/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPath) IpAddress() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IpAddressPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IpAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpAddress (leaf): Next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/*/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny) IpAddress() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IpAddressPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_IpAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): Label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): Label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_PushLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/*/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPath) Subinterface() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_SubinterfacePath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/lsp-next-hops/lsp-next-hop/*/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny) Subinterface() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).LspNextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:lsp-next-hops"},
			PostRelPath: []string{"openconfig-network-instance:lsp-next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).LspNextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:lsp-next-hops"},
			PostRelPath: []string{"openconfig-network-instance:lsp-next-hop"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).LspNextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:lsp-next-hops"},
			PostRelPath: []string{"openconfig-network-instance:lsp-next-hop"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHopPathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_LspNextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).LspNextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:lsp-next-hops"},
			PostRelPath: []string{"openconfig-network-instance:lsp-next-hop"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/interface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/interface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_MetricPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_MetricPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_MetricPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_MetricPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).Metric
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny struct {
	*ygnmi.NodePath
}

// IncomingLabel (leaf): Label value on the incoming packet
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "incoming-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncomingLabel (leaf): Label value on the incoming packet
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "incoming-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) Interface() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_InterfacePath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) Interface() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspNextHopAny (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) LspNextHopAny() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops", "lsp-next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// LspNextHopAny (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) LspNextHopAny() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops", "lsp-next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// LspNextHop (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop"
//
//	Index: uint32
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) LspNextHop(Index uint32) *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHopPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops", "lsp-next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// LspNextHop (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop"
//
//	Index: uint32
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) LspNextHop(Index uint32) *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops", "lsp-next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// LspNextHopMap (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) LspNextHopMap() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHopPathMap {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LspNextHopMap (list): A list of next-hops to be utilised for the MPLS
// static route being specified.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsp-next-hops/lsp-next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) LspNextHopMap() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHopPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsp-next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Metric (leaf): Specifies metric value used for the MPLS route.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) Metric() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_MetricPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): Specifies metric value used for the MPLS route.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/metric"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) Metric() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_MetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): Label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): Label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) Subinterface() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_SubinterfacePath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) Subinterface() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/index YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/index YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IndexPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/config/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IndexPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/config/index"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).Index
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/interface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/interface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/config/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/config/interface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IpAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/ip-address YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IpAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IpAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/ip-address YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IpAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IpAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IpAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/config/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IpAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/config/ip-address"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_IpAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).IpAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/state/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/config/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/lsp-next-hops/lsp-next-hop/config/subinterface"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_LspNextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
