/*
Package networkinstance is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.11.1: (ygot: v0.29.19)
using the following YANG input files:
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft-network-instance.yang
  - public/release/models/aft/openconfig-aft-summary.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/extensions/openconfig-metadata.yang
  - public/release/models/gnsi/openconfig-gnsi-acctz.yang
  - public/release/models/gnsi/openconfig-gnsi-authz.yang
  - public/release/models/gnsi/openconfig-gnsi-certz.yang
  - public/release/models/gnsi/openconfig-gnsi-credentialz.yang
  - public/release/models/gnsi/openconfig-gnsi-pathz.yang
  - public/release/models/gnsi/openconfig-gnsi.yang
  - public/release/models/gribi/openconfig-gribi.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet-ext.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis-policy.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospf-policy.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/platform/openconfig-platform-common.yang
  - public/release/models/platform/openconfig-platform-controller-card.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-ext.yang
  - public/release/models/platform/openconfig-platform-fabric.yang
  - public/release/models/platform/openconfig-platform-fan.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-linecard.yang
  - public/release/models/platform/openconfig-platform-pipeline-counters.yang
  - public/release/models/platform/openconfig-platform-psu.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system-bootz.yang
  - public/release/models/system/openconfig-system-controlplane.yang
  - public/release/models/system/openconfig-system-utilization.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package networkinstance

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapIrPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-ir-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapIrPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapIrPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-ir-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapIrPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-ir-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-ir-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapIrPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-ir-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).BumDecapIrPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-ir-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-ir-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapIrPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-ir-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).BumDecapIrPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapMulticastPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-multicast-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapMulticastPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapMulticastPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-multicast-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapMulticastPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-multicast-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-multicast-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapMulticastPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).BumDecapMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-multicast-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-multicast-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapMulticastPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-multicast-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).BumDecapMulticastPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).BumDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).BumDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumEncapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-encap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumEncapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumEncapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-encap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumEncapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumEncapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-encap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).BumEncapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumEncapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bum-encap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).BumEncapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_DropDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/drop-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_DropDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_DropDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/drop-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_DropDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "drop-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/drop-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_DropDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"drop-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).DropDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "drop-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/drop-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_DropDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"drop-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).DropDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_ExceptDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/except-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_ExceptDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_ExceptDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/except-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_ExceptDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "except-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/except-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_ExceptDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"except-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).ExceptDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "except-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/except-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_ExceptDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"except-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).ExceptDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapBytesPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-decap-bytes YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapBytesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-decap-bytes YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-decap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-decap-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).TotalDecapBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-decap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-decap-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).TotalDecapBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).TotalDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).TotalDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapBytesPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-encap-bytes YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapBytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapBytesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-encap-bytes YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapBytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-encap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapBytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-encap-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).TotalEncapBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-encap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapBytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-encap-bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).TotalEncapBytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-encap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-encap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-encap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).TotalEncapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"total-encap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).TotalEncapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_UnicastDecapPktsPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/unicast-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_UnicastDecapPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_UnicastDecapPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/unicast-decap-pkts YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_UnicastDecapPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unicast-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/unicast-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_UnicastDecapPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unicast-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).UnicastDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unicast-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/unicast-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_UnicastDecapPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unicast-decap-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters).UnicastDecapPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny struct {
	*ygnmi.NodePath
}

// BumDecapIrPkts (leaf): The number of decapsulated BUM packets received via underlay ingress replication.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-ir-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-ir-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath) BumDecapIrPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapIrPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapIrPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-ir-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapIrPkts (leaf): The number of decapsulated BUM packets received via underlay ingress replication.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-ir-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-ir-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny) BumDecapIrPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapIrPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapIrPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-ir-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapMulticastPkts (leaf): The number of decapsulated BUM packets received via underlay multicast.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-multicast-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-multicast-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath) BumDecapMulticastPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapMulticastPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapMulticastPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapMulticastPkts (leaf): The number of decapsulated BUM packets received via underlay multicast.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-multicast-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-multicast-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny) BumDecapMulticastPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapMulticastPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapMulticastPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapPkts (leaf): The total number of decapsulated BUM packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath) BumDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumDecapPkts (leaf): The total number of decapsulated BUM packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny) BumDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumEncapPkts (leaf): The total number of encapsulated BUM packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath) BumEncapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumEncapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumEncapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-encap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BumEncapPkts (leaf): The total number of encapsulated BUM packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bum-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/bum-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny) BumEncapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumEncapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_BumEncapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bum-encap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DropDecapPkts (leaf): The total number of decapsulated packets that have been dropped locally.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "drop-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/drop-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath) DropDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_DropDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_DropDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"drop-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DropDecapPkts (leaf): The total number of decapsulated packets that have been dropped locally.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "drop-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/drop-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny) DropDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_DropDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_DropDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"drop-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceptDecapPkts (leaf): The total number of decapsulated packets that hit an exceptional condition.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "except-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/except-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath) ExceptDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_ExceptDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_ExceptDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"except-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExceptDecapPkts (leaf): The total number of decapsulated packets that hit an exceptional condition.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "except-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/except-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny) ExceptDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_ExceptDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_ExceptDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"except-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDecapBytes (leaf): The total number of decapsulated bytes.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-decap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath) TotalDecapBytes() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapBytesPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-decap-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDecapBytes (leaf): The total number of decapsulated bytes.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-decap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny) TotalDecapBytes() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapBytesPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-decap-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDecapPkts (leaf): The total number of decapsulated packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath) TotalDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalDecapPkts (leaf): The total number of decapsulated packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny) TotalDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEncapBytes (leaf): The total number of encapsulated bytes.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-encap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath) TotalEncapBytes() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapBytesPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapBytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-encap-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEncapBytes (leaf): The total number of encapsulated bytes.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-bytes"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-encap-bytes"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny) TotalEncapBytes() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapBytesPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapBytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-encap-bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEncapPkts (leaf): The total number of encapsulated packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath) TotalEncapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-encap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TotalEncapPkts (leaf): The total number of encapsulated packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "total-encap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/total-encap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny) TotalEncapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_TotalEncapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"total-encap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastDecapPkts (leaf): The total number of decapsulated unicast packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unicast-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/unicast-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath) UnicastDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_UnicastDecapPktsPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_UnicastDecapPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnicastDecapPkts (leaf): The total number of decapsulated unicast packets.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unicast-decap-pkts"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/ipv6/state/counters/unicast-decap-pkts"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny) UnicastDecapPkts() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_UnicastDecapPktsPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters_UnicastDecapPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unicast-decap-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_Ipv6_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_BridgeDomainPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/bridge-domain YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_BridgeDomainPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_BridgeDomainPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/bridge-domain YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_BridgeDomainPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_BridgeDomainPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bridge-domain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).BridgeDomain
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_BridgeDomainPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bridge-domain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).BridgeDomain
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/config/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_BridgeDomainPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bridge-domain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).BridgeDomain
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/config/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_BridgeDomainPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bridge-domain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).BridgeDomain
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_L3VrfNamePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/l3-vrf-name YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_L3VrfNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_L3VrfNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/l3-vrf-name YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_L3VrfNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_L3VrfNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).L3VrfName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_L3VrfNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).L3VrfName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/config/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_L3VrfNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "l3-vrf-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).L3VrfName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/config/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_L3VrfNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "l3-vrf-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).L3VrfName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/config/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/config/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniTypePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/vni-type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/vni-type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniTypePath) State() ygnmi.SingletonQuery[oc.E_EndpointVni_VniType] {
	return ygnmi.NewSingletonQuery[oc.E_EndpointVni_VniType](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_VniType, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).VniType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniTypePathAny) State() ygnmi.WildcardQuery[oc.E_EndpointVni_VniType] {
	return ygnmi.NewWildcardQuery[oc.E_EndpointVni_VniType](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_VniType, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).VniType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/config/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniTypePath) Config() ygnmi.ConfigQuery[oc.E_EndpointVni_VniType] {
	return ygnmi.NewConfigQuery[oc.E_EndpointVni_VniType](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vni-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_VniType, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).VniType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/config/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniTypePathAny) Config() ygnmi.WildcardQuery[oc.E_EndpointVni_VniType] {
	return ygnmi.NewWildcardQuery[oc.E_EndpointVni_VniType](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vni-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_VniType, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni).VniType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathMap represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathMapAny struct {
	*ygnmi.NodePath
}

// BridgeDomain (leaf): This reflects the configured VLAN or Bridge Domain that maps to this
// L2VNI in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/*/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPath) BridgeDomain() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_BridgeDomainPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_BridgeDomainPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bridge-domain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BridgeDomain (leaf): This reflects the configured VLAN or Bridge Domain that maps to this
// L2VNI in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/*/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny) BridgeDomain() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_BridgeDomainPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_BridgeDomainPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bridge-domain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L3VrfName (leaf): This refects the configured VRF instance that maps to this L3VNI
// that is used for routing between subnets in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/*/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPath) L3VrfName() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_L3VrfNamePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_L3VrfNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "l3-vrf-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L3VrfName (leaf): This refects the configured VRF instance that maps to this L3VNI
// that is used for routing between subnets in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/*/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny) L3VrfName() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_L3VrfNamePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_L3VrfNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "l3-vrf-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vni (leaf): L2VNI or L3VNI Identifier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/*/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPath) Vni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vni (leaf): L2VNI or L3VNI Identifier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/*/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny) Vni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniType (leaf): The type of virtual network identfier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/*/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPath) VniType() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniTypePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniType (leaf): The type of virtual network identfier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/local-endpoint-vnis/local-endpoint-vni/*/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny) VniType() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniTypePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni_VniTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).LocalEndpointVni
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:local-endpoint-vnis"},
			PostRelPath: []string{"openconfig-network-instance:local-endpoint-vni"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).LocalEndpointVni
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:local-endpoint-vnis"},
			PostRelPath: []string{"openconfig-network-instance:local-endpoint-vni"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).LocalEndpointVni
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:local-endpoint-vnis"},
			PostRelPath: []string{"openconfig-network-instance:local-endpoint-vni"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVniPathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_LocalEndpointVni, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).LocalEndpointVni
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:local-endpoint-vnis"},
			PostRelPath: []string{"openconfig-network-instance:local-endpoint-vni"},
		},
	)
}

// NetworkInstance_Encapsulation_ControlWordPath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/control-word YANG schema element.
type NetworkInstance_Encapsulation_ControlWordPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Encapsulation_ControlWordPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/control-word YANG schema element.
type NetworkInstance_Encapsulation_ControlWordPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-word"
//	Path from root:       "/network-instances/network-instance/encapsulation/state/control-word"
func (n *NetworkInstance_Encapsulation_ControlWordPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Encapsulation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "control-word"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).ControlWord
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-word"
//	Path from root:       "/network-instances/network-instance/encapsulation/state/control-word"
func (n *NetworkInstance_Encapsulation_ControlWordPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Encapsulation",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "control-word"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).ControlWord
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/control-word"
//	Path from root:       "/network-instances/network-instance/encapsulation/config/control-word"
func (n *NetworkInstance_Encapsulation_ControlWordPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Encapsulation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "control-word"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).ControlWord
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/control-word"
//	Path from root:       "/network-instances/network-instance/encapsulation/config/control-word"
func (n *NetworkInstance_Encapsulation_ControlWordPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Encapsulation",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "control-word"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).ControlWord
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Encapsulation_EncapsulationTypePath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/encapsulation-type YANG schema element.
type NetworkInstance_Encapsulation_EncapsulationTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Encapsulation_EncapsulationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/encapsulation-type YANG schema element.
type NetworkInstance_Encapsulation_EncapsulationTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/encapsulation/state/encapsulation-type"
func (n *NetworkInstance_Encapsulation_EncapsulationTypePath) State() ygnmi.SingletonQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewSingletonQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Encapsulation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/encapsulation/state/encapsulation-type"
func (n *NetworkInstance_Encapsulation_EncapsulationTypePathAny) State() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Encapsulation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/encapsulation/config/encapsulation-type"
func (n *NetworkInstance_Encapsulation_EncapsulationTypePath) Config() ygnmi.ConfigQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewConfigQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Encapsulation",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/encapsulation/config/encapsulation-type"
func (n *NetworkInstance_Encapsulation_EncapsulationTypePathAny) Config() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Encapsulation",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Encapsulation_LabelAllocationModePath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/label-allocation-mode YANG schema element.
type NetworkInstance_Encapsulation_LabelAllocationModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Encapsulation_LabelAllocationModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/label-allocation-mode YANG schema element.
type NetworkInstance_Encapsulation_LabelAllocationModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-allocation-mode"
//	Path from root:       "/network-instances/network-instance/encapsulation/state/label-allocation-mode"
func (n *NetworkInstance_Encapsulation_LabelAllocationModePath) State() ygnmi.SingletonQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE] {
	return ygnmi.NewSingletonQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE](
		"NetworkInstance_Encapsulation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-allocation-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).LabelAllocationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-allocation-mode"
//	Path from root:       "/network-instances/network-instance/encapsulation/state/label-allocation-mode"
func (n *NetworkInstance_Encapsulation_LabelAllocationModePathAny) State() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE](
		"NetworkInstance_Encapsulation",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-allocation-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).LabelAllocationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/label-allocation-mode"
//	Path from root:       "/network-instances/network-instance/encapsulation/config/label-allocation-mode"
func (n *NetworkInstance_Encapsulation_LabelAllocationModePath) Config() ygnmi.ConfigQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE] {
	return ygnmi.NewConfigQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE](
		"NetworkInstance_Encapsulation",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "label-allocation-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).LabelAllocationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/label-allocation-mode"
//	Path from root:       "/network-instances/network-instance/encapsulation/config/label-allocation-mode"
func (n *NetworkInstance_Encapsulation_LabelAllocationModePathAny) Config() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE](
		"NetworkInstance_Encapsulation",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "label-allocation-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).LabelAllocationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_EncapsulationPath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation YANG schema element.
type NetworkInstance_EncapsulationPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_EncapsulationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation YANG schema element.
type NetworkInstance_EncapsulationPathAny struct {
	*ygnmi.NodePath
}

// ControlWord (leaf): Whether the control-word should be used for the network
// instance
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/control-word"
//	Path from root:       "/network-instances/network-instance/encapsulation/*/control-word"
func (n *NetworkInstance_EncapsulationPath) ControlWord() *NetworkInstance_Encapsulation_ControlWordPath {
	ps := &NetworkInstance_Encapsulation_ControlWordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "control-word"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ControlWord (leaf): Whether the control-word should be used for the network
// instance
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/control-word"
//	Path from root:       "/network-instances/network-instance/encapsulation/*/control-word"
func (n *NetworkInstance_EncapsulationPathAny) ControlWord() *NetworkInstance_Encapsulation_ControlWordPathAny {
	ps := &NetworkInstance_Encapsulation_ControlWordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "control-word"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// sending traffic from this network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/encapsulation/*/encapsulation-type"
func (n *NetworkInstance_EncapsulationPath) EncapsulationType() *NetworkInstance_Encapsulation_EncapsulationTypePath {
	ps := &NetworkInstance_Encapsulation_EncapsulationTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// sending traffic from this network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/encapsulation/*/encapsulation-type"
func (n *NetworkInstance_EncapsulationPathAny) EncapsulationType() *NetworkInstance_Encapsulation_EncapsulationTypePathAny {
	ps := &NetworkInstance_Encapsulation_EncapsulationTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelAllocationMode (leaf): The label allocation mode to be used for L3 entries
// in the network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/label-allocation-mode"
//	Path from root:       "/network-instances/network-instance/encapsulation/*/label-allocation-mode"
func (n *NetworkInstance_EncapsulationPath) LabelAllocationMode() *NetworkInstance_Encapsulation_LabelAllocationModePath {
	ps := &NetworkInstance_Encapsulation_LabelAllocationModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "label-allocation-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelAllocationMode (leaf): The label allocation mode to be used for L3 entries
// in the network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/label-allocation-mode"
//	Path from root:       "/network-instances/network-instance/encapsulation/*/label-allocation-mode"
func (n *NetworkInstance_EncapsulationPathAny) LabelAllocationMode() *NetworkInstance_Encapsulation_LabelAllocationModePathAny {
	ps := &NetworkInstance_Encapsulation_LabelAllocationModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "label-allocation-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EncapsulationPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Encapsulation] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Encapsulation](
		"NetworkInstance_Encapsulation",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EncapsulationPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Encapsulation] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Encapsulation](
		"NetworkInstance_Encapsulation",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EncapsulationPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Encapsulation] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Encapsulation](
		"NetworkInstance_Encapsulation",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EncapsulationPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Encapsulation] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Encapsulation](
		"NetworkInstance_Encapsulation",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_EvpnPath represents the /openconfig-network-instance/network-instances/network-instance/evpn YANG schema element.
type NetworkInstance_EvpnPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_EvpnPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn YANG schema element.
type NetworkInstance_EvpnPathAny struct {
	*ygnmi.NodePath
}

// EvpnInstanceAny (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn-instances/evpn-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
func (n *NetworkInstance_EvpnPath) EvpnInstanceAny() *NetworkInstance_Evpn_EvpnInstancePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": "*"},
			n,
		),
	}
	return ps
}

// EvpnInstanceAny (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn-instances/evpn-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
func (n *NetworkInstance_EvpnPathAny) EvpnInstanceAny() *NetworkInstance_Evpn_EvpnInstancePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": "*"},
			n,
		),
	}
	return ps
}

// EvpnInstance (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn-instances/evpn-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
//
//	Evi: string
func (n *NetworkInstance_EvpnPath) EvpnInstance(Evi string) *NetworkInstance_Evpn_EvpnInstancePath {
	ps := &NetworkInstance_Evpn_EvpnInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": Evi},
			n,
		),
	}
	return ps
}

// EvpnInstance (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn-instances/evpn-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
//
//	Evi: string
func (n *NetworkInstance_EvpnPathAny) EvpnInstance(Evi string) *NetworkInstance_Evpn_EvpnInstancePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": Evi},
			n,
		),
	}
	return ps
}

// EvpnInstanceMap (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn-instances/evpn-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
func (n *NetworkInstance_EvpnPath) EvpnInstanceMap() *NetworkInstance_Evpn_EvpnInstancePathMap {
	ps := &NetworkInstance_Evpn_EvpnInstancePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn-instances"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EvpnInstanceMap (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn-instances/evpn-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
func (n *NetworkInstance_EvpnPathAny) EvpnInstanceMap() *NetworkInstance_Evpn_EvpnInstancePathMapAny {
	ps := &NetworkInstance_Evpn_EvpnInstancePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn-instances"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EvpnPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn](
		"NetworkInstance_Evpn",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EvpnPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn](
		"NetworkInstance_Evpn",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EvpnPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn](
		"NetworkInstance_Evpn",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EvpnPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn](
		"NetworkInstance_Evpn",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/control-word-enabled YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/control-word-enabled YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-word-enabled"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/control-word-enabled"
func (n *NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "control-word-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ControlWordEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-word-enabled"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/control-word-enabled"
func (n *NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "control-word-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ControlWordEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/control-word-enabled"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/control-word-enabled"
func (n *NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "control-word-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ControlWordEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/control-word-enabled"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/control-word-enabled"
func (n *NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "control-word-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ControlWordEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/encapsulation-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/encapsulation-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath) State() ygnmi.SingletonQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewSingletonQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny) State() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath) Config() ygnmi.ConfigQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewConfigQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny) Config() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_EviPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/evi YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EviPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/evi YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EviPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/evi"
func (n *NetworkInstance_Evpn_EvpnInstance_EviPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).Evi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/evi"
func (n *NetworkInstance_Evpn_EvpnInstance_EviPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).Evi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/evi"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/evi"
func (n *NetworkInstance_Evpn_EvpnInstance_EviPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).Evi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/evi"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/evi"
func (n *NetworkInstance_Evpn_EvpnInstance_EviPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).Evi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_LocalVpwsServiceIdPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/local-vpws-service-id YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_LocalVpwsServiceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_LocalVpwsServiceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/local-vpws-service-id YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_LocalVpwsServiceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-vpws-service-id"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/local-vpws-service-id"
func (n *NetworkInstance_Evpn_EvpnInstance_LocalVpwsServiceIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-vpws-service-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).LocalVpwsServiceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-vpws-service-id"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/local-vpws-service-id"
func (n *NetworkInstance_Evpn_EvpnInstance_LocalVpwsServiceIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-vpws-service-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).LocalVpwsServiceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-vpws-service-id"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/local-vpws-service-id"
func (n *NetworkInstance_Evpn_EvpnInstance_LocalVpwsServiceIdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-vpws-service-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).LocalVpwsServiceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-vpws-service-id"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/local-vpws-service-id"
func (n *NetworkInstance_Evpn_EvpnInstance_LocalVpwsServiceIdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-vpws-service-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).LocalVpwsServiceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_RemoteVpwsServiceIdPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/remote-vpws-service-id YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_RemoteVpwsServiceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_RemoteVpwsServiceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/remote-vpws-service-id YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_RemoteVpwsServiceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-vpws-service-id"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/remote-vpws-service-id"
func (n *NetworkInstance_Evpn_EvpnInstance_RemoteVpwsServiceIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-vpws-service-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).RemoteVpwsServiceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-vpws-service-id"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/remote-vpws-service-id"
func (n *NetworkInstance_Evpn_EvpnInstance_RemoteVpwsServiceIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-vpws-service-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).RemoteVpwsServiceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/remote-vpws-service-id"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/remote-vpws-service-id"
func (n *NetworkInstance_Evpn_EvpnInstance_RemoteVpwsServiceIdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-vpws-service-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).RemoteVpwsServiceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/remote-vpws-service-id"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/remote-vpws-service-id"
func (n *NetworkInstance_Evpn_EvpnInstance_RemoteVpwsServiceIdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-vpws-service-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).RemoteVpwsServiceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_ReplicationModePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/replication-mode YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ReplicationModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/replication-mode YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/replication-mode"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstance_ReplicationModePath) State() ygnmi.SingletonQuery[oc.E_EvpnInstance_ReplicationMode] {
	return ygnmi.NewSingletonQuery[oc.E_EvpnInstance_ReplicationMode](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "replication-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnInstance_ReplicationMode, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ReplicationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/replication-mode"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny) State() ygnmi.WildcardQuery[oc.E_EvpnInstance_ReplicationMode] {
	return ygnmi.NewWildcardQuery[oc.E_EvpnInstance_ReplicationMode](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "replication-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnInstance_ReplicationMode, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ReplicationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/replication-mode"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstance_ReplicationModePath) Config() ygnmi.ConfigQuery[oc.E_EvpnInstance_ReplicationMode] {
	return ygnmi.NewConfigQuery[oc.E_EvpnInstance_ReplicationMode](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "replication-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnInstance_ReplicationMode, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ReplicationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/replication-mode"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny) Config() ygnmi.WildcardQuery[oc.E_EvpnInstance_ReplicationMode] {
	return ygnmi.NewWildcardQuery[oc.E_EvpnInstance_ReplicationMode](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "replication-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnInstance_ReplicationMode, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ReplicationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).RouteDistinguisher
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).RouteDistinguisher
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).RouteDistinguisher
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).RouteDistinguisher
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_ServiceTypePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/service-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ServiceTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/service-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/service-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/service-type"
func (n *NetworkInstance_Evpn_EvpnInstance_ServiceTypePath) State() ygnmi.SingletonQuery[oc.E_EvpnTypes_EVPN_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_EvpnTypes_EVPN_TYPE](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "service-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnTypes_EVPN_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ServiceType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/service-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/service-type"
func (n *NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny) State() ygnmi.WildcardQuery[oc.E_EvpnTypes_EVPN_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_EvpnTypes_EVPN_TYPE](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "service-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnTypes_EVPN_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ServiceType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/service-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/service-type"
func (n *NetworkInstance_Evpn_EvpnInstance_ServiceTypePath) Config() ygnmi.ConfigQuery[oc.E_EvpnTypes_EVPN_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_EvpnTypes_EVPN_TYPE](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "service-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnTypes_EVPN_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ServiceType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/service-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/service-type"
func (n *NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny) Config() ygnmi.WildcardQuery[oc.E_EvpnTypes_EVPN_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_EvpnTypes_EVPN_TYPE](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "service-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnTypes_EVPN_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ServiceType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstancePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstancePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstancePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstancePathMap represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstancePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstancePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstancePathMapAny struct {
	*ygnmi.NodePath
}

// BComponentAny (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pbb/b-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
func (n *NetworkInstance_Evpn_EvpnInstancePath) BComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": "*"},
			n,
		),
	}
	return ps
}

// BComponentAny (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pbb/b-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) BComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": "*"},
			n,
		),
	}
	return ps
}

// BComponent (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pbb/b-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
//
//	BComponentName: string
func (n *NetworkInstance_Evpn_EvpnInstancePath) BComponent(BComponentName string) *NetworkInstance_Evpn_EvpnInstance_BComponentPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": BComponentName},
			n,
		),
	}
	return ps
}

// BComponent (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pbb/b-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
//
//	BComponentName: string
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) BComponent(BComponentName string) *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": BComponentName},
			n,
		),
	}
	return ps
}

// BComponentMap (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pbb/b-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
func (n *NetworkInstance_Evpn_EvpnInstancePath) BComponentMap() *NetworkInstance_Evpn_EvpnInstance_BComponentPathMap {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponentPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"pbb"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BComponentMap (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pbb/b-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) BComponentMap() *NetworkInstance_Evpn_EvpnInstance_BComponentPathMapAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponentPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pbb"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ControlWordEnabled (leaf): When true, the control word is signaled and sent.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/control-word-enabled"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/control-word-enabled"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ControlWordEnabled() *NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "control-word-enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ControlWordEnabled (leaf): When true, the control word is signaled and sent.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/control-word-enabled"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/control-word-enabled"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ControlWordEnabled() *NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "control-word-enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// exchanging traffic from this network instance to/from
// destinations belonging to the EVI. The use of MPLS or
// VXLAN is selected using this container.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstancePath) EncapsulationType() *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// exchanging traffic from this network instance to/from
// destinations belonging to the EVI. The use of MPLS or
// VXLAN is selected using this container.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) EncapsulationType() *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Evi (leaf): EVPN Instance (EVI) identifier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/evi"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/evi"
func (n *NetworkInstance_Evpn_EvpnInstancePath) Evi() *NetworkInstance_Evpn_EvpnInstance_EviPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_EviPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Evi (leaf): EVPN Instance (EVI) identifier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/evi"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/evi"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) Evi() *NetworkInstance_Evpn_EvpnInstance_EviPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_EviPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "import-export-policy"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ImportExportPolicy() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "import-export-policy"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ImportExportPolicy() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LocalVpwsServiceId (leaf): Indicates the local VPWS identifier assigned
// to the Attachment Circuit (AC).
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-vpws-service-id"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/local-vpws-service-id"
func (n *NetworkInstance_Evpn_EvpnInstancePath) LocalVpwsServiceId() *NetworkInstance_Evpn_EvpnInstance_LocalVpwsServiceIdPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_LocalVpwsServiceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-vpws-service-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalVpwsServiceId (leaf): Indicates the local VPWS identifier assigned
// to the Attachment Circuit (AC).
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-vpws-service-id"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/local-vpws-service-id"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) LocalVpwsServiceId() *NetworkInstance_Evpn_EvpnInstance_LocalVpwsServiceIdPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_LocalVpwsServiceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-vpws-service-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstancePath) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastMask (leaf): Multicast group address mask
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstancePath) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastMask (leaf): Multicast group address mask
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteVpwsServiceId (leaf): Indicates the remote VPWS identifier assigned
// to the Attachment Circuit (AC).
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/remote-vpws-service-id"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/remote-vpws-service-id"
func (n *NetworkInstance_Evpn_EvpnInstancePath) RemoteVpwsServiceId() *NetworkInstance_Evpn_EvpnInstance_RemoteVpwsServiceIdPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_RemoteVpwsServiceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-vpws-service-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteVpwsServiceId (leaf): Indicates the remote VPWS identifier assigned
// to the Attachment Circuit (AC).
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/remote-vpws-service-id"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/remote-vpws-service-id"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) RemoteVpwsServiceId() *NetworkInstance_Evpn_EvpnInstance_RemoteVpwsServiceIdPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_RemoteVpwsServiceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-vpws-service-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReplicationMode (leaf): Replication mode to handle BUM traffic
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/replication-mode"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ReplicationMode() *NetworkInstance_Evpn_EvpnInstance_ReplicationModePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_ReplicationModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "replication-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReplicationMode (leaf): Replication mode to handle BUM traffic
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/replication-mode"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ReplicationMode() *NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "replication-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteDistinguisher (leaf): Route Distinguisher (RD) associated to the EVPN-instance.
// An RD MUST be assigned for a given EVPN-instance on a PE.
// This RD MUST be unique across all EVPN-instances on a PE.
// The route-distinguisher at this level overrides
// the route-distinguisher value defined under
// network-instance/config.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstancePath) RouteDistinguisher() *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteDistinguisher (leaf): Route Distinguisher (RD) associated to the EVPN-instance.
// An RD MUST be assigned for a given EVPN-instance on a PE.
// This RD MUST be unique across all EVPN-instances on a PE.
// The route-distinguisher at this level overrides
// the route-distinguisher value defined under
// network-instance/config.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) RouteDistinguisher() *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ServiceType (leaf): Specifies the type of EVPN that is being created according
// to the values in the EVPN_TYPES identity.
// The options are VLAN-based, VLAN-Bundle or VLAN-aware.
// VLAN-Based services consists of an EVPN instance of only a
// single broadcast domain, the proper network-instance type used
// for this kind of services is L2VSI.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/service-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/service-type"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ServiceType() *NetworkInstance_Evpn_EvpnInstance_ServiceTypePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_ServiceTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "service-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ServiceType (leaf): Specifies the type of EVPN that is being created according
// to the values in the EVPN_TYPES identity.
// The options are VLAN-based, VLAN-Bundle or VLAN-aware.
// VLAN-Based services consists of an EVPN instance of only a
// single broadcast domain, the proper network-instance type used
// for this kind of services is L2VSI.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/service-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/service-type"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ServiceType() *NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "service-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vxlan (container): Top container related to Overlay Solution in EVPN.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vxlan"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan"
func (n *NetworkInstance_Evpn_EvpnInstancePath) Vxlan() *NetworkInstance_Evpn_EvpnInstance_VxlanPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_VxlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vxlan (container): Top container related to Overlay Solution in EVPN.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vxlan"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) Vxlan() *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_VxlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn).EvpnInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:evpn-instances"},
			PostRelPath: []string{"openconfig-network-instance:evpn-instance"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn).EvpnInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:evpn-instances"},
			PostRelPath: []string{"openconfig-network-instance:evpn-instance"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn).EvpnInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:evpn-instances"},
			PostRelPath: []string{"openconfig-network-instance:evpn-instance"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn).EvpnInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:evpn-instances"},
			PostRelPath: []string{"openconfig-network-instance:evpn-instance"},
		},
	)
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/b-component-name YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/b-component-name YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/b-component-name"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "b-component-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BComponentName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/b-component-name"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "b-component-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BComponentName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/b-component-name"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "b-component-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BComponentName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/b-component-name"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "b-component-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BComponentName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/backbone-src-mac YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/backbone-src-mac YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/backbone-src-mac"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "backbone-src-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BackboneSrcMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/backbone-src-mac"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "backbone-src-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BackboneSrcMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/backbone-src-mac"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "backbone-src-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BackboneSrcMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/backbone-src-mac"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "backbone-src-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BackboneSrcMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_BComponentPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponentPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponentPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponentPathMap represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponentPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponentPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponentPathMapAny struct {
	*ygnmi.NodePath
}

// BComponentName (leaf): Type of the associated b-component
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/b-component-name"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/*/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) BComponentName() *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "b-component-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BComponentName (leaf): Type of the associated b-component
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/b-component-name"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/*/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) BComponentName() *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "b-component-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BackboneSrcMac (leaf): EVPN will run independently in both components,
// the I-component MAC-VRF and B-component MAC-VRF.
// The backbone-src-mac assigns the b-component MAC.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/backbone-src-mac"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/*/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) BackboneSrcMac() *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "backbone-src-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BackboneSrcMac (leaf): EVPN will run independently in both components,
// the I-component MAC-VRF and B-component MAC-VRF.
// The backbone-src-mac assigns the b-component MAC.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/backbone-src-mac"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/*/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) BackboneSrcMac() *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "backbone-src-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IComponentAny (list): list of i-components
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "i-components/i-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) IComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": "*"},
			n,
		),
	}
	return ps
}

// IComponentAny (list): list of i-components
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "i-components/i-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) IComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": "*"},
			n,
		),
	}
	return ps
}

// IComponent (list): list of i-components
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "i-components/i-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
//
//	ISid: uint32
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) IComponent(ISid uint32) *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": ISid},
			n,
		),
	}
	return ps
}

// IComponent (list): list of i-components
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "i-components/i-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
//
//	ISid: uint32
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) IComponent(ISid uint32) *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": ISid},
			n,
		),
	}
	return ps
}

// IComponentMap (list): list of i-components
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "i-components/i-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) IComponentMap() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMap {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"i-components"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IComponentMap (list): list of i-components
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "i-components/i-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) IComponentMap() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMapAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"i-components"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).BComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:pbb"},
			PostRelPath: []string{"openconfig-network-instance:b-component"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).BComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:pbb"},
			PostRelPath: []string{"openconfig-network-instance:b-component"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).BComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:pbb"},
			PostRelPath: []string{"openconfig-network-instance:b-component"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).BComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:pbb"},
			PostRelPath: []string{"openconfig-network-instance:b-component"},
		},
	)
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state/i-sid YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state/i-sid YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/i-sid"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "i-sid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent).ISid
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/i-sid"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "i-sid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent).ISid
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/i-sid"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/config/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "i-sid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent).ISid
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/i-sid"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/config/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "i-sid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent).ISid
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMap represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMapAny struct {
	*ygnmi.NodePath
}

// ISid (leaf): Service Instance Identifier 24 bits and global within a PBB
// network. I-SID defines the service instance that the frame should be
// mapped to.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/i-sid"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/*/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath) ISid() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "i-sid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ISid (leaf): Service Instance Identifier 24 bits and global within a PBB
// network. I-SID defines the service instance that the frame should be
// mapped to.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/i-sid"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/*/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny) ISid() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "i-sid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).IComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:i-components"},
			PostRelPath: []string{"openconfig-network-instance:i-component"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).IComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:i-components"},
			PostRelPath: []string{"openconfig-network-instance:i-component"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).IComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:i-components"},
			PostRelPath: []string{"openconfig-network-instance:i-component"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).IComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:i-components"},
			PostRelPath: []string{"openconfig-network-instance:i-component"},
		},
	)
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath) State() ygnmi.SingletonQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewSingletonQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny) State() ygnmi.WildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath) Config() ygnmi.ConfigQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewConfigQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny) Config() ygnmi.WildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath) State() ygnmi.SingletonQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewSingletonQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny) State() ygnmi.WildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath) Config() ygnmi.ConfigQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewConfigQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny) Config() ygnmi.WildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny struct {
	*ygnmi.NodePath
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/*/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath) ExportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/*/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny) ExportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/*/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath) ImportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/*/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny) ImportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/host-reachability-bgp YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/host-reachability-bgp YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/host-reachability-bgp"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host-reachability-bgp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).HostReachabilityBgp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/host-reachability-bgp"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host-reachability-bgp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).HostReachabilityBgp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/host-reachability-bgp"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "host-reachability-bgp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).HostReachabilityBgp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/host-reachability-bgp"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "host-reachability-bgp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).HostReachabilityBgp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/overlay-endpoint"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "overlay-endpoint"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpoint
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/overlay-endpoint"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "overlay-endpoint"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpoint
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/overlay-endpoint"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "overlay-endpoint"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpoint
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/overlay-endpoint"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "overlay-endpoint"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpoint
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint-network-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint-network-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/overlay-endpoint-network-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "overlay-endpoint-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpointNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/overlay-endpoint-network-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "overlay-endpoint-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpointNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/overlay-endpoint-network-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "overlay-endpoint-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpointNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/overlay-endpoint-network-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "overlay-endpoint-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpointNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vni"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vni"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_VniListPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni-list YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_VniListPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_VniListPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni-list YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_VniListPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-list"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni-list"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniListPath) State() ygnmi.SingletonQuery[[]uint32] {
	return ygnmi.NewSingletonQuery[[]uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-list"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).VniList
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-list"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni-list"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniListPathAny) State() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-list"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).VniList
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vni-list"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/vni-list"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniListPath) Config() ygnmi.ConfigQuery[[]uint32] {
	return ygnmi.NewConfigQuery[[]uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vni-list"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).VniList
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vni-list"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/vni-list"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniListPathAny) Config() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vni-list"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).VniList
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_VxlanPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_VxlanPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_VxlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_VxlanPathAny struct {
	*ygnmi.NodePath
}

// AnycastSourceInterface (container): Anycast source interface references
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "anycast-source-interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) AnycastSourceInterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"anycast-source-interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AnycastSourceInterface (container): Anycast source interface references
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "anycast-source-interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) AnycastSourceInterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"anycast-source-interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostReachabilityBgp (leaf): Enable or Disable the BGP control plane to be
// used to exchange  updates from the NVE interface
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/host-reachability-bgp"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) HostReachabilityBgp() *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "host-reachability-bgp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HostReachabilityBgp (leaf): Enable or Disable the BGP control plane to be
// used to exchange  updates from the NVE interface
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/host-reachability-bgp"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) HostReachabilityBgp() *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "host-reachability-bgp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastMask (leaf): Multicast group address mask
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastMask (leaf): Multicast group address mask
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OverlayEndpoint (leaf): Associate the EVI with an VXLAN Endpoint defined under connection
// points. The network instance to resolve the overlay-endpoint within.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/overlay-endpoint"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) OverlayEndpoint() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "overlay-endpoint"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OverlayEndpoint (leaf): Associate the EVI with an VXLAN Endpoint defined under connection
// points. The network instance to resolve the overlay-endpoint within.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/overlay-endpoint"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) OverlayEndpoint() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "overlay-endpoint"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OverlayEndpointNetworkInstance (leaf): The network instance to resolve the overlay-endpoint within.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/overlay-endpoint-network-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) OverlayEndpointNetworkInstance() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "overlay-endpoint-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OverlayEndpointNetworkInstance (leaf): The network instance to resolve the overlay-endpoint within.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/overlay-endpoint-network-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) OverlayEndpointNetworkInstance() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "overlay-endpoint-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vni (leaf): Virtual Network Identifier (VNI) associated to the EVI. This VNI is used for
// ingress and egress in the VXLAN domain.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) Vni() *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vni (leaf): Virtual Network Identifier (VNI) associated to the EVI. This VNI is used for
// ingress and egress in the VXLAN domain.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) Vni() *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniList (leaf-list): List of VNIs participating in a VLAN-aware-bundle EVI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni-list"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/vni-list"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) VniList() *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniListPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_VniListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni-list"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniList (leaf-list): List of VNIs participating in a VLAN-aware-bundle EVI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni-list"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/vni-list"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) VniList() *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniListPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_VniListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni-list"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/subinterface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/subinterface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/*/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath) Interface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/*/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny) Interface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/*/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath) Subinterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/*/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny) Subinterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_AnycastGatewayMacPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/anycast-gateway-mac YANG schema element.
type NetworkInstance_Fdb_AnycastGatewayMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_AnycastGatewayMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/anycast-gateway-mac YANG schema element.
type NetworkInstance_Fdb_AnycastGatewayMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/anycast-gateway-mac"
//	Path from root:       "/network-instances/network-instance/fdb/state/anycast-gateway-mac"
func (n *NetworkInstance_Fdb_AnycastGatewayMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "anycast-gateway-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).AnycastGatewayMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/anycast-gateway-mac"
//	Path from root:       "/network-instances/network-instance/fdb/state/anycast-gateway-mac"
func (n *NetworkInstance_Fdb_AnycastGatewayMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "anycast-gateway-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).AnycastGatewayMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/anycast-gateway-mac"
//	Path from root:       "/network-instances/network-instance/fdb/config/anycast-gateway-mac"
func (n *NetworkInstance_Fdb_AnycastGatewayMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "anycast-gateway-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).AnycastGatewayMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/anycast-gateway-mac"
//	Path from root:       "/network-instances/network-instance/fdb/config/anycast-gateway-mac"
func (n *NetworkInstance_Fdb_AnycastGatewayMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "anycast-gateway-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).AnycastGatewayMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/flood-unknown-unicast-supression YANG schema element.
type NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/flood-unknown-unicast-supression YANG schema element.
type NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flood-unknown-unicast-supression"
//	Path from root:       "/network-instances/network-instance/fdb/state/flood-unknown-unicast-supression"
func (n *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flood-unknown-unicast-supression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).FloodUnknownUnicastSupression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flood-unknown-unicast-supression"
//	Path from root:       "/network-instances/network-instance/fdb/state/flood-unknown-unicast-supression"
func (n *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flood-unknown-unicast-supression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).FloodUnknownUnicastSupression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/flood-unknown-unicast-supression"
//	Path from root:       "/network-instances/network-instance/fdb/config/flood-unknown-unicast-supression"
func (n *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flood-unknown-unicast-supression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).FloodUnknownUnicastSupression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/flood-unknown-unicast-supression"
//	Path from root:       "/network-instances/network-instance/fdb/config/flood-unknown-unicast-supression"
func (n *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flood-unknown-unicast-supression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).FloodUnknownUnicastSupression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacAgingTimePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/mac-aging-time YANG schema element.
type NetworkInstance_Fdb_MacAgingTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacAgingTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/mac-aging-time YANG schema element.
type NetworkInstance_Fdb_MacAgingTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-aging-time"
//	Path from root:       "/network-instances/network-instance/fdb/state/mac-aging-time"
func (n *NetworkInstance_Fdb_MacAgingTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-aging-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacAgingTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-aging-time"
//	Path from root:       "/network-instances/network-instance/fdb/state/mac-aging-time"
func (n *NetworkInstance_Fdb_MacAgingTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-aging-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacAgingTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-aging-time"
//	Path from root:       "/network-instances/network-instance/fdb/config/mac-aging-time"
func (n *NetworkInstance_Fdb_MacAgingTimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-aging-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacAgingTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-aging-time"
//	Path from root:       "/network-instances/network-instance/fdb/config/mac-aging-time"
func (n *NetworkInstance_Fdb_MacAgingTimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-aging-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacAgingTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacLearningPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/mac-learning YANG schema element.
type NetworkInstance_Fdb_MacLearningPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacLearningPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/mac-learning YANG schema element.
type NetworkInstance_Fdb_MacLearningPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-learning"
//	Path from root:       "/network-instances/network-instance/fdb/state/mac-learning"
func (n *NetworkInstance_Fdb_MacLearningPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-learning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacLearning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-learning"
//	Path from root:       "/network-instances/network-instance/fdb/state/mac-learning"
func (n *NetworkInstance_Fdb_MacLearningPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-learning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacLearning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-learning"
//	Path from root:       "/network-instances/network-instance/fdb/config/mac-learning"
func (n *NetworkInstance_Fdb_MacLearningPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-learning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacLearning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-learning"
//	Path from root:       "/network-instances/network-instance/fdb/config/mac-learning"
func (n *NetworkInstance_Fdb_MacLearningPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-learning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacLearning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MaximumEntriesPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/maximum-entries YANG schema element.
type NetworkInstance_Fdb_MaximumEntriesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MaximumEntriesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/maximum-entries YANG schema element.
type NetworkInstance_Fdb_MaximumEntriesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-entries"
//	Path from root:       "/network-instances/network-instance/fdb/state/maximum-entries"
func (n *NetworkInstance_Fdb_MaximumEntriesPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MaximumEntries
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-entries"
//	Path from root:       "/network-instances/network-instance/fdb/state/maximum-entries"
func (n *NetworkInstance_Fdb_MaximumEntriesPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MaximumEntries
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/maximum-entries"
//	Path from root:       "/network-instances/network-instance/fdb/config/maximum-entries"
func (n *NetworkInstance_Fdb_MaximumEntriesPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "maximum-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MaximumEntries
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/maximum-entries"
//	Path from root:       "/network-instances/network-instance/fdb/config/maximum-entries"
func (n *NetworkInstance_Fdb_MaximumEntriesPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "maximum-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MaximumEntries
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_FdbPath represents the /openconfig-network-instance/network-instances/network-instance/fdb YANG schema element.
type NetworkInstance_FdbPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_FdbPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb YANG schema element.
type NetworkInstance_FdbPathAny struct {
	*ygnmi.NodePath
}

// AnycastGatewayMac (leaf): Configure the anycast gateway MAC address that all VTEPs
// use for the network instance. When a VM sends an Address
// Resolution Protocol (ARP) request for the anycast gateway
// IP address in a VXLAN virtual network, the VTEP responds
// with the configured anycast MAC address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/anycast-gateway-mac"
//	Path from root:       "/network-instances/network-instance/fdb/*/anycast-gateway-mac"
func (n *NetworkInstance_FdbPath) AnycastGatewayMac() *NetworkInstance_Fdb_AnycastGatewayMacPath {
	ps := &NetworkInstance_Fdb_AnycastGatewayMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "anycast-gateway-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AnycastGatewayMac (leaf): Configure the anycast gateway MAC address that all VTEPs
// use for the network instance. When a VM sends an Address
// Resolution Protocol (ARP) request for the anycast gateway
// IP address in a VXLAN virtual network, the VTEP responds
// with the configured anycast MAC address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/anycast-gateway-mac"
//	Path from root:       "/network-instances/network-instance/fdb/*/anycast-gateway-mac"
func (n *NetworkInstance_FdbPathAny) AnycastGatewayMac() *NetworkInstance_Fdb_AnycastGatewayMacPathAny {
	ps := &NetworkInstance_Fdb_AnycastGatewayMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "anycast-gateway-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ArpProxy (container): Top Container related to ARP-Proxy
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "arp-proxy"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy"
func (n *NetworkInstance_FdbPath) ArpProxy() *NetworkInstance_Fdb_ArpProxyPath {
	ps := &NetworkInstance_Fdb_ArpProxyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"arp-proxy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ArpProxy (container): Top Container related to ARP-Proxy
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "arp-proxy"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy"
func (n *NetworkInstance_FdbPathAny) ArpProxy() *NetworkInstance_Fdb_ArpProxyPathAny {
	ps := &NetworkInstance_Fdb_ArpProxyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"arp-proxy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FloodUnknownUnicastSupression (leaf): Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
// Suppression. If the Unknown Unicast Flooding Suppression is on,
// the unicast traffic towards an unknown host will be dropped.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/flood-unknown-unicast-supression"
//	Path from root:       "/network-instances/network-instance/fdb/*/flood-unknown-unicast-supression"
func (n *NetworkInstance_FdbPath) FloodUnknownUnicastSupression() *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath {
	ps := &NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flood-unknown-unicast-supression"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FloodUnknownUnicastSupression (leaf): Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
// Suppression. If the Unknown Unicast Flooding Suppression is on,
// the unicast traffic towards an unknown host will be dropped.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/flood-unknown-unicast-supression"
//	Path from root:       "/network-instances/network-instance/fdb/*/flood-unknown-unicast-supression"
func (n *NetworkInstance_FdbPathAny) FloodUnknownUnicastSupression() *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny {
	ps := &NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flood-unknown-unicast-supression"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L2Rib (container): Operational state container for MAC address and MAC-IP address
// information that is learned and installed into the MAC VRF Layer 2
// Routing Information Base (L2RIB)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l2rib"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib"
func (n *NetworkInstance_FdbPath) L2Rib() *NetworkInstance_Fdb_L2RibPath {
	ps := &NetworkInstance_Fdb_L2RibPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2rib"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2Rib (container): Operational state container for MAC address and MAC-IP address
// information that is learned and installed into the MAC VRF Layer 2
// Routing Information Base (L2RIB)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l2rib"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib"
func (n *NetworkInstance_FdbPathAny) L2Rib() *NetworkInstance_Fdb_L2RibPathAny {
	ps := &NetworkInstance_Fdb_L2RibPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2rib"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacAgingTime (leaf): The number of seconds of inactivity after which the entry
// in the local FDB is timed out.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-aging-time"
//	Path from root:       "/network-instances/network-instance/fdb/*/mac-aging-time"
func (n *NetworkInstance_FdbPath) MacAgingTime() *NetworkInstance_Fdb_MacAgingTimePath {
	ps := &NetworkInstance_Fdb_MacAgingTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-aging-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAgingTime (leaf): The number of seconds of inactivity after which the entry
// in the local FDB is timed out.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-aging-time"
//	Path from root:       "/network-instances/network-instance/fdb/*/mac-aging-time"
func (n *NetworkInstance_FdbPathAny) MacAgingTime() *NetworkInstance_Fdb_MacAgingTimePathAny {
	ps := &NetworkInstance_Fdb_MacAgingTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-aging-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacLearning (leaf): When this leaf is set to true, MAC learning is enabled for
// the network instance, such that MAC addresses are learned
// from ingress frames and added to the FDB.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-learning"
//	Path from root:       "/network-instances/network-instance/fdb/*/mac-learning"
func (n *NetworkInstance_FdbPath) MacLearning() *NetworkInstance_Fdb_MacLearningPath {
	ps := &NetworkInstance_Fdb_MacLearningPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-learning"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacLearning (leaf): When this leaf is set to true, MAC learning is enabled for
// the network instance, such that MAC addresses are learned
// from ingress frames and added to the FDB.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-learning"
//	Path from root:       "/network-instances/network-instance/fdb/*/mac-learning"
func (n *NetworkInstance_FdbPathAny) MacLearning() *NetworkInstance_Fdb_MacLearningPathAny {
	ps := &NetworkInstance_Fdb_MacLearningPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-learning"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobility (container): Top grouping the configuration and state data related to mac
// mobility.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility"
func (n *NetworkInstance_FdbPath) MacMobility() *NetworkInstance_Fdb_MacMobilityPath {
	ps := &NetworkInstance_Fdb_MacMobilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacMobility (container): Top grouping the configuration and state data related to mac
// mobility.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility"
func (n *NetworkInstance_FdbPathAny) MacMobility() *NetworkInstance_Fdb_MacMobilityPathAny {
	ps := &NetworkInstance_Fdb_MacMobilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacTable (container): Table of learned or statically configured MAC addresses and
// corresponding VLANs in the bridge domain
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-table"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table"
func (n *NetworkInstance_FdbPath) MacTable() *NetworkInstance_Fdb_MacTablePath {
	ps := &NetworkInstance_Fdb_MacTablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacTable (container): Table of learned or statically configured MAC addresses and
// corresponding VLANs in the bridge domain
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-table"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table"
func (n *NetworkInstance_FdbPathAny) MacTable() *NetworkInstance_Fdb_MacTablePathAny {
	ps := &NetworkInstance_Fdb_MacTablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaximumEntries (leaf): The maximum number of MAC address entries that should be
// accepted into the FDB
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/maximum-entries"
//	Path from root:       "/network-instances/network-instance/fdb/*/maximum-entries"
func (n *NetworkInstance_FdbPath) MaximumEntries() *NetworkInstance_Fdb_MaximumEntriesPath {
	ps := &NetworkInstance_Fdb_MaximumEntriesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "maximum-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaximumEntries (leaf): The maximum number of MAC address entries that should be
// accepted into the FDB
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/maximum-entries"
//	Path from root:       "/network-instances/network-instance/fdb/*/maximum-entries"
func (n *NetworkInstance_FdbPathAny) MaximumEntries() *NetworkInstance_Fdb_MaximumEntriesPathAny {
	ps := &NetworkInstance_Fdb_MaximumEntriesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "maximum-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NdProxy (container): Top Container related to ND-Proxy.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "nd-proxy"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy"
func (n *NetworkInstance_FdbPath) NdProxy() *NetworkInstance_Fdb_NdProxyPath {
	ps := &NetworkInstance_Fdb_NdProxyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"nd-proxy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NdProxy (container): Top Container related to ND-Proxy.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "nd-proxy"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy"
func (n *NetworkInstance_FdbPathAny) NdProxy() *NetworkInstance_Fdb_NdProxyPathAny {
	ps := &NetworkInstance_Fdb_NdProxyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nd-proxy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_FdbPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb](
		"NetworkInstance_Fdb",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_FdbPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb](
		"NetworkInstance_Fdb",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_FdbPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb](
		"NetworkInstance_Fdb",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_FdbPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb](
		"NetworkInstance_Fdb",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/arp-suppression YANG schema element.
type NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/arp-suppression YANG schema element.
type NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/arp-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "arp-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).ArpSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/arp-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "arp-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).ArpSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/arp-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "arp-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).ArpSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/arp-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "arp-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).ArpSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_ArpProxy_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/enable YANG schema element.
type NetworkInstance_Fdb_ArpProxy_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_ArpProxy_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/enable YANG schema element.
type NetworkInstance_Fdb_ArpProxy_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/enable"
func (n *NetworkInstance_Fdb_ArpProxy_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/enable"
func (n *NetworkInstance_Fdb_ArpProxy_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/enable"
func (n *NetworkInstance_Fdb_ArpProxy_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/enable"
func (n *NetworkInstance_Fdb_ArpProxy_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_ArpProxyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy YANG schema element.
type NetworkInstance_Fdb_ArpProxyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_ArpProxyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy YANG schema element.
type NetworkInstance_Fdb_ArpProxyPathAny struct {
	*ygnmi.NodePath
}

// ArpSuppression (leaf): Enable (TRUE) or disable (FALSE) ARP suppression. If true
// the  Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network are suppressed.
// Address Resolution Protocol (ARP) suppression is a
// technique used to reduce the amount of ARP broadcast
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/arp-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxyPath) ArpSuppression() *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath {
	ps := &NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "arp-suppression"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ArpSuppression (leaf): Enable (TRUE) or disable (FALSE) ARP suppression. If true
// the  Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network are suppressed.
// Address Resolution Protocol (ARP) suppression is a
// technique used to reduce the amount of ARP broadcast
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/arp-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) ArpSuppression() *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny {
	ps := &NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "arp-suppression"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxyPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath {
	ps := &NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny {
	ps := &NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) ARP proxy. If true
// a proxy server on the network answers the
// Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/enable"
func (n *NetworkInstance_Fdb_ArpProxyPath) Enable() *NetworkInstance_Fdb_ArpProxy_EnablePath {
	ps := &NetworkInstance_Fdb_ArpProxy_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) ARP proxy. If true
// a proxy server on the network answers the
// Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/enable"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) Enable() *NetworkInstance_Fdb_ArpProxy_EnablePathAny {
	ps := &NetworkInstance_Fdb_ArpProxy_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxyPath) IpMobilityThreshold() *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath {
	ps := &NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny {
	ps := &NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_ArpProxyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_ArpProxy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_ArpProxy](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_ArpProxyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_ArpProxy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_ArpProxy](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_ArpProxyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_ArpProxy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_ArpProxy](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_ArpProxyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_ArpProxy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_ArpProxy](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2RibPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib YANG schema element.
type NetworkInstance_Fdb_L2RibPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2RibPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib YANG schema element.
type NetworkInstance_Fdb_L2RibPathAny struct {
	*ygnmi.NodePath
}

// MacIpTable (container): Operational state container for MAC-IP address information installed
// into the MAC VRF of the L2RIB
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-ip-table"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table"
func (n *NetworkInstance_Fdb_L2RibPath) MacIpTable() *NetworkInstance_Fdb_L2Rib_MacIpTablePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-ip-table"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacIpTable (container): Operational state container for MAC-IP address information installed
// into the MAC VRF of the L2RIB
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-ip-table"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table"
func (n *NetworkInstance_Fdb_L2RibPathAny) MacIpTable() *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-ip-table"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacTable (container): Operational state container for MAC address information installed
// into the MAC VRF of the L2RIB
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-table"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table"
func (n *NetworkInstance_Fdb_L2RibPath) MacTable() *NetworkInstance_Fdb_L2Rib_MacTablePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacTable (container): Operational state container for MAC address information installed
// into the MAC VRF of the L2RIB
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-table"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table"
func (n *NetworkInstance_Fdb_L2RibPathAny) MacTable() *NetworkInstance_Fdb_L2Rib_MacTablePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2RibPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib](
		"NetworkInstance_Fdb_L2Rib",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2RibPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib](
		"NetworkInstance_Fdb_L2Rib",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTablePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTablePathAny struct {
	*ygnmi.NodePath
}

// EntryAny (list): List of learned MAC-IP addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) EntryAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "host-ip": "*"},
			n,
		),
	}
	return ps
}

// EntryAny (list): List of learned MAC-IP addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) EntryAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "host-ip": "*"},
			n,
		),
	}
	return ps
}

// WithMacAddress sets NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny's key "mac-address" to the specified value.
// MacAddress: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) WithMacAddress(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	ygnmi.ModifyKey(n.NodePath, "mac-address", MacAddress)
	return n
}

// WithHostIp sets NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny's key "host-ip" to the specified value.
// HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) WithHostIp(HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	ygnmi.ModifyKey(n.NodePath, "host-ip", HostIp)
	return n
}

// Entry (list): List of learned MAC-IP addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
//
//	MacAddress: string
//	HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) Entry(MacAddress string, HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "host-ip": HostIp},
			n,
		),
	}
	return ps
}

// Entry (list): List of learned MAC-IP addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
//
//	MacAddress: string
//	HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) Entry(MacAddress string, HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "host-ip": HostIp},
			n,
		),
	}
	return ps
}

// EntryMap (list): List of learned MAC-IP addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) EntryMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EntryMap (list): List of learned MAC-IP addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) EntryMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHopMap (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopMap (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHopGroupAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHopGroupAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group"
//
//	Id: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHopGroup(Id uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group"
//
//	Id: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHopGroup(Id uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NextHopGroupMap (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHopGroupMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroupMap (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHopGroupMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).Evi
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).Evi
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/host-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).HostIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/host-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).HostIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "host-ip"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"host-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).HostIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "host-ip"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"host-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).HostIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).L2Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).L2Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l3-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).L3Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l3-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).L3Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-address"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-address"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMapAny struct {
	*ygnmi.NodePath
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Evi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Evi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HostIp (leaf): Host IP address of the CE device for the L2RIB MAC-IP entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/host-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/*/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) HostIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "host-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HostIp (leaf): Host IP address of the CE device for the L2RIB MAC-IP entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/host-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/*/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) HostIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "host-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) L2Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) L2Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L3Vni (leaf): Symmetric IRB uses the same forwarding semantics when routing
// between IP subnets with VRF Lite or MPLS L3VPNs. With symmetric IRB,
// all traffic egressing and returning from a VTEP uses the same VNI.
// Specifically, the same Layer 3 VNI (L3VNI) associated with the VRF
// is used for all routed traffic. Layer3 VNI used for inter-subnet
// routing
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) L3Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l3-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L3Vni (leaf): Symmetric IRB uses the same forwarding semantics when routing
// between IP subnets with VRF Lite or MPLS L3VPNs. With symmetric IRB,
// all traffic egressing and returning from a VTEP uses the same VNI.
// Specifically, the same Layer 3 VNI (L3VNI) associated with the VRF
// is used for all routed traffic. Layer3 VNI used for inter-subnet
// routing
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) L3Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l3-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/*/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) MacAddress() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/*/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProducerAny (list): List of producers for each MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
	return ps
}

// ProducerAny (list): List of producers for each MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
	return ps
}

// Producer (list): List of producers for each MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
//
//	Producer: oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Producer(Producer oc.E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
	return ps
}

// Producer (list): List of producers for each MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
//
//	Producer: oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Producer(Producer oc.E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
	return ps
}

// ProducerMap (list): List of producers for each MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) ProducerMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProducerMap (list): List of producers for each MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) ProducerMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Vlan() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Key]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Key]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Key]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Key]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Key]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Key]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath) State() ygnmi.SingletonQuery[oc.E_Producer_MobilityState] {
	return ygnmi.NewSingletonQuery[oc.E_Producer_MobilityState](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_MobilityState, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).MobilityState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny) State() ygnmi.WildcardQuery[oc.E_Producer_MobilityState] {
	return ygnmi.NewWildcardQuery[oc.E_Producer_MobilityState](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_MobilityState, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).MobilityState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).NextHop
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).NextHop
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath) State() ygnmi.SingletonQuery[[]uint64] {
	return ygnmi.NewSingletonQuery[[]uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).NextHopGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny) State() ygnmi.WildcardQuery[[]uint64] {
	return ygnmi.NewWildcardQuery[[]uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).NextHopGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath) State() ygnmi.SingletonQuery[oc.E_Producer_Producer] {
	return ygnmi.NewSingletonQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny) State() ygnmi.WildcardQuery[oc.E_Producer_Producer] {
	return ygnmi.NewWildcardQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producer"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath) Config() ygnmi.ConfigQuery[oc.E_Producer_Producer] {
	return ygnmi.NewConfigQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producer"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny) Config() ygnmi.WildcardQuery[oc.E_Producer_Producer] {
	return ygnmi.NewWildcardQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).SeqNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).SeqNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Sticky
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Sticky
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMapAny struct {
	*ygnmi.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI) for local and remote routes.
// ESI is used to resolve the next-hop-group. All mac-addresses
// learned with the same ESI should point to the same next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI) for local and remote routes.
// ESI is used to resolve the next-hop-group. All mac-addresses
// learned with the same ESI should point to the same next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) MobilityState() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) MobilityState() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) NextHop() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) NextHop() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopGroup (leaf-list): Leafref next-hop-group for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) NextHopGroup() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopGroup (leaf-list): Leafref next-hop-group for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) NextHopGroup() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Producer (leaf): Source of the learned L2RIB route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/*/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Producer() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "producer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Producer (leaf): Source of the learned L2RIB route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/*/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Producer() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "producer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Sticky() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Sticky() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMap) State() ygnmi.SingletonQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer] {
	return ygnmi.NewSingletonQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).Producer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:producers"},
			PostRelPath: []string{"openconfig-network-instance:producer"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer] {
	return ygnmi.NewWildcardQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).Producer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:producers"},
			PostRelPath: []string{"openconfig-network-instance:producer"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Label
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Label
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).PeerIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).PeerIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Resolved
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Resolved
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A unique entry for the next-hop.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A unique entry for the next-hop.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Interface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Interface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): Next hop label representing the l2vni for the route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Label() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): Next hop label representing the l2vni for the route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Label() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerIp (leaf): Next hop peer address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) PeerIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerIp (leaf): Next hop peer address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) PeerIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resolved (leaf): Indicates if the path is eligible for forwarding as per evpn mass
// withdraw procedures as defined in RFC 7432
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Resolved() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resolved (leaf): Indicates if the path is eligible for forwarding as per evpn mass
// withdraw procedures as defined in RFC 7432
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Resolved() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Subinterface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Subinterface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath) State() ygnmi.SingletonQuery[oc.E_NextHopGroup_Type] {
	return ygnmi.NewSingletonQuery[oc.E_NextHopGroup_Type](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NextHopGroup_Type, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny) State() ygnmi.WildcardQuery[oc.E_NextHopGroup_Type] {
	return ygnmi.NewWildcardQuery[oc.E_NextHopGroup_Type](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NextHopGroup_Type, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMapAny struct {
	*ygnmi.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the next-hop-group. This index is not
// expected to be consistent across reboots, or reprogramming of
// the next-hop-group. When updating a next-hop-group, if the group
// is removed by the system or assigned an alternate identifier, the
// system should send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group is changed,
// all L2RIB entries that reference it must also be updated.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/*/id"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) Id() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the next-hop-group. This index is not
// expected to be consistent across reboots, or reprogramming of
// the next-hop-group. When updating a next-hop-group, if the group
// is removed by the system or assigned an alternate identifier, the
// system should send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group is changed,
// all L2RIB entries that reference it must also be updated.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/*/id"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) Id() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHop (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHop (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHopMap (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopMap (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Type of next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) Type() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Type of next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) Type() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable).NextHopGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hop-groups"},
			PostRelPath: []string{"openconfig-network-instance:next-hop-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable).NextHopGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hop-groups"},
			PostRelPath: []string{"openconfig-network-instance:next-hop-group"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Index (leaf): A reference to the identifier for the next-hop to which the entry in the
// next-hop group corresponds.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A reference to the identifier for the next-hop to which the entry in the
// next-hop group corresponds.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTablePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTablePathAny struct {
	*ygnmi.NodePath
}

// EntryAny (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) EntryAny() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
	return ps
}

// EntryAny (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) EntryAny() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
	return ps
}

// Entry (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
//
//	MacAddress: string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) Entry(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_EntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
	return ps
}

// Entry (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
//
//	MacAddress: string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) Entry(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
	return ps
}

// EntryMap (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) EntryMap() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EntryMap (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) EntryMap() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHopMap (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopMap (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopGroupAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopGroupAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
//
//	Id: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopGroup(Id uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
//
//	Id: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopGroup(Id uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NextHopGroupMap (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopGroupMap() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroupMap (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopGroupMap() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).Evi
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).Evi
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).L2Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).L2Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-address"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-address"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMapAny struct {
	*ygnmi.NodePath
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Evi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Evi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) L2Vni() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) L2Vni() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/*/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) MacAddress() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/*/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProducerAny (list): List of producers for each MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
	return ps
}

// ProducerAny (list): List of producers for each MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
	return ps
}

// Producer (list): List of producers for each MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
//
//	Producer: oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Producer(Producer oc.E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
	return ps
}

// Producer (list): List of producers for each MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
//
//	Producer: oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Producer(Producer oc.E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
	return ps
}

// ProducerMap (list): List of producers for each MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) ProducerMap() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProducerMap (list): List of producers for each MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) ProducerMap() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Vlan() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/derived-from-mac-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).DerivedFromMacIp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/derived-from-mac-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).DerivedFromMacIp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/directly-received"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "directly-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).DirectlyReceived
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/directly-received"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "directly-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).DirectlyReceived
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath) State() ygnmi.SingletonQuery[oc.E_Producer_MobilityState] {
	return ygnmi.NewSingletonQuery[oc.E_Producer_MobilityState](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_MobilityState, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).MobilityState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny) State() ygnmi.WildcardQuery[oc.E_Producer_MobilityState] {
	return ygnmi.NewWildcardQuery[oc.E_Producer_MobilityState](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_MobilityState, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).MobilityState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).NextHop
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).NextHop
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath) State() ygnmi.SingletonQuery[[]uint64] {
	return ygnmi.NewSingletonQuery[[]uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).NextHopGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny) State() ygnmi.WildcardQuery[[]uint64] {
	return ygnmi.NewWildcardQuery[[]uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).NextHopGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath) State() ygnmi.SingletonQuery[oc.E_Producer_Producer] {
	return ygnmi.NewSingletonQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny) State() ygnmi.WildcardQuery[oc.E_Producer_Producer] {
	return ygnmi.NewWildcardQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producer"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath) Config() ygnmi.ConfigQuery[oc.E_Producer_Producer] {
	return ygnmi.NewConfigQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producer"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny) Config() ygnmi.WildcardQuery[oc.E_Producer_Producer] {
	return ygnmi.NewWildcardQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).SeqNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).SeqNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Sticky
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Sticky
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMapAny struct {
	*ygnmi.NodePath
}

// DerivedFromMacIp (leaf): Derived from BGP MAC-IP route-type 2
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/derived-from-mac-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) DerivedFromMacIp() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DerivedFromMacIp (leaf): Derived from BGP MAC-IP route-type 2
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/derived-from-mac-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) DerivedFromMacIp() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DirectlyReceived (leaf): BGP learned MAC route-type 2
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/directly-received"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) DirectlyReceived() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "directly-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DirectlyReceived (leaf): BGP learned MAC route-type 2
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/directly-received"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) DirectlyReceived() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "directly-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI) for local and remote routes.
// ESI is used to resolve the next-hop-group. All mac-addresses
// learned with the same ESI should point to the same next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI) for local and remote routes.
// ESI is used to resolve the next-hop-group. All mac-addresses
// learned with the same ESI should point to the same next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) MobilityState() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) MobilityState() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) NextHop() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) NextHop() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopGroup (leaf-list): Leafref next-hop-group for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) NextHopGroup() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopGroup (leaf-list): Leafref next-hop-group for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) NextHopGroup() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Producer (leaf): Source of the learned L2RIB route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/*/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Producer() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "producer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Producer (leaf): Source of the learned L2RIB route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/*/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Producer() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "producer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Sticky() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Sticky() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMap) State() ygnmi.SingletonQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer] {
	return ygnmi.NewSingletonQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).Producer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:producers"},
			PostRelPath: []string{"openconfig-network-instance:producer"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer] {
	return ygnmi.NewWildcardQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).Producer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:producers"},
			PostRelPath: []string{"openconfig-network-instance:producer"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Label
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Label
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).PeerIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).PeerIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Resolved
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Resolved
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A unique entry for the next-hop.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A unique entry for the next-hop.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Interface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Interface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): Next hop label representing the l2vni for the route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Label() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): Next hop label representing the l2vni for the route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Label() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerIp (leaf): Next hop peer address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) PeerIp() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerIp (leaf): Next hop peer address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) PeerIp() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resolved (leaf): Indicates if the path is eligible for forwarding as per evpn mass
// withdraw procedures as defined in RFC 7432
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Resolved() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resolved (leaf): Indicates if the path is eligible for forwarding as per evpn mass
// withdraw procedures as defined in RFC 7432
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Resolved() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Subinterface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Subinterface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath) State() ygnmi.SingletonQuery[oc.E_NextHopGroup_Type] {
	return ygnmi.NewSingletonQuery[oc.E_NextHopGroup_Type](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NextHopGroup_Type, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny) State() ygnmi.WildcardQuery[oc.E_NextHopGroup_Type] {
	return ygnmi.NewWildcardQuery[oc.E_NextHopGroup_Type](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NextHopGroup_Type, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMapAny struct {
	*ygnmi.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the next-hop-group. This index is not
// expected to be consistent across reboots, or reprogramming of
// the next-hop-group. When updating a next-hop-group, if the group
// is removed by the system or assigned an alternate identifier, the
// system should send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group is changed,
// all L2RIB entries that reference it must also be updated.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/*/id"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) Id() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the next-hop-group. This index is not
// expected to be consistent across reboots, or reprogramming of
// the next-hop-group. When updating a next-hop-group, if the group
// is removed by the system or assigned an alternate identifier, the
// system should send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group is changed,
// all L2RIB entries that reference it must also be updated.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/*/id"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) Id() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHop (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHop (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHopMap (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopMap (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Type of next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) Type() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Type of next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) Type() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable).NextHopGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hop-groups"},
			PostRelPath: []string{"openconfig-network-instance:next-hop-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable).NextHopGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hop-groups"},
			PostRelPath: []string{"openconfig-network-instance:next-hop-group"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Index (leaf): A reference to the identifier for the next-hop to which the entry in the
// next-hop group corresponds.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A reference to the identifier for the next-hop to which the entry in the
// next-hop group corresponds.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacMobility_MacMobilityPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacMobility_MacMobilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-mobility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobility
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-mobility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobility
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-mobility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobility
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-mobility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobility
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-window YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-window YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-mobility-window"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-mobility-window"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityWindow
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-mobility-window"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-mobility-window"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityWindow
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-mobility-window"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-mobility-window"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityWindow
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-mobility-window"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-mobility-window"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityWindow
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacMobilityPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobilityPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacMobilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobilityPathAny struct {
	*ygnmi.NodePath
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobilityPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath {
	ps := &NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny {
	ps := &NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPath) IpMobilityThreshold() *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath {
	ps := &NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny {
	ps := &NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobility (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its MAC address) to move from one
// Ethernet segment to another; this is referred to as 'MAC Mobility'
// or 'MAC move. The configuration attributes includes: mac-mobility-window
// and mac-mobility-threshold
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobility() *NetworkInstance_Fdb_MacMobility_MacMobilityPath {
	ps := &NetworkInstance_Fdb_MacMobility_MacMobilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-mobility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobility (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its MAC address) to move from one
// Ethernet segment to another; this is referred to as 'MAC Mobility'
// or 'MAC move. The configuration attributes includes: mac-mobility-window
// and mac-mobility-threshold
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobility() *NetworkInstance_Fdb_MacMobility_MacMobilityPathAny {
	ps := &NetworkInstance_Fdb_MacMobility_MacMobilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-mobility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobilityThreshold (leaf): The number of MAC mobility events that are detected for a
// given MAC address within the detection-window before it is identified
// as a duplicate MAC address. Once the detection threshold is reached,
// updates for the MAC address are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobilityThreshold() *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath {
	ps := &NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobilityThreshold (leaf): The number of MAC mobility events that are detected for a
// given MAC address within the detection-window before it is identified
// as a duplicate MAC address. Once the detection threshold is reached,
// updates for the MAC address are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobilityThreshold() *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny {
	ps := &NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobilityWindow (leaf): The time interval used in detecting a duplicate MAC address.
// The value can be from 5 through 600 seconds.
// The default is 180 seconds
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-mobility-window"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobilityWindow() *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath {
	ps := &NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-mobility-window"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobilityWindow (leaf): The time interval used in detecting a duplicate MAC address.
// The value can be from 5 through 600 seconds.
// The default is 180 seconds
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-mobility-window"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobilityWindow() *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny {
	ps := &NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-mobility-window"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacMobilityPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_MacMobility] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_MacMobility](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacMobilityPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacMobility] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacMobility](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacMobilityPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_MacMobility] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_MacMobility](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacMobilityPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacMobility] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacMobility](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table YANG schema element.
type NetworkInstance_Fdb_MacTablePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table YANG schema element.
type NetworkInstance_Fdb_MacTablePathAny struct {
	*ygnmi.NodePath
}

// EntryAny (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_MacTablePath) EntryAny() *NetworkInstance_Fdb_MacTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": "*"},
			n,
		),
	}
	return ps
}

// EntryAny (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryAny() *NetworkInstance_Fdb_MacTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": "*"},
			n,
		),
	}
	return ps
}

// WithMacAddress sets NetworkInstance_Fdb_MacTable_EntryPathAny's key "mac-address" to the specified value.
// MacAddress: string
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) WithMacAddress(MacAddress string) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	ygnmi.ModifyKey(n.NodePath, "mac-address", MacAddress)
	return n
}

// WithVlan sets NetworkInstance_Fdb_MacTable_EntryPathAny's key "vlan" to the specified value.
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) WithVlan(Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	ygnmi.ModifyKey(n.NodePath, "vlan", Vlan)
	return n
}

// Entry (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry"
//
//	MacAddress: string
//	Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePath) Entry(MacAddress string, Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPath {
	ps := &NetworkInstance_Fdb_MacTable_EntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": Vlan},
			n,
		),
	}
	return ps
}

// Entry (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry"
//
//	MacAddress: string
//	Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) Entry(MacAddress string, Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": Vlan},
			n,
		),
	}
	return ps
}

// EntryMap (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_MacTablePath) EntryMap() *NetworkInstance_Fdb_MacTable_EntryPathMap {
	ps := &NetworkInstance_Fdb_MacTable_EntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EntryMap (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryMap() *NetworkInstance_Fdb_MacTable_EntryPathMapAny {
	ps := &NetworkInstance_Fdb_MacTable_EntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTablePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_MacTable] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_MacTable](
		"NetworkInstance_Fdb_MacTable",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTablePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable](
		"NetworkInstance_Fdb_MacTable",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTablePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_MacTable] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_MacTable](
		"NetworkInstance_Fdb_MacTable",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTablePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable](
		"NetworkInstance_Fdb_MacTable",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_AgePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/age YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_AgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_AgePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/age YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_AgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/age"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_Entry_AgePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Age
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/age"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_Entry_AgePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Age
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_EntryTypePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EntryTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/entry-type"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_Entry_EntryTypePath) State() ygnmi.SingletonQuery[oc.E_Entry_EntryType] {
	return ygnmi.NewSingletonQuery[oc.E_Entry_EntryType](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "entry-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Entry_EntryType, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).EntryType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/entry-type"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny) State() ygnmi.WildcardQuery[oc.E_Entry_EntryType] {
	return ygnmi.NewWildcardQuery[oc.E_Entry_EntryType](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "entry-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Entry_EntryType, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).EntryType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EviPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EviPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_Entry_EviPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Evi
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_Entry_EviPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Evi
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_MacAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_MacTable_Entry_MacAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/config/mac-address"
func (n *NetworkInstance_Fdb_MacTable_Entry_MacAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/config/mac-address"
func (n *NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_VlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_VlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_MacTable_Entry_VlanPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_MacTable_Entry_VlanPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/config/vlan"
func (n *NetworkInstance_Fdb_MacTable_Entry_VlanPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_MacTable_Entry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/config/vlan"
func (n *NetworkInstance_Fdb_MacTable_Entry_VlanPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacTable_Entry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacTable_EntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacTable_EntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPathMapAny struct {
	*ygnmi.NodePath
}

// Age (leaf): The time in seconds since the MAC address has been in the
// table
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/age"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Age() *NetworkInstance_Fdb_MacTable_Entry_AgePath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time in seconds since the MAC address has been in the
// table
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/age"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Age() *NetworkInstance_Fdb_MacTable_Entry_AgePathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EntryType (leaf): Indicates whether the entry was statically configured, or
// dynamically learned.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/entry-type"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) EntryType() *NetworkInstance_Fdb_MacTable_Entry_EntryTypePath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_EntryTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "entry-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EntryType (leaf): Indicates whether the entry was statically configured, or
// dynamically learned.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/entry-type"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) EntryType() *NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "entry-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Evi (leaf): EVPN EVI to associate with the BD/VLAN
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Evi() *NetworkInstance_Fdb_MacTable_Entry_EviPath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_EviPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Evi (leaf): EVPN EVI to associate with the BD/VLAN
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Evi() *NetworkInstance_Fdb_MacTable_Entry_EviPathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_EviPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (container): Reference to the base and/or subinterface for the
// MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Interface() *NetworkInstance_Fdb_MacTable_Entry_InterfacePath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Interface (container): Reference to the base and/or subinterface for the
// MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Interface() *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacAddress (leaf): MAC address for the dynamic or static MAC table
// entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/*/mac-address"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) MacAddress() *NetworkInstance_Fdb_MacTable_Entry_MacAddressPath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_MacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): MAC address for the dynamic or static MAC table
// entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/*/mac-address"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vlan (leaf): VLAN on which the MAC address is present. The same MAC
// address may be seen on multiple VLANs in some cases.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/*/vlan"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Vlan() *NetworkInstance_Fdb_MacTable_Entry_VlanPath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_VlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vlan (leaf): VLAN on which the MAC address is present. The same MAC
// address may be seen on multiple VLANs in some cases.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/*/vlan"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_MacTable_Entry_VlanPathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable_Entry",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable_Entry",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPathMap) Config() ygnmi.ConfigQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewConfigQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPathMapAny) Config() ygnmi.WildcardQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// NetworkInstance_Fdb_MacTable_Entry_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny struct {
	*ygnmi.NodePath
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref"
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePath) InterfaceRef() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref"
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny) InterfaceRef() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface](
		"NetworkInstance_Fdb_MacTable_Entry_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface](
		"NetworkInstance_Fdb_MacTable_Entry_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface](
		"NetworkInstance_Fdb_MacTable_Entry_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface](
		"NetworkInstance_Fdb_MacTable_Entry_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/*/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) Interface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/*/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_NdProxy_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/enable YANG schema element.
type NetworkInstance_Fdb_NdProxy_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_NdProxy_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/enable YANG schema element.
type NetworkInstance_Fdb_NdProxy_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/enable"
func (n *NetworkInstance_Fdb_NdProxy_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/enable"
func (n *NetworkInstance_Fdb_NdProxy_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/enable"
func (n *NetworkInstance_Fdb_NdProxy_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/enable"
func (n *NetworkInstance_Fdb_NdProxy_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_NdProxy_NdSuppressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/nd-suppression YANG schema element.
type NetworkInstance_Fdb_NdProxy_NdSuppressionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/nd-suppression YANG schema element.
type NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/nd-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxy_NdSuppressionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nd-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).NdSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/nd-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nd-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).NdSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/nd-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxy_NdSuppressionPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "nd-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).NdSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/nd-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "nd-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).NdSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_NdProxyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy YANG schema element.
type NetworkInstance_Fdb_NdProxyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_NdProxyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy YANG schema element.
type NetworkInstance_Fdb_NdProxyPathAny struct {
	*ygnmi.NodePath
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxyPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath {
	ps := &NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxyPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny {
	ps := &NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
// proxy. If true a proxy server on the network answers the
// NDP packets for an IP address that is not on that network.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/enable"
func (n *NetworkInstance_Fdb_NdProxyPath) Enable() *NetworkInstance_Fdb_NdProxy_EnablePath {
	ps := &NetworkInstance_Fdb_NdProxy_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
// proxy. If true a proxy server on the network answers the
// NDP packets for an IP address that is not on that network.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/enable"
func (n *NetworkInstance_Fdb_NdProxyPathAny) Enable() *NetworkInstance_Fdb_NdProxy_EnablePathAny {
	ps := &NetworkInstance_Fdb_NdProxy_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxyPath) IpMobilityThreshold() *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath {
	ps := &NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxyPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny {
	ps := &NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NdSuppression (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
// If true the NDP queries for an IP address that is not on that
// network are suppressed. NDP suppression is a
// technique used to reduce the amount of NDP Packets
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/nd-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxyPath) NdSuppression() *NetworkInstance_Fdb_NdProxy_NdSuppressionPath {
	ps := &NetworkInstance_Fdb_NdProxy_NdSuppressionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "nd-suppression"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NdSuppression (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
// If true the NDP queries for an IP address that is not on that
// network are suppressed. NDP suppression is a
// technique used to reduce the amount of NDP Packets
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/nd-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxyPathAny) NdSuppression() *NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny {
	ps := &NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "nd-suppression"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_NdProxyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_NdProxy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_NdProxy](
		"NetworkInstance_Fdb_NdProxy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_NdProxyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_NdProxy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_NdProxy](
		"NetworkInstance_Fdb_NdProxy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_NdProxyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_NdProxy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_NdProxy](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_NdProxyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_NdProxy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_NdProxy](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePoliciesPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies YANG schema element.
type NetworkInstance_InterInstancePoliciesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_InterInstancePoliciesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies YANG schema element.
type NetworkInstance_InterInstancePoliciesPathAny struct {
	*ygnmi.NodePath
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "apply-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy"
func (n *NetworkInstance_InterInstancePoliciesPath) ApplyPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicyPath {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "apply-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy"
func (n *NetworkInstance_InterInstancePoliciesPathAny) ApplyPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "import-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy"
func (n *NetworkInstance_InterInstancePoliciesPath) ImportExportPolicy() *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath {
	ps := &NetworkInstance_InterInstancePolicies_ImportExportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "import-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy"
func (n *NetworkInstance_InterInstancePoliciesPathAny) ImportExportPolicy() *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePoliciesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_InterInstancePolicies] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_InterInstancePolicies](
		"NetworkInstance_InterInstancePolicies",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePoliciesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_InterInstancePolicies] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_InterInstancePolicies](
		"NetworkInstance_InterInstancePolicies",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePoliciesPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_InterInstancePolicies] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_InterInstancePolicies](
		"NetworkInstance_InterInstancePolicies",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePoliciesPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_InterInstancePolicies] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_InterInstancePolicies](
		"NetworkInstance_InterInstancePolicies",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ApplyPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny struct {
	*ygnmi.NodePath
}

// DefaultExportPolicy (leaf): explicitly set a default policy if no policy definition
// in the export policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) DefaultExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-export-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultExportPolicy (leaf): explicitly set a default policy if no policy definition
// in the export policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) DefaultExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-export-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) DefaultImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) DefaultImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExportPolicy (leaf-list): list of policy names in sequence to be applied on
// sending a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) ExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExportPolicy (leaf-list): list of policy names in sequence to be applied on
// sending a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) ExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) ImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) ImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath) State() ygnmi.SingletonQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewSingletonQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny) State() ygnmi.WildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath) Config() ygnmi.ConfigQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewConfigQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny) Config() ygnmi.WildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath) State() ygnmi.SingletonQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewSingletonQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny) State() ygnmi.WildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath) Config() ygnmi.ConfigQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewConfigQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny) Config() ygnmi.WildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny struct {
	*ygnmi.NodePath
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/*/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) ExportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath {
	ps := &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/*/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) ExportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/*/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) ImportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath {
	ps := &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/*/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) ImportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Interface_AssociatedAddressFamiliesPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/associated-address-families YANG schema element.
type NetworkInstance_Interface_AssociatedAddressFamiliesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Interface_AssociatedAddressFamiliesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/associated-address-families YANG schema element.
type NetworkInstance_Interface_AssociatedAddressFamiliesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-address-families"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/associated-address-families"
func (n *NetworkInstance_Interface_AssociatedAddressFamiliesPath) State() ygnmi.SingletonQuery[[]oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewSingletonQuery[[]oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-address-families"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).AssociatedAddressFamilies
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-address-families"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/associated-address-families"
func (n *NetworkInstance_Interface_AssociatedAddressFamiliesPathAny) State() ygnmi.WildcardQuery[[]oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewWildcardQuery[[]oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-address-families"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).AssociatedAddressFamilies
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/associated-address-families"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/associated-address-families"
func (n *NetworkInstance_Interface_AssociatedAddressFamiliesPath) Config() ygnmi.ConfigQuery[[]oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewConfigQuery[[]oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "associated-address-families"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).AssociatedAddressFamilies
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/associated-address-families"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/associated-address-families"
func (n *NetworkInstance_Interface_AssociatedAddressFamiliesPathAny) Config() ygnmi.WildcardQuery[[]oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewWildcardQuery[[]oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "associated-address-families"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).AssociatedAddressFamilies
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Interface_IdPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/id YANG schema element.
type NetworkInstance_Interface_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Interface_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/id YANG schema element.
type NetworkInstance_Interface_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/id"
func (n *NetworkInstance_Interface_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/id"
func (n *NetworkInstance_Interface_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/id"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/id"
func (n *NetworkInstance_Interface_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/id"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/id"
func (n *NetworkInstance_Interface_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Interface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/interface YANG schema element.
type NetworkInstance_Interface_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Interface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/interface YANG schema element.
type NetworkInstance_Interface_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/interface"
func (n *NetworkInstance_Interface_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/interface"
func (n *NetworkInstance_Interface_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/interface"
func (n *NetworkInstance_Interface_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/interface"
func (n *NetworkInstance_Interface_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Interface_IrbAnycastGatewayPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/irb-anycast-gateway YANG schema element.
type NetworkInstance_Interface_IrbAnycastGatewayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Interface_IrbAnycastGatewayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/irb-anycast-gateway YANG schema element.
type NetworkInstance_Interface_IrbAnycastGatewayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/irb-anycast-gateway"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/irb-anycast-gateway"
func (n *NetworkInstance_Interface_IrbAnycastGatewayPath) State() ygnmi.SingletonQuery[oc.E_Interface_IrbAnycastGateway] {
	return ygnmi.NewSingletonQuery[oc.E_Interface_IrbAnycastGateway](
		"NetworkInstance_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "irb-anycast-gateway"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_IrbAnycastGateway, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).IrbAnycastGateway
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/irb-anycast-gateway"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/irb-anycast-gateway"
func (n *NetworkInstance_Interface_IrbAnycastGatewayPathAny) State() ygnmi.WildcardQuery[oc.E_Interface_IrbAnycastGateway] {
	return ygnmi.NewWildcardQuery[oc.E_Interface_IrbAnycastGateway](
		"NetworkInstance_Interface",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "irb-anycast-gateway"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_IrbAnycastGateway, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).IrbAnycastGateway
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/irb-anycast-gateway"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/irb-anycast-gateway"
func (n *NetworkInstance_Interface_IrbAnycastGatewayPath) Config() ygnmi.ConfigQuery[oc.E_Interface_IrbAnycastGateway] {
	return ygnmi.NewConfigQuery[oc.E_Interface_IrbAnycastGateway](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "irb-anycast-gateway"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_IrbAnycastGateway, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).IrbAnycastGateway
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/irb-anycast-gateway"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/irb-anycast-gateway"
func (n *NetworkInstance_Interface_IrbAnycastGatewayPathAny) Config() ygnmi.WildcardQuery[oc.E_Interface_IrbAnycastGateway] {
	return ygnmi.NewWildcardQuery[oc.E_Interface_IrbAnycastGateway](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "irb-anycast-gateway"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_IrbAnycastGateway, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).IrbAnycastGateway
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Interface_MacPinningPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/mac-pinning YANG schema element.
type NetworkInstance_Interface_MacPinningPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Interface_MacPinningPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/mac-pinning YANG schema element.
type NetworkInstance_Interface_MacPinningPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-pinning"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/mac-pinning"
func (n *NetworkInstance_Interface_MacPinningPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-pinning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).MacPinning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-pinning"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/mac-pinning"
func (n *NetworkInstance_Interface_MacPinningPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-pinning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).MacPinning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-pinning"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/mac-pinning"
func (n *NetworkInstance_Interface_MacPinningPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-pinning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).MacPinning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-pinning"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/mac-pinning"
func (n *NetworkInstance_Interface_MacPinningPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-pinning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).MacPinning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Interface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/subinterface YANG schema element.
type NetworkInstance_Interface_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Interface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/subinterface YANG schema element.
type NetworkInstance_Interface_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/subinterface"
func (n *NetworkInstance_Interface_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/subinterface"
func (n *NetworkInstance_Interface_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/subinterface"
func (n *NetworkInstance_Interface_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/subinterface"
func (n *NetworkInstance_Interface_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// AssociatedAddressFamilies (leaf-list): The address families on the subinterface which are to be
// associated with this network instance. When this leaf-list
// is empty and the network instance requires Layer 3 information
// the address families for which the network instance is
// enabled should be imported. If the value of this leaf-list
// is specified then the association MUST only be made for
// those address families that are included in the list.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/associated-address-families"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/associated-address-families"
func (n *NetworkInstance_InterfacePath) AssociatedAddressFamilies() *NetworkInstance_Interface_AssociatedAddressFamiliesPath {
	ps := &NetworkInstance_Interface_AssociatedAddressFamiliesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "associated-address-families"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociatedAddressFamilies (leaf-list): The address families on the subinterface which are to be
// associated with this network instance. When this leaf-list
// is empty and the network instance requires Layer 3 information
// the address families for which the network instance is
// enabled should be imported. If the value of this leaf-list
// is specified then the association MUST only be made for
// those address families that are included in the list.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/associated-address-families"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/associated-address-families"
func (n *NetworkInstance_InterfacePathAny) AssociatedAddressFamilies() *NetworkInstance_Interface_AssociatedAddressFamiliesPathAny {
	ps := &NetworkInstance_Interface_AssociatedAddressFamiliesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "associated-address-families"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for this interface - this is expressed
// as a free-text string
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/id"
func (n *NetworkInstance_InterfacePath) Id() *NetworkInstance_Interface_IdPath {
	ps := &NetworkInstance_Interface_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for this interface - this is expressed
// as a free-text string
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/id"
func (n *NetworkInstance_InterfacePathAny) Id() *NetworkInstance_Interface_IdPathAny {
	ps := &NetworkInstance_Interface_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/interface"
func (n *NetworkInstance_InterfacePath) Interface() *NetworkInstance_Interface_InterfacePath {
	ps := &NetworkInstance_Interface_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/interface"
func (n *NetworkInstance_InterfacePathAny) Interface() *NetworkInstance_Interface_InterfacePathAny {
	ps := &NetworkInstance_Interface_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IrbAnycastGateway (leaf): Associate VLAN SVI with anycast Gateway.
// The SVI is the layer3 interface for the mac-vrf
// when the SVI is being used as the first hop default gw.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/irb-anycast-gateway"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/irb-anycast-gateway"
func (n *NetworkInstance_InterfacePath) IrbAnycastGateway() *NetworkInstance_Interface_IrbAnycastGatewayPath {
	ps := &NetworkInstance_Interface_IrbAnycastGatewayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "irb-anycast-gateway"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IrbAnycastGateway (leaf): Associate VLAN SVI with anycast Gateway.
// The SVI is the layer3 interface for the mac-vrf
// when the SVI is being used as the first hop default gw.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/irb-anycast-gateway"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/irb-anycast-gateway"
func (n *NetworkInstance_InterfacePathAny) IrbAnycastGateway() *NetworkInstance_Interface_IrbAnycastGatewayPathAny {
	ps := &NetworkInstance_Interface_IrbAnycastGatewayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "irb-anycast-gateway"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacPinning (leaf): Enable (TRUE) or disable (FALSE). There are scenarios in which
// it is desired to configure some MAC addresses as static so
// that they are not subjected to MAC moves. If you enable MAC pinning
// on a CE interface, that MAC address cannot be moved to any
// other CE interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-pinning"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/mac-pinning"
func (n *NetworkInstance_InterfacePath) MacPinning() *NetworkInstance_Interface_MacPinningPath {
	ps := &NetworkInstance_Interface_MacPinningPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-pinning"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacPinning (leaf): Enable (TRUE) or disable (FALSE). There are scenarios in which
// it is desired to configure some MAC addresses as static so
// that they are not subjected to MAC moves. If you enable MAC pinning
// on a CE interface, that MAC address cannot be moved to any
// other CE interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-pinning"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/mac-pinning"
func (n *NetworkInstance_InterfacePathAny) MacPinning() *NetworkInstance_Interface_MacPinningPathAny {
	ps := &NetworkInstance_Interface_MacPinningPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-pinning"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/subinterface"
func (n *NetworkInstance_InterfacePath) Subinterface() *NetworkInstance_Interface_SubinterfacePath {
	ps := &NetworkInstance_Interface_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/subinterface"
func (n *NetworkInstance_InterfacePathAny) Subinterface() *NetworkInstance_Interface_SubinterfacePathAny {
	ps := &NetworkInstance_Interface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Interface](
		"NetworkInstance_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Interface](
		"NetworkInstance_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Interface](
		"NetworkInstance_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Interface](
		"NetworkInstance_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Interface](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Interface, bool) {
			ret := gs.(*oc.NetworkInstance).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Interface](
		"NetworkInstance",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Interface, bool) {
			ret := gs.(*oc.NetworkInstance).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Interface](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Interface, bool) {
			ret := gs.(*oc.NetworkInstance).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Interface](
		"NetworkInstance",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Interface, bool) {
			ret := gs.(*oc.NetworkInstance).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_MplsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls YANG schema element.
type NetworkInstance_MplsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_MplsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls YANG schema element.
type NetworkInstance_MplsPathAny struct {
	*ygnmi.NodePath
}

// Global (container): general mpls configuration applicable to any
// type of LSP and signaling protocol - label ranges,
// entropy label supportmay be added here
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/mpls/global"
func (n *NetworkInstance_MplsPath) Global() *NetworkInstance_Mpls_GlobalPath {
	ps := &NetworkInstance_Mpls_GlobalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Global (container): general mpls configuration applicable to any
// type of LSP and signaling protocol - label ranges,
// entropy label supportmay be added here
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/mpls/global"
func (n *NetworkInstance_MplsPathAny) Global() *NetworkInstance_Mpls_GlobalPathAny {
	ps := &NetworkInstance_Mpls_GlobalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface"
func (n *NetworkInstance_MplsPath) InterfaceAny() *NetworkInstance_Mpls_InterfacePathAny {
	ps := &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface"
func (n *NetworkInstance_MplsPathAny) InterfaceAny() *NetworkInstance_Mpls_InterfacePathAny {
	ps := &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_MplsPath) Interface(InterfaceId string) *NetworkInstance_Mpls_InterfacePath {
	ps := &NetworkInstance_Mpls_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_MplsPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_InterfacePathAny {
	ps := &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface"
func (n *NetworkInstance_MplsPath) InterfaceMap() *NetworkInstance_Mpls_InterfacePathMap {
	ps := &NetworkInstance_Mpls_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface"
func (n *NetworkInstance_MplsPathAny) InterfaceMap() *NetworkInstance_Mpls_InterfacePathMapAny {
	ps := &NetworkInstance_Mpls_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Lsps (container): LSP definitions and configuration
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsps"
//	Path from root:       "/network-instances/network-instance/mpls/lsps"
func (n *NetworkInstance_MplsPath) Lsps() *NetworkInstance_Mpls_LspsPath {
	ps := &NetworkInstance_Mpls_LspsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsps"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Lsps (container): LSP definitions and configuration
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsps"
//	Path from root:       "/network-instances/network-instance/mpls/lsps"
func (n *NetworkInstance_MplsPathAny) Lsps() *NetworkInstance_Mpls_LspsPathAny {
	ps := &NetworkInstance_Mpls_LspsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsps"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SignalingProtocols (container): top-level signaling protocol configuration
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "signaling-protocols"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols"
func (n *NetworkInstance_MplsPath) SignalingProtocols() *NetworkInstance_Mpls_SignalingProtocolsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocolsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"signaling-protocols"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SignalingProtocols (container): top-level signaling protocol configuration
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "signaling-protocols"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols"
func (n *NetworkInstance_MplsPathAny) SignalingProtocols() *NetworkInstance_Mpls_SignalingProtocolsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocolsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"signaling-protocols"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TeGlobalAttributes (container): traffic-engineering global attributes
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-global-attributes"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes"
func (n *NetworkInstance_MplsPath) TeGlobalAttributes() *NetworkInstance_Mpls_TeGlobalAttributesPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-global-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TeGlobalAttributes (container): traffic-engineering global attributes
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-global-attributes"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes"
func (n *NetworkInstance_MplsPathAny) TeGlobalAttributes() *NetworkInstance_Mpls_TeGlobalAttributesPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-global-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_MplsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls](
		"NetworkInstance_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_MplsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls](
		"NetworkInstance_Mpls",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_MplsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls](
		"NetworkInstance_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_MplsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls](
		"NetworkInstance_Mpls",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_NullLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/null-label YANG schema element.
type NetworkInstance_Mpls_Global_NullLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_NullLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/null-label YANG schema element.
type NetworkInstance_Mpls_Global_NullLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/null-label"
//	Path from root:       "/network-instances/network-instance/mpls/global/state/null-label"
func (n *NetworkInstance_Mpls_Global_NullLabelPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_NULL_LABEL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_NULL_LABEL_TYPE](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "null-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_NULL_LABEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).NullLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/null-label"
//	Path from root:       "/network-instances/network-instance/mpls/global/state/null-label"
func (n *NetworkInstance_Mpls_Global_NullLabelPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_NULL_LABEL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_NULL_LABEL_TYPE](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "null-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_NULL_LABEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).NullLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/null-label"
//	Path from root:       "/network-instances/network-instance/mpls/global/config/null-label"
func (n *NetworkInstance_Mpls_Global_NullLabelPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_NULL_LABEL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_NULL_LABEL_TYPE](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "null-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_NULL_LABEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).NullLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/null-label"
//	Path from root:       "/network-instances/network-instance/mpls/global/config/null-label"
func (n *NetworkInstance_Mpls_Global_NullLabelPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_NULL_LABEL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_NULL_LABEL_TYPE](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "null-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_NULL_LABEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).NullLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_PwEncapsulationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/pw-encapsulation YANG schema element.
type NetworkInstance_Mpls_Global_PwEncapsulationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_PwEncapsulationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/pw-encapsulation YANG schema element.
type NetworkInstance_Mpls_Global_PwEncapsulationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pw-encapsulation"
//	Path from root:       "/network-instances/network-instance/mpls/global/state/pw-encapsulation"
func (n *NetworkInstance_Mpls_Global_PwEncapsulationPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pw-encapsulation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).PwEncapsulation
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pw-encapsulation"
//	Path from root:       "/network-instances/network-instance/mpls/global/state/pw-encapsulation"
func (n *NetworkInstance_Mpls_Global_PwEncapsulationPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pw-encapsulation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).PwEncapsulation
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/pw-encapsulation"
//	Path from root:       "/network-instances/network-instance/mpls/global/config/pw-encapsulation"
func (n *NetworkInstance_Mpls_Global_PwEncapsulationPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pw-encapsulation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).PwEncapsulation
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/pw-encapsulation"
//	Path from root:       "/network-instances/network-instance/mpls/global/config/pw-encapsulation"
func (n *NetworkInstance_Mpls_Global_PwEncapsulationPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pw-encapsulation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).PwEncapsulation
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_TtlPropagationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/ttl-propagation YANG schema element.
type NetworkInstance_Mpls_Global_TtlPropagationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_TtlPropagationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/ttl-propagation YANG schema element.
type NetworkInstance_Mpls_Global_TtlPropagationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ttl-propagation"
//	Path from root:       "/network-instances/network-instance/mpls/global/state/ttl-propagation"
func (n *NetworkInstance_Mpls_Global_TtlPropagationPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl-propagation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).TtlPropagation
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ttl-propagation"
//	Path from root:       "/network-instances/network-instance/mpls/global/state/ttl-propagation"
func (n *NetworkInstance_Mpls_Global_TtlPropagationPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl-propagation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).TtlPropagation
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ttl-propagation"
//	Path from root:       "/network-instances/network-instance/mpls/global/config/ttl-propagation"
func (n *NetworkInstance_Mpls_Global_TtlPropagationPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ttl-propagation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).TtlPropagation
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ttl-propagation"
//	Path from root:       "/network-instances/network-instance/mpls/global/config/ttl-propagation"
func (n *NetworkInstance_Mpls_Global_TtlPropagationPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ttl-propagation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).TtlPropagation
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global YANG schema element.
type NetworkInstance_Mpls_GlobalPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global YANG schema element.
type NetworkInstance_Mpls_GlobalPathAny struct {
	*ygnmi.NodePath
}

// InterfaceAny (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface"
func (n *NetworkInstance_Mpls_GlobalPath) InterfaceAny() *NetworkInstance_Mpls_Global_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface"
func (n *NetworkInstance_Mpls_GlobalPathAny) InterfaceAny() *NetworkInstance_Mpls_Global_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Mpls_GlobalPath) Interface(InterfaceId string) *NetworkInstance_Mpls_Global_InterfacePath {
	ps := &NetworkInstance_Mpls_Global_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Mpls_GlobalPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_Global_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface"
func (n *NetworkInstance_Mpls_GlobalPath) InterfaceMap() *NetworkInstance_Mpls_Global_InterfacePathMap {
	ps := &NetworkInstance_Mpls_Global_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface"
func (n *NetworkInstance_Mpls_GlobalPathAny) InterfaceMap() *NetworkInstance_Mpls_Global_InterfacePathMapAny {
	ps := &NetworkInstance_Mpls_Global_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NullLabel (leaf): The null-label type used, implicit or explicit
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/null-label"
//	Path from root:       "/network-instances/network-instance/mpls/global/*/null-label"
func (n *NetworkInstance_Mpls_GlobalPath) NullLabel() *NetworkInstance_Mpls_Global_NullLabelPath {
	ps := &NetworkInstance_Mpls_Global_NullLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "null-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NullLabel (leaf): The null-label type used, implicit or explicit
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/null-label"
//	Path from root:       "/network-instances/network-instance/mpls/global/*/null-label"
func (n *NetworkInstance_Mpls_GlobalPathAny) NullLabel() *NetworkInstance_Mpls_Global_NullLabelPathAny {
	ps := &NetworkInstance_Mpls_Global_NullLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "null-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PwEncapsulation (leaf): The PDU type to use with pseudowires.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/pw-encapsulation"
//	Path from root:       "/network-instances/network-instance/mpls/global/*/pw-encapsulation"
func (n *NetworkInstance_Mpls_GlobalPath) PwEncapsulation() *NetworkInstance_Mpls_Global_PwEncapsulationPath {
	ps := &NetworkInstance_Mpls_Global_PwEncapsulationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pw-encapsulation"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PwEncapsulation (leaf): The PDU type to use with pseudowires.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/pw-encapsulation"
//	Path from root:       "/network-instances/network-instance/mpls/global/*/pw-encapsulation"
func (n *NetworkInstance_Mpls_GlobalPathAny) PwEncapsulation() *NetworkInstance_Mpls_Global_PwEncapsulationPathAny {
	ps := &NetworkInstance_Mpls_Global_PwEncapsulationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pw-encapsulation"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReservedLabelBlockAny (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reserved-label-blocks/reserved-label-block"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
func (n *NetworkInstance_Mpls_GlobalPath) ReservedLabelBlockAny() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
	return ps
}

// ReservedLabelBlockAny (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reserved-label-blocks/reserved-label-block"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
func (n *NetworkInstance_Mpls_GlobalPathAny) ReservedLabelBlockAny() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
	return ps
}

// ReservedLabelBlock (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reserved-label-blocks/reserved-label-block"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
//
//	LocalId: string
func (n *NetworkInstance_Mpls_GlobalPath) ReservedLabelBlock(LocalId string) *NetworkInstance_Mpls_Global_ReservedLabelBlockPath {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
	return ps
}

// ReservedLabelBlock (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reserved-label-blocks/reserved-label-block"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
//
//	LocalId: string
func (n *NetworkInstance_Mpls_GlobalPathAny) ReservedLabelBlock(LocalId string) *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
	return ps
}

// ReservedLabelBlockMap (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reserved-label-blocks/reserved-label-block"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
func (n *NetworkInstance_Mpls_GlobalPath) ReservedLabelBlockMap() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathMap {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlockPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"reserved-label-blocks"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ReservedLabelBlockMap (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reserved-label-blocks/reserved-label-block"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
func (n *NetworkInstance_Mpls_GlobalPathAny) ReservedLabelBlockMap() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathMapAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlockPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reserved-label-blocks"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TtlPropagation (leaf): Enables TTL propagation across the MPLS domain.
// When ttl-propagation is set to true, the IP TTL
// is copied into the MPLS header TTL when pushing
// a label to an IP packet. If false, the IP TTL is
// not copied into the MPLS header TTL and, therefore,
// the IP TTL is not updated in the MPLS domain.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ttl-propagation"
//	Path from root:       "/network-instances/network-instance/mpls/global/*/ttl-propagation"
func (n *NetworkInstance_Mpls_GlobalPath) TtlPropagation() *NetworkInstance_Mpls_Global_TtlPropagationPath {
	ps := &NetworkInstance_Mpls_Global_TtlPropagationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ttl-propagation"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtlPropagation (leaf): Enables TTL propagation across the MPLS domain.
// When ttl-propagation is set to true, the IP TTL
// is copied into the MPLS header TTL when pushing
// a label to an IP packet. If false, the IP TTL is
// not copied into the MPLS header TTL and, therefore,
// the IP TTL is not updated in the MPLS domain.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ttl-propagation"
//	Path from root:       "/network-instances/network-instance/mpls/global/*/ttl-propagation"
func (n *NetworkInstance_Mpls_GlobalPathAny) TtlPropagation() *NetworkInstance_Mpls_Global_TtlPropagationPathAny {
	ps := &NetworkInstance_Mpls_Global_TtlPropagationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ttl-propagation"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_GlobalPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Global] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Global](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_GlobalPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Global] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Global](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_GlobalPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Global] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Global](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_GlobalPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Global] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Global](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
